
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00028468  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002f4  20000000  0003a468  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005814  20000300  0003a770  00030300  2**4
                  ALLOC
  3 .stack        00002004  20005b14  0003ff84  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0003031c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00124f67  00000000  00000000  00030375  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000105b0  00000000  00000000  001552dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001689b  00000000  00000000  0016588c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003c48  00000000  00000000  0017c127  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000038f8  00000000  00000000  0017fd6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028e0d  00000000  00000000  00183667  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005ae2d  00000000  00000000  001ac474  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c3911  00000000  00000000  002072a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000e438  00000000  00000000  002cabb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	18 7b 00 20 79 af 02 00 71 b0 02 00 71 b0 02 00     .{. y...q...q...
	...
   1202c:	0d a1 01 00 00 00 00 00 00 00 00 00 31 a2 01 00     ............1...
   1203c:	79 a2 01 00 71 b0 02 00 71 b0 02 00 71 b0 02 00     y...q...q...q...
   1204c:	c9 70 02 00 f5 65 02 00 71 b0 02 00 61 24 01 00     .p...e..q...a$..
   1205c:	71 b0 02 00 a5 25 01 00 6d 77 02 00 85 77 02 00     q....%..mw...w..
   1206c:	9d 77 02 00 b5 77 02 00 cd 77 02 00 e5 77 02 00     .w...w...w...w..
   1207c:	c1 ae 02 00 d5 ae 02 00 e9 ae 02 00 49 7d 01 00     ............I}..
   1208c:	5d 7d 01 00 71 7d 01 00 00 00 00 00 00 00 00 00     ]}..q}..........
   1209c:	e9 22 01 00 71 b0 02 00 25 24 01 00 71 b0 02 00     ."..q...%$..q...
   120ac:	71 b0 02 00 00 00 00 00                             q.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003a468 	.word	0x0003a468

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003a468 	.word	0x0003a468
   1210c:	0003a468 	.word	0x0003a468
   12110:	00000000 	.word	0x00000000

00012114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	7e5b      	ldrb	r3, [r3, #25]
   12126:	b2db      	uxtb	r3, r3
   12128:	b25b      	sxtb	r3, r3
   1212a:	2b00      	cmp	r3, #0
   1212c:	da01      	bge.n	12132 <adc_is_syncing+0x1e>
		return true;
   1212e:	2301      	movs	r3, #1
   12130:	e000      	b.n	12134 <adc_is_syncing+0x20>
	}

	return false;
   12132:	2300      	movs	r3, #0
}
   12134:	0018      	movs	r0, r3
   12136:	46bd      	mov	sp, r7
   12138:	b004      	add	sp, #16
   1213a:	bd80      	pop	{r7, pc}

0001213c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1213c:	b580      	push	{r7, lr}
   1213e:	b084      	sub	sp, #16
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	681b      	ldr	r3, [r3, #0]
   12148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1214a:	46c0      	nop			; (mov r8, r8)
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	0018      	movs	r0, r3
   12150:	4b0b      	ldr	r3, [pc, #44]	; (12180 <adc_start_conversion+0x44>)
   12152:	4798      	blx	r3
   12154:	1e03      	subs	r3, r0, #0
   12156:	d1f9      	bne.n	1214c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	7b1b      	ldrb	r3, [r3, #12]
   1215c:	b2db      	uxtb	r3, r3
   1215e:	2202      	movs	r2, #2
   12160:	4313      	orrs	r3, r2
   12162:	b2da      	uxtb	r2, r3
   12164:	68fb      	ldr	r3, [r7, #12]
   12166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12168:	46c0      	nop			; (mov r8, r8)
   1216a:	687b      	ldr	r3, [r7, #4]
   1216c:	0018      	movs	r0, r3
   1216e:	4b04      	ldr	r3, [pc, #16]	; (12180 <adc_start_conversion+0x44>)
   12170:	4798      	blx	r3
   12172:	1e03      	subs	r3, r0, #0
   12174:	d1f9      	bne.n	1216a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12176:	46c0      	nop			; (mov r8, r8)
   12178:	46bd      	mov	sp, r7
   1217a:	b004      	add	sp, #16
   1217c:	bd80      	pop	{r7, pc}
   1217e:	46c0      	nop			; (mov r8, r8)
   12180:	00012115 	.word	0x00012115

00012184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12184:	b580      	push	{r7, lr}
   12186:	b084      	sub	sp, #16
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
   1218c:	000a      	movs	r2, r1
   1218e:	1cfb      	adds	r3, r7, #3
   12190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12192:	687b      	ldr	r3, [r7, #4]
   12194:	681b      	ldr	r3, [r3, #0]
   12196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	1cfa      	adds	r2, r7, #3
   1219c:	7812      	ldrb	r2, [r2, #0]
   1219e:	759a      	strb	r2, [r3, #22]
}
   121a0:	46c0      	nop			; (mov r8, r8)
   121a2:	46bd      	mov	sp, r7
   121a4:	b004      	add	sp, #16
   121a6:	bd80      	pop	{r7, pc}

000121a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
   121ae:	0002      	movs	r2, r0
   121b0:	1dfb      	adds	r3, r7, #7
   121b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   121b4:	1dfb      	adds	r3, r7, #7
   121b6:	781a      	ldrb	r2, [r3, #0]
   121b8:	4b47      	ldr	r3, [pc, #284]	; (122d8 <_adc_interrupt_handler+0x130>)
   121ba:	0092      	lsls	r2, r2, #2
   121bc:	58d3      	ldr	r3, [r2, r3]
   121be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   121c0:	68fb      	ldr	r3, [r7, #12]
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	7e1b      	ldrb	r3, [r3, #24]
   121c6:	b2da      	uxtb	r2, r3
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	7ddb      	ldrb	r3, [r3, #23]
   121ce:	b2db      	uxtb	r3, r3
   121d0:	4013      	ands	r3, r2
   121d2:	b2db      	uxtb	r3, r3
   121d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   121d6:	68bb      	ldr	r3, [r7, #8]
   121d8:	2201      	movs	r2, #1
   121da:	4013      	ands	r3, r2
   121dc:	d045      	beq.n	1226a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   121de:	68fb      	ldr	r3, [r7, #12]
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	2201      	movs	r2, #1
   121e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   121e6:	46c0      	nop			; (mov r8, r8)
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	0018      	movs	r0, r3
   121ec:	4b3b      	ldr	r3, [pc, #236]	; (122dc <_adc_interrupt_handler+0x134>)
   121ee:	4798      	blx	r3
   121f0:	1e03      	subs	r3, r0, #0
   121f2:	d1f9      	bne.n	121e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	695b      	ldr	r3, [r3, #20]
   121f8:	1c99      	adds	r1, r3, #2
   121fa:	68fa      	ldr	r2, [r7, #12]
   121fc:	6151      	str	r1, [r2, #20]
   121fe:	68fa      	ldr	r2, [r7, #12]
   12200:	6812      	ldr	r2, [r2, #0]
   12202:	8b52      	ldrh	r2, [r2, #26]
   12204:	b292      	uxth	r2, r2
   12206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	8b1b      	ldrh	r3, [r3, #24]
   1220c:	b29b      	uxth	r3, r3
   1220e:	3b01      	subs	r3, #1
   12210:	b29b      	uxth	r3, r3
   12212:	68fa      	ldr	r2, [r7, #12]
   12214:	1c19      	adds	r1, r3, #0
   12216:	8311      	strh	r1, [r2, #24]
   12218:	2b00      	cmp	r3, #0
   1221a:	d008      	beq.n	1222e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	7f5b      	ldrb	r3, [r3, #29]
   12220:	2b00      	cmp	r3, #0
   12222:	d022      	beq.n	1226a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12224:	68fb      	ldr	r3, [r7, #12]
   12226:	0018      	movs	r0, r3
   12228:	4b2d      	ldr	r3, [pc, #180]	; (122e0 <_adc_interrupt_handler+0x138>)
   1222a:	4798      	blx	r3
   1222c:	e01d      	b.n	1226a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1222e:	68fb      	ldr	r3, [r7, #12]
   12230:	2101      	movs	r1, #1
   12232:	0018      	movs	r0, r3
   12234:	4b2b      	ldr	r3, [pc, #172]	; (122e4 <_adc_interrupt_handler+0x13c>)
   12236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12238:	68fb      	ldr	r3, [r7, #12]
   1223a:	7f1b      	ldrb	r3, [r3, #28]
   1223c:	b2db      	uxtb	r3, r3
   1223e:	2b05      	cmp	r3, #5
   12240:	d113      	bne.n	1226a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12242:	68fb      	ldr	r3, [r7, #12]
   12244:	2200      	movs	r2, #0
   12246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	7edb      	ldrb	r3, [r3, #27]
   1224c:	001a      	movs	r2, r3
   1224e:	2301      	movs	r3, #1
   12250:	4013      	ands	r3, r2
   12252:	d00a      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	7e9b      	ldrb	r3, [r3, #26]
   12258:	001a      	movs	r2, r3
   1225a:	2301      	movs	r3, #1
   1225c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1225e:	d004      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	689b      	ldr	r3, [r3, #8]
   12264:	68fa      	ldr	r2, [r7, #12]
   12266:	0010      	movs	r0, r2
   12268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	2204      	movs	r2, #4
   1226e:	4013      	ands	r3, r2
   12270:	d014      	beq.n	1229c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	2204      	movs	r2, #4
   12278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	7edb      	ldrb	r3, [r3, #27]
   1227e:	001a      	movs	r2, r3
   12280:	2302      	movs	r3, #2
   12282:	4013      	ands	r3, r2
   12284:	d00a      	beq.n	1229c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12286:	68fb      	ldr	r3, [r7, #12]
   12288:	7e9b      	ldrb	r3, [r3, #26]
   1228a:	001a      	movs	r2, r3
   1228c:	2302      	movs	r3, #2
   1228e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12290:	d004      	beq.n	1229c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	68db      	ldr	r3, [r3, #12]
   12296:	68fa      	ldr	r2, [r7, #12]
   12298:	0010      	movs	r0, r2
   1229a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1229c:	68bb      	ldr	r3, [r7, #8]
   1229e:	2202      	movs	r2, #2
   122a0:	4013      	ands	r3, r2
   122a2:	d014      	beq.n	122ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   122a4:	68fb      	ldr	r3, [r7, #12]
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	2202      	movs	r2, #2
   122aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122ac:	68fb      	ldr	r3, [r7, #12]
   122ae:	7edb      	ldrb	r3, [r3, #27]
   122b0:	001a      	movs	r2, r3
   122b2:	2304      	movs	r3, #4
   122b4:	4013      	ands	r3, r2
   122b6:	d00a      	beq.n	122ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	7e9b      	ldrb	r3, [r3, #26]
   122bc:	001a      	movs	r2, r3
   122be:	2304      	movs	r3, #4
   122c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122c2:	d004      	beq.n	122ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	691b      	ldr	r3, [r3, #16]
   122c8:	68fa      	ldr	r2, [r7, #12]
   122ca:	0010      	movs	r0, r2
   122cc:	4798      	blx	r3
		}
	}
}
   122ce:	46c0      	nop			; (mov r8, r8)
   122d0:	46bd      	mov	sp, r7
   122d2:	b004      	add	sp, #16
   122d4:	bd80      	pop	{r7, pc}
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	200045b0 	.word	0x200045b0
   122dc:	00012115 	.word	0x00012115
   122e0:	0001213d 	.word	0x0001213d
   122e4:	00012185 	.word	0x00012185

000122e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   122e8:	b580      	push	{r7, lr}
   122ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   122ec:	2000      	movs	r0, #0
   122ee:	4b02      	ldr	r3, [pc, #8]	; (122f8 <ADC_Handler+0x10>)
   122f0:	4798      	blx	r3
}
   122f2:	46c0      	nop			; (mov r8, r8)
   122f4:	46bd      	mov	sp, r7
   122f6:	bd80      	pop	{r7, pc}
   122f8:	000121a9 	.word	0x000121a9

000122fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b082      	sub	sp, #8
   12300:	af00      	add	r7, sp, #0
   12302:	0002      	movs	r2, r0
   12304:	1dfb      	adds	r3, r7, #7
   12306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12308:	4a07      	ldr	r2, [pc, #28]	; (12328 <system_interrupt_disable+0x2c>)
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	0019      	movs	r1, r3
   12310:	231f      	movs	r3, #31
   12312:	400b      	ands	r3, r1
   12314:	2101      	movs	r1, #1
   12316:	4099      	lsls	r1, r3
   12318:	000b      	movs	r3, r1
   1231a:	0019      	movs	r1, r3
   1231c:	2380      	movs	r3, #128	; 0x80
   1231e:	50d1      	str	r1, [r2, r3]
}
   12320:	46c0      	nop			; (mov r8, r8)
   12322:	46bd      	mov	sp, r7
   12324:	b002      	add	sp, #8
   12326:	bd80      	pop	{r7, pc}
   12328:	e000e100 	.word	0xe000e100

0001232c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1232c:	b580      	push	{r7, lr}
   1232e:	b084      	sub	sp, #16
   12330:	af00      	add	r7, sp, #0
   12332:	0002      	movs	r2, r0
   12334:	1dfb      	adds	r3, r7, #7
   12336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12338:	1dfb      	adds	r3, r7, #7
   1233a:	781a      	ldrb	r2, [r3, #0]
   1233c:	4b37      	ldr	r3, [pc, #220]	; (1241c <_dac_interrupt_handler+0xf0>)
   1233e:	0092      	lsls	r2, r2, #2
   12340:	58d3      	ldr	r3, [r2, r3]
   12342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12344:	68fb      	ldr	r3, [r7, #12]
   12346:	681b      	ldr	r3, [r3, #0]
   12348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1234a:	68bb      	ldr	r3, [r7, #8]
   1234c:	799b      	ldrb	r3, [r3, #6]
   1234e:	b2db      	uxtb	r3, r3
   12350:	001a      	movs	r2, r3
   12352:	2301      	movs	r3, #1
   12354:	4013      	ands	r3, r2
   12356:	d00e      	beq.n	12376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12358:	68bb      	ldr	r3, [r7, #8]
   1235a:	2201      	movs	r2, #1
   1235c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1235e:	68fb      	ldr	r3, [r7, #12]
   12360:	3314      	adds	r3, #20
   12362:	2b00      	cmp	r3, #0
   12364:	d007      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1236a:	2b00      	cmp	r3, #0
   1236c:	d003      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	699b      	ldr	r3, [r3, #24]
   12372:	2000      	movs	r0, #0
   12374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12376:	68bb      	ldr	r3, [r7, #8]
   12378:	799b      	ldrb	r3, [r3, #6]
   1237a:	b2db      	uxtb	r3, r3
   1237c:	001a      	movs	r2, r3
   1237e:	2302      	movs	r3, #2
   12380:	4013      	ands	r3, r2
   12382:	d047      	beq.n	12414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12384:	68bb      	ldr	r3, [r7, #8]
   12386:	2202      	movs	r2, #2
   12388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	899b      	ldrh	r3, [r3, #12]
   1238e:	b29b      	uxth	r3, r3
   12390:	2b00      	cmp	r3, #0
   12392:	d033      	beq.n	123fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12394:	68fb      	ldr	r3, [r7, #12]
   12396:	689a      	ldr	r2, [r3, #8]
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	89db      	ldrh	r3, [r3, #14]
   1239c:	b29b      	uxth	r3, r3
   1239e:	1c59      	adds	r1, r3, #1
   123a0:	b288      	uxth	r0, r1
   123a2:	68f9      	ldr	r1, [r7, #12]
   123a4:	81c8      	strh	r0, [r1, #14]
   123a6:	005b      	lsls	r3, r3, #1
   123a8:	18d3      	adds	r3, r2, r3
   123aa:	881b      	ldrh	r3, [r3, #0]
   123ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   123ae:	68bb      	ldr	r3, [r7, #8]
   123b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   123b2:	68fb      	ldr	r3, [r7, #12]
   123b4:	899b      	ldrh	r3, [r3, #12]
   123b6:	b29b      	uxth	r3, r3
   123b8:	3b01      	subs	r3, #1
   123ba:	b29a      	uxth	r2, r3
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   123c0:	68fb      	ldr	r3, [r7, #12]
   123c2:	899b      	ldrh	r3, [r3, #12]
   123c4:	b29b      	uxth	r3, r3
   123c6:	2b00      	cmp	r3, #0
   123c8:	d118      	bne.n	123fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   123ca:	68fb      	ldr	r3, [r7, #12]
   123cc:	2220      	movs	r2, #32
   123ce:	2100      	movs	r1, #0
   123d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   123d2:	68bb      	ldr	r3, [r7, #8]
   123d4:	2202      	movs	r2, #2
   123d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   123d8:	68bb      	ldr	r3, [r7, #8]
   123da:	2202      	movs	r2, #2
   123dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   123de:	2019      	movs	r0, #25
   123e0:	4b0f      	ldr	r3, [pc, #60]	; (12420 <_dac_interrupt_handler+0xf4>)
   123e2:	4798      	blx	r3

				if ((module->callback) &&
   123e4:	68fb      	ldr	r3, [r7, #12]
   123e6:	3314      	adds	r3, #20
   123e8:	2b00      	cmp	r3, #0
   123ea:	d007      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   123ec:	68fb      	ldr	r3, [r7, #12]
   123ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   123f0:	2b00      	cmp	r3, #0
   123f2:	d003      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	69db      	ldr	r3, [r3, #28]
   123f8:	2000      	movs	r0, #0
   123fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	3314      	adds	r3, #20
   12400:	2b00      	cmp	r3, #0
   12402:	d007      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12408:	2b00      	cmp	r3, #0
   1240a:	d003      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	695b      	ldr	r3, [r3, #20]
   12410:	2000      	movs	r0, #0
   12412:	4798      	blx	r3
		}
	}
}
   12414:	46c0      	nop			; (mov r8, r8)
   12416:	46bd      	mov	sp, r7
   12418:	b004      	add	sp, #16
   1241a:	bd80      	pop	{r7, pc}
   1241c:	200045b4 	.word	0x200045b4
   12420:	000122fd 	.word	0x000122fd

00012424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12424:	b580      	push	{r7, lr}
   12426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12428:	2000      	movs	r0, #0
   1242a:	4b02      	ldr	r3, [pc, #8]	; (12434 <DAC_Handler+0x10>)
   1242c:	4798      	blx	r3
}
   1242e:	46c0      	nop			; (mov r8, r8)
   12430:	46bd      	mov	sp, r7
   12432:	bd80      	pop	{r7, pc}
   12434:	0001232d 	.word	0x0001232d

00012438 <system_interrupt_enter_critical_section>:
{
   12438:	b580      	push	{r7, lr}
   1243a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1243c:	4b02      	ldr	r3, [pc, #8]	; (12448 <system_interrupt_enter_critical_section+0x10>)
   1243e:	4798      	blx	r3
}
   12440:	46c0      	nop			; (mov r8, r8)
   12442:	46bd      	mov	sp, r7
   12444:	bd80      	pop	{r7, pc}
   12446:	46c0      	nop			; (mov r8, r8)
   12448:	00026255 	.word	0x00026255

0001244c <system_interrupt_leave_critical_section>:
{
   1244c:	b580      	push	{r7, lr}
   1244e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <system_interrupt_leave_critical_section+0x10>)
   12452:	4798      	blx	r3
}
   12454:	46c0      	nop			; (mov r8, r8)
   12456:	46bd      	mov	sp, r7
   12458:	bd80      	pop	{r7, pc}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	000262a9 	.word	0x000262a9

00012460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12460:	b580      	push	{r7, lr}
   12462:	b086      	sub	sp, #24
   12464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12466:	4b49      	ldr	r3, [pc, #292]	; (1258c <DMAC_Handler+0x12c>)
   12468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1246a:	4b49      	ldr	r3, [pc, #292]	; (12590 <DMAC_Handler+0x130>)
   1246c:	8c1b      	ldrh	r3, [r3, #32]
   1246e:	b29b      	uxth	r3, r3
   12470:	b2da      	uxtb	r2, r3
   12472:	2317      	movs	r3, #23
   12474:	18fb      	adds	r3, r7, r3
   12476:	210f      	movs	r1, #15
   12478:	400a      	ands	r2, r1
   1247a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1247c:	2317      	movs	r3, #23
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781a      	ldrb	r2, [r3, #0]
   12482:	4b44      	ldr	r3, [pc, #272]	; (12594 <DMAC_Handler+0x134>)
   12484:	0092      	lsls	r2, r2, #2
   12486:	58d3      	ldr	r3, [r2, r3]
   12488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1248a:	4a41      	ldr	r2, [pc, #260]	; (12590 <DMAC_Handler+0x130>)
   1248c:	693b      	ldr	r3, [r7, #16]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	210f      	movs	r1, #15
   12492:	400b      	ands	r3, r1
   12494:	b2d9      	uxtb	r1, r3
   12496:	233f      	movs	r3, #63	; 0x3f
   12498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1249a:	493d      	ldr	r1, [pc, #244]	; (12590 <DMAC_Handler+0x130>)
   1249c:	230f      	movs	r3, #15
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	224e      	movs	r2, #78	; 0x4e
   124a2:	5c8a      	ldrb	r2, [r1, r2]
   124a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   124a6:	693b      	ldr	r3, [r7, #16]
   124a8:	781b      	ldrb	r3, [r3, #0]
   124aa:	4a3b      	ldr	r2, [pc, #236]	; (12598 <DMAC_Handler+0x138>)
   124ac:	011b      	lsls	r3, r3, #4
   124ae:	18d3      	adds	r3, r2, r3
   124b0:	3302      	adds	r3, #2
   124b2:	881b      	ldrh	r3, [r3, #0]
   124b4:	b29b      	uxth	r3, r3
   124b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	4a37      	ldr	r2, [pc, #220]	; (1259c <DMAC_Handler+0x13c>)
   124be:	011b      	lsls	r3, r3, #4
   124c0:	18d3      	adds	r3, r2, r3
   124c2:	3302      	adds	r3, #2
   124c4:	881b      	ldrh	r3, [r3, #0]
   124c6:	b29b      	uxth	r3, r3
   124c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   124ca:	68ba      	ldr	r2, [r7, #8]
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	1ad2      	subs	r2, r2, r3
   124d0:	693b      	ldr	r3, [r7, #16]
   124d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   124d4:	230f      	movs	r3, #15
   124d6:	18fb      	adds	r3, r7, r3
   124d8:	781b      	ldrb	r3, [r3, #0]
   124da:	2201      	movs	r2, #1
   124dc:	4013      	ands	r3, r2
   124de:	d016      	beq.n	1250e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   124e0:	4a2b      	ldr	r2, [pc, #172]	; (12590 <DMAC_Handler+0x130>)
   124e2:	234e      	movs	r3, #78	; 0x4e
   124e4:	2101      	movs	r1, #1
   124e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   124e8:	693b      	ldr	r3, [r7, #16]
   124ea:	2210      	movs	r2, #16
   124ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124ee:	693b      	ldr	r3, [r7, #16]
   124f0:	7c1b      	ldrb	r3, [r3, #16]
   124f2:	001a      	movs	r2, r3
   124f4:	2301      	movs	r3, #1
   124f6:	4013      	ands	r3, r2
   124f8:	d042      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   124fa:	693b      	ldr	r3, [r7, #16]
   124fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124fe:	2b00      	cmp	r3, #0
   12500:	d03e      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12502:	693b      	ldr	r3, [r7, #16]
   12504:	685b      	ldr	r3, [r3, #4]
   12506:	693a      	ldr	r2, [r7, #16]
   12508:	0010      	movs	r0, r2
   1250a:	4798      	blx	r3
   1250c:	e038      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1250e:	230f      	movs	r3, #15
   12510:	18fb      	adds	r3, r7, r3
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	2202      	movs	r2, #2
   12516:	4013      	ands	r3, r2
   12518:	d016      	beq.n	12548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1251a:	4a1d      	ldr	r2, [pc, #116]	; (12590 <DMAC_Handler+0x130>)
   1251c:	234e      	movs	r3, #78	; 0x4e
   1251e:	2102      	movs	r1, #2
   12520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12522:	693b      	ldr	r3, [r7, #16]
   12524:	2200      	movs	r2, #0
   12526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12528:	693b      	ldr	r3, [r7, #16]
   1252a:	7c1b      	ldrb	r3, [r3, #16]
   1252c:	001a      	movs	r2, r3
   1252e:	2302      	movs	r3, #2
   12530:	4013      	ands	r3, r2
   12532:	d025      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12534:	693b      	ldr	r3, [r7, #16]
   12536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12538:	2b00      	cmp	r3, #0
   1253a:	d021      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1253c:	693b      	ldr	r3, [r7, #16]
   1253e:	689b      	ldr	r3, [r3, #8]
   12540:	693a      	ldr	r2, [r7, #16]
   12542:	0010      	movs	r0, r2
   12544:	4798      	blx	r3
   12546:	e01b      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12548:	230f      	movs	r3, #15
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2204      	movs	r2, #4
   12550:	4013      	ands	r3, r2
   12552:	d015      	beq.n	12580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12554:	4a0e      	ldr	r2, [pc, #56]	; (12590 <DMAC_Handler+0x130>)
   12556:	234e      	movs	r3, #78	; 0x4e
   12558:	2104      	movs	r1, #4
   1255a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1255c:	693b      	ldr	r3, [r7, #16]
   1255e:	2206      	movs	r2, #6
   12560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12562:	693b      	ldr	r3, [r7, #16]
   12564:	7c1b      	ldrb	r3, [r3, #16]
   12566:	001a      	movs	r2, r3
   12568:	2304      	movs	r3, #4
   1256a:	4013      	ands	r3, r2
   1256c:	d008      	beq.n	12580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1256e:	693b      	ldr	r3, [r7, #16]
   12570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12572:	2b00      	cmp	r3, #0
   12574:	d004      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12576:	693b      	ldr	r3, [r7, #16]
   12578:	68db      	ldr	r3, [r3, #12]
   1257a:	693a      	ldr	r2, [r7, #16]
   1257c:	0010      	movs	r0, r2
   1257e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12580:	4b07      	ldr	r3, [pc, #28]	; (125a0 <DMAC_Handler+0x140>)
   12582:	4798      	blx	r3
}
   12584:	46c0      	nop			; (mov r8, r8)
   12586:	46bd      	mov	sp, r7
   12588:	b006      	add	sp, #24
   1258a:	bd80      	pop	{r7, pc}
   1258c:	00012439 	.word	0x00012439
   12590:	41004800 	.word	0x41004800
   12594:	20000370 	.word	0x20000370
   12598:	200045c0 	.word	0x200045c0
   1259c:	20000320 	.word	0x20000320
   125a0:	0001244d 	.word	0x0001244d

000125a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   125aa:	4b15      	ldr	r3, [pc, #84]	; (12600 <EVSYS_Handler+0x5c>)
   125ac:	691b      	ldr	r3, [r3, #16]
   125ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   125b0:	4b14      	ldr	r3, [pc, #80]	; (12604 <EVSYS_Handler+0x60>)
   125b2:	699b      	ldr	r3, [r3, #24]
   125b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   125b6:	4b12      	ldr	r3, [pc, #72]	; (12600 <EVSYS_Handler+0x5c>)
   125b8:	689a      	ldr	r2, [r3, #8]
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	431a      	orrs	r2, r3
   125be:	4b10      	ldr	r3, [pc, #64]	; (12600 <EVSYS_Handler+0x5c>)
   125c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   125c2:	4b10      	ldr	r3, [pc, #64]	; (12604 <EVSYS_Handler+0x60>)
   125c4:	4a10      	ldr	r2, [pc, #64]	; (12608 <EVSYS_Handler+0x64>)
   125c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   125c8:	e008      	b.n	125dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   125ca:	687b      	ldr	r3, [r7, #4]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	0018      	movs	r0, r3
   125d4:	4790      	blx	r2
		current_hook = current_hook->next;
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	689b      	ldr	r3, [r3, #8]
   125da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	2b00      	cmp	r3, #0
   125e0:	d1f3      	bne.n	125ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   125e2:	4b07      	ldr	r3, [pc, #28]	; (12600 <EVSYS_Handler+0x5c>)
   125e4:	68db      	ldr	r3, [r3, #12]
   125e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   125e8:	4b05      	ldr	r3, [pc, #20]	; (12600 <EVSYS_Handler+0x5c>)
   125ea:	689b      	ldr	r3, [r3, #8]
   125ec:	683a      	ldr	r2, [r7, #0]
   125ee:	43d2      	mvns	r2, r2
   125f0:	401a      	ands	r2, r3
   125f2:	4b03      	ldr	r3, [pc, #12]	; (12600 <EVSYS_Handler+0x5c>)
   125f4:	609a      	str	r2, [r3, #8]
}
   125f6:	46c0      	nop			; (mov r8, r8)
   125f8:	46bd      	mov	sp, r7
   125fa:	b002      	add	sp, #8
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	20000000 	.word	0x20000000
   12604:	42000400 	.word	0x42000400
   12608:	0f0fffff 	.word	0x0f0fffff

0001260c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	0002      	movs	r2, r0
   12614:	6039      	str	r1, [r7, #0]
   12616:	1dfb      	adds	r3, r7, #7
   12618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1261a:	1dfb      	adds	r3, r7, #7
   1261c:	781b      	ldrb	r3, [r3, #0]
   1261e:	2b01      	cmp	r3, #1
   12620:	d00a      	beq.n	12638 <system_apb_clock_set_mask+0x2c>
   12622:	2b02      	cmp	r3, #2
   12624:	d00f      	beq.n	12646 <system_apb_clock_set_mask+0x3a>
   12626:	2b00      	cmp	r3, #0
   12628:	d114      	bne.n	12654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1262a:	4b0e      	ldr	r3, [pc, #56]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262c:	4a0d      	ldr	r2, [pc, #52]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262e:	6991      	ldr	r1, [r2, #24]
   12630:	683a      	ldr	r2, [r7, #0]
   12632:	430a      	orrs	r2, r1
   12634:	619a      	str	r2, [r3, #24]
			break;
   12636:	e00f      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12638:	4b0a      	ldr	r3, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263a:	4a0a      	ldr	r2, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263c:	69d1      	ldr	r1, [r2, #28]
   1263e:	683a      	ldr	r2, [r7, #0]
   12640:	430a      	orrs	r2, r1
   12642:	61da      	str	r2, [r3, #28]
			break;
   12644:	e008      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12646:	4b07      	ldr	r3, [pc, #28]	; (12664 <system_apb_clock_set_mask+0x58>)
   12648:	4a06      	ldr	r2, [pc, #24]	; (12664 <system_apb_clock_set_mask+0x58>)
   1264a:	6a11      	ldr	r1, [r2, #32]
   1264c:	683a      	ldr	r2, [r7, #0]
   1264e:	430a      	orrs	r2, r1
   12650:	621a      	str	r2, [r3, #32]
			break;
   12652:	e001      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12654:	2317      	movs	r3, #23
   12656:	e000      	b.n	1265a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12658:	2300      	movs	r3, #0
}
   1265a:	0018      	movs	r0, r3
   1265c:	46bd      	mov	sp, r7
   1265e:	b002      	add	sp, #8
   12660:	bd80      	pop	{r7, pc}
   12662:	46c0      	nop			; (mov r8, r8)
   12664:	40000400 	.word	0x40000400

00012668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12668:	b580      	push	{r7, lr}
   1266a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1266c:	2102      	movs	r1, #2
   1266e:	2002      	movs	r0, #2
   12670:	4b07      	ldr	r3, [pc, #28]	; (12690 <_system_events_init+0x28>)
   12672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12674:	4b07      	ldr	r3, [pc, #28]	; (12694 <_system_events_init+0x2c>)
   12676:	2201      	movs	r2, #1
   12678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1267a:	46c0      	nop			; (mov r8, r8)
   1267c:	4b05      	ldr	r3, [pc, #20]	; (12694 <_system_events_init+0x2c>)
   1267e:	781b      	ldrb	r3, [r3, #0]
   12680:	b2db      	uxtb	r3, r3
   12682:	001a      	movs	r2, r3
   12684:	2301      	movs	r3, #1
   12686:	4013      	ands	r3, r2
   12688:	d1f8      	bne.n	1267c <_system_events_init+0x14>
	}
}
   1268a:	46c0      	nop			; (mov r8, r8)
   1268c:	46bd      	mov	sp, r7
   1268e:	bd80      	pop	{r7, pc}
   12690:	0001260d 	.word	0x0001260d
   12694:	42000400 	.word	0x42000400

00012698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12698:	b580      	push	{r7, lr}
   1269a:	b084      	sub	sp, #16
   1269c:	af00      	add	r7, sp, #0
   1269e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   126a0:	687b      	ldr	r3, [r7, #4]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	69db      	ldr	r3, [r3, #28]
   126aa:	2207      	movs	r2, #7
   126ac:	4013      	ands	r3, r2
   126ae:	1e5a      	subs	r2, r3, #1
   126b0:	4193      	sbcs	r3, r2
   126b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   126b4:	0018      	movs	r0, r3
   126b6:	46bd      	mov	sp, r7
   126b8:	b004      	add	sp, #16
   126ba:	bd80      	pop	{r7, pc}

000126bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   126bc:	b580      	push	{r7, lr}
   126be:	b082      	sub	sp, #8
   126c0:	af00      	add	r7, sp, #0
   126c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   126c4:	46c0      	nop			; (mov r8, r8)
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	0018      	movs	r0, r3
   126ca:	4b04      	ldr	r3, [pc, #16]	; (126dc <_i2c_master_wait_for_sync+0x20>)
   126cc:	4798      	blx	r3
   126ce:	1e03      	subs	r3, r0, #0
   126d0:	d1f9      	bne.n	126c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   126d2:	46c0      	nop			; (mov r8, r8)
   126d4:	46bd      	mov	sp, r7
   126d6:	b002      	add	sp, #8
   126d8:	bd80      	pop	{r7, pc}
   126da:	46c0      	nop			; (mov r8, r8)
   126dc:	00012699 	.word	0x00012699

000126e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   126e0:	b580      	push	{r7, lr}
   126e2:	b084      	sub	sp, #16
   126e4:	af00      	add	r7, sp, #0
   126e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	681b      	ldr	r3, [r3, #0]
   126ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   126ee:	68fb      	ldr	r3, [r7, #12]
   126f0:	681b      	ldr	r3, [r3, #0]
   126f2:	011b      	lsls	r3, r3, #4
   126f4:	0fdb      	lsrs	r3, r3, #31
   126f6:	b2db      	uxtb	r3, r3
   126f8:	001a      	movs	r2, r3
   126fa:	230b      	movs	r3, #11
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1e51      	subs	r1, r2, #1
   12700:	418a      	sbcs	r2, r1
   12702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12704:	2308      	movs	r3, #8
   12706:	18fb      	adds	r3, r7, r3
   12708:	687a      	ldr	r2, [r7, #4]
   1270a:	8b52      	ldrh	r2, [r2, #26]
   1270c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	8b9b      	ldrh	r3, [r3, #28]
   12712:	b29a      	uxth	r2, r3
   12714:	2308      	movs	r3, #8
   12716:	18fb      	adds	r3, r7, r3
   12718:	2108      	movs	r1, #8
   1271a:	1879      	adds	r1, r7, r1
   1271c:	8809      	ldrh	r1, [r1, #0]
   1271e:	1a8a      	subs	r2, r1, r2
   12720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	8b9b      	ldrh	r3, [r3, #28]
   12726:	b29b      	uxth	r3, r3
   12728:	3b01      	subs	r3, #1
   1272a:	b29a      	uxth	r2, r3
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12730:	230b      	movs	r3, #11
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d010      	beq.n	1275c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	7adb      	ldrb	r3, [r3, #11]
   1273e:	2b00      	cmp	r3, #0
   12740:	d01c      	beq.n	1277c <_i2c_master_read+0x9c>
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	8b9b      	ldrh	r3, [r3, #28]
   12746:	b29b      	uxth	r3, r3
   12748:	2b01      	cmp	r3, #1
   1274a:	d117      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1274c:	68fb      	ldr	r3, [r7, #12]
   1274e:	685b      	ldr	r3, [r3, #4]
   12750:	2280      	movs	r2, #128	; 0x80
   12752:	02d2      	lsls	r2, r2, #11
   12754:	431a      	orrs	r2, r3
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	605a      	str	r2, [r3, #4]
   1275a:	e00f      	b.n	1277c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1275c:	687b      	ldr	r3, [r7, #4]
   1275e:	7adb      	ldrb	r3, [r3, #11]
   12760:	2b00      	cmp	r3, #0
   12762:	d00b      	beq.n	1277c <_i2c_master_read+0x9c>
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	8b9b      	ldrh	r3, [r3, #28]
   12768:	b29b      	uxth	r3, r3
   1276a:	2b00      	cmp	r3, #0
   1276c:	d106      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1276e:	68fb      	ldr	r3, [r7, #12]
   12770:	685b      	ldr	r3, [r3, #4]
   12772:	2280      	movs	r2, #128	; 0x80
   12774:	02d2      	lsls	r2, r2, #11
   12776:	431a      	orrs	r2, r3
   12778:	68fb      	ldr	r3, [r7, #12]
   1277a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	8b9b      	ldrh	r3, [r3, #28]
   12780:	b29b      	uxth	r3, r3
   12782:	2b00      	cmp	r3, #0
   12784:	d10e      	bne.n	127a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12786:	687b      	ldr	r3, [r7, #4]
   12788:	7a9b      	ldrb	r3, [r3, #10]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d00a      	beq.n	127a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	0018      	movs	r0, r3
   12792:	4b0e      	ldr	r3, [pc, #56]	; (127cc <_i2c_master_read+0xec>)
   12794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12796:	68fb      	ldr	r3, [r7, #12]
   12798:	685b      	ldr	r3, [r3, #4]
   1279a:	22c0      	movs	r2, #192	; 0xc0
   1279c:	0292      	lsls	r2, r2, #10
   1279e:	431a      	orrs	r2, r3
   127a0:	68fb      	ldr	r3, [r7, #12]
   127a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	0018      	movs	r0, r3
   127a8:	4b08      	ldr	r3, [pc, #32]	; (127cc <_i2c_master_read+0xec>)
   127aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	6a1a      	ldr	r2, [r3, #32]
   127b0:	2308      	movs	r3, #8
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	881b      	ldrh	r3, [r3, #0]
   127b6:	18d3      	adds	r3, r2, r3
   127b8:	68fa      	ldr	r2, [r7, #12]
   127ba:	2128      	movs	r1, #40	; 0x28
   127bc:	5c52      	ldrb	r2, [r2, r1]
   127be:	b2d2      	uxtb	r2, r2
   127c0:	701a      	strb	r2, [r3, #0]
}
   127c2:	46c0      	nop			; (mov r8, r8)
   127c4:	46bd      	mov	sp, r7
   127c6:	b004      	add	sp, #16
   127c8:	bd80      	pop	{r7, pc}
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	000126bd 	.word	0x000126bd

000127d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   127d0:	b580      	push	{r7, lr}
   127d2:	b084      	sub	sp, #16
   127d4:	af00      	add	r7, sp, #0
   127d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   127de:	68fb      	ldr	r3, [r7, #12]
   127e0:	8b5b      	ldrh	r3, [r3, #26]
   127e2:	b29b      	uxth	r3, r3
   127e4:	001a      	movs	r2, r3
   127e6:	2304      	movs	r3, #4
   127e8:	4013      	ands	r3, r2
   127ea:	d004      	beq.n	127f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	2225      	movs	r2, #37	; 0x25
   127f0:	211e      	movs	r1, #30
   127f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   127f4:	e024      	b.n	12840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   127f6:	230a      	movs	r3, #10
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	687a      	ldr	r2, [r7, #4]
   127fc:	8b52      	ldrh	r2, [r2, #26]
   127fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	8b9b      	ldrh	r3, [r3, #28]
   12804:	b29a      	uxth	r2, r3
   12806:	230a      	movs	r3, #10
   12808:	18fb      	adds	r3, r7, r3
   1280a:	210a      	movs	r1, #10
   1280c:	1879      	adds	r1, r7, r1
   1280e:	8809      	ldrh	r1, [r1, #0]
   12810:	1a8a      	subs	r2, r1, r2
   12812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	8b9b      	ldrh	r3, [r3, #28]
   12818:	b29b      	uxth	r3, r3
   1281a:	3b01      	subs	r3, #1
   1281c:	b29a      	uxth	r2, r3
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   12822:	687b      	ldr	r3, [r7, #4]
   12824:	0018      	movs	r0, r3
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <_i2c_master_write+0x78>)
   12828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1282a:	687b      	ldr	r3, [r7, #4]
   1282c:	6a1a      	ldr	r2, [r3, #32]
   1282e:	230a      	movs	r3, #10
   12830:	18fb      	adds	r3, r7, r3
   12832:	881b      	ldrh	r3, [r3, #0]
   12834:	18d3      	adds	r3, r2, r3
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	b2d9      	uxtb	r1, r3
   1283a:	68fb      	ldr	r3, [r7, #12]
   1283c:	2228      	movs	r2, #40	; 0x28
   1283e:	5499      	strb	r1, [r3, r2]
}
   12840:	46bd      	mov	sp, r7
   12842:	b004      	add	sp, #16
   12844:	bd80      	pop	{r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000126bd 	.word	0x000126bd

0001284c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   1284c:	b580      	push	{r7, lr}
   1284e:	b084      	sub	sp, #16
   12850:	af00      	add	r7, sp, #0
   12852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	681b      	ldr	r3, [r3, #0]
   12858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   1285a:	68fb      	ldr	r3, [r7, #12]
   1285c:	7e1b      	ldrb	r3, [r3, #24]
   1285e:	b2db      	uxtb	r3, r3
   12860:	001a      	movs	r2, r3
   12862:	2301      	movs	r3, #1
   12864:	4013      	ands	r3, r2
   12866:	d02b      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   12868:	68fb      	ldr	r3, [r7, #12]
   1286a:	2201      	movs	r2, #1
   1286c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	8b5b      	ldrh	r3, [r3, #26]
   12872:	b29b      	uxth	r3, r3
   12874:	001a      	movs	r2, r3
   12876:	2302      	movs	r3, #2
   12878:	4013      	ands	r3, r2
   1287a:	d004      	beq.n	12886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	2225      	movs	r2, #37	; 0x25
   12880:	2141      	movs	r1, #65	; 0x41
   12882:	5499      	strb	r1, [r3, r2]
   12884:	e01c      	b.n	128c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12886:	68fb      	ldr	r3, [r7, #12]
   12888:	8b5b      	ldrh	r3, [r3, #26]
   1288a:	b29b      	uxth	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2304      	movs	r3, #4
   12890:	4013      	ands	r3, r2
   12892:	d015      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	2225      	movs	r2, #37	; 0x25
   12898:	2118      	movs	r1, #24
   1289a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	2200      	movs	r2, #0
   128a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   128a2:	687b      	ldr	r3, [r7, #4]
   128a4:	7a9b      	ldrb	r3, [r3, #10]
   128a6:	2b00      	cmp	r3, #0
   128a8:	d00a      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	0018      	movs	r0, r3
   128ae:	4b13      	ldr	r3, [pc, #76]	; (128fc <_i2c_master_async_address_response+0xb0>)
   128b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	685b      	ldr	r3, [r3, #4]
   128b6:	22c0      	movs	r2, #192	; 0xc0
   128b8:	0292      	lsls	r2, r2, #10
   128ba:	431a      	orrs	r2, r3
   128bc:	68fb      	ldr	r3, [r7, #12]
   128be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	8b9b      	ldrh	r3, [r3, #28]
   128c4:	b29a      	uxth	r2, r3
   128c6:	687b      	ldr	r3, [r7, #4]
   128c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	2225      	movs	r2, #37	; 0x25
   128ce:	5c9b      	ldrb	r3, [r3, r2]
   128d0:	b2db      	uxtb	r3, r3
   128d2:	2b05      	cmp	r3, #5
   128d4:	d10e      	bne.n	128f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	2224      	movs	r2, #36	; 0x24
   128da:	5c9b      	ldrb	r3, [r3, r2]
   128dc:	b2db      	uxtb	r3, r3
   128de:	2b00      	cmp	r3, #0
   128e0:	d104      	bne.n	128ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	0018      	movs	r0, r3
   128e6:	4b06      	ldr	r3, [pc, #24]	; (12900 <_i2c_master_async_address_response+0xb4>)
   128e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   128ea:	e003      	b.n	128f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	0018      	movs	r0, r3
   128f0:	4b04      	ldr	r3, [pc, #16]	; (12904 <_i2c_master_async_address_response+0xb8>)
   128f2:	4798      	blx	r3
}
   128f4:	46c0      	nop			; (mov r8, r8)
   128f6:	46bd      	mov	sp, r7
   128f8:	b004      	add	sp, #16
   128fa:	bd80      	pop	{r7, pc}
   128fc:	000126bd 	.word	0x000126bd
   12900:	000127d1 	.word	0x000127d1
   12904:	000126e1 	.word	0x000126e1

00012908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12908:	b580      	push	{r7, lr}
   1290a:	b084      	sub	sp, #16
   1290c:	af00      	add	r7, sp, #0
   1290e:	60f8      	str	r0, [r7, #12]
   12910:	60b9      	str	r1, [r7, #8]
   12912:	1dfb      	adds	r3, r7, #7
   12914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	68fa      	ldr	r2, [r7, #12]
   1291c:	3302      	adds	r3, #2
   1291e:	009b      	lsls	r3, r3, #2
   12920:	18d3      	adds	r3, r2, r3
   12922:	3304      	adds	r3, #4
   12924:	68ba      	ldr	r2, [r7, #8]
   12926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	7e1b      	ldrb	r3, [r3, #24]
   1292c:	b2db      	uxtb	r3, r3
   1292e:	b25a      	sxtb	r2, r3
   12930:	1dfb      	adds	r3, r7, #7
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	2101      	movs	r1, #1
   12936:	4099      	lsls	r1, r3
   12938:	000b      	movs	r3, r1
   1293a:	b25b      	sxtb	r3, r3
   1293c:	4313      	orrs	r3, r2
   1293e:	b25b      	sxtb	r3, r3
   12940:	b2da      	uxtb	r2, r3
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	761a      	strb	r2, [r3, #24]
}
   12946:	46c0      	nop			; (mov r8, r8)
   12948:	46bd      	mov	sp, r7
   1294a:	b004      	add	sp, #16
   1294c:	bd80      	pop	{r7, pc}
	...

00012950 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12950:	b590      	push	{r4, r7, lr}
   12952:	b087      	sub	sp, #28
   12954:	af00      	add	r7, sp, #0
   12956:	6078      	str	r0, [r7, #4]
   12958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1295a:	687b      	ldr	r3, [r7, #4]
   1295c:	681b      	ldr	r3, [r3, #0]
   1295e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   12960:	683b      	ldr	r3, [r7, #0]
   12962:	685a      	ldr	r2, [r3, #4]
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12968:	683b      	ldr	r3, [r7, #0]
   1296a:	885a      	ldrh	r2, [r3, #2]
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12970:	687b      	ldr	r3, [r7, #4]
   12972:	2224      	movs	r2, #36	; 0x24
   12974:	2101      	movs	r1, #1
   12976:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	2225      	movs	r2, #37	; 0x25
   1297c:	2105      	movs	r1, #5
   1297e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12980:	693b      	ldr	r3, [r7, #16]
   12982:	681b      	ldr	r3, [r3, #0]
   12984:	011b      	lsls	r3, r3, #4
   12986:	0fdb      	lsrs	r3, r3, #31
   12988:	b2db      	uxtb	r3, r3
   1298a:	001a      	movs	r2, r3
   1298c:	230f      	movs	r3, #15
   1298e:	18fb      	adds	r3, r7, r3
   12990:	1e51      	subs	r1, r2, #1
   12992:	418a      	sbcs	r2, r1
   12994:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12996:	683b      	ldr	r3, [r7, #0]
   12998:	7a5b      	ldrb	r3, [r3, #9]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d006      	beq.n	129ac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1299e:	683b      	ldr	r3, [r7, #0]
   129a0:	7a9a      	ldrb	r2, [r3, #10]
   129a2:	687b      	ldr	r3, [r7, #4]
   129a4:	0011      	movs	r1, r2
   129a6:	0018      	movs	r0, r3
   129a8:	4b3b      	ldr	r3, [pc, #236]	; (12a98 <_i2c_master_read_packet+0x148>)
   129aa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d00b      	beq.n	129ce <_i2c_master_read_packet+0x7e>
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	885b      	ldrh	r3, [r3, #2]
   129ba:	2b01      	cmp	r3, #1
   129bc:	d107      	bne.n	129ce <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   129be:	693b      	ldr	r3, [r7, #16]
   129c0:	685b      	ldr	r3, [r3, #4]
   129c2:	2280      	movs	r2, #128	; 0x80
   129c4:	02d2      	lsls	r2, r2, #11
   129c6:	431a      	orrs	r2, r3
   129c8:	693b      	ldr	r3, [r7, #16]
   129ca:	605a      	str	r2, [r3, #4]
   129cc:	e005      	b.n	129da <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   129ce:	693b      	ldr	r3, [r7, #16]
   129d0:	685b      	ldr	r3, [r3, #4]
   129d2:	4a32      	ldr	r2, [pc, #200]	; (12a9c <_i2c_master_read_packet+0x14c>)
   129d4:	401a      	ands	r2, r3
   129d6:	693b      	ldr	r3, [r7, #16]
   129d8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   129da:	683b      	ldr	r3, [r7, #0]
   129dc:	7a1b      	ldrb	r3, [r3, #8]
   129de:	2b00      	cmp	r3, #0
   129e0:	d045      	beq.n	12a6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   129e2:	683b      	ldr	r3, [r7, #0]
   129e4:	881b      	ldrh	r3, [r3, #0]
   129e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129e8:	683b      	ldr	r3, [r7, #0]
   129ea:	7a5b      	ldrb	r3, [r3, #9]
   129ec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   129ee:	4313      	orrs	r3, r2
   129f0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129f2:	2380      	movs	r3, #128	; 0x80
   129f4:	021b      	lsls	r3, r3, #8
   129f6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   129f8:	693b      	ldr	r3, [r7, #16]
   129fa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   129fc:	2317      	movs	r3, #23
   129fe:	18fc      	adds	r4, r7, r3
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	0018      	movs	r0, r3
   12a04:	4b26      	ldr	r3, [pc, #152]	; (12aa0 <_i2c_master_read_packet+0x150>)
   12a06:	4798      	blx	r3
   12a08:	0003      	movs	r3, r0
   12a0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12a0c:	693b      	ldr	r3, [r7, #16]
   12a0e:	685b      	ldr	r3, [r3, #4]
   12a10:	4a22      	ldr	r2, [pc, #136]	; (12a9c <_i2c_master_read_packet+0x14c>)
   12a12:	401a      	ands	r2, r3
   12a14:	693b      	ldr	r3, [r7, #16]
   12a16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12a18:	2317      	movs	r3, #23
   12a1a:	18fb      	adds	r3, r7, r3
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d107      	bne.n	12a32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   12a22:	2317      	movs	r3, #23
   12a24:	18fc      	adds	r4, r7, r3
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	0018      	movs	r0, r3
   12a2a:	4b1e      	ldr	r3, [pc, #120]	; (12aa4 <_i2c_master_read_packet+0x154>)
   12a2c:	4798      	blx	r3
   12a2e:	0003      	movs	r3, r0
   12a30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   12a32:	2317      	movs	r3, #23
   12a34:	18fb      	adds	r3, r7, r3
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d114      	bne.n	12a66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   12a3c:	693b      	ldr	r3, [r7, #16]
   12a3e:	2203      	movs	r2, #3
   12a40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a42:	683b      	ldr	r3, [r7, #0]
   12a44:	881b      	ldrh	r3, [r3, #0]
   12a46:	0a1b      	lsrs	r3, r3, #8
   12a48:	b29b      	uxth	r3, r3
   12a4a:	2278      	movs	r2, #120	; 0x78
   12a4c:	4313      	orrs	r3, r2
   12a4e:	b29b      	uxth	r3, r3
   12a50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a52:	683b      	ldr	r3, [r7, #0]
   12a54:	7a5b      	ldrb	r3, [r3, #9]
   12a56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a5a:	2201      	movs	r2, #1
   12a5c:	4313      	orrs	r3, r2
   12a5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a60:	693b      	ldr	r3, [r7, #16]
   12a62:	625a      	str	r2, [r3, #36]	; 0x24
   12a64:	e012      	b.n	12a8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   12a66:	2317      	movs	r3, #23
   12a68:	18fb      	adds	r3, r7, r3
   12a6a:	781b      	ldrb	r3, [r3, #0]
   12a6c:	e00f      	b.n	12a8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   12a6e:	693b      	ldr	r3, [r7, #16]
   12a70:	2203      	movs	r2, #3
   12a72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a74:	683b      	ldr	r3, [r7, #0]
   12a76:	881b      	ldrh	r3, [r3, #0]
   12a78:	005b      	lsls	r3, r3, #1
   12a7a:	2201      	movs	r2, #1
   12a7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12a7e:	683b      	ldr	r3, [r7, #0]
   12a80:	7a5b      	ldrb	r3, [r3, #9]
   12a82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a84:	4313      	orrs	r3, r2
   12a86:	001a      	movs	r2, r3
   12a88:	693b      	ldr	r3, [r7, #16]
   12a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12a8c:	2300      	movs	r3, #0
}
   12a8e:	0018      	movs	r0, r3
   12a90:	46bd      	mov	sp, r7
   12a92:	b007      	add	sp, #28
   12a94:	bd90      	pop	{r4, r7, pc}
   12a96:	46c0      	nop			; (mov r8, r8)
   12a98:	00017cf5 	.word	0x00017cf5
   12a9c:	fffbffff 	.word	0xfffbffff
   12aa0:	00017c97 	.word	0x00017c97
   12aa4:	00017c39 	.word	0x00017c39

00012aa8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12aa8:	b580      	push	{r7, lr}
   12aaa:	b082      	sub	sp, #8
   12aac:	af00      	add	r7, sp, #0
   12aae:	6078      	str	r0, [r7, #4]
   12ab0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   12ab2:	687b      	ldr	r3, [r7, #4]
   12ab4:	8b9b      	ldrh	r3, [r3, #28]
   12ab6:	b29b      	uxth	r3, r3
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d001      	beq.n	12ac0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12abc:	2305      	movs	r3, #5
   12abe:	e00c      	b.n	12ada <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	2201      	movs	r2, #1
   12ac4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	2201      	movs	r2, #1
   12aca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12acc:	683a      	ldr	r2, [r7, #0]
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	0011      	movs	r1, r2
   12ad2:	0018      	movs	r0, r3
   12ad4:	4b03      	ldr	r3, [pc, #12]	; (12ae4 <i2c_master_read_packet_job+0x3c>)
   12ad6:	4798      	blx	r3
   12ad8:	0003      	movs	r3, r0
}
   12ada:	0018      	movs	r0, r3
   12adc:	46bd      	mov	sp, r7
   12ade:	b002      	add	sp, #8
   12ae0:	bd80      	pop	{r7, pc}
   12ae2:	46c0      	nop			; (mov r8, r8)
   12ae4:	00012951 	.word	0x00012951

00012ae8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12ae8:	b580      	push	{r7, lr}
   12aea:	b084      	sub	sp, #16
   12aec:	af00      	add	r7, sp, #0
   12aee:	6078      	str	r0, [r7, #4]
   12af0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12af8:	683b      	ldr	r3, [r7, #0]
   12afa:	7a5b      	ldrb	r3, [r3, #9]
   12afc:	2b00      	cmp	r3, #0
   12afe:	d006      	beq.n	12b0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12b00:	683b      	ldr	r3, [r7, #0]
   12b02:	7a9a      	ldrb	r2, [r3, #10]
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	0011      	movs	r1, r2
   12b08:	0018      	movs	r0, r3
   12b0a:	4b1e      	ldr	r3, [pc, #120]	; (12b84 <_i2c_master_write_packet+0x9c>)
   12b0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12b0e:	68fb      	ldr	r3, [r7, #12]
   12b10:	685b      	ldr	r3, [r3, #4]
   12b12:	4a1d      	ldr	r2, [pc, #116]	; (12b88 <_i2c_master_write_packet+0xa0>)
   12b14:	401a      	ands	r2, r3
   12b16:	68fb      	ldr	r3, [r7, #12]
   12b18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12b1a:	683b      	ldr	r3, [r7, #0]
   12b1c:	685a      	ldr	r2, [r3, #4]
   12b1e:	687b      	ldr	r3, [r7, #4]
   12b20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	885a      	ldrh	r2, [r3, #2]
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	2224      	movs	r2, #36	; 0x24
   12b2e:	2100      	movs	r1, #0
   12b30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12b32:	687b      	ldr	r3, [r7, #4]
   12b34:	2225      	movs	r2, #37	; 0x25
   12b36:	2105      	movs	r1, #5
   12b38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12b3a:	68fb      	ldr	r3, [r7, #12]
   12b3c:	2203      	movs	r2, #3
   12b3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12b40:	683b      	ldr	r3, [r7, #0]
   12b42:	7a1b      	ldrb	r3, [r3, #8]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d00d      	beq.n	12b64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b48:	683b      	ldr	r3, [r7, #0]
   12b4a:	881b      	ldrh	r3, [r3, #0]
   12b4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b4e:	683b      	ldr	r3, [r7, #0]
   12b50:	7a5b      	ldrb	r3, [r3, #9]
   12b52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b54:	4313      	orrs	r3, r2
   12b56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b58:	2380      	movs	r3, #128	; 0x80
   12b5a:	021b      	lsls	r3, r3, #8
   12b5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b5e:	68fb      	ldr	r3, [r7, #12]
   12b60:	625a      	str	r2, [r3, #36]	; 0x24
   12b62:	e009      	b.n	12b78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b64:	683b      	ldr	r3, [r7, #0]
   12b66:	881b      	ldrh	r3, [r3, #0]
   12b68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12b6a:	683b      	ldr	r3, [r7, #0]
   12b6c:	7a5b      	ldrb	r3, [r3, #9]
   12b6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b70:	4313      	orrs	r3, r2
   12b72:	001a      	movs	r2, r3
   12b74:	68fb      	ldr	r3, [r7, #12]
   12b76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12b78:	2300      	movs	r3, #0
}
   12b7a:	0018      	movs	r0, r3
   12b7c:	46bd      	mov	sp, r7
   12b7e:	b004      	add	sp, #16
   12b80:	bd80      	pop	{r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	00017cf5 	.word	0x00017cf5
   12b88:	fffbffff 	.word	0xfffbffff

00012b8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b8c:	b580      	push	{r7, lr}
   12b8e:	b082      	sub	sp, #8
   12b90:	af00      	add	r7, sp, #0
   12b92:	6078      	str	r0, [r7, #4]
   12b94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	8b9b      	ldrh	r3, [r3, #28]
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	d001      	beq.n	12ba4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   12ba0:	2305      	movs	r3, #5
   12ba2:	e00c      	b.n	12bbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12ba4:	687b      	ldr	r3, [r7, #4]
   12ba6:	2201      	movs	r2, #1
   12ba8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	2201      	movs	r2, #1
   12bae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12bb0:	683a      	ldr	r2, [r7, #0]
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	0011      	movs	r1, r2
   12bb6:	0018      	movs	r0, r3
   12bb8:	4b03      	ldr	r3, [pc, #12]	; (12bc8 <i2c_master_write_packet_job+0x3c>)
   12bba:	4798      	blx	r3
   12bbc:	0003      	movs	r3, r0
}
   12bbe:	0018      	movs	r0, r3
   12bc0:	46bd      	mov	sp, r7
   12bc2:	b002      	add	sp, #8
   12bc4:	bd80      	pop	{r7, pc}
   12bc6:	46c0      	nop			; (mov r8, r8)
   12bc8:	00012ae9 	.word	0x00012ae9

00012bcc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12bcc:	b580      	push	{r7, lr}
   12bce:	b086      	sub	sp, #24
   12bd0:	af00      	add	r7, sp, #0
   12bd2:	0002      	movs	r2, r0
   12bd4:	1dfb      	adds	r3, r7, #7
   12bd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12bd8:	1dfb      	adds	r3, r7, #7
   12bda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12bdc:	4b93      	ldr	r3, [pc, #588]	; (12e2c <_i2c_master_interrupt_handler+0x260>)
   12bde:	0092      	lsls	r2, r2, #2
   12be0:	58d3      	ldr	r3, [r2, r3]
   12be2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12be4:	697b      	ldr	r3, [r7, #20]
   12be6:	681b      	ldr	r3, [r3, #0]
   12be8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12bea:	693b      	ldr	r3, [r7, #16]
   12bec:	681b      	ldr	r3, [r3, #0]
   12bee:	011b      	lsls	r3, r3, #4
   12bf0:	0fdb      	lsrs	r3, r3, #31
   12bf2:	b2db      	uxtb	r3, r3
   12bf4:	001a      	movs	r2, r3
   12bf6:	230f      	movs	r3, #15
   12bf8:	18fb      	adds	r3, r7, r3
   12bfa:	1e51      	subs	r1, r2, #1
   12bfc:	418a      	sbcs	r2, r1
   12bfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12c00:	230e      	movs	r3, #14
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	697a      	ldr	r2, [r7, #20]
   12c06:	7e52      	ldrb	r2, [r2, #25]
   12c08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   12c0a:	697b      	ldr	r3, [r7, #20]
   12c0c:	7e1b      	ldrb	r3, [r3, #24]
   12c0e:	b2da      	uxtb	r2, r3
   12c10:	230e      	movs	r3, #14
   12c12:	18fb      	adds	r3, r7, r3
   12c14:	210e      	movs	r1, #14
   12c16:	1879      	adds	r1, r7, r1
   12c18:	7809      	ldrb	r1, [r1, #0]
   12c1a:	400a      	ands	r2, r1
   12c1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   12c1e:	697b      	ldr	r3, [r7, #20]
   12c20:	8b5b      	ldrh	r3, [r3, #26]
   12c22:	b29b      	uxth	r3, r3
   12c24:	2b00      	cmp	r3, #0
   12c26:	d109      	bne.n	12c3c <_i2c_master_interrupt_handler+0x70>
   12c28:	697b      	ldr	r3, [r7, #20]
   12c2a:	8b9b      	ldrh	r3, [r3, #28]
   12c2c:	b29b      	uxth	r3, r3
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d004      	beq.n	12c3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   12c32:	697b      	ldr	r3, [r7, #20]
   12c34:	0018      	movs	r0, r3
   12c36:	4b7e      	ldr	r3, [pc, #504]	; (12e30 <_i2c_master_interrupt_handler+0x264>)
   12c38:	4798      	blx	r3
   12c3a:	e070      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c3c:	697b      	ldr	r3, [r7, #20]
   12c3e:	8b5b      	ldrh	r3, [r3, #26]
   12c40:	b29b      	uxth	r3, r3
   12c42:	2b00      	cmp	r3, #0
   12c44:	d039      	beq.n	12cba <_i2c_master_interrupt_handler+0xee>
   12c46:	697b      	ldr	r3, [r7, #20]
   12c48:	8b9b      	ldrh	r3, [r3, #28]
   12c4a:	b29b      	uxth	r3, r3
   12c4c:	2b00      	cmp	r3, #0
   12c4e:	d134      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   12c50:	697b      	ldr	r3, [r7, #20]
   12c52:	2225      	movs	r2, #37	; 0x25
   12c54:	5c9b      	ldrb	r3, [r3, r2]
   12c56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c58:	2b05      	cmp	r3, #5
   12c5a:	d12e      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12c5c:	697b      	ldr	r3, [r7, #20]
   12c5e:	2224      	movs	r2, #36	; 0x24
   12c60:	5c9b      	ldrb	r3, [r3, r2]
   12c62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12c64:	2b00      	cmp	r3, #0
   12c66:	d128      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12c68:	693b      	ldr	r3, [r7, #16]
   12c6a:	2203      	movs	r2, #3
   12c6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12c6e:	697b      	ldr	r3, [r7, #20]
   12c70:	2200      	movs	r2, #0
   12c72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12c74:	697b      	ldr	r3, [r7, #20]
   12c76:	2225      	movs	r2, #37	; 0x25
   12c78:	2100      	movs	r1, #0
   12c7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12c7c:	697b      	ldr	r3, [r7, #20]
   12c7e:	7a9b      	ldrb	r3, [r3, #10]
   12c80:	2b00      	cmp	r3, #0
   12c82:	d00b      	beq.n	12c9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12c84:	697b      	ldr	r3, [r7, #20]
   12c86:	0018      	movs	r0, r3
   12c88:	4b6a      	ldr	r3, [pc, #424]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12c8c:	693b      	ldr	r3, [r7, #16]
   12c8e:	685b      	ldr	r3, [r3, #4]
   12c90:	22c0      	movs	r2, #192	; 0xc0
   12c92:	0292      	lsls	r2, r2, #10
   12c94:	431a      	orrs	r2, r3
   12c96:	693b      	ldr	r3, [r7, #16]
   12c98:	605a      	str	r2, [r3, #4]
   12c9a:	e002      	b.n	12ca2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12c9c:	693b      	ldr	r3, [r7, #16]
   12c9e:	2201      	movs	r2, #1
   12ca0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12ca2:	230e      	movs	r3, #14
   12ca4:	18fb      	adds	r3, r7, r3
   12ca6:	781b      	ldrb	r3, [r3, #0]
   12ca8:	2201      	movs	r2, #1
   12caa:	4013      	ands	r3, r2
   12cac:	d037      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12cae:	697b      	ldr	r3, [r7, #20]
   12cb0:	68db      	ldr	r3, [r3, #12]
   12cb2:	697a      	ldr	r2, [r7, #20]
   12cb4:	0010      	movs	r0, r2
   12cb6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12cb8:	e031      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12cba:	697b      	ldr	r3, [r7, #20]
   12cbc:	8b5b      	ldrh	r3, [r3, #26]
   12cbe:	b29b      	uxth	r3, r3
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d02c      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
   12cc4:	697b      	ldr	r3, [r7, #20]
   12cc6:	8b9b      	ldrh	r3, [r3, #28]
   12cc8:	b29b      	uxth	r3, r3
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d027      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12cce:	693b      	ldr	r3, [r7, #16]
   12cd0:	8b5b      	ldrh	r3, [r3, #26]
   12cd2:	b29b      	uxth	r3, r3
   12cd4:	001a      	movs	r2, r3
   12cd6:	2320      	movs	r3, #32
   12cd8:	4013      	ands	r3, r2
   12cda:	d111      	bne.n	12d00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cdc:	230f      	movs	r3, #15
   12cde:	18fb      	adds	r3, r7, r3
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	2201      	movs	r2, #1
   12ce4:	4053      	eors	r3, r2
   12ce6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d104      	bne.n	12cf6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cec:	697b      	ldr	r3, [r7, #20]
   12cee:	8b9b      	ldrh	r3, [r3, #28]
   12cf0:	b29b      	uxth	r3, r3
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d004      	beq.n	12d00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12cf6:	697b      	ldr	r3, [r7, #20]
   12cf8:	2225      	movs	r2, #37	; 0x25
   12cfa:	2141      	movs	r1, #65	; 0x41
   12cfc:	5499      	strb	r1, [r3, r2]
   12cfe:	e00e      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12d00:	697b      	ldr	r3, [r7, #20]
   12d02:	2224      	movs	r2, #36	; 0x24
   12d04:	5c9b      	ldrb	r3, [r3, r2]
   12d06:	b2db      	uxtb	r3, r3
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d104      	bne.n	12d16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   12d0c:	697b      	ldr	r3, [r7, #20]
   12d0e:	0018      	movs	r0, r3
   12d10:	4b49      	ldr	r3, [pc, #292]	; (12e38 <_i2c_master_interrupt_handler+0x26c>)
   12d12:	4798      	blx	r3
   12d14:	e003      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   12d16:	697b      	ldr	r3, [r7, #20]
   12d18:	0018      	movs	r0, r3
   12d1a:	4b48      	ldr	r3, [pc, #288]	; (12e3c <_i2c_master_interrupt_handler+0x270>)
   12d1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d1e:	697b      	ldr	r3, [r7, #20]
   12d20:	8b5b      	ldrh	r3, [r3, #26]
   12d22:	b29b      	uxth	r3, r3
   12d24:	2b00      	cmp	r3, #0
   12d26:	d047      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
   12d28:	697b      	ldr	r3, [r7, #20]
   12d2a:	8b9b      	ldrh	r3, [r3, #28]
   12d2c:	b29b      	uxth	r3, r3
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d142      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   12d32:	697b      	ldr	r3, [r7, #20]
   12d34:	2225      	movs	r2, #37	; 0x25
   12d36:	5c9b      	ldrb	r3, [r3, r2]
   12d38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d3a:	2b05      	cmp	r3, #5
   12d3c:	d13c      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12d3e:	697b      	ldr	r3, [r7, #20]
   12d40:	2224      	movs	r2, #36	; 0x24
   12d42:	5c9b      	ldrb	r3, [r3, r2]
   12d44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12d46:	2b01      	cmp	r3, #1
   12d48:	d136      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	7e1b      	ldrb	r3, [r3, #24]
   12d4e:	b2db      	uxtb	r3, r3
   12d50:	001a      	movs	r2, r3
   12d52:	2302      	movs	r3, #2
   12d54:	4013      	ands	r3, r2
   12d56:	d002      	beq.n	12d5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12d58:	693b      	ldr	r3, [r7, #16]
   12d5a:	2202      	movs	r2, #2
   12d5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12d5e:	693b      	ldr	r3, [r7, #16]
   12d60:	2203      	movs	r2, #3
   12d62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12d64:	697b      	ldr	r3, [r7, #20]
   12d66:	2200      	movs	r2, #0
   12d68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12d6a:	697b      	ldr	r3, [r7, #20]
   12d6c:	2225      	movs	r2, #37	; 0x25
   12d6e:	2100      	movs	r1, #0
   12d70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12d72:	230e      	movs	r3, #14
   12d74:	18fb      	adds	r3, r7, r3
   12d76:	781b      	ldrb	r3, [r3, #0]
   12d78:	2202      	movs	r2, #2
   12d7a:	4013      	ands	r3, r2
   12d7c:	d00b      	beq.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12d7e:	697b      	ldr	r3, [r7, #20]
   12d80:	2224      	movs	r2, #36	; 0x24
   12d82:	5c9b      	ldrb	r3, [r3, r2]
   12d84:	b2db      	uxtb	r3, r3
   12d86:	2b01      	cmp	r3, #1
   12d88:	d105      	bne.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12d8a:	697b      	ldr	r3, [r7, #20]
   12d8c:	691b      	ldr	r3, [r3, #16]
   12d8e:	697a      	ldr	r2, [r7, #20]
   12d90:	0010      	movs	r0, r2
   12d92:	4798      	blx	r3
   12d94:	e010      	b.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12d96:	230e      	movs	r3, #14
   12d98:	18fb      	adds	r3, r7, r3
   12d9a:	781b      	ldrb	r3, [r3, #0]
   12d9c:	2201      	movs	r2, #1
   12d9e:	4013      	ands	r3, r2
   12da0:	d00a      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12da2:	697b      	ldr	r3, [r7, #20]
   12da4:	2224      	movs	r2, #36	; 0x24
   12da6:	5c9b      	ldrb	r3, [r3, r2]
   12da8:	b2db      	uxtb	r3, r3
   12daa:	2b00      	cmp	r3, #0
   12dac:	d104      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12dae:	697b      	ldr	r3, [r7, #20]
   12db0:	68db      	ldr	r3, [r3, #12]
   12db2:	697a      	ldr	r2, [r7, #20]
   12db4:	0010      	movs	r0, r2
   12db6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12db8:	697b      	ldr	r3, [r7, #20]
   12dba:	2225      	movs	r2, #37	; 0x25
   12dbc:	5c9b      	ldrb	r3, [r3, r2]
   12dbe:	b2db      	uxtb	r3, r3
   12dc0:	2b05      	cmp	r3, #5
   12dc2:	d02e      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
   12dc4:	697b      	ldr	r3, [r7, #20]
   12dc6:	2225      	movs	r2, #37	; 0x25
   12dc8:	5c9b      	ldrb	r3, [r3, r2]
   12dca:	b2db      	uxtb	r3, r3
   12dcc:	2b00      	cmp	r3, #0
   12dce:	d028      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12dd0:	693b      	ldr	r3, [r7, #16]
   12dd2:	2203      	movs	r2, #3
   12dd4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12dd6:	697b      	ldr	r3, [r7, #20]
   12dd8:	2200      	movs	r2, #0
   12dda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   12ddc:	697b      	ldr	r3, [r7, #20]
   12dde:	2200      	movs	r2, #0
   12de0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12de2:	697b      	ldr	r3, [r7, #20]
   12de4:	2225      	movs	r2, #37	; 0x25
   12de6:	5c9b      	ldrb	r3, [r3, r2]
   12de8:	b2db      	uxtb	r3, r3
   12dea:	2b41      	cmp	r3, #65	; 0x41
   12dec:	d00e      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   12dee:	697b      	ldr	r3, [r7, #20]
   12df0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12df2:	2b00      	cmp	r3, #0
   12df4:	d00a      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   12df6:	697b      	ldr	r3, [r7, #20]
   12df8:	0018      	movs	r0, r3
   12dfa:	4b0e      	ldr	r3, [pc, #56]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12dfc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12dfe:	693b      	ldr	r3, [r7, #16]
   12e00:	685b      	ldr	r3, [r3, #4]
   12e02:	22e0      	movs	r2, #224	; 0xe0
   12e04:	02d2      	lsls	r2, r2, #11
   12e06:	431a      	orrs	r2, r3
   12e08:	693b      	ldr	r3, [r7, #16]
   12e0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12e0c:	230e      	movs	r3, #14
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	781b      	ldrb	r3, [r3, #0]
   12e12:	2204      	movs	r2, #4
   12e14:	4013      	ands	r3, r2
   12e16:	d004      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12e18:	697b      	ldr	r3, [r7, #20]
   12e1a:	695b      	ldr	r3, [r3, #20]
   12e1c:	697a      	ldr	r2, [r7, #20]
   12e1e:	0010      	movs	r0, r2
   12e20:	4798      	blx	r3
		}
	}
}
   12e22:	46c0      	nop			; (mov r8, r8)
   12e24:	46bd      	mov	sp, r7
   12e26:	b006      	add	sp, #24
   12e28:	bd80      	pop	{r7, pc}
   12e2a:	46c0      	nop			; (mov r8, r8)
   12e2c:	20005a88 	.word	0x20005a88
   12e30:	0001284d 	.word	0x0001284d
   12e34:	000126bd 	.word	0x000126bd
   12e38:	000127d1 	.word	0x000127d1
   12e3c:	000126e1 	.word	0x000126e1

00012e40 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   12e40:	b580      	push	{r7, lr}
   12e42:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12e44:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   12e48:	4b02      	ldr	r3, [pc, #8]	; (12e54 <NVIC_SystemReset+0x14>)
   12e4a:	4a03      	ldr	r2, [pc, #12]	; (12e58 <NVIC_SystemReset+0x18>)
   12e4c:	60da      	str	r2, [r3, #12]
   12e4e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   12e52:	e7fe      	b.n	12e52 <NVIC_SystemReset+0x12>
   12e54:	e000ed00 	.word	0xe000ed00
   12e58:	05fa0004 	.word	0x05fa0004

00012e5c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   12e5c:	b580      	push	{r7, lr}
   12e5e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   12e60:	4b02      	ldr	r3, [pc, #8]	; (12e6c <system_reset+0x10>)
   12e62:	4798      	blx	r3
}
   12e64:	46c0      	nop			; (mov r8, r8)
   12e66:	46bd      	mov	sp, r7
   12e68:	bd80      	pop	{r7, pc}
   12e6a:	46c0      	nop			; (mov r8, r8)
   12e6c:	00012e41 	.word	0x00012e41

00012e70 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   12e70:	b580      	push	{r7, lr}
   12e72:	b086      	sub	sp, #24
   12e74:	af00      	add	r7, sp, #0
   12e76:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   12e78:	4b9e      	ldr	r3, [pc, #632]	; (130f4 <vCommandConsoleTask+0x284>)
   12e7a:	0018      	movs	r0, r3
   12e7c:	4b9e      	ldr	r3, [pc, #632]	; (130f8 <vCommandConsoleTask+0x288>)
   12e7e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   12e80:	4b9e      	ldr	r3, [pc, #632]	; (130fc <vCommandConsoleTask+0x28c>)
   12e82:	0018      	movs	r0, r3
   12e84:	4b9c      	ldr	r3, [pc, #624]	; (130f8 <vCommandConsoleTask+0x288>)
   12e86:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   12e88:	4b9d      	ldr	r3, [pc, #628]	; (13100 <vCommandConsoleTask+0x290>)
   12e8a:	0018      	movs	r0, r3
   12e8c:	4b9a      	ldr	r3, [pc, #616]	; (130f8 <vCommandConsoleTask+0x288>)
   12e8e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   12e90:	4b9c      	ldr	r3, [pc, #624]	; (13104 <vCommandConsoleTask+0x294>)
   12e92:	0018      	movs	r0, r3
   12e94:	4b98      	ldr	r3, [pc, #608]	; (130f8 <vCommandConsoleTask+0x288>)
   12e96:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   12e98:	4b9b      	ldr	r3, [pc, #620]	; (13108 <vCommandConsoleTask+0x298>)
   12e9a:	0018      	movs	r0, r3
   12e9c:	4b96      	ldr	r3, [pc, #600]	; (130f8 <vCommandConsoleTask+0x288>)
   12e9e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
   12ea0:	4b9a      	ldr	r3, [pc, #616]	; (1310c <vCommandConsoleTask+0x29c>)
   12ea2:	0018      	movs	r0, r3
   12ea4:	4b94      	ldr	r3, [pc, #592]	; (130f8 <vCommandConsoleTask+0x288>)
   12ea6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   12ea8:	4b99      	ldr	r3, [pc, #612]	; (13110 <vCommandConsoleTask+0x2a0>)
   12eaa:	0018      	movs	r0, r3
   12eac:	4b92      	ldr	r3, [pc, #584]	; (130f8 <vCommandConsoleTask+0x288>)
   12eae:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
   12eb0:	4b98      	ldr	r3, [pc, #608]	; (13114 <vCommandConsoleTask+0x2a4>)
   12eb2:	0018      	movs	r0, r3
   12eb4:	4b90      	ldr	r3, [pc, #576]	; (130f8 <vCommandConsoleTask+0x288>)
   12eb6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   12eb8:	4b97      	ldr	r3, [pc, #604]	; (13118 <vCommandConsoleTask+0x2a8>)
   12eba:	0018      	movs	r0, r3
   12ebc:	4b8e      	ldr	r3, [pc, #568]	; (130f8 <vCommandConsoleTask+0x288>)
   12ebe:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   12ec0:	2317      	movs	r3, #23
   12ec2:	18fb      	adds	r3, r7, r3
   12ec4:	2200      	movs	r2, #0
   12ec6:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   12ec8:	4b94      	ldr	r3, [pc, #592]	; (1311c <vCommandConsoleTask+0x2ac>)
   12eca:	0018      	movs	r0, r3
   12ecc:	4b94      	ldr	r3, [pc, #592]	; (13120 <vCommandConsoleTask+0x2b0>)
   12ece:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   12ed0:	2203      	movs	r2, #3
   12ed2:	2100      	movs	r1, #0
   12ed4:	2001      	movs	r0, #1
   12ed6:	4b93      	ldr	r3, [pc, #588]	; (13124 <vCommandConsoleTask+0x2b4>)
   12ed8:	4798      	blx	r3
   12eda:	0002      	movs	r2, r0
   12edc:	4b92      	ldr	r3, [pc, #584]	; (13128 <vCommandConsoleTask+0x2b8>)
   12ede:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   12ee0:	4b91      	ldr	r3, [pc, #580]	; (13128 <vCommandConsoleTask+0x2b8>)
   12ee2:	681b      	ldr	r3, [r3, #0]
   12ee4:	2b00      	cmp	r3, #0
   12ee6:	d107      	bne.n	12ef8 <vCommandConsoleTask+0x88>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   12ee8:	4b90      	ldr	r3, [pc, #576]	; (1312c <vCommandConsoleTask+0x2bc>)
   12eea:	0019      	movs	r1, r3
   12eec:	2003      	movs	r0, #3
   12eee:	4b90      	ldr	r3, [pc, #576]	; (13130 <vCommandConsoleTask+0x2c0>)
   12ef0:	4798      	blx	r3
        vTaskSuspend(NULL);
   12ef2:	2000      	movs	r0, #0
   12ef4:	4b8f      	ldr	r3, [pc, #572]	; (13134 <vCommandConsoleTask+0x2c4>)
   12ef6:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   12ef8:	230c      	movs	r3, #12
   12efa:	18fb      	adds	r3, r7, r3
   12efc:	0018      	movs	r0, r3
   12efe:	4b8e      	ldr	r3, [pc, #568]	; (13138 <vCommandConsoleTask+0x2c8>)
   12f00:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   12f02:	230c      	movs	r3, #12
   12f04:	18fb      	adds	r3, r7, r3
   12f06:	781b      	ldrb	r3, [r3, #0]
   12f08:	2b0a      	cmp	r3, #10
   12f0a:	d004      	beq.n	12f16 <vCommandConsoleTask+0xa6>
   12f0c:	230c      	movs	r3, #12
   12f0e:	18fb      	adds	r3, r7, r3
   12f10:	781b      	ldrb	r3, [r3, #0]
   12f12:	2b0d      	cmp	r3, #13
   12f14:	d137      	bne.n	12f86 <vCommandConsoleTask+0x116>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   12f16:	4b89      	ldr	r3, [pc, #548]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f18:	0018      	movs	r0, r3
   12f1a:	4b81      	ldr	r3, [pc, #516]	; (13120 <vCommandConsoleTask+0x2b0>)
   12f1c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   12f1e:	4b88      	ldr	r3, [pc, #544]	; (13140 <vCommandConsoleTask+0x2d0>)
   12f20:	2200      	movs	r2, #0
   12f22:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   12f24:	4b87      	ldr	r3, [pc, #540]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f26:	2200      	movs	r2, #0
   12f28:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   12f2a:	4987      	ldr	r1, [pc, #540]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f2c:	4b87      	ldr	r3, [pc, #540]	; (1314c <vCommandConsoleTask+0x2dc>)
   12f2e:	2231      	movs	r2, #49	; 0x31
   12f30:	0018      	movs	r0, r3
   12f32:	4b87      	ldr	r3, [pc, #540]	; (13150 <vCommandConsoleTask+0x2e0>)
   12f34:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   12f36:	4b85      	ldr	r3, [pc, #532]	; (1314c <vCommandConsoleTask+0x2dc>)
   12f38:	2231      	movs	r2, #49	; 0x31
   12f3a:	2100      	movs	r1, #0
   12f3c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   12f3e:	4985      	ldr	r1, [pc, #532]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f40:	4b81      	ldr	r3, [pc, #516]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f42:	2264      	movs	r2, #100	; 0x64
   12f44:	0018      	movs	r0, r3
   12f46:	4b84      	ldr	r3, [pc, #528]	; (13158 <vCommandConsoleTask+0x2e8>)
   12f48:	4798      	blx	r3
   12f4a:	0003      	movs	r3, r0
   12f4c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12f4e:	4b81      	ldr	r3, [pc, #516]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f50:	2263      	movs	r2, #99	; 0x63
   12f52:	2100      	movs	r1, #0
   12f54:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   12f56:	4b7f      	ldr	r3, [pc, #508]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f58:	0018      	movs	r0, r3
   12f5a:	4b71      	ldr	r3, [pc, #452]	; (13120 <vCommandConsoleTask+0x2b0>)
   12f5c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   12f5e:	693b      	ldr	r3, [r7, #16]
   12f60:	2b00      	cmp	r3, #0
   12f62:	d1ec      	bne.n	12f3e <vCommandConsoleTask+0xce>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   12f64:	2317      	movs	r3, #23
   12f66:	18fb      	adds	r3, r7, r3
   12f68:	2200      	movs	r2, #0
   12f6a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12f6c:	4b76      	ldr	r3, [pc, #472]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f6e:	2232      	movs	r2, #50	; 0x32
   12f70:	2100      	movs	r1, #0
   12f72:	0018      	movs	r0, r3
   12f74:	4b79      	ldr	r3, [pc, #484]	; (1315c <vCommandConsoleTask+0x2ec>)
   12f76:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   12f78:	4b76      	ldr	r3, [pc, #472]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f7a:	2264      	movs	r2, #100	; 0x64
   12f7c:	2100      	movs	r1, #0
   12f7e:	0018      	movs	r0, r3
   12f80:	4b76      	ldr	r3, [pc, #472]	; (1315c <vCommandConsoleTask+0x2ec>)
   12f82:	4798      	blx	r3
   12f84:	e0b5      	b.n	130f2 <vCommandConsoleTask+0x282>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   12f86:	4b6e      	ldr	r3, [pc, #440]	; (13140 <vCommandConsoleTask+0x2d0>)
   12f88:	781b      	ldrb	r3, [r3, #0]
   12f8a:	2b00      	cmp	r3, #0
   12f8c:	d059      	beq.n	13042 <vCommandConsoleTask+0x1d2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12f8e:	4b6d      	ldr	r3, [pc, #436]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f90:	781b      	ldrb	r3, [r3, #0]
   12f92:	2b03      	cmp	r3, #3
   12f94:	d80c      	bhi.n	12fb0 <vCommandConsoleTask+0x140>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   12f96:	4b6b      	ldr	r3, [pc, #428]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f98:	781b      	ldrb	r3, [r3, #0]
   12f9a:	1c5a      	adds	r2, r3, #1
   12f9c:	b2d1      	uxtb	r1, r2
   12f9e:	4a69      	ldr	r2, [pc, #420]	; (13144 <vCommandConsoleTask+0x2d4>)
   12fa0:	7011      	strb	r1, [r2, #0]
   12fa2:	001a      	movs	r2, r3
   12fa4:	230c      	movs	r3, #12
   12fa6:	18fb      	adds	r3, r7, r3
   12fa8:	7819      	ldrb	r1, [r3, #0]
   12faa:	4b6d      	ldr	r3, [pc, #436]	; (13160 <vCommandConsoleTask+0x2f0>)
   12fac:	5499      	strb	r1, [r3, r2]
   12fae:	e005      	b.n	12fbc <vCommandConsoleTask+0x14c>
                } else {
                    isEscapeCode = false;
   12fb0:	4b63      	ldr	r3, [pc, #396]	; (13140 <vCommandConsoleTask+0x2d0>)
   12fb2:	2200      	movs	r2, #0
   12fb4:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   12fb6:	4b63      	ldr	r3, [pc, #396]	; (13144 <vCommandConsoleTask+0x2d4>)
   12fb8:	2200      	movs	r2, #0
   12fba:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12fbc:	4b61      	ldr	r3, [pc, #388]	; (13144 <vCommandConsoleTask+0x2d4>)
   12fbe:	781b      	ldrb	r3, [r3, #0]
   12fc0:	2b01      	cmp	r3, #1
   12fc2:	d999      	bls.n	12ef8 <vCommandConsoleTask+0x88>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   12fc4:	4a67      	ldr	r2, [pc, #412]	; (13164 <vCommandConsoleTask+0x2f4>)
   12fc6:	4b66      	ldr	r3, [pc, #408]	; (13160 <vCommandConsoleTask+0x2f0>)
   12fc8:	0011      	movs	r1, r2
   12fca:	0018      	movs	r0, r3
   12fcc:	4b66      	ldr	r3, [pc, #408]	; (13168 <vCommandConsoleTask+0x2f8>)
   12fce:	4798      	blx	r3
   12fd0:	1e03      	subs	r3, r0, #0
   12fd2:	d02f      	beq.n	13034 <vCommandConsoleTask+0x1c4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   12fd4:	4965      	ldr	r1, [pc, #404]	; (1316c <vCommandConsoleTask+0x2fc>)
   12fd6:	4b5c      	ldr	r3, [pc, #368]	; (13148 <vCommandConsoleTask+0x2d8>)
   12fd8:	221b      	movs	r2, #27
   12fda:	0018      	movs	r0, r3
   12fdc:	4b64      	ldr	r3, [pc, #400]	; (13170 <vCommandConsoleTask+0x300>)
   12fde:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   12fe0:	4b59      	ldr	r3, [pc, #356]	; (13148 <vCommandConsoleTask+0x2d8>)
   12fe2:	0018      	movs	r0, r3
   12fe4:	4b4e      	ldr	r3, [pc, #312]	; (13120 <vCommandConsoleTask+0x2b0>)
   12fe6:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   12fe8:	2317      	movs	r3, #23
   12fea:	18fb      	adds	r3, r7, r3
   12fec:	2200      	movs	r2, #0
   12fee:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12ff0:	4b55      	ldr	r3, [pc, #340]	; (13148 <vCommandConsoleTask+0x2d8>)
   12ff2:	2232      	movs	r2, #50	; 0x32
   12ff4:	2100      	movs	r1, #0
   12ff6:	0018      	movs	r0, r3
   12ff8:	4b58      	ldr	r3, [pc, #352]	; (1315c <vCommandConsoleTask+0x2ec>)
   12ffa:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   12ffc:	4953      	ldr	r1, [pc, #332]	; (1314c <vCommandConsoleTask+0x2dc>)
   12ffe:	4b52      	ldr	r3, [pc, #328]	; (13148 <vCommandConsoleTask+0x2d8>)
   13000:	2231      	movs	r2, #49	; 0x31
   13002:	0018      	movs	r0, r3
   13004:	4b52      	ldr	r3, [pc, #328]	; (13150 <vCommandConsoleTask+0x2e0>)
   13006:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   13008:	4b4f      	ldr	r3, [pc, #316]	; (13148 <vCommandConsoleTask+0x2d8>)
   1300a:	0018      	movs	r0, r3
   1300c:	4b59      	ldr	r3, [pc, #356]	; (13174 <vCommandConsoleTask+0x304>)
   1300e:	4798      	blx	r3
   13010:	0003      	movs	r3, r0
   13012:	2b30      	cmp	r3, #48	; 0x30
   13014:	d806      	bhi.n	13024 <vCommandConsoleTask+0x1b4>
   13016:	4b4d      	ldr	r3, [pc, #308]	; (1314c <vCommandConsoleTask+0x2dc>)
   13018:	0018      	movs	r0, r3
   1301a:	4b56      	ldr	r3, [pc, #344]	; (13174 <vCommandConsoleTask+0x304>)
   1301c:	4798      	blx	r3
   1301e:	0003      	movs	r3, r0
   13020:	b2da      	uxtb	r2, r3
   13022:	e000      	b.n	13026 <vCommandConsoleTask+0x1b6>
   13024:	2231      	movs	r2, #49	; 0x31
   13026:	2317      	movs	r3, #23
   13028:	18fb      	adds	r3, r7, r3
   1302a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   1302c:	4b46      	ldr	r3, [pc, #280]	; (13148 <vCommandConsoleTask+0x2d8>)
   1302e:	0018      	movs	r0, r3
   13030:	4b3b      	ldr	r3, [pc, #236]	; (13120 <vCommandConsoleTask+0x2b0>)
   13032:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   13034:	4b42      	ldr	r3, [pc, #264]	; (13140 <vCommandConsoleTask+0x2d0>)
   13036:	2200      	movs	r2, #0
   13038:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1303a:	4b42      	ldr	r3, [pc, #264]	; (13144 <vCommandConsoleTask+0x2d4>)
   1303c:	2200      	movs	r2, #0
   1303e:	701a      	strb	r2, [r3, #0]
   13040:	e75a      	b.n	12ef8 <vCommandConsoleTask+0x88>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   13042:	230c      	movs	r3, #12
   13044:	18fb      	adds	r3, r7, r3
   13046:	781b      	ldrb	r3, [r3, #0]
   13048:	2b0d      	cmp	r3, #13
   1304a:	d100      	bne.n	1304e <vCommandConsoleTask+0x1de>
   1304c:	e754      	b.n	12ef8 <vCommandConsoleTask+0x88>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1304e:	230c      	movs	r3, #12
   13050:	18fb      	adds	r3, r7, r3
   13052:	781b      	ldrb	r3, [r3, #0]
   13054:	2b08      	cmp	r3, #8
   13056:	d004      	beq.n	13062 <vCommandConsoleTask+0x1f2>
   13058:	230c      	movs	r3, #12
   1305a:	18fb      	adds	r3, r7, r3
   1305c:	781b      	ldrb	r3, [r3, #0]
   1305e:	2b7f      	cmp	r3, #127	; 0x7f
   13060:	d11c      	bne.n	1309c <vCommandConsoleTask+0x22c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13062:	2308      	movs	r3, #8
   13064:	18fb      	adds	r3, r7, r3
   13066:	4a44      	ldr	r2, [pc, #272]	; (13178 <vCommandConsoleTask+0x308>)
   13068:	6812      	ldr	r2, [r2, #0]
   1306a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   1306c:	2308      	movs	r3, #8
   1306e:	18fb      	adds	r3, r7, r3
   13070:	0018      	movs	r0, r3
   13072:	4b2b      	ldr	r3, [pc, #172]	; (13120 <vCommandConsoleTask+0x2b0>)
   13074:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13076:	2317      	movs	r3, #23
   13078:	18fb      	adds	r3, r7, r3
   1307a:	781b      	ldrb	r3, [r3, #0]
   1307c:	2b00      	cmp	r3, #0
   1307e:	d037      	beq.n	130f0 <vCommandConsoleTask+0x280>
                    cInputIndex--;
   13080:	2317      	movs	r3, #23
   13082:	18fb      	adds	r3, r7, r3
   13084:	781a      	ldrb	r2, [r3, #0]
   13086:	2317      	movs	r3, #23
   13088:	18fb      	adds	r3, r7, r3
   1308a:	3a01      	subs	r2, #1
   1308c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   1308e:	2317      	movs	r3, #23
   13090:	18fb      	adds	r3, r7, r3
   13092:	781b      	ldrb	r3, [r3, #0]
   13094:	4a2c      	ldr	r2, [pc, #176]	; (13148 <vCommandConsoleTask+0x2d8>)
   13096:	2100      	movs	r1, #0
   13098:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1309a:	e029      	b.n	130f0 <vCommandConsoleTask+0x280>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   1309c:	230c      	movs	r3, #12
   1309e:	18fb      	adds	r3, r7, r3
   130a0:	781b      	ldrb	r3, [r3, #0]
   130a2:	2b1b      	cmp	r3, #27
   130a4:	d106      	bne.n	130b4 <vCommandConsoleTask+0x244>
                isEscapeCode = true;  // Next characters will be code arguments
   130a6:	4b26      	ldr	r3, [pc, #152]	; (13140 <vCommandConsoleTask+0x2d0>)
   130a8:	2201      	movs	r2, #1
   130aa:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   130ac:	4b25      	ldr	r3, [pc, #148]	; (13144 <vCommandConsoleTask+0x2d4>)
   130ae:	2200      	movs	r2, #0
   130b0:	701a      	strb	r2, [r3, #0]
   130b2:	e721      	b.n	12ef8 <vCommandConsoleTask+0x88>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   130b4:	2317      	movs	r3, #23
   130b6:	18fb      	adds	r3, r7, r3
   130b8:	781b      	ldrb	r3, [r3, #0]
   130ba:	2b31      	cmp	r3, #49	; 0x31
   130bc:	d80e      	bhi.n	130dc <vCommandConsoleTask+0x26c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   130be:	2317      	movs	r3, #23
   130c0:	18fb      	adds	r3, r7, r3
   130c2:	781b      	ldrb	r3, [r3, #0]
   130c4:	220c      	movs	r2, #12
   130c6:	18ba      	adds	r2, r7, r2
   130c8:	7811      	ldrb	r1, [r2, #0]
   130ca:	4a1f      	ldr	r2, [pc, #124]	; (13148 <vCommandConsoleTask+0x2d8>)
   130cc:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   130ce:	2317      	movs	r3, #23
   130d0:	18fb      	adds	r3, r7, r3
   130d2:	781a      	ldrb	r2, [r3, #0]
   130d4:	2317      	movs	r3, #23
   130d6:	18fb      	adds	r3, r7, r3
   130d8:	3201      	adds	r2, #1
   130da:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   130dc:	230c      	movs	r3, #12
   130de:	18fb      	adds	r3, r7, r3
   130e0:	2200      	movs	r2, #0
   130e2:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   130e4:	230c      	movs	r3, #12
   130e6:	18fb      	adds	r3, r7, r3
   130e8:	0018      	movs	r0, r3
   130ea:	4b0d      	ldr	r3, [pc, #52]	; (13120 <vCommandConsoleTask+0x2b0>)
   130ec:	4798      	blx	r3
   130ee:	e703      	b.n	12ef8 <vCommandConsoleTask+0x88>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   130f0:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   130f2:	e701      	b.n	12ef8 <vCommandConsoleTask+0x88>
   130f4:	000361f4 	.word	0x000361f4
   130f8:	00017e3d 	.word	0x00017e3d
   130fc:	000361e4 	.word	0x000361e4
   13100:	00036264 	.word	0x00036264
   13104:	00036204 	.word	0x00036204
   13108:	00036214 	.word	0x00036214
   1310c:	00036224 	.word	0x00036224
   13110:	00036234 	.word	0x00036234
   13114:	00036244 	.word	0x00036244
   13118:	00036254 	.word	0x00036254
   1311c:	00035e3c 	.word	0x00035e3c
   13120:	0001de15 	.word	0x0001de15
   13124:	0001a4b5 	.word	0x0001a4b5
   13128:	20004610 	.word	0x20004610
   1312c:	00036058 	.word	0x00036058
   13130:	0001df01 	.word	0x0001df01
   13134:	0001c2a1 	.word	0x0001c2a1
   13138:	0001317d 	.word	0x0001317d
   1313c:	00036078 	.word	0x00036078
   13140:	20000394 	.word	0x20000394
   13144:	20000395 	.word	0x20000395
   13148:	200003cc 	.word	0x200003cc
   1314c:	20000398 	.word	0x20000398
   13150:	00034e47 	.word	0x00034e47
   13154:	20000400 	.word	0x20000400
   13158:	00017ead 	.word	0x00017ead
   1315c:	00034a5f 	.word	0x00034a5f
   13160:	20000464 	.word	0x20000464
   13164:	0003607c 	.word	0x0003607c
   13168:	00034d61 	.word	0x00034d61
   1316c:	00036080 	.word	0x00036080
   13170:	00034d1d 	.word	0x00034d1d
   13174:	00034e17 	.word	0x00034e17
   13178:	00036088 	.word	0x00036088

0001317c <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   1317c:	b580      	push	{r7, lr}
   1317e:	b084      	sub	sp, #16
   13180:	af00      	add	r7, sp, #0
   13182:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13184:	687b      	ldr	r3, [r7, #4]
   13186:	0018      	movs	r0, r3
   13188:	4b0c      	ldr	r3, [pc, #48]	; (131bc <FreeRTOS_read+0x40>)
   1318a:	4798      	blx	r3
   1318c:	0003      	movs	r3, r0
   1318e:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13190:	e00d      	b.n	131ae <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13192:	4b0b      	ldr	r3, [pc, #44]	; (131c0 <FreeRTOS_read+0x44>)
   13194:	681a      	ldr	r2, [r3, #0]
   13196:	2301      	movs	r3, #1
   13198:	425b      	negs	r3, r3
   1319a:	0019      	movs	r1, r3
   1319c:	0010      	movs	r0, r2
   1319e:	4b09      	ldr	r3, [pc, #36]	; (131c4 <FreeRTOS_read+0x48>)
   131a0:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   131a2:	687b      	ldr	r3, [r7, #4]
   131a4:	0018      	movs	r0, r3
   131a6:	4b05      	ldr	r3, [pc, #20]	; (131bc <FreeRTOS_read+0x40>)
   131a8:	4798      	blx	r3
   131aa:	0003      	movs	r3, r0
   131ac:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   131ae:	68fb      	ldr	r3, [r7, #12]
   131b0:	3301      	adds	r3, #1
   131b2:	d0ee      	beq.n	13192 <FreeRTOS_read+0x16>
    }
}
   131b4:	46c0      	nop			; (mov r8, r8)
   131b6:	46bd      	mov	sp, r7
   131b8:	b004      	add	sp, #16
   131ba:	bd80      	pop	{r7, pc}
   131bc:	0001deb1 	.word	0x0001deb1
   131c0:	20004610 	.word	0x20004610
   131c4:	0001b46d 	.word	0x0001b46d

000131c8 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   131c8:	b580      	push	{r7, lr}
   131ca:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   131cc:	4b0a      	ldr	r3, [pc, #40]	; (131f8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131ce:	2200      	movs	r2, #0
   131d0:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   131d2:	4b0a      	ldr	r3, [pc, #40]	; (131fc <CliCharReadySemaphoreGiveFromISR+0x34>)
   131d4:	681b      	ldr	r3, [r3, #0]
   131d6:	4a08      	ldr	r2, [pc, #32]	; (131f8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131d8:	0011      	movs	r1, r2
   131da:	0018      	movs	r0, r3
   131dc:	4b08      	ldr	r3, [pc, #32]	; (13200 <CliCharReadySemaphoreGiveFromISR+0x38>)
   131de:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   131e0:	4b05      	ldr	r3, [pc, #20]	; (131f8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131e2:	681b      	ldr	r3, [r3, #0]
   131e4:	2b00      	cmp	r3, #0
   131e6:	d003      	beq.n	131f0 <CliCharReadySemaphoreGiveFromISR+0x28>
   131e8:	4b06      	ldr	r3, [pc, #24]	; (13204 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   131ea:	2280      	movs	r2, #128	; 0x80
   131ec:	0552      	lsls	r2, r2, #21
   131ee:	601a      	str	r2, [r3, #0]
}
   131f0:	46c0      	nop			; (mov r8, r8)
   131f2:	46bd      	mov	sp, r7
   131f4:	bd80      	pop	{r7, pc}
   131f6:	46c0      	nop			; (mov r8, r8)
   131f8:	20000468 	.word	0x20000468
   131fc:	20004610 	.word	0x20004610
   13200:	0001ade5 	.word	0x0001ade5
   13204:	e000ed04 	.word	0xe000ed04

00013208 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13208:	b5b0      	push	{r4, r5, r7, lr}
   1320a:	b08a      	sub	sp, #40	; 0x28
   1320c:	af02      	add	r7, sp, #8
   1320e:	60f8      	str	r0, [r7, #12]
   13210:	60b9      	str	r1, [r7, #8]
   13212:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   13214:	4b49      	ldr	r3, [pc, #292]	; (1333c <CLI_GetImuData+0x134>)
   13216:	4798      	blx	r3
   13218:	0003      	movs	r3, r0
   1321a:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   1321c:	231b      	movs	r3, #27
   1321e:	18fa      	adds	r2, r7, r3
   13220:	69fb      	ldr	r3, [r7, #28]
   13222:	0011      	movs	r1, r2
   13224:	0018      	movs	r0, r3
   13226:	4b46      	ldr	r3, [pc, #280]	; (13340 <CLI_GetImuData+0x138>)
   13228:	4798      	blx	r3

    if (reg) {
   1322a:	231b      	movs	r3, #27
   1322c:	18fb      	adds	r3, r7, r3
   1322e:	781b      	ldrb	r3, [r3, #0]
   13230:	2b00      	cmp	r3, #0
   13232:	d064      	beq.n	132fe <CLI_GetImuData+0xf6>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   13234:	4b43      	ldr	r3, [pc, #268]	; (13344 <CLI_GetImuData+0x13c>)
   13236:	2206      	movs	r2, #6
   13238:	2100      	movs	r1, #0
   1323a:	0018      	movs	r0, r3
   1323c:	4b42      	ldr	r3, [pc, #264]	; (13348 <CLI_GetImuData+0x140>)
   1323e:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13240:	4a40      	ldr	r2, [pc, #256]	; (13344 <CLI_GetImuData+0x13c>)
   13242:	69fb      	ldr	r3, [r7, #28]
   13244:	0011      	movs	r1, r2
   13246:	0018      	movs	r0, r3
   13248:	4b40      	ldr	r3, [pc, #256]	; (1334c <CLI_GetImuData+0x144>)
   1324a:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   1324c:	4b3d      	ldr	r3, [pc, #244]	; (13344 <CLI_GetImuData+0x13c>)
   1324e:	2200      	movs	r2, #0
   13250:	5e9b      	ldrsh	r3, [r3, r2]
   13252:	0018      	movs	r0, r3
   13254:	4b3e      	ldr	r3, [pc, #248]	; (13350 <CLI_GetImuData+0x148>)
   13256:	4798      	blx	r3
   13258:	1c02      	adds	r2, r0, #0
   1325a:	4b3e      	ldr	r3, [pc, #248]	; (13354 <CLI_GetImuData+0x14c>)
   1325c:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   1325e:	4b39      	ldr	r3, [pc, #228]	; (13344 <CLI_GetImuData+0x13c>)
   13260:	2202      	movs	r2, #2
   13262:	5e9b      	ldrsh	r3, [r3, r2]
   13264:	0018      	movs	r0, r3
   13266:	4b3a      	ldr	r3, [pc, #232]	; (13350 <CLI_GetImuData+0x148>)
   13268:	4798      	blx	r3
   1326a:	1c02      	adds	r2, r0, #0
   1326c:	4b39      	ldr	r3, [pc, #228]	; (13354 <CLI_GetImuData+0x14c>)
   1326e:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13270:	4b34      	ldr	r3, [pc, #208]	; (13344 <CLI_GetImuData+0x13c>)
   13272:	2204      	movs	r2, #4
   13274:	5e9b      	ldrsh	r3, [r3, r2]
   13276:	0018      	movs	r0, r3
   13278:	4b35      	ldr	r3, [pc, #212]	; (13350 <CLI_GetImuData+0x148>)
   1327a:	4798      	blx	r3
   1327c:	1c02      	adds	r2, r0, #0
   1327e:	4b35      	ldr	r3, [pc, #212]	; (13354 <CLI_GetImuData+0x14c>)
   13280:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   13282:	4b34      	ldr	r3, [pc, #208]	; (13354 <CLI_GetImuData+0x14c>)
   13284:	681a      	ldr	r2, [r3, #0]
   13286:	4b34      	ldr	r3, [pc, #208]	; (13358 <CLI_GetImuData+0x150>)
   13288:	1c10      	adds	r0, r2, #0
   1328a:	4798      	blx	r3
   1328c:	0005      	movs	r5, r0
   1328e:	4b31      	ldr	r3, [pc, #196]	; (13354 <CLI_GetImuData+0x14c>)
   13290:	685a      	ldr	r2, [r3, #4]
   13292:	4b31      	ldr	r3, [pc, #196]	; (13358 <CLI_GetImuData+0x150>)
   13294:	1c10      	adds	r0, r2, #0
   13296:	4798      	blx	r3
   13298:	0004      	movs	r4, r0
   1329a:	4b2e      	ldr	r3, [pc, #184]	; (13354 <CLI_GetImuData+0x14c>)
   1329c:	689a      	ldr	r2, [r3, #8]
   1329e:	4b2e      	ldr	r3, [pc, #184]	; (13358 <CLI_GetImuData+0x150>)
   132a0:	1c10      	adds	r0, r2, #0
   132a2:	4798      	blx	r3
   132a4:	0003      	movs	r3, r0
   132a6:	4a2d      	ldr	r2, [pc, #180]	; (1335c <CLI_GetImuData+0x154>)
   132a8:	68b9      	ldr	r1, [r7, #8]
   132aa:	68f8      	ldr	r0, [r7, #12]
   132ac:	9301      	str	r3, [sp, #4]
   132ae:	9400      	str	r4, [sp, #0]
   132b0:	002b      	movs	r3, r5
   132b2:	4c2b      	ldr	r4, [pc, #172]	; (13360 <CLI_GetImuData+0x158>)
   132b4:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   132b6:	4b27      	ldr	r3, [pc, #156]	; (13354 <CLI_GetImuData+0x14c>)
   132b8:	681a      	ldr	r2, [r3, #0]
   132ba:	4b27      	ldr	r3, [pc, #156]	; (13358 <CLI_GetImuData+0x150>)
   132bc:	1c10      	adds	r0, r2, #0
   132be:	4798      	blx	r3
   132c0:	0003      	movs	r3, r0
   132c2:	b21a      	sxth	r2, r3
   132c4:	2314      	movs	r3, #20
   132c6:	18fb      	adds	r3, r7, r3
   132c8:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   132ca:	4b22      	ldr	r3, [pc, #136]	; (13354 <CLI_GetImuData+0x14c>)
   132cc:	685a      	ldr	r2, [r3, #4]
   132ce:	4b22      	ldr	r3, [pc, #136]	; (13358 <CLI_GetImuData+0x150>)
   132d0:	1c10      	adds	r0, r2, #0
   132d2:	4798      	blx	r3
   132d4:	0003      	movs	r3, r0
   132d6:	b21a      	sxth	r2, r3
   132d8:	2314      	movs	r3, #20
   132da:	18fb      	adds	r3, r7, r3
   132dc:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   132de:	4b1d      	ldr	r3, [pc, #116]	; (13354 <CLI_GetImuData+0x14c>)
   132e0:	689a      	ldr	r2, [r3, #8]
   132e2:	4b1d      	ldr	r3, [pc, #116]	; (13358 <CLI_GetImuData+0x150>)
   132e4:	1c10      	adds	r0, r2, #0
   132e6:	4798      	blx	r3
   132e8:	0003      	movs	r3, r0
   132ea:	b21a      	sxth	r2, r3
   132ec:	2314      	movs	r3, #20
   132ee:	18fb      	adds	r3, r7, r3
   132f0:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   132f2:	2314      	movs	r3, #20
   132f4:	18fb      	adds	r3, r7, r3
   132f6:	0018      	movs	r0, r3
   132f8:	4b1a      	ldr	r3, [pc, #104]	; (13364 <CLI_GetImuData+0x15c>)
   132fa:	4798      	blx	r3
   132fc:	e019      	b.n	13332 <CLI_GetImuData+0x12a>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   132fe:	4a1a      	ldr	r2, [pc, #104]	; (13368 <CLI_GetImuData+0x160>)
   13300:	68b9      	ldr	r1, [r7, #8]
   13302:	68fb      	ldr	r3, [r7, #12]
   13304:	0018      	movs	r0, r3
   13306:	4b16      	ldr	r3, [pc, #88]	; (13360 <CLI_GetImuData+0x158>)
   13308:	4798      	blx	r3
		imuPacket.xmg = -1;
   1330a:	2314      	movs	r3, #20
   1330c:	18fb      	adds	r3, r7, r3
   1330e:	2201      	movs	r2, #1
   13310:	4252      	negs	r2, r2
   13312:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   13314:	2314      	movs	r3, #20
   13316:	18fb      	adds	r3, r7, r3
   13318:	2202      	movs	r2, #2
   1331a:	4252      	negs	r2, r2
   1331c:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   1331e:	2314      	movs	r3, #20
   13320:	18fb      	adds	r3, r7, r3
   13322:	2203      	movs	r2, #3
   13324:	4252      	negs	r2, r2
   13326:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   13328:	2314      	movs	r3, #20
   1332a:	18fb      	adds	r3, r7, r3
   1332c:	0018      	movs	r0, r3
   1332e:	4b0d      	ldr	r3, [pc, #52]	; (13364 <CLI_GetImuData+0x15c>)
   13330:	4798      	blx	r3
    }
    return pdFALSE;
   13332:	2300      	movs	r3, #0
}
   13334:	0018      	movs	r0, r3
   13336:	46bd      	mov	sp, r7
   13338:	b008      	add	sp, #32
   1333a:	bdb0      	pop	{r4, r5, r7, pc}
   1333c:	00015215 	.word	0x00015215
   13340:	00014c09 	.word	0x00014c09
   13344:	2000046c 	.word	0x2000046c
   13348:	00034a5f 	.word	0x00034a5f
   1334c:	00014c45 	.word	0x00014c45
   13350:	00014499 	.word	0x00014499
   13354:	20000474 	.word	0x20000474
   13358:	00033005 	.word	0x00033005
   1335c:	0003608c 	.word	0x0003608c
   13360:	00034cb9 	.word	0x00034cb9
   13364:	00017455 	.word	0x00017455
   13368:	000360b0 	.word	0x000360b0

0001336c <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1336c:	b590      	push	{r4, r7, lr}
   1336e:	b087      	sub	sp, #28
   13370:	af00      	add	r7, sp, #0
   13372:	60f8      	str	r0, [r7, #12]
   13374:	60b9      	str	r1, [r7, #8]
   13376:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13378:	2317      	movs	r3, #23
   1337a:	18fb      	adds	r3, r7, r3
   1337c:	221b      	movs	r2, #27
   1337e:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13380:	2317      	movs	r3, #23
   13382:	18fb      	adds	r3, r7, r3
   13384:	781b      	ldrb	r3, [r3, #0]
   13386:	4a08      	ldr	r2, [pc, #32]	; (133a8 <xCliClearTerminalScreen+0x3c>)
   13388:	4808      	ldr	r0, [pc, #32]	; (133ac <xCliClearTerminalScreen+0x40>)
   1338a:	210f      	movs	r1, #15
   1338c:	4c08      	ldr	r4, [pc, #32]	; (133b0 <xCliClearTerminalScreen+0x44>)
   1338e:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13390:	4a06      	ldr	r2, [pc, #24]	; (133ac <xCliClearTerminalScreen+0x40>)
   13392:	68b9      	ldr	r1, [r7, #8]
   13394:	68fb      	ldr	r3, [r7, #12]
   13396:	0018      	movs	r0, r3
   13398:	4b05      	ldr	r3, [pc, #20]	; (133b0 <xCliClearTerminalScreen+0x44>)
   1339a:	4798      	blx	r3
    return pdFALSE;
   1339c:	2300      	movs	r3, #0
}
   1339e:	0018      	movs	r0, r3
   133a0:	46bd      	mov	sp, r7
   133a2:	b007      	add	sp, #28
   133a4:	bd90      	pop	{r4, r7, pc}
   133a6:	46c0      	nop			; (mov r8, r8)
   133a8:	000360d8 	.word	0x000360d8
   133ac:	20000384 	.word	0x20000384
   133b0:	00034cb9 	.word	0x00034cb9

000133b4 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   133b4:	b580      	push	{r7, lr}
   133b6:	b084      	sub	sp, #16
   133b8:	af00      	add	r7, sp, #0
   133ba:	60f8      	str	r0, [r7, #12]
   133bc:	60b9      	str	r1, [r7, #8]
   133be:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   133c0:	2002      	movs	r0, #2
   133c2:	4b03      	ldr	r3, [pc, #12]	; (133d0 <CLI_OTAU+0x1c>)
   133c4:	4798      	blx	r3

    return pdFALSE;
   133c6:	2300      	movs	r3, #0
}
   133c8:	0018      	movs	r0, r3
   133ca:	46bd      	mov	sp, r7
   133cc:	b004      	add	sp, #16
   133ce:	bd80      	pop	{r7, pc}
   133d0:	00017421 	.word	0x00017421

000133d4 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   133d4:	b580      	push	{r7, lr}
   133d6:	b084      	sub	sp, #16
   133d8:	af00      	add	r7, sp, #0
   133da:	60f8      	str	r0, [r7, #12]
   133dc:	60b9      	str	r1, [r7, #8]
   133de:	607a      	str	r2, [r7, #4]
    system_reset();
   133e0:	4b03      	ldr	r3, [pc, #12]	; (133f0 <CLI_ResetDevice+0x1c>)
   133e2:	4798      	blx	r3
    return pdFALSE;
   133e4:	2300      	movs	r3, #0
}
   133e6:	0018      	movs	r0, r3
   133e8:	46bd      	mov	sp, r7
   133ea:	b004      	add	sp, #16
   133ec:	bd80      	pop	{r7, pc}
   133ee:	46c0      	nop			; (mov r8, r8)
   133f0:	00012e5d 	.word	0x00012e5d

000133f4 <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   133f4:	b590      	push	{r4, r7, lr}
   133f6:	b091      	sub	sp, #68	; 0x44
   133f8:	af00      	add	r7, sp, #0
   133fa:	60f8      	str	r0, [r7, #12]
   133fc:	60b9      	str	r1, [r7, #8]
   133fe:	607a      	str	r2, [r7, #4]
	
	int8_t *pcParameter1, *pcParameter2, *pcParameter3, *pcParameter4;
	BaseType_t xParameter1StringLength, xParameter2StringLength, xParameter3StringLength, xParameter4StringLength, xResult;
	int key, red, green, blue;
	
	pcParameter1 = FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
   13400:	231c      	movs	r3, #28
   13402:	18fa      	adds	r2, r7, r3
   13404:	687b      	ldr	r3, [r7, #4]
   13406:	2101      	movs	r1, #1
   13408:	0018      	movs	r0, r3
   1340a:	4b49      	ldr	r3, [pc, #292]	; (13530 <CLI_NeotrellisSetLed+0x13c>)
   1340c:	4798      	blx	r3
   1340e:	0003      	movs	r3, r0
   13410:	63fb      	str	r3, [r7, #60]	; 0x3c
	pcParameter2 = FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameter2StringLength);
   13412:	2318      	movs	r3, #24
   13414:	18fa      	adds	r2, r7, r3
   13416:	687b      	ldr	r3, [r7, #4]
   13418:	2102      	movs	r1, #2
   1341a:	0018      	movs	r0, r3
   1341c:	4b44      	ldr	r3, [pc, #272]	; (13530 <CLI_NeotrellisSetLed+0x13c>)
   1341e:	4798      	blx	r3
   13420:	0003      	movs	r3, r0
   13422:	63bb      	str	r3, [r7, #56]	; 0x38
	pcParameter3 = FreeRTOS_CLIGetParameter(pcCommandString, 3, &xParameter3StringLength);
   13424:	2314      	movs	r3, #20
   13426:	18fa      	adds	r2, r7, r3
   13428:	687b      	ldr	r3, [r7, #4]
   1342a:	2103      	movs	r1, #3
   1342c:	0018      	movs	r0, r3
   1342e:	4b40      	ldr	r3, [pc, #256]	; (13530 <CLI_NeotrellisSetLed+0x13c>)
   13430:	4798      	blx	r3
   13432:	0003      	movs	r3, r0
   13434:	637b      	str	r3, [r7, #52]	; 0x34
	pcParameter4 = FreeRTOS_CLIGetParameter(pcCommandString, 4, &xParameter4StringLength);
   13436:	2310      	movs	r3, #16
   13438:	18fa      	adds	r2, r7, r3
   1343a:	687b      	ldr	r3, [r7, #4]
   1343c:	2104      	movs	r1, #4
   1343e:	0018      	movs	r0, r3
   13440:	4b3b      	ldr	r3, [pc, #236]	; (13530 <CLI_NeotrellisSetLed+0x13c>)
   13442:	4798      	blx	r3
   13444:	0003      	movs	r3, r0
   13446:	633b      	str	r3, [r7, #48]	; 0x30
	
	pcParameter1[ xParameter1StringLength ] = 0x00;
   13448:	69fb      	ldr	r3, [r7, #28]
   1344a:	001a      	movs	r2, r3
   1344c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1344e:	189b      	adds	r3, r3, r2
   13450:	2200      	movs	r2, #0
   13452:	701a      	strb	r2, [r3, #0]
	pcParameter2[ xParameter2StringLength ] = 0x00;
   13454:	69bb      	ldr	r3, [r7, #24]
   13456:	001a      	movs	r2, r3
   13458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1345a:	189b      	adds	r3, r3, r2
   1345c:	2200      	movs	r2, #0
   1345e:	701a      	strb	r2, [r3, #0]
	pcParameter3[ xParameter3StringLength ] = 0x00;
   13460:	697b      	ldr	r3, [r7, #20]
   13462:	001a      	movs	r2, r3
   13464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13466:	189b      	adds	r3, r3, r2
   13468:	2200      	movs	r2, #0
   1346a:	701a      	strb	r2, [r3, #0]
	pcParameter4[ xParameter4StringLength ] = 0x00;
   1346c:	693b      	ldr	r3, [r7, #16]
   1346e:	001a      	movs	r2, r3
   13470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13472:	189b      	adds	r3, r3, r2
   13474:	2200      	movs	r2, #0
   13476:	701a      	strb	r2, [r3, #0]
	
	key = atoi(pcParameter1);
   13478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1347a:	0018      	movs	r0, r3
   1347c:	4b2d      	ldr	r3, [pc, #180]	; (13534 <CLI_NeotrellisSetLed+0x140>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
   13482:	62fb      	str	r3, [r7, #44]	; 0x2c
	red = atoi(pcParameter2);
   13484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13486:	0018      	movs	r0, r3
   13488:	4b2a      	ldr	r3, [pc, #168]	; (13534 <CLI_NeotrellisSetLed+0x140>)
   1348a:	4798      	blx	r3
   1348c:	0003      	movs	r3, r0
   1348e:	62bb      	str	r3, [r7, #40]	; 0x28
	green = atoi(pcParameter3);
   13490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13492:	0018      	movs	r0, r3
   13494:	4b27      	ldr	r3, [pc, #156]	; (13534 <CLI_NeotrellisSetLed+0x140>)
   13496:	4798      	blx	r3
   13498:	0003      	movs	r3, r0
   1349a:	627b      	str	r3, [r7, #36]	; 0x24
	blue = atoi(pcParameter4);
   1349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1349e:	0018      	movs	r0, r3
   134a0:	4b24      	ldr	r3, [pc, #144]	; (13534 <CLI_NeotrellisSetLed+0x140>)
   134a2:	4798      	blx	r3
   134a4:	0003      	movs	r3, r0
   134a6:	623b      	str	r3, [r7, #32]
	
	if (key < 0 || key > 15 || red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255 || SeesawSetLed(key, red, green, blue) != 0) {
   134a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   134aa:	2b00      	cmp	r3, #0
   134ac:	db20      	blt.n	134f0 <CLI_NeotrellisSetLed+0xfc>
   134ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   134b0:	2b0f      	cmp	r3, #15
   134b2:	dc1d      	bgt.n	134f0 <CLI_NeotrellisSetLed+0xfc>
   134b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   134b6:	2b00      	cmp	r3, #0
   134b8:	db1a      	blt.n	134f0 <CLI_NeotrellisSetLed+0xfc>
   134ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   134bc:	2bff      	cmp	r3, #255	; 0xff
   134be:	dc17      	bgt.n	134f0 <CLI_NeotrellisSetLed+0xfc>
   134c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   134c2:	2b00      	cmp	r3, #0
   134c4:	db14      	blt.n	134f0 <CLI_NeotrellisSetLed+0xfc>
   134c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   134c8:	2bff      	cmp	r3, #255	; 0xff
   134ca:	dc11      	bgt.n	134f0 <CLI_NeotrellisSetLed+0xfc>
   134cc:	6a3b      	ldr	r3, [r7, #32]
   134ce:	2b00      	cmp	r3, #0
   134d0:	db0e      	blt.n	134f0 <CLI_NeotrellisSetLed+0xfc>
   134d2:	6a3b      	ldr	r3, [r7, #32]
   134d4:	2bff      	cmp	r3, #255	; 0xff
   134d6:	dc0b      	bgt.n	134f0 <CLI_NeotrellisSetLed+0xfc>
   134d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   134da:	b2d8      	uxtb	r0, r3
   134dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   134de:	b2d9      	uxtb	r1, r3
   134e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   134e2:	b2da      	uxtb	r2, r3
   134e4:	6a3b      	ldr	r3, [r7, #32]
   134e6:	b2db      	uxtb	r3, r3
   134e8:	4c13      	ldr	r4, [pc, #76]	; (13538 <CLI_NeotrellisSetLed+0x144>)
   134ea:	47a0      	blx	r4
   134ec:	1e03      	subs	r3, r0, #0
   134ee:	d007      	beq.n	13500 <CLI_NeotrellisSetLed+0x10c>
		
		snprintf( pcWriteBuffer, xWriteBufferLen, "Error during set LED\n\r" );
   134f0:	4a12      	ldr	r2, [pc, #72]	; (1353c <CLI_NeotrellisSetLed+0x148>)
   134f2:	68b9      	ldr	r1, [r7, #8]
   134f4:	68fb      	ldr	r3, [r7, #12]
   134f6:	0018      	movs	r0, r3
   134f8:	4b11      	ldr	r3, [pc, #68]	; (13540 <CLI_NeotrellisSetLed+0x14c>)
   134fa:	4798      	blx	r3
		return pdTRUE;
   134fc:	2301      	movs	r3, #1
   134fe:	e012      	b.n	13526 <CLI_NeotrellisSetLed+0x132>
		
	}
	
	
	SeesawSetLed(key, red, green, blue);
   13500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13502:	b2d8      	uxtb	r0, r3
   13504:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13506:	b2d9      	uxtb	r1, r3
   13508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1350a:	b2da      	uxtb	r2, r3
   1350c:	6a3b      	ldr	r3, [r7, #32]
   1350e:	b2db      	uxtb	r3, r3
   13510:	4c09      	ldr	r4, [pc, #36]	; (13538 <CLI_NeotrellisSetLed+0x144>)
   13512:	47a0      	blx	r4
	SeesawOrderLedUpdate();
   13514:	4b0b      	ldr	r3, [pc, #44]	; (13544 <CLI_NeotrellisSetLed+0x150>)
   13516:	4798      	blx	r3
	snprintf( pcWriteBuffer, xWriteBufferLen, "Set LED success\n\r" );
   13518:	4a0b      	ldr	r2, [pc, #44]	; (13548 <CLI_NeotrellisSetLed+0x154>)
   1351a:	68b9      	ldr	r1, [r7, #8]
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	0018      	movs	r0, r3
   13520:	4b07      	ldr	r3, [pc, #28]	; (13540 <CLI_NeotrellisSetLed+0x14c>)
   13522:	4798      	blx	r3
	
	return pdFALSE;
   13524:	2300      	movs	r3, #0
}
   13526:	0018      	movs	r0, r3
   13528:	46bd      	mov	sp, r7
   1352a:	b011      	add	sp, #68	; 0x44
   1352c:	bd90      	pop	{r4, r7, pc}
   1352e:	46c0      	nop			; (mov r8, r8)
   13530:	00017fd5 	.word	0x00017fd5
   13534:	000349ad 	.word	0x000349ad
   13538:	000155c9 	.word	0x000155c9
   1353c:	000360e0 	.word	0x000360e0
   13540:	00034cb9 	.word	0x00034cb9
   13544:	00015691 	.word	0x00015691
   13548:	000360f8 	.word	0x000360f8

0001354c <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1354c:	b590      	push	{r4, r7, lr}
   1354e:	b099      	sub	sp, #100	; 0x64
   13550:	af00      	add	r7, sp, #0
   13552:	60f8      	str	r0, [r7, #12]
   13554:	60b9      	str	r1, [r7, #8]
   13556:	607a      	str	r2, [r7, #4]
    // snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
    // Print to pcWriteBuffer in order.
    // If the string is too long to print, print what you can.
    // The function you write will be useful in the future.
    uint8_t buffer[64];
    uint8_t count = SeesawGetKeypadCount();
   13558:	235f      	movs	r3, #95	; 0x5f
   1355a:	18fc      	adds	r4, r7, r3
   1355c:	4b36      	ldr	r3, [pc, #216]	; (13638 <CLI_NeotrellProcessButtonBuffer+0xec>)
   1355e:	4798      	blx	r3
   13560:	0003      	movs	r3, r0
   13562:	7023      	strb	r3, [r4, #0]
    if (count >= 1) {
   13564:	235f      	movs	r3, #95	; 0x5f
   13566:	18fb      	adds	r3, r7, r3
   13568:	781b      	ldrb	r3, [r3, #0]
   1356a:	2b00      	cmp	r3, #0
   1356c:	d05d      	beq.n	1362a <CLI_NeotrellProcessButtonBuffer+0xde>
        int32_t res = SeesawReadKeypad(buffer, 1);
   1356e:	2310      	movs	r3, #16
   13570:	18fb      	adds	r3, r7, r3
   13572:	2101      	movs	r1, #1
   13574:	0018      	movs	r0, r3
   13576:	4b31      	ldr	r3, [pc, #196]	; (1363c <CLI_NeotrellProcessButtonBuffer+0xf0>)
   13578:	4798      	blx	r3
   1357a:	0003      	movs	r3, r0
   1357c:	65bb      	str	r3, [r7, #88]	; 0x58
        if (res == 0) {
   1357e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13580:	2b00      	cmp	r3, #0
   13582:	d150      	bne.n	13626 <CLI_NeotrellProcessButtonBuffer+0xda>
            uint8_t pos, press;
            press = buffer[0] & 0x3;
   13584:	2310      	movs	r3, #16
   13586:	18fb      	adds	r3, r7, r3
   13588:	781a      	ldrb	r2, [r3, #0]
   1358a:	2357      	movs	r3, #87	; 0x57
   1358c:	18fb      	adds	r3, r7, r3
   1358e:	2103      	movs	r1, #3
   13590:	400a      	ands	r2, r1
   13592:	701a      	strb	r2, [r3, #0]
            pos = buffer[0] >> 2;
   13594:	2310      	movs	r3, #16
   13596:	18fb      	adds	r3, r7, r3
   13598:	781a      	ldrb	r2, [r3, #0]
   1359a:	2356      	movs	r3, #86	; 0x56
   1359c:	18fb      	adds	r3, r7, r3
   1359e:	0892      	lsrs	r2, r2, #2
   135a0:	701a      	strb	r2, [r3, #0]
            int num = NEO_TRELLIS_SEESAW_KEY(pos);
   135a2:	2356      	movs	r3, #86	; 0x56
   135a4:	18fb      	adds	r3, r7, r3
   135a6:	781b      	ldrb	r3, [r3, #0]
   135a8:	08db      	lsrs	r3, r3, #3
   135aa:	b2db      	uxtb	r3, r3
   135ac:	009a      	lsls	r2, r3, #2
   135ae:	2356      	movs	r3, #86	; 0x56
   135b0:	18fb      	adds	r3, r7, r3
   135b2:	781b      	ldrb	r3, [r3, #0]
   135b4:	2107      	movs	r1, #7
   135b6:	400b      	ands	r3, r1
   135b8:	18d3      	adds	r3, r2, r3
   135ba:	653b      	str	r3, [r7, #80]	; 0x50
            if (press == 0x2) {
   135bc:	2357      	movs	r3, #87	; 0x57
   135be:	18fb      	adds	r3, r7, r3
   135c0:	781b      	ldrb	r3, [r3, #0]
   135c2:	2b02      	cmp	r3, #2
   135c4:	d115      	bne.n	135f2 <CLI_NeotrellProcessButtonBuffer+0xa6>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   135c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   135c8:	2b00      	cmp	r3, #0
   135ca:	da00      	bge.n	135ce <CLI_NeotrellProcessButtonBuffer+0x82>
   135cc:	3307      	adds	r3, #7
   135ce:	10db      	asrs	r3, r3, #3
   135d0:	009a      	lsls	r2, r3, #2
   135d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   135d4:	491a      	ldr	r1, [pc, #104]	; (13640 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   135d6:	400b      	ands	r3, r1
   135d8:	d504      	bpl.n	135e4 <CLI_NeotrellProcessButtonBuffer+0x98>
   135da:	3b01      	subs	r3, #1
   135dc:	2108      	movs	r1, #8
   135de:	4249      	negs	r1, r1
   135e0:	430b      	orrs	r3, r1
   135e2:	3301      	adds	r3, #1
   135e4:	18d3      	adds	r3, r2, r3
   135e6:	4a17      	ldr	r2, [pc, #92]	; (13644 <CLI_NeotrellProcessButtonBuffer+0xf8>)
   135e8:	68b9      	ldr	r1, [r7, #8]
   135ea:	68f8      	ldr	r0, [r7, #12]
   135ec:	4c16      	ldr	r4, [pc, #88]	; (13648 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   135ee:	47a0      	blx	r4
   135f0:	e019      	b.n	13626 <CLI_NeotrellProcessButtonBuffer+0xda>
            } else if (press == 0x3) {
   135f2:	2357      	movs	r3, #87	; 0x57
   135f4:	18fb      	adds	r3, r7, r3
   135f6:	781b      	ldrb	r3, [r3, #0]
   135f8:	2b03      	cmp	r3, #3
   135fa:	d114      	bne.n	13626 <CLI_NeotrellProcessButtonBuffer+0xda>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   135fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   135fe:	2b00      	cmp	r3, #0
   13600:	da00      	bge.n	13604 <CLI_NeotrellProcessButtonBuffer+0xb8>
   13602:	3307      	adds	r3, #7
   13604:	10db      	asrs	r3, r3, #3
   13606:	009a      	lsls	r2, r3, #2
   13608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1360a:	490d      	ldr	r1, [pc, #52]	; (13640 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   1360c:	400b      	ands	r3, r1
   1360e:	d504      	bpl.n	1361a <CLI_NeotrellProcessButtonBuffer+0xce>
   13610:	3b01      	subs	r3, #1
   13612:	2108      	movs	r1, #8
   13614:	4249      	negs	r1, r1
   13616:	430b      	orrs	r3, r1
   13618:	3301      	adds	r3, #1
   1361a:	18d3      	adds	r3, r2, r3
   1361c:	4a0b      	ldr	r2, [pc, #44]	; (1364c <CLI_NeotrellProcessButtonBuffer+0x100>)
   1361e:	68b9      	ldr	r1, [r7, #8]
   13620:	68f8      	ldr	r0, [r7, #12]
   13622:	4c09      	ldr	r4, [pc, #36]	; (13648 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13624:	47a0      	blx	r4
            }
        }
        return pdTRUE;
   13626:	2301      	movs	r3, #1
   13628:	e002      	b.n	13630 <CLI_NeotrellProcessButtonBuffer+0xe4>
    } else {
        pcWriteBuffer = 0;
   1362a:	2300      	movs	r3, #0
   1362c:	60fb      	str	r3, [r7, #12]
        return pdFALSE;
   1362e:	2300      	movs	r3, #0
    }
}
   13630:	0018      	movs	r0, r3
   13632:	46bd      	mov	sp, r7
   13634:	b019      	add	sp, #100	; 0x64
   13636:	bd90      	pop	{r4, r7, pc}
   13638:	00015415 	.word	0x00015415
   1363c:	0001547d 	.word	0x0001547d
   13640:	80000007 	.word	0x80000007
   13644:	0003610c 	.word	0x0003610c
   13648:	00034cb9 	.word	0x00034cb9
   1364c:	00036128 	.word	0x00036128

00013650 <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13650:	b590      	push	{r4, r7, lr}
   13652:	b087      	sub	sp, #28
   13654:	af00      	add	r7, sp, #0
   13656:	60f8      	str	r0, [r7, #12]
   13658:	60b9      	str	r1, [r7, #8]
   1365a:	607a      	str	r2, [r7, #4]
    uint16_t distance = 0;
   1365c:	2312      	movs	r3, #18
   1365e:	18fb      	adds	r3, r7, r3
   13660:	2200      	movs	r2, #0
   13662:	801a      	strh	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
   13664:	2312      	movs	r3, #18
   13666:	18fb      	adds	r3, r7, r3
   13668:	2164      	movs	r1, #100	; 0x64
   1366a:	0018      	movs	r0, r3
   1366c:	4b19      	ldr	r3, [pc, #100]	; (136d4 <CLI_DistanceSensorGetDistance+0x84>)
   1366e:	4798      	blx	r3
   13670:	0003      	movs	r3, r0
   13672:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   13674:	697b      	ldr	r3, [r7, #20]
   13676:	2b00      	cmp	r3, #0
   13678:	d006      	beq.n	13688 <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   1367a:	697b      	ldr	r3, [r7, #20]
   1367c:	4a16      	ldr	r2, [pc, #88]	; (136d8 <CLI_DistanceSensorGetDistance+0x88>)
   1367e:	68b9      	ldr	r1, [r7, #8]
   13680:	68f8      	ldr	r0, [r7, #12]
   13682:	4c16      	ldr	r4, [pc, #88]	; (136dc <CLI_DistanceSensorGetDistance+0x8c>)
   13684:	47a0      	blx	r4
   13686:	e007      	b.n	13698 <CLI_DistanceSensorGetDistance+0x48>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
   13688:	2312      	movs	r3, #18
   1368a:	18fb      	adds	r3, r7, r3
   1368c:	881b      	ldrh	r3, [r3, #0]
   1368e:	4a14      	ldr	r2, [pc, #80]	; (136e0 <CLI_DistanceSensorGetDistance+0x90>)
   13690:	68b9      	ldr	r1, [r7, #8]
   13692:	68f8      	ldr	r0, [r7, #12]
   13694:	4c11      	ldr	r4, [pc, #68]	; (136dc <CLI_DistanceSensorGetDistance+0x8c>)
   13696:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
   13698:	2312      	movs	r3, #18
   1369a:	18fb      	adds	r3, r7, r3
   1369c:	0018      	movs	r0, r3
   1369e:	4b11      	ldr	r3, [pc, #68]	; (136e4 <CLI_DistanceSensorGetDistance+0x94>)
   136a0:	4798      	blx	r3
   136a2:	0003      	movs	r3, r0
   136a4:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   136a6:	697b      	ldr	r3, [r7, #20]
   136a8:	2b01      	cmp	r3, #1
   136aa:	d10e      	bne.n	136ca <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   136ac:	68fb      	ldr	r3, [r7, #12]
   136ae:	0018      	movs	r0, r3
   136b0:	4b0d      	ldr	r3, [pc, #52]	; (136e8 <CLI_DistanceSensorGetDistance+0x98>)
   136b2:	4798      	blx	r3
   136b4:	0003      	movs	r3, r0
   136b6:	001a      	movs	r2, r3
   136b8:	68fb      	ldr	r3, [r7, #12]
   136ba:	189a      	adds	r2, r3, r2
   136bc:	4b0b      	ldr	r3, [pc, #44]	; (136ec <CLI_DistanceSensorGetDistance+0x9c>)
   136be:	0010      	movs	r0, r2
   136c0:	0019      	movs	r1, r3
   136c2:	231a      	movs	r3, #26
   136c4:	001a      	movs	r2, r3
   136c6:	4b0a      	ldr	r3, [pc, #40]	; (136f0 <CLI_DistanceSensorGetDistance+0xa0>)
   136c8:	4798      	blx	r3
    }
    return pdFALSE;
   136ca:	2300      	movs	r3, #0
}
   136cc:	0018      	movs	r0, r3
   136ce:	46bd      	mov	sp, r7
   136d0:	b007      	add	sp, #28
   136d2:	bd90      	pop	{r4, r7, pc}
   136d4:	00013a21 	.word	0x00013a21
   136d8:	00036140 	.word	0x00036140
   136dc:	00034cb9 	.word	0x00034cb9
   136e0:	00036154 	.word	0x00036154
   136e4:	00017481 	.word	0x00017481
   136e8:	00034e17 	.word	0x00034e17
   136ec:	00036168 	.word	0x00036168
   136f0:	00034a29 	.word	0x00034a29

000136f4 <CLI_SendDummyGameData>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_SendDummyGameData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   136f4:	b580      	push	{r7, lr}
   136f6:	b08a      	sub	sp, #40	; 0x28
   136f8:	af00      	add	r7, sp, #0
   136fa:	60f8      	str	r0, [r7, #12]
   136fc:	60b9      	str	r1, [r7, #8]
   136fe:	607a      	str	r2, [r7, #4]
    struct GameDataPacket gamevar;

    gamevar.game[0] = 0;
   13700:	2310      	movs	r3, #16
   13702:	18fb      	adds	r3, r7, r3
   13704:	2200      	movs	r2, #0
   13706:	701a      	strb	r2, [r3, #0]
    gamevar.game[1] = 1;
   13708:	2310      	movs	r3, #16
   1370a:	18fb      	adds	r3, r7, r3
   1370c:	2201      	movs	r2, #1
   1370e:	705a      	strb	r2, [r3, #1]
    gamevar.game[2] = 2;
   13710:	2310      	movs	r3, #16
   13712:	18fb      	adds	r3, r7, r3
   13714:	2202      	movs	r2, #2
   13716:	709a      	strb	r2, [r3, #2]
    gamevar.game[3] = 3;
   13718:	2310      	movs	r3, #16
   1371a:	18fb      	adds	r3, r7, r3
   1371c:	2203      	movs	r2, #3
   1371e:	70da      	strb	r2, [r3, #3]
    gamevar.game[4] = 4;
   13720:	2310      	movs	r3, #16
   13722:	18fb      	adds	r3, r7, r3
   13724:	2204      	movs	r2, #4
   13726:	711a      	strb	r2, [r3, #4]
    gamevar.game[5] = 5;
   13728:	2310      	movs	r3, #16
   1372a:	18fb      	adds	r3, r7, r3
   1372c:	2205      	movs	r2, #5
   1372e:	715a      	strb	r2, [r3, #5]
    gamevar.game[6] = 6;
   13730:	2310      	movs	r3, #16
   13732:	18fb      	adds	r3, r7, r3
   13734:	2206      	movs	r2, #6
   13736:	719a      	strb	r2, [r3, #6]
    gamevar.game[7] = 7;
   13738:	2310      	movs	r3, #16
   1373a:	18fb      	adds	r3, r7, r3
   1373c:	2207      	movs	r2, #7
   1373e:	71da      	strb	r2, [r3, #7]
    gamevar.game[8] = 8;
   13740:	2310      	movs	r3, #16
   13742:	18fb      	adds	r3, r7, r3
   13744:	2208      	movs	r2, #8
   13746:	721a      	strb	r2, [r3, #8]
    gamevar.game[9] = 9;
   13748:	2310      	movs	r3, #16
   1374a:	18fb      	adds	r3, r7, r3
   1374c:	2209      	movs	r2, #9
   1374e:	725a      	strb	r2, [r3, #9]
    gamevar.game[10] = 0xFF;
   13750:	2310      	movs	r3, #16
   13752:	18fb      	adds	r3, r7, r3
   13754:	22ff      	movs	r2, #255	; 0xff
   13756:	729a      	strb	r2, [r3, #10]

    int error = WifiAddGameDataToQueue(&gamevar);
   13758:	2310      	movs	r3, #16
   1375a:	18fb      	adds	r3, r7, r3
   1375c:	0018      	movs	r0, r3
   1375e:	4b09      	ldr	r3, [pc, #36]	; (13784 <CLI_SendDummyGameData+0x90>)
   13760:	4798      	blx	r3
   13762:	0003      	movs	r3, r0
   13764:	627b      	str	r3, [r7, #36]	; 0x24
    if (error == pdTRUE) {
   13766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13768:	2b01      	cmp	r3, #1
   1376a:	d105      	bne.n	13778 <CLI_SendDummyGameData+0x84>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   1376c:	4a06      	ldr	r2, [pc, #24]	; (13788 <CLI_SendDummyGameData+0x94>)
   1376e:	68b9      	ldr	r1, [r7, #8]
   13770:	68fb      	ldr	r3, [r7, #12]
   13772:	0018      	movs	r0, r3
   13774:	4b05      	ldr	r3, [pc, #20]	; (1378c <CLI_SendDummyGameData+0x98>)
   13776:	4798      	blx	r3
    }
    return pdFALSE;
   13778:	2300      	movs	r3, #0
}
   1377a:	0018      	movs	r0, r3
   1377c:	46bd      	mov	sp, r7
   1377e:	b00a      	add	sp, #40	; 0x28
   13780:	bd80      	pop	{r7, pc}
   13782:	46c0      	nop			; (mov r8, r8)
   13784:	000174ad 	.word	0x000174ad
   13788:	00036184 	.word	0x00036184
   1378c:	00034cb9 	.word	0x00034cb9

00013790 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13790:	b590      	push	{r4, r7, lr}
   13792:	b08f      	sub	sp, #60	; 0x3c
   13794:	af00      	add	r7, sp, #0
   13796:	60f8      	str	r0, [r7, #12]
   13798:	60b9      	str	r1, [r7, #8]
   1379a:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   1379c:	2318      	movs	r3, #24
   1379e:	18fb      	adds	r3, r7, r3
   137a0:	2200      	movs	r2, #0
   137a2:	701a      	strb	r2, [r3, #0]
   137a4:	2318      	movs	r3, #24
   137a6:	18fb      	adds	r3, r7, r3
   137a8:	2200      	movs	r2, #0
   137aa:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   137ac:	2318      	movs	r3, #24
   137ae:	18fb      	adds	r3, r7, r3
   137b0:	2200      	movs	r2, #0
   137b2:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   137b4:	2318      	movs	r3, #24
   137b6:	18fb      	adds	r3, r7, r3
   137b8:	2200      	movs	r2, #0
   137ba:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   137bc:	231c      	movs	r3, #28
   137be:	18fb      	adds	r3, r7, r3
   137c0:	2200      	movs	r2, #0
   137c2:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   137c4:	231c      	movs	r3, #28
   137c6:	18fb      	adds	r3, r7, r3
   137c8:	2214      	movs	r2, #20
   137ca:	18ba      	adds	r2, r7, r2
   137cc:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   137ce:	231c      	movs	r3, #28
   137d0:	18fb      	adds	r3, r7, r3
   137d2:	2201      	movs	r2, #1
   137d4:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   137d6:	231c      	movs	r3, #28
   137d8:	18fb      	adds	r3, r7, r3
   137da:	2218      	movs	r2, #24
   137dc:	18ba      	adds	r2, r7, r2
   137de:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   137e0:	231c      	movs	r3, #28
   137e2:	18fb      	adds	r3, r7, r3
   137e4:	2201      	movs	r2, #1
   137e6:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   137e8:	4b2a      	ldr	r3, [pc, #168]	; (13894 <CLI_i2cScan+0x104>)
   137ea:	0018      	movs	r0, r3
   137ec:	4b2a      	ldr	r3, [pc, #168]	; (13898 <CLI_i2cScan+0x108>)
   137ee:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   137f0:	2300      	movs	r3, #0
   137f2:	637b      	str	r3, [r7, #52]	; 0x34
   137f4:	e042      	b.n	1387c <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   137f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137f8:	4a28      	ldr	r2, [pc, #160]	; (1389c <CLI_i2cScan+0x10c>)
   137fa:	4829      	ldr	r0, [pc, #164]	; (138a0 <CLI_i2cScan+0x110>)
   137fc:	210f      	movs	r1, #15
   137fe:	4c29      	ldr	r4, [pc, #164]	; (138a4 <CLI_i2cScan+0x114>)
   13800:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   13802:	4b27      	ldr	r3, [pc, #156]	; (138a0 <CLI_i2cScan+0x110>)
   13804:	0018      	movs	r0, r3
   13806:	4b24      	ldr	r3, [pc, #144]	; (13898 <CLI_i2cScan+0x108>)
   13808:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   1380a:	2300      	movs	r3, #0
   1380c:	633b      	str	r3, [r7, #48]	; 0x30
   1380e:	e02b      	b.n	13868 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   13810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13812:	b2da      	uxtb	r2, r3
   13814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13816:	b2db      	uxtb	r3, r3
   13818:	18d3      	adds	r3, r2, r3
   1381a:	b2da      	uxtb	r2, r3
   1381c:	231c      	movs	r3, #28
   1381e:	18fb      	adds	r3, r7, r3
   13820:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
   13822:	231c      	movs	r3, #28
   13824:	18fb      	adds	r3, r7, r3
   13826:	2264      	movs	r2, #100	; 0x64
   13828:	2164      	movs	r1, #100	; 0x64
   1382a:	0018      	movs	r0, r3
   1382c:	4b1e      	ldr	r3, [pc, #120]	; (138a8 <CLI_i2cScan+0x118>)
   1382e:	4798      	blx	r3
   13830:	0003      	movs	r3, r0
   13832:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   13834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13836:	2b00      	cmp	r3, #0
   13838:	d10c      	bne.n	13854 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   1383a:	231c      	movs	r3, #28
   1383c:	18fb      	adds	r3, r7, r3
   1383e:	781b      	ldrb	r3, [r3, #0]
   13840:	4a1a      	ldr	r2, [pc, #104]	; (138ac <CLI_i2cScan+0x11c>)
   13842:	4817      	ldr	r0, [pc, #92]	; (138a0 <CLI_i2cScan+0x110>)
   13844:	210f      	movs	r1, #15
   13846:	4c17      	ldr	r4, [pc, #92]	; (138a4 <CLI_i2cScan+0x114>)
   13848:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   1384a:	4b15      	ldr	r3, [pc, #84]	; (138a0 <CLI_i2cScan+0x110>)
   1384c:	0018      	movs	r0, r3
   1384e:	4b12      	ldr	r3, [pc, #72]	; (13898 <CLI_i2cScan+0x108>)
   13850:	4798      	blx	r3
   13852:	e006      	b.n	13862 <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   13854:	4b12      	ldr	r3, [pc, #72]	; (138a0 <CLI_i2cScan+0x110>)
   13856:	4a16      	ldr	r2, [pc, #88]	; (138b0 <CLI_i2cScan+0x120>)
   13858:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   1385a:	4b11      	ldr	r3, [pc, #68]	; (138a0 <CLI_i2cScan+0x110>)
   1385c:	0018      	movs	r0, r3
   1385e:	4b0e      	ldr	r3, [pc, #56]	; (13898 <CLI_i2cScan+0x108>)
   13860:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   13862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13864:	3301      	adds	r3, #1
   13866:	633b      	str	r3, [r7, #48]	; 0x30
   13868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1386a:	2b0f      	cmp	r3, #15
   1386c:	ddd0      	ble.n	13810 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   1386e:	4b11      	ldr	r3, [pc, #68]	; (138b4 <CLI_i2cScan+0x124>)
   13870:	0018      	movs	r0, r3
   13872:	4b09      	ldr	r3, [pc, #36]	; (13898 <CLI_i2cScan+0x108>)
   13874:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13878:	3310      	adds	r3, #16
   1387a:	637b      	str	r3, [r7, #52]	; 0x34
   1387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1387e:	2b7f      	cmp	r3, #127	; 0x7f
   13880:	ddb9      	ble.n	137f6 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   13882:	4b0c      	ldr	r3, [pc, #48]	; (138b4 <CLI_i2cScan+0x124>)
   13884:	0018      	movs	r0, r3
   13886:	4b04      	ldr	r3, [pc, #16]	; (13898 <CLI_i2cScan+0x108>)
   13888:	4798      	blx	r3
			return pdFALSE;
   1388a:	2300      	movs	r3, #0

}
   1388c:	0018      	movs	r0, r3
   1388e:	46bd      	mov	sp, r7
   13890:	b00f      	add	sp, #60	; 0x3c
   13892:	bd90      	pop	{r4, r7, pc}
   13894:	000361a0 	.word	0x000361a0
   13898:	0001de15 	.word	0x0001de15
   1389c:	000361d4 	.word	0x000361d4
   138a0:	20000384 	.word	0x20000384
   138a4:	00034cb9 	.word	0x00034cb9
   138a8:	00014341 	.word	0x00014341
   138ac:	000361dc 	.word	0x000361dc
   138b0:	00202058 	.word	0x00202058
   138b4:	00036078 	.word	0x00036078

000138b8 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   138b8:	b580      	push	{r7, lr}
   138ba:	b088      	sub	sp, #32
   138bc:	af00      	add	r7, sp, #0
   138be:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   138c0:	4b3a      	ldr	r3, [pc, #232]	; (139ac <vControlHandlerTask+0xf4>)
   138c2:	0018      	movs	r0, r3
   138c4:	4b3a      	ldr	r3, [pc, #232]	; (139b0 <vControlHandlerTask+0xf8>)
   138c6:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   138c8:	2200      	movs	r2, #0
   138ca:	2114      	movs	r1, #20
   138cc:	2002      	movs	r0, #2
   138ce:	4b39      	ldr	r3, [pc, #228]	; (139b4 <vControlHandlerTask+0xfc>)
   138d0:	4798      	blx	r3
   138d2:	0002      	movs	r2, r0
   138d4:	4b38      	ldr	r3, [pc, #224]	; (139b8 <vControlHandlerTask+0x100>)
   138d6:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   138d8:	2200      	movs	r2, #0
   138da:	2103      	movs	r1, #3
   138dc:	2002      	movs	r0, #2
   138de:	4b35      	ldr	r3, [pc, #212]	; (139b4 <vControlHandlerTask+0xfc>)
   138e0:	4798      	blx	r3
   138e2:	0002      	movs	r2, r0
   138e4:	4b35      	ldr	r3, [pc, #212]	; (139bc <vControlHandlerTask+0x104>)
   138e6:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   138e8:	4b33      	ldr	r3, [pc, #204]	; (139b8 <vControlHandlerTask+0x100>)
   138ea:	681b      	ldr	r3, [r3, #0]
   138ec:	2b00      	cmp	r3, #0
   138ee:	d003      	beq.n	138f8 <vControlHandlerTask+0x40>
   138f0:	4b32      	ldr	r3, [pc, #200]	; (139bc <vControlHandlerTask+0x104>)
   138f2:	681b      	ldr	r3, [r3, #0]
   138f4:	2b00      	cmp	r3, #0
   138f6:	d103      	bne.n	13900 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   138f8:	4b31      	ldr	r3, [pc, #196]	; (139c0 <vControlHandlerTask+0x108>)
   138fa:	0018      	movs	r0, r3
   138fc:	4b2c      	ldr	r3, [pc, #176]	; (139b0 <vControlHandlerTask+0xf8>)
   138fe:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   13900:	4b30      	ldr	r3, [pc, #192]	; (139c4 <vControlHandlerTask+0x10c>)
   13902:	2200      	movs	r2, #0
   13904:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   13906:	4b2f      	ldr	r3, [pc, #188]	; (139c4 <vControlHandlerTask+0x10c>)
   13908:	781b      	ldrb	r3, [r3, #0]
   1390a:	2b01      	cmp	r3, #1
   1390c:	d01d      	beq.n	1394a <vControlHandlerTask+0x92>
   1390e:	2b02      	cmp	r3, #2
   13910:	d042      	beq.n	13998 <vControlHandlerTask+0xe0>
   13912:	2b00      	cmp	r3, #0
   13914:	d13c      	bne.n	13990 <vControlHandlerTask+0xd8>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   13916:	4b28      	ldr	r3, [pc, #160]	; (139b8 <vControlHandlerTask+0x100>)
   13918:	681b      	ldr	r3, [r3, #0]
   1391a:	220c      	movs	r2, #12
   1391c:	18b9      	adds	r1, r7, r2
   1391e:	2200      	movs	r2, #0
   13920:	0018      	movs	r0, r3
   13922:	4b29      	ldr	r3, [pc, #164]	; (139c8 <vControlHandlerTask+0x110>)
   13924:	4798      	blx	r3
   13926:	0003      	movs	r3, r0
   13928:	2b01      	cmp	r3, #1
   1392a:	d137      	bne.n	1399c <vControlHandlerTask+0xe4>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   1392c:	4b27      	ldr	r3, [pc, #156]	; (139cc <vControlHandlerTask+0x114>)
   1392e:	0019      	movs	r1, r3
   13930:	2001      	movs	r0, #1
   13932:	4b27      	ldr	r3, [pc, #156]	; (139d0 <vControlHandlerTask+0x118>)
   13934:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   13936:	230c      	movs	r3, #12
   13938:	18fb      	adds	r3, r7, r3
   1393a:	0018      	movs	r0, r3
   1393c:	4b25      	ldr	r3, [pc, #148]	; (139d4 <vControlHandlerTask+0x11c>)
   1393e:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   13940:	4b20      	ldr	r3, [pc, #128]	; (139c4 <vControlHandlerTask+0x10c>)
   13942:	2201      	movs	r2, #1
   13944:	701a      	strb	r2, [r3, #0]
                }

                break;
   13946:	46c0      	nop			; (mov r8, r8)
   13948:	e028      	b.n	1399c <vControlHandlerTask+0xe4>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   1394a:	4b23      	ldr	r3, [pc, #140]	; (139d8 <vControlHandlerTask+0x120>)
   1394c:	4798      	blx	r3
   1394e:	1e03      	subs	r3, r0, #0
   13950:	d026      	beq.n	139a0 <vControlHandlerTask+0xe8>
                    // Send back local game packet
					if(isGameOver()) {
   13952:	4b22      	ldr	r3, [pc, #136]	; (139dc <vControlHandlerTask+0x124>)
   13954:	4798      	blx	r3
   13956:	1e03      	subs	r3, r0, #0
   13958:	d008      	beq.n	1396c <vControlHandlerTask+0xb4>
						LogMessage(LOG_DEBUG_LVL, "Game Over !  You lose. Type reset to restart the game.\r\n");
   1395a:	4b21      	ldr	r3, [pc, #132]	; (139e0 <vControlHandlerTask+0x128>)
   1395c:	0019      	movs	r1, r3
   1395e:	2001      	movs	r0, #1
   13960:	4b1b      	ldr	r3, [pc, #108]	; (139d0 <vControlHandlerTask+0x118>)
   13962:	4798      	blx	r3
						controlState = CONTROL_END_GAME;
   13964:	4b17      	ldr	r3, [pc, #92]	; (139c4 <vControlHandlerTask+0x10c>)
   13966:	2202      	movs	r2, #2
   13968:	701a      	strb	r2, [r3, #0]
						controlState = CONTROL_WAIT_FOR_GAME;
					}
                    
                }

                break;
   1396a:	e019      	b.n	139a0 <vControlHandlerTask+0xe8>
						if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   1396c:	4b1d      	ldr	r3, [pc, #116]	; (139e4 <vControlHandlerTask+0x12c>)
   1396e:	4798      	blx	r3
   13970:	0003      	movs	r3, r0
   13972:	0018      	movs	r0, r3
   13974:	4b1c      	ldr	r3, [pc, #112]	; (139e8 <vControlHandlerTask+0x130>)
   13976:	4798      	blx	r3
   13978:	0003      	movs	r3, r0
   1397a:	2b01      	cmp	r3, #1
   1397c:	d004      	beq.n	13988 <vControlHandlerTask+0xd0>
							LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   1397e:	4b1b      	ldr	r3, [pc, #108]	; (139ec <vControlHandlerTask+0x134>)
   13980:	0019      	movs	r1, r3
   13982:	2001      	movs	r0, #1
   13984:	4b12      	ldr	r3, [pc, #72]	; (139d0 <vControlHandlerTask+0x118>)
   13986:	4798      	blx	r3
						controlState = CONTROL_WAIT_FOR_GAME;
   13988:	4b0e      	ldr	r3, [pc, #56]	; (139c4 <vControlHandlerTask+0x10c>)
   1398a:	2200      	movs	r2, #0
   1398c:	701a      	strb	r2, [r3, #0]
                break;
   1398e:	e007      	b.n	139a0 <vControlHandlerTask+0xe8>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   13990:	4b0c      	ldr	r3, [pc, #48]	; (139c4 <vControlHandlerTask+0x10c>)
   13992:	2200      	movs	r2, #0
   13994:	701a      	strb	r2, [r3, #0]
                break;
   13996:	e004      	b.n	139a2 <vControlHandlerTask+0xea>
                break;
   13998:	46c0      	nop			; (mov r8, r8)
   1399a:	e002      	b.n	139a2 <vControlHandlerTask+0xea>
                break;
   1399c:	46c0      	nop			; (mov r8, r8)
   1399e:	e000      	b.n	139a2 <vControlHandlerTask+0xea>
                break;
   139a0:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   139a2:	2028      	movs	r0, #40	; 0x28
   139a4:	4b12      	ldr	r3, [pc, #72]	; (139f0 <vControlHandlerTask+0x138>)
   139a6:	4798      	blx	r3
        switch (controlState) {
   139a8:	e7ad      	b.n	13906 <vControlHandlerTask+0x4e>
   139aa:	46c0      	nop			; (mov r8, r8)
   139ac:	00036274 	.word	0x00036274
   139b0:	0001de15 	.word	0x0001de15
   139b4:	0001a4b5 	.word	0x0001a4b5
   139b8:	20000480 	.word	0x20000480
   139bc:	20000484 	.word	0x20000484
   139c0:	00036294 	.word	0x00036294
   139c4:	20004614 	.word	0x20004614
   139c8:	0001b015 	.word	0x0001b015
   139cc:	000362c0 	.word	0x000362c0
   139d0:	0001df01 	.word	0x0001df01
   139d4:	00015b21 	.word	0x00015b21
   139d8:	00015b5d 	.word	0x00015b5d
   139dc:	00015b81 	.word	0x00015b81
   139e0:	000362e8 	.word	0x000362e8
   139e4:	00015b71 	.word	0x00015b71
   139e8:	000174ad 	.word	0x000174ad
   139ec:	00036324 	.word	0x00036324
   139f0:	0001c1c1 	.word	0x0001c1c1

000139f4 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   139f4:	b590      	push	{r4, r7, lr}
   139f6:	b085      	sub	sp, #20
   139f8:	af00      	add	r7, sp, #0
   139fa:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   139fc:	4b06      	ldr	r3, [pc, #24]	; (13a18 <ControlAddGameData+0x24>)
   139fe:	6818      	ldr	r0, [r3, #0]
   13a00:	6879      	ldr	r1, [r7, #4]
   13a02:	2300      	movs	r3, #0
   13a04:	220a      	movs	r2, #10
   13a06:	4c05      	ldr	r4, [pc, #20]	; (13a1c <ControlAddGameData+0x28>)
   13a08:	47a0      	blx	r4
   13a0a:	0003      	movs	r3, r0
   13a0c:	60fb      	str	r3, [r7, #12]
    return error;
   13a0e:	68fb      	ldr	r3, [r7, #12]
}
   13a10:	0018      	movs	r0, r3
   13a12:	46bd      	mov	sp, r7
   13a14:	b005      	add	sp, #20
   13a16:	bd90      	pop	{r4, r7, pc}
   13a18:	20000480 	.word	0x20000480
   13a1c:	0001a75d 	.word	0x0001a75d

00013a20 <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(uint16_t *distance, const TickType_t xMaxBlockTime)
{
   13a20:	b580      	push	{r7, lr}
   13a22:	b084      	sub	sp, #16
   13a24:	af00      	add	r7, sp, #0
   13a26:	6078      	str	r0, [r7, #4]
   13a28:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   13a2a:	2300      	movs	r3, #0
   13a2c:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   13a2e:	2396      	movs	r3, #150	; 0x96
   13a30:	005b      	lsls	r3, r3, #1
   13a32:	0018      	movs	r0, r3
   13a34:	4b25      	ldr	r3, [pc, #148]	; (13acc <DistanceSensorGetDistance+0xac>)
   13a36:	4798      	blx	r3
   13a38:	0003      	movs	r3, r0
   13a3a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   13a3c:	68fb      	ldr	r3, [r7, #12]
   13a3e:	2b00      	cmp	r3, #0
   13a40:	d139      	bne.n	13ab6 <DistanceSensorGetDistance+0x96>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   13a42:	4b23      	ldr	r3, [pc, #140]	; (13ad0 <DistanceSensorGetDistance+0xb0>)
   13a44:	2255      	movs	r2, #85	; 0x55
   13a46:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   13a48:	4921      	ldr	r1, [pc, #132]	; (13ad0 <DistanceSensorGetDistance+0xb0>)
   13a4a:	4b22      	ldr	r3, [pc, #136]	; (13ad4 <DistanceSensorGetDistance+0xb4>)
   13a4c:	2201      	movs	r2, #1
   13a4e:	0018      	movs	r0, r3
   13a50:	4b21      	ldr	r3, [pc, #132]	; (13ad8 <DistanceSensorGetDistance+0xb8>)
   13a52:	4798      	blx	r3
   13a54:	1e03      	subs	r3, r0, #0
   13a56:	d130      	bne.n	13aba <DistanceSensorGetDistance+0x9a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   13a58:	4b20      	ldr	r3, [pc, #128]	; (13adc <DistanceSensorGetDistance+0xbc>)
   13a5a:	681b      	ldr	r3, [r3, #0]
   13a5c:	683a      	ldr	r2, [r7, #0]
   13a5e:	0011      	movs	r1, r2
   13a60:	0018      	movs	r0, r3
   13a62:	4b1f      	ldr	r3, [pc, #124]	; (13ae0 <DistanceSensorGetDistance+0xc0>)
   13a64:	4798      	blx	r3
   13a66:	0003      	movs	r3, r0
   13a68:	2b01      	cmp	r3, #1
   13a6a:	d003      	beq.n	13a74 <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   13a6c:	2303      	movs	r3, #3
   13a6e:	425b      	negs	r3, r3
   13a70:	60fb      	str	r3, [r7, #12]
        goto exitf;
   13a72:	e023      	b.n	13abc <DistanceSensorGetDistance+0x9c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
   13a74:	491b      	ldr	r1, [pc, #108]	; (13ae4 <DistanceSensorGetDistance+0xc4>)
   13a76:	4b17      	ldr	r3, [pc, #92]	; (13ad4 <DistanceSensorGetDistance+0xb4>)
   13a78:	2202      	movs	r2, #2
   13a7a:	0018      	movs	r0, r3
   13a7c:	4b1a      	ldr	r3, [pc, #104]	; (13ae8 <DistanceSensorGetDistance+0xc8>)
   13a7e:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   13a80:	4b16      	ldr	r3, [pc, #88]	; (13adc <DistanceSensorGetDistance+0xbc>)
   13a82:	681b      	ldr	r3, [r3, #0]
   13a84:	683a      	ldr	r2, [r7, #0]
   13a86:	0011      	movs	r1, r2
   13a88:	0018      	movs	r0, r3
   13a8a:	4b15      	ldr	r3, [pc, #84]	; (13ae0 <DistanceSensorGetDistance+0xc0>)
   13a8c:	4798      	blx	r3
   13a8e:	0003      	movs	r3, r0
   13a90:	2b01      	cmp	r3, #1
   13a92:	d10c      	bne.n	13aae <DistanceSensorGetDistance+0x8e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   13a94:	4b13      	ldr	r3, [pc, #76]	; (13ae4 <DistanceSensorGetDistance+0xc4>)
   13a96:	781b      	ldrb	r3, [r3, #0]
   13a98:	b29b      	uxth	r3, r3
   13a9a:	021b      	lsls	r3, r3, #8
   13a9c:	b29a      	uxth	r2, r3
   13a9e:	4b11      	ldr	r3, [pc, #68]	; (13ae4 <DistanceSensorGetDistance+0xc4>)
   13aa0:	785b      	ldrb	r3, [r3, #1]
   13aa2:	b29b      	uxth	r3, r3
   13aa4:	18d3      	adds	r3, r2, r3
   13aa6:	b29a      	uxth	r2, r3
   13aa8:	687b      	ldr	r3, [r7, #4]
   13aaa:	801a      	strh	r2, [r3, #0]
   13aac:	e006      	b.n	13abc <DistanceSensorGetDistance+0x9c>
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   13aae:	2303      	movs	r3, #3
   13ab0:	425b      	negs	r3, r3
   13ab2:	60fb      	str	r3, [r7, #12]
        goto exitf;
   13ab4:	e002      	b.n	13abc <DistanceSensorGetDistance+0x9c>
    if (ERROR_NONE != error) goto exitf;
   13ab6:	46c0      	nop			; (mov r8, r8)
   13ab8:	e000      	b.n	13abc <DistanceSensorGetDistance+0x9c>
        goto exitf;
   13aba:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   13abc:	4b0b      	ldr	r3, [pc, #44]	; (13aec <DistanceSensorGetDistance+0xcc>)
   13abe:	4798      	blx	r3

    return error;
   13ac0:	68fb      	ldr	r3, [r7, #12]
}
   13ac2:	0018      	movs	r0, r3
   13ac4:	46bd      	mov	sp, r7
   13ac6:	b004      	add	sp, #16
   13ac8:	bd80      	pop	{r7, pc}
   13aca:	46c0      	nop			; (mov r8, r8)
   13acc:	00013b29 	.word	0x00013b29
   13ad0:	2000461a 	.word	0x2000461a
   13ad4:	20004624 	.word	0x20004624
   13ad8:	00028f89 	.word	0x00028f89
   13adc:	2000461c 	.word	0x2000461c
   13ae0:	0001b46d 	.word	0x0001b46d
   13ae4:	20004618 	.word	0x20004618
   13ae8:	00028fd1 	.word	0x00028fd1
   13aec:	00013af1 	.word	0x00013af1

00013af0 <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   13af0:	b590      	push	{r4, r7, lr}
   13af2:	b083      	sub	sp, #12
   13af4:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   13af6:	2300      	movs	r3, #0
   13af8:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   13afa:	4b09      	ldr	r3, [pc, #36]	; (13b20 <DistanceSensorFreeMutex+0x30>)
   13afc:	6818      	ldr	r0, [r3, #0]
   13afe:	2300      	movs	r3, #0
   13b00:	2200      	movs	r2, #0
   13b02:	2100      	movs	r1, #0
   13b04:	4c07      	ldr	r4, [pc, #28]	; (13b24 <DistanceSensorFreeMutex+0x34>)
   13b06:	47a0      	blx	r4
   13b08:	0003      	movs	r3, r0
   13b0a:	2b01      	cmp	r3, #1
   13b0c:	d002      	beq.n	13b14 <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   13b0e:	2314      	movs	r3, #20
   13b10:	425b      	negs	r3, r3
   13b12:	607b      	str	r3, [r7, #4]
    }
    return error;
   13b14:	687b      	ldr	r3, [r7, #4]
}
   13b16:	0018      	movs	r0, r3
   13b18:	46bd      	mov	sp, r7
   13b1a:	b003      	add	sp, #12
   13b1c:	bd90      	pop	{r4, r7, pc}
   13b1e:	46c0      	nop			; (mov r8, r8)
   13b20:	20004620 	.word	0x20004620
   13b24:	0001a75d 	.word	0x0001a75d

00013b28 <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   13b28:	b580      	push	{r7, lr}
   13b2a:	b084      	sub	sp, #16
   13b2c:	af00      	add	r7, sp, #0
   13b2e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13b30:	2300      	movs	r3, #0
   13b32:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   13b34:	4b08      	ldr	r3, [pc, #32]	; (13b58 <DistanceSensorGetMutex+0x30>)
   13b36:	681b      	ldr	r3, [r3, #0]
   13b38:	687a      	ldr	r2, [r7, #4]
   13b3a:	0011      	movs	r1, r2
   13b3c:	0018      	movs	r0, r3
   13b3e:	4b07      	ldr	r3, [pc, #28]	; (13b5c <DistanceSensorGetMutex+0x34>)
   13b40:	4798      	blx	r3
   13b42:	0003      	movs	r3, r0
   13b44:	2b01      	cmp	r3, #1
   13b46:	d002      	beq.n	13b4e <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   13b48:	231d      	movs	r3, #29
   13b4a:	425b      	negs	r3, r3
   13b4c:	60fb      	str	r3, [r7, #12]
    }
    return error;
   13b4e:	68fb      	ldr	r3, [r7, #12]
   13b50:	0018      	movs	r0, r3
   13b52:	46bd      	mov	sp, r7
   13b54:	b004      	add	sp, #16
   13b56:	bd80      	pop	{r7, pc}
   13b58:	20004620 	.word	0x20004620
   13b5c:	0001b46d 	.word	0x0001b46d

00013b60 <system_interrupt_enable>:
{
   13b60:	b580      	push	{r7, lr}
   13b62:	b082      	sub	sp, #8
   13b64:	af00      	add	r7, sp, #0
   13b66:	0002      	movs	r2, r0
   13b68:	1dfb      	adds	r3, r7, #7
   13b6a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13b6c:	4b06      	ldr	r3, [pc, #24]	; (13b88 <system_interrupt_enable+0x28>)
   13b6e:	1dfa      	adds	r2, r7, #7
   13b70:	7812      	ldrb	r2, [r2, #0]
   13b72:	0011      	movs	r1, r2
   13b74:	221f      	movs	r2, #31
   13b76:	400a      	ands	r2, r1
   13b78:	2101      	movs	r1, #1
   13b7a:	4091      	lsls	r1, r2
   13b7c:	000a      	movs	r2, r1
   13b7e:	601a      	str	r2, [r3, #0]
}
   13b80:	46c0      	nop			; (mov r8, r8)
   13b82:	46bd      	mov	sp, r7
   13b84:	b002      	add	sp, #8
   13b86:	bd80      	pop	{r7, pc}
   13b88:	e000e100 	.word	0xe000e100

00013b8c <i2c_master_is_syncing>:
{
   13b8c:	b580      	push	{r7, lr}
   13b8e:	b084      	sub	sp, #16
   13b90:	af00      	add	r7, sp, #0
   13b92:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13b94:	687b      	ldr	r3, [r7, #4]
   13b96:	681b      	ldr	r3, [r3, #0]
   13b98:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13b9a:	68fb      	ldr	r3, [r7, #12]
   13b9c:	69db      	ldr	r3, [r3, #28]
   13b9e:	2207      	movs	r2, #7
   13ba0:	4013      	ands	r3, r2
   13ba2:	1e5a      	subs	r2, r3, #1
   13ba4:	4193      	sbcs	r3, r2
   13ba6:	b2db      	uxtb	r3, r3
}
   13ba8:	0018      	movs	r0, r3
   13baa:	46bd      	mov	sp, r7
   13bac:	b004      	add	sp, #16
   13bae:	bd80      	pop	{r7, pc}

00013bb0 <_i2c_master_wait_for_sync>:
{
   13bb0:	b580      	push	{r7, lr}
   13bb2:	b082      	sub	sp, #8
   13bb4:	af00      	add	r7, sp, #0
   13bb6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   13bb8:	46c0      	nop			; (mov r8, r8)
   13bba:	687b      	ldr	r3, [r7, #4]
   13bbc:	0018      	movs	r0, r3
   13bbe:	4b04      	ldr	r3, [pc, #16]	; (13bd0 <_i2c_master_wait_for_sync+0x20>)
   13bc0:	4798      	blx	r3
   13bc2:	1e03      	subs	r3, r0, #0
   13bc4:	d1f9      	bne.n	13bba <_i2c_master_wait_for_sync+0xa>
}
   13bc6:	46c0      	nop			; (mov r8, r8)
   13bc8:	46bd      	mov	sp, r7
   13bca:	b002      	add	sp, #8
   13bcc:	bd80      	pop	{r7, pc}
   13bce:	46c0      	nop			; (mov r8, r8)
   13bd0:	00013b8d 	.word	0x00013b8d

00013bd4 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   13bd4:	b580      	push	{r7, lr}
   13bd6:	b082      	sub	sp, #8
   13bd8:	af00      	add	r7, sp, #0
   13bda:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   13bdc:	687b      	ldr	r3, [r7, #4]
   13bde:	2264      	movs	r2, #100	; 0x64
   13be0:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   13be2:	687b      	ldr	r3, [r7, #4]
   13be4:	4a1b      	ldr	r2, [pc, #108]	; (13c54 <i2c_master_get_config_defaults+0x80>)
   13be6:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13be8:	687b      	ldr	r3, [r7, #4]
   13bea:	2200      	movs	r2, #0
   13bec:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   13bee:	687b      	ldr	r3, [r7, #4]
   13bf0:	2200      	movs	r2, #0
   13bf2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   13bf4:	687b      	ldr	r3, [r7, #4]
   13bf6:	2200      	movs	r2, #0
   13bf8:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   13bfa:	687b      	ldr	r3, [r7, #4]
   13bfc:	2280      	movs	r2, #128	; 0x80
   13bfe:	0392      	lsls	r2, r2, #14
   13c00:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   13c02:	687b      	ldr	r3, [r7, #4]
   13c04:	2201      	movs	r2, #1
   13c06:	4252      	negs	r2, r2
   13c08:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   13c0a:	687b      	ldr	r3, [r7, #4]
   13c0c:	2201      	movs	r2, #1
   13c0e:	4252      	negs	r2, r2
   13c10:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   13c12:	687b      	ldr	r3, [r7, #4]
   13c14:	2200      	movs	r2, #0
   13c16:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   13c18:	687b      	ldr	r3, [r7, #4]
   13c1a:	2200      	movs	r2, #0
   13c1c:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   13c1e:	687b      	ldr	r3, [r7, #4]
   13c20:	2224      	movs	r2, #36	; 0x24
   13c22:	2100      	movs	r1, #0
   13c24:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13c26:	687b      	ldr	r3, [r7, #4]
   13c28:	2200      	movs	r2, #0
   13c2a:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   13c2c:	687b      	ldr	r3, [r7, #4]
   13c2e:	222c      	movs	r2, #44	; 0x2c
   13c30:	2100      	movs	r1, #0
   13c32:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13c34:	687b      	ldr	r3, [r7, #4]
   13c36:	222d      	movs	r2, #45	; 0x2d
   13c38:	2100      	movs	r1, #0
   13c3a:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   13c3c:	687b      	ldr	r3, [r7, #4]
   13c3e:	222e      	movs	r2, #46	; 0x2e
   13c40:	2100      	movs	r1, #0
   13c42:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13c44:	687b      	ldr	r3, [r7, #4]
   13c46:	22d7      	movs	r2, #215	; 0xd7
   13c48:	861a      	strh	r2, [r3, #48]	; 0x30
}
   13c4a:	46c0      	nop			; (mov r8, r8)
   13c4c:	46bd      	mov	sp, r7
   13c4e:	b002      	add	sp, #8
   13c50:	bd80      	pop	{r7, pc}
   13c52:	46c0      	nop			; (mov r8, r8)
   13c54:	00000d48 	.word	0x00000d48

00013c58 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13c58:	b580      	push	{r7, lr}
   13c5a:	b084      	sub	sp, #16
   13c5c:	af00      	add	r7, sp, #0
   13c5e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13c60:	687b      	ldr	r3, [r7, #4]
   13c62:	681b      	ldr	r3, [r3, #0]
   13c64:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   13c66:	2300      	movs	r3, #0
   13c68:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   13c6a:	687b      	ldr	r3, [r7, #4]
   13c6c:	0018      	movs	r0, r3
   13c6e:	4b14      	ldr	r3, [pc, #80]	; (13cc0 <i2c_master_enable+0x68>)
   13c70:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   13c72:	68bb      	ldr	r3, [r7, #8]
   13c74:	681b      	ldr	r3, [r3, #0]
   13c76:	2202      	movs	r2, #2
   13c78:	431a      	orrs	r2, r3
   13c7a:	68bb      	ldr	r3, [r7, #8]
   13c7c:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   13c7e:	687b      	ldr	r3, [r7, #4]
   13c80:	681b      	ldr	r3, [r3, #0]
   13c82:	0018      	movs	r0, r3
   13c84:	4b0f      	ldr	r3, [pc, #60]	; (13cc4 <i2c_master_enable+0x6c>)
   13c86:	4798      	blx	r3
   13c88:	0003      	movs	r3, r0
   13c8a:	0018      	movs	r0, r3
   13c8c:	4b0e      	ldr	r3, [pc, #56]	; (13cc8 <i2c_master_enable+0x70>)
   13c8e:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13c90:	e00c      	b.n	13cac <i2c_master_enable+0x54>
		timeout_counter++;
   13c92:	68fb      	ldr	r3, [r7, #12]
   13c94:	3301      	adds	r3, #1
   13c96:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   13c98:	687b      	ldr	r3, [r7, #4]
   13c9a:	88db      	ldrh	r3, [r3, #6]
   13c9c:	001a      	movs	r2, r3
   13c9e:	68fb      	ldr	r3, [r7, #12]
   13ca0:	429a      	cmp	r2, r3
   13ca2:	d803      	bhi.n	13cac <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   13ca4:	68bb      	ldr	r3, [r7, #8]
   13ca6:	2210      	movs	r2, #16
   13ca8:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   13caa:	e006      	b.n	13cba <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13cac:	68bb      	ldr	r3, [r7, #8]
   13cae:	8b5b      	ldrh	r3, [r3, #26]
   13cb0:	b29b      	uxth	r3, r3
   13cb2:	001a      	movs	r2, r3
   13cb4:	2310      	movs	r3, #16
   13cb6:	4013      	ands	r3, r2
   13cb8:	d0eb      	beq.n	13c92 <i2c_master_enable+0x3a>
		}
	}
}
   13cba:	46bd      	mov	sp, r7
   13cbc:	b004      	add	sp, #16
   13cbe:	bd80      	pop	{r7, pc}
   13cc0:	00013bb1 	.word	0x00013bb1
   13cc4:	00027729 	.word	0x00027729
   13cc8:	00013b61 	.word	0x00013b61

00013ccc <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   13ccc:	b580      	push	{r7, lr}
   13cce:	b082      	sub	sp, #8
   13cd0:	af00      	add	r7, sp, #0
   13cd2:	6078      	str	r0, [r7, #4]
   13cd4:	000a      	movs	r2, r1
   13cd6:	1cfb      	adds	r3, r7, #3
   13cd8:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   13cda:	687b      	ldr	r3, [r7, #4]
   13cdc:	7e5b      	ldrb	r3, [r3, #25]
   13cde:	b2db      	uxtb	r3, r3
   13ce0:	b25a      	sxtb	r2, r3
   13ce2:	1cfb      	adds	r3, r7, #3
   13ce4:	781b      	ldrb	r3, [r3, #0]
   13ce6:	2101      	movs	r1, #1
   13ce8:	4099      	lsls	r1, r3
   13cea:	000b      	movs	r3, r1
   13cec:	b25b      	sxtb	r3, r3
   13cee:	4313      	orrs	r3, r2
   13cf0:	b25b      	sxtb	r3, r3
   13cf2:	b2da      	uxtb	r2, r3
   13cf4:	687b      	ldr	r3, [r7, #4]
   13cf6:	765a      	strb	r2, [r3, #25]
}
   13cf8:	46c0      	nop			; (mov r8, r8)
   13cfa:	46bd      	mov	sp, r7
   13cfc:	b002      	add	sp, #8
   13cfe:	bd80      	pop	{r7, pc}

00013d00 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   13d00:	b590      	push	{r4, r7, lr}
   13d02:	b091      	sub	sp, #68	; 0x44
   13d04:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13d06:	2300      	movs	r3, #0
   13d08:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   13d0a:	233a      	movs	r3, #58	; 0x3a
   13d0c:	18fb      	adds	r3, r7, r3
   13d0e:	2200      	movs	r2, #0
   13d10:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   13d12:	1d3b      	adds	r3, r7, #4
   13d14:	0018      	movs	r0, r3
   13d16:	4b21      	ldr	r3, [pc, #132]	; (13d9c <I2cDriverConfigureSensorBus+0x9c>)
   13d18:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   13d1a:	1d3b      	adds	r3, r7, #4
   13d1c:	4a20      	ldr	r2, [pc, #128]	; (13da0 <I2cDriverConfigureSensorBus+0xa0>)
   13d1e:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   13d20:	1d3b      	adds	r3, r7, #4
   13d22:	4a20      	ldr	r2, [pc, #128]	; (13da4 <I2cDriverConfigureSensorBus+0xa4>)
   13d24:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   13d26:	1d3b      	adds	r3, r7, #4
   13d28:	22fa      	movs	r2, #250	; 0xfa
   13d2a:	0092      	lsls	r2, r2, #2
   13d2c:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13d2e:	233b      	movs	r3, #59	; 0x3b
   13d30:	18fb      	adds	r3, r7, r3
   13d32:	2203      	movs	r2, #3
   13d34:	701a      	strb	r2, [r3, #0]
   13d36:	e01e      	b.n	13d76 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   13d38:	233a      	movs	r3, #58	; 0x3a
   13d3a:	18fc      	adds	r4, r7, r3
   13d3c:	1d3a      	adds	r2, r7, #4
   13d3e:	491a      	ldr	r1, [pc, #104]	; (13da8 <I2cDriverConfigureSensorBus+0xa8>)
   13d40:	4b1a      	ldr	r3, [pc, #104]	; (13dac <I2cDriverConfigureSensorBus+0xac>)
   13d42:	0018      	movs	r0, r3
   13d44:	4b1a      	ldr	r3, [pc, #104]	; (13db0 <I2cDriverConfigureSensorBus+0xb0>)
   13d46:	4798      	blx	r3
   13d48:	0003      	movs	r3, r0
   13d4a:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   13d4c:	233a      	movs	r3, #58	; 0x3a
   13d4e:	18fb      	adds	r3, r7, r3
   13d50:	781b      	ldrb	r3, [r3, #0]
   13d52:	2b00      	cmp	r3, #0
   13d54:	d104      	bne.n	13d60 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   13d56:	233a      	movs	r3, #58	; 0x3a
   13d58:	18fb      	adds	r3, r7, r3
   13d5a:	781b      	ldrb	r3, [r3, #0]
   13d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   13d5e:	e00f      	b.n	13d80 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   13d60:	4b12      	ldr	r3, [pc, #72]	; (13dac <I2cDriverConfigureSensorBus+0xac>)
   13d62:	0018      	movs	r0, r3
   13d64:	4b13      	ldr	r3, [pc, #76]	; (13db4 <I2cDriverConfigureSensorBus+0xb4>)
   13d66:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13d68:	233b      	movs	r3, #59	; 0x3b
   13d6a:	18fb      	adds	r3, r7, r3
   13d6c:	781a      	ldrb	r2, [r3, #0]
   13d6e:	233b      	movs	r3, #59	; 0x3b
   13d70:	18fb      	adds	r3, r7, r3
   13d72:	3a01      	subs	r2, #1
   13d74:	701a      	strb	r2, [r3, #0]
   13d76:	233b      	movs	r3, #59	; 0x3b
   13d78:	18fb      	adds	r3, r7, r3
   13d7a:	781b      	ldrb	r3, [r3, #0]
   13d7c:	2b00      	cmp	r3, #0
   13d7e:	d1db      	bne.n	13d38 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   13d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d82:	2b00      	cmp	r3, #0
   13d84:	d104      	bne.n	13d90 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   13d86:	4b09      	ldr	r3, [pc, #36]	; (13dac <I2cDriverConfigureSensorBus+0xac>)
   13d88:	0018      	movs	r0, r3
   13d8a:	4b0b      	ldr	r3, [pc, #44]	; (13db8 <I2cDriverConfigureSensorBus+0xb8>)
   13d8c:	4798      	blx	r3
   13d8e:	e000      	b.n	13d92 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   13d90:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   13d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   13d94:	0018      	movs	r0, r3
   13d96:	46bd      	mov	sp, r7
   13d98:	b011      	add	sp, #68	; 0x44
   13d9a:	bd90      	pop	{r4, r7, pc}
   13d9c:	00013bd5 	.word	0x00013bd5
   13da0:	00080002 	.word	0x00080002
   13da4:	00090002 	.word	0x00090002
   13da8:	42000800 	.word	0x42000800
   13dac:	2000465c 	.word	0x2000465c
   13db0:	00017a9d 	.word	0x00017a9d
   13db4:	00017bd1 	.word	0x00017bd1
   13db8:	00013c59 	.word	0x00013c59

00013dbc <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   13dbc:	b580      	push	{r7, lr}
   13dbe:	b084      	sub	sp, #16
   13dc0:	af00      	add	r7, sp, #0
   13dc2:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13dc4:	4b0e      	ldr	r3, [pc, #56]	; (13e00 <I2cSensorsTxComplete+0x44>)
   13dc6:	2200      	movs	r2, #0
   13dc8:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13dca:	4b0d      	ldr	r3, [pc, #52]	; (13e00 <I2cSensorsTxComplete+0x44>)
   13dcc:	2201      	movs	r2, #1
   13dce:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13dd0:	2300      	movs	r3, #0
   13dd2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13dd4:	4b0b      	ldr	r3, [pc, #44]	; (13e04 <I2cSensorsTxComplete+0x48>)
   13dd6:	681b      	ldr	r3, [r3, #0]
   13dd8:	220c      	movs	r2, #12
   13dda:	18ba      	adds	r2, r7, r2
   13ddc:	0011      	movs	r1, r2
   13dde:	0018      	movs	r0, r3
   13de0:	4b09      	ldr	r3, [pc, #36]	; (13e08 <I2cSensorsTxComplete+0x4c>)
   13de2:	4798      	blx	r3
    sensorTransmitError = false;
   13de4:	4b09      	ldr	r3, [pc, #36]	; (13e0c <I2cSensorsTxComplete+0x50>)
   13de6:	2200      	movs	r2, #0
   13de8:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13dea:	68fb      	ldr	r3, [r7, #12]
   13dec:	2b00      	cmp	r3, #0
   13dee:	d003      	beq.n	13df8 <I2cSensorsTxComplete+0x3c>
   13df0:	4b07      	ldr	r3, [pc, #28]	; (13e10 <I2cSensorsTxComplete+0x54>)
   13df2:	2280      	movs	r2, #128	; 0x80
   13df4:	0552      	lsls	r2, r2, #21
   13df6:	601a      	str	r2, [r3, #0]
}
   13df8:	46c0      	nop			; (mov r8, r8)
   13dfa:	46bd      	mov	sp, r7
   13dfc:	b004      	add	sp, #16
   13dfe:	bd80      	pop	{r7, pc}
   13e00:	2000048c 	.word	0x2000048c
   13e04:	20004684 	.word	0x20004684
   13e08:	0001ade5 	.word	0x0001ade5
   13e0c:	20000488 	.word	0x20000488
   13e10:	e000ed04 	.word	0xe000ed04

00013e14 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   13e14:	b580      	push	{r7, lr}
   13e16:	b084      	sub	sp, #16
   13e18:	af00      	add	r7, sp, #0
   13e1a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13e1c:	4b0e      	ldr	r3, [pc, #56]	; (13e58 <I2cSensorsRxComplete+0x44>)
   13e1e:	2200      	movs	r2, #0
   13e20:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13e22:	4b0d      	ldr	r3, [pc, #52]	; (13e58 <I2cSensorsRxComplete+0x44>)
   13e24:	2201      	movs	r2, #1
   13e26:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13e28:	2300      	movs	r3, #0
   13e2a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13e2c:	4b0b      	ldr	r3, [pc, #44]	; (13e5c <I2cSensorsRxComplete+0x48>)
   13e2e:	681b      	ldr	r3, [r3, #0]
   13e30:	220c      	movs	r2, #12
   13e32:	18ba      	adds	r2, r7, r2
   13e34:	0011      	movs	r1, r2
   13e36:	0018      	movs	r0, r3
   13e38:	4b09      	ldr	r3, [pc, #36]	; (13e60 <I2cSensorsRxComplete+0x4c>)
   13e3a:	4798      	blx	r3
    sensorTransmitError = false;
   13e3c:	4b09      	ldr	r3, [pc, #36]	; (13e64 <I2cSensorsRxComplete+0x50>)
   13e3e:	2200      	movs	r2, #0
   13e40:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13e42:	68fb      	ldr	r3, [r7, #12]
   13e44:	2b00      	cmp	r3, #0
   13e46:	d003      	beq.n	13e50 <I2cSensorsRxComplete+0x3c>
   13e48:	4b07      	ldr	r3, [pc, #28]	; (13e68 <I2cSensorsRxComplete+0x54>)
   13e4a:	2280      	movs	r2, #128	; 0x80
   13e4c:	0552      	lsls	r2, r2, #21
   13e4e:	601a      	str	r2, [r3, #0]
}
   13e50:	46c0      	nop			; (mov r8, r8)
   13e52:	46bd      	mov	sp, r7
   13e54:	b004      	add	sp, #16
   13e56:	bd80      	pop	{r7, pc}
   13e58:	2000048c 	.word	0x2000048c
   13e5c:	20004684 	.word	0x20004684
   13e60:	0001ade5 	.word	0x0001ade5
   13e64:	20000488 	.word	0x20000488
   13e68:	e000ed04 	.word	0xe000ed04

00013e6c <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   13e6c:	b580      	push	{r7, lr}
   13e6e:	b084      	sub	sp, #16
   13e70:	af00      	add	r7, sp, #0
   13e72:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13e74:	4b0e      	ldr	r3, [pc, #56]	; (13eb0 <I2cSensorsError+0x44>)
   13e76:	2200      	movs	r2, #0
   13e78:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   13e7a:	4b0d      	ldr	r3, [pc, #52]	; (13eb0 <I2cSensorsError+0x44>)
   13e7c:	2201      	movs	r2, #1
   13e7e:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13e80:	2300      	movs	r3, #0
   13e82:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13e84:	4b0b      	ldr	r3, [pc, #44]	; (13eb4 <I2cSensorsError+0x48>)
   13e86:	681b      	ldr	r3, [r3, #0]
   13e88:	220c      	movs	r2, #12
   13e8a:	18ba      	adds	r2, r7, r2
   13e8c:	0011      	movs	r1, r2
   13e8e:	0018      	movs	r0, r3
   13e90:	4b09      	ldr	r3, [pc, #36]	; (13eb8 <I2cSensorsError+0x4c>)
   13e92:	4798      	blx	r3
    sensorTransmitError = true;
   13e94:	4b09      	ldr	r3, [pc, #36]	; (13ebc <I2cSensorsError+0x50>)
   13e96:	2201      	movs	r2, #1
   13e98:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13e9a:	68fb      	ldr	r3, [r7, #12]
   13e9c:	2b00      	cmp	r3, #0
   13e9e:	d003      	beq.n	13ea8 <I2cSensorsError+0x3c>
   13ea0:	4b07      	ldr	r3, [pc, #28]	; (13ec0 <I2cSensorsError+0x54>)
   13ea2:	2280      	movs	r2, #128	; 0x80
   13ea4:	0552      	lsls	r2, r2, #21
   13ea6:	601a      	str	r2, [r3, #0]
}
   13ea8:	46c0      	nop			; (mov r8, r8)
   13eaa:	46bd      	mov	sp, r7
   13eac:	b004      	add	sp, #16
   13eae:	bd80      	pop	{r7, pc}
   13eb0:	2000048c 	.word	0x2000048c
   13eb4:	20004684 	.word	0x20004684
   13eb8:	0001ade5 	.word	0x0001ade5
   13ebc:	20000488 	.word	0x20000488
   13ec0:	e000ed04 	.word	0xe000ed04

00013ec4 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   13ec4:	b580      	push	{r7, lr}
   13ec6:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13ec8:	4911      	ldr	r1, [pc, #68]	; (13f10 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   13eca:	4b12      	ldr	r3, [pc, #72]	; (13f14 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13ecc:	2200      	movs	r2, #0
   13ece:	0018      	movs	r0, r3
   13ed0:	4b11      	ldr	r3, [pc, #68]	; (13f18 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13ed2:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13ed4:	4b0f      	ldr	r3, [pc, #60]	; (13f14 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13ed6:	2100      	movs	r1, #0
   13ed8:	0018      	movs	r0, r3
   13eda:	4b10      	ldr	r3, [pc, #64]	; (13f1c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13edc:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13ede:	4910      	ldr	r1, [pc, #64]	; (13f20 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   13ee0:	4b0c      	ldr	r3, [pc, #48]	; (13f14 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13ee2:	2201      	movs	r2, #1
   13ee4:	0018      	movs	r0, r3
   13ee6:	4b0c      	ldr	r3, [pc, #48]	; (13f18 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13ee8:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13eea:	4b0a      	ldr	r3, [pc, #40]	; (13f14 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13eec:	2101      	movs	r1, #1
   13eee:	0018      	movs	r0, r3
   13ef0:	4b0a      	ldr	r3, [pc, #40]	; (13f1c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13ef2:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   13ef4:	490b      	ldr	r1, [pc, #44]	; (13f24 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   13ef6:	4b07      	ldr	r3, [pc, #28]	; (13f14 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13ef8:	2202      	movs	r2, #2
   13efa:	0018      	movs	r0, r3
   13efc:	4b06      	ldr	r3, [pc, #24]	; (13f18 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13efe:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   13f00:	4b04      	ldr	r3, [pc, #16]	; (13f14 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13f02:	2102      	movs	r1, #2
   13f04:	0018      	movs	r0, r3
   13f06:	4b05      	ldr	r3, [pc, #20]	; (13f1c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13f08:	4798      	blx	r3
}
   13f0a:	46c0      	nop			; (mov r8, r8)
   13f0c:	46bd      	mov	sp, r7
   13f0e:	bd80      	pop	{r7, pc}
   13f10:	00013dbd 	.word	0x00013dbd
   13f14:	2000465c 	.word	0x2000465c
   13f18:	00012909 	.word	0x00012909
   13f1c:	00013ccd 	.word	0x00013ccd
   13f20:	00013e15 	.word	0x00013e15
   13f24:	00013e6d 	.word	0x00013e6d

00013f28 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   13f28:	b580      	push	{r7, lr}
   13f2a:	b082      	sub	sp, #8
   13f2c:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13f2e:	2300      	movs	r3, #0
   13f30:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   13f32:	4b14      	ldr	r3, [pc, #80]	; (13f84 <I2cInitializeDriver+0x5c>)
   13f34:	4798      	blx	r3
   13f36:	0003      	movs	r3, r0
   13f38:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   13f3a:	687b      	ldr	r3, [r7, #4]
   13f3c:	2b00      	cmp	r3, #0
   13f3e:	d11a      	bne.n	13f76 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   13f40:	4b11      	ldr	r3, [pc, #68]	; (13f88 <I2cInitializeDriver+0x60>)
   13f42:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   13f44:	2001      	movs	r0, #1
   13f46:	4b11      	ldr	r3, [pc, #68]	; (13f8c <I2cInitializeDriver+0x64>)
   13f48:	4798      	blx	r3
   13f4a:	0002      	movs	r2, r0
   13f4c:	4b10      	ldr	r3, [pc, #64]	; (13f90 <I2cInitializeDriver+0x68>)
   13f4e:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   13f50:	2203      	movs	r2, #3
   13f52:	2100      	movs	r1, #0
   13f54:	2001      	movs	r0, #1
   13f56:	4b0f      	ldr	r3, [pc, #60]	; (13f94 <I2cInitializeDriver+0x6c>)
   13f58:	4798      	blx	r3
   13f5a:	0002      	movs	r2, r0
   13f5c:	4b0e      	ldr	r3, [pc, #56]	; (13f98 <I2cInitializeDriver+0x70>)
   13f5e:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   13f60:	4b0b      	ldr	r3, [pc, #44]	; (13f90 <I2cInitializeDriver+0x68>)
   13f62:	681b      	ldr	r3, [r3, #0]
   13f64:	2b00      	cmp	r3, #0
   13f66:	d003      	beq.n	13f70 <I2cInitializeDriver+0x48>
   13f68:	4b0b      	ldr	r3, [pc, #44]	; (13f98 <I2cInitializeDriver+0x70>)
   13f6a:	681b      	ldr	r3, [r3, #0]
   13f6c:	2b00      	cmp	r3, #0
   13f6e:	d103      	bne.n	13f78 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   13f70:	2306      	movs	r3, #6
   13f72:	607b      	str	r3, [r7, #4]
        goto exit;
   13f74:	e000      	b.n	13f78 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   13f76:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13f78:	687b      	ldr	r3, [r7, #4]
}
   13f7a:	0018      	movs	r0, r3
   13f7c:	46bd      	mov	sp, r7
   13f7e:	b002      	add	sp, #8
   13f80:	bd80      	pop	{r7, pc}
   13f82:	46c0      	nop			; (mov r8, r8)
   13f84:	00013d01 	.word	0x00013d01
   13f88:	00013ec5 	.word	0x00013ec5
   13f8c:	0001a71d 	.word	0x0001a71d
   13f90:	20004658 	.word	0x20004658
   13f94:	0001a4b5 	.word	0x0001a4b5
   13f98:	20004684 	.word	0x20004684

00013f9c <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   13f9c:	b590      	push	{r4, r7, lr}
   13f9e:	b085      	sub	sp, #20
   13fa0:	af00      	add	r7, sp, #0
   13fa2:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13fa4:	2300      	movs	r3, #0
   13fa6:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   13fa8:	687b      	ldr	r3, [r7, #4]
   13faa:	2b00      	cmp	r3, #0
   13fac:	d003      	beq.n	13fb6 <I2cWriteData+0x1a>
   13fae:	687b      	ldr	r3, [r7, #4]
   13fb0:	685b      	ldr	r3, [r3, #4]
   13fb2:	2b00      	cmp	r3, #0
   13fb4:	d103      	bne.n	13fbe <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   13fb6:	2308      	movs	r3, #8
   13fb8:	425b      	negs	r3, r3
   13fba:	60fb      	str	r3, [r7, #12]
        goto exit;
   13fbc:	e01f      	b.n	13ffe <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   13fbe:	687b      	ldr	r3, [r7, #4]
   13fc0:	781b      	ldrb	r3, [r3, #0]
   13fc2:	b29a      	uxth	r2, r3
   13fc4:	4b10      	ldr	r3, [pc, #64]	; (14008 <I2cWriteData+0x6c>)
   13fc6:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   13fc8:	687b      	ldr	r3, [r7, #4]
   13fca:	685a      	ldr	r2, [r3, #4]
   13fcc:	4b0e      	ldr	r3, [pc, #56]	; (14008 <I2cWriteData+0x6c>)
   13fce:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   13fd0:	687b      	ldr	r3, [r7, #4]
   13fd2:	89da      	ldrh	r2, [r3, #14]
   13fd4:	4b0c      	ldr	r3, [pc, #48]	; (14008 <I2cWriteData+0x6c>)
   13fd6:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13fd8:	230b      	movs	r3, #11
   13fda:	18fc      	adds	r4, r7, r3
   13fdc:	4a0a      	ldr	r2, [pc, #40]	; (14008 <I2cWriteData+0x6c>)
   13fde:	4b0b      	ldr	r3, [pc, #44]	; (1400c <I2cWriteData+0x70>)
   13fe0:	0011      	movs	r1, r2
   13fe2:	0018      	movs	r0, r3
   13fe4:	4b0a      	ldr	r3, [pc, #40]	; (14010 <I2cWriteData+0x74>)
   13fe6:	4798      	blx	r3
   13fe8:	0003      	movs	r3, r0
   13fea:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13fec:	230b      	movs	r3, #11
   13fee:	18fb      	adds	r3, r7, r3
   13ff0:	781b      	ldrb	r3, [r3, #0]
   13ff2:	2b00      	cmp	r3, #0
   13ff4:	d003      	beq.n	13ffe <I2cWriteData+0x62>
        error = ERROR_IO;
   13ff6:	2306      	movs	r3, #6
   13ff8:	425b      	negs	r3, r3
   13ffa:	60fb      	str	r3, [r7, #12]
        goto exit;
   13ffc:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13ffe:	68fb      	ldr	r3, [r7, #12]
}
   14000:	0018      	movs	r0, r3
   14002:	46bd      	mov	sp, r7
   14004:	b005      	add	sp, #20
   14006:	bd90      	pop	{r4, r7, pc}
   14008:	20004688 	.word	0x20004688
   1400c:	2000465c 	.word	0x2000465c
   14010:	00012b8d 	.word	0x00012b8d

00014014 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   14014:	b590      	push	{r4, r7, lr}
   14016:	b085      	sub	sp, #20
   14018:	af00      	add	r7, sp, #0
   1401a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   1401c:	2300      	movs	r3, #0
   1401e:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14020:	687b      	ldr	r3, [r7, #4]
   14022:	2b00      	cmp	r3, #0
   14024:	d003      	beq.n	1402e <I2cReadData+0x1a>
   14026:	687b      	ldr	r3, [r7, #4]
   14028:	685b      	ldr	r3, [r3, #4]
   1402a:	2b00      	cmp	r3, #0
   1402c:	d103      	bne.n	14036 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   1402e:	2308      	movs	r3, #8
   14030:	425b      	negs	r3, r3
   14032:	60fb      	str	r3, [r7, #12]
        goto exit;
   14034:	e01f      	b.n	14076 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   14036:	687b      	ldr	r3, [r7, #4]
   14038:	781b      	ldrb	r3, [r3, #0]
   1403a:	b29a      	uxth	r2, r3
   1403c:	4b10      	ldr	r3, [pc, #64]	; (14080 <I2cReadData+0x6c>)
   1403e:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   14040:	687b      	ldr	r3, [r7, #4]
   14042:	689a      	ldr	r2, [r3, #8]
   14044:	4b0e      	ldr	r3, [pc, #56]	; (14080 <I2cReadData+0x6c>)
   14046:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   14048:	687b      	ldr	r3, [r7, #4]
   1404a:	899a      	ldrh	r2, [r3, #12]
   1404c:	4b0c      	ldr	r3, [pc, #48]	; (14080 <I2cReadData+0x6c>)
   1404e:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14050:	230b      	movs	r3, #11
   14052:	18fc      	adds	r4, r7, r3
   14054:	4a0a      	ldr	r2, [pc, #40]	; (14080 <I2cReadData+0x6c>)
   14056:	4b0b      	ldr	r3, [pc, #44]	; (14084 <I2cReadData+0x70>)
   14058:	0011      	movs	r1, r2
   1405a:	0018      	movs	r0, r3
   1405c:	4b0a      	ldr	r3, [pc, #40]	; (14088 <I2cReadData+0x74>)
   1405e:	4798      	blx	r3
   14060:	0003      	movs	r3, r0
   14062:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14064:	230b      	movs	r3, #11
   14066:	18fb      	adds	r3, r7, r3
   14068:	781b      	ldrb	r3, [r3, #0]
   1406a:	2b00      	cmp	r3, #0
   1406c:	d003      	beq.n	14076 <I2cReadData+0x62>
        error = ERROR_IO;
   1406e:	2306      	movs	r3, #6
   14070:	425b      	negs	r3, r3
   14072:	60fb      	str	r3, [r7, #12]
        goto exit;
   14074:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14076:	68fb      	ldr	r3, [r7, #12]
}
   14078:	0018      	movs	r0, r3
   1407a:	46bd      	mov	sp, r7
   1407c:	b005      	add	sp, #20
   1407e:	bd90      	pop	{r4, r7, pc}
   14080:	20004688 	.word	0x20004688
   14084:	2000465c 	.word	0x2000465c
   14088:	00012aa9 	.word	0x00012aa9

0001408c <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   1408c:	b590      	push	{r4, r7, lr}
   1408e:	b083      	sub	sp, #12
   14090:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   14092:	2300      	movs	r3, #0
   14094:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   14096:	4b09      	ldr	r3, [pc, #36]	; (140bc <I2cFreeMutex+0x30>)
   14098:	6818      	ldr	r0, [r3, #0]
   1409a:	2300      	movs	r3, #0
   1409c:	2200      	movs	r2, #0
   1409e:	2100      	movs	r1, #0
   140a0:	4c07      	ldr	r4, [pc, #28]	; (140c0 <I2cFreeMutex+0x34>)
   140a2:	47a0      	blx	r4
   140a4:	0003      	movs	r3, r0
   140a6:	2b01      	cmp	r3, #1
   140a8:	d002      	beq.n	140b0 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   140aa:	2314      	movs	r3, #20
   140ac:	425b      	negs	r3, r3
   140ae:	607b      	str	r3, [r7, #4]
    }
    return error;
   140b0:	687b      	ldr	r3, [r7, #4]
}
   140b2:	0018      	movs	r0, r3
   140b4:	46bd      	mov	sp, r7
   140b6:	b003      	add	sp, #12
   140b8:	bd90      	pop	{r4, r7, pc}
   140ba:	46c0      	nop			; (mov r8, r8)
   140bc:	20004658 	.word	0x20004658
   140c0:	0001a75d 	.word	0x0001a75d

000140c4 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   140c4:	b580      	push	{r7, lr}
   140c6:	b084      	sub	sp, #16
   140c8:	af00      	add	r7, sp, #0
   140ca:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   140cc:	2300      	movs	r3, #0
   140ce:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   140d0:	4b08      	ldr	r3, [pc, #32]	; (140f4 <I2cGetMutex+0x30>)
   140d2:	681b      	ldr	r3, [r3, #0]
   140d4:	687a      	ldr	r2, [r7, #4]
   140d6:	0011      	movs	r1, r2
   140d8:	0018      	movs	r0, r3
   140da:	4b07      	ldr	r3, [pc, #28]	; (140f8 <I2cGetMutex+0x34>)
   140dc:	4798      	blx	r3
   140de:	0003      	movs	r3, r0
   140e0:	2b01      	cmp	r3, #1
   140e2:	d002      	beq.n	140ea <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   140e4:	231d      	movs	r3, #29
   140e6:	425b      	negs	r3, r3
   140e8:	60fb      	str	r3, [r7, #12]
    }
    return error;
   140ea:	68fb      	ldr	r3, [r7, #12]
}
   140ec:	0018      	movs	r0, r3
   140ee:	46bd      	mov	sp, r7
   140f0:	b004      	add	sp, #16
   140f2:	bd80      	pop	{r7, pc}
   140f4:	20004658 	.word	0x20004658
   140f8:	0001b46d 	.word	0x0001b46d

000140fc <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   140fc:	b580      	push	{r7, lr}
   140fe:	b084      	sub	sp, #16
   14100:	af00      	add	r7, sp, #0
   14102:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14104:	2300      	movs	r3, #0
   14106:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   14108:	4b04      	ldr	r3, [pc, #16]	; (1411c <I2cGetSemaphoreHandle+0x20>)
   1410a:	681a      	ldr	r2, [r3, #0]
   1410c:	687b      	ldr	r3, [r7, #4]
   1410e:	601a      	str	r2, [r3, #0]
    return error;
   14110:	68fb      	ldr	r3, [r7, #12]
}
   14112:	0018      	movs	r0, r3
   14114:	46bd      	mov	sp, r7
   14116:	b004      	add	sp, #16
   14118:	bd80      	pop	{r7, pc}
   1411a:	46c0      	nop			; (mov r8, r8)
   1411c:	20004684 	.word	0x20004684

00014120 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   14120:	b580      	push	{r7, lr}
   14122:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   14124:	4b02      	ldr	r3, [pc, #8]	; (14130 <I2cGetTaskErrorStatus+0x10>)
   14126:	781b      	ldrb	r3, [r3, #0]
}
   14128:	0018      	movs	r0, r3
   1412a:	46bd      	mov	sp, r7
   1412c:	bd80      	pop	{r7, pc}
   1412e:	46c0      	nop			; (mov r8, r8)
   14130:	20000488 	.word	0x20000488

00014134 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   14134:	b580      	push	{r7, lr}
   14136:	b082      	sub	sp, #8
   14138:	af00      	add	r7, sp, #0
   1413a:	0002      	movs	r2, r0
   1413c:	1dfb      	adds	r3, r7, #7
   1413e:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   14140:	4b03      	ldr	r3, [pc, #12]	; (14150 <I2cSetTaskErrorStatus+0x1c>)
   14142:	1dfa      	adds	r2, r7, #7
   14144:	7812      	ldrb	r2, [r2, #0]
   14146:	701a      	strb	r2, [r3, #0]
}
   14148:	46c0      	nop			; (mov r8, r8)
   1414a:	46bd      	mov	sp, r7
   1414c:	b002      	add	sp, #8
   1414e:	bd80      	pop	{r7, pc}
   14150:	20000488 	.word	0x20000488

00014154 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   14154:	b580      	push	{r7, lr}
   14156:	b084      	sub	sp, #16
   14158:	af00      	add	r7, sp, #0
   1415a:	6078      	str	r0, [r7, #4]
   1415c:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   1415e:	2300      	movs	r3, #0
   14160:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   14162:	2300      	movs	r3, #0
   14164:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14166:	2396      	movs	r3, #150	; 0x96
   14168:	005b      	lsls	r3, r3, #1
   1416a:	0018      	movs	r0, r3
   1416c:	4b28      	ldr	r3, [pc, #160]	; (14210 <I2cWriteDataWait+0xbc>)
   1416e:	4798      	blx	r3
   14170:	0003      	movs	r3, r0
   14172:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14174:	68fb      	ldr	r3, [r7, #12]
   14176:	2b00      	cmp	r3, #0
   14178:	d138      	bne.n	141ec <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   1417a:	2308      	movs	r3, #8
   1417c:	18fb      	adds	r3, r7, r3
   1417e:	0018      	movs	r0, r3
   14180:	4b24      	ldr	r3, [pc, #144]	; (14214 <I2cWriteDataWait+0xc0>)
   14182:	4798      	blx	r3
   14184:	0003      	movs	r3, r0
   14186:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14188:	68fb      	ldr	r3, [r7, #12]
   1418a:	2b00      	cmp	r3, #0
   1418c:	d130      	bne.n	141f0 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   1418e:	687b      	ldr	r3, [r7, #4]
   14190:	0018      	movs	r0, r3
   14192:	4b21      	ldr	r3, [pc, #132]	; (14218 <I2cWriteDataWait+0xc4>)
   14194:	4798      	blx	r3
   14196:	0003      	movs	r3, r0
   14198:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   1419a:	68fb      	ldr	r3, [r7, #12]
   1419c:	2b00      	cmp	r3, #0
   1419e:	d12a      	bne.n	141f6 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   141a0:	68bb      	ldr	r3, [r7, #8]
   141a2:	683a      	ldr	r2, [r7, #0]
   141a4:	0011      	movs	r1, r2
   141a6:	0018      	movs	r0, r3
   141a8:	4b1c      	ldr	r3, [pc, #112]	; (1421c <I2cWriteDataWait+0xc8>)
   141aa:	4798      	blx	r3
   141ac:	0003      	movs	r3, r0
   141ae:	2b01      	cmp	r3, #1
   141b0:	d111      	bne.n	141d6 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   141b2:	4b1b      	ldr	r3, [pc, #108]	; (14220 <I2cWriteDataWait+0xcc>)
   141b4:	4798      	blx	r3
   141b6:	1e03      	subs	r3, r0, #0
   141b8:	d011      	beq.n	141de <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   141ba:	2000      	movs	r0, #0
   141bc:	4b19      	ldr	r3, [pc, #100]	; (14224 <I2cWriteDataWait+0xd0>)
   141be:	4798      	blx	r3
            if (error != ERROR_NONE) {
   141c0:	68fb      	ldr	r3, [r7, #12]
   141c2:	2b00      	cmp	r3, #0
   141c4:	d003      	beq.n	141ce <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   141c6:	2321      	movs	r3, #33	; 0x21
   141c8:	425b      	negs	r3, r3
   141ca:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   141cc:	e014      	b.n	141f8 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   141ce:	2303      	movs	r3, #3
   141d0:	425b      	negs	r3, r3
   141d2:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   141d4:	e010      	b.n	141f8 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   141d6:	2303      	movs	r3, #3
   141d8:	425b      	negs	r3, r3
   141da:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   141dc:	e00c      	b.n	141f8 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   141de:	4b12      	ldr	r3, [pc, #72]	; (14228 <I2cWriteDataWait+0xd4>)
   141e0:	4798      	blx	r3
   141e2:	0002      	movs	r2, r0
   141e4:	68fb      	ldr	r3, [r7, #12]
   141e6:	4313      	orrs	r3, r2
   141e8:	60fb      	str	r3, [r7, #12]
   141ea:	e002      	b.n	141f2 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   141ec:	46c0      	nop			; (mov r8, r8)
   141ee:	e000      	b.n	141f2 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   141f0:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   141f2:	68fb      	ldr	r3, [r7, #12]
   141f4:	e007      	b.n	14206 <I2cWriteDataWait+0xb2>
        goto exitError0;
   141f6:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   141f8:	4b0b      	ldr	r3, [pc, #44]	; (14228 <I2cWriteDataWait+0xd4>)
   141fa:	4798      	blx	r3
   141fc:	0002      	movs	r2, r0
   141fe:	68fb      	ldr	r3, [r7, #12]
   14200:	4313      	orrs	r3, r2
   14202:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   14204:	68fb      	ldr	r3, [r7, #12]
}
   14206:	0018      	movs	r0, r3
   14208:	46bd      	mov	sp, r7
   1420a:	b004      	add	sp, #16
   1420c:	bd80      	pop	{r7, pc}
   1420e:	46c0      	nop			; (mov r8, r8)
   14210:	000140c5 	.word	0x000140c5
   14214:	000140fd 	.word	0x000140fd
   14218:	00013f9d 	.word	0x00013f9d
   1421c:	0001b46d 	.word	0x0001b46d
   14220:	00014121 	.word	0x00014121
   14224:	00014135 	.word	0x00014135
   14228:	0001408d 	.word	0x0001408d

0001422c <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   1422c:	b580      	push	{r7, lr}
   1422e:	b086      	sub	sp, #24
   14230:	af00      	add	r7, sp, #0
   14232:	60f8      	str	r0, [r7, #12]
   14234:	60b9      	str	r1, [r7, #8]
   14236:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   14238:	2300      	movs	r3, #0
   1423a:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   1423c:	2300      	movs	r3, #0
   1423e:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14240:	2396      	movs	r3, #150	; 0x96
   14242:	005b      	lsls	r3, r3, #1
   14244:	0018      	movs	r0, r3
   14246:	4b35      	ldr	r3, [pc, #212]	; (1431c <I2cReadDataWait+0xf0>)
   14248:	4798      	blx	r3
   1424a:	0003      	movs	r3, r0
   1424c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   1424e:	697b      	ldr	r3, [r7, #20]
   14250:	2b00      	cmp	r3, #0
   14252:	d155      	bne.n	14300 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14254:	2310      	movs	r3, #16
   14256:	18fb      	adds	r3, r7, r3
   14258:	0018      	movs	r0, r3
   1425a:	4b31      	ldr	r3, [pc, #196]	; (14320 <I2cReadDataWait+0xf4>)
   1425c:	4798      	blx	r3
   1425e:	0003      	movs	r3, r0
   14260:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14262:	697b      	ldr	r3, [r7, #20]
   14264:	2b00      	cmp	r3, #0
   14266:	d14d      	bne.n	14304 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14268:	68fb      	ldr	r3, [r7, #12]
   1426a:	0018      	movs	r0, r3
   1426c:	4b2d      	ldr	r3, [pc, #180]	; (14324 <I2cReadDataWait+0xf8>)
   1426e:	4798      	blx	r3
   14270:	0003      	movs	r3, r0
   14272:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14274:	697b      	ldr	r3, [r7, #20]
   14276:	2b00      	cmp	r3, #0
   14278:	d147      	bne.n	1430a <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1427a:	693b      	ldr	r3, [r7, #16]
   1427c:	687a      	ldr	r2, [r7, #4]
   1427e:	0011      	movs	r1, r2
   14280:	0018      	movs	r0, r3
   14282:	4b29      	ldr	r3, [pc, #164]	; (14328 <I2cReadDataWait+0xfc>)
   14284:	4798      	blx	r3
   14286:	0003      	movs	r3, r0
   14288:	2b01      	cmp	r3, #1
   1428a:	d118      	bne.n	142be <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1428c:	4b27      	ldr	r3, [pc, #156]	; (1432c <I2cReadDataWait+0x100>)
   1428e:	4798      	blx	r3
   14290:	1e03      	subs	r3, r0, #0
   14292:	d006      	beq.n	142a2 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14294:	2000      	movs	r0, #0
   14296:	4b26      	ldr	r3, [pc, #152]	; (14330 <I2cReadDataWait+0x104>)
   14298:	4798      	blx	r3
            error = ERROR_ABORTED;
   1429a:	2303      	movs	r3, #3
   1429c:	425b      	negs	r3, r3
   1429e:	617b      	str	r3, [r7, #20]
            goto exitError0;
   142a0:	e034      	b.n	1430c <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   142a2:	68bb      	ldr	r3, [r7, #8]
   142a4:	0018      	movs	r0, r3
   142a6:	4b23      	ldr	r3, [pc, #140]	; (14334 <I2cReadDataWait+0x108>)
   142a8:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   142aa:	68fb      	ldr	r3, [r7, #12]
   142ac:	0018      	movs	r0, r3
   142ae:	4b22      	ldr	r3, [pc, #136]	; (14338 <I2cReadDataWait+0x10c>)
   142b0:	4798      	blx	r3
   142b2:	0003      	movs	r3, r0
   142b4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   142b6:	697b      	ldr	r3, [r7, #20]
   142b8:	2b00      	cmp	r3, #0
   142ba:	d004      	beq.n	142c6 <I2cReadDataWait+0x9a>
        goto exitError0;
   142bc:	e026      	b.n	1430c <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   142be:	2303      	movs	r3, #3
   142c0:	425b      	negs	r3, r3
   142c2:	617b      	str	r3, [r7, #20]
        goto exitError0;
   142c4:	e022      	b.n	1430c <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   142c6:	693b      	ldr	r3, [r7, #16]
   142c8:	687a      	ldr	r2, [r7, #4]
   142ca:	0011      	movs	r1, r2
   142cc:	0018      	movs	r0, r3
   142ce:	4b16      	ldr	r3, [pc, #88]	; (14328 <I2cReadDataWait+0xfc>)
   142d0:	4798      	blx	r3
   142d2:	0003      	movs	r3, r0
   142d4:	2b01      	cmp	r3, #1
   142d6:	d10a      	bne.n	142ee <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   142d8:	4b14      	ldr	r3, [pc, #80]	; (1432c <I2cReadDataWait+0x100>)
   142da:	4798      	blx	r3
   142dc:	1e03      	subs	r3, r0, #0
   142de:	d00a      	beq.n	142f6 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   142e0:	2000      	movs	r0, #0
   142e2:	4b13      	ldr	r3, [pc, #76]	; (14330 <I2cReadDataWait+0x104>)
   142e4:	4798      	blx	r3
            error = ERROR_ABORTED;
   142e6:	2303      	movs	r3, #3
   142e8:	425b      	negs	r3, r3
   142ea:	617b      	str	r3, [r7, #20]
            goto exitError0;
   142ec:	e00e      	b.n	1430c <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   142ee:	2303      	movs	r3, #3
   142f0:	425b      	negs	r3, r3
   142f2:	617b      	str	r3, [r7, #20]
        goto exitError0;
   142f4:	e00a      	b.n	1430c <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   142f6:	4b11      	ldr	r3, [pc, #68]	; (1433c <I2cReadDataWait+0x110>)
   142f8:	4798      	blx	r3
   142fa:	0003      	movs	r3, r0
   142fc:	617b      	str	r3, [r7, #20]
   142fe:	e002      	b.n	14306 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14300:	46c0      	nop			; (mov r8, r8)
   14302:	e000      	b.n	14306 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14304:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14306:	697b      	ldr	r3, [r7, #20]
   14308:	e003      	b.n	14312 <I2cReadDataWait+0xe6>
        goto exitError0;
   1430a:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   1430c:	4b0b      	ldr	r3, [pc, #44]	; (1433c <I2cReadDataWait+0x110>)
   1430e:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14310:	697b      	ldr	r3, [r7, #20]
}
   14312:	0018      	movs	r0, r3
   14314:	46bd      	mov	sp, r7
   14316:	b006      	add	sp, #24
   14318:	bd80      	pop	{r7, pc}
   1431a:	46c0      	nop			; (mov r8, r8)
   1431c:	000140c5 	.word	0x000140c5
   14320:	000140fd 	.word	0x000140fd
   14324:	00013f9d 	.word	0x00013f9d
   14328:	0001b46d 	.word	0x0001b46d
   1432c:	00014121 	.word	0x00014121
   14330:	00014135 	.word	0x00014135
   14334:	0001c1c1 	.word	0x0001c1c1
   14338:	00014015 	.word	0x00014015
   1433c:	0001408d 	.word	0x0001408d

00014340 <I2cPingAddressWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cPingAddressWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   14340:	b580      	push	{r7, lr}
   14342:	b086      	sub	sp, #24
   14344:	af00      	add	r7, sp, #0
   14346:	60f8      	str	r0, [r7, #12]
   14348:	60b9      	str	r1, [r7, #8]
   1434a:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   1434c:	2300      	movs	r3, #0
   1434e:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   14350:	2300      	movs	r3, #0
   14352:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14354:	2396      	movs	r3, #150	; 0x96
   14356:	005b      	lsls	r3, r3, #1
   14358:	0018      	movs	r0, r3
   1435a:	4b24      	ldr	r3, [pc, #144]	; (143ec <I2cPingAddressWait+0xac>)
   1435c:	4798      	blx	r3
   1435e:	0003      	movs	r3, r0
   14360:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14362:	697b      	ldr	r3, [r7, #20]
   14364:	2b00      	cmp	r3, #0
   14366:	d133      	bne.n	143d0 <I2cPingAddressWait+0x90>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14368:	2310      	movs	r3, #16
   1436a:	18fb      	adds	r3, r7, r3
   1436c:	0018      	movs	r0, r3
   1436e:	4b20      	ldr	r3, [pc, #128]	; (143f0 <I2cPingAddressWait+0xb0>)
   14370:	4798      	blx	r3
   14372:	0003      	movs	r3, r0
   14374:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14376:	697b      	ldr	r3, [r7, #20]
   14378:	2b00      	cmp	r3, #0
   1437a:	d12b      	bne.n	143d4 <I2cPingAddressWait+0x94>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   1437c:	68fb      	ldr	r3, [r7, #12]
   1437e:	0018      	movs	r0, r3
   14380:	4b1c      	ldr	r3, [pc, #112]	; (143f4 <I2cPingAddressWait+0xb4>)
   14382:	4798      	blx	r3
   14384:	0003      	movs	r3, r0
   14386:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14388:	697b      	ldr	r3, [r7, #20]
   1438a:	2b00      	cmp	r3, #0
   1438c:	d125      	bne.n	143da <I2cPingAddressWait+0x9a>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1438e:	693b      	ldr	r3, [r7, #16]
   14390:	687a      	ldr	r2, [r7, #4]
   14392:	0011      	movs	r1, r2
   14394:	0018      	movs	r0, r3
   14396:	4b18      	ldr	r3, [pc, #96]	; (143f8 <I2cPingAddressWait+0xb8>)
   14398:	4798      	blx	r3
   1439a:	0003      	movs	r3, r0
   1439c:	2b01      	cmp	r3, #1
   1439e:	d113      	bne.n	143c8 <I2cPingAddressWait+0x88>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   143a0:	4b16      	ldr	r3, [pc, #88]	; (143fc <I2cPingAddressWait+0xbc>)
   143a2:	4798      	blx	r3
   143a4:	1e03      	subs	r3, r0, #0
   143a6:	d006      	beq.n	143b6 <I2cPingAddressWait+0x76>
            I2cSetTaskErrorStatus(false);
   143a8:	2000      	movs	r0, #0
   143aa:	4b15      	ldr	r3, [pc, #84]	; (14400 <I2cPingAddressWait+0xc0>)
   143ac:	4798      	blx	r3
            error = ERROR_ABORTED;
   143ae:	2303      	movs	r3, #3
   143b0:	425b      	negs	r3, r3
   143b2:	617b      	str	r3, [r7, #20]
            goto exitError0;
   143b4:	e012      	b.n	143dc <I2cPingAddressWait+0x9c>
        }
        vTaskDelay(delay);
   143b6:	68bb      	ldr	r3, [r7, #8]
   143b8:	0018      	movs	r0, r3
   143ba:	4b12      	ldr	r3, [pc, #72]	; (14404 <I2cPingAddressWait+0xc4>)
   143bc:	4798      	blx	r3
        goto exitError0;
    }


    //---8. Release Mutex
    error = I2cFreeMutex();
   143be:	4b12      	ldr	r3, [pc, #72]	; (14408 <I2cPingAddressWait+0xc8>)
   143c0:	4798      	blx	r3
   143c2:	0003      	movs	r3, r0
   143c4:	617b      	str	r3, [r7, #20]
   143c6:	e006      	b.n	143d6 <I2cPingAddressWait+0x96>
        error = ERR_TIMEOUT;
   143c8:	2303      	movs	r3, #3
   143ca:	425b      	negs	r3, r3
   143cc:	617b      	str	r3, [r7, #20]
        goto exitError0;
   143ce:	e005      	b.n	143dc <I2cPingAddressWait+0x9c>
    if (ERROR_NONE != error) goto exit;
   143d0:	46c0      	nop			; (mov r8, r8)
   143d2:	e000      	b.n	143d6 <I2cPingAddressWait+0x96>
    if (ERROR_NONE != error) goto exit;
   143d4:	46c0      	nop			; (mov r8, r8)
exit:
    return error;
   143d6:	697b      	ldr	r3, [r7, #20]
   143d8:	e003      	b.n	143e2 <I2cPingAddressWait+0xa2>
        goto exitError0;
   143da:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   143dc:	4b0a      	ldr	r3, [pc, #40]	; (14408 <I2cPingAddressWait+0xc8>)
   143de:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   143e0:	697b      	ldr	r3, [r7, #20]
}
   143e2:	0018      	movs	r0, r3
   143e4:	46bd      	mov	sp, r7
   143e6:	b006      	add	sp, #24
   143e8:	bd80      	pop	{r7, pc}
   143ea:	46c0      	nop			; (mov r8, r8)
   143ec:	000140c5 	.word	0x000140c5
   143f0:	000140fd 	.word	0x000140fd
   143f4:	00013f9d 	.word	0x00013f9d
   143f8:	0001b46d 	.word	0x0001b46d
   143fc:	00014121 	.word	0x00014121
   14400:	00014135 	.word	0x00014135
   14404:	0001c1c1 	.word	0x0001c1c1
   14408:	0001408d 	.word	0x0001408d

0001440c <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   1440c:	b5b0      	push	{r4, r5, r7, lr}
   1440e:	b086      	sub	sp, #24
   14410:	af00      	add	r7, sp, #0
   14412:	60f8      	str	r0, [r7, #12]
   14414:	0008      	movs	r0, r1
   14416:	607a      	str	r2, [r7, #4]
   14418:	0019      	movs	r1, r3
   1441a:	230b      	movs	r3, #11
   1441c:	18fb      	adds	r3, r7, r3
   1441e:	1c02      	adds	r2, r0, #0
   14420:	701a      	strb	r2, [r3, #0]
   14422:	2308      	movs	r3, #8
   14424:	18fb      	adds	r3, r7, r3
   14426:	1c0a      	adds	r2, r1, #0
   14428:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   1442a:	68fb      	ldr	r3, [r7, #12]
   1442c:	685c      	ldr	r4, [r3, #4]
   1442e:	68fb      	ldr	r3, [r7, #12]
   14430:	6898      	ldr	r0, [r3, #8]
   14432:	2308      	movs	r3, #8
   14434:	18fb      	adds	r3, r7, r3
   14436:	881d      	ldrh	r5, [r3, #0]
   14438:	687a      	ldr	r2, [r7, #4]
   1443a:	230b      	movs	r3, #11
   1443c:	18fb      	adds	r3, r7, r3
   1443e:	7819      	ldrb	r1, [r3, #0]
   14440:	002b      	movs	r3, r5
   14442:	47a0      	blx	r4
   14444:	0003      	movs	r3, r0
   14446:	617b      	str	r3, [r7, #20]

  return ret;
   14448:	697b      	ldr	r3, [r7, #20]
}
   1444a:	0018      	movs	r0, r3
   1444c:	46bd      	mov	sp, r7
   1444e:	b006      	add	sp, #24
   14450:	bdb0      	pop	{r4, r5, r7, pc}

00014452 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   14452:	b5b0      	push	{r4, r5, r7, lr}
   14454:	b086      	sub	sp, #24
   14456:	af00      	add	r7, sp, #0
   14458:	60f8      	str	r0, [r7, #12]
   1445a:	0008      	movs	r0, r1
   1445c:	607a      	str	r2, [r7, #4]
   1445e:	0019      	movs	r1, r3
   14460:	230b      	movs	r3, #11
   14462:	18fb      	adds	r3, r7, r3
   14464:	1c02      	adds	r2, r0, #0
   14466:	701a      	strb	r2, [r3, #0]
   14468:	2308      	movs	r3, #8
   1446a:	18fb      	adds	r3, r7, r3
   1446c:	1c0a      	adds	r2, r1, #0
   1446e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   14470:	68fb      	ldr	r3, [r7, #12]
   14472:	681c      	ldr	r4, [r3, #0]
   14474:	68fb      	ldr	r3, [r7, #12]
   14476:	6898      	ldr	r0, [r3, #8]
   14478:	2308      	movs	r3, #8
   1447a:	18fb      	adds	r3, r7, r3
   1447c:	881d      	ldrh	r5, [r3, #0]
   1447e:	687a      	ldr	r2, [r7, #4]
   14480:	230b      	movs	r3, #11
   14482:	18fb      	adds	r3, r7, r3
   14484:	7819      	ldrb	r1, [r3, #0]
   14486:	002b      	movs	r3, r5
   14488:	47a0      	blx	r4
   1448a:	0003      	movs	r3, r0
   1448c:	617b      	str	r3, [r7, #20]

  return ret;
   1448e:	697b      	ldr	r3, [r7, #20]
}
   14490:	0018      	movs	r0, r3
   14492:	46bd      	mov	sp, r7
   14494:	b006      	add	sp, #24
   14496:	bdb0      	pop	{r4, r5, r7, pc}

00014498 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   14498:	b580      	push	{r7, lr}
   1449a:	b082      	sub	sp, #8
   1449c:	af00      	add	r7, sp, #0
   1449e:	0002      	movs	r2, r0
   144a0:	1dbb      	adds	r3, r7, #6
   144a2:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   144a4:	1dbb      	adds	r3, r7, #6
   144a6:	2200      	movs	r2, #0
   144a8:	5e9a      	ldrsh	r2, [r3, r2]
   144aa:	4b06      	ldr	r3, [pc, #24]	; (144c4 <lsm6dso_from_fs2_to_mg+0x2c>)
   144ac:	0010      	movs	r0, r2
   144ae:	4798      	blx	r3
   144b0:	1c02      	adds	r2, r0, #0
   144b2:	4b05      	ldr	r3, [pc, #20]	; (144c8 <lsm6dso_from_fs2_to_mg+0x30>)
   144b4:	4905      	ldr	r1, [pc, #20]	; (144cc <lsm6dso_from_fs2_to_mg+0x34>)
   144b6:	1c10      	adds	r0, r2, #0
   144b8:	4798      	blx	r3
   144ba:	1c03      	adds	r3, r0, #0
}
   144bc:	1c18      	adds	r0, r3, #0
   144be:	46bd      	mov	sp, r7
   144c0:	b002      	add	sp, #8
   144c2:	bd80      	pop	{r7, pc}
   144c4:	00033045 	.word	0x00033045
   144c8:	00032dc5 	.word	0x00032dc5
   144cc:	3d79db23 	.word	0x3d79db23

000144d0 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   144d0:	b590      	push	{r4, r7, lr}
   144d2:	b085      	sub	sp, #20
   144d4:	af00      	add	r7, sp, #0
   144d6:	6078      	str	r0, [r7, #4]
   144d8:	000a      	movs	r2, r1
   144da:	1cfb      	adds	r3, r7, #3
   144dc:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   144de:	2308      	movs	r3, #8
   144e0:	18fa      	adds	r2, r7, r3
   144e2:	6878      	ldr	r0, [r7, #4]
   144e4:	2301      	movs	r3, #1
   144e6:	2110      	movs	r1, #16
   144e8:	4c12      	ldr	r4, [pc, #72]	; (14534 <lsm6dso_xl_full_scale_set+0x64>)
   144ea:	47a0      	blx	r4
   144ec:	0003      	movs	r3, r0
   144ee:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   144f0:	68fb      	ldr	r3, [r7, #12]
   144f2:	2b00      	cmp	r3, #0
   144f4:	d119      	bne.n	1452a <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   144f6:	1cfb      	adds	r3, r7, #3
   144f8:	781b      	ldrb	r3, [r3, #0]
   144fa:	2203      	movs	r2, #3
   144fc:	4013      	ands	r3, r2
   144fe:	b2da      	uxtb	r2, r3
   14500:	2308      	movs	r3, #8
   14502:	18fb      	adds	r3, r7, r3
   14504:	2103      	movs	r1, #3
   14506:	400a      	ands	r2, r1
   14508:	0090      	lsls	r0, r2, #2
   1450a:	781a      	ldrb	r2, [r3, #0]
   1450c:	210c      	movs	r1, #12
   1450e:	438a      	bics	r2, r1
   14510:	1c11      	adds	r1, r2, #0
   14512:	1c02      	adds	r2, r0, #0
   14514:	430a      	orrs	r2, r1
   14516:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14518:	2308      	movs	r3, #8
   1451a:	18fa      	adds	r2, r7, r3
   1451c:	6878      	ldr	r0, [r7, #4]
   1451e:	2301      	movs	r3, #1
   14520:	2110      	movs	r1, #16
   14522:	4c05      	ldr	r4, [pc, #20]	; (14538 <lsm6dso_xl_full_scale_set+0x68>)
   14524:	47a0      	blx	r4
   14526:	0003      	movs	r3, r0
   14528:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1452a:	68fb      	ldr	r3, [r7, #12]
}
   1452c:	0018      	movs	r0, r3
   1452e:	46bd      	mov	sp, r7
   14530:	b005      	add	sp, #20
   14532:	bd90      	pop	{r4, r7, pc}
   14534:	0001440d 	.word	0x0001440d
   14538:	00014453 	.word	0x00014453

0001453c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   1453c:	b590      	push	{r4, r7, lr}
   1453e:	b087      	sub	sp, #28
   14540:	af00      	add	r7, sp, #0
   14542:	6078      	str	r0, [r7, #4]
   14544:	000a      	movs	r2, r1
   14546:	1cfb      	adds	r3, r7, #3
   14548:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   1454a:	2317      	movs	r3, #23
   1454c:	18fb      	adds	r3, r7, r3
   1454e:	1cfa      	adds	r2, r7, #3
   14550:	7812      	ldrb	r2, [r2, #0]
   14552:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   14554:	230c      	movs	r3, #12
   14556:	18fa      	adds	r2, r7, r3
   14558:	687b      	ldr	r3, [r7, #4]
   1455a:	0011      	movs	r1, r2
   1455c:	0018      	movs	r0, r3
   1455e:	4ba4      	ldr	r3, [pc, #656]	; (147f0 <lsm6dso_xl_data_rate_set+0x2b4>)
   14560:	4798      	blx	r3
   14562:	0003      	movs	r3, r0
   14564:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   14566:	693b      	ldr	r3, [r7, #16]
   14568:	2b00      	cmp	r3, #0
   1456a:	d000      	beq.n	1456e <lsm6dso_xl_data_rate_set+0x32>
   1456c:	e113      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1456e:	230c      	movs	r3, #12
   14570:	18fb      	adds	r3, r7, r3
   14572:	781b      	ldrb	r3, [r3, #0]
   14574:	07db      	lsls	r3, r3, #31
   14576:	0fdb      	lsrs	r3, r3, #31
   14578:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1457a:	230c      	movs	r3, #12
   1457c:	18fb      	adds	r3, r7, r3
   1457e:	781b      	ldrb	r3, [r3, #0]
   14580:	079b      	lsls	r3, r3, #30
   14582:	0fdb      	lsrs	r3, r3, #31
   14584:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14586:	4313      	orrs	r3, r2
   14588:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1458a:	230c      	movs	r3, #12
   1458c:	18fb      	adds	r3, r7, r3
   1458e:	781b      	ldrb	r3, [r3, #0]
   14590:	075b      	lsls	r3, r3, #29
   14592:	0fdb      	lsrs	r3, r3, #31
   14594:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14596:	4313      	orrs	r3, r2
   14598:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1459a:	230c      	movs	r3, #12
   1459c:	18fb      	adds	r3, r7, r3
   1459e:	781b      	ldrb	r3, [r3, #0]
   145a0:	071b      	lsls	r3, r3, #28
   145a2:	0fdb      	lsrs	r3, r3, #31
   145a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   145a6:	4313      	orrs	r3, r2
   145a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   145aa:	230c      	movs	r3, #12
   145ac:	18fb      	adds	r3, r7, r3
   145ae:	781b      	ldrb	r3, [r3, #0]
   145b0:	06db      	lsls	r3, r3, #27
   145b2:	0fdb      	lsrs	r3, r3, #31
   145b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   145b6:	4313      	orrs	r3, r2
   145b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   145ba:	230c      	movs	r3, #12
   145bc:	18fb      	adds	r3, r7, r3
   145be:	781b      	ldrb	r3, [r3, #0]
   145c0:	069b      	lsls	r3, r3, #26
   145c2:	0fdb      	lsrs	r3, r3, #31
   145c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   145c6:	4313      	orrs	r3, r2
   145c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   145ca:	230c      	movs	r3, #12
   145cc:	18fb      	adds	r3, r7, r3
   145ce:	781b      	ldrb	r3, [r3, #0]
   145d0:	065b      	lsls	r3, r3, #25
   145d2:	0fdb      	lsrs	r3, r3, #31
   145d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   145d6:	4313      	orrs	r3, r2
   145d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   145da:	230c      	movs	r3, #12
   145dc:	18fb      	adds	r3, r7, r3
   145de:	781b      	ldrb	r3, [r3, #0]
   145e0:	061b      	lsls	r3, r3, #24
   145e2:	0fdb      	lsrs	r3, r3, #31
   145e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   145e6:	4313      	orrs	r3, r2
   145e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   145ea:	230c      	movs	r3, #12
   145ec:	18fb      	adds	r3, r7, r3
   145ee:	785b      	ldrb	r3, [r3, #1]
   145f0:	07db      	lsls	r3, r3, #31
   145f2:	0fdb      	lsrs	r3, r3, #31
   145f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   145f6:	4313      	orrs	r3, r2
   145f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   145fa:	230c      	movs	r3, #12
   145fc:	18fb      	adds	r3, r7, r3
   145fe:	785b      	ldrb	r3, [r3, #1]
   14600:	079b      	lsls	r3, r3, #30
   14602:	0fdb      	lsrs	r3, r3, #31
   14604:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14606:	4313      	orrs	r3, r2
   14608:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1460a:	230c      	movs	r3, #12
   1460c:	18fb      	adds	r3, r7, r3
   1460e:	785b      	ldrb	r3, [r3, #1]
   14610:	075b      	lsls	r3, r3, #29
   14612:	0fdb      	lsrs	r3, r3, #31
   14614:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14616:	4313      	orrs	r3, r2
   14618:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1461a:	230c      	movs	r3, #12
   1461c:	18fb      	adds	r3, r7, r3
   1461e:	785b      	ldrb	r3, [r3, #1]
   14620:	071b      	lsls	r3, r3, #28
   14622:	0fdb      	lsrs	r3, r3, #31
   14624:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14626:	4313      	orrs	r3, r2
   14628:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1462a:	230c      	movs	r3, #12
   1462c:	18fb      	adds	r3, r7, r3
   1462e:	785b      	ldrb	r3, [r3, #1]
   14630:	06db      	lsls	r3, r3, #27
   14632:	0fdb      	lsrs	r3, r3, #31
   14634:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14636:	4313      	orrs	r3, r2
   14638:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1463a:	230c      	movs	r3, #12
   1463c:	18fb      	adds	r3, r7, r3
   1463e:	785b      	ldrb	r3, [r3, #1]
   14640:	069b      	lsls	r3, r3, #26
   14642:	0fdb      	lsrs	r3, r3, #31
   14644:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14646:	4313      	orrs	r3, r2
   14648:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1464a:	230c      	movs	r3, #12
   1464c:	18fb      	adds	r3, r7, r3
   1464e:	785b      	ldrb	r3, [r3, #1]
   14650:	065b      	lsls	r3, r3, #25
   14652:	0fdb      	lsrs	r3, r3, #31
   14654:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14656:	4313      	orrs	r3, r2
   14658:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   1465a:	230c      	movs	r3, #12
   1465c:	18fb      	adds	r3, r7, r3
   1465e:	785b      	ldrb	r3, [r3, #1]
   14660:	061b      	lsls	r3, r3, #24
   14662:	0fdb      	lsrs	r3, r3, #31
   14664:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14666:	4313      	orrs	r3, r2
   14668:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1466a:	2b01      	cmp	r3, #1
   1466c:	d000      	beq.n	14670 <lsm6dso_xl_data_rate_set+0x134>
   1466e:	e092      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   14670:	230b      	movs	r3, #11
   14672:	18fa      	adds	r2, r7, r3
   14674:	687b      	ldr	r3, [r7, #4]
   14676:	0011      	movs	r1, r2
   14678:	0018      	movs	r0, r3
   1467a:	4b5e      	ldr	r3, [pc, #376]	; (147f4 <lsm6dso_xl_data_rate_set+0x2b8>)
   1467c:	4798      	blx	r3
   1467e:	0003      	movs	r3, r0
   14680:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   14682:	693b      	ldr	r3, [r7, #16]
   14684:	2b00      	cmp	r3, #0
   14686:	d000      	beq.n	1468a <lsm6dso_xl_data_rate_set+0x14e>
   14688:	e085      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   1468a:	230b      	movs	r3, #11
   1468c:	18fb      	adds	r3, r7, r3
   1468e:	781b      	ldrb	r3, [r3, #0]
   14690:	2b01      	cmp	r3, #1
   14692:	d017      	beq.n	146c4 <lsm6dso_xl_data_rate_set+0x188>
   14694:	dc02      	bgt.n	1469c <lsm6dso_xl_data_rate_set+0x160>
   14696:	2b00      	cmp	r3, #0
   14698:	d005      	beq.n	146a6 <lsm6dso_xl_data_rate_set+0x16a>
   1469a:	e076      	b.n	1478a <lsm6dso_xl_data_rate_set+0x24e>
   1469c:	2b02      	cmp	r3, #2
   1469e:	d029      	beq.n	146f4 <lsm6dso_xl_data_rate_set+0x1b8>
   146a0:	2b03      	cmp	r3, #3
   146a2:	d048      	beq.n	14736 <lsm6dso_xl_data_rate_set+0x1fa>
   146a4:	e071      	b.n	1478a <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   146a6:	1cfb      	adds	r3, r7, #3
   146a8:	781b      	ldrb	r3, [r3, #0]
   146aa:	2b00      	cmp	r3, #0
   146ac:	d104      	bne.n	146b8 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   146ae:	2317      	movs	r3, #23
   146b0:	18fb      	adds	r3, r7, r3
   146b2:	2201      	movs	r2, #1
   146b4:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   146b6:	e06e      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   146b8:	2317      	movs	r3, #23
   146ba:	18fb      	adds	r3, r7, r3
   146bc:	1cfa      	adds	r2, r7, #3
   146be:	7812      	ldrb	r2, [r2, #0]
   146c0:	701a      	strb	r2, [r3, #0]
            break;
   146c2:	e068      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   146c4:	1cfb      	adds	r3, r7, #3
   146c6:	781b      	ldrb	r3, [r3, #0]
   146c8:	2b00      	cmp	r3, #0
   146ca:	d104      	bne.n	146d6 <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   146cc:	2317      	movs	r3, #23
   146ce:	18fb      	adds	r3, r7, r3
   146d0:	2202      	movs	r2, #2
   146d2:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   146d4:	e05f      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   146d6:	1cfb      	adds	r3, r7, #3
   146d8:	781b      	ldrb	r3, [r3, #0]
   146da:	2b01      	cmp	r3, #1
   146dc:	d104      	bne.n	146e8 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   146de:	2317      	movs	r3, #23
   146e0:	18fb      	adds	r3, r7, r3
   146e2:	2202      	movs	r2, #2
   146e4:	701a      	strb	r2, [r3, #0]
            break;
   146e6:	e056      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   146e8:	2317      	movs	r3, #23
   146ea:	18fb      	adds	r3, r7, r3
   146ec:	1cfa      	adds	r2, r7, #3
   146ee:	7812      	ldrb	r2, [r2, #0]
   146f0:	701a      	strb	r2, [r3, #0]
            break;
   146f2:	e050      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   146f4:	1cfb      	adds	r3, r7, #3
   146f6:	781b      	ldrb	r3, [r3, #0]
   146f8:	2b00      	cmp	r3, #0
   146fa:	d104      	bne.n	14706 <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   146fc:	2317      	movs	r3, #23
   146fe:	18fb      	adds	r3, r7, r3
   14700:	2203      	movs	r2, #3
   14702:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14704:	e047      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14706:	1cfb      	adds	r3, r7, #3
   14708:	781b      	ldrb	r3, [r3, #0]
   1470a:	2b01      	cmp	r3, #1
   1470c:	d104      	bne.n	14718 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   1470e:	2317      	movs	r3, #23
   14710:	18fb      	adds	r3, r7, r3
   14712:	2203      	movs	r2, #3
   14714:	701a      	strb	r2, [r3, #0]
            break;
   14716:	e03e      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   14718:	1cfb      	adds	r3, r7, #3
   1471a:	781b      	ldrb	r3, [r3, #0]
   1471c:	2b02      	cmp	r3, #2
   1471e:	d104      	bne.n	1472a <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14720:	2317      	movs	r3, #23
   14722:	18fb      	adds	r3, r7, r3
   14724:	2203      	movs	r2, #3
   14726:	701a      	strb	r2, [r3, #0]
            break;
   14728:	e035      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1472a:	2317      	movs	r3, #23
   1472c:	18fb      	adds	r3, r7, r3
   1472e:	1cfa      	adds	r2, r7, #3
   14730:	7812      	ldrb	r2, [r2, #0]
   14732:	701a      	strb	r2, [r3, #0]
            break;
   14734:	e02f      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14736:	1cfb      	adds	r3, r7, #3
   14738:	781b      	ldrb	r3, [r3, #0]
   1473a:	2b00      	cmp	r3, #0
   1473c:	d104      	bne.n	14748 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   1473e:	2317      	movs	r3, #23
   14740:	18fb      	adds	r3, r7, r3
   14742:	2204      	movs	r2, #4
   14744:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14746:	e026      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14748:	1cfb      	adds	r3, r7, #3
   1474a:	781b      	ldrb	r3, [r3, #0]
   1474c:	2b01      	cmp	r3, #1
   1474e:	d104      	bne.n	1475a <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14750:	2317      	movs	r3, #23
   14752:	18fb      	adds	r3, r7, r3
   14754:	2204      	movs	r2, #4
   14756:	701a      	strb	r2, [r3, #0]
            break;
   14758:	e01d      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   1475a:	1cfb      	adds	r3, r7, #3
   1475c:	781b      	ldrb	r3, [r3, #0]
   1475e:	2b02      	cmp	r3, #2
   14760:	d104      	bne.n	1476c <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14762:	2317      	movs	r3, #23
   14764:	18fb      	adds	r3, r7, r3
   14766:	2204      	movs	r2, #4
   14768:	701a      	strb	r2, [r3, #0]
            break;
   1476a:	e014      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   1476c:	1cfb      	adds	r3, r7, #3
   1476e:	781b      	ldrb	r3, [r3, #0]
   14770:	2b03      	cmp	r3, #3
   14772:	d104      	bne.n	1477e <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14774:	2317      	movs	r3, #23
   14776:	18fb      	adds	r3, r7, r3
   14778:	2204      	movs	r2, #4
   1477a:	701a      	strb	r2, [r3, #0]
            break;
   1477c:	e00b      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1477e:	2317      	movs	r3, #23
   14780:	18fb      	adds	r3, r7, r3
   14782:	1cfa      	adds	r2, r7, #3
   14784:	7812      	ldrb	r2, [r2, #0]
   14786:	701a      	strb	r2, [r3, #0]
            break;
   14788:	e005      	b.n	14796 <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   1478a:	2317      	movs	r3, #23
   1478c:	18fb      	adds	r3, r7, r3
   1478e:	1cfa      	adds	r2, r7, #3
   14790:	7812      	ldrb	r2, [r2, #0]
   14792:	701a      	strb	r2, [r3, #0]
            break;
   14794:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   14796:	693b      	ldr	r3, [r7, #16]
   14798:	2b00      	cmp	r3, #0
   1479a:	d108      	bne.n	147ae <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1479c:	2308      	movs	r3, #8
   1479e:	18fa      	adds	r2, r7, r3
   147a0:	6878      	ldr	r0, [r7, #4]
   147a2:	2301      	movs	r3, #1
   147a4:	2110      	movs	r1, #16
   147a6:	4c14      	ldr	r4, [pc, #80]	; (147f8 <lsm6dso_xl_data_rate_set+0x2bc>)
   147a8:	47a0      	blx	r4
   147aa:	0003      	movs	r3, r0
   147ac:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   147ae:	693b      	ldr	r3, [r7, #16]
   147b0:	2b00      	cmp	r3, #0
   147b2:	d118      	bne.n	147e6 <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   147b4:	2317      	movs	r3, #23
   147b6:	18fb      	adds	r3, r7, r3
   147b8:	781b      	ldrb	r3, [r3, #0]
   147ba:	220f      	movs	r2, #15
   147bc:	4013      	ands	r3, r2
   147be:	b2da      	uxtb	r2, r3
   147c0:	2308      	movs	r3, #8
   147c2:	18fb      	adds	r3, r7, r3
   147c4:	0110      	lsls	r0, r2, #4
   147c6:	781a      	ldrb	r2, [r3, #0]
   147c8:	210f      	movs	r1, #15
   147ca:	400a      	ands	r2, r1
   147cc:	1c11      	adds	r1, r2, #0
   147ce:	1c02      	adds	r2, r0, #0
   147d0:	430a      	orrs	r2, r1
   147d2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   147d4:	2308      	movs	r3, #8
   147d6:	18fa      	adds	r2, r7, r3
   147d8:	6878      	ldr	r0, [r7, #4]
   147da:	2301      	movs	r3, #1
   147dc:	2110      	movs	r1, #16
   147de:	4c07      	ldr	r4, [pc, #28]	; (147fc <lsm6dso_xl_data_rate_set+0x2c0>)
   147e0:	47a0      	blx	r4
   147e2:	0003      	movs	r3, r0
   147e4:	613b      	str	r3, [r7, #16]
  }

  return ret;
   147e6:	693b      	ldr	r3, [r7, #16]
}
   147e8:	0018      	movs	r0, r3
   147ea:	46bd      	mov	sp, r7
   147ec:	b007      	add	sp, #28
   147ee:	bd90      	pop	{r4, r7, pc}
   147f0:	00015019 	.word	0x00015019
   147f4:	0001506d 	.word	0x0001506d
   147f8:	0001440d 	.word	0x0001440d
   147fc:	00014453 	.word	0x00014453

00014800 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   14800:	b590      	push	{r4, r7, lr}
   14802:	b085      	sub	sp, #20
   14804:	af00      	add	r7, sp, #0
   14806:	6078      	str	r0, [r7, #4]
   14808:	000a      	movs	r2, r1
   1480a:	1cfb      	adds	r3, r7, #3
   1480c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1480e:	2308      	movs	r3, #8
   14810:	18fa      	adds	r2, r7, r3
   14812:	6878      	ldr	r0, [r7, #4]
   14814:	2301      	movs	r3, #1
   14816:	2111      	movs	r1, #17
   14818:	4c12      	ldr	r4, [pc, #72]	; (14864 <lsm6dso_gy_full_scale_set+0x64>)
   1481a:	47a0      	blx	r4
   1481c:	0003      	movs	r3, r0
   1481e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14820:	68fb      	ldr	r3, [r7, #12]
   14822:	2b00      	cmp	r3, #0
   14824:	d119      	bne.n	1485a <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   14826:	1cfb      	adds	r3, r7, #3
   14828:	781b      	ldrb	r3, [r3, #0]
   1482a:	2207      	movs	r2, #7
   1482c:	4013      	ands	r3, r2
   1482e:	b2da      	uxtb	r2, r3
   14830:	2308      	movs	r3, #8
   14832:	18fb      	adds	r3, r7, r3
   14834:	2107      	movs	r1, #7
   14836:	400a      	ands	r2, r1
   14838:	1890      	adds	r0, r2, r2
   1483a:	781a      	ldrb	r2, [r3, #0]
   1483c:	210e      	movs	r1, #14
   1483e:	438a      	bics	r2, r1
   14840:	1c11      	adds	r1, r2, #0
   14842:	1c02      	adds	r2, r0, #0
   14844:	430a      	orrs	r2, r1
   14846:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14848:	2308      	movs	r3, #8
   1484a:	18fa      	adds	r2, r7, r3
   1484c:	6878      	ldr	r0, [r7, #4]
   1484e:	2301      	movs	r3, #1
   14850:	2111      	movs	r1, #17
   14852:	4c05      	ldr	r4, [pc, #20]	; (14868 <lsm6dso_gy_full_scale_set+0x68>)
   14854:	47a0      	blx	r4
   14856:	0003      	movs	r3, r0
   14858:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1485a:	68fb      	ldr	r3, [r7, #12]
}
   1485c:	0018      	movs	r0, r3
   1485e:	46bd      	mov	sp, r7
   14860:	b005      	add	sp, #20
   14862:	bd90      	pop	{r4, r7, pc}
   14864:	0001440d 	.word	0x0001440d
   14868:	00014453 	.word	0x00014453

0001486c <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   1486c:	b590      	push	{r4, r7, lr}
   1486e:	b087      	sub	sp, #28
   14870:	af00      	add	r7, sp, #0
   14872:	6078      	str	r0, [r7, #4]
   14874:	000a      	movs	r2, r1
   14876:	1cfb      	adds	r3, r7, #3
   14878:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   1487a:	2317      	movs	r3, #23
   1487c:	18fb      	adds	r3, r7, r3
   1487e:	1cfa      	adds	r2, r7, #3
   14880:	7812      	ldrb	r2, [r2, #0]
   14882:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   14884:	230c      	movs	r3, #12
   14886:	18fa      	adds	r2, r7, r3
   14888:	687b      	ldr	r3, [r7, #4]
   1488a:	0011      	movs	r1, r2
   1488c:	0018      	movs	r0, r3
   1488e:	4ba4      	ldr	r3, [pc, #656]	; (14b20 <lsm6dso_gy_data_rate_set+0x2b4>)
   14890:	4798      	blx	r3
   14892:	0003      	movs	r3, r0
   14894:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   14896:	693b      	ldr	r3, [r7, #16]
   14898:	2b00      	cmp	r3, #0
   1489a:	d000      	beq.n	1489e <lsm6dso_gy_data_rate_set+0x32>
   1489c:	e113      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1489e:	230c      	movs	r3, #12
   148a0:	18fb      	adds	r3, r7, r3
   148a2:	781b      	ldrb	r3, [r3, #0]
   148a4:	07db      	lsls	r3, r3, #31
   148a6:	0fdb      	lsrs	r3, r3, #31
   148a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   148aa:	230c      	movs	r3, #12
   148ac:	18fb      	adds	r3, r7, r3
   148ae:	781b      	ldrb	r3, [r3, #0]
   148b0:	079b      	lsls	r3, r3, #30
   148b2:	0fdb      	lsrs	r3, r3, #31
   148b4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   148b6:	4313      	orrs	r3, r2
   148b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   148ba:	230c      	movs	r3, #12
   148bc:	18fb      	adds	r3, r7, r3
   148be:	781b      	ldrb	r3, [r3, #0]
   148c0:	075b      	lsls	r3, r3, #29
   148c2:	0fdb      	lsrs	r3, r3, #31
   148c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   148c6:	4313      	orrs	r3, r2
   148c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   148ca:	230c      	movs	r3, #12
   148cc:	18fb      	adds	r3, r7, r3
   148ce:	781b      	ldrb	r3, [r3, #0]
   148d0:	071b      	lsls	r3, r3, #28
   148d2:	0fdb      	lsrs	r3, r3, #31
   148d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   148d6:	4313      	orrs	r3, r2
   148d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   148da:	230c      	movs	r3, #12
   148dc:	18fb      	adds	r3, r7, r3
   148de:	781b      	ldrb	r3, [r3, #0]
   148e0:	06db      	lsls	r3, r3, #27
   148e2:	0fdb      	lsrs	r3, r3, #31
   148e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   148e6:	4313      	orrs	r3, r2
   148e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   148ea:	230c      	movs	r3, #12
   148ec:	18fb      	adds	r3, r7, r3
   148ee:	781b      	ldrb	r3, [r3, #0]
   148f0:	069b      	lsls	r3, r3, #26
   148f2:	0fdb      	lsrs	r3, r3, #31
   148f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   148f6:	4313      	orrs	r3, r2
   148f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   148fa:	230c      	movs	r3, #12
   148fc:	18fb      	adds	r3, r7, r3
   148fe:	781b      	ldrb	r3, [r3, #0]
   14900:	065b      	lsls	r3, r3, #25
   14902:	0fdb      	lsrs	r3, r3, #31
   14904:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14906:	4313      	orrs	r3, r2
   14908:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1490a:	230c      	movs	r3, #12
   1490c:	18fb      	adds	r3, r7, r3
   1490e:	781b      	ldrb	r3, [r3, #0]
   14910:	061b      	lsls	r3, r3, #24
   14912:	0fdb      	lsrs	r3, r3, #31
   14914:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14916:	4313      	orrs	r3, r2
   14918:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1491a:	230c      	movs	r3, #12
   1491c:	18fb      	adds	r3, r7, r3
   1491e:	785b      	ldrb	r3, [r3, #1]
   14920:	07db      	lsls	r3, r3, #31
   14922:	0fdb      	lsrs	r3, r3, #31
   14924:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14926:	4313      	orrs	r3, r2
   14928:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1492a:	230c      	movs	r3, #12
   1492c:	18fb      	adds	r3, r7, r3
   1492e:	785b      	ldrb	r3, [r3, #1]
   14930:	079b      	lsls	r3, r3, #30
   14932:	0fdb      	lsrs	r3, r3, #31
   14934:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14936:	4313      	orrs	r3, r2
   14938:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1493a:	230c      	movs	r3, #12
   1493c:	18fb      	adds	r3, r7, r3
   1493e:	785b      	ldrb	r3, [r3, #1]
   14940:	075b      	lsls	r3, r3, #29
   14942:	0fdb      	lsrs	r3, r3, #31
   14944:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14946:	4313      	orrs	r3, r2
   14948:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1494a:	230c      	movs	r3, #12
   1494c:	18fb      	adds	r3, r7, r3
   1494e:	785b      	ldrb	r3, [r3, #1]
   14950:	071b      	lsls	r3, r3, #28
   14952:	0fdb      	lsrs	r3, r3, #31
   14954:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14956:	4313      	orrs	r3, r2
   14958:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1495a:	230c      	movs	r3, #12
   1495c:	18fb      	adds	r3, r7, r3
   1495e:	785b      	ldrb	r3, [r3, #1]
   14960:	06db      	lsls	r3, r3, #27
   14962:	0fdb      	lsrs	r3, r3, #31
   14964:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14966:	4313      	orrs	r3, r2
   14968:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1496a:	230c      	movs	r3, #12
   1496c:	18fb      	adds	r3, r7, r3
   1496e:	785b      	ldrb	r3, [r3, #1]
   14970:	069b      	lsls	r3, r3, #26
   14972:	0fdb      	lsrs	r3, r3, #31
   14974:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14976:	4313      	orrs	r3, r2
   14978:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1497a:	230c      	movs	r3, #12
   1497c:	18fb      	adds	r3, r7, r3
   1497e:	785b      	ldrb	r3, [r3, #1]
   14980:	065b      	lsls	r3, r3, #25
   14982:	0fdb      	lsrs	r3, r3, #31
   14984:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14986:	4313      	orrs	r3, r2
   14988:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   1498a:	230c      	movs	r3, #12
   1498c:	18fb      	adds	r3, r7, r3
   1498e:	785b      	ldrb	r3, [r3, #1]
   14990:	061b      	lsls	r3, r3, #24
   14992:	0fdb      	lsrs	r3, r3, #31
   14994:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14996:	4313      	orrs	r3, r2
   14998:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1499a:	2b01      	cmp	r3, #1
   1499c:	d000      	beq.n	149a0 <lsm6dso_gy_data_rate_set+0x134>
   1499e:	e092      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   149a0:	230b      	movs	r3, #11
   149a2:	18fa      	adds	r2, r7, r3
   149a4:	687b      	ldr	r3, [r7, #4]
   149a6:	0011      	movs	r1, r2
   149a8:	0018      	movs	r0, r3
   149aa:	4b5e      	ldr	r3, [pc, #376]	; (14b24 <lsm6dso_gy_data_rate_set+0x2b8>)
   149ac:	4798      	blx	r3
   149ae:	0003      	movs	r3, r0
   149b0:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   149b2:	693b      	ldr	r3, [r7, #16]
   149b4:	2b00      	cmp	r3, #0
   149b6:	d000      	beq.n	149ba <lsm6dso_gy_data_rate_set+0x14e>
   149b8:	e085      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   149ba:	230b      	movs	r3, #11
   149bc:	18fb      	adds	r3, r7, r3
   149be:	781b      	ldrb	r3, [r3, #0]
   149c0:	2b01      	cmp	r3, #1
   149c2:	d017      	beq.n	149f4 <lsm6dso_gy_data_rate_set+0x188>
   149c4:	dc02      	bgt.n	149cc <lsm6dso_gy_data_rate_set+0x160>
   149c6:	2b00      	cmp	r3, #0
   149c8:	d005      	beq.n	149d6 <lsm6dso_gy_data_rate_set+0x16a>
   149ca:	e076      	b.n	14aba <lsm6dso_gy_data_rate_set+0x24e>
   149cc:	2b02      	cmp	r3, #2
   149ce:	d029      	beq.n	14a24 <lsm6dso_gy_data_rate_set+0x1b8>
   149d0:	2b03      	cmp	r3, #3
   149d2:	d048      	beq.n	14a66 <lsm6dso_gy_data_rate_set+0x1fa>
   149d4:	e071      	b.n	14aba <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   149d6:	1cfb      	adds	r3, r7, #3
   149d8:	781b      	ldrb	r3, [r3, #0]
   149da:	2b00      	cmp	r3, #0
   149dc:	d104      	bne.n	149e8 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   149de:	2317      	movs	r3, #23
   149e0:	18fb      	adds	r3, r7, r3
   149e2:	2201      	movs	r2, #1
   149e4:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   149e6:	e06e      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   149e8:	2317      	movs	r3, #23
   149ea:	18fb      	adds	r3, r7, r3
   149ec:	1cfa      	adds	r2, r7, #3
   149ee:	7812      	ldrb	r2, [r2, #0]
   149f0:	701a      	strb	r2, [r3, #0]
            break;
   149f2:	e068      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   149f4:	1cfb      	adds	r3, r7, #3
   149f6:	781b      	ldrb	r3, [r3, #0]
   149f8:	2b00      	cmp	r3, #0
   149fa:	d104      	bne.n	14a06 <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   149fc:	2317      	movs	r3, #23
   149fe:	18fb      	adds	r3, r7, r3
   14a00:	2202      	movs	r2, #2
   14a02:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   14a04:	e05f      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   14a06:	1cfb      	adds	r3, r7, #3
   14a08:	781b      	ldrb	r3, [r3, #0]
   14a0a:	2b01      	cmp	r3, #1
   14a0c:	d104      	bne.n	14a18 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   14a0e:	2317      	movs	r3, #23
   14a10:	18fb      	adds	r3, r7, r3
   14a12:	2202      	movs	r2, #2
   14a14:	701a      	strb	r2, [r3, #0]
            break;
   14a16:	e056      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   14a18:	2317      	movs	r3, #23
   14a1a:	18fb      	adds	r3, r7, r3
   14a1c:	1cfa      	adds	r2, r7, #3
   14a1e:	7812      	ldrb	r2, [r2, #0]
   14a20:	701a      	strb	r2, [r3, #0]
            break;
   14a22:	e050      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   14a24:	1cfb      	adds	r3, r7, #3
   14a26:	781b      	ldrb	r3, [r3, #0]
   14a28:	2b00      	cmp	r3, #0
   14a2a:	d104      	bne.n	14a36 <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   14a2c:	2317      	movs	r3, #23
   14a2e:	18fb      	adds	r3, r7, r3
   14a30:	2203      	movs	r2, #3
   14a32:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   14a34:	e047      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   14a36:	1cfb      	adds	r3, r7, #3
   14a38:	781b      	ldrb	r3, [r3, #0]
   14a3a:	2b01      	cmp	r3, #1
   14a3c:	d104      	bne.n	14a48 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   14a3e:	2317      	movs	r3, #23
   14a40:	18fb      	adds	r3, r7, r3
   14a42:	2203      	movs	r2, #3
   14a44:	701a      	strb	r2, [r3, #0]
            break;
   14a46:	e03e      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   14a48:	1cfb      	adds	r3, r7, #3
   14a4a:	781b      	ldrb	r3, [r3, #0]
   14a4c:	2b02      	cmp	r3, #2
   14a4e:	d104      	bne.n	14a5a <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   14a50:	2317      	movs	r3, #23
   14a52:	18fb      	adds	r3, r7, r3
   14a54:	2203      	movs	r2, #3
   14a56:	701a      	strb	r2, [r3, #0]
            break;
   14a58:	e035      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   14a5a:	2317      	movs	r3, #23
   14a5c:	18fb      	adds	r3, r7, r3
   14a5e:	1cfa      	adds	r2, r7, #3
   14a60:	7812      	ldrb	r2, [r2, #0]
   14a62:	701a      	strb	r2, [r3, #0]
            break;
   14a64:	e02f      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   14a66:	1cfb      	adds	r3, r7, #3
   14a68:	781b      	ldrb	r3, [r3, #0]
   14a6a:	2b00      	cmp	r3, #0
   14a6c:	d104      	bne.n	14a78 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   14a6e:	2317      	movs	r3, #23
   14a70:	18fb      	adds	r3, r7, r3
   14a72:	2204      	movs	r2, #4
   14a74:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   14a76:	e026      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   14a78:	1cfb      	adds	r3, r7, #3
   14a7a:	781b      	ldrb	r3, [r3, #0]
   14a7c:	2b01      	cmp	r3, #1
   14a7e:	d104      	bne.n	14a8a <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   14a80:	2317      	movs	r3, #23
   14a82:	18fb      	adds	r3, r7, r3
   14a84:	2204      	movs	r2, #4
   14a86:	701a      	strb	r2, [r3, #0]
            break;
   14a88:	e01d      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   14a8a:	1cfb      	adds	r3, r7, #3
   14a8c:	781b      	ldrb	r3, [r3, #0]
   14a8e:	2b02      	cmp	r3, #2
   14a90:	d104      	bne.n	14a9c <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   14a92:	2317      	movs	r3, #23
   14a94:	18fb      	adds	r3, r7, r3
   14a96:	2204      	movs	r2, #4
   14a98:	701a      	strb	r2, [r3, #0]
            break;
   14a9a:	e014      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   14a9c:	1cfb      	adds	r3, r7, #3
   14a9e:	781b      	ldrb	r3, [r3, #0]
   14aa0:	2b03      	cmp	r3, #3
   14aa2:	d104      	bne.n	14aae <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   14aa4:	2317      	movs	r3, #23
   14aa6:	18fb      	adds	r3, r7, r3
   14aa8:	2204      	movs	r2, #4
   14aaa:	701a      	strb	r2, [r3, #0]
            break;
   14aac:	e00b      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   14aae:	2317      	movs	r3, #23
   14ab0:	18fb      	adds	r3, r7, r3
   14ab2:	1cfa      	adds	r2, r7, #3
   14ab4:	7812      	ldrb	r2, [r2, #0]
   14ab6:	701a      	strb	r2, [r3, #0]
            break;
   14ab8:	e005      	b.n	14ac6 <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   14aba:	2317      	movs	r3, #23
   14abc:	18fb      	adds	r3, r7, r3
   14abe:	1cfa      	adds	r2, r7, #3
   14ac0:	7812      	ldrb	r2, [r2, #0]
   14ac2:	701a      	strb	r2, [r3, #0]
            break;
   14ac4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   14ac6:	693b      	ldr	r3, [r7, #16]
   14ac8:	2b00      	cmp	r3, #0
   14aca:	d108      	bne.n	14ade <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14acc:	2308      	movs	r3, #8
   14ace:	18fa      	adds	r2, r7, r3
   14ad0:	6878      	ldr	r0, [r7, #4]
   14ad2:	2301      	movs	r3, #1
   14ad4:	2111      	movs	r1, #17
   14ad6:	4c14      	ldr	r4, [pc, #80]	; (14b28 <lsm6dso_gy_data_rate_set+0x2bc>)
   14ad8:	47a0      	blx	r4
   14ada:	0003      	movs	r3, r0
   14adc:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   14ade:	693b      	ldr	r3, [r7, #16]
   14ae0:	2b00      	cmp	r3, #0
   14ae2:	d118      	bne.n	14b16 <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   14ae4:	2317      	movs	r3, #23
   14ae6:	18fb      	adds	r3, r7, r3
   14ae8:	781b      	ldrb	r3, [r3, #0]
   14aea:	220f      	movs	r2, #15
   14aec:	4013      	ands	r3, r2
   14aee:	b2da      	uxtb	r2, r3
   14af0:	2308      	movs	r3, #8
   14af2:	18fb      	adds	r3, r7, r3
   14af4:	0110      	lsls	r0, r2, #4
   14af6:	781a      	ldrb	r2, [r3, #0]
   14af8:	210f      	movs	r1, #15
   14afa:	400a      	ands	r2, r1
   14afc:	1c11      	adds	r1, r2, #0
   14afe:	1c02      	adds	r2, r0, #0
   14b00:	430a      	orrs	r2, r1
   14b02:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14b04:	2308      	movs	r3, #8
   14b06:	18fa      	adds	r2, r7, r3
   14b08:	6878      	ldr	r0, [r7, #4]
   14b0a:	2301      	movs	r3, #1
   14b0c:	2111      	movs	r1, #17
   14b0e:	4c07      	ldr	r4, [pc, #28]	; (14b2c <lsm6dso_gy_data_rate_set+0x2c0>)
   14b10:	47a0      	blx	r4
   14b12:	0003      	movs	r3, r0
   14b14:	613b      	str	r3, [r7, #16]
  }

  return ret;
   14b16:	693b      	ldr	r3, [r7, #16]
}
   14b18:	0018      	movs	r0, r3
   14b1a:	46bd      	mov	sp, r7
   14b1c:	b007      	add	sp, #28
   14b1e:	bd90      	pop	{r4, r7, pc}
   14b20:	00015019 	.word	0x00015019
   14b24:	0001506d 	.word	0x0001506d
   14b28:	0001440d 	.word	0x0001440d
   14b2c:	00014453 	.word	0x00014453

00014b30 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   14b30:	b590      	push	{r4, r7, lr}
   14b32:	b085      	sub	sp, #20
   14b34:	af00      	add	r7, sp, #0
   14b36:	6078      	str	r0, [r7, #4]
   14b38:	000a      	movs	r2, r1
   14b3a:	1cfb      	adds	r3, r7, #3
   14b3c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14b3e:	2308      	movs	r3, #8
   14b40:	18fa      	adds	r2, r7, r3
   14b42:	6878      	ldr	r0, [r7, #4]
   14b44:	2301      	movs	r3, #1
   14b46:	2112      	movs	r1, #18
   14b48:	4c12      	ldr	r4, [pc, #72]	; (14b94 <lsm6dso_block_data_update_set+0x64>)
   14b4a:	47a0      	blx	r4
   14b4c:	0003      	movs	r3, r0
   14b4e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14b50:	68fb      	ldr	r3, [r7, #12]
   14b52:	2b00      	cmp	r3, #0
   14b54:	d119      	bne.n	14b8a <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   14b56:	1cfb      	adds	r3, r7, #3
   14b58:	781b      	ldrb	r3, [r3, #0]
   14b5a:	2201      	movs	r2, #1
   14b5c:	4013      	ands	r3, r2
   14b5e:	b2da      	uxtb	r2, r3
   14b60:	2308      	movs	r3, #8
   14b62:	18fb      	adds	r3, r7, r3
   14b64:	2101      	movs	r1, #1
   14b66:	400a      	ands	r2, r1
   14b68:	0190      	lsls	r0, r2, #6
   14b6a:	781a      	ldrb	r2, [r3, #0]
   14b6c:	2140      	movs	r1, #64	; 0x40
   14b6e:	438a      	bics	r2, r1
   14b70:	1c11      	adds	r1, r2, #0
   14b72:	1c02      	adds	r2, r0, #0
   14b74:	430a      	orrs	r2, r1
   14b76:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14b78:	2308      	movs	r3, #8
   14b7a:	18fa      	adds	r2, r7, r3
   14b7c:	6878      	ldr	r0, [r7, #4]
   14b7e:	2301      	movs	r3, #1
   14b80:	2112      	movs	r1, #18
   14b82:	4c05      	ldr	r4, [pc, #20]	; (14b98 <lsm6dso_block_data_update_set+0x68>)
   14b84:	47a0      	blx	r4
   14b86:	0003      	movs	r3, r0
   14b88:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14b8a:	68fb      	ldr	r3, [r7, #12]
}
   14b8c:	0018      	movs	r0, r3
   14b8e:	46bd      	mov	sp, r7
   14b90:	b005      	add	sp, #20
   14b92:	bd90      	pop	{r4, r7, pc}
   14b94:	0001440d 	.word	0x0001440d
   14b98:	00014453 	.word	0x00014453

00014b9c <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   14b9c:	b590      	push	{r4, r7, lr}
   14b9e:	b085      	sub	sp, #20
   14ba0:	af00      	add	r7, sp, #0
   14ba2:	6078      	str	r0, [r7, #4]
   14ba4:	000a      	movs	r2, r1
   14ba6:	1cfb      	adds	r3, r7, #3
   14ba8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   14baa:	2308      	movs	r3, #8
   14bac:	18fa      	adds	r2, r7, r3
   14bae:	6878      	ldr	r0, [r7, #4]
   14bb0:	2301      	movs	r3, #1
   14bb2:	2115      	movs	r1, #21
   14bb4:	4c12      	ldr	r4, [pc, #72]	; (14c00 <lsm6dso_xl_offset_weight_set+0x64>)
   14bb6:	47a0      	blx	r4
   14bb8:	0003      	movs	r3, r0
   14bba:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14bbc:	68fb      	ldr	r3, [r7, #12]
   14bbe:	2b00      	cmp	r3, #0
   14bc0:	d119      	bne.n	14bf6 <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   14bc2:	1cfb      	adds	r3, r7, #3
   14bc4:	781b      	ldrb	r3, [r3, #0]
   14bc6:	2201      	movs	r2, #1
   14bc8:	4013      	ands	r3, r2
   14bca:	b2da      	uxtb	r2, r3
   14bcc:	2308      	movs	r3, #8
   14bce:	18fb      	adds	r3, r7, r3
   14bd0:	2101      	movs	r1, #1
   14bd2:	400a      	ands	r2, r1
   14bd4:	00d0      	lsls	r0, r2, #3
   14bd6:	781a      	ldrb	r2, [r3, #0]
   14bd8:	2108      	movs	r1, #8
   14bda:	438a      	bics	r2, r1
   14bdc:	1c11      	adds	r1, r2, #0
   14bde:	1c02      	adds	r2, r0, #0
   14be0:	430a      	orrs	r2, r1
   14be2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   14be4:	2308      	movs	r3, #8
   14be6:	18fa      	adds	r2, r7, r3
   14be8:	6878      	ldr	r0, [r7, #4]
   14bea:	2301      	movs	r3, #1
   14bec:	2115      	movs	r1, #21
   14bee:	4c05      	ldr	r4, [pc, #20]	; (14c04 <lsm6dso_xl_offset_weight_set+0x68>)
   14bf0:	47a0      	blx	r4
   14bf2:	0003      	movs	r3, r0
   14bf4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14bf6:	68fb      	ldr	r3, [r7, #12]
}
   14bf8:	0018      	movs	r0, r3
   14bfa:	46bd      	mov	sp, r7
   14bfc:	b005      	add	sp, #20
   14bfe:	bd90      	pop	{r4, r7, pc}
   14c00:	0001440d 	.word	0x0001440d
   14c04:	00014453 	.word	0x00014453

00014c08 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   14c08:	b590      	push	{r4, r7, lr}
   14c0a:	b085      	sub	sp, #20
   14c0c:	af00      	add	r7, sp, #0
   14c0e:	6078      	str	r0, [r7, #4]
   14c10:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   14c12:	2308      	movs	r3, #8
   14c14:	18fa      	adds	r2, r7, r3
   14c16:	6878      	ldr	r0, [r7, #4]
   14c18:	2301      	movs	r3, #1
   14c1a:	211e      	movs	r1, #30
   14c1c:	4c08      	ldr	r4, [pc, #32]	; (14c40 <lsm6dso_xl_flag_data_ready_get+0x38>)
   14c1e:	47a0      	blx	r4
   14c20:	0003      	movs	r3, r0
   14c22:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   14c24:	2308      	movs	r3, #8
   14c26:	18fb      	adds	r3, r7, r3
   14c28:	781b      	ldrb	r3, [r3, #0]
   14c2a:	07db      	lsls	r3, r3, #31
   14c2c:	0fdb      	lsrs	r3, r3, #31
   14c2e:	b2db      	uxtb	r3, r3
   14c30:	001a      	movs	r2, r3
   14c32:	683b      	ldr	r3, [r7, #0]
   14c34:	701a      	strb	r2, [r3, #0]

  return ret;
   14c36:	68fb      	ldr	r3, [r7, #12]
}
   14c38:	0018      	movs	r0, r3
   14c3a:	46bd      	mov	sp, r7
   14c3c:	b005      	add	sp, #20
   14c3e:	bd90      	pop	{r4, r7, pc}
   14c40:	0001440d 	.word	0x0001440d

00014c44 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   14c44:	b590      	push	{r4, r7, lr}
   14c46:	b087      	sub	sp, #28
   14c48:	af00      	add	r7, sp, #0
   14c4a:	6078      	str	r0, [r7, #4]
   14c4c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   14c4e:	230c      	movs	r3, #12
   14c50:	18fa      	adds	r2, r7, r3
   14c52:	6878      	ldr	r0, [r7, #4]
   14c54:	2306      	movs	r3, #6
   14c56:	2128      	movs	r1, #40	; 0x28
   14c58:	4c26      	ldr	r4, [pc, #152]	; (14cf4 <lsm6dso_acceleration_raw_get+0xb0>)
   14c5a:	47a0      	blx	r4
   14c5c:	0003      	movs	r3, r0
   14c5e:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   14c60:	230c      	movs	r3, #12
   14c62:	18fb      	adds	r3, r7, r3
   14c64:	785b      	ldrb	r3, [r3, #1]
   14c66:	b21a      	sxth	r2, r3
   14c68:	683b      	ldr	r3, [r7, #0]
   14c6a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   14c6c:	683b      	ldr	r3, [r7, #0]
   14c6e:	2200      	movs	r2, #0
   14c70:	5e9b      	ldrsh	r3, [r3, r2]
   14c72:	b29b      	uxth	r3, r3
   14c74:	021b      	lsls	r3, r3, #8
   14c76:	b29a      	uxth	r2, r3
   14c78:	230c      	movs	r3, #12
   14c7a:	18fb      	adds	r3, r7, r3
   14c7c:	781b      	ldrb	r3, [r3, #0]
   14c7e:	b29b      	uxth	r3, r3
   14c80:	18d3      	adds	r3, r2, r3
   14c82:	b29b      	uxth	r3, r3
   14c84:	b21a      	sxth	r2, r3
   14c86:	683b      	ldr	r3, [r7, #0]
   14c88:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   14c8a:	683b      	ldr	r3, [r7, #0]
   14c8c:	3302      	adds	r3, #2
   14c8e:	220c      	movs	r2, #12
   14c90:	18ba      	adds	r2, r7, r2
   14c92:	78d2      	ldrb	r2, [r2, #3]
   14c94:	b212      	sxth	r2, r2
   14c96:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   14c98:	683b      	ldr	r3, [r7, #0]
   14c9a:	3302      	adds	r3, #2
   14c9c:	683a      	ldr	r2, [r7, #0]
   14c9e:	3202      	adds	r2, #2
   14ca0:	2100      	movs	r1, #0
   14ca2:	5e52      	ldrsh	r2, [r2, r1]
   14ca4:	b292      	uxth	r2, r2
   14ca6:	0212      	lsls	r2, r2, #8
   14ca8:	b291      	uxth	r1, r2
   14caa:	220c      	movs	r2, #12
   14cac:	18ba      	adds	r2, r7, r2
   14cae:	7892      	ldrb	r2, [r2, #2]
   14cb0:	b292      	uxth	r2, r2
   14cb2:	188a      	adds	r2, r1, r2
   14cb4:	b292      	uxth	r2, r2
   14cb6:	b212      	sxth	r2, r2
   14cb8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   14cba:	683b      	ldr	r3, [r7, #0]
   14cbc:	3304      	adds	r3, #4
   14cbe:	220c      	movs	r2, #12
   14cc0:	18ba      	adds	r2, r7, r2
   14cc2:	7952      	ldrb	r2, [r2, #5]
   14cc4:	b212      	sxth	r2, r2
   14cc6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   14cc8:	683b      	ldr	r3, [r7, #0]
   14cca:	3304      	adds	r3, #4
   14ccc:	683a      	ldr	r2, [r7, #0]
   14cce:	3204      	adds	r2, #4
   14cd0:	2100      	movs	r1, #0
   14cd2:	5e52      	ldrsh	r2, [r2, r1]
   14cd4:	b292      	uxth	r2, r2
   14cd6:	0212      	lsls	r2, r2, #8
   14cd8:	b291      	uxth	r1, r2
   14cda:	220c      	movs	r2, #12
   14cdc:	18ba      	adds	r2, r7, r2
   14cde:	7912      	ldrb	r2, [r2, #4]
   14ce0:	b292      	uxth	r2, r2
   14ce2:	188a      	adds	r2, r1, r2
   14ce4:	b292      	uxth	r2, r2
   14ce6:	b212      	sxth	r2, r2
   14ce8:	801a      	strh	r2, [r3, #0]

  return ret;
   14cea:	697b      	ldr	r3, [r7, #20]
}
   14cec:	0018      	movs	r0, r3
   14cee:	46bd      	mov	sp, r7
   14cf0:	b007      	add	sp, #28
   14cf2:	bd90      	pop	{r4, r7, pc}
   14cf4:	0001440d 	.word	0x0001440d

00014cf8 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   14cf8:	b590      	push	{r4, r7, lr}
   14cfa:	b085      	sub	sp, #20
   14cfc:	af00      	add	r7, sp, #0
   14cfe:	6078      	str	r0, [r7, #4]
   14d00:	000a      	movs	r2, r1
   14d02:	1cfb      	adds	r3, r7, #3
   14d04:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   14d06:	2308      	movs	r3, #8
   14d08:	18fa      	adds	r2, r7, r3
   14d0a:	6878      	ldr	r0, [r7, #4]
   14d0c:	2301      	movs	r3, #1
   14d0e:	2101      	movs	r1, #1
   14d10:	4c11      	ldr	r4, [pc, #68]	; (14d58 <lsm6dso_mem_bank_set+0x60>)
   14d12:	47a0      	blx	r4
   14d14:	0003      	movs	r3, r0
   14d16:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14d18:	68fb      	ldr	r3, [r7, #12]
   14d1a:	2b00      	cmp	r3, #0
   14d1c:	d117      	bne.n	14d4e <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   14d1e:	1cfb      	adds	r3, r7, #3
   14d20:	781b      	ldrb	r3, [r3, #0]
   14d22:	2203      	movs	r2, #3
   14d24:	4013      	ands	r3, r2
   14d26:	b2da      	uxtb	r2, r3
   14d28:	2308      	movs	r3, #8
   14d2a:	18fb      	adds	r3, r7, r3
   14d2c:	0190      	lsls	r0, r2, #6
   14d2e:	781a      	ldrb	r2, [r3, #0]
   14d30:	213f      	movs	r1, #63	; 0x3f
   14d32:	400a      	ands	r2, r1
   14d34:	1c11      	adds	r1, r2, #0
   14d36:	1c02      	adds	r2, r0, #0
   14d38:	430a      	orrs	r2, r1
   14d3a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   14d3c:	2308      	movs	r3, #8
   14d3e:	18fa      	adds	r2, r7, r3
   14d40:	6878      	ldr	r0, [r7, #4]
   14d42:	2301      	movs	r3, #1
   14d44:	2101      	movs	r1, #1
   14d46:	4c05      	ldr	r4, [pc, #20]	; (14d5c <lsm6dso_mem_bank_set+0x64>)
   14d48:	47a0      	blx	r4
   14d4a:	0003      	movs	r3, r0
   14d4c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14d4e:	68fb      	ldr	r3, [r7, #12]
}
   14d50:	0018      	movs	r0, r3
   14d52:	46bd      	mov	sp, r7
   14d54:	b005      	add	sp, #20
   14d56:	bd90      	pop	{r4, r7, pc}
   14d58:	0001440d 	.word	0x0001440d
   14d5c:	00014453 	.word	0x00014453

00014d60 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   14d60:	b590      	push	{r4, r7, lr}
   14d62:	b085      	sub	sp, #20
   14d64:	af00      	add	r7, sp, #0
   14d66:	6078      	str	r0, [r7, #4]
   14d68:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   14d6a:	683a      	ldr	r2, [r7, #0]
   14d6c:	6878      	ldr	r0, [r7, #4]
   14d6e:	2301      	movs	r3, #1
   14d70:	210f      	movs	r1, #15
   14d72:	4c04      	ldr	r4, [pc, #16]	; (14d84 <lsm6dso_device_id_get+0x24>)
   14d74:	47a0      	blx	r4
   14d76:	0003      	movs	r3, r0
   14d78:	60fb      	str	r3, [r7, #12]

  return ret;
   14d7a:	68fb      	ldr	r3, [r7, #12]
}
   14d7c:	0018      	movs	r0, r3
   14d7e:	46bd      	mov	sp, r7
   14d80:	b005      	add	sp, #20
   14d82:	bd90      	pop	{r4, r7, pc}
   14d84:	0001440d 	.word	0x0001440d

00014d88 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   14d88:	b590      	push	{r4, r7, lr}
   14d8a:	b085      	sub	sp, #20
   14d8c:	af00      	add	r7, sp, #0
   14d8e:	6078      	str	r0, [r7, #4]
   14d90:	000a      	movs	r2, r1
   14d92:	1cfb      	adds	r3, r7, #3
   14d94:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14d96:	2308      	movs	r3, #8
   14d98:	18fa      	adds	r2, r7, r3
   14d9a:	6878      	ldr	r0, [r7, #4]
   14d9c:	2301      	movs	r3, #1
   14d9e:	2112      	movs	r1, #18
   14da0:	4c12      	ldr	r4, [pc, #72]	; (14dec <lsm6dso_reset_set+0x64>)
   14da2:	47a0      	blx	r4
   14da4:	0003      	movs	r3, r0
   14da6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14da8:	68fb      	ldr	r3, [r7, #12]
   14daa:	2b00      	cmp	r3, #0
   14dac:	d119      	bne.n	14de2 <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   14dae:	1cfb      	adds	r3, r7, #3
   14db0:	781b      	ldrb	r3, [r3, #0]
   14db2:	2201      	movs	r2, #1
   14db4:	4013      	ands	r3, r2
   14db6:	b2da      	uxtb	r2, r3
   14db8:	2308      	movs	r3, #8
   14dba:	18fb      	adds	r3, r7, r3
   14dbc:	2101      	movs	r1, #1
   14dbe:	400a      	ands	r2, r1
   14dc0:	0010      	movs	r0, r2
   14dc2:	781a      	ldrb	r2, [r3, #0]
   14dc4:	2101      	movs	r1, #1
   14dc6:	438a      	bics	r2, r1
   14dc8:	1c11      	adds	r1, r2, #0
   14dca:	1c02      	adds	r2, r0, #0
   14dcc:	430a      	orrs	r2, r1
   14dce:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14dd0:	2308      	movs	r3, #8
   14dd2:	18fa      	adds	r2, r7, r3
   14dd4:	6878      	ldr	r0, [r7, #4]
   14dd6:	2301      	movs	r3, #1
   14dd8:	2112      	movs	r1, #18
   14dda:	4c05      	ldr	r4, [pc, #20]	; (14df0 <lsm6dso_reset_set+0x68>)
   14ddc:	47a0      	blx	r4
   14dde:	0003      	movs	r3, r0
   14de0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14de2:	68fb      	ldr	r3, [r7, #12]
}
   14de4:	0018      	movs	r0, r3
   14de6:	46bd      	mov	sp, r7
   14de8:	b005      	add	sp, #20
   14dea:	bd90      	pop	{r4, r7, pc}
   14dec:	0001440d 	.word	0x0001440d
   14df0:	00014453 	.word	0x00014453

00014df4 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   14df4:	b590      	push	{r4, r7, lr}
   14df6:	b085      	sub	sp, #20
   14df8:	af00      	add	r7, sp, #0
   14dfa:	6078      	str	r0, [r7, #4]
   14dfc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14dfe:	2308      	movs	r3, #8
   14e00:	18fa      	adds	r2, r7, r3
   14e02:	6878      	ldr	r0, [r7, #4]
   14e04:	2301      	movs	r3, #1
   14e06:	2112      	movs	r1, #18
   14e08:	4c08      	ldr	r4, [pc, #32]	; (14e2c <lsm6dso_reset_get+0x38>)
   14e0a:	47a0      	blx	r4
   14e0c:	0003      	movs	r3, r0
   14e0e:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   14e10:	2308      	movs	r3, #8
   14e12:	18fb      	adds	r3, r7, r3
   14e14:	781b      	ldrb	r3, [r3, #0]
   14e16:	07db      	lsls	r3, r3, #31
   14e18:	0fdb      	lsrs	r3, r3, #31
   14e1a:	b2db      	uxtb	r3, r3
   14e1c:	001a      	movs	r2, r3
   14e1e:	683b      	ldr	r3, [r7, #0]
   14e20:	701a      	strb	r2, [r3, #0]

  return ret;
   14e22:	68fb      	ldr	r3, [r7, #12]
}
   14e24:	0018      	movs	r0, r3
   14e26:	46bd      	mov	sp, r7
   14e28:	b005      	add	sp, #20
   14e2a:	bd90      	pop	{r4, r7, pc}
   14e2c:	0001440d 	.word	0x0001440d

00014e30 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   14e30:	b590      	push	{r4, r7, lr}
   14e32:	b085      	sub	sp, #20
   14e34:	af00      	add	r7, sp, #0
   14e36:	6078      	str	r0, [r7, #4]
   14e38:	000a      	movs	r2, r1
   14e3a:	1cfb      	adds	r3, r7, #3
   14e3c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14e3e:	2308      	movs	r3, #8
   14e40:	18fa      	adds	r2, r7, r3
   14e42:	6878      	ldr	r0, [r7, #4]
   14e44:	2301      	movs	r3, #1
   14e46:	2110      	movs	r1, #16
   14e48:	4c12      	ldr	r4, [pc, #72]	; (14e94 <lsm6dso_xl_filter_lp2_set+0x64>)
   14e4a:	47a0      	blx	r4
   14e4c:	0003      	movs	r3, r0
   14e4e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14e50:	68fb      	ldr	r3, [r7, #12]
   14e52:	2b00      	cmp	r3, #0
   14e54:	d119      	bne.n	14e8a <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   14e56:	1cfb      	adds	r3, r7, #3
   14e58:	781b      	ldrb	r3, [r3, #0]
   14e5a:	2201      	movs	r2, #1
   14e5c:	4013      	ands	r3, r2
   14e5e:	b2da      	uxtb	r2, r3
   14e60:	2308      	movs	r3, #8
   14e62:	18fb      	adds	r3, r7, r3
   14e64:	2101      	movs	r1, #1
   14e66:	400a      	ands	r2, r1
   14e68:	1890      	adds	r0, r2, r2
   14e6a:	781a      	ldrb	r2, [r3, #0]
   14e6c:	2102      	movs	r1, #2
   14e6e:	438a      	bics	r2, r1
   14e70:	1c11      	adds	r1, r2, #0
   14e72:	1c02      	adds	r2, r0, #0
   14e74:	430a      	orrs	r2, r1
   14e76:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14e78:	2308      	movs	r3, #8
   14e7a:	18fa      	adds	r2, r7, r3
   14e7c:	6878      	ldr	r0, [r7, #4]
   14e7e:	2301      	movs	r3, #1
   14e80:	2110      	movs	r1, #16
   14e82:	4c05      	ldr	r4, [pc, #20]	; (14e98 <lsm6dso_xl_filter_lp2_set+0x68>)
   14e84:	47a0      	blx	r4
   14e86:	0003      	movs	r3, r0
   14e88:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14e8a:	68fb      	ldr	r3, [r7, #12]
}
   14e8c:	0018      	movs	r0, r3
   14e8e:	46bd      	mov	sp, r7
   14e90:	b005      	add	sp, #20
   14e92:	bd90      	pop	{r4, r7, pc}
   14e94:	0001440d 	.word	0x0001440d
   14e98:	00014453 	.word	0x00014453

00014e9c <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   14e9c:	b590      	push	{r4, r7, lr}
   14e9e:	b085      	sub	sp, #20
   14ea0:	af00      	add	r7, sp, #0
   14ea2:	6078      	str	r0, [r7, #4]
   14ea4:	000a      	movs	r2, r1
   14ea6:	1cfb      	adds	r3, r7, #3
   14ea8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   14eaa:	2308      	movs	r3, #8
   14eac:	18fa      	adds	r2, r7, r3
   14eae:	6878      	ldr	r0, [r7, #4]
   14eb0:	2301      	movs	r3, #1
   14eb2:	2117      	movs	r1, #23
   14eb4:	4c25      	ldr	r4, [pc, #148]	; (14f4c <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   14eb6:	47a0      	blx	r4
   14eb8:	0003      	movs	r3, r0
   14eba:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14ebc:	68fb      	ldr	r3, [r7, #12]
   14ebe:	2b00      	cmp	r3, #0
   14ec0:	d13f      	bne.n	14f42 <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   14ec2:	1cfb      	adds	r3, r7, #3
   14ec4:	781b      	ldrb	r3, [r3, #0]
   14ec6:	091b      	lsrs	r3, r3, #4
   14ec8:	b2db      	uxtb	r3, r3
   14eca:	1c1a      	adds	r2, r3, #0
   14ecc:	2301      	movs	r3, #1
   14ece:	4013      	ands	r3, r2
   14ed0:	b2da      	uxtb	r2, r3
   14ed2:	2308      	movs	r3, #8
   14ed4:	18fb      	adds	r3, r7, r3
   14ed6:	2101      	movs	r1, #1
   14ed8:	400a      	ands	r2, r1
   14eda:	0090      	lsls	r0, r2, #2
   14edc:	781a      	ldrb	r2, [r3, #0]
   14ede:	2104      	movs	r1, #4
   14ee0:	438a      	bics	r2, r1
   14ee2:	1c11      	adds	r1, r2, #0
   14ee4:	1c02      	adds	r2, r0, #0
   14ee6:	430a      	orrs	r2, r1
   14ee8:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   14eea:	1cfb      	adds	r3, r7, #3
   14eec:	781b      	ldrb	r3, [r3, #0]
   14eee:	095b      	lsrs	r3, r3, #5
   14ef0:	b2db      	uxtb	r3, r3
   14ef2:	1c1a      	adds	r2, r3, #0
   14ef4:	2301      	movs	r3, #1
   14ef6:	4013      	ands	r3, r2
   14ef8:	b2da      	uxtb	r2, r3
   14efa:	2308      	movs	r3, #8
   14efc:	18fb      	adds	r3, r7, r3
   14efe:	2101      	movs	r1, #1
   14f00:	400a      	ands	r2, r1
   14f02:	0110      	lsls	r0, r2, #4
   14f04:	781a      	ldrb	r2, [r3, #0]
   14f06:	2110      	movs	r1, #16
   14f08:	438a      	bics	r2, r1
   14f0a:	1c11      	adds	r1, r2, #0
   14f0c:	1c02      	adds	r2, r0, #0
   14f0e:	430a      	orrs	r2, r1
   14f10:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   14f12:	1cfb      	adds	r3, r7, #3
   14f14:	781b      	ldrb	r3, [r3, #0]
   14f16:	2207      	movs	r2, #7
   14f18:	4013      	ands	r3, r2
   14f1a:	b2da      	uxtb	r2, r3
   14f1c:	2308      	movs	r3, #8
   14f1e:	18fb      	adds	r3, r7, r3
   14f20:	0150      	lsls	r0, r2, #5
   14f22:	781a      	ldrb	r2, [r3, #0]
   14f24:	211f      	movs	r1, #31
   14f26:	400a      	ands	r2, r1
   14f28:	1c11      	adds	r1, r2, #0
   14f2a:	1c02      	adds	r2, r0, #0
   14f2c:	430a      	orrs	r2, r1
   14f2e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   14f30:	2308      	movs	r3, #8
   14f32:	18fa      	adds	r2, r7, r3
   14f34:	6878      	ldr	r0, [r7, #4]
   14f36:	2301      	movs	r3, #1
   14f38:	2117      	movs	r1, #23
   14f3a:	4c05      	ldr	r4, [pc, #20]	; (14f50 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   14f3c:	47a0      	blx	r4
   14f3e:	0003      	movs	r3, r0
   14f40:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14f42:	68fb      	ldr	r3, [r7, #12]
}
   14f44:	0018      	movs	r0, r3
   14f46:	46bd      	mov	sp, r7
   14f48:	b005      	add	sp, #20
   14f4a:	bd90      	pop	{r4, r7, pc}
   14f4c:	0001440d 	.word	0x0001440d
   14f50:	00014453 	.word	0x00014453

00014f54 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   14f54:	b590      	push	{r4, r7, lr}
   14f56:	b087      	sub	sp, #28
   14f58:	af00      	add	r7, sp, #0
   14f5a:	6078      	str	r0, [r7, #4]
   14f5c:	000a      	movs	r2, r1
   14f5e:	1cfb      	adds	r3, r7, #3
   14f60:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   14f62:	230c      	movs	r3, #12
   14f64:	18fa      	adds	r2, r7, r3
   14f66:	6878      	ldr	r0, [r7, #4]
   14f68:	2301      	movs	r3, #1
   14f6a:	2118      	movs	r1, #24
   14f6c:	4c28      	ldr	r4, [pc, #160]	; (15010 <lsm6dso_i3c_disable_set+0xbc>)
   14f6e:	47a0      	blx	r4
   14f70:	0003      	movs	r3, r0
   14f72:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   14f74:	697b      	ldr	r3, [r7, #20]
   14f76:	2b00      	cmp	r3, #0
   14f78:	d11c      	bne.n	14fb4 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   14f7a:	1cfb      	adds	r3, r7, #3
   14f7c:	781b      	ldrb	r3, [r3, #0]
   14f7e:	09db      	lsrs	r3, r3, #7
   14f80:	b2db      	uxtb	r3, r3
   14f82:	1c1a      	adds	r2, r3, #0
   14f84:	2301      	movs	r3, #1
   14f86:	4013      	ands	r3, r2
   14f88:	b2da      	uxtb	r2, r3
   14f8a:	230c      	movs	r3, #12
   14f8c:	18fb      	adds	r3, r7, r3
   14f8e:	2101      	movs	r1, #1
   14f90:	400a      	ands	r2, r1
   14f92:	1890      	adds	r0, r2, r2
   14f94:	781a      	ldrb	r2, [r3, #0]
   14f96:	2102      	movs	r1, #2
   14f98:	438a      	bics	r2, r1
   14f9a:	1c11      	adds	r1, r2, #0
   14f9c:	1c02      	adds	r2, r0, #0
   14f9e:	430a      	orrs	r2, r1
   14fa0:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   14fa2:	230c      	movs	r3, #12
   14fa4:	18fa      	adds	r2, r7, r3
   14fa6:	6878      	ldr	r0, [r7, #4]
   14fa8:	2301      	movs	r3, #1
   14faa:	2118      	movs	r1, #24
   14fac:	4c19      	ldr	r4, [pc, #100]	; (15014 <lsm6dso_i3c_disable_set+0xc0>)
   14fae:	47a0      	blx	r4
   14fb0:	0003      	movs	r3, r0
   14fb2:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   14fb4:	697b      	ldr	r3, [r7, #20]
   14fb6:	2b00      	cmp	r3, #0
   14fb8:	d108      	bne.n	14fcc <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   14fba:	2310      	movs	r3, #16
   14fbc:	18fa      	adds	r2, r7, r3
   14fbe:	6878      	ldr	r0, [r7, #4]
   14fc0:	2301      	movs	r3, #1
   14fc2:	2162      	movs	r1, #98	; 0x62
   14fc4:	4c12      	ldr	r4, [pc, #72]	; (15010 <lsm6dso_i3c_disable_set+0xbc>)
   14fc6:	47a0      	blx	r4
   14fc8:	0003      	movs	r3, r0
   14fca:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   14fcc:	697b      	ldr	r3, [r7, #20]
   14fce:	2b00      	cmp	r3, #0
   14fd0:	d119      	bne.n	15006 <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   14fd2:	1cfb      	adds	r3, r7, #3
   14fd4:	781b      	ldrb	r3, [r3, #0]
   14fd6:	2203      	movs	r2, #3
   14fd8:	4013      	ands	r3, r2
   14fda:	b2da      	uxtb	r2, r3
   14fdc:	2310      	movs	r3, #16
   14fde:	18fb      	adds	r3, r7, r3
   14fe0:	2103      	movs	r1, #3
   14fe2:	400a      	ands	r2, r1
   14fe4:	00d0      	lsls	r0, r2, #3
   14fe6:	781a      	ldrb	r2, [r3, #0]
   14fe8:	2118      	movs	r1, #24
   14fea:	438a      	bics	r2, r1
   14fec:	1c11      	adds	r1, r2, #0
   14fee:	1c02      	adds	r2, r0, #0
   14ff0:	430a      	orrs	r2, r1
   14ff2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   14ff4:	2310      	movs	r3, #16
   14ff6:	18fa      	adds	r2, r7, r3
   14ff8:	6878      	ldr	r0, [r7, #4]
   14ffa:	2301      	movs	r3, #1
   14ffc:	2162      	movs	r1, #98	; 0x62
   14ffe:	4c05      	ldr	r4, [pc, #20]	; (15014 <lsm6dso_i3c_disable_set+0xc0>)
   15000:	47a0      	blx	r4
   15002:	0003      	movs	r3, r0
   15004:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   15006:	697b      	ldr	r3, [r7, #20]
}
   15008:	0018      	movs	r0, r3
   1500a:	46bd      	mov	sp, r7
   1500c:	b007      	add	sp, #28
   1500e:	bd90      	pop	{r4, r7, pc}
   15010:	0001440d 	.word	0x0001440d
   15014:	00014453 	.word	0x00014453

00015018 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   15018:	b590      	push	{r4, r7, lr}
   1501a:	b085      	sub	sp, #20
   1501c:	af00      	add	r7, sp, #0
   1501e:	6078      	str	r0, [r7, #4]
   15020:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   15022:	687b      	ldr	r3, [r7, #4]
   15024:	2102      	movs	r1, #2
   15026:	0018      	movs	r0, r3
   15028:	4b0e      	ldr	r3, [pc, #56]	; (15064 <lsm6dso_fsm_enable_get+0x4c>)
   1502a:	4798      	blx	r3
   1502c:	0003      	movs	r3, r0
   1502e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15030:	68fb      	ldr	r3, [r7, #12]
   15032:	2b00      	cmp	r3, #0
   15034:	d107      	bne.n	15046 <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   15036:	683a      	ldr	r2, [r7, #0]
   15038:	6878      	ldr	r0, [r7, #4]
   1503a:	2302      	movs	r3, #2
   1503c:	2146      	movs	r1, #70	; 0x46
   1503e:	4c0a      	ldr	r4, [pc, #40]	; (15068 <lsm6dso_fsm_enable_get+0x50>)
   15040:	47a0      	blx	r4
   15042:	0003      	movs	r3, r0
   15044:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   15046:	68fb      	ldr	r3, [r7, #12]
   15048:	2b00      	cmp	r3, #0
   1504a:	d106      	bne.n	1505a <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   1504c:	687b      	ldr	r3, [r7, #4]
   1504e:	2100      	movs	r1, #0
   15050:	0018      	movs	r0, r3
   15052:	4b04      	ldr	r3, [pc, #16]	; (15064 <lsm6dso_fsm_enable_get+0x4c>)
   15054:	4798      	blx	r3
   15056:	0003      	movs	r3, r0
   15058:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1505a:	68fb      	ldr	r3, [r7, #12]
}
   1505c:	0018      	movs	r0, r3
   1505e:	46bd      	mov	sp, r7
   15060:	b005      	add	sp, #20
   15062:	bd90      	pop	{r4, r7, pc}
   15064:	00014cf9 	.word	0x00014cf9
   15068:	0001440d 	.word	0x0001440d

0001506c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   1506c:	b590      	push	{r4, r7, lr}
   1506e:	b085      	sub	sp, #20
   15070:	af00      	add	r7, sp, #0
   15072:	6078      	str	r0, [r7, #4]
   15074:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   15076:	687b      	ldr	r3, [r7, #4]
   15078:	2102      	movs	r1, #2
   1507a:	0018      	movs	r0, r3
   1507c:	4b21      	ldr	r3, [pc, #132]	; (15104 <lsm6dso_fsm_data_rate_get+0x98>)
   1507e:	4798      	blx	r3
   15080:	0003      	movs	r3, r0
   15082:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15084:	68fb      	ldr	r3, [r7, #12]
   15086:	2b00      	cmp	r3, #0
   15088:	d108      	bne.n	1509c <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   1508a:	2308      	movs	r3, #8
   1508c:	18fa      	adds	r2, r7, r3
   1508e:	6878      	ldr	r0, [r7, #4]
   15090:	2301      	movs	r3, #1
   15092:	215f      	movs	r1, #95	; 0x5f
   15094:	4c1c      	ldr	r4, [pc, #112]	; (15108 <lsm6dso_fsm_data_rate_get+0x9c>)
   15096:	47a0      	blx	r4
   15098:	0003      	movs	r3, r0
   1509a:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   1509c:	68fb      	ldr	r3, [r7, #12]
   1509e:	2b00      	cmp	r3, #0
   150a0:	d12b      	bne.n	150fa <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   150a2:	2308      	movs	r3, #8
   150a4:	18fb      	adds	r3, r7, r3
   150a6:	781b      	ldrb	r3, [r3, #0]
   150a8:	06db      	lsls	r3, r3, #27
   150aa:	0f9b      	lsrs	r3, r3, #30
   150ac:	b2db      	uxtb	r3, r3
   150ae:	2b01      	cmp	r3, #1
   150b0:	d00c      	beq.n	150cc <lsm6dso_fsm_data_rate_get+0x60>
   150b2:	dc02      	bgt.n	150ba <lsm6dso_fsm_data_rate_get+0x4e>
   150b4:	2b00      	cmp	r3, #0
   150b6:	d005      	beq.n	150c4 <lsm6dso_fsm_data_rate_get+0x58>
   150b8:	e014      	b.n	150e4 <lsm6dso_fsm_data_rate_get+0x78>
   150ba:	2b02      	cmp	r3, #2
   150bc:	d00a      	beq.n	150d4 <lsm6dso_fsm_data_rate_get+0x68>
   150be:	2b03      	cmp	r3, #3
   150c0:	d00c      	beq.n	150dc <lsm6dso_fsm_data_rate_get+0x70>
   150c2:	e00f      	b.n	150e4 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   150c4:	683b      	ldr	r3, [r7, #0]
   150c6:	2200      	movs	r2, #0
   150c8:	701a      	strb	r2, [r3, #0]
        break;
   150ca:	e00f      	b.n	150ec <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   150cc:	683b      	ldr	r3, [r7, #0]
   150ce:	2201      	movs	r2, #1
   150d0:	701a      	strb	r2, [r3, #0]
        break;
   150d2:	e00b      	b.n	150ec <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   150d4:	683b      	ldr	r3, [r7, #0]
   150d6:	2202      	movs	r2, #2
   150d8:	701a      	strb	r2, [r3, #0]
        break;
   150da:	e007      	b.n	150ec <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   150dc:	683b      	ldr	r3, [r7, #0]
   150de:	2203      	movs	r2, #3
   150e0:	701a      	strb	r2, [r3, #0]
        break;
   150e2:	e003      	b.n	150ec <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   150e4:	683b      	ldr	r3, [r7, #0]
   150e6:	2200      	movs	r2, #0
   150e8:	701a      	strb	r2, [r3, #0]
        break;
   150ea:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   150ec:	687b      	ldr	r3, [r7, #4]
   150ee:	2100      	movs	r1, #0
   150f0:	0018      	movs	r0, r3
   150f2:	4b04      	ldr	r3, [pc, #16]	; (15104 <lsm6dso_fsm_data_rate_get+0x98>)
   150f4:	4798      	blx	r3
   150f6:	0003      	movs	r3, r0
   150f8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   150fa:	68fb      	ldr	r3, [r7, #12]
}
   150fc:	0018      	movs	r0, r3
   150fe:	46bd      	mov	sp, r7
   15100:	b005      	add	sp, #20
   15102:	bd90      	pop	{r4, r7, pc}
   15104:	00014cf9 	.word	0x00014cf9
   15108:	0001440d 	.word	0x0001440d

0001510c <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   1510c:	b580      	push	{r7, lr}
   1510e:	b086      	sub	sp, #24
   15110:	af00      	add	r7, sp, #0
   15112:	60f8      	str	r0, [r7, #12]
   15114:	0008      	movs	r0, r1
   15116:	607a      	str	r2, [r7, #4]
   15118:	0019      	movs	r1, r3
   1511a:	230b      	movs	r3, #11
   1511c:	18fb      	adds	r3, r7, r3
   1511e:	1c02      	adds	r2, r0, #0
   15120:	701a      	strb	r2, [r3, #0]
   15122:	2308      	movs	r3, #8
   15124:	18fb      	adds	r3, r7, r3
   15126:	1c0a      	adds	r2, r1, #0
   15128:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	
	msgOutImu[0] = reg;
   1512a:	4b19      	ldr	r3, [pc, #100]	; (15190 <platform_write+0x84>)
   1512c:	220b      	movs	r2, #11
   1512e:	18ba      	adds	r2, r7, r2
   15130:	7812      	ldrb	r2, [r2, #0]
   15132:	701a      	strb	r2, [r3, #0]
	
	for(int i = 0; i < len; i++) {
   15134:	2300      	movs	r3, #0
   15136:	617b      	str	r3, [r7, #20]
   15138:	e00a      	b.n	15150 <platform_write+0x44>
		msgOutImu[i+1] = bufp[i];
   1513a:	697b      	ldr	r3, [r7, #20]
   1513c:	3301      	adds	r3, #1
   1513e:	697a      	ldr	r2, [r7, #20]
   15140:	6879      	ldr	r1, [r7, #4]
   15142:	188a      	adds	r2, r1, r2
   15144:	7811      	ldrb	r1, [r2, #0]
   15146:	4a12      	ldr	r2, [pc, #72]	; (15190 <platform_write+0x84>)
   15148:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < len; i++) {
   1514a:	697b      	ldr	r3, [r7, #20]
   1514c:	3301      	adds	r3, #1
   1514e:	617b      	str	r3, [r7, #20]
   15150:	2308      	movs	r3, #8
   15152:	18fb      	adds	r3, r7, r3
   15154:	881a      	ldrh	r2, [r3, #0]
   15156:	697b      	ldr	r3, [r7, #20]
   15158:	429a      	cmp	r2, r3
   1515a:	dcee      	bgt.n	1513a <platform_write+0x2e>
	}
	
	imuData.address = 0x6B;
   1515c:	4b0d      	ldr	r3, [pc, #52]	; (15194 <platform_write+0x88>)
   1515e:	226b      	movs	r2, #107	; 0x6b
   15160:	701a      	strb	r2, [r3, #0]
	imuData.lenOut = len + 1;
   15162:	2308      	movs	r3, #8
   15164:	18fb      	adds	r3, r7, r3
   15166:	881b      	ldrh	r3, [r3, #0]
   15168:	3301      	adds	r3, #1
   1516a:	b29a      	uxth	r2, r3
   1516c:	4b09      	ldr	r3, [pc, #36]	; (15194 <platform_write+0x88>)
   1516e:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = &msgOutImu;
   15170:	4b08      	ldr	r3, [pc, #32]	; (15194 <platform_write+0x88>)
   15172:	4a07      	ldr	r2, [pc, #28]	; (15190 <platform_write+0x84>)
   15174:	605a      	str	r2, [r3, #4]
	
	int32_t error = I2cWriteDataWait(&imuData, 100);
   15176:	4b07      	ldr	r3, [pc, #28]	; (15194 <platform_write+0x88>)
   15178:	2164      	movs	r1, #100	; 0x64
   1517a:	0018      	movs	r0, r3
   1517c:	4b06      	ldr	r3, [pc, #24]	; (15198 <platform_write+0x8c>)
   1517e:	4798      	blx	r3
   15180:	0003      	movs	r3, r0
   15182:	613b      	str	r3, [r7, #16]
	
return error;
   15184:	693b      	ldr	r3, [r7, #16]

}
   15186:	0018      	movs	r0, r3
   15188:	46bd      	mov	sp, r7
   1518a:	b006      	add	sp, #24
   1518c:	bd80      	pop	{r7, pc}
   1518e:	46c0      	nop			; (mov r8, r8)
   15190:	20004694 	.word	0x20004694
   15194:	200046d4 	.word	0x200046d4
   15198:	00014155 	.word	0x00014155

0001519c <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   1519c:	b580      	push	{r7, lr}
   1519e:	b086      	sub	sp, #24
   151a0:	af00      	add	r7, sp, #0
   151a2:	60f8      	str	r0, [r7, #12]
   151a4:	0008      	movs	r0, r1
   151a6:	607a      	str	r2, [r7, #4]
   151a8:	0019      	movs	r1, r3
   151aa:	230b      	movs	r3, #11
   151ac:	18fb      	adds	r3, r7, r3
   151ae:	1c02      	adds	r2, r0, #0
   151b0:	701a      	strb	r2, [r3, #0]
   151b2:	2308      	movs	r3, #8
   151b4:	18fb      	adds	r3, r7, r3
   151b6:	1c0a      	adds	r2, r1, #0
   151b8:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	
	imuData.address = 0x6B;
   151ba:	4b13      	ldr	r3, [pc, #76]	; (15208 <platform_read+0x6c>)
   151bc:	226b      	movs	r2, #107	; 0x6b
   151be:	701a      	strb	r2, [r3, #0]
	imuData.lenIn = len;
   151c0:	4b11      	ldr	r3, [pc, #68]	; (15208 <platform_read+0x6c>)
   151c2:	2208      	movs	r2, #8
   151c4:	18ba      	adds	r2, r7, r2
   151c6:	8812      	ldrh	r2, [r2, #0]
   151c8:	819a      	strh	r2, [r3, #12]
	imuData.msgIn = bufp;
   151ca:	4b0f      	ldr	r3, [pc, #60]	; (15208 <platform_read+0x6c>)
   151cc:	687a      	ldr	r2, [r7, #4]
   151ce:	609a      	str	r2, [r3, #8]
	imuData.lenOut = 1;
   151d0:	4b0d      	ldr	r3, [pc, #52]	; (15208 <platform_read+0x6c>)
   151d2:	2201      	movs	r2, #1
   151d4:	81da      	strh	r2, [r3, #14]
	
	msgOutImu[0] = reg;
   151d6:	4b0d      	ldr	r3, [pc, #52]	; (1520c <platform_read+0x70>)
   151d8:	220b      	movs	r2, #11
   151da:	18ba      	adds	r2, r7, r2
   151dc:	7812      	ldrb	r2, [r2, #0]
   151de:	701a      	strb	r2, [r3, #0]
	msgOutImu[1] = 0;
   151e0:	4b0a      	ldr	r3, [pc, #40]	; (1520c <platform_read+0x70>)
   151e2:	2200      	movs	r2, #0
   151e4:	705a      	strb	r2, [r3, #1]
	
	imuData.msgOut = &msgOutImu;
   151e6:	4b08      	ldr	r3, [pc, #32]	; (15208 <platform_read+0x6c>)
   151e8:	4a08      	ldr	r2, [pc, #32]	; (1520c <platform_read+0x70>)
   151ea:	605a      	str	r2, [r3, #4]

	int32_t error = I2cReadDataWait(&imuData, 5, 100);
   151ec:	4b06      	ldr	r3, [pc, #24]	; (15208 <platform_read+0x6c>)
   151ee:	2264      	movs	r2, #100	; 0x64
   151f0:	2105      	movs	r1, #5
   151f2:	0018      	movs	r0, r3
   151f4:	4b06      	ldr	r3, [pc, #24]	; (15210 <platform_read+0x74>)
   151f6:	4798      	blx	r3
   151f8:	0003      	movs	r3, r0
   151fa:	617b      	str	r3, [r7, #20]
	
return error;
   151fc:	697b      	ldr	r3, [r7, #20]


}
   151fe:	0018      	movs	r0, r3
   15200:	46bd      	mov	sp, r7
   15202:	b006      	add	sp, #24
   15204:	bd80      	pop	{r7, pc}
   15206:	46c0      	nop			; (mov r8, r8)
   15208:	200046d4 	.word	0x200046d4
   1520c:	20004694 	.word	0x20004694
   15210:	0001422d 	.word	0x0001422d

00015214 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   15214:	b580      	push	{r7, lr}
   15216:	af00      	add	r7, sp, #0
return &dev_ctx;
   15218:	4b01      	ldr	r3, [pc, #4]	; (15220 <GetImuStruct+0xc>)
}
   1521a:	0018      	movs	r0, r3
   1521c:	46bd      	mov	sp, r7
   1521e:	bd80      	pop	{r7, pc}
   15220:	20000014 	.word	0x20000014

00015224 <InitImu>:



int32_t InitImu(void)
{
   15224:	b580      	push	{r7, lr}
   15226:	b082      	sub	sp, #8
   15228:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   1522a:	2300      	movs	r3, #0
   1522c:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   1522e:	4b23      	ldr	r3, [pc, #140]	; (152bc <InitImu+0x98>)
   15230:	2101      	movs	r1, #1
   15232:	0018      	movs	r0, r3
   15234:	4b22      	ldr	r3, [pc, #136]	; (152c0 <InitImu+0x9c>)
   15236:	4798      	blx	r3
   15238:	0003      	movs	r3, r0
   1523a:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   1523c:	1cfa      	adds	r2, r7, #3
   1523e:	4b1f      	ldr	r3, [pc, #124]	; (152bc <InitImu+0x98>)
   15240:	0011      	movs	r1, r2
   15242:	0018      	movs	r0, r3
   15244:	4b1f      	ldr	r3, [pc, #124]	; (152c4 <InitImu+0xa0>)
   15246:	4798      	blx	r3
   15248:	0002      	movs	r2, r0
   1524a:	687b      	ldr	r3, [r7, #4]
   1524c:	4313      	orrs	r3, r2
   1524e:	607b      	str	r3, [r7, #4]
  } while (rst);
   15250:	1cfb      	adds	r3, r7, #3
   15252:	781b      	ldrb	r3, [r3, #0]
   15254:	2b00      	cmp	r3, #0
   15256:	d1f1      	bne.n	1523c <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   15258:	4b18      	ldr	r3, [pc, #96]	; (152bc <InitImu+0x98>)
   1525a:	2180      	movs	r1, #128	; 0x80
   1525c:	0018      	movs	r0, r3
   1525e:	4b1a      	ldr	r3, [pc, #104]	; (152c8 <InitImu+0xa4>)
   15260:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   15262:	4b16      	ldr	r3, [pc, #88]	; (152bc <InitImu+0x98>)
   15264:	2101      	movs	r1, #1
   15266:	0018      	movs	r0, r3
   15268:	4b18      	ldr	r3, [pc, #96]	; (152cc <InitImu+0xa8>)
   1526a:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   1526c:	4b13      	ldr	r3, [pc, #76]	; (152bc <InitImu+0x98>)
   1526e:	2100      	movs	r1, #0
   15270:	0018      	movs	r0, r3
   15272:	4b17      	ldr	r3, [pc, #92]	; (152d0 <InitImu+0xac>)
   15274:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   15276:	4b11      	ldr	r3, [pc, #68]	; (152bc <InitImu+0x98>)
   15278:	2101      	movs	r1, #1
   1527a:	0018      	movs	r0, r3
   1527c:	4b15      	ldr	r3, [pc, #84]	; (152d4 <InitImu+0xb0>)
   1527e:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   15280:	4b0e      	ldr	r3, [pc, #56]	; (152bc <InitImu+0x98>)
   15282:	2101      	movs	r1, #1
   15284:	0018      	movs	r0, r3
   15286:	4b14      	ldr	r3, [pc, #80]	; (152d8 <InitImu+0xb4>)
   15288:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   1528a:	4b0c      	ldr	r3, [pc, #48]	; (152bc <InitImu+0x98>)
   1528c:	2100      	movs	r1, #0
   1528e:	0018      	movs	r0, r3
   15290:	4b12      	ldr	r3, [pc, #72]	; (152dc <InitImu+0xb8>)
   15292:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   15294:	4b09      	ldr	r3, [pc, #36]	; (152bc <InitImu+0x98>)
   15296:	2106      	movs	r1, #6
   15298:	0018      	movs	r0, r3
   1529a:	4b11      	ldr	r3, [pc, #68]	; (152e0 <InitImu+0xbc>)
   1529c:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   1529e:	4b07      	ldr	r3, [pc, #28]	; (152bc <InitImu+0x98>)
   152a0:	2104      	movs	r1, #4
   152a2:	0018      	movs	r0, r3
   152a4:	4b0f      	ldr	r3, [pc, #60]	; (152e4 <InitImu+0xc0>)
   152a6:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   152a8:	4b04      	ldr	r3, [pc, #16]	; (152bc <InitImu+0x98>)
   152aa:	2101      	movs	r1, #1
   152ac:	0018      	movs	r0, r3
   152ae:	4b0e      	ldr	r3, [pc, #56]	; (152e8 <InitImu+0xc4>)
   152b0:	4798      	blx	r3

  return error;
   152b2:	687b      	ldr	r3, [r7, #4]
}
   152b4:	0018      	movs	r0, r3
   152b6:	46bd      	mov	sp, r7
   152b8:	b002      	add	sp, #8
   152ba:	bd80      	pop	{r7, pc}
   152bc:	20000014 	.word	0x20000014
   152c0:	00014d89 	.word	0x00014d89
   152c4:	00014df5 	.word	0x00014df5
   152c8:	00014f55 	.word	0x00014f55
   152cc:	00014b31 	.word	0x00014b31
   152d0:	00014b9d 	.word	0x00014b9d
   152d4:	0001453d 	.word	0x0001453d
   152d8:	0001486d 	.word	0x0001486d
   152dc:	000144d1 	.word	0x000144d1
   152e0:	00014801 	.word	0x00014801
   152e4:	00014e9d 	.word	0x00014e9d
   152e8:	00014e31 	.word	0x00014e31

000152ec <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(void)
{
   152ec:	b580      	push	{r7, lr}
   152ee:	b082      	sub	sp, #8
   152f0:	af00      	add	r7, sp, #0
    uint8_t readData[2];
    seesawData.address = NEO_TRELLIS_ADDR;
   152f2:	4b38      	ldr	r3, [pc, #224]	; (153d4 <InitializeSeesaw+0xe8>)
   152f4:	222e      	movs	r2, #46	; 0x2e
   152f6:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   152f8:	4b36      	ldr	r3, [pc, #216]	; (153d4 <InitializeSeesaw+0xe8>)
   152fa:	4a37      	ldr	r2, [pc, #220]	; (153d8 <InitializeSeesaw+0xec>)
   152fc:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   152fe:	4b35      	ldr	r3, [pc, #212]	; (153d4 <InitializeSeesaw+0xe8>)
   15300:	2202      	movs	r2, #2
   15302:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   15304:	4b33      	ldr	r3, [pc, #204]	; (153d4 <InitializeSeesaw+0xe8>)
   15306:	003a      	movs	r2, r7
   15308:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   1530a:	4b32      	ldr	r3, [pc, #200]	; (153d4 <InitializeSeesaw+0xe8>)
   1530c:	2201      	movs	r2, #1
   1530e:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15310:	4b30      	ldr	r3, [pc, #192]	; (153d4 <InitializeSeesaw+0xe8>)
   15312:	2264      	movs	r2, #100	; 0x64
   15314:	2100      	movs	r1, #0
   15316:	0018      	movs	r0, r3
   15318:	4b30      	ldr	r3, [pc, #192]	; (153dc <InitializeSeesaw+0xf0>)
   1531a:	4798      	blx	r3
   1531c:	0003      	movs	r3, r0
   1531e:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   15320:	687b      	ldr	r3, [r7, #4]
   15322:	2b00      	cmp	r3, #0
   15324:	d004      	beq.n	15330 <InitializeSeesaw+0x44>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   15326:	4b2e      	ldr	r3, [pc, #184]	; (153e0 <InitializeSeesaw+0xf4>)
   15328:	0018      	movs	r0, r3
   1532a:	4b2e      	ldr	r3, [pc, #184]	; (153e4 <InitializeSeesaw+0xf8>)
   1532c:	4798      	blx	r3
   1532e:	e00c      	b.n	1534a <InitializeSeesaw+0x5e>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   15330:	003b      	movs	r3, r7
   15332:	781b      	ldrb	r3, [r3, #0]
   15334:	2b55      	cmp	r3, #85	; 0x55
   15336:	d004      	beq.n	15342 <InitializeSeesaw+0x56>
            SerialConsoleWriteString("Error/r/n");
   15338:	4b2b      	ldr	r3, [pc, #172]	; (153e8 <InitializeSeesaw+0xfc>)
   1533a:	0018      	movs	r0, r3
   1533c:	4b29      	ldr	r3, [pc, #164]	; (153e4 <InitializeSeesaw+0xf8>)
   1533e:	4798      	blx	r3
   15340:	e003      	b.n	1534a <InitializeSeesaw+0x5e>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   15342:	4b2a      	ldr	r3, [pc, #168]	; (153ec <InitializeSeesaw+0x100>)
   15344:	0018      	movs	r0, r3
   15346:	4b27      	ldr	r3, [pc, #156]	; (153e4 <InitializeSeesaw+0xf8>)
   15348:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   1534a:	4b22      	ldr	r3, [pc, #136]	; (153d4 <InitializeSeesaw+0xe8>)
   1534c:	4a28      	ldr	r2, [pc, #160]	; (153f0 <InitializeSeesaw+0x104>)
   1534e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   15350:	4b20      	ldr	r3, [pc, #128]	; (153d4 <InitializeSeesaw+0xe8>)
   15352:	2203      	movs	r2, #3
   15354:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15356:	4b1f      	ldr	r3, [pc, #124]	; (153d4 <InitializeSeesaw+0xe8>)
   15358:	2164      	movs	r1, #100	; 0x64
   1535a:	0018      	movs	r0, r3
   1535c:	4b25      	ldr	r3, [pc, #148]	; (153f4 <InitializeSeesaw+0x108>)
   1535e:	4798      	blx	r3
   15360:	0003      	movs	r3, r0
   15362:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   15364:	687b      	ldr	r3, [r7, #4]
   15366:	2b00      	cmp	r3, #0
   15368:	d003      	beq.n	15372 <InitializeSeesaw+0x86>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   1536a:	4b23      	ldr	r3, [pc, #140]	; (153f8 <InitializeSeesaw+0x10c>)
   1536c:	0018      	movs	r0, r3
   1536e:	4b1d      	ldr	r3, [pc, #116]	; (153e4 <InitializeSeesaw+0xf8>)
   15370:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   15372:	4b18      	ldr	r3, [pc, #96]	; (153d4 <InitializeSeesaw+0xe8>)
   15374:	4a21      	ldr	r2, [pc, #132]	; (153fc <InitializeSeesaw+0x110>)
   15376:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   15378:	4b16      	ldr	r3, [pc, #88]	; (153d4 <InitializeSeesaw+0xe8>)
   1537a:	2203      	movs	r2, #3
   1537c:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   1537e:	4b15      	ldr	r3, [pc, #84]	; (153d4 <InitializeSeesaw+0xe8>)
   15380:	2164      	movs	r1, #100	; 0x64
   15382:	0018      	movs	r0, r3
   15384:	4b1b      	ldr	r3, [pc, #108]	; (153f4 <InitializeSeesaw+0x108>)
   15386:	4798      	blx	r3
   15388:	0003      	movs	r3, r0
   1538a:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   1538c:	687b      	ldr	r3, [r7, #4]
   1538e:	2b00      	cmp	r3, #0
   15390:	d003      	beq.n	1539a <InitializeSeesaw+0xae>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   15392:	4b1b      	ldr	r3, [pc, #108]	; (15400 <InitializeSeesaw+0x114>)
   15394:	0018      	movs	r0, r3
   15396:	4b13      	ldr	r3, [pc, #76]	; (153e4 <InitializeSeesaw+0xf8>)
   15398:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   1539a:	4b0e      	ldr	r3, [pc, #56]	; (153d4 <InitializeSeesaw+0xe8>)
   1539c:	4a19      	ldr	r2, [pc, #100]	; (15404 <InitializeSeesaw+0x118>)
   1539e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   153a0:	4b0c      	ldr	r3, [pc, #48]	; (153d4 <InitializeSeesaw+0xe8>)
   153a2:	2204      	movs	r2, #4
   153a4:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   153a6:	4b0b      	ldr	r3, [pc, #44]	; (153d4 <InitializeSeesaw+0xe8>)
   153a8:	2164      	movs	r1, #100	; 0x64
   153aa:	0018      	movs	r0, r3
   153ac:	4b11      	ldr	r3, [pc, #68]	; (153f4 <InitializeSeesaw+0x108>)
   153ae:	4798      	blx	r3
   153b0:	0003      	movs	r3, r0
   153b2:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   153b4:	687b      	ldr	r3, [r7, #4]
   153b6:	2b00      	cmp	r3, #0
   153b8:	d003      	beq.n	153c2 <InitializeSeesaw+0xd6>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   153ba:	4b13      	ldr	r3, [pc, #76]	; (15408 <InitializeSeesaw+0x11c>)
   153bc:	0018      	movs	r0, r3
   153be:	4b09      	ldr	r3, [pc, #36]	; (153e4 <InitializeSeesaw+0xf8>)
   153c0:	4798      	blx	r3
    }

    SeesawTurnOnLedTest();
   153c2:	4b12      	ldr	r3, [pc, #72]	; (1540c <InitializeSeesaw+0x120>)
   153c4:	4798      	blx	r3

    SeesawInitializeKeypad();
   153c6:	4b12      	ldr	r3, [pc, #72]	; (15410 <InitializeSeesaw+0x124>)
   153c8:	4798      	blx	r3
    return error;
   153ca:	687b      	ldr	r3, [r7, #4]
}
   153cc:	0018      	movs	r0, r3
   153ce:	46bd      	mov	sp, r7
   153d0:	b002      	add	sp, #8
   153d2:	bd80      	pop	{r7, pc}
   153d4:	200046e4 	.word	0x200046e4
   153d8:	00036354 	.word	0x00036354
   153dc:	0001422d 	.word	0x0001422d
   153e0:	0003636c 	.word	0x0003636c
   153e4:	0001de15 	.word	0x0001de15
   153e8:	0003638c 	.word	0x0003638c
   153ec:	00036398 	.word	0x00036398
   153f0:	00036358 	.word	0x00036358
   153f4:	00014155 	.word	0x00014155
   153f8:	000363ac 	.word	0x000363ac
   153fc:	0003635c 	.word	0x0003635c
   15400:	000363cc 	.word	0x000363cc
   15404:	00036360 	.word	0x00036360
   15408:	000363f8 	.word	0x000363f8
   1540c:	000157c1 	.word	0x000157c1
   15410:	000156d1 	.word	0x000156d1

00015414 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   15414:	b580      	push	{r7, lr}
   15416:	b082      	sub	sp, #8
   15418:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   1541a:	1cfb      	adds	r3, r7, #3
   1541c:	2200      	movs	r2, #0
   1541e:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   15420:	4b11      	ldr	r3, [pc, #68]	; (15468 <SeesawGetKeypadCount+0x54>)
   15422:	222e      	movs	r2, #46	; 0x2e
   15424:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   15426:	4b10      	ldr	r3, [pc, #64]	; (15468 <SeesawGetKeypadCount+0x54>)
   15428:	4a10      	ldr	r2, [pc, #64]	; (1546c <SeesawGetKeypadCount+0x58>)
   1542a:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   1542c:	4b0e      	ldr	r3, [pc, #56]	; (15468 <SeesawGetKeypadCount+0x54>)
   1542e:	2202      	movs	r2, #2
   15430:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   15432:	4b0d      	ldr	r3, [pc, #52]	; (15468 <SeesawGetKeypadCount+0x54>)
   15434:	1cfa      	adds	r2, r7, #3
   15436:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15438:	4b0b      	ldr	r3, [pc, #44]	; (15468 <SeesawGetKeypadCount+0x54>)
   1543a:	2201      	movs	r2, #1
   1543c:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   1543e:	4b0a      	ldr	r3, [pc, #40]	; (15468 <SeesawGetKeypadCount+0x54>)
   15440:	2264      	movs	r2, #100	; 0x64
   15442:	2100      	movs	r1, #0
   15444:	0018      	movs	r0, r3
   15446:	4b0a      	ldr	r3, [pc, #40]	; (15470 <SeesawGetKeypadCount+0x5c>)
   15448:	4798      	blx	r3
   1544a:	0003      	movs	r3, r0
   1544c:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   1544e:	687b      	ldr	r3, [r7, #4]
   15450:	2b00      	cmp	r3, #0
   15452:	d003      	beq.n	1545c <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15454:	4b07      	ldr	r3, [pc, #28]	; (15474 <SeesawGetKeypadCount+0x60>)
   15456:	0018      	movs	r0, r3
   15458:	4b07      	ldr	r3, [pc, #28]	; (15478 <SeesawGetKeypadCount+0x64>)
   1545a:	4798      	blx	r3
    }
    return count;
   1545c:	1cfb      	adds	r3, r7, #3
   1545e:	781b      	ldrb	r3, [r3, #0]
}
   15460:	0018      	movs	r0, r3
   15462:	46bd      	mov	sp, r7
   15464:	b002      	add	sp, #8
   15466:	bd80      	pop	{r7, pc}
   15468:	200046e4 	.word	0x200046e4
   1546c:	00036368 	.word	0x00036368
   15470:	0001422d 	.word	0x0001422d
   15474:	0003642c 	.word	0x0003642c
   15478:	0001de15 	.word	0x0001de15

0001547c <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   1547c:	b580      	push	{r7, lr}
   1547e:	b084      	sub	sp, #16
   15480:	af00      	add	r7, sp, #0
   15482:	6078      	str	r0, [r7, #4]
   15484:	000a      	movs	r2, r1
   15486:	1cfb      	adds	r3, r7, #3
   15488:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   1548a:	1cfb      	adds	r3, r7, #3
   1548c:	781b      	ldrb	r3, [r3, #0]
   1548e:	2b00      	cmp	r3, #0
   15490:	d101      	bne.n	15496 <SeesawReadKeypad+0x1a>
   15492:	2300      	movs	r3, #0
   15494:	e026      	b.n	154e4 <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   15496:	2308      	movs	r3, #8
   15498:	18fb      	adds	r3, r7, r3
   1549a:	4a14      	ldr	r2, [pc, #80]	; (154ec <SeesawReadKeypad+0x70>)
   1549c:	8812      	ldrh	r2, [r2, #0]
   1549e:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   154a0:	4b13      	ldr	r3, [pc, #76]	; (154f0 <SeesawReadKeypad+0x74>)
   154a2:	222e      	movs	r2, #46	; 0x2e
   154a4:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   154a6:	4b12      	ldr	r3, [pc, #72]	; (154f0 <SeesawReadKeypad+0x74>)
   154a8:	2208      	movs	r2, #8
   154aa:	18ba      	adds	r2, r7, r2
   154ac:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   154ae:	4b10      	ldr	r3, [pc, #64]	; (154f0 <SeesawReadKeypad+0x74>)
   154b0:	2202      	movs	r2, #2
   154b2:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   154b4:	4b0e      	ldr	r3, [pc, #56]	; (154f0 <SeesawReadKeypad+0x74>)
   154b6:	687a      	ldr	r2, [r7, #4]
   154b8:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   154ba:	1cfb      	adds	r3, r7, #3
   154bc:	781b      	ldrb	r3, [r3, #0]
   154be:	b29a      	uxth	r2, r3
   154c0:	4b0b      	ldr	r3, [pc, #44]	; (154f0 <SeesawReadKeypad+0x74>)
   154c2:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   154c4:	4b0a      	ldr	r3, [pc, #40]	; (154f0 <SeesawReadKeypad+0x74>)
   154c6:	2264      	movs	r2, #100	; 0x64
   154c8:	2100      	movs	r1, #0
   154ca:	0018      	movs	r0, r3
   154cc:	4b09      	ldr	r3, [pc, #36]	; (154f4 <SeesawReadKeypad+0x78>)
   154ce:	4798      	blx	r3
   154d0:	0003      	movs	r3, r0
   154d2:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   154d4:	68fb      	ldr	r3, [r7, #12]
   154d6:	2b00      	cmp	r3, #0
   154d8:	d003      	beq.n	154e2 <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   154da:	4b07      	ldr	r3, [pc, #28]	; (154f8 <SeesawReadKeypad+0x7c>)
   154dc:	0018      	movs	r0, r3
   154de:	4b07      	ldr	r3, [pc, #28]	; (154fc <SeesawReadKeypad+0x80>)
   154e0:	4798      	blx	r3
    }
    return error;
   154e2:	68fb      	ldr	r3, [r7, #12]
}
   154e4:	0018      	movs	r0, r3
   154e6:	46bd      	mov	sp, r7
   154e8:	b004      	add	sp, #16
   154ea:	bd80      	pop	{r7, pc}
   154ec:	00036450 	.word	0x00036450
   154f0:	200046e4 	.word	0x200046e4
   154f4:	0001422d 	.word	0x0001422d
   154f8:	0003642c 	.word	0x0003642c
   154fc:	0001de15 	.word	0x0001de15

00015500 <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
{
   15500:	b590      	push	{r4, r7, lr}
   15502:	b087      	sub	sp, #28
   15504:	af00      	add	r7, sp, #0
   15506:	0004      	movs	r4, r0
   15508:	0008      	movs	r0, r1
   1550a:	0011      	movs	r1, r2
   1550c:	1dfb      	adds	r3, r7, #7
   1550e:	1c22      	adds	r2, r4, #0
   15510:	701a      	strb	r2, [r3, #0]
   15512:	1dbb      	adds	r3, r7, #6
   15514:	1c02      	adds	r2, r0, #0
   15516:	701a      	strb	r2, [r3, #0]
   15518:	1d7b      	adds	r3, r7, #5
   1551a:	1c0a      	adds	r2, r1, #0
   1551c:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   1551e:	2310      	movs	r3, #16
   15520:	18fb      	adds	r3, r7, r3
   15522:	1d7a      	adds	r2, r7, #5
   15524:	7812      	ldrb	r2, [r2, #0]
   15526:	2101      	movs	r1, #1
   15528:	0010      	movs	r0, r2
   1552a:	4008      	ands	r0, r1
   1552c:	781a      	ldrb	r2, [r3, #0]
   1552e:	2101      	movs	r1, #1
   15530:	438a      	bics	r2, r1
   15532:	1c11      	adds	r1, r2, #0
   15534:	1c02      	adds	r2, r0, #0
   15536:	430a      	orrs	r2, r1
   15538:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   1553a:	1dbb      	adds	r3, r7, #6
   1553c:	781b      	ldrb	r3, [r3, #0]
   1553e:	2201      	movs	r2, #1
   15540:	409a      	lsls	r2, r3
   15542:	0013      	movs	r3, r2
   15544:	b2db      	uxtb	r3, r3
   15546:	1c1a      	adds	r2, r3, #0
   15548:	230f      	movs	r3, #15
   1554a:	4013      	ands	r3, r2
   1554c:	b2da      	uxtb	r2, r3
   1554e:	2310      	movs	r3, #16
   15550:	18fb      	adds	r3, r7, r3
   15552:	210f      	movs	r1, #15
   15554:	400a      	ands	r2, r1
   15556:	1890      	adds	r0, r2, r2
   15558:	781a      	ldrb	r2, [r3, #0]
   1555a:	211e      	movs	r1, #30
   1555c:	438a      	bics	r2, r1
   1555e:	1c11      	adds	r1, r2, #0
   15560:	1c02      	adds	r2, r0, #0
   15562:	430a      	orrs	r2, r1
   15564:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   15566:	230c      	movs	r3, #12
   15568:	18fb      	adds	r3, r7, r3
   1556a:	2210      	movs	r2, #16
   1556c:	701a      	strb	r2, [r3, #0]
   1556e:	230c      	movs	r3, #12
   15570:	18fb      	adds	r3, r7, r3
   15572:	2201      	movs	r2, #1
   15574:	705a      	strb	r2, [r3, #1]
   15576:	230c      	movs	r3, #12
   15578:	18fb      	adds	r3, r7, r3
   1557a:	1dfa      	adds	r2, r7, #7
   1557c:	7812      	ldrb	r2, [r2, #0]
   1557e:	709a      	strb	r2, [r3, #2]
   15580:	2310      	movs	r3, #16
   15582:	18fb      	adds	r3, r7, r3
   15584:	781a      	ldrb	r2, [r3, #0]
   15586:	230c      	movs	r3, #12
   15588:	18fb      	adds	r3, r7, r3
   1558a:	70da      	strb	r2, [r3, #3]

    seesawData.address = NEO_TRELLIS_ADDR;
   1558c:	4b0c      	ldr	r3, [pc, #48]	; (155c0 <SeesawActivateKey+0xc0>)
   1558e:	222e      	movs	r2, #46	; 0x2e
   15590:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   15592:	4b0b      	ldr	r3, [pc, #44]	; (155c0 <SeesawActivateKey+0xc0>)
   15594:	220c      	movs	r2, #12
   15596:	18ba      	adds	r2, r7, r2
   15598:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   1559a:	4b09      	ldr	r3, [pc, #36]	; (155c0 <SeesawActivateKey+0xc0>)
   1559c:	2204      	movs	r2, #4
   1559e:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   155a0:	4b07      	ldr	r3, [pc, #28]	; (155c0 <SeesawActivateKey+0xc0>)
   155a2:	2200      	movs	r2, #0
   155a4:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   155a6:	4b06      	ldr	r3, [pc, #24]	; (155c0 <SeesawActivateKey+0xc0>)
   155a8:	2164      	movs	r1, #100	; 0x64
   155aa:	0018      	movs	r0, r3
   155ac:	4b05      	ldr	r3, [pc, #20]	; (155c4 <SeesawActivateKey+0xc4>)
   155ae:	4798      	blx	r3
   155b0:	0003      	movs	r3, r0
   155b2:	617b      	str	r3, [r7, #20]
    return error;
   155b4:	697b      	ldr	r3, [r7, #20]
}
   155b6:	0018      	movs	r0, r3
   155b8:	46bd      	mov	sp, r7
   155ba:	b007      	add	sp, #28
   155bc:	bd90      	pop	{r4, r7, pc}
   155be:	46c0      	nop			; (mov r8, r8)
   155c0:	200046e4 	.word	0x200046e4
   155c4:	00014155 	.word	0x00014155

000155c8 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   155c8:	b5b0      	push	{r4, r5, r7, lr}
   155ca:	b086      	sub	sp, #24
   155cc:	af00      	add	r7, sp, #0
   155ce:	0005      	movs	r5, r0
   155d0:	000c      	movs	r4, r1
   155d2:	0010      	movs	r0, r2
   155d4:	0019      	movs	r1, r3
   155d6:	1dfb      	adds	r3, r7, #7
   155d8:	1c2a      	adds	r2, r5, #0
   155da:	701a      	strb	r2, [r3, #0]
   155dc:	1dbb      	adds	r3, r7, #6
   155de:	1c22      	adds	r2, r4, #0
   155e0:	701a      	strb	r2, [r3, #0]
   155e2:	1d7b      	adds	r3, r7, #5
   155e4:	1c02      	adds	r2, r0, #0
   155e6:	701a      	strb	r2, [r3, #0]
   155e8:	1d3b      	adds	r3, r7, #4
   155ea:	1c0a      	adds	r2, r1, #0
   155ec:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   155ee:	2308      	movs	r3, #8
   155f0:	18fb      	adds	r3, r7, r3
   155f2:	220e      	movs	r2, #14
   155f4:	701a      	strb	r2, [r3, #0]
   155f6:	2308      	movs	r3, #8
   155f8:	18fb      	adds	r3, r7, r3
   155fa:	2204      	movs	r2, #4
   155fc:	705a      	strb	r2, [r3, #1]
   155fe:	2308      	movs	r3, #8
   15600:	18fb      	adds	r3, r7, r3
   15602:	2200      	movs	r2, #0
   15604:	709a      	strb	r2, [r3, #2]
   15606:	2308      	movs	r3, #8
   15608:	18fb      	adds	r3, r7, r3
   1560a:	2200      	movs	r2, #0
   1560c:	70da      	strb	r2, [r3, #3]
   1560e:	2308      	movs	r3, #8
   15610:	18fb      	adds	r3, r7, r3
   15612:	1d7a      	adds	r2, r7, #5
   15614:	7812      	ldrb	r2, [r2, #0]
   15616:	711a      	strb	r2, [r3, #4]
   15618:	2308      	movs	r3, #8
   1561a:	18fb      	adds	r3, r7, r3
   1561c:	1dba      	adds	r2, r7, #6
   1561e:	7812      	ldrb	r2, [r2, #0]
   15620:	715a      	strb	r2, [r3, #5]
   15622:	2308      	movs	r3, #8
   15624:	18fb      	adds	r3, r7, r3
   15626:	1d3a      	adds	r2, r7, #4
   15628:	7812      	ldrb	r2, [r2, #0]
   1562a:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   1562c:	1dfb      	adds	r3, r7, #7
   1562e:	781b      	ldrb	r3, [r3, #0]
   15630:	b29b      	uxth	r3, r3
   15632:	2216      	movs	r2, #22
   15634:	18ba      	adds	r2, r7, r2
   15636:	1c19      	adds	r1, r3, #0
   15638:	1c0b      	adds	r3, r1, #0
   1563a:	18db      	adds	r3, r3, r3
   1563c:	185b      	adds	r3, r3, r1
   1563e:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   15640:	2316      	movs	r3, #22
   15642:	18fb      	adds	r3, r7, r3
   15644:	881b      	ldrh	r3, [r3, #0]
   15646:	0a1b      	lsrs	r3, r3, #8
   15648:	b29b      	uxth	r3, r3
   1564a:	b2da      	uxtb	r2, r3
   1564c:	2308      	movs	r3, #8
   1564e:	18fb      	adds	r3, r7, r3
   15650:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   15652:	2316      	movs	r3, #22
   15654:	18fb      	adds	r3, r7, r3
   15656:	881b      	ldrh	r3, [r3, #0]
   15658:	b2da      	uxtb	r2, r3
   1565a:	2308      	movs	r3, #8
   1565c:	18fb      	adds	r3, r7, r3
   1565e:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   15660:	4b09      	ldr	r3, [pc, #36]	; (15688 <SeesawSetLed+0xc0>)
   15662:	2208      	movs	r2, #8
   15664:	18ba      	adds	r2, r7, r2
   15666:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   15668:	4b07      	ldr	r3, [pc, #28]	; (15688 <SeesawSetLed+0xc0>)
   1566a:	2207      	movs	r2, #7
   1566c:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   1566e:	4b06      	ldr	r3, [pc, #24]	; (15688 <SeesawSetLed+0xc0>)
   15670:	2164      	movs	r1, #100	; 0x64
   15672:	0018      	movs	r0, r3
   15674:	4b05      	ldr	r3, [pc, #20]	; (1568c <SeesawSetLed+0xc4>)
   15676:	4798      	blx	r3
   15678:	0003      	movs	r3, r0
   1567a:	613b      	str	r3, [r7, #16]
    return error;
   1567c:	693b      	ldr	r3, [r7, #16]
}
   1567e:	0018      	movs	r0, r3
   15680:	46bd      	mov	sp, r7
   15682:	b006      	add	sp, #24
   15684:	bdb0      	pop	{r4, r5, r7, pc}
   15686:	46c0      	nop			; (mov r8, r8)
   15688:	200046e4 	.word	0x200046e4
   1568c:	00014155 	.word	0x00014155

00015690 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   15690:	b580      	push	{r7, lr}
   15692:	b082      	sub	sp, #8
   15694:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   15696:	003b      	movs	r3, r7
   15698:	4a0a      	ldr	r2, [pc, #40]	; (156c4 <SeesawOrderLedUpdate+0x34>)
   1569a:	8812      	ldrh	r2, [r2, #0]
   1569c:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   1569e:	4b0a      	ldr	r3, [pc, #40]	; (156c8 <SeesawOrderLedUpdate+0x38>)
   156a0:	003a      	movs	r2, r7
   156a2:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   156a4:	4b08      	ldr	r3, [pc, #32]	; (156c8 <SeesawOrderLedUpdate+0x38>)
   156a6:	2202      	movs	r2, #2
   156a8:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   156aa:	4b07      	ldr	r3, [pc, #28]	; (156c8 <SeesawOrderLedUpdate+0x38>)
   156ac:	2164      	movs	r1, #100	; 0x64
   156ae:	0018      	movs	r0, r3
   156b0:	4b06      	ldr	r3, [pc, #24]	; (156cc <SeesawOrderLedUpdate+0x3c>)
   156b2:	4798      	blx	r3
   156b4:	0003      	movs	r3, r0
   156b6:	607b      	str	r3, [r7, #4]
    return error;
   156b8:	687b      	ldr	r3, [r7, #4]
}
   156ba:	0018      	movs	r0, r3
   156bc:	46bd      	mov	sp, r7
   156be:	b002      	add	sp, #8
   156c0:	bd80      	pop	{r7, pc}
   156c2:	46c0      	nop			; (mov r8, r8)
   156c4:	00036454 	.word	0x00036454
   156c8:	200046e4 	.word	0x200046e4
   156cc:	00014155 	.word	0x00014155

000156d0 <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   156d0:	b580      	push	{r7, lr}
   156d2:	b082      	sub	sp, #8
   156d4:	af00      	add	r7, sp, #0
    seesawData.address = NEO_TRELLIS_ADDR;
   156d6:	4b33      	ldr	r3, [pc, #204]	; (157a4 <SeesawInitializeKeypad+0xd4>)
   156d8:	222e      	movs	r2, #46	; 0x2e
   156da:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   156dc:	4b31      	ldr	r3, [pc, #196]	; (157a4 <SeesawInitializeKeypad+0xd4>)
   156de:	4a32      	ldr	r2, [pc, #200]	; (157a8 <SeesawInitializeKeypad+0xd8>)
   156e0:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   156e2:	4b30      	ldr	r3, [pc, #192]	; (157a4 <SeesawInitializeKeypad+0xd4>)
   156e4:	2203      	movs	r2, #3
   156e6:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   156e8:	4b2e      	ldr	r3, [pc, #184]	; (157a4 <SeesawInitializeKeypad+0xd4>)
   156ea:	2200      	movs	r2, #0
   156ec:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   156ee:	4b2d      	ldr	r3, [pc, #180]	; (157a4 <SeesawInitializeKeypad+0xd4>)
   156f0:	2164      	movs	r1, #100	; 0x64
   156f2:	0018      	movs	r0, r3
   156f4:	4b2d      	ldr	r3, [pc, #180]	; (157ac <SeesawInitializeKeypad+0xdc>)
   156f6:	4798      	blx	r3
   156f8:	0003      	movs	r3, r0
   156fa:	603b      	str	r3, [r7, #0]
    if (ERROR_NONE != error) {
   156fc:	683b      	ldr	r3, [r7, #0]
   156fe:	2b00      	cmp	r3, #0
   15700:	d003      	beq.n	1570a <SeesawInitializeKeypad+0x3a>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   15702:	4b2b      	ldr	r3, [pc, #172]	; (157b0 <SeesawInitializeKeypad+0xe0>)
   15704:	0018      	movs	r0, r3
   15706:	4b2b      	ldr	r3, [pc, #172]	; (157b4 <SeesawInitializeKeypad+0xe4>)
   15708:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   1570a:	2300      	movs	r3, #0
   1570c:	607b      	str	r3, [r7, #4]
   1570e:	e041      	b.n	15794 <SeesawInitializeKeypad+0xc4>
        error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   15710:	687b      	ldr	r3, [r7, #4]
   15712:	2b00      	cmp	r3, #0
   15714:	da00      	bge.n	15718 <SeesawInitializeKeypad+0x48>
   15716:	3303      	adds	r3, #3
   15718:	109b      	asrs	r3, r3, #2
   1571a:	b2db      	uxtb	r3, r3
   1571c:	00db      	lsls	r3, r3, #3
   1571e:	b2da      	uxtb	r2, r3
   15720:	687b      	ldr	r3, [r7, #4]
   15722:	4925      	ldr	r1, [pc, #148]	; (157b8 <SeesawInitializeKeypad+0xe8>)
   15724:	400b      	ands	r3, r1
   15726:	d504      	bpl.n	15732 <SeesawInitializeKeypad+0x62>
   15728:	3b01      	subs	r3, #1
   1572a:	2104      	movs	r1, #4
   1572c:	4249      	negs	r1, r1
   1572e:	430b      	orrs	r3, r1
   15730:	3301      	adds	r3, #1
   15732:	b2db      	uxtb	r3, r3
   15734:	18d3      	adds	r3, r2, r3
   15736:	b2db      	uxtb	r3, r3
   15738:	2201      	movs	r2, #1
   1573a:	2103      	movs	r1, #3
   1573c:	0018      	movs	r0, r3
   1573e:	4b1f      	ldr	r3, [pc, #124]	; (157bc <SeesawInitializeKeypad+0xec>)
   15740:	4798      	blx	r3
   15742:	0003      	movs	r3, r0
   15744:	603b      	str	r3, [r7, #0]
        error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   15746:	687b      	ldr	r3, [r7, #4]
   15748:	2b00      	cmp	r3, #0
   1574a:	da00      	bge.n	1574e <SeesawInitializeKeypad+0x7e>
   1574c:	3303      	adds	r3, #3
   1574e:	109b      	asrs	r3, r3, #2
   15750:	b2db      	uxtb	r3, r3
   15752:	00db      	lsls	r3, r3, #3
   15754:	b2da      	uxtb	r2, r3
   15756:	687b      	ldr	r3, [r7, #4]
   15758:	4917      	ldr	r1, [pc, #92]	; (157b8 <SeesawInitializeKeypad+0xe8>)
   1575a:	400b      	ands	r3, r1
   1575c:	d504      	bpl.n	15768 <SeesawInitializeKeypad+0x98>
   1575e:	3b01      	subs	r3, #1
   15760:	2104      	movs	r1, #4
   15762:	4249      	negs	r1, r1
   15764:	430b      	orrs	r3, r1
   15766:	3301      	adds	r3, #1
   15768:	b2db      	uxtb	r3, r3
   1576a:	18d3      	adds	r3, r2, r3
   1576c:	b2db      	uxtb	r3, r3
   1576e:	2201      	movs	r2, #1
   15770:	2102      	movs	r1, #2
   15772:	0018      	movs	r0, r3
   15774:	4b11      	ldr	r3, [pc, #68]	; (157bc <SeesawInitializeKeypad+0xec>)
   15776:	4798      	blx	r3
   15778:	0002      	movs	r2, r0
   1577a:	683b      	ldr	r3, [r7, #0]
   1577c:	4313      	orrs	r3, r2
   1577e:	603b      	str	r3, [r7, #0]
        if (ERROR_NONE != error) {
   15780:	683b      	ldr	r3, [r7, #0]
   15782:	2b00      	cmp	r3, #0
   15784:	d003      	beq.n	1578e <SeesawInitializeKeypad+0xbe>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   15786:	4b0a      	ldr	r3, [pc, #40]	; (157b0 <SeesawInitializeKeypad+0xe0>)
   15788:	0018      	movs	r0, r3
   1578a:	4b0a      	ldr	r3, [pc, #40]	; (157b4 <SeesawInitializeKeypad+0xe4>)
   1578c:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   1578e:	687b      	ldr	r3, [r7, #4]
   15790:	3301      	adds	r3, #1
   15792:	607b      	str	r3, [r7, #4]
   15794:	687b      	ldr	r3, [r7, #4]
   15796:	2b0f      	cmp	r3, #15
   15798:	ddba      	ble.n	15710 <SeesawInitializeKeypad+0x40>
        }
    }
}
   1579a:	46c0      	nop			; (mov r8, r8)
   1579c:	46bd      	mov	sp, r7
   1579e:	b002      	add	sp, #8
   157a0:	bd80      	pop	{r7, pc}
   157a2:	46c0      	nop			; (mov r8, r8)
   157a4:	200046e4 	.word	0x200046e4
   157a8:	00036364 	.word	0x00036364
   157ac:	00014155 	.word	0x00014155
   157b0:	00036458 	.word	0x00036458
   157b4:	0001de15 	.word	0x0001de15
   157b8:	80000003 	.word	0x80000003
   157bc:	00015501 	.word	0x00015501

000157c0 <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(void)
{
   157c0:	b5b0      	push	{r4, r5, r7, lr}
   157c2:	af00      	add	r7, sp, #0
    SeesawSetLed(15, 255, 255, 255);
   157c4:	23ff      	movs	r3, #255	; 0xff
   157c6:	22ff      	movs	r2, #255	; 0xff
   157c8:	21ff      	movs	r1, #255	; 0xff
   157ca:	200f      	movs	r0, #15
   157cc:	4c09      	ldr	r4, [pc, #36]	; (157f4 <SeesawTurnOnLedTest+0x34>)
   157ce:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   157d0:	4b09      	ldr	r3, [pc, #36]	; (157f8 <SeesawTurnOnLedTest+0x38>)
   157d2:	4798      	blx	r3
    vTaskDelay(400);
   157d4:	23c8      	movs	r3, #200	; 0xc8
   157d6:	005b      	lsls	r3, r3, #1
   157d8:	0018      	movs	r0, r3
   157da:	4b08      	ldr	r3, [pc, #32]	; (157fc <SeesawTurnOnLedTest+0x3c>)
   157dc:	4798      	blx	r3

    SeesawSetLed(15, 0, 0, 0);
   157de:	2300      	movs	r3, #0
   157e0:	2200      	movs	r2, #0
   157e2:	2100      	movs	r1, #0
   157e4:	200f      	movs	r0, #15
   157e6:	4c03      	ldr	r4, [pc, #12]	; (157f4 <SeesawTurnOnLedTest+0x34>)
   157e8:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   157ea:	4b03      	ldr	r3, [pc, #12]	; (157f8 <SeesawTurnOnLedTest+0x38>)
   157ec:	4798      	blx	r3
   157ee:	46c0      	nop			; (mov r8, r8)
   157f0:	46bd      	mov	sp, r7
   157f2:	bdb0      	pop	{r4, r5, r7, pc}
   157f4:	000155c9 	.word	0x000155c9
   157f8:	00015691 	.word	0x00015691
   157fc:	0001c1c1 	.word	0x0001c1c1

00015800 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   15800:	b590      	push	{r4, r7, lr}
   15802:	b089      	sub	sp, #36	; 0x24
   15804:	af00      	add	r7, sp, #0
   15806:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   15808:	4baf      	ldr	r3, [pc, #700]	; (15ac8 <vUiHandlerTask+0x2c8>)
   1580a:	0018      	movs	r0, r3
   1580c:	4baf      	ldr	r3, [pc, #700]	; (15acc <vUiHandlerTask+0x2cc>)
   1580e:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   15810:	4baf      	ldr	r3, [pc, #700]	; (15ad0 <vUiHandlerTask+0x2d0>)
   15812:	2201      	movs	r2, #1
   15814:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_string("ESE516",0,0, &sysfont);
	*/

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   15816:	4bae      	ldr	r3, [pc, #696]	; (15ad0 <vUiHandlerTask+0x2d0>)
   15818:	781b      	ldrb	r3, [r3, #0]
   1581a:	2b01      	cmp	r3, #1
   1581c:	d005      	beq.n	1582a <vUiHandlerTask+0x2a>
   1581e:	2b02      	cmp	r3, #2
   15820:	d016      	beq.n	15850 <vUiHandlerTask+0x50>
   15822:	2b00      	cmp	r3, #0
   15824:	d100      	bne.n	15828 <vUiHandlerTask+0x28>
   15826:	e085      	b.n	15934 <vUiHandlerTask+0x134>
   15828:	e145      	b.n	15ab6 <vUiHandlerTask+0x2b6>
            case (UI_STATE_IGNORE_PRESSES): {
                // Ignore any presses until we receive a command from the control thread
                // to go to UI_STATE_SHOW_MOVES Will be changed by control with the
                // function void UiOrderShowMoves(struct GameDataPacket *packetIn) which
                // gets called when a valid MQTT Package comes in!
				for (int i = 0; i < 16; i++) {
   1582a:	2300      	movs	r3, #0
   1582c:	61fb      	str	r3, [r7, #28]
   1582e:	e009      	b.n	15844 <vUiHandlerTask+0x44>
					SeesawSetLed(i, 0, 0, 0);
   15830:	69fb      	ldr	r3, [r7, #28]
   15832:	b2d8      	uxtb	r0, r3
   15834:	2300      	movs	r3, #0
   15836:	2200      	movs	r2, #0
   15838:	2100      	movs	r1, #0
   1583a:	4ca6      	ldr	r4, [pc, #664]	; (15ad4 <vUiHandlerTask+0x2d4>)
   1583c:	47a0      	blx	r4
				for (int i = 0; i < 16; i++) {
   1583e:	69fb      	ldr	r3, [r7, #28]
   15840:	3301      	adds	r3, #1
   15842:	61fb      	str	r3, [r7, #28]
   15844:	69fb      	ldr	r3, [r7, #28]
   15846:	2b0f      	cmp	r3, #15
   15848:	ddf2      	ble.n	15830 <vUiHandlerTask+0x30>
				}
				SeesawOrderLedUpdate();
   1584a:	4ba3      	ldr	r3, [pc, #652]	; (15ad8 <vUiHandlerTask+0x2d8>)
   1584c:	4798      	blx	r3
                break;
   1584e:	e137      	b.n	15ac0 <vUiHandlerTask+0x2c0>
            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
				
				
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   15850:	4ba2      	ldr	r3, [pc, #648]	; (15adc <vUiHandlerTask+0x2dc>)
   15852:	2200      	movs	r2, #0
   15854:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   15856:	4ba2      	ldr	r3, [pc, #648]	; (15ae0 <vUiHandlerTask+0x2e0>)
   15858:	2201      	movs	r2, #1
   1585a:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   1585c:	4ba1      	ldr	r3, [pc, #644]	; (15ae4 <vUiHandlerTask+0x2e4>)
   1585e:	2214      	movs	r2, #20
   15860:	21ff      	movs	r1, #255	; 0xff
   15862:	0018      	movs	r0, r3
   15864:	4ba0      	ldr	r3, [pc, #640]	; (15ae8 <vUiHandlerTask+0x2e8>)
   15866:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   15868:	4ba0      	ldr	r3, [pc, #640]	; (15aec <vUiHandlerTask+0x2ec>)
   1586a:	2200      	movs	r2, #0
   1586c:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   1586e:	231b      	movs	r3, #27
   15870:	18fc      	adds	r4, r7, r3
   15872:	4b9f      	ldr	r3, [pc, #636]	; (15af0 <vUiHandlerTask+0x2f0>)
   15874:	4798      	blx	r3
   15876:	0003      	movs	r3, r0
   15878:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   1587a:	231b      	movs	r3, #27
   1587c:	18fb      	adds	r3, r7, r3
   1587e:	781b      	ldrb	r3, [r3, #0]
   15880:	2b0f      	cmp	r3, #15
   15882:	d903      	bls.n	1588c <vUiHandlerTask+0x8c>
   15884:	231b      	movs	r3, #27
   15886:	18fb      	adds	r3, r7, r3
   15888:	2210      	movs	r2, #16
   1588a:	701a      	strb	r2, [r3, #0]
				
                if (presses != 0) {
   1588c:	231b      	movs	r3, #27
   1588e:	18fb      	adds	r3, r7, r3
   15890:	781b      	ldrb	r3, [r3, #0]
   15892:	2b00      	cmp	r3, #0
   15894:	d007      	beq.n	158a6 <vUiHandlerTask+0xa6>
                    SeesawReadKeypad(buttons, presses);  // Empty Seesaw buffer just in case
   15896:	231b      	movs	r3, #27
   15898:	18fb      	adds	r3, r7, r3
   1589a:	781a      	ldrb	r2, [r3, #0]
   1589c:	4b95      	ldr	r3, [pc, #596]	; (15af4 <vUiHandlerTask+0x2f4>)
   1589e:	0011      	movs	r1, r2
   158a0:	0018      	movs	r0, r3
   158a2:	4b95      	ldr	r3, [pc, #596]	; (15af8 <vUiHandlerTask+0x2f8>)
   158a4:	4798      	blx	r3
														// it has latent presses on it!
				}
				memset(buttons, 0, BUTTON_PRESSES_MAX);
   158a6:	4b93      	ldr	r3, [pc, #588]	; (15af4 <vUiHandlerTask+0x2f4>)
   158a8:	2210      	movs	r2, #16
   158aa:	2100      	movs	r1, #0
   158ac:	0018      	movs	r0, r3
   158ae:	4b8e      	ldr	r3, [pc, #568]	; (15ae8 <vUiHandlerTask+0x2e8>)
   158b0:	4798      	blx	r3
				for (int i = 0; i < GAME_SIZE; i++) {
   158b2:	2300      	movs	r3, #0
   158b4:	617b      	str	r3, [r7, #20]
   158b6:	e034      	b.n	15922 <vUiHandlerTask+0x122>
						uint8_t num = gamePacketIn.game[i];
   158b8:	230b      	movs	r3, #11
   158ba:	18fb      	adds	r3, r7, r3
   158bc:	498f      	ldr	r1, [pc, #572]	; (15afc <vUiHandlerTask+0x2fc>)
   158be:	697a      	ldr	r2, [r7, #20]
   158c0:	188a      	adds	r2, r1, r2
   158c2:	7812      	ldrb	r2, [r2, #0]
   158c4:	701a      	strb	r2, [r3, #0]
						
						keysToPress = i + 1;
   158c6:	697b      	ldr	r3, [r7, #20]
   158c8:	b2db      	uxtb	r3, r3
   158ca:	3301      	adds	r3, #1
   158cc:	b2da      	uxtb	r2, r3
   158ce:	4b84      	ldr	r3, [pc, #528]	; (15ae0 <vUiHandlerTask+0x2e0>)
   158d0:	701a      	strb	r2, [r3, #0]

						if (num == 0xff) break;
   158d2:	230b      	movs	r3, #11
   158d4:	18fb      	adds	r3, r7, r3
   158d6:	781b      	ldrb	r3, [r3, #0]
   158d8:	2bff      	cmp	r3, #255	; 0xff
   158da:	d026      	beq.n	1592a <vUiHandlerTask+0x12a>
						
						SeesawSetLed(num, red, green, blue);
   158dc:	4b88      	ldr	r3, [pc, #544]	; (15b00 <vUiHandlerTask+0x300>)
   158de:	781b      	ldrb	r3, [r3, #0]
   158e0:	b2d9      	uxtb	r1, r3
   158e2:	4b88      	ldr	r3, [pc, #544]	; (15b04 <vUiHandlerTask+0x304>)
   158e4:	781b      	ldrb	r3, [r3, #0]
   158e6:	b2da      	uxtb	r2, r3
   158e8:	4b87      	ldr	r3, [pc, #540]	; (15b08 <vUiHandlerTask+0x308>)
   158ea:	781b      	ldrb	r3, [r3, #0]
   158ec:	b2dc      	uxtb	r4, r3
   158ee:	230b      	movs	r3, #11
   158f0:	18fb      	adds	r3, r7, r3
   158f2:	7818      	ldrb	r0, [r3, #0]
   158f4:	0023      	movs	r3, r4
   158f6:	4c77      	ldr	r4, [pc, #476]	; (15ad4 <vUiHandlerTask+0x2d4>)
   158f8:	47a0      	blx	r4
						SeesawOrderLedUpdate();
   158fa:	4b77      	ldr	r3, [pc, #476]	; (15ad8 <vUiHandlerTask+0x2d8>)
   158fc:	4798      	blx	r3
						vTaskDelay(1000);
   158fe:	23fa      	movs	r3, #250	; 0xfa
   15900:	009b      	lsls	r3, r3, #2
   15902:	0018      	movs	r0, r3
   15904:	4b81      	ldr	r3, [pc, #516]	; (15b0c <vUiHandlerTask+0x30c>)
   15906:	4798      	blx	r3
						SeesawSetLed(num, 0, 0, 0);
   15908:	230b      	movs	r3, #11
   1590a:	18fb      	adds	r3, r7, r3
   1590c:	7818      	ldrb	r0, [r3, #0]
   1590e:	2300      	movs	r3, #0
   15910:	2200      	movs	r2, #0
   15912:	2100      	movs	r1, #0
   15914:	4c6f      	ldr	r4, [pc, #444]	; (15ad4 <vUiHandlerTask+0x2d4>)
   15916:	47a0      	blx	r4
						SeesawOrderLedUpdate();
   15918:	4b6f      	ldr	r3, [pc, #444]	; (15ad8 <vUiHandlerTask+0x2d8>)
   1591a:	4798      	blx	r3
				for (int i = 0; i < GAME_SIZE; i++) {
   1591c:	697b      	ldr	r3, [r7, #20]
   1591e:	3301      	adds	r3, #1
   15920:	617b      	str	r3, [r7, #20]
   15922:	697b      	ldr	r3, [r7, #20]
   15924:	2b13      	cmp	r3, #19
   15926:	ddc7      	ble.n	158b8 <vUiHandlerTask+0xb8>
   15928:	e000      	b.n	1592c <vUiHandlerTask+0x12c>
						if (num == 0xff) break;
   1592a:	46c0      	nop			; (mov r8, r8)
                SeesawOrderLedUpdate();
                vTaskDelay(1000);
				
				*/
				
                uiState = UI_STATE_HANDLE_BUTTONS;
   1592c:	4b68      	ldr	r3, [pc, #416]	; (15ad0 <vUiHandlerTask+0x2d0>)
   1592e:	2200      	movs	r2, #0
   15930:	701a      	strb	r2, [r3, #0]

                break;
   15932:	e0c5      	b.n	15ac0 <vUiHandlerTask+0x2c0>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   15934:	2313      	movs	r3, #19
   15936:	18fc      	adds	r4, r7, r3
   15938:	4b6d      	ldr	r3, [pc, #436]	; (15af0 <vUiHandlerTask+0x2f0>)
   1593a:	4798      	blx	r3
   1593c:	0003      	movs	r3, r0
   1593e:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   15940:	4b6c      	ldr	r3, [pc, #432]	; (15af4 <vUiHandlerTask+0x2f4>)
   15942:	2210      	movs	r2, #16
   15944:	2100      	movs	r1, #0
   15946:	0018      	movs	r0, r3
   15948:	4b67      	ldr	r3, [pc, #412]	; (15ae8 <vUiHandlerTask+0x2e8>)
   1594a:	4798      	blx	r3
				
				
				//memcpy(&gamePacketOut, &gamePacketIn, sizeof(gamePacketOut));
				

                if (numPresses >= BUTTON_PRESSES_MAX) {
   1594c:	2313      	movs	r3, #19
   1594e:	18fb      	adds	r3, r7, r3
   15950:	781b      	ldrb	r3, [r3, #0]
   15952:	2b0f      	cmp	r3, #15
   15954:	d903      	bls.n	1595e <vUiHandlerTask+0x15e>
                    numPresses = BUTTON_PRESSES_MAX;
   15956:	2313      	movs	r3, #19
   15958:	18fb      	adds	r3, r7, r3
   1595a:	2210      	movs	r2, #16
   1595c:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   1595e:	2313      	movs	r3, #19
   15960:	18fb      	adds	r3, r7, r3
   15962:	781b      	ldrb	r3, [r3, #0]
   15964:	2b00      	cmp	r3, #0
   15966:	d100      	bne.n	1596a <vUiHandlerTask+0x16a>
   15968:	e094      	b.n	15a94 <vUiHandlerTask+0x294>
   1596a:	2313      	movs	r3, #19
   1596c:	18fb      	adds	r3, r7, r3
   1596e:	781a      	ldrb	r2, [r3, #0]
   15970:	4b60      	ldr	r3, [pc, #384]	; (15af4 <vUiHandlerTask+0x2f4>)
   15972:	0011      	movs	r1, r2
   15974:	0018      	movs	r0, r3
   15976:	4b60      	ldr	r3, [pc, #384]	; (15af8 <vUiHandlerTask+0x2f8>)
   15978:	4798      	blx	r3
   1597a:	1e03      	subs	r3, r0, #0
   1597c:	d000      	beq.n	15980 <vUiHandlerTask+0x180>
   1597e:	e089      	b.n	15a94 <vUiHandlerTask+0x294>
                    // Process Buttons
					
                    for (int iter = 0; iter < numPresses; iter++) {
   15980:	2300      	movs	r3, #0
   15982:	60fb      	str	r3, [r7, #12]
   15984:	e07d      	b.n	15a82 <vUiHandlerTask+0x282>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   15986:	4a5b      	ldr	r2, [pc, #364]	; (15af4 <vUiHandlerTask+0x2f4>)
   15988:	68fb      	ldr	r3, [r7, #12]
   1598a:	18d3      	adds	r3, r2, r3
   1598c:	781b      	ldrb	r3, [r3, #0]
   1598e:	089b      	lsrs	r3, r3, #2
   15990:	b2db      	uxtb	r3, r3
   15992:	2b00      	cmp	r3, #0
   15994:	da00      	bge.n	15998 <vUiHandlerTask+0x198>
   15996:	3307      	adds	r3, #7
   15998:	10db      	asrs	r3, r3, #3
   1599a:	b2db      	uxtb	r3, r3
   1599c:	009b      	lsls	r3, r3, #2
   1599e:	b2d9      	uxtb	r1, r3
   159a0:	4a54      	ldr	r2, [pc, #336]	; (15af4 <vUiHandlerTask+0x2f4>)
   159a2:	68fb      	ldr	r3, [r7, #12]
   159a4:	18d3      	adds	r3, r2, r3
   159a6:	781b      	ldrb	r3, [r3, #0]
   159a8:	089b      	lsrs	r3, r3, #2
   159aa:	b2db      	uxtb	r3, r3
   159ac:	2207      	movs	r2, #7
   159ae:	4013      	ands	r3, r2
   159b0:	b2da      	uxtb	r2, r3
   159b2:	230a      	movs	r3, #10
   159b4:	18fb      	adds	r3, r7, r3
   159b6:	188a      	adds	r2, r1, r2
   159b8:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   159ba:	4a4e      	ldr	r2, [pc, #312]	; (15af4 <vUiHandlerTask+0x2f4>)
   159bc:	68fb      	ldr	r3, [r7, #12]
   159be:	18d3      	adds	r3, r2, r3
   159c0:	781a      	ldrb	r2, [r3, #0]
   159c2:	2309      	movs	r3, #9
   159c4:	18fb      	adds	r3, r7, r3
   159c6:	2103      	movs	r1, #3
   159c8:	400a      	ands	r2, r1
   159ca:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   159cc:	2309      	movs	r3, #9
   159ce:	18fb      	adds	r3, r7, r3
   159d0:	781b      	ldrb	r3, [r3, #0]
   159d2:	2b03      	cmp	r3, #3
   159d4:	d10f      	bne.n	159f6 <vUiHandlerTask+0x1f6>
                            SeesawSetLed(keynum, red, green, blue);
   159d6:	4b4a      	ldr	r3, [pc, #296]	; (15b00 <vUiHandlerTask+0x300>)
   159d8:	781b      	ldrb	r3, [r3, #0]
   159da:	b2d9      	uxtb	r1, r3
   159dc:	4b49      	ldr	r3, [pc, #292]	; (15b04 <vUiHandlerTask+0x304>)
   159de:	781b      	ldrb	r3, [r3, #0]
   159e0:	b2da      	uxtb	r2, r3
   159e2:	4b49      	ldr	r3, [pc, #292]	; (15b08 <vUiHandlerTask+0x308>)
   159e4:	781b      	ldrb	r3, [r3, #0]
   159e6:	b2dc      	uxtb	r4, r3
   159e8:	230a      	movs	r3, #10
   159ea:	18fb      	adds	r3, r7, r3
   159ec:	7818      	ldrb	r0, [r3, #0]
   159ee:	0023      	movs	r3, r4
   159f0:	4c38      	ldr	r4, [pc, #224]	; (15ad4 <vUiHandlerTask+0x2d4>)
   159f2:	47a0      	blx	r4
   159f4:	e042      	b.n	15a7c <vUiHandlerTask+0x27c>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   159f6:	230a      	movs	r3, #10
   159f8:	18fb      	adds	r3, r7, r3
   159fa:	7818      	ldrb	r0, [r3, #0]
   159fc:	2300      	movs	r3, #0
   159fe:	2200      	movs	r2, #0
   15a00:	2100      	movs	r1, #0
   15a02:	4c34      	ldr	r4, [pc, #208]	; (15ad4 <vUiHandlerTask+0x2d4>)
   15a04:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
							LogMessage(LOG_DEBUG_LVL, "Button Pressed: %d\r\n", keynum);
   15a06:	230a      	movs	r3, #10
   15a08:	18fb      	adds	r3, r7, r3
   15a0a:	781a      	ldrb	r2, [r3, #0]
   15a0c:	4b40      	ldr	r3, [pc, #256]	; (15b10 <vUiHandlerTask+0x310>)
   15a0e:	0019      	movs	r1, r3
   15a10:	2001      	movs	r0, #1
   15a12:	4b40      	ldr	r3, [pc, #256]	; (15b14 <vUiHandlerTask+0x314>)
   15a14:	4798      	blx	r3
							if (pressedKeys != (keysToPress - 1) && keynum != gamePacketIn.game[pressedKeys]) {
   15a16:	4b31      	ldr	r3, [pc, #196]	; (15adc <vUiHandlerTask+0x2dc>)
   15a18:	781b      	ldrb	r3, [r3, #0]
   15a1a:	001a      	movs	r2, r3
   15a1c:	4b30      	ldr	r3, [pc, #192]	; (15ae0 <vUiHandlerTask+0x2e0>)
   15a1e:	781b      	ldrb	r3, [r3, #0]
   15a20:	3b01      	subs	r3, #1
   15a22:	429a      	cmp	r2, r3
   15a24:	d01c      	beq.n	15a60 <vUiHandlerTask+0x260>
   15a26:	4b2d      	ldr	r3, [pc, #180]	; (15adc <vUiHandlerTask+0x2dc>)
   15a28:	781b      	ldrb	r3, [r3, #0]
   15a2a:	001a      	movs	r2, r3
   15a2c:	4b33      	ldr	r3, [pc, #204]	; (15afc <vUiHandlerTask+0x2fc>)
   15a2e:	5c9b      	ldrb	r3, [r3, r2]
   15a30:	220a      	movs	r2, #10
   15a32:	18ba      	adds	r2, r7, r2
   15a34:	7812      	ldrb	r2, [r2, #0]
   15a36:	429a      	cmp	r2, r3
   15a38:	d012      	beq.n	15a60 <vUiHandlerTask+0x260>
								LogMessage(LOG_DEBUG_LVL, "Correct Button: %d\r\n", gamePacketIn.game[pressedKeys]);
   15a3a:	4b28      	ldr	r3, [pc, #160]	; (15adc <vUiHandlerTask+0x2dc>)
   15a3c:	781b      	ldrb	r3, [r3, #0]
   15a3e:	001a      	movs	r2, r3
   15a40:	4b2e      	ldr	r3, [pc, #184]	; (15afc <vUiHandlerTask+0x2fc>)
   15a42:	5c9b      	ldrb	r3, [r3, r2]
   15a44:	001a      	movs	r2, r3
   15a46:	4b34      	ldr	r3, [pc, #208]	; (15b18 <vUiHandlerTask+0x318>)
   15a48:	0019      	movs	r1, r3
   15a4a:	2001      	movs	r0, #1
   15a4c:	4b31      	ldr	r3, [pc, #196]	; (15b14 <vUiHandlerTask+0x314>)
   15a4e:	4798      	blx	r3
								gameOver = true;
   15a50:	4b32      	ldr	r3, [pc, #200]	; (15b1c <vUiHandlerTask+0x31c>)
   15a52:	2201      	movs	r2, #1
   15a54:	701a      	strb	r2, [r3, #0]
								pressedKeys = keysToPress;
   15a56:	4b22      	ldr	r3, [pc, #136]	; (15ae0 <vUiHandlerTask+0x2e0>)
   15a58:	781a      	ldrb	r2, [r3, #0]
   15a5a:	4b20      	ldr	r3, [pc, #128]	; (15adc <vUiHandlerTask+0x2dc>)
   15a5c:	701a      	strb	r2, [r3, #0]
								break;
   15a5e:	e017      	b.n	15a90 <vUiHandlerTask+0x290>
							}
								
                            gamePacketOut.game[pressedKeys] = keynum;
   15a60:	4b1e      	ldr	r3, [pc, #120]	; (15adc <vUiHandlerTask+0x2dc>)
   15a62:	781b      	ldrb	r3, [r3, #0]
   15a64:	0019      	movs	r1, r3
   15a66:	4b1f      	ldr	r3, [pc, #124]	; (15ae4 <vUiHandlerTask+0x2e4>)
   15a68:	220a      	movs	r2, #10
   15a6a:	18ba      	adds	r2, r7, r2
   15a6c:	7812      	ldrb	r2, [r2, #0]
   15a6e:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   15a70:	4b1a      	ldr	r3, [pc, #104]	; (15adc <vUiHandlerTask+0x2dc>)
   15a72:	781b      	ldrb	r3, [r3, #0]
   15a74:	3301      	adds	r3, #1
   15a76:	b2da      	uxtb	r2, r3
   15a78:	4b18      	ldr	r3, [pc, #96]	; (15adc <vUiHandlerTask+0x2dc>)
   15a7a:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   15a7c:	68fb      	ldr	r3, [r7, #12]
   15a7e:	3301      	adds	r3, #1
   15a80:	60fb      	str	r3, [r7, #12]
   15a82:	2313      	movs	r3, #19
   15a84:	18fb      	adds	r3, r7, r3
   15a86:	781a      	ldrb	r2, [r3, #0]
   15a88:	68fb      	ldr	r3, [r7, #12]
   15a8a:	429a      	cmp	r2, r3
   15a8c:	dd00      	ble.n	15a90 <vUiHandlerTask+0x290>
   15a8e:	e77a      	b.n	15986 <vUiHandlerTask+0x186>
							
                        }
                    }

                    SeesawOrderLedUpdate();
   15a90:	4b11      	ldr	r3, [pc, #68]	; (15ad8 <vUiHandlerTask+0x2d8>)
   15a92:	4798      	blx	r3
					
					
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   15a94:	4b11      	ldr	r3, [pc, #68]	; (15adc <vUiHandlerTask+0x2dc>)
   15a96:	781a      	ldrb	r2, [r3, #0]
   15a98:	4b11      	ldr	r3, [pc, #68]	; (15ae0 <vUiHandlerTask+0x2e0>)
   15a9a:	781b      	ldrb	r3, [r3, #0]
   15a9c:	429a      	cmp	r2, r3
   15a9e:	d203      	bcs.n	15aa8 <vUiHandlerTask+0x2a8>
   15aa0:	4b0e      	ldr	r3, [pc, #56]	; (15adc <vUiHandlerTask+0x2dc>)
   15aa2:	781b      	ldrb	r3, [r3, #0]
   15aa4:	2b13      	cmp	r3, #19
   15aa6:	d90a      	bls.n	15abe <vUiHandlerTask+0x2be>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   15aa8:	4b10      	ldr	r3, [pc, #64]	; (15aec <vUiHandlerTask+0x2ec>)
   15aaa:	2201      	movs	r2, #1
   15aac:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   15aae:	4b08      	ldr	r3, [pc, #32]	; (15ad0 <vUiHandlerTask+0x2d0>)
   15ab0:	2201      	movs	r2, #1
   15ab2:	701a      	strb	r2, [r3, #0]
                }

                break;
   15ab4:	e003      	b.n	15abe <vUiHandlerTask+0x2be>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   15ab6:	4b06      	ldr	r3, [pc, #24]	; (15ad0 <vUiHandlerTask+0x2d0>)
   15ab8:	2200      	movs	r2, #0
   15aba:	701a      	strb	r2, [r3, #0]
                break;
   15abc:	e000      	b.n	15ac0 <vUiHandlerTask+0x2c0>
                break;
   15abe:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   15ac0:	2032      	movs	r0, #50	; 0x32
   15ac2:	4b12      	ldr	r3, [pc, #72]	; (15b0c <vUiHandlerTask+0x30c>)
   15ac4:	4798      	blx	r3
        switch (uiState) {
   15ac6:	e6a6      	b.n	15816 <vUiHandlerTask+0x16>
   15ac8:	0003647c 	.word	0x0003647c
   15acc:	0001de15 	.word	0x0001de15
   15ad0:	2000472c 	.word	0x2000472c
   15ad4:	000155c9 	.word	0x000155c9
   15ad8:	00015691 	.word	0x00015691
   15adc:	20000022 	.word	0x20000022
   15ae0:	200004a2 	.word	0x200004a2
   15ae4:	200046f4 	.word	0x200046f4
   15ae8:	00034a5f 	.word	0x00034a5f
   15aec:	200004a3 	.word	0x200004a3
   15af0:	00015415 	.word	0x00015415
   15af4:	2000471c 	.word	0x2000471c
   15af8:	0001547d 	.word	0x0001547d
   15afc:	20004708 	.word	0x20004708
   15b00:	200004a0 	.word	0x200004a0
   15b04:	20000020 	.word	0x20000020
   15b08:	20000021 	.word	0x20000021
   15b0c:	0001c1c1 	.word	0x0001c1c1
   15b10:	00036490 	.word	0x00036490
   15b14:	0001df01 	.word	0x0001df01
   15b18:	000364a8 	.word	0x000364a8
   15b1c:	200004a1 	.word	0x200004a1

00015b20 <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   15b20:	b580      	push	{r7, lr}
   15b22:	b082      	sub	sp, #8
   15b24:	af00      	add	r7, sp, #0
   15b26:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   15b28:	4a08      	ldr	r2, [pc, #32]	; (15b4c <UiOrderShowMoves+0x2c>)
   15b2a:	687b      	ldr	r3, [r7, #4]
   15b2c:	0010      	movs	r0, r2
   15b2e:	0019      	movs	r1, r3
   15b30:	2314      	movs	r3, #20
   15b32:	001a      	movs	r2, r3
   15b34:	4b06      	ldr	r3, [pc, #24]	; (15b50 <UiOrderShowMoves+0x30>)
   15b36:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   15b38:	4b06      	ldr	r3, [pc, #24]	; (15b54 <UiOrderShowMoves+0x34>)
   15b3a:	2202      	movs	r2, #2
   15b3c:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   15b3e:	4b06      	ldr	r3, [pc, #24]	; (15b58 <UiOrderShowMoves+0x38>)
   15b40:	2200      	movs	r2, #0
   15b42:	701a      	strb	r2, [r3, #0]
}
   15b44:	46c0      	nop			; (mov r8, r8)
   15b46:	46bd      	mov	sp, r7
   15b48:	b002      	add	sp, #8
   15b4a:	bd80      	pop	{r7, pc}
   15b4c:	20004708 	.word	0x20004708
   15b50:	00034a29 	.word	0x00034a29
   15b54:	2000472c 	.word	0x2000472c
   15b58:	200004a3 	.word	0x200004a3

00015b5c <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   15b5c:	b580      	push	{r7, lr}
   15b5e:	af00      	add	r7, sp, #0
    return playIsDone;
   15b60:	4b02      	ldr	r3, [pc, #8]	; (15b6c <UiPlayIsDone+0x10>)
   15b62:	781b      	ldrb	r3, [r3, #0]
}
   15b64:	0018      	movs	r0, r3
   15b66:	46bd      	mov	sp, r7
   15b68:	bd80      	pop	{r7, pc}
   15b6a:	46c0      	nop			; (mov r8, r8)
   15b6c:	200004a3 	.word	0x200004a3

00015b70 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   15b70:	b580      	push	{r7, lr}
   15b72:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   15b74:	4b01      	ldr	r3, [pc, #4]	; (15b7c <UiGetGamePacketOut+0xc>)
}
   15b76:	0018      	movs	r0, r3
   15b78:	46bd      	mov	sp, r7
   15b7a:	bd80      	pop	{r7, pc}
   15b7c:	200046f4 	.word	0x200046f4

00015b80 <isGameOver>:

bool isGameOver(void)
{
   15b80:	b580      	push	{r7, lr}
   15b82:	af00      	add	r7, sp, #0
	return gameOver;
   15b84:	4b02      	ldr	r3, [pc, #8]	; (15b90 <isGameOver+0x10>)
   15b86:	781b      	ldrb	r3, [r3, #0]
   15b88:	b2db      	uxtb	r3, r3
}
   15b8a:	0018      	movs	r0, r3
   15b8c:	46bd      	mov	sp, r7
   15b8e:	bd80      	pop	{r7, pc}
   15b90:	200004a1 	.word	0x200004a1

00015b94 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   15b94:	b590      	push	{r4, r7, lr}
   15b96:	b083      	sub	sp, #12
   15b98:	af00      	add	r7, sp, #0
   15b9a:	0004      	movs	r4, r0
   15b9c:	0008      	movs	r0, r1
   15b9e:	0011      	movs	r1, r2
   15ba0:	1dfb      	adds	r3, r7, #7
   15ba2:	1c22      	adds	r2, r4, #0
   15ba4:	701a      	strb	r2, [r3, #0]
   15ba6:	1dbb      	adds	r3, r7, #6
   15ba8:	1c02      	adds	r2, r0, #0
   15baa:	701a      	strb	r2, [r3, #0]
   15bac:	1d7b      	adds	r3, r7, #5
   15bae:	1c0a      	adds	r2, r1, #0
   15bb0:	701a      	strb	r2, [r3, #0]
    red = r;
   15bb2:	4b08      	ldr	r3, [pc, #32]	; (15bd4 <UIChangeColors+0x40>)
   15bb4:	1dfa      	adds	r2, r7, #7
   15bb6:	7812      	ldrb	r2, [r2, #0]
   15bb8:	701a      	strb	r2, [r3, #0]
    green = g;
   15bba:	4b07      	ldr	r3, [pc, #28]	; (15bd8 <UIChangeColors+0x44>)
   15bbc:	1dba      	adds	r2, r7, #6
   15bbe:	7812      	ldrb	r2, [r2, #0]
   15bc0:	701a      	strb	r2, [r3, #0]
    blue = b;
   15bc2:	4b06      	ldr	r3, [pc, #24]	; (15bdc <UIChangeColors+0x48>)
   15bc4:	1d7a      	adds	r2, r7, #5
   15bc6:	7812      	ldrb	r2, [r2, #0]
   15bc8:	701a      	strb	r2, [r3, #0]
}
   15bca:	46c0      	nop			; (mov r8, r8)
   15bcc:	46bd      	mov	sp, r7
   15bce:	b003      	add	sp, #12
   15bd0:	bd90      	pop	{r4, r7, pc}
   15bd2:	46c0      	nop			; (mov r8, r8)
   15bd4:	200004a0 	.word	0x200004a0
   15bd8:	20000020 	.word	0x20000020
   15bdc:	20000021 	.word	0x20000021

00015be0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   15be0:	b580      	push	{r7, lr}
   15be2:	b084      	sub	sp, #16
   15be4:	af00      	add	r7, sp, #0
   15be6:	0002      	movs	r2, r0
   15be8:	1dfb      	adds	r3, r7, #7
   15bea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   15bec:	230f      	movs	r3, #15
   15bee:	18fb      	adds	r3, r7, r3
   15bf0:	1dfa      	adds	r2, r7, #7
   15bf2:	7812      	ldrb	r2, [r2, #0]
   15bf4:	09d2      	lsrs	r2, r2, #7
   15bf6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   15bf8:	230e      	movs	r3, #14
   15bfa:	18fb      	adds	r3, r7, r3
   15bfc:	1dfa      	adds	r2, r7, #7
   15bfe:	7812      	ldrb	r2, [r2, #0]
   15c00:	0952      	lsrs	r2, r2, #5
   15c02:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   15c04:	4b0d      	ldr	r3, [pc, #52]	; (15c3c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   15c06:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   15c08:	230f      	movs	r3, #15
   15c0a:	18fb      	adds	r3, r7, r3
   15c0c:	781b      	ldrb	r3, [r3, #0]
   15c0e:	2b00      	cmp	r3, #0
   15c10:	d10f      	bne.n	15c32 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   15c12:	230f      	movs	r3, #15
   15c14:	18fb      	adds	r3, r7, r3
   15c16:	781b      	ldrb	r3, [r3, #0]
   15c18:	009b      	lsls	r3, r3, #2
   15c1a:	2210      	movs	r2, #16
   15c1c:	4694      	mov	ip, r2
   15c1e:	44bc      	add	ip, r7
   15c20:	4463      	add	r3, ip
   15c22:	3b08      	subs	r3, #8
   15c24:	681a      	ldr	r2, [r3, #0]
   15c26:	230e      	movs	r3, #14
   15c28:	18fb      	adds	r3, r7, r3
   15c2a:	781b      	ldrb	r3, [r3, #0]
   15c2c:	01db      	lsls	r3, r3, #7
   15c2e:	18d3      	adds	r3, r2, r3
   15c30:	e000      	b.n	15c34 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   15c32:	2300      	movs	r3, #0
	}
}
   15c34:	0018      	movs	r0, r3
   15c36:	46bd      	mov	sp, r7
   15c38:	b004      	add	sp, #16
   15c3a:	bd80      	pop	{r7, pc}
   15c3c:	41004400 	.word	0x41004400

00015c40 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   15c40:	b580      	push	{r7, lr}
   15c42:	b082      	sub	sp, #8
   15c44:	af00      	add	r7, sp, #0
   15c46:	0002      	movs	r2, r0
   15c48:	1dfb      	adds	r3, r7, #7
   15c4a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   15c4c:	1dfb      	adds	r3, r7, #7
   15c4e:	781b      	ldrb	r3, [r3, #0]
   15c50:	0018      	movs	r0, r3
   15c52:	4b03      	ldr	r3, [pc, #12]	; (15c60 <port_get_group_from_gpio_pin+0x20>)
   15c54:	4798      	blx	r3
   15c56:	0003      	movs	r3, r0
}
   15c58:	0018      	movs	r0, r3
   15c5a:	46bd      	mov	sp, r7
   15c5c:	b002      	add	sp, #8
   15c5e:	bd80      	pop	{r7, pc}
   15c60:	00015be1 	.word	0x00015be1

00015c64 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   15c64:	b580      	push	{r7, lr}
   15c66:	b084      	sub	sp, #16
   15c68:	af00      	add	r7, sp, #0
   15c6a:	0002      	movs	r2, r0
   15c6c:	1dfb      	adds	r3, r7, #7
   15c6e:	701a      	strb	r2, [r3, #0]
   15c70:	1dbb      	adds	r3, r7, #6
   15c72:	1c0a      	adds	r2, r1, #0
   15c74:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   15c76:	1dfb      	adds	r3, r7, #7
   15c78:	781b      	ldrb	r3, [r3, #0]
   15c7a:	0018      	movs	r0, r3
   15c7c:	4b0d      	ldr	r3, [pc, #52]	; (15cb4 <port_pin_set_output_level+0x50>)
   15c7e:	4798      	blx	r3
   15c80:	0003      	movs	r3, r0
   15c82:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15c84:	1dfb      	adds	r3, r7, #7
   15c86:	781b      	ldrb	r3, [r3, #0]
   15c88:	221f      	movs	r2, #31
   15c8a:	4013      	ands	r3, r2
   15c8c:	2201      	movs	r2, #1
   15c8e:	409a      	lsls	r2, r3
   15c90:	0013      	movs	r3, r2
   15c92:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   15c94:	1dbb      	adds	r3, r7, #6
   15c96:	781b      	ldrb	r3, [r3, #0]
   15c98:	2b00      	cmp	r3, #0
   15c9a:	d003      	beq.n	15ca4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   15c9c:	68fb      	ldr	r3, [r7, #12]
   15c9e:	68ba      	ldr	r2, [r7, #8]
   15ca0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   15ca2:	e002      	b.n	15caa <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   15ca4:	68fb      	ldr	r3, [r7, #12]
   15ca6:	68ba      	ldr	r2, [r7, #8]
   15ca8:	615a      	str	r2, [r3, #20]
}
   15caa:	46c0      	nop			; (mov r8, r8)
   15cac:	46bd      	mov	sp, r7
   15cae:	b004      	add	sp, #16
   15cb0:	bd80      	pop	{r7, pc}
   15cb2:	46c0      	nop			; (mov r8, r8)
   15cb4:	00015c41 	.word	0x00015c41

00015cb8 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   15cb8:	b580      	push	{r7, lr}
   15cba:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   15cbc:	4b02      	ldr	r3, [pc, #8]	; (15cc8 <init_state+0x10>)
   15cbe:	2200      	movs	r2, #0
   15cc0:	701a      	strb	r2, [r3, #0]
}
   15cc2:	46c0      	nop			; (mov r8, r8)
   15cc4:	46bd      	mov	sp, r7
   15cc6:	bd80      	pop	{r7, pc}
   15cc8:	200004b9 	.word	0x200004b9

00015ccc <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   15ccc:	b580      	push	{r7, lr}
   15cce:	b082      	sub	sp, #8
   15cd0:	af00      	add	r7, sp, #0
   15cd2:	0002      	movs	r2, r0
   15cd4:	1dfb      	adds	r3, r7, #7
   15cd6:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   15cd8:	1dfb      	adds	r3, r7, #7
   15cda:	781b      	ldrb	r3, [r3, #0]
   15cdc:	b25b      	sxtb	r3, r3
   15cde:	43db      	mvns	r3, r3
   15ce0:	b25b      	sxtb	r3, r3
   15ce2:	4a06      	ldr	r2, [pc, #24]	; (15cfc <clear_state+0x30>)
   15ce4:	7812      	ldrb	r2, [r2, #0]
   15ce6:	b252      	sxtb	r2, r2
   15ce8:	4013      	ands	r3, r2
   15cea:	b25b      	sxtb	r3, r3
   15cec:	b2da      	uxtb	r2, r3
   15cee:	4b03      	ldr	r3, [pc, #12]	; (15cfc <clear_state+0x30>)
   15cf0:	701a      	strb	r2, [r3, #0]
}
   15cf2:	46c0      	nop			; (mov r8, r8)
   15cf4:	46bd      	mov	sp, r7
   15cf6:	b002      	add	sp, #8
   15cf8:	bd80      	pop	{r7, pc}
   15cfa:	46c0      	nop			; (mov r8, r8)
   15cfc:	200004b9 	.word	0x200004b9

00015d00 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   15d00:	b580      	push	{r7, lr}
   15d02:	b082      	sub	sp, #8
   15d04:	af00      	add	r7, sp, #0
   15d06:	0002      	movs	r2, r0
   15d08:	1dfb      	adds	r3, r7, #7
   15d0a:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   15d0c:	4b05      	ldr	r3, [pc, #20]	; (15d24 <add_state+0x24>)
   15d0e:	781a      	ldrb	r2, [r3, #0]
   15d10:	1dfb      	adds	r3, r7, #7
   15d12:	781b      	ldrb	r3, [r3, #0]
   15d14:	4313      	orrs	r3, r2
   15d16:	b2da      	uxtb	r2, r3
   15d18:	4b02      	ldr	r3, [pc, #8]	; (15d24 <add_state+0x24>)
   15d1a:	701a      	strb	r2, [r3, #0]
}
   15d1c:	46c0      	nop			; (mov r8, r8)
   15d1e:	46bd      	mov	sp, r7
   15d20:	b002      	add	sp, #8
   15d22:	bd80      	pop	{r7, pc}
   15d24:	200004b9 	.word	0x200004b9

00015d28 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   15d28:	b580      	push	{r7, lr}
   15d2a:	b082      	sub	sp, #8
   15d2c:	af00      	add	r7, sp, #0
   15d2e:	0002      	movs	r2, r0
   15d30:	1dfb      	adds	r3, r7, #7
   15d32:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   15d34:	4b06      	ldr	r3, [pc, #24]	; (15d50 <is_state_set+0x28>)
   15d36:	781b      	ldrb	r3, [r3, #0]
   15d38:	1dfa      	adds	r2, r7, #7
   15d3a:	7812      	ldrb	r2, [r2, #0]
   15d3c:	4013      	ands	r3, r2
   15d3e:	b2db      	uxtb	r3, r3
   15d40:	1e5a      	subs	r2, r3, #1
   15d42:	4193      	sbcs	r3, r2
   15d44:	b2db      	uxtb	r3, r3
}
   15d46:	0018      	movs	r0, r3
   15d48:	46bd      	mov	sp, r7
   15d4a:	b002      	add	sp, #8
   15d4c:	bd80      	pop	{r7, pc}
   15d4e:	46c0      	nop			; (mov r8, r8)
   15d50:	200004b9 	.word	0x200004b9

00015d54 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   15d54:	b590      	push	{r4, r7, lr}
   15d56:	b085      	sub	sp, #20
   15d58:	af00      	add	r7, sp, #0
   15d5a:	6078      	str	r0, [r7, #4]
   15d5c:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   15d5e:	687b      	ldr	r3, [r7, #4]
   15d60:	2b00      	cmp	r3, #0
   15d62:	d002      	beq.n	15d6a <is_exist_file+0x16>
   15d64:	683b      	ldr	r3, [r7, #0]
   15d66:	2b00      	cmp	r3, #0
   15d68:	d101      	bne.n	15d6e <is_exist_file+0x1a>
        return false;
   15d6a:	2300      	movs	r3, #0
   15d6c:	e013      	b.n	15d96 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   15d6e:	230f      	movs	r3, #15
   15d70:	18fc      	adds	r4, r7, r3
   15d72:	6839      	ldr	r1, [r7, #0]
   15d74:	4b0a      	ldr	r3, [pc, #40]	; (15da0 <is_exist_file+0x4c>)
   15d76:	2200      	movs	r2, #0
   15d78:	0018      	movs	r0, r3
   15d7a:	4b0a      	ldr	r3, [pc, #40]	; (15da4 <is_exist_file+0x50>)
   15d7c:	4798      	blx	r3
   15d7e:	0003      	movs	r3, r0
   15d80:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   15d82:	4b07      	ldr	r3, [pc, #28]	; (15da0 <is_exist_file+0x4c>)
   15d84:	0018      	movs	r0, r3
   15d86:	4b08      	ldr	r3, [pc, #32]	; (15da8 <is_exist_file+0x54>)
   15d88:	4798      	blx	r3
    return (ret == FR_OK);
   15d8a:	230f      	movs	r3, #15
   15d8c:	18fb      	adds	r3, r7, r3
   15d8e:	781b      	ldrb	r3, [r3, #0]
   15d90:	425a      	negs	r2, r3
   15d92:	4153      	adcs	r3, r2
   15d94:	b2db      	uxtb	r3, r3
}
   15d96:	0018      	movs	r0, r3
   15d98:	46bd      	mov	sp, r7
   15d9a:	b005      	add	sp, #20
   15d9c:	bd90      	pop	{r4, r7, pc}
   15d9e:	46c0      	nop			; (mov r8, r8)
   15da0:	200006ec 	.word	0x200006ec
   15da4:	0002d9ad 	.word	0x0002d9ad
   15da8:	0002e3ad 	.word	0x0002e3ad

00015dac <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   15dac:	b580      	push	{r7, lr}
   15dae:	b09e      	sub	sp, #120	; 0x78
   15db0:	af00      	add	r7, sp, #0
   15db2:	60f8      	str	r0, [r7, #12]
   15db4:	60b9      	str	r1, [r7, #8]
   15db6:	1dfb      	adds	r3, r7, #7
   15db8:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   15dba:	2376      	movs	r3, #118	; 0x76
   15dbc:	18fb      	adds	r3, r7, r3
   15dbe:	2201      	movs	r2, #1
   15dc0:	801a      	strh	r2, [r3, #0]
   15dc2:	2374      	movs	r3, #116	; 0x74
   15dc4:	18fb      	adds	r3, r7, r3
   15dc6:	2200      	movs	r2, #0
   15dc8:	801a      	strh	r2, [r3, #0]
   15dca:	236e      	movs	r3, #110	; 0x6e
   15dcc:	18fb      	adds	r3, r7, r3
   15dce:	2200      	movs	r2, #0
   15dd0:	801a      	strh	r2, [r3, #0]
   15dd2:	2372      	movs	r3, #114	; 0x72
   15dd4:	18fb      	adds	r3, r7, r3
   15dd6:	2200      	movs	r2, #0
   15dd8:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   15dda:	2324      	movs	r3, #36	; 0x24
   15ddc:	18fb      	adds	r3, r7, r3
   15dde:	0018      	movs	r0, r3
   15de0:	2341      	movs	r3, #65	; 0x41
   15de2:	001a      	movs	r2, r3
   15de4:	2100      	movs	r1, #0
   15de6:	4b92      	ldr	r3, [pc, #584]	; (16030 <rename_to_unique+0x284>)
   15de8:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   15dea:	2318      	movs	r3, #24
   15dec:	18fb      	adds	r3, r7, r3
   15dee:	0018      	movs	r0, r3
   15df0:	2309      	movs	r3, #9
   15df2:	001a      	movs	r2, r3
   15df4:	2100      	movs	r1, #0
   15df6:	4b8e      	ldr	r3, [pc, #568]	; (16030 <rename_to_unique+0x284>)
   15df8:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   15dfa:	2314      	movs	r3, #20
   15dfc:	18fb      	adds	r3, r7, r3
   15dfe:	2200      	movs	r2, #0
   15e00:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   15e02:	2300      	movs	r3, #0
   15e04:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   15e06:	2371      	movs	r3, #113	; 0x71
   15e08:	18fb      	adds	r3, r7, r3
   15e0a:	2200      	movs	r2, #0
   15e0c:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   15e0e:	68bb      	ldr	r3, [r7, #8]
   15e10:	2b00      	cmp	r3, #0
   15e12:	d101      	bne.n	15e18 <rename_to_unique+0x6c>
        return false;
   15e14:	2300      	movs	r3, #0
   15e16:	e106      	b.n	16026 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   15e18:	68ba      	ldr	r2, [r7, #8]
   15e1a:	68fb      	ldr	r3, [r7, #12]
   15e1c:	0011      	movs	r1, r2
   15e1e:	0018      	movs	r0, r3
   15e20:	4b84      	ldr	r3, [pc, #528]	; (16034 <rename_to_unique+0x288>)
   15e22:	4798      	blx	r3
   15e24:	0003      	movs	r3, r0
   15e26:	001a      	movs	r2, r3
   15e28:	2301      	movs	r3, #1
   15e2a:	4053      	eors	r3, r2
   15e2c:	b2db      	uxtb	r3, r3
   15e2e:	2b00      	cmp	r3, #0
   15e30:	d001      	beq.n	15e36 <rename_to_unique+0x8a>
        return true;
   15e32:	2301      	movs	r3, #1
   15e34:	e0f7      	b.n	16026 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   15e36:	68bb      	ldr	r3, [r7, #8]
   15e38:	0018      	movs	r0, r3
   15e3a:	4b7f      	ldr	r3, [pc, #508]	; (16038 <rename_to_unique+0x28c>)
   15e3c:	4798      	blx	r3
   15e3e:	0003      	movs	r3, r0
   15e40:	2b40      	cmp	r3, #64	; 0x40
   15e42:	d901      	bls.n	15e48 <rename_to_unique+0x9c>
        return false;
   15e44:	2300      	movs	r3, #0
   15e46:	e0ee      	b.n	16026 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   15e48:	68bb      	ldr	r3, [r7, #8]
   15e4a:	212e      	movs	r1, #46	; 0x2e
   15e4c:	0018      	movs	r0, r3
   15e4e:	4b7b      	ldr	r3, [pc, #492]	; (1603c <rename_to_unique+0x290>)
   15e50:	4798      	blx	r3
   15e52:	0003      	movs	r3, r0
   15e54:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   15e56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   15e58:	2b00      	cmp	r3, #0
   15e5a:	d052      	beq.n	15f02 <rename_to_unique+0x156>
        ext_len = strlen(p);
   15e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   15e5e:	0018      	movs	r0, r3
   15e60:	4b75      	ldr	r3, [pc, #468]	; (16038 <rename_to_unique+0x28c>)
   15e62:	4798      	blx	r3
   15e64:	0002      	movs	r2, r0
   15e66:	236e      	movs	r3, #110	; 0x6e
   15e68:	18fb      	adds	r3, r7, r3
   15e6a:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   15e6c:	236e      	movs	r3, #110	; 0x6e
   15e6e:	18fb      	adds	r3, r7, r3
   15e70:	881b      	ldrh	r3, [r3, #0]
   15e72:	2b07      	cmp	r3, #7
   15e74:	d837      	bhi.n	15ee6 <rename_to_unique+0x13a>
            valid_ext = true;
   15e76:	2371      	movs	r3, #113	; 0x71
   15e78:	18fb      	adds	r3, r7, r3
   15e7a:	2201      	movs	r2, #1
   15e7c:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   15e7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15e80:	2318      	movs	r3, #24
   15e82:	18fb      	adds	r3, r7, r3
   15e84:	0011      	movs	r1, r2
   15e86:	0018      	movs	r0, r3
   15e88:	4b6d      	ldr	r3, [pc, #436]	; (16040 <rename_to_unique+0x294>)
   15e8a:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   15e8c:	68bb      	ldr	r3, [r7, #8]
   15e8e:	0018      	movs	r0, r3
   15e90:	4b69      	ldr	r3, [pc, #420]	; (16038 <rename_to_unique+0x28c>)
   15e92:	4798      	blx	r3
   15e94:	0002      	movs	r2, r0
   15e96:	236e      	movs	r3, #110	; 0x6e
   15e98:	18fb      	adds	r3, r7, r3
   15e9a:	881b      	ldrh	r3, [r3, #0]
   15e9c:	1ad3      	subs	r3, r2, r3
   15e9e:	2b3c      	cmp	r3, #60	; 0x3c
   15ea0:	d911      	bls.n	15ec6 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   15ea2:	2374      	movs	r3, #116	; 0x74
   15ea4:	18fb      	adds	r3, r7, r3
   15ea6:	226e      	movs	r2, #110	; 0x6e
   15ea8:	18ba      	adds	r2, r7, r2
   15eaa:	8812      	ldrh	r2, [r2, #0]
   15eac:	213c      	movs	r1, #60	; 0x3c
   15eae:	1a8a      	subs	r2, r1, r2
   15eb0:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   15eb2:	2374      	movs	r3, #116	; 0x74
   15eb4:	18fb      	adds	r3, r7, r3
   15eb6:	881a      	ldrh	r2, [r3, #0]
   15eb8:	68b9      	ldr	r1, [r7, #8]
   15eba:	2324      	movs	r3, #36	; 0x24
   15ebc:	18fb      	adds	r3, r7, r3
   15ebe:	0018      	movs	r0, r3
   15ec0:	4b60      	ldr	r3, [pc, #384]	; (16044 <rename_to_unique+0x298>)
   15ec2:	4798      	blx	r3
   15ec4:	e02a      	b.n	15f1c <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   15ec6:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15ec8:	68bb      	ldr	r3, [r7, #8]
   15eca:	1ad2      	subs	r2, r2, r3
   15ecc:	2374      	movs	r3, #116	; 0x74
   15ece:	18fb      	adds	r3, r7, r3
   15ed0:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   15ed2:	2374      	movs	r3, #116	; 0x74
   15ed4:	18fb      	adds	r3, r7, r3
   15ed6:	881a      	ldrh	r2, [r3, #0]
   15ed8:	68b9      	ldr	r1, [r7, #8]
   15eda:	2324      	movs	r3, #36	; 0x24
   15edc:	18fb      	adds	r3, r7, r3
   15ede:	0018      	movs	r0, r3
   15ee0:	4b58      	ldr	r3, [pc, #352]	; (16044 <rename_to_unique+0x298>)
   15ee2:	4798      	blx	r3
   15ee4:	e01a      	b.n	15f1c <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   15ee6:	2374      	movs	r3, #116	; 0x74
   15ee8:	18fb      	adds	r3, r7, r3
   15eea:	223c      	movs	r2, #60	; 0x3c
   15eec:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   15eee:	2374      	movs	r3, #116	; 0x74
   15ef0:	18fb      	adds	r3, r7, r3
   15ef2:	881a      	ldrh	r2, [r3, #0]
   15ef4:	68b9      	ldr	r1, [r7, #8]
   15ef6:	2324      	movs	r3, #36	; 0x24
   15ef8:	18fb      	adds	r3, r7, r3
   15efa:	0018      	movs	r0, r3
   15efc:	4b51      	ldr	r3, [pc, #324]	; (16044 <rename_to_unique+0x298>)
   15efe:	4798      	blx	r3
   15f00:	e00c      	b.n	15f1c <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   15f02:	2374      	movs	r3, #116	; 0x74
   15f04:	18fb      	adds	r3, r7, r3
   15f06:	223c      	movs	r2, #60	; 0x3c
   15f08:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   15f0a:	2374      	movs	r3, #116	; 0x74
   15f0c:	18fb      	adds	r3, r7, r3
   15f0e:	881a      	ldrh	r2, [r3, #0]
   15f10:	68b9      	ldr	r1, [r7, #8]
   15f12:	2324      	movs	r3, #36	; 0x24
   15f14:	18fb      	adds	r3, r7, r3
   15f16:	0018      	movs	r0, r3
   15f18:	4b4a      	ldr	r3, [pc, #296]	; (16044 <rename_to_unique+0x298>)
   15f1a:	4798      	blx	r3
    }

    name[name_len++] = '-';
   15f1c:	2374      	movs	r3, #116	; 0x74
   15f1e:	18fb      	adds	r3, r7, r3
   15f20:	881b      	ldrh	r3, [r3, #0]
   15f22:	2274      	movs	r2, #116	; 0x74
   15f24:	18ba      	adds	r2, r7, r2
   15f26:	1c59      	adds	r1, r3, #1
   15f28:	8011      	strh	r1, [r2, #0]
   15f2a:	001a      	movs	r2, r3
   15f2c:	2324      	movs	r3, #36	; 0x24
   15f2e:	18fb      	adds	r3, r7, r3
   15f30:	212d      	movs	r1, #45	; 0x2d
   15f32:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   15f34:	2376      	movs	r3, #118	; 0x76
   15f36:	18fb      	adds	r3, r7, r3
   15f38:	2200      	movs	r2, #0
   15f3a:	801a      	strh	r2, [r3, #0]
   15f3c:	2372      	movs	r3, #114	; 0x72
   15f3e:	18fb      	adds	r3, r7, r3
   15f40:	2201      	movs	r2, #1
   15f42:	801a      	strh	r2, [r3, #0]
   15f44:	e010      	b.n	15f68 <rename_to_unique+0x1bc>
        count *= 10;
   15f46:	2372      	movs	r3, #114	; 0x72
   15f48:	18fa      	adds	r2, r7, r3
   15f4a:	2372      	movs	r3, #114	; 0x72
   15f4c:	18fb      	adds	r3, r7, r3
   15f4e:	881b      	ldrh	r3, [r3, #0]
   15f50:	1c19      	adds	r1, r3, #0
   15f52:	0089      	lsls	r1, r1, #2
   15f54:	18cb      	adds	r3, r1, r3
   15f56:	18db      	adds	r3, r3, r3
   15f58:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   15f5a:	2376      	movs	r3, #118	; 0x76
   15f5c:	18fb      	adds	r3, r7, r3
   15f5e:	881a      	ldrh	r2, [r3, #0]
   15f60:	2376      	movs	r3, #118	; 0x76
   15f62:	18fb      	adds	r3, r7, r3
   15f64:	3201      	adds	r2, #1
   15f66:	801a      	strh	r2, [r3, #0]
   15f68:	2376      	movs	r3, #118	; 0x76
   15f6a:	18fb      	adds	r3, r7, r3
   15f6c:	881b      	ldrh	r3, [r3, #0]
   15f6e:	2b02      	cmp	r3, #2
   15f70:	d9e9      	bls.n	15f46 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   15f72:	2376      	movs	r3, #118	; 0x76
   15f74:	18fb      	adds	r3, r7, r3
   15f76:	2201      	movs	r2, #1
   15f78:	801a      	strh	r2, [r3, #0]
   15f7a:	e04b      	b.n	16014 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   15f7c:	2376      	movs	r3, #118	; 0x76
   15f7e:	18fb      	adds	r3, r7, r3
   15f80:	881a      	ldrh	r2, [r3, #0]
   15f82:	4931      	ldr	r1, [pc, #196]	; (16048 <rename_to_unique+0x29c>)
   15f84:	2314      	movs	r3, #20
   15f86:	18fb      	adds	r3, r7, r3
   15f88:	0018      	movs	r0, r3
   15f8a:	4b30      	ldr	r3, [pc, #192]	; (1604c <rename_to_unique+0x2a0>)
   15f8c:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   15f8e:	2374      	movs	r3, #116	; 0x74
   15f90:	18fb      	adds	r3, r7, r3
   15f92:	881b      	ldrh	r3, [r3, #0]
   15f94:	2224      	movs	r2, #36	; 0x24
   15f96:	18ba      	adds	r2, r7, r2
   15f98:	18d3      	adds	r3, r2, r3
   15f9a:	2214      	movs	r2, #20
   15f9c:	18b9      	adds	r1, r7, r2
   15f9e:	2203      	movs	r2, #3
   15fa0:	0018      	movs	r0, r3
   15fa2:	4b28      	ldr	r3, [pc, #160]	; (16044 <rename_to_unique+0x298>)
   15fa4:	4798      	blx	r3
        if (valid_ext) {
   15fa6:	2371      	movs	r3, #113	; 0x71
   15fa8:	18fb      	adds	r3, r7, r3
   15faa:	781b      	ldrb	r3, [r3, #0]
   15fac:	2b00      	cmp	r3, #0
   15fae:	d00c      	beq.n	15fca <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   15fb0:	2374      	movs	r3, #116	; 0x74
   15fb2:	18fb      	adds	r3, r7, r3
   15fb4:	881b      	ldrh	r3, [r3, #0]
   15fb6:	3303      	adds	r3, #3
   15fb8:	2224      	movs	r2, #36	; 0x24
   15fba:	18ba      	adds	r2, r7, r2
   15fbc:	18d3      	adds	r3, r2, r3
   15fbe:	2218      	movs	r2, #24
   15fc0:	18ba      	adds	r2, r7, r2
   15fc2:	0011      	movs	r1, r2
   15fc4:	0018      	movs	r0, r3
   15fc6:	4b1e      	ldr	r3, [pc, #120]	; (16040 <rename_to_unique+0x294>)
   15fc8:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   15fca:	2324      	movs	r3, #36	; 0x24
   15fcc:	18fa      	adds	r2, r7, r3
   15fce:	68fb      	ldr	r3, [r7, #12]
   15fd0:	0011      	movs	r1, r2
   15fd2:	0018      	movs	r0, r3
   15fd4:	4b17      	ldr	r3, [pc, #92]	; (16034 <rename_to_unique+0x288>)
   15fd6:	4798      	blx	r3
   15fd8:	0003      	movs	r3, r0
   15fda:	001a      	movs	r2, r3
   15fdc:	2301      	movs	r3, #1
   15fde:	4053      	eors	r3, r2
   15fe0:	b2db      	uxtb	r3, r3
   15fe2:	2b00      	cmp	r3, #0
   15fe4:	d00f      	beq.n	16006 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   15fe6:	1dfb      	adds	r3, r7, #7
   15fe8:	781a      	ldrb	r2, [r3, #0]
   15fea:	68bb      	ldr	r3, [r7, #8]
   15fec:	2100      	movs	r1, #0
   15fee:	0018      	movs	r0, r3
   15ff0:	4b0f      	ldr	r3, [pc, #60]	; (16030 <rename_to_unique+0x284>)
   15ff2:	4798      	blx	r3
            strcpy(file_path_name, name);
   15ff4:	2324      	movs	r3, #36	; 0x24
   15ff6:	18fa      	adds	r2, r7, r3
   15ff8:	68bb      	ldr	r3, [r7, #8]
   15ffa:	0011      	movs	r1, r2
   15ffc:	0018      	movs	r0, r3
   15ffe:	4b10      	ldr	r3, [pc, #64]	; (16040 <rename_to_unique+0x294>)
   16000:	4798      	blx	r3
            return true;
   16002:	2301      	movs	r3, #1
   16004:	e00f      	b.n	16026 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   16006:	2376      	movs	r3, #118	; 0x76
   16008:	18fb      	adds	r3, r7, r3
   1600a:	881a      	ldrh	r2, [r3, #0]
   1600c:	2376      	movs	r3, #118	; 0x76
   1600e:	18fb      	adds	r3, r7, r3
   16010:	3201      	adds	r2, #1
   16012:	801a      	strh	r2, [r3, #0]
   16014:	2376      	movs	r3, #118	; 0x76
   16016:	18fa      	adds	r2, r7, r3
   16018:	2372      	movs	r3, #114	; 0x72
   1601a:	18fb      	adds	r3, r7, r3
   1601c:	8812      	ldrh	r2, [r2, #0]
   1601e:	881b      	ldrh	r3, [r3, #0]
   16020:	429a      	cmp	r2, r3
   16022:	d3ab      	bcc.n	15f7c <rename_to_unique+0x1d0>
        }
    }
    return false;
   16024:	2300      	movs	r3, #0
}
   16026:	0018      	movs	r0, r3
   16028:	46bd      	mov	sp, r7
   1602a:	b01e      	add	sp, #120	; 0x78
   1602c:	bd80      	pop	{r7, pc}
   1602e:	46c0      	nop			; (mov r8, r8)
   16030:	00034a5f 	.word	0x00034a5f
   16034:	00015d55 	.word	0x00015d55
   16038:	00034e17 	.word	0x00034e17
   1603c:	00034e71 	.word	0x00034e71
   16040:	00034dcb 	.word	0x00034dcb
   16044:	00034e47 	.word	0x00034e47
   16048:	000364d4 	.word	0x000364d4
   1604c:	00034d1d 	.word	0x00034d1d

00016050 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   16050:	b590      	push	{r4, r7, lr}
   16052:	b083      	sub	sp, #12
   16054:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   16056:	2001      	movs	r0, #1
   16058:	4b22      	ldr	r3, [pc, #136]	; (160e4 <start_download+0x94>)
   1605a:	4798      	blx	r3
   1605c:	0003      	movs	r3, r0
   1605e:	001a      	movs	r2, r3
   16060:	2301      	movs	r3, #1
   16062:	4053      	eors	r3, r2
   16064:	b2db      	uxtb	r3, r3
   16066:	2b00      	cmp	r3, #0
   16068:	d005      	beq.n	16076 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   1606a:	4b1f      	ldr	r3, [pc, #124]	; (160e8 <start_download+0x98>)
   1606c:	0019      	movs	r1, r3
   1606e:	2001      	movs	r0, #1
   16070:	4b1e      	ldr	r3, [pc, #120]	; (160ec <start_download+0x9c>)
   16072:	4798      	blx	r3
        return;
   16074:	e032      	b.n	160dc <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   16076:	2002      	movs	r0, #2
   16078:	4b1a      	ldr	r3, [pc, #104]	; (160e4 <start_download+0x94>)
   1607a:	4798      	blx	r3
   1607c:	0003      	movs	r3, r0
   1607e:	001a      	movs	r2, r3
   16080:	2301      	movs	r3, #1
   16082:	4053      	eors	r3, r2
   16084:	b2db      	uxtb	r3, r3
   16086:	2b00      	cmp	r3, #0
   16088:	d005      	beq.n	16096 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   1608a:	4b19      	ldr	r3, [pc, #100]	; (160f0 <start_download+0xa0>)
   1608c:	0019      	movs	r1, r3
   1608e:	2001      	movs	r0, #1
   16090:	4b16      	ldr	r3, [pc, #88]	; (160ec <start_download+0x9c>)
   16092:	4798      	blx	r3
        return;
   16094:	e022      	b.n	160dc <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   16096:	2004      	movs	r0, #4
   16098:	4b12      	ldr	r3, [pc, #72]	; (160e4 <start_download+0x94>)
   1609a:	4798      	blx	r3
   1609c:	1e03      	subs	r3, r0, #0
   1609e:	d005      	beq.n	160ac <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   160a0:	4b14      	ldr	r3, [pc, #80]	; (160f4 <start_download+0xa4>)
   160a2:	0019      	movs	r1, r3
   160a4:	2001      	movs	r0, #1
   160a6:	4b11      	ldr	r3, [pc, #68]	; (160ec <start_download+0x9c>)
   160a8:	4798      	blx	r3
        return;
   160aa:	e017      	b.n	160dc <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   160ac:	2008      	movs	r0, #8
   160ae:	4b0d      	ldr	r3, [pc, #52]	; (160e4 <start_download+0x94>)
   160b0:	4798      	blx	r3
   160b2:	1e03      	subs	r3, r0, #0
   160b4:	d005      	beq.n	160c2 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   160b6:	4b10      	ldr	r3, [pc, #64]	; (160f8 <start_download+0xa8>)
   160b8:	0019      	movs	r1, r3
   160ba:	2001      	movs	r0, #1
   160bc:	4b0b      	ldr	r3, [pc, #44]	; (160ec <start_download+0x9c>)
   160be:	4798      	blx	r3
        return;
   160c0:	e00c      	b.n	160dc <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   160c2:	4b0e      	ldr	r3, [pc, #56]	; (160fc <start_download+0xac>)
   160c4:	0019      	movs	r1, r3
   160c6:	2001      	movs	r0, #1
   160c8:	4b08      	ldr	r3, [pc, #32]	; (160ec <start_download+0x9c>)
   160ca:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   160cc:	490c      	ldr	r1, [pc, #48]	; (16100 <start_download+0xb0>)
   160ce:	480d      	ldr	r0, [pc, #52]	; (16104 <start_download+0xb4>)
   160d0:	2300      	movs	r3, #0
   160d2:	9300      	str	r3, [sp, #0]
   160d4:	2300      	movs	r3, #0
   160d6:	2201      	movs	r2, #1
   160d8:	4c0b      	ldr	r4, [pc, #44]	; (16108 <start_download+0xb8>)
   160da:	47a0      	blx	r4
}
   160dc:	46bd      	mov	sp, r7
   160de:	b001      	add	sp, #4
   160e0:	bd90      	pop	{r4, r7, pc}
   160e2:	46c0      	nop			; (mov r8, r8)
   160e4:	00015d29 	.word	0x00015d29
   160e8:	000364dc 	.word	0x000364dc
   160ec:	0001df01 	.word	0x0001df01
   160f0:	00036508 	.word	0x00036508
   160f4:	00036534 	.word	0x00036534
   160f8:	00036560 	.word	0x00036560
   160fc:	0003658c 	.word	0x0003658c
   16100:	000365b8 	.word	0x000365b8
   16104:	20004788 	.word	0x20004788
   16108:	00031001 	.word	0x00031001

0001610c <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   1610c:	b5b0      	push	{r4, r5, r7, lr}
   1610e:	b086      	sub	sp, #24
   16110:	af00      	add	r7, sp, #0
   16112:	6078      	str	r0, [r7, #4]
   16114:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   16116:	687b      	ldr	r3, [r7, #4]
   16118:	2b00      	cmp	r3, #0
   1611a:	d002      	beq.n	16122 <store_file_packet+0x16>
   1611c:	683b      	ldr	r3, [r7, #0]
   1611e:	2b00      	cmp	r3, #0
   16120:	d105      	bne.n	1612e <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   16122:	4b58      	ldr	r3, [pc, #352]	; (16284 <store_file_packet+0x178>)
   16124:	0019      	movs	r1, r3
   16126:	2001      	movs	r0, #1
   16128:	4b57      	ldr	r3, [pc, #348]	; (16288 <store_file_packet+0x17c>)
   1612a:	4798      	blx	r3
        return;
   1612c:	e0a6      	b.n	1627c <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   1612e:	2008      	movs	r0, #8
   16130:	4b56      	ldr	r3, [pc, #344]	; (1628c <store_file_packet+0x180>)
   16132:	4798      	blx	r3
   16134:	0003      	movs	r3, r0
   16136:	001a      	movs	r2, r3
   16138:	2301      	movs	r3, #1
   1613a:	4053      	eors	r3, r2
   1613c:	b2db      	uxtb	r3, r3
   1613e:	2b00      	cmp	r3, #0
   16140:	d055      	beq.n	161ee <store_file_packet+0xe2>
        char *cp = NULL;
   16142:	2300      	movs	r3, #0
   16144:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16146:	4b52      	ldr	r3, [pc, #328]	; (16290 <store_file_packet+0x184>)
   16148:	2230      	movs	r2, #48	; 0x30
   1614a:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   1614c:	4b50      	ldr	r3, [pc, #320]	; (16290 <store_file_packet+0x184>)
   1614e:	223a      	movs	r2, #58	; 0x3a
   16150:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   16152:	4b50      	ldr	r3, [pc, #320]	; (16294 <store_file_packet+0x188>)
   16154:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16156:	e002      	b.n	1615e <store_file_packet+0x52>
            cp--;
   16158:	697b      	ldr	r3, [r7, #20]
   1615a:	3b01      	subs	r3, #1
   1615c:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   1615e:	697b      	ldr	r3, [r7, #20]
   16160:	781b      	ldrb	r3, [r3, #0]
   16162:	2b2f      	cmp	r3, #47	; 0x2f
   16164:	d1f8      	bne.n	16158 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   16166:	697b      	ldr	r3, [r7, #20]
   16168:	0018      	movs	r0, r3
   1616a:	4b4b      	ldr	r3, [pc, #300]	; (16298 <store_file_packet+0x18c>)
   1616c:	4798      	blx	r3
   1616e:	0003      	movs	r3, r0
   16170:	2b01      	cmp	r3, #1
   16172:	d924      	bls.n	161be <store_file_packet+0xb2>
            cp++;
   16174:	697b      	ldr	r3, [r7, #20]
   16176:	3301      	adds	r3, #1
   16178:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   1617a:	697a      	ldr	r2, [r7, #20]
   1617c:	4b47      	ldr	r3, [pc, #284]	; (1629c <store_file_packet+0x190>)
   1617e:	0011      	movs	r1, r2
   16180:	0018      	movs	r0, r3
   16182:	4b47      	ldr	r3, [pc, #284]	; (162a0 <store_file_packet+0x194>)
   16184:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   16186:	4942      	ldr	r1, [pc, #264]	; (16290 <store_file_packet+0x184>)
   16188:	4b46      	ldr	r3, [pc, #280]	; (162a4 <store_file_packet+0x198>)
   1618a:	2240      	movs	r2, #64	; 0x40
   1618c:	0018      	movs	r0, r3
   1618e:	4b46      	ldr	r3, [pc, #280]	; (162a8 <store_file_packet+0x19c>)
   16190:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   16192:	4a3f      	ldr	r2, [pc, #252]	; (16290 <store_file_packet+0x184>)
   16194:	4b45      	ldr	r3, [pc, #276]	; (162ac <store_file_packet+0x1a0>)
   16196:	0019      	movs	r1, r3
   16198:	2001      	movs	r0, #1
   1619a:	4b3b      	ldr	r3, [pc, #236]	; (16288 <store_file_packet+0x17c>)
   1619c:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1619e:	2313      	movs	r3, #19
   161a0:	18fc      	adds	r4, r7, r3
   161a2:	493b      	ldr	r1, [pc, #236]	; (16290 <store_file_packet+0x184>)
   161a4:	4b3f      	ldr	r3, [pc, #252]	; (162a4 <store_file_packet+0x198>)
   161a6:	220a      	movs	r2, #10
   161a8:	0018      	movs	r0, r3
   161aa:	4b41      	ldr	r3, [pc, #260]	; (162b0 <store_file_packet+0x1a4>)
   161ac:	4798      	blx	r3
   161ae:	0003      	movs	r3, r0
   161b0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   161b2:	2313      	movs	r3, #19
   161b4:	18fb      	adds	r3, r7, r3
   161b6:	781b      	ldrb	r3, [r3, #0]
   161b8:	2b00      	cmp	r3, #0
   161ba:	d012      	beq.n	161e2 <store_file_packet+0xd6>
   161bc:	e008      	b.n	161d0 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   161be:	4b3d      	ldr	r3, [pc, #244]	; (162b4 <store_file_packet+0x1a8>)
   161c0:	0019      	movs	r1, r3
   161c2:	2001      	movs	r0, #1
   161c4:	4b30      	ldr	r3, [pc, #192]	; (16288 <store_file_packet+0x17c>)
   161c6:	4798      	blx	r3
            add_state(CANCELED);
   161c8:	2020      	movs	r0, #32
   161ca:	4b3b      	ldr	r3, [pc, #236]	; (162b8 <store_file_packet+0x1ac>)
   161cc:	4798      	blx	r3
            return;
   161ce:	e055      	b.n	1627c <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   161d0:	2313      	movs	r3, #19
   161d2:	18fb      	adds	r3, r7, r3
   161d4:	781a      	ldrb	r2, [r3, #0]
   161d6:	4b39      	ldr	r3, [pc, #228]	; (162bc <store_file_packet+0x1b0>)
   161d8:	0019      	movs	r1, r3
   161da:	2001      	movs	r0, #1
   161dc:	4b2a      	ldr	r3, [pc, #168]	; (16288 <store_file_packet+0x17c>)
   161de:	4798      	blx	r3
            return;
   161e0:	e04c      	b.n	1627c <store_file_packet+0x170>
        }

        received_file_size = 0;
   161e2:	4b37      	ldr	r3, [pc, #220]	; (162c0 <store_file_packet+0x1b4>)
   161e4:	2200      	movs	r2, #0
   161e6:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   161e8:	2008      	movs	r0, #8
   161ea:	4b33      	ldr	r3, [pc, #204]	; (162b8 <store_file_packet+0x1ac>)
   161ec:	4798      	blx	r3
    }

    if (data != NULL) {
   161ee:	687b      	ldr	r3, [r7, #4]
   161f0:	2b00      	cmp	r3, #0
   161f2:	d043      	beq.n	1627c <store_file_packet+0x170>
        UINT wsize = 0;
   161f4:	2300      	movs	r3, #0
   161f6:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   161f8:	2313      	movs	r3, #19
   161fa:	18fc      	adds	r4, r7, r3
   161fc:	230c      	movs	r3, #12
   161fe:	18fb      	adds	r3, r7, r3
   16200:	683a      	ldr	r2, [r7, #0]
   16202:	6879      	ldr	r1, [r7, #4]
   16204:	4827      	ldr	r0, [pc, #156]	; (162a4 <store_file_packet+0x198>)
   16206:	4d2f      	ldr	r5, [pc, #188]	; (162c4 <store_file_packet+0x1b8>)
   16208:	47a8      	blx	r5
   1620a:	0003      	movs	r3, r0
   1620c:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   1620e:	2313      	movs	r3, #19
   16210:	18fb      	adds	r3, r7, r3
   16212:	781b      	ldrb	r3, [r3, #0]
   16214:	2b00      	cmp	r3, #0
   16216:	d00c      	beq.n	16232 <store_file_packet+0x126>
            f_close(&file_object);
   16218:	4b22      	ldr	r3, [pc, #136]	; (162a4 <store_file_packet+0x198>)
   1621a:	0018      	movs	r0, r3
   1621c:	4b2a      	ldr	r3, [pc, #168]	; (162c8 <store_file_packet+0x1bc>)
   1621e:	4798      	blx	r3
            add_state(CANCELED);
   16220:	2020      	movs	r0, #32
   16222:	4b25      	ldr	r3, [pc, #148]	; (162b8 <store_file_packet+0x1ac>)
   16224:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   16226:	4b29      	ldr	r3, [pc, #164]	; (162cc <store_file_packet+0x1c0>)
   16228:	0019      	movs	r1, r3
   1622a:	2001      	movs	r0, #1
   1622c:	4b16      	ldr	r3, [pc, #88]	; (16288 <store_file_packet+0x17c>)
   1622e:	4798      	blx	r3
            return;
   16230:	e024      	b.n	1627c <store_file_packet+0x170>
        }

        received_file_size += wsize;
   16232:	4b23      	ldr	r3, [pc, #140]	; (162c0 <store_file_packet+0x1b4>)
   16234:	681a      	ldr	r2, [r3, #0]
   16236:	68fb      	ldr	r3, [r7, #12]
   16238:	18d2      	adds	r2, r2, r3
   1623a:	4b21      	ldr	r3, [pc, #132]	; (162c0 <store_file_packet+0x1b4>)
   1623c:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   1623e:	4b20      	ldr	r3, [pc, #128]	; (162c0 <store_file_packet+0x1b4>)
   16240:	681a      	ldr	r2, [r3, #0]
   16242:	4b23      	ldr	r3, [pc, #140]	; (162d0 <store_file_packet+0x1c4>)
   16244:	681b      	ldr	r3, [r3, #0]
   16246:	4923      	ldr	r1, [pc, #140]	; (162d4 <store_file_packet+0x1c8>)
   16248:	2001      	movs	r0, #1
   1624a:	4c0f      	ldr	r4, [pc, #60]	; (16288 <store_file_packet+0x17c>)
   1624c:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   1624e:	4b1c      	ldr	r3, [pc, #112]	; (162c0 <store_file_packet+0x1b4>)
   16250:	681a      	ldr	r2, [r3, #0]
   16252:	4b1f      	ldr	r3, [pc, #124]	; (162d0 <store_file_packet+0x1c4>)
   16254:	681b      	ldr	r3, [r3, #0]
   16256:	429a      	cmp	r2, r3
   16258:	d310      	bcc.n	1627c <store_file_packet+0x170>
            f_close(&file_object);
   1625a:	4b12      	ldr	r3, [pc, #72]	; (162a4 <store_file_packet+0x198>)
   1625c:	0018      	movs	r0, r3
   1625e:	4b1a      	ldr	r3, [pc, #104]	; (162c8 <store_file_packet+0x1bc>)
   16260:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   16262:	4b1d      	ldr	r3, [pc, #116]	; (162d8 <store_file_packet+0x1cc>)
   16264:	0019      	movs	r1, r3
   16266:	2001      	movs	r0, #1
   16268:	4b07      	ldr	r3, [pc, #28]	; (16288 <store_file_packet+0x17c>)
   1626a:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   1626c:	2100      	movs	r1, #0
   1626e:	2017      	movs	r0, #23
   16270:	4b1a      	ldr	r3, [pc, #104]	; (162dc <store_file_packet+0x1d0>)
   16272:	4798      	blx	r3
            add_state(COMPLETED);
   16274:	2010      	movs	r0, #16
   16276:	4b10      	ldr	r3, [pc, #64]	; (162b8 <store_file_packet+0x1ac>)
   16278:	4798      	blx	r3
            return;
   1627a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   1627c:	46bd      	mov	sp, r7
   1627e:	b006      	add	sp, #24
   16280:	bdb0      	pop	{r4, r5, r7, pc}
   16282:	46c0      	nop			; (mov r8, r8)
   16284:	000365e4 	.word	0x000365e4
   16288:	0001df01 	.word	0x0001df01
   1628c:	00015d29 	.word	0x00015d29
   16290:	200000a8 	.word	0x200000a8
   16294:	000365e3 	.word	0x000365e3
   16298:	00034e17 	.word	0x00034e17
   1629c:	200000aa 	.word	0x200000aa
   162a0:	00034dcb 	.word	0x00034dcb
   162a4:	200006ec 	.word	0x200006ec
   162a8:	00015dad 	.word	0x00015dad
   162ac:	00036648 	.word	0x00036648
   162b0:	0002d9ad 	.word	0x0002d9ad
   162b4:	00036608 	.word	0x00036608
   162b8:	00015d01 	.word	0x00015d01
   162bc:	00036670 	.word	0x00036670
   162c0:	20000714 	.word	0x20000714
   162c4:	0002dedd 	.word	0x0002dedd
   162c8:	0002e3ad 	.word	0x0002e3ad
   162cc:	000366a4 	.word	0x000366a4
   162d0:	20000710 	.word	0x20000710
   162d4:	000366e0 	.word	0x000366e0
   162d8:	00036714 	.word	0x00036714
   162dc:	00015c65 	.word	0x00015c65

000162e0 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   162e0:	b590      	push	{r4, r7, lr}
   162e2:	b085      	sub	sp, #20
   162e4:	af00      	add	r7, sp, #0
   162e6:	60f8      	str	r0, [r7, #12]
   162e8:	60b9      	str	r1, [r7, #8]
   162ea:	607a      	str	r2, [r7, #4]
    switch (type) {
   162ec:	68bb      	ldr	r3, [r7, #8]
   162ee:	2b04      	cmp	r3, #4
   162f0:	d900      	bls.n	162f4 <http_client_callback+0x14>
   162f2:	e077      	b.n	163e4 <http_client_callback+0x104>
   162f4:	68bb      	ldr	r3, [r7, #8]
   162f6:	009a      	lsls	r2, r3, #2
   162f8:	4b3c      	ldr	r3, [pc, #240]	; (163ec <http_client_callback+0x10c>)
   162fa:	18d3      	adds	r3, r2, r3
   162fc:	681b      	ldr	r3, [r3, #0]
   162fe:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   16300:	4b3b      	ldr	r3, [pc, #236]	; (163f0 <http_client_callback+0x110>)
   16302:	0019      	movs	r1, r3
   16304:	2001      	movs	r0, #1
   16306:	4b3b      	ldr	r3, [pc, #236]	; (163f4 <http_client_callback+0x114>)
   16308:	4798      	blx	r3
            break;
   1630a:	e06b      	b.n	163e4 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   1630c:	4b3a      	ldr	r3, [pc, #232]	; (163f8 <http_client_callback+0x118>)
   1630e:	0019      	movs	r1, r3
   16310:	2001      	movs	r0, #1
   16312:	4b38      	ldr	r3, [pc, #224]	; (163f4 <http_client_callback+0x114>)
   16314:	4798      	blx	r3
            add_state(GET_REQUESTED);
   16316:	2004      	movs	r0, #4
   16318:	4b38      	ldr	r3, [pc, #224]	; (163fc <http_client_callback+0x11c>)
   1631a:	4798      	blx	r3
            break;
   1631c:	e062      	b.n	163e4 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   1631e:	687b      	ldr	r3, [r7, #4]
   16320:	881b      	ldrh	r3, [r3, #0]
   16322:	001a      	movs	r2, r3
   16324:	687b      	ldr	r3, [r7, #4]
   16326:	685b      	ldr	r3, [r3, #4]
   16328:	4935      	ldr	r1, [pc, #212]	; (16400 <http_client_callback+0x120>)
   1632a:	2001      	movs	r0, #1
   1632c:	4c31      	ldr	r4, [pc, #196]	; (163f4 <http_client_callback+0x114>)
   1632e:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   16330:	687b      	ldr	r3, [r7, #4]
   16332:	881b      	ldrh	r3, [r3, #0]
   16334:	2bc8      	cmp	r3, #200	; 0xc8
   16336:	d10d      	bne.n	16354 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   16338:	687b      	ldr	r3, [r7, #4]
   1633a:	685a      	ldr	r2, [r3, #4]
   1633c:	4b31      	ldr	r3, [pc, #196]	; (16404 <http_client_callback+0x124>)
   1633e:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   16340:	4b31      	ldr	r3, [pc, #196]	; (16408 <http_client_callback+0x128>)
   16342:	2200      	movs	r2, #0
   16344:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   16346:	687b      	ldr	r3, [r7, #4]
   16348:	685a      	ldr	r2, [r3, #4]
   1634a:	2380      	movs	r3, #128	; 0x80
   1634c:	009b      	lsls	r3, r3, #2
   1634e:	429a      	cmp	r2, r3
   16350:	d843      	bhi.n	163da <http_client_callback+0xfa>
   16352:	e003      	b.n	1635c <http_client_callback+0x7c>
                add_state(CANCELED);
   16354:	2020      	movs	r0, #32
   16356:	4b29      	ldr	r3, [pc, #164]	; (163fc <http_client_callback+0x11c>)
   16358:	4798      	blx	r3
                return;
   1635a:	e043      	b.n	163e4 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   1635c:	687b      	ldr	r3, [r7, #4]
   1635e:	689a      	ldr	r2, [r3, #8]
   16360:	687b      	ldr	r3, [r7, #4]
   16362:	685b      	ldr	r3, [r3, #4]
   16364:	0019      	movs	r1, r3
   16366:	0010      	movs	r0, r2
   16368:	4b28      	ldr	r3, [pc, #160]	; (1640c <http_client_callback+0x12c>)
   1636a:	4798      	blx	r3
                add_state(COMPLETED);
   1636c:	2010      	movs	r0, #16
   1636e:	4b23      	ldr	r3, [pc, #140]	; (163fc <http_client_callback+0x11c>)
   16370:	4798      	blx	r3
            }
            break;
   16372:	e032      	b.n	163da <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   16374:	687b      	ldr	r3, [r7, #4]
   16376:	685a      	ldr	r2, [r3, #4]
   16378:	687b      	ldr	r3, [r7, #4]
   1637a:	681b      	ldr	r3, [r3, #0]
   1637c:	0019      	movs	r1, r3
   1637e:	0010      	movs	r0, r2
   16380:	4b22      	ldr	r3, [pc, #136]	; (1640c <http_client_callback+0x12c>)
   16382:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   16384:	687b      	ldr	r3, [r7, #4]
   16386:	7a1b      	ldrb	r3, [r3, #8]
   16388:	2b00      	cmp	r3, #0
   1638a:	d028      	beq.n	163de <http_client_callback+0xfe>
                add_state(COMPLETED);
   1638c:	2010      	movs	r0, #16
   1638e:	4b1b      	ldr	r3, [pc, #108]	; (163fc <http_client_callback+0x11c>)
   16390:	4798      	blx	r3
            }

            break;
   16392:	e024      	b.n	163de <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   16394:	687b      	ldr	r3, [r7, #4]
   16396:	681a      	ldr	r2, [r3, #0]
   16398:	4b1d      	ldr	r3, [pc, #116]	; (16410 <http_client_callback+0x130>)
   1639a:	0019      	movs	r1, r3
   1639c:	2001      	movs	r0, #1
   1639e:	4b15      	ldr	r3, [pc, #84]	; (163f4 <http_client_callback+0x114>)
   163a0:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   163a2:	687b      	ldr	r3, [r7, #4]
   163a4:	681b      	ldr	r3, [r3, #0]
   163a6:	330b      	adds	r3, #11
   163a8:	d11b      	bne.n	163e2 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   163aa:	2008      	movs	r0, #8
   163ac:	4b19      	ldr	r3, [pc, #100]	; (16414 <http_client_callback+0x134>)
   163ae:	4798      	blx	r3
   163b0:	1e03      	subs	r3, r0, #0
   163b2:	d006      	beq.n	163c2 <http_client_callback+0xe2>
                    f_close(&file_object);
   163b4:	4b18      	ldr	r3, [pc, #96]	; (16418 <http_client_callback+0x138>)
   163b6:	0018      	movs	r0, r3
   163b8:	4b18      	ldr	r3, [pc, #96]	; (1641c <http_client_callback+0x13c>)
   163ba:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   163bc:	2008      	movs	r0, #8
   163be:	4b18      	ldr	r3, [pc, #96]	; (16420 <http_client_callback+0x140>)
   163c0:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   163c2:	2004      	movs	r0, #4
   163c4:	4b13      	ldr	r3, [pc, #76]	; (16414 <http_client_callback+0x134>)
   163c6:	4798      	blx	r3
   163c8:	1e03      	subs	r3, r0, #0
   163ca:	d002      	beq.n	163d2 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   163cc:	2004      	movs	r0, #4
   163ce:	4b14      	ldr	r3, [pc, #80]	; (16420 <http_client_callback+0x140>)
   163d0:	4798      	blx	r3
                }

                start_download();
   163d2:	4b14      	ldr	r3, [pc, #80]	; (16424 <http_client_callback+0x144>)
   163d4:	4798      	blx	r3
            }

            break;
   163d6:	46c0      	nop			; (mov r8, r8)
   163d8:	e003      	b.n	163e2 <http_client_callback+0x102>
            break;
   163da:	46c0      	nop			; (mov r8, r8)
   163dc:	e002      	b.n	163e4 <http_client_callback+0x104>
            break;
   163de:	46c0      	nop			; (mov r8, r8)
   163e0:	e000      	b.n	163e4 <http_client_callback+0x104>
            break;
   163e2:	46c0      	nop			; (mov r8, r8)
    }
}
   163e4:	46bd      	mov	sp, r7
   163e6:	b005      	add	sp, #20
   163e8:	bd90      	pop	{r4, r7, pc}
   163ea:	46c0      	nop			; (mov r8, r8)
   163ec:	00036e64 	.word	0x00036e64
   163f0:	00036748 	.word	0x00036748
   163f4:	0001df01 	.word	0x0001df01
   163f8:	00036780 	.word	0x00036780
   163fc:	00015d01 	.word	0x00015d01
   16400:	000367ac 	.word	0x000367ac
   16404:	20000710 	.word	0x20000710
   16408:	20000714 	.word	0x20000714
   1640c:	0001610d 	.word	0x0001610d
   16410:	000367e8 	.word	0x000367e8
   16414:	00015d29 	.word	0x00015d29
   16418:	200006ec 	.word	0x200006ec
   1641c:	0002e3ad 	.word	0x0002e3ad
   16420:	00015ccd 	.word	0x00015ccd
   16424:	00016051 	.word	0x00016051

00016428 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   16428:	b580      	push	{r7, lr}
   1642a:	b082      	sub	sp, #8
   1642c:	af00      	add	r7, sp, #0
   1642e:	603a      	str	r2, [r7, #0]
   16430:	1dfb      	adds	r3, r7, #7
   16432:	1c02      	adds	r2, r0, #0
   16434:	701a      	strb	r2, [r3, #0]
   16436:	1dbb      	adds	r3, r7, #6
   16438:	1c0a      	adds	r2, r1, #0
   1643a:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   1643c:	683a      	ldr	r2, [r7, #0]
   1643e:	1dbb      	adds	r3, r7, #6
   16440:	7819      	ldrb	r1, [r3, #0]
   16442:	1dfb      	adds	r3, r7, #7
   16444:	781b      	ldrb	r3, [r3, #0]
   16446:	b25b      	sxtb	r3, r3
   16448:	0018      	movs	r0, r3
   1644a:	4b03      	ldr	r3, [pc, #12]	; (16458 <socket_cb+0x30>)
   1644c:	4798      	blx	r3
}
   1644e:	46c0      	nop			; (mov r8, r8)
   16450:	46bd      	mov	sp, r7
   16452:	b002      	add	sp, #8
   16454:	bd80      	pop	{r7, pc}
   16456:	46c0      	nop			; (mov r8, r8)
   16458:	00030d11 	.word	0x00030d11

0001645c <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   1645c:	b5b0      	push	{r4, r5, r7, lr}
   1645e:	b086      	sub	sp, #24
   16460:	af04      	add	r7, sp, #16
   16462:	6078      	str	r0, [r7, #4]
   16464:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   16466:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   16468:	22ff      	movs	r2, #255	; 0xff
   1646a:	4013      	ands	r3, r2
   1646c:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   1646e:	683b      	ldr	r3, [r7, #0]
   16470:	0a1b      	lsrs	r3, r3, #8
   16472:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   16474:	23ff      	movs	r3, #255	; 0xff
   16476:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   16478:	683a      	ldr	r2, [r7, #0]
   1647a:	0c12      	lsrs	r2, r2, #16
   1647c:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   1647e:	22ff      	movs	r2, #255	; 0xff
   16480:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   16482:	6839      	ldr	r1, [r7, #0]
   16484:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   16486:	000d      	movs	r5, r1
   16488:	6878      	ldr	r0, [r7, #4]
   1648a:	4909      	ldr	r1, [pc, #36]	; (164b0 <resolve_cb+0x54>)
   1648c:	9502      	str	r5, [sp, #8]
   1648e:	9201      	str	r2, [sp, #4]
   16490:	9300      	str	r3, [sp, #0]
   16492:	0023      	movs	r3, r4
   16494:	0002      	movs	r2, r0
   16496:	2001      	movs	r0, #1
   16498:	4c06      	ldr	r4, [pc, #24]	; (164b4 <resolve_cb+0x58>)
   1649a:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   1649c:	683a      	ldr	r2, [r7, #0]
   1649e:	687b      	ldr	r3, [r7, #4]
   164a0:	0011      	movs	r1, r2
   164a2:	0018      	movs	r0, r3
   164a4:	4b04      	ldr	r3, [pc, #16]	; (164b8 <resolve_cb+0x5c>)
   164a6:	4798      	blx	r3
}
   164a8:	46c0      	nop			; (mov r8, r8)
   164aa:	46bd      	mov	sp, r7
   164ac:	b002      	add	sp, #8
   164ae:	bdb0      	pop	{r4, r5, r7, pc}
   164b0:	00036818 	.word	0x00036818
   164b4:	0001df01 	.word	0x0001df01
   164b8:	00030e75 	.word	0x00030e75

000164bc <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   164bc:	b590      	push	{r4, r7, lr}
   164be:	b087      	sub	sp, #28
   164c0:	af02      	add	r7, sp, #8
   164c2:	0002      	movs	r2, r0
   164c4:	6039      	str	r1, [r7, #0]
   164c6:	1dfb      	adds	r3, r7, #7
   164c8:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   164ca:	1dfb      	adds	r3, r7, #7
   164cc:	781b      	ldrb	r3, [r3, #0]
   164ce:	2b2c      	cmp	r3, #44	; 0x2c
   164d0:	d002      	beq.n	164d8 <wifi_cb+0x1c>
   164d2:	2b32      	cmp	r3, #50	; 0x32
   164d4:	d03d      	beq.n	16552 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   164d6:	e06f      	b.n	165b8 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   164d8:	683b      	ldr	r3, [r7, #0]
   164da:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   164dc:	68fb      	ldr	r3, [r7, #12]
   164de:	781b      	ldrb	r3, [r3, #0]
   164e0:	2b01      	cmp	r3, #1
   164e2:	d107      	bne.n	164f4 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   164e4:	4b36      	ldr	r3, [pc, #216]	; (165c0 <wifi_cb+0x104>)
   164e6:	0019      	movs	r1, r3
   164e8:	2001      	movs	r0, #1
   164ea:	4b36      	ldr	r3, [pc, #216]	; (165c4 <wifi_cb+0x108>)
   164ec:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   164ee:	4b36      	ldr	r3, [pc, #216]	; (165c8 <wifi_cb+0x10c>)
   164f0:	4798      	blx	r3
            break;
   164f2:	e05e      	b.n	165b2 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   164f4:	68fb      	ldr	r3, [r7, #12]
   164f6:	781b      	ldrb	r3, [r3, #0]
   164f8:	2b00      	cmp	r3, #0
   164fa:	d15a      	bne.n	165b2 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   164fc:	4b33      	ldr	r3, [pc, #204]	; (165cc <wifi_cb+0x110>)
   164fe:	0019      	movs	r1, r3
   16500:	2001      	movs	r0, #1
   16502:	4b30      	ldr	r3, [pc, #192]	; (165c4 <wifi_cb+0x108>)
   16504:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   16506:	2002      	movs	r0, #2
   16508:	4b31      	ldr	r3, [pc, #196]	; (165d0 <wifi_cb+0x114>)
   1650a:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   1650c:	2008      	movs	r0, #8
   1650e:	4b31      	ldr	r3, [pc, #196]	; (165d4 <wifi_cb+0x118>)
   16510:	4798      	blx	r3
   16512:	1e03      	subs	r3, r0, #0
   16514:	d006      	beq.n	16524 <wifi_cb+0x68>
                    f_close(&file_object);
   16516:	4b30      	ldr	r3, [pc, #192]	; (165d8 <wifi_cb+0x11c>)
   16518:	0018      	movs	r0, r3
   1651a:	4b30      	ldr	r3, [pc, #192]	; (165dc <wifi_cb+0x120>)
   1651c:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1651e:	2008      	movs	r0, #8
   16520:	4b2b      	ldr	r3, [pc, #172]	; (165d0 <wifi_cb+0x114>)
   16522:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   16524:	2004      	movs	r0, #4
   16526:	4b2b      	ldr	r3, [pc, #172]	; (165d4 <wifi_cb+0x118>)
   16528:	4798      	blx	r3
   1652a:	1e03      	subs	r3, r0, #0
   1652c:	d002      	beq.n	16534 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   1652e:	2004      	movs	r0, #4
   16530:	4b27      	ldr	r3, [pc, #156]	; (165d0 <wifi_cb+0x114>)
   16532:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   16534:	4b2a      	ldr	r3, [pc, #168]	; (165e0 <wifi_cb+0x124>)
   16536:	2101      	movs	r1, #1
   16538:	0018      	movs	r0, r3
   1653a:	4b2a      	ldr	r3, [pc, #168]	; (165e4 <wifi_cb+0x128>)
   1653c:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   1653e:	4a2a      	ldr	r2, [pc, #168]	; (165e8 <wifi_cb+0x12c>)
   16540:	482a      	ldr	r0, [pc, #168]	; (165ec <wifi_cb+0x130>)
   16542:	23ff      	movs	r3, #255	; 0xff
   16544:	9300      	str	r3, [sp, #0]
   16546:	0013      	movs	r3, r2
   16548:	2202      	movs	r2, #2
   1654a:	2109      	movs	r1, #9
   1654c:	4c28      	ldr	r4, [pc, #160]	; (165f0 <wifi_cb+0x134>)
   1654e:	47a0      	blx	r4
            break;
   16550:	e02f      	b.n	165b2 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   16552:	683b      	ldr	r3, [r7, #0]
   16554:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16556:	68bb      	ldr	r3, [r7, #8]
   16558:	781b      	ldrb	r3, [r3, #0]
   1655a:	0018      	movs	r0, r3
   1655c:	68bb      	ldr	r3, [r7, #8]
   1655e:	3301      	adds	r3, #1
   16560:	781b      	ldrb	r3, [r3, #0]
   16562:	001c      	movs	r4, r3
   16564:	68bb      	ldr	r3, [r7, #8]
   16566:	3302      	adds	r3, #2
   16568:	781b      	ldrb	r3, [r3, #0]
   1656a:	001a      	movs	r2, r3
   1656c:	68bb      	ldr	r3, [r7, #8]
   1656e:	3303      	adds	r3, #3
   16570:	781b      	ldrb	r3, [r3, #0]
   16572:	4920      	ldr	r1, [pc, #128]	; (165f4 <wifi_cb+0x138>)
   16574:	9301      	str	r3, [sp, #4]
   16576:	9200      	str	r2, [sp, #0]
   16578:	0023      	movs	r3, r4
   1657a:	0002      	movs	r2, r0
   1657c:	2001      	movs	r0, #1
   1657e:	4c11      	ldr	r4, [pc, #68]	; (165c4 <wifi_cb+0x108>)
   16580:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   16582:	2002      	movs	r0, #2
   16584:	4b1c      	ldr	r3, [pc, #112]	; (165f8 <wifi_cb+0x13c>)
   16586:	4798      	blx	r3
            if (do_download_flag == 1) {
   16588:	4b1c      	ldr	r3, [pc, #112]	; (165fc <wifi_cb+0x140>)
   1658a:	781b      	ldrb	r3, [r3, #0]
   1658c:	2b01      	cmp	r3, #1
   1658e:	d102      	bne.n	16596 <wifi_cb+0xda>
                start_download();
   16590:	4b1b      	ldr	r3, [pc, #108]	; (16600 <wifi_cb+0x144>)
   16592:	4798      	blx	r3
        } break;
   16594:	e00f      	b.n	165b6 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16596:	4a1b      	ldr	r2, [pc, #108]	; (16604 <wifi_cb+0x148>)
   16598:	4b11      	ldr	r3, [pc, #68]	; (165e0 <wifi_cb+0x124>)
   1659a:	0011      	movs	r1, r2
   1659c:	0018      	movs	r0, r3
   1659e:	4b1a      	ldr	r3, [pc, #104]	; (16608 <wifi_cb+0x14c>)
   165a0:	4798      	blx	r3
   165a2:	1e03      	subs	r3, r0, #0
   165a4:	d007      	beq.n	165b6 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   165a6:	4b19      	ldr	r3, [pc, #100]	; (1660c <wifi_cb+0x150>)
   165a8:	0019      	movs	r1, r3
   165aa:	2001      	movs	r0, #1
   165ac:	4b05      	ldr	r3, [pc, #20]	; (165c4 <wifi_cb+0x108>)
   165ae:	4798      	blx	r3
        } break;
   165b0:	e001      	b.n	165b6 <wifi_cb+0xfa>
            break;
   165b2:	46c0      	nop			; (mov r8, r8)
   165b4:	e000      	b.n	165b8 <wifi_cb+0xfc>
        } break;
   165b6:	46c0      	nop			; (mov r8, r8)
    }
}
   165b8:	46c0      	nop			; (mov r8, r8)
   165ba:	46bd      	mov	sp, r7
   165bc:	b005      	add	sp, #20
   165be:	bd90      	pop	{r4, r7, pc}
   165c0:	00036848 	.word	0x00036848
   165c4:	0001df01 	.word	0x0001df01
   165c8:	000224e1 	.word	0x000224e1
   165cc:	00036868 	.word	0x00036868
   165d0:	00015ccd 	.word	0x00015ccd
   165d4:	00015d29 	.word	0x00015d29
   165d8:	200006ec 	.word	0x200006ec
   165dc:	0002e3ad 	.word	0x0002e3ad
   165e0:	20000718 	.word	0x20000718
   165e4:	0002f9bd 	.word	0x0002f9bd
   165e8:	0003688c 	.word	0x0003688c
   165ec:	00036898 	.word	0x00036898
   165f0:	0002200d 	.word	0x0002200d
   165f4:	000368a4 	.word	0x000368a4
   165f8:	00015d01 	.word	0x00015d01
   165fc:	200004b8 	.word	0x200004b8
   16600:	00016051 	.word	0x00016051
   16604:	000364c0 	.word	0x000364c0
   16608:	0002f889 	.word	0x0002f889
   1660c:	000368cc 	.word	0x000368cc

00016610 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   16610:	b590      	push	{r4, r7, lr}
   16612:	b083      	sub	sp, #12
   16614:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   16616:	4b29      	ldr	r3, [pc, #164]	; (166bc <init_storage+0xac>)
   16618:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   1661a:	4b29      	ldr	r3, [pc, #164]	; (166c0 <init_storage+0xb0>)
   1661c:	0019      	movs	r1, r3
   1661e:	2001      	movs	r0, #1
   16620:	4b28      	ldr	r3, [pc, #160]	; (166c4 <init_storage+0xb4>)
   16622:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   16624:	1dfc      	adds	r4, r7, #7
   16626:	2000      	movs	r0, #0
   16628:	4b27      	ldr	r3, [pc, #156]	; (166c8 <init_storage+0xb8>)
   1662a:	4798      	blx	r3
   1662c:	0003      	movs	r3, r0
   1662e:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   16630:	1dfb      	adds	r3, r7, #7
   16632:	781b      	ldrb	r3, [r3, #0]
   16634:	2b01      	cmp	r3, #1
   16636:	d110      	bne.n	1665a <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   16638:	4b24      	ldr	r3, [pc, #144]	; (166cc <init_storage+0xbc>)
   1663a:	0019      	movs	r1, r3
   1663c:	2001      	movs	r0, #1
   1663e:	4b21      	ldr	r3, [pc, #132]	; (166c4 <init_storage+0xb4>)
   16640:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   16642:	4b23      	ldr	r3, [pc, #140]	; (166d0 <init_storage+0xc0>)
   16644:	0019      	movs	r1, r3
   16646:	2001      	movs	r0, #1
   16648:	4b1e      	ldr	r3, [pc, #120]	; (166c4 <init_storage+0xb4>)
   1664a:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   1664c:	46c0      	nop			; (mov r8, r8)
   1664e:	2000      	movs	r0, #0
   16650:	4b20      	ldr	r3, [pc, #128]	; (166d4 <init_storage+0xc4>)
   16652:	4798      	blx	r3
   16654:	0003      	movs	r3, r0
   16656:	2b02      	cmp	r3, #2
   16658:	d1f9      	bne.n	1664e <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   1665a:	1dfb      	adds	r3, r7, #7
   1665c:	781b      	ldrb	r3, [r3, #0]
   1665e:	2b00      	cmp	r3, #0
   16660:	d1e0      	bne.n	16624 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   16662:	4b1d      	ldr	r3, [pc, #116]	; (166d8 <init_storage+0xc8>)
   16664:	0019      	movs	r1, r3
   16666:	2001      	movs	r0, #1
   16668:	4b16      	ldr	r3, [pc, #88]	; (166c4 <init_storage+0xb4>)
   1666a:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   1666c:	238c      	movs	r3, #140	; 0x8c
   1666e:	009a      	lsls	r2, r3, #2
   16670:	4b1a      	ldr	r3, [pc, #104]	; (166dc <init_storage+0xcc>)
   16672:	2100      	movs	r1, #0
   16674:	0018      	movs	r0, r3
   16676:	4b1a      	ldr	r3, [pc, #104]	; (166e0 <init_storage+0xd0>)
   16678:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   1667a:	1dbc      	adds	r4, r7, #6
   1667c:	4b17      	ldr	r3, [pc, #92]	; (166dc <init_storage+0xcc>)
   1667e:	0019      	movs	r1, r3
   16680:	2000      	movs	r0, #0
   16682:	4b18      	ldr	r3, [pc, #96]	; (166e4 <init_storage+0xd4>)
   16684:	4798      	blx	r3
   16686:	0003      	movs	r3, r0
   16688:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   1668a:	1dbb      	adds	r3, r7, #6
   1668c:	781b      	ldrb	r3, [r3, #0]
   1668e:	2b0b      	cmp	r3, #11
   16690:	d107      	bne.n	166a2 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   16692:	1dbb      	adds	r3, r7, #6
   16694:	781a      	ldrb	r2, [r3, #0]
   16696:	4b14      	ldr	r3, [pc, #80]	; (166e8 <init_storage+0xd8>)
   16698:	0019      	movs	r1, r3
   1669a:	2001      	movs	r0, #1
   1669c:	4b09      	ldr	r3, [pc, #36]	; (166c4 <init_storage+0xb4>)
   1669e:	4798      	blx	r3
            return;
   166a0:	e008      	b.n	166b4 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   166a2:	4b12      	ldr	r3, [pc, #72]	; (166ec <init_storage+0xdc>)
   166a4:	0019      	movs	r1, r3
   166a6:	2001      	movs	r0, #1
   166a8:	4b06      	ldr	r3, [pc, #24]	; (166c4 <init_storage+0xb4>)
   166aa:	4798      	blx	r3
        add_state(STORAGE_READY);
   166ac:	2001      	movs	r0, #1
   166ae:	4b10      	ldr	r3, [pc, #64]	; (166f0 <init_storage+0xe0>)
   166b0:	4798      	blx	r3
        return;
   166b2:	46c0      	nop			; (mov r8, r8)
    }
}
   166b4:	46bd      	mov	sp, r7
   166b6:	b003      	add	sp, #12
   166b8:	bd90      	pop	{r4, r7, pc}
   166ba:	46c0      	nop			; (mov r8, r8)
   166bc:	0001ed19 	.word	0x0001ed19
   166c0:	000368f0 	.word	0x000368f0
   166c4:	0001df01 	.word	0x0001df01
   166c8:	0001f1f5 	.word	0x0001f1f5
   166cc:	00036928 	.word	0x00036928
   166d0:	00036950 	.word	0x00036950
   166d4:	0001ed69 	.word	0x0001ed69
   166d8:	00036984 	.word	0x00036984
   166dc:	200004bc 	.word	0x200004bc
   166e0:	00034a5f 	.word	0x00034a5f
   166e4:	0002d955 	.word	0x0002d955
   166e8:	000369a8 	.word	0x000369a8
   166ec:	000369d8 	.word	0x000369d8
   166f0:	00015d01 	.word	0x00015d01

000166f4 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   166f4:	b580      	push	{r7, lr}
   166f6:	b082      	sub	sp, #8
   166f8:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   166fa:	1d3b      	adds	r3, r7, #4
   166fc:	0018      	movs	r0, r3
   166fe:	4b08      	ldr	r3, [pc, #32]	; (16720 <configure_timer+0x2c>)
   16700:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   16702:	1d3a      	adds	r2, r7, #4
   16704:	4b07      	ldr	r3, [pc, #28]	; (16724 <configure_timer+0x30>)
   16706:	0011      	movs	r1, r2
   16708:	0018      	movs	r0, r3
   1670a:	4b07      	ldr	r3, [pc, #28]	; (16728 <configure_timer+0x34>)
   1670c:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   1670e:	4b05      	ldr	r3, [pc, #20]	; (16724 <configure_timer+0x30>)
   16710:	0018      	movs	r0, r3
   16712:	4b06      	ldr	r3, [pc, #24]	; (1672c <configure_timer+0x38>)
   16714:	4798      	blx	r3
}
   16716:	46c0      	nop			; (mov r8, r8)
   16718:	46bd      	mov	sp, r7
   1671a:	b002      	add	sp, #8
   1671c:	bd80      	pop	{r7, pc}
   1671e:	46c0      	nop			; (mov r8, r8)
   16720:	000324a5 	.word	0x000324a5
   16724:	20004730 	.word	0x20004730
   16728:	000324c9 	.word	0x000324c9
   1672c:	000325b5 	.word	0x000325b5

00016730 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   16730:	b580      	push	{r7, lr}
   16732:	b088      	sub	sp, #32
   16734:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   16736:	003b      	movs	r3, r7
   16738:	0018      	movs	r0, r3
   1673a:	4b16      	ldr	r3, [pc, #88]	; (16794 <configure_http_client+0x64>)
   1673c:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   1673e:	003b      	movs	r3, r7
   16740:	2280      	movs	r2, #128	; 0x80
   16742:	0092      	lsls	r2, r2, #2
   16744:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   16746:	003b      	movs	r3, r7
   16748:	4a13      	ldr	r2, [pc, #76]	; (16798 <configure_http_client+0x68>)
   1674a:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   1674c:	003b      	movs	r3, r7
   1674e:	22bc      	movs	r2, #188	; 0xbc
   16750:	32ff      	adds	r2, #255	; 0xff
   16752:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   16754:	003b      	movs	r3, r7
   16756:	2201      	movs	r2, #1
   16758:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1675a:	003a      	movs	r2, r7
   1675c:	4b0f      	ldr	r3, [pc, #60]	; (1679c <configure_http_client+0x6c>)
   1675e:	0011      	movs	r1, r2
   16760:	0018      	movs	r0, r3
   16762:	4b0f      	ldr	r3, [pc, #60]	; (167a0 <configure_http_client+0x70>)
   16764:	4798      	blx	r3
   16766:	0003      	movs	r3, r0
   16768:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   1676a:	69fb      	ldr	r3, [r7, #28]
   1676c:	2b00      	cmp	r3, #0
   1676e:	da06      	bge.n	1677e <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   16770:	69fa      	ldr	r2, [r7, #28]
   16772:	4b0c      	ldr	r3, [pc, #48]	; (167a4 <configure_http_client+0x74>)
   16774:	0019      	movs	r1, r3
   16776:	2001      	movs	r0, #1
   16778:	4b0b      	ldr	r3, [pc, #44]	; (167a8 <configure_http_client+0x78>)
   1677a:	4798      	blx	r3
        while (1) {
   1677c:	e7fe      	b.n	1677c <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   1677e:	4a0b      	ldr	r2, [pc, #44]	; (167ac <configure_http_client+0x7c>)
   16780:	4b06      	ldr	r3, [pc, #24]	; (1679c <configure_http_client+0x6c>)
   16782:	0011      	movs	r1, r2
   16784:	0018      	movs	r0, r3
   16786:	4b0a      	ldr	r3, [pc, #40]	; (167b0 <configure_http_client+0x80>)
   16788:	4798      	blx	r3
}
   1678a:	46c0      	nop			; (mov r8, r8)
   1678c:	46bd      	mov	sp, r7
   1678e:	b008      	add	sp, #32
   16790:	bd80      	pop	{r7, pc}
   16792:	46c0      	nop			; (mov r8, r8)
   16794:	00030b39 	.word	0x00030b39
   16798:	20004730 	.word	0x20004730
   1679c:	20004788 	.word	0x20004788
   167a0:	00030b85 	.word	0x00030b85
   167a4:	000369fc 	.word	0x000369fc
   167a8:	0001df01 	.word	0x0001df01
   167ac:	000162e1 	.word	0x000162e1
   167b0:	00030c71 	.word	0x00030c71

000167b4 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   167b4:	b580      	push	{r7, lr}
   167b6:	b082      	sub	sp, #8
   167b8:	af00      	add	r7, sp, #0
   167ba:	603a      	str	r2, [r7, #0]
   167bc:	1dfb      	adds	r3, r7, #7
   167be:	1c02      	adds	r2, r0, #0
   167c0:	701a      	strb	r2, [r3, #0]
   167c2:	1dbb      	adds	r3, r7, #6
   167c4:	1c0a      	adds	r2, r1, #0
   167c6:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   167c8:	683a      	ldr	r2, [r7, #0]
   167ca:	1dbb      	adds	r3, r7, #6
   167cc:	7819      	ldrb	r1, [r3, #0]
   167ce:	1dfb      	adds	r3, r7, #7
   167d0:	781b      	ldrb	r3, [r3, #0]
   167d2:	b25b      	sxtb	r3, r3
   167d4:	0018      	movs	r0, r3
   167d6:	4b03      	ldr	r3, [pc, #12]	; (167e4 <socket_event_handler+0x30>)
   167d8:	4798      	blx	r3
}
   167da:	46c0      	nop			; (mov r8, r8)
   167dc:	46bd      	mov	sp, r7
   167de:	b002      	add	sp, #8
   167e0:	bd80      	pop	{r7, pc}
   167e2:	46c0      	nop			; (mov r8, r8)
   167e4:	0002f831 	.word	0x0002f831

000167e8 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   167e8:	b580      	push	{r7, lr}
   167ea:	b082      	sub	sp, #8
   167ec:	af00      	add	r7, sp, #0
   167ee:	6078      	str	r0, [r7, #4]
   167f0:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   167f2:	683a      	ldr	r2, [r7, #0]
   167f4:	687b      	ldr	r3, [r7, #4]
   167f6:	0011      	movs	r1, r2
   167f8:	0018      	movs	r0, r3
   167fa:	4b03      	ldr	r3, [pc, #12]	; (16808 <socket_resolve_handler+0x20>)
   167fc:	4798      	blx	r3
}
   167fe:	46c0      	nop			; (mov r8, r8)
   16800:	46bd      	mov	sp, r7
   16802:	b002      	add	sp, #8
   16804:	bd80      	pop	{r7, pc}
   16806:	46c0      	nop			; (mov r8, r8)
   16808:	0002f865 	.word	0x0002f865

0001680c <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   1680c:	b590      	push	{r4, r7, lr}
   1680e:	b089      	sub	sp, #36	; 0x24
   16810:	af02      	add	r7, sp, #8
   16812:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   16814:	2310      	movs	r3, #16
   16816:	18fb      	adds	r3, r7, r3
   16818:	2200      	movs	r2, #0
   1681a:	701a      	strb	r2, [r3, #0]
   1681c:	2310      	movs	r3, #16
   1681e:	18fb      	adds	r3, r7, r3
   16820:	2200      	movs	r2, #0
   16822:	705a      	strb	r2, [r3, #1]
   16824:	2310      	movs	r3, #16
   16826:	18fb      	adds	r3, r7, r3
   16828:	2200      	movs	r2, #0
   1682a:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1682c:	687b      	ldr	r3, [r7, #4]
   1682e:	685b      	ldr	r3, [r3, #4]
   16830:	685a      	ldr	r2, [r3, #4]
   16832:	687b      	ldr	r3, [r7, #4]
   16834:	685b      	ldr	r3, [r3, #4]
   16836:	689b      	ldr	r3, [r3, #8]
   16838:	492a      	ldr	r1, [pc, #168]	; (168e4 <SubscribeHandlerLedTopic+0xd8>)
   1683a:	2001      	movs	r0, #1
   1683c:	4c2a      	ldr	r4, [pc, #168]	; (168e8 <SubscribeHandlerLedTopic+0xdc>)
   1683e:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   16840:	687b      	ldr	r3, [r7, #4]
   16842:	681b      	ldr	r3, [r3, #0]
   16844:	689b      	ldr	r3, [r3, #8]
   16846:	4929      	ldr	r1, [pc, #164]	; (168ec <SubscribeHandlerLedTopic+0xe0>)
   16848:	2204      	movs	r2, #4
   1684a:	0018      	movs	r0, r3
   1684c:	4b28      	ldr	r3, [pc, #160]	; (168f0 <SubscribeHandlerLedTopic+0xe4>)
   1684e:	4798      	blx	r3
   16850:	1e03      	subs	r3, r0, #0
   16852:	d143      	bne.n	168dc <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   16854:	687b      	ldr	r3, [r7, #4]
   16856:	681b      	ldr	r3, [r3, #0]
   16858:	689b      	ldr	r3, [r3, #8]
   1685a:	3304      	adds	r3, #4
   1685c:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   1685e:	2300      	movs	r3, #0
   16860:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   16862:	e015      	b.n	16890 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   16864:	697c      	ldr	r4, [r7, #20]
   16866:	1c63      	adds	r3, r4, #1
   16868:	617b      	str	r3, [r7, #20]
   1686a:	68fb      	ldr	r3, [r7, #12]
   1686c:	220c      	movs	r2, #12
   1686e:	18b9      	adds	r1, r7, r2
   16870:	220a      	movs	r2, #10
   16872:	0018      	movs	r0, r3
   16874:	4b1f      	ldr	r3, [pc, #124]	; (168f4 <SubscribeHandlerLedTopic+0xe8>)
   16876:	4798      	blx	r3
   16878:	0003      	movs	r3, r0
   1687a:	b2da      	uxtb	r2, r3
   1687c:	2310      	movs	r3, #16
   1687e:	18fb      	adds	r3, r7, r3
   16880:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   16882:	68fb      	ldr	r3, [r7, #12]
   16884:	781b      	ldrb	r3, [r3, #0]
   16886:	2b2c      	cmp	r3, #44	; 0x2c
   16888:	d10a      	bne.n	168a0 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   1688a:	68fb      	ldr	r3, [r7, #12]
   1688c:	3301      	adds	r3, #1
   1688e:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   16890:	697b      	ldr	r3, [r7, #20]
   16892:	2b02      	cmp	r3, #2
   16894:	dc05      	bgt.n	168a2 <SubscribeHandlerLedTopic+0x96>
   16896:	68fb      	ldr	r3, [r7, #12]
   16898:	781b      	ldrb	r3, [r3, #0]
   1689a:	2b00      	cmp	r3, #0
   1689c:	d1e2      	bne.n	16864 <SubscribeHandlerLedTopic+0x58>
   1689e:	e000      	b.n	168a2 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   168a0:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   168a2:	2310      	movs	r3, #16
   168a4:	18fb      	adds	r3, r7, r3
   168a6:	781b      	ldrb	r3, [r3, #0]
   168a8:	001a      	movs	r2, r3
   168aa:	2310      	movs	r3, #16
   168ac:	18fb      	adds	r3, r7, r3
   168ae:	785b      	ldrb	r3, [r3, #1]
   168b0:	0018      	movs	r0, r3
   168b2:	2310      	movs	r3, #16
   168b4:	18fb      	adds	r3, r7, r3
   168b6:	789b      	ldrb	r3, [r3, #2]
   168b8:	490f      	ldr	r1, [pc, #60]	; (168f8 <SubscribeHandlerLedTopic+0xec>)
   168ba:	9300      	str	r3, [sp, #0]
   168bc:	0003      	movs	r3, r0
   168be:	2001      	movs	r0, #1
   168c0:	4c09      	ldr	r4, [pc, #36]	; (168e8 <SubscribeHandlerLedTopic+0xdc>)
   168c2:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   168c4:	2310      	movs	r3, #16
   168c6:	18fb      	adds	r3, r7, r3
   168c8:	7818      	ldrb	r0, [r3, #0]
   168ca:	2310      	movs	r3, #16
   168cc:	18fb      	adds	r3, r7, r3
   168ce:	7859      	ldrb	r1, [r3, #1]
   168d0:	2310      	movs	r3, #16
   168d2:	18fb      	adds	r3, r7, r3
   168d4:	789b      	ldrb	r3, [r3, #2]
   168d6:	001a      	movs	r2, r3
   168d8:	4b08      	ldr	r3, [pc, #32]	; (168fc <SubscribeHandlerLedTopic+0xf0>)
   168da:	4798      	blx	r3
    }
}
   168dc:	46c0      	nop			; (mov r8, r8)
   168de:	46bd      	mov	sp, r7
   168e0:	b007      	add	sp, #28
   168e2:	bd90      	pop	{r4, r7, pc}
   168e4:	00036a44 	.word	0x00036a44
   168e8:	0001df01 	.word	0x0001df01
   168ec:	00036a4c 	.word	0x00036a4c
   168f0:	00034e25 	.word	0x00034e25
   168f4:	00034fd1 	.word	0x00034fd1
   168f8:	00036a54 	.word	0x00036a54
   168fc:	00015b95 	.word	0x00015b95

00016900 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   16900:	b590      	push	{r4, r7, lr}
   16902:	b08b      	sub	sp, #44	; 0x2c
   16904:	af00      	add	r7, sp, #0
   16906:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   16908:	230c      	movs	r3, #12
   1690a:	18fb      	adds	r3, r7, r3
   1690c:	2214      	movs	r2, #20
   1690e:	21ff      	movs	r1, #255	; 0xff
   16910:	0018      	movs	r0, r3
   16912:	4b48      	ldr	r3, [pc, #288]	; (16a34 <SubscribeHandlerGameTopic+0x134>)
   16914:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   16916:	687b      	ldr	r3, [r7, #4]
   16918:	681b      	ldr	r3, [r3, #0]
   1691a:	689b      	ldr	r3, [r3, #8]
   1691c:	4946      	ldr	r1, [pc, #280]	; (16a38 <SubscribeHandlerGameTopic+0x138>)
   1691e:	2209      	movs	r2, #9
   16920:	0018      	movs	r0, r3
   16922:	4b46      	ldr	r3, [pc, #280]	; (16a3c <SubscribeHandlerGameTopic+0x13c>)
   16924:	4798      	blx	r3
   16926:	1e03      	subs	r3, r0, #0
   16928:	d166      	bne.n	169f8 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   1692a:	4b45      	ldr	r3, [pc, #276]	; (16a40 <SubscribeHandlerGameTopic+0x140>)
   1692c:	0019      	movs	r1, r3
   1692e:	2001      	movs	r0, #1
   16930:	4b44      	ldr	r3, [pc, #272]	; (16a44 <SubscribeHandlerGameTopic+0x144>)
   16932:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16934:	687b      	ldr	r3, [r7, #4]
   16936:	685b      	ldr	r3, [r3, #4]
   16938:	685a      	ldr	r2, [r3, #4]
   1693a:	687b      	ldr	r3, [r7, #4]
   1693c:	685b      	ldr	r3, [r3, #4]
   1693e:	689b      	ldr	r3, [r3, #8]
   16940:	4941      	ldr	r1, [pc, #260]	; (16a48 <SubscribeHandlerGameTopic+0x148>)
   16942:	2001      	movs	r0, #1
   16944:	4c3f      	ldr	r4, [pc, #252]	; (16a44 <SubscribeHandlerGameTopic+0x144>)
   16946:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16948:	687b      	ldr	r3, [r7, #4]
   1694a:	681b      	ldr	r3, [r3, #0]
   1694c:	68da      	ldr	r2, [r3, #12]
   1694e:	687b      	ldr	r3, [r7, #4]
   16950:	681b      	ldr	r3, [r3, #0]
   16952:	689b      	ldr	r3, [r3, #8]
   16954:	493d      	ldr	r1, [pc, #244]	; (16a4c <SubscribeHandlerGameTopic+0x14c>)
   16956:	2001      	movs	r0, #1
   16958:	4c3a      	ldr	r4, [pc, #232]	; (16a44 <SubscribeHandlerGameTopic+0x144>)
   1695a:	47a0      	blx	r4

        int nb = 0;
   1695c:	2300      	movs	r3, #0
   1695e:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   16960:	687b      	ldr	r3, [r7, #4]
   16962:	681b      	ldr	r3, [r3, #0]
   16964:	689b      	ldr	r3, [r3, #8]
   16966:	3309      	adds	r3, #9
   16968:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   1696a:	e015      	b.n	16998 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   1696c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1696e:	1c63      	adds	r3, r4, #1
   16970:	627b      	str	r3, [r7, #36]	; 0x24
   16972:	68bb      	ldr	r3, [r7, #8]
   16974:	2208      	movs	r2, #8
   16976:	18b9      	adds	r1, r7, r2
   16978:	220a      	movs	r2, #10
   1697a:	0018      	movs	r0, r3
   1697c:	4b34      	ldr	r3, [pc, #208]	; (16a50 <SubscribeHandlerGameTopic+0x150>)
   1697e:	4798      	blx	r3
   16980:	0003      	movs	r3, r0
   16982:	b2da      	uxtb	r2, r3
   16984:	230c      	movs	r3, #12
   16986:	18fb      	adds	r3, r7, r3
   16988:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   1698a:	68bb      	ldr	r3, [r7, #8]
   1698c:	781b      	ldrb	r3, [r3, #0]
   1698e:	2b2c      	cmp	r3, #44	; 0x2c
   16990:	d10a      	bne.n	169a8 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   16992:	68bb      	ldr	r3, [r7, #8]
   16994:	3301      	adds	r3, #1
   16996:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   16998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1699a:	2b13      	cmp	r3, #19
   1699c:	dc05      	bgt.n	169aa <SubscribeHandlerGameTopic+0xaa>
   1699e:	68bb      	ldr	r3, [r7, #8]
   169a0:	781b      	ldrb	r3, [r3, #0]
   169a2:	2b00      	cmp	r3, #0
   169a4:	d1e2      	bne.n	1696c <SubscribeHandlerGameTopic+0x6c>
   169a6:	e000      	b.n	169aa <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   169a8:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   169aa:	4b2a      	ldr	r3, [pc, #168]	; (16a54 <SubscribeHandlerGameTopic+0x154>)
   169ac:	0019      	movs	r1, r3
   169ae:	2001      	movs	r0, #1
   169b0:	4b24      	ldr	r3, [pc, #144]	; (16a44 <SubscribeHandlerGameTopic+0x144>)
   169b2:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   169b4:	2300      	movs	r3, #0
   169b6:	623b      	str	r3, [r7, #32]
   169b8:	e00d      	b.n	169d6 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   169ba:	230c      	movs	r3, #12
   169bc:	18fa      	adds	r2, r7, r3
   169be:	6a3b      	ldr	r3, [r7, #32]
   169c0:	18d3      	adds	r3, r2, r3
   169c2:	781b      	ldrb	r3, [r3, #0]
   169c4:	001a      	movs	r2, r3
   169c6:	4b24      	ldr	r3, [pc, #144]	; (16a58 <SubscribeHandlerGameTopic+0x158>)
   169c8:	0019      	movs	r1, r3
   169ca:	2001      	movs	r0, #1
   169cc:	4b1d      	ldr	r3, [pc, #116]	; (16a44 <SubscribeHandlerGameTopic+0x144>)
   169ce:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   169d0:	6a3b      	ldr	r3, [r7, #32]
   169d2:	3301      	adds	r3, #1
   169d4:	623b      	str	r3, [r7, #32]
   169d6:	6a3b      	ldr	r3, [r7, #32]
   169d8:	2b13      	cmp	r3, #19
   169da:	ddee      	ble.n	169ba <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   169dc:	230c      	movs	r3, #12
   169de:	18fb      	adds	r3, r7, r3
   169e0:	0018      	movs	r0, r3
   169e2:	4b1e      	ldr	r3, [pc, #120]	; (16a5c <SubscribeHandlerGameTopic+0x15c>)
   169e4:	4798      	blx	r3
   169e6:	0003      	movs	r3, r0
   169e8:	2b01      	cmp	r3, #1
   169ea:	d11e      	bne.n	16a2a <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   169ec:	4b1c      	ldr	r3, [pc, #112]	; (16a60 <SubscribeHandlerGameTopic+0x160>)
   169ee:	0019      	movs	r1, r3
   169f0:	2001      	movs	r0, #1
   169f2:	4b14      	ldr	r3, [pc, #80]	; (16a44 <SubscribeHandlerGameTopic+0x144>)
   169f4:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   169f6:	e018      	b.n	16a2a <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   169f8:	4b1a      	ldr	r3, [pc, #104]	; (16a64 <SubscribeHandlerGameTopic+0x164>)
   169fa:	0019      	movs	r1, r3
   169fc:	2001      	movs	r0, #1
   169fe:	4b11      	ldr	r3, [pc, #68]	; (16a44 <SubscribeHandlerGameTopic+0x144>)
   16a00:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16a02:	687b      	ldr	r3, [r7, #4]
   16a04:	685b      	ldr	r3, [r3, #4]
   16a06:	685a      	ldr	r2, [r3, #4]
   16a08:	687b      	ldr	r3, [r7, #4]
   16a0a:	685b      	ldr	r3, [r3, #4]
   16a0c:	689b      	ldr	r3, [r3, #8]
   16a0e:	490e      	ldr	r1, [pc, #56]	; (16a48 <SubscribeHandlerGameTopic+0x148>)
   16a10:	2001      	movs	r0, #1
   16a12:	4c0c      	ldr	r4, [pc, #48]	; (16a44 <SubscribeHandlerGameTopic+0x144>)
   16a14:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16a16:	687b      	ldr	r3, [r7, #4]
   16a18:	681b      	ldr	r3, [r3, #0]
   16a1a:	68da      	ldr	r2, [r3, #12]
   16a1c:	687b      	ldr	r3, [r7, #4]
   16a1e:	681b      	ldr	r3, [r3, #0]
   16a20:	689b      	ldr	r3, [r3, #8]
   16a22:	490a      	ldr	r1, [pc, #40]	; (16a4c <SubscribeHandlerGameTopic+0x14c>)
   16a24:	2001      	movs	r0, #1
   16a26:	4c07      	ldr	r4, [pc, #28]	; (16a44 <SubscribeHandlerGameTopic+0x144>)
   16a28:	47a0      	blx	r4
}
   16a2a:	46c0      	nop			; (mov r8, r8)
   16a2c:	46bd      	mov	sp, r7
   16a2e:	b00b      	add	sp, #44	; 0x2c
   16a30:	bd90      	pop	{r4, r7, pc}
   16a32:	46c0      	nop			; (mov r8, r8)
   16a34:	00034a5f 	.word	0x00034a5f
   16a38:	00036a68 	.word	0x00036a68
   16a3c:	00034e25 	.word	0x00034e25
   16a40:	00036a74 	.word	0x00036a74
   16a44:	0001df01 	.word	0x0001df01
   16a48:	00036a44 	.word	0x00036a44
   16a4c:	00036a90 	.word	0x00036a90
   16a50:	00034fd1 	.word	0x00034fd1
   16a54:	00036a98 	.word	0x00036a98
   16a58:	00036aac 	.word	0x00036aac
   16a5c:	000139f5 	.word	0x000139f5
   16a60:	00036ab0 	.word	0x00036ab0
   16a64:	00036acc 	.word	0x00036acc

00016a68 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   16a68:	b590      	push	{r4, r7, lr}
   16a6a:	b083      	sub	sp, #12
   16a6c:	af00      	add	r7, sp, #0
   16a6e:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
   16a70:	4b09      	ldr	r3, [pc, #36]	; (16a98 <SubscribeHandlerImuTopic+0x30>)
   16a72:	0019      	movs	r1, r3
   16a74:	2001      	movs	r0, #1
   16a76:	4b09      	ldr	r3, [pc, #36]	; (16a9c <SubscribeHandlerImuTopic+0x34>)
   16a78:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16a7a:	687b      	ldr	r3, [r7, #4]
   16a7c:	685b      	ldr	r3, [r3, #4]
   16a7e:	685a      	ldr	r2, [r3, #4]
   16a80:	687b      	ldr	r3, [r7, #4]
   16a82:	685b      	ldr	r3, [r3, #4]
   16a84:	689b      	ldr	r3, [r3, #8]
   16a86:	4906      	ldr	r1, [pc, #24]	; (16aa0 <SubscribeHandlerImuTopic+0x38>)
   16a88:	2001      	movs	r0, #1
   16a8a:	4c04      	ldr	r4, [pc, #16]	; (16a9c <SubscribeHandlerImuTopic+0x34>)
   16a8c:	47a0      	blx	r4
}
   16a8e:	46c0      	nop			; (mov r8, r8)
   16a90:	46bd      	mov	sp, r7
   16a92:	b003      	add	sp, #12
   16a94:	bd90      	pop	{r4, r7, pc}
   16a96:	46c0      	nop			; (mov r8, r8)
   16a98:	00036afc 	.word	0x00036afc
   16a9c:	0001df01 	.word	0x0001df01
   16aa0:	00036a44 	.word	0x00036a44

00016aa4 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   16aa4:	b590      	push	{r4, r7, lr}
   16aa6:	b08b      	sub	sp, #44	; 0x2c
   16aa8:	af06      	add	r7, sp, #24
   16aaa:	60f8      	str	r0, [r7, #12]
   16aac:	60b9      	str	r1, [r7, #8]
   16aae:	607a      	str	r2, [r7, #4]
    switch (type) {
   16ab0:	68bb      	ldr	r3, [r7, #8]
   16ab2:	2b01      	cmp	r3, #1
   16ab4:	d03b      	beq.n	16b2e <mqtt_callback+0x8a>
   16ab6:	2b05      	cmp	r3, #5
   16ab8:	d05e      	beq.n	16b78 <mqtt_callback+0xd4>
   16aba:	2b00      	cmp	r3, #0
   16abc:	d000      	beq.n	16ac0 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   16abe:	e061      	b.n	16b84 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   16ac0:	687b      	ldr	r3, [r7, #4]
   16ac2:	681b      	ldr	r3, [r3, #0]
   16ac4:	2b00      	cmp	r3, #0
   16ac6:	db25      	blt.n	16b14 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   16ac8:	4b30      	ldr	r3, [pc, #192]	; (16b8c <mqtt_callback+0xe8>)
   16aca:	0019      	movs	r1, r3
   16acc:	2001      	movs	r0, #1
   16ace:	4b30      	ldr	r3, [pc, #192]	; (16b90 <mqtt_callback+0xec>)
   16ad0:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   16ad2:	4930      	ldr	r1, [pc, #192]	; (16b94 <mqtt_callback+0xf0>)
   16ad4:	4a30      	ldr	r2, [pc, #192]	; (16b98 <mqtt_callback+0xf4>)
   16ad6:	68f8      	ldr	r0, [r7, #12]
   16ad8:	2300      	movs	r3, #0
   16ada:	9305      	str	r3, [sp, #20]
   16adc:	2300      	movs	r3, #0
   16ade:	9304      	str	r3, [sp, #16]
   16ae0:	2300      	movs	r3, #0
   16ae2:	9303      	str	r3, [sp, #12]
   16ae4:	2300      	movs	r3, #0
   16ae6:	9302      	str	r3, [sp, #8]
   16ae8:	2300      	movs	r3, #0
   16aea:	9301      	str	r3, [sp, #4]
   16aec:	4b2a      	ldr	r3, [pc, #168]	; (16b98 <mqtt_callback+0xf4>)
   16aee:	9300      	str	r3, [sp, #0]
   16af0:	000b      	movs	r3, r1
   16af2:	2101      	movs	r1, #1
   16af4:	4c29      	ldr	r4, [pc, #164]	; (16b9c <mqtt_callback+0xf8>)
   16af6:	47a0      	blx	r4
   16af8:	1e03      	subs	r3, r0, #0
   16afa:	d005      	beq.n	16b08 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   16afc:	4b28      	ldr	r3, [pc, #160]	; (16ba0 <mqtt_callback+0xfc>)
   16afe:	0019      	movs	r1, r3
   16b00:	2001      	movs	r0, #1
   16b02:	4b23      	ldr	r3, [pc, #140]	; (16b90 <mqtt_callback+0xec>)
   16b04:	4798      	blx	r3
        } break;
   16b06:	e03d      	b.n	16b84 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   16b08:	4b26      	ldr	r3, [pc, #152]	; (16ba4 <mqtt_callback+0x100>)
   16b0a:	0019      	movs	r1, r3
   16b0c:	2001      	movs	r0, #1
   16b0e:	4b20      	ldr	r3, [pc, #128]	; (16b90 <mqtt_callback+0xec>)
   16b10:	4798      	blx	r3
        } break;
   16b12:	e037      	b.n	16b84 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   16b14:	4a24      	ldr	r2, [pc, #144]	; (16ba8 <mqtt_callback+0x104>)
   16b16:	4b25      	ldr	r3, [pc, #148]	; (16bac <mqtt_callback+0x108>)
   16b18:	0019      	movs	r1, r3
   16b1a:	2001      	movs	r0, #1
   16b1c:	4b1c      	ldr	r3, [pc, #112]	; (16b90 <mqtt_callback+0xec>)
   16b1e:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   16b20:	4a21      	ldr	r2, [pc, #132]	; (16ba8 <mqtt_callback+0x104>)
   16b22:	68fb      	ldr	r3, [r7, #12]
   16b24:	0011      	movs	r1, r2
   16b26:	0018      	movs	r0, r3
   16b28:	4b21      	ldr	r3, [pc, #132]	; (16bb0 <mqtt_callback+0x10c>)
   16b2a:	4798      	blx	r3
        } break;
   16b2c:	e02a      	b.n	16b84 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   16b2e:	687b      	ldr	r3, [r7, #4]
   16b30:	781b      	ldrb	r3, [r3, #0]
   16b32:	2b00      	cmp	r3, #0
   16b34:	d117      	bne.n	16b66 <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   16b36:	4b1f      	ldr	r3, [pc, #124]	; (16bb4 <mqtt_callback+0x110>)
   16b38:	491f      	ldr	r1, [pc, #124]	; (16bb8 <mqtt_callback+0x114>)
   16b3a:	68f8      	ldr	r0, [r7, #12]
   16b3c:	2202      	movs	r2, #2
   16b3e:	4c1f      	ldr	r4, [pc, #124]	; (16bbc <mqtt_callback+0x118>)
   16b40:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   16b42:	4b1f      	ldr	r3, [pc, #124]	; (16bc0 <mqtt_callback+0x11c>)
   16b44:	491f      	ldr	r1, [pc, #124]	; (16bc4 <mqtt_callback+0x120>)
   16b46:	68f8      	ldr	r0, [r7, #12]
   16b48:	2202      	movs	r2, #2
   16b4a:	4c1c      	ldr	r4, [pc, #112]	; (16bbc <mqtt_callback+0x118>)
   16b4c:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   16b4e:	4b1e      	ldr	r3, [pc, #120]	; (16bc8 <mqtt_callback+0x124>)
   16b50:	491e      	ldr	r1, [pc, #120]	; (16bcc <mqtt_callback+0x128>)
   16b52:	68f8      	ldr	r0, [r7, #12]
   16b54:	2202      	movs	r2, #2
   16b56:	4c19      	ldr	r4, [pc, #100]	; (16bbc <mqtt_callback+0x118>)
   16b58:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   16b5a:	4b1d      	ldr	r3, [pc, #116]	; (16bd0 <mqtt_callback+0x12c>)
   16b5c:	0019      	movs	r1, r3
   16b5e:	2001      	movs	r0, #1
   16b60:	4b0b      	ldr	r3, [pc, #44]	; (16b90 <mqtt_callback+0xec>)
   16b62:	4798      	blx	r3
            break;
   16b64:	e00e      	b.n	16b84 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   16b66:	687b      	ldr	r3, [r7, #4]
   16b68:	781b      	ldrb	r3, [r3, #0]
   16b6a:	001a      	movs	r2, r3
   16b6c:	4b19      	ldr	r3, [pc, #100]	; (16bd4 <mqtt_callback+0x130>)
   16b6e:	0019      	movs	r1, r3
   16b70:	2001      	movs	r0, #1
   16b72:	4b07      	ldr	r3, [pc, #28]	; (16b90 <mqtt_callback+0xec>)
   16b74:	4798      	blx	r3
            break;
   16b76:	e005      	b.n	16b84 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   16b78:	4b17      	ldr	r3, [pc, #92]	; (16bd8 <mqtt_callback+0x134>)
   16b7a:	0019      	movs	r1, r3
   16b7c:	2001      	movs	r0, #1
   16b7e:	4b04      	ldr	r3, [pc, #16]	; (16b90 <mqtt_callback+0xec>)
   16b80:	4798      	blx	r3
            break;
   16b82:	46c0      	nop			; (mov r8, r8)
}
   16b84:	46c0      	nop			; (mov r8, r8)
   16b86:	46bd      	mov	sp, r7
   16b88:	b005      	add	sp, #20
   16b8a:	bd90      	pop	{r4, r7, pc}
   16b8c:	00036b60 	.word	0x00036b60
   16b90:	0001df01 	.word	0x0001df01
   16b94:	00036b7c 	.word	0x00036b7c
   16b98:	00036b8c 	.word	0x00036b8c
   16b9c:	0002f8d1 	.word	0x0002f8d1
   16ba0:	00036b98 	.word	0x00036b98
   16ba4:	00036bc0 	.word	0x00036bc0
   16ba8:	000364c0 	.word	0x000364c0
   16bac:	00036bdc 	.word	0x00036bdc
   16bb0:	0002f889 	.word	0x0002f889
   16bb4:	00016901 	.word	0x00016901
   16bb8:	00036c14 	.word	0x00036c14
   16bbc:	0002fa71 	.word	0x0002fa71
   16bc0:	0001680d 	.word	0x0001680d
   16bc4:	00036b3c 	.word	0x00036b3c
   16bc8:	00016a69 	.word	0x00016a69
   16bcc:	00036c28 	.word	0x00036c28
   16bd0:	00036c3c 	.word	0x00036c3c
   16bd4:	00036c50 	.word	0x00036c50
   16bd8:	00036c84 	.word	0x00036c84

00016bdc <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   16bdc:	b580      	push	{r7, lr}
   16bde:	b088      	sub	sp, #32
   16be0:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   16be2:	1d3b      	adds	r3, r7, #4
   16be4:	0018      	movs	r0, r3
   16be6:	4b1f      	ldr	r3, [pc, #124]	; (16c64 <configure_mqtt+0x88>)
   16be8:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   16bea:	1d3b      	adds	r3, r7, #4
   16bec:	4a1e      	ldr	r2, [pc, #120]	; (16c68 <configure_mqtt+0x8c>)
   16bee:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   16bf0:	1d3b      	adds	r3, r7, #4
   16bf2:	2280      	movs	r2, #128	; 0x80
   16bf4:	0092      	lsls	r2, r2, #2
   16bf6:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   16bf8:	1d3b      	adds	r3, r7, #4
   16bfa:	4a1c      	ldr	r2, [pc, #112]	; (16c6c <configure_mqtt+0x90>)
   16bfc:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   16bfe:	1d3b      	adds	r3, r7, #4
   16c00:	2280      	movs	r2, #128	; 0x80
   16c02:	0092      	lsls	r2, r2, #2
   16c04:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   16c06:	1d3b      	adds	r3, r7, #4
   16c08:	4a19      	ldr	r2, [pc, #100]	; (16c70 <configure_mqtt+0x94>)
   16c0a:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   16c0c:	1d3b      	adds	r3, r7, #4
   16c0e:	4a19      	ldr	r2, [pc, #100]	; (16c74 <configure_mqtt+0x98>)
   16c10:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   16c12:	1d3a      	adds	r2, r7, #4
   16c14:	4b18      	ldr	r3, [pc, #96]	; (16c78 <configure_mqtt+0x9c>)
   16c16:	0011      	movs	r1, r2
   16c18:	0018      	movs	r0, r3
   16c1a:	4b18      	ldr	r3, [pc, #96]	; (16c7c <configure_mqtt+0xa0>)
   16c1c:	4798      	blx	r3
   16c1e:	0003      	movs	r3, r0
   16c20:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   16c22:	69fb      	ldr	r3, [r7, #28]
   16c24:	2b00      	cmp	r3, #0
   16c26:	da06      	bge.n	16c36 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   16c28:	69fa      	ldr	r2, [r7, #28]
   16c2a:	4b15      	ldr	r3, [pc, #84]	; (16c80 <configure_mqtt+0xa4>)
   16c2c:	0019      	movs	r1, r3
   16c2e:	2001      	movs	r0, #1
   16c30:	4b14      	ldr	r3, [pc, #80]	; (16c84 <configure_mqtt+0xa8>)
   16c32:	4798      	blx	r3
        while (1) {
   16c34:	e7fe      	b.n	16c34 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   16c36:	4a14      	ldr	r2, [pc, #80]	; (16c88 <configure_mqtt+0xac>)
   16c38:	4b0f      	ldr	r3, [pc, #60]	; (16c78 <configure_mqtt+0x9c>)
   16c3a:	0011      	movs	r1, r2
   16c3c:	0018      	movs	r0, r3
   16c3e:	4b13      	ldr	r3, [pc, #76]	; (16c8c <configure_mqtt+0xb0>)
   16c40:	4798      	blx	r3
   16c42:	0003      	movs	r3, r0
   16c44:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   16c46:	69fb      	ldr	r3, [r7, #28]
   16c48:	2b00      	cmp	r3, #0
   16c4a:	da06      	bge.n	16c5a <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   16c4c:	69fa      	ldr	r2, [r7, #28]
   16c4e:	4b10      	ldr	r3, [pc, #64]	; (16c90 <configure_mqtt+0xb4>)
   16c50:	0019      	movs	r1, r3
   16c52:	2001      	movs	r0, #1
   16c54:	4b0b      	ldr	r3, [pc, #44]	; (16c84 <configure_mqtt+0xa8>)
   16c56:	4798      	blx	r3
        while (1) {
   16c58:	e7fe      	b.n	16c58 <configure_mqtt+0x7c>
        }
    }
}
   16c5a:	46c0      	nop			; (mov r8, r8)
   16c5c:	46bd      	mov	sp, r7
   16c5e:	b008      	add	sp, #32
   16c60:	bd80      	pop	{r7, pc}
   16c62:	46c0      	nop			; (mov r8, r8)
   16c64:	0002f7c9 	.word	0x0002f7c9
   16c68:	20000750 	.word	0x20000750
   16c6c:	20000950 	.word	0x20000950
   16c70:	0000075b 	.word	0x0000075b
   16c74:	00001770 	.word	0x00001770
   16c78:	20000718 	.word	0x20000718
   16c7c:	0002f719 	.word	0x0002f719
   16c80:	00036c98 	.word	0x00036c98
   16c84:	0001df01 	.word	0x0001df01
   16c88:	00016aa5 	.word	0x00016aa5
   16c8c:	0002f809 	.word	0x0002f809
   16c90:	00036ccc 	.word	0x00036ccc

00016c94 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   16c94:	b580      	push	{r7, lr}
   16c96:	b084      	sub	sp, #16
   16c98:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   16c9a:	1d3b      	adds	r3, r7, #4
   16c9c:	0018      	movs	r0, r3
   16c9e:	4b0b      	ldr	r3, [pc, #44]	; (16ccc <configure_extint_channel+0x38>)
   16ca0:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   16ca2:	1d3b      	adds	r3, r7, #4
   16ca4:	2237      	movs	r2, #55	; 0x37
   16ca6:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   16ca8:	1d3b      	adds	r3, r7, #4
   16caa:	2200      	movs	r2, #0
   16cac:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   16cae:	1d3b      	adds	r3, r7, #4
   16cb0:	2201      	movs	r2, #1
   16cb2:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   16cb4:	1d3b      	adds	r3, r7, #4
   16cb6:	2202      	movs	r2, #2
   16cb8:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   16cba:	1d3b      	adds	r3, r7, #4
   16cbc:	0019      	movs	r1, r3
   16cbe:	2007      	movs	r0, #7
   16cc0:	4b03      	ldr	r3, [pc, #12]	; (16cd0 <configure_extint_channel+0x3c>)
   16cc2:	4798      	blx	r3
}
   16cc4:	46c0      	nop			; (mov r8, r8)
   16cc6:	46bd      	mov	sp, r7
   16cc8:	b004      	add	sp, #16
   16cca:	bd80      	pop	{r7, pc}
   16ccc:	00026901 	.word	0x00026901
   16cd0:	00026935 	.word	0x00026935

00016cd4 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   16cd4:	b580      	push	{r7, lr}
   16cd6:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   16cd8:	4b06      	ldr	r3, [pc, #24]	; (16cf4 <configure_extint_callbacks+0x20>)
   16cda:	2200      	movs	r2, #0
   16cdc:	2107      	movs	r1, #7
   16cde:	0018      	movs	r0, r3
   16ce0:	4b05      	ldr	r3, [pc, #20]	; (16cf8 <configure_extint_callbacks+0x24>)
   16ce2:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   16ce4:	2100      	movs	r1, #0
   16ce6:	2007      	movs	r0, #7
   16ce8:	4b04      	ldr	r3, [pc, #16]	; (16cfc <configure_extint_callbacks+0x28>)
   16cea:	4798      	blx	r3
}
   16cec:	46c0      	nop			; (mov r8, r8)
   16cee:	46bd      	mov	sp, r7
   16cf0:	bd80      	pop	{r7, pc}
   16cf2:	46c0      	nop			; (mov r8, r8)
   16cf4:	00016d01 	.word	0x00016d01
   16cf8:	00026501 	.word	0x00026501
   16cfc:	00026565 	.word	0x00026565

00016d00 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   16d00:	b5b0      	push	{r4, r5, r7, lr}
   16d02:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   16d04:	4b0c      	ldr	r3, [pc, #48]	; (16d38 <extint_detection_callback+0x38>)
   16d06:	681b      	ldr	r3, [r3, #0]
   16d08:	1c5a      	adds	r2, r3, #1
   16d0a:	4b0b      	ldr	r3, [pc, #44]	; (16d38 <extint_detection_callback+0x38>)
   16d0c:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   16d0e:	4b0a      	ldr	r3, [pc, #40]	; (16d38 <extint_detection_callback+0x38>)
   16d10:	681b      	ldr	r3, [r3, #0]
   16d12:	2b28      	cmp	r3, #40	; 0x28
   16d14:	d902      	bls.n	16d1c <extint_detection_callback+0x1c>
   16d16:	4b08      	ldr	r3, [pc, #32]	; (16d38 <extint_detection_callback+0x38>)
   16d18:	2201      	movs	r2, #1
   16d1a:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   16d1c:	4b06      	ldr	r3, [pc, #24]	; (16d38 <extint_detection_callback+0x38>)
   16d1e:	681b      	ldr	r3, [r3, #0]
   16d20:	4a06      	ldr	r2, [pc, #24]	; (16d3c <extint_detection_callback+0x3c>)
   16d22:	4807      	ldr	r0, [pc, #28]	; (16d40 <extint_detection_callback+0x40>)
   16d24:	213f      	movs	r1, #63	; 0x3f
   16d26:	4c07      	ldr	r4, [pc, #28]	; (16d44 <extint_detection_callback+0x44>)
   16d28:	47a0      	blx	r4
    isPressed = true;
   16d2a:	4b07      	ldr	r3, [pc, #28]	; (16d48 <extint_detection_callback+0x48>)
   16d2c:	2201      	movs	r2, #1
   16d2e:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   16d30:	46c0      	nop			; (mov r8, r8)
   16d32:	46bd      	mov	sp, r7
   16d34:	bdb0      	pop	{r4, r5, r7, pc}
   16d36:	46c0      	nop			; (mov r8, r8)
   16d38:	200000a4 	.word	0x200000a4
   16d3c:	00036d00 	.word	0x00036d00
   16d40:	20000064 	.word	0x20000064
   16d44:	00034cb9 	.word	0x00034cb9
   16d48:	20000b50 	.word	0x20000b50

00016d4c <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   16d4c:	b580      	push	{r7, lr}
   16d4e:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   16d50:	4a15      	ldr	r2, [pc, #84]	; (16da8 <HTTP_DownloadFileInit+0x5c>)
   16d52:	4b16      	ldr	r3, [pc, #88]	; (16dac <HTTP_DownloadFileInit+0x60>)
   16d54:	0011      	movs	r1, r2
   16d56:	0018      	movs	r0, r3
   16d58:	4b15      	ldr	r3, [pc, #84]	; (16db0 <HTTP_DownloadFileInit+0x64>)
   16d5a:	4798      	blx	r3
   16d5c:	1e03      	subs	r3, r0, #0
   16d5e:	d008      	beq.n	16d72 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16d60:	4b14      	ldr	r3, [pc, #80]	; (16db4 <HTTP_DownloadFileInit+0x68>)
   16d62:	0019      	movs	r1, r3
   16d64:	2001      	movs	r0, #1
   16d66:	4b14      	ldr	r3, [pc, #80]	; (16db8 <HTTP_DownloadFileInit+0x6c>)
   16d68:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   16d6a:	e002      	b.n	16d72 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   16d6c:	2000      	movs	r0, #0
   16d6e:	4b13      	ldr	r3, [pc, #76]	; (16dbc <HTTP_DownloadFileInit+0x70>)
   16d70:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   16d72:	4b0e      	ldr	r3, [pc, #56]	; (16dac <HTTP_DownloadFileInit+0x60>)
   16d74:	2234      	movs	r2, #52	; 0x34
   16d76:	5c9b      	ldrb	r3, [r3, r2]
   16d78:	2b00      	cmp	r3, #0
   16d7a:	d1f7      	bne.n	16d6c <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   16d7c:	4b10      	ldr	r3, [pc, #64]	; (16dc0 <HTTP_DownloadFileInit+0x74>)
   16d7e:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   16d80:	4b10      	ldr	r3, [pc, #64]	; (16dc4 <HTTP_DownloadFileInit+0x78>)
   16d82:	2201      	movs	r2, #1
   16d84:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   16d86:	4a10      	ldr	r2, [pc, #64]	; (16dc8 <HTTP_DownloadFileInit+0x7c>)
   16d88:	4b10      	ldr	r3, [pc, #64]	; (16dcc <HTTP_DownloadFileInit+0x80>)
   16d8a:	0011      	movs	r1, r2
   16d8c:	0018      	movs	r0, r3
   16d8e:	4b10      	ldr	r3, [pc, #64]	; (16dd0 <HTTP_DownloadFileInit+0x84>)
   16d90:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   16d92:	4b10      	ldr	r3, [pc, #64]	; (16dd4 <HTTP_DownloadFileInit+0x88>)
   16d94:	4798      	blx	r3

    start_download();
   16d96:	4b10      	ldr	r3, [pc, #64]	; (16dd8 <HTTP_DownloadFileInit+0x8c>)
   16d98:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   16d9a:	4b10      	ldr	r3, [pc, #64]	; (16ddc <HTTP_DownloadFileInit+0x90>)
   16d9c:	2203      	movs	r2, #3
   16d9e:	701a      	strb	r2, [r3, #0]
}
   16da0:	46c0      	nop			; (mov r8, r8)
   16da2:	46bd      	mov	sp, r7
   16da4:	bd80      	pop	{r7, pc}
   16da6:	46c0      	nop			; (mov r8, r8)
   16da8:	000364c0 	.word	0x000364c0
   16dac:	20000718 	.word	0x20000718
   16db0:	0002f9bd 	.word	0x0002f9bd
   16db4:	000368cc 	.word	0x000368cc
   16db8:	0001df01 	.word	0x0001df01
   16dbc:	00021ff1 	.word	0x00021ff1
   16dc0:	000255ad 	.word	0x000255ad
   16dc4:	200004b8 	.word	0x200004b8
   16dc8:	0001645d 	.word	0x0001645d
   16dcc:	00016429 	.word	0x00016429
   16dd0:	000255f5 	.word	0x000255f5
   16dd4:	0002555d 	.word	0x0002555d
   16dd8:	00016051 	.word	0x00016051
   16ddc:	200004a4 	.word	0x200004a4

00016de0 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   16de0:	b590      	push	{r4, r7, lr}
   16de2:	b085      	sub	sp, #20
   16de4:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16de6:	e009      	b.n	16dfc <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   16de8:	2000      	movs	r0, #0
   16dea:	4b2a      	ldr	r3, [pc, #168]	; (16e94 <HTTP_DownloadFileTransaction+0xb4>)
   16dec:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   16dee:	4b2a      	ldr	r3, [pc, #168]	; (16e98 <HTTP_DownloadFileTransaction+0xb8>)
   16df0:	0018      	movs	r0, r3
   16df2:	4b2a      	ldr	r3, [pc, #168]	; (16e9c <HTTP_DownloadFileTransaction+0xbc>)
   16df4:	4798      	blx	r3
        vTaskDelay(5);
   16df6:	2005      	movs	r0, #5
   16df8:	4b29      	ldr	r3, [pc, #164]	; (16ea0 <HTTP_DownloadFileTransaction+0xc0>)
   16dfa:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16dfc:	2010      	movs	r0, #16
   16dfe:	4b29      	ldr	r3, [pc, #164]	; (16ea4 <HTTP_DownloadFileTransaction+0xc4>)
   16e00:	4798      	blx	r3
   16e02:	0003      	movs	r3, r0
   16e04:	001a      	movs	r2, r3
   16e06:	2301      	movs	r3, #1
   16e08:	4053      	eors	r3, r2
   16e0a:	b2db      	uxtb	r3, r3
   16e0c:	2b00      	cmp	r3, #0
   16e0e:	d009      	beq.n	16e24 <HTTP_DownloadFileTransaction+0x44>
   16e10:	2020      	movs	r0, #32
   16e12:	4b24      	ldr	r3, [pc, #144]	; (16ea4 <HTTP_DownloadFileTransaction+0xc4>)
   16e14:	4798      	blx	r3
   16e16:	0003      	movs	r3, r0
   16e18:	001a      	movs	r2, r3
   16e1a:	2301      	movs	r3, #1
   16e1c:	4053      	eors	r3, r2
   16e1e:	b2db      	uxtb	r3, r3
   16e20:	2b00      	cmp	r3, #0
   16e22:	d1e1      	bne.n	16de8 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   16e24:	4b20      	ldr	r3, [pc, #128]	; (16ea8 <HTTP_DownloadFileTransaction+0xc8>)
   16e26:	4798      	blx	r3
    vTaskDelay(1000);
   16e28:	23fa      	movs	r3, #250	; 0xfa
   16e2a:	009b      	lsls	r3, r3, #2
   16e2c:	0018      	movs	r0, r3
   16e2e:	4b1c      	ldr	r3, [pc, #112]	; (16ea0 <HTTP_DownloadFileTransaction+0xc0>)
   16e30:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   16e32:	4b1e      	ldr	r3, [pc, #120]	; (16eac <HTTP_DownloadFileTransaction+0xcc>)
   16e34:	2200      	movs	r2, #0
   16e36:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   16e38:	003b      	movs	r3, r7
   16e3a:	4a1d      	ldr	r2, [pc, #116]	; (16eb0 <HTTP_DownloadFileTransaction+0xd0>)
   16e3c:	ca13      	ldmia	r2!, {r0, r1, r4}
   16e3e:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16e40:	003b      	movs	r3, r7
   16e42:	2230      	movs	r2, #48	; 0x30
   16e44:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16e46:	230f      	movs	r3, #15
   16e48:	18fc      	adds	r4, r7, r3
   16e4a:	0039      	movs	r1, r7
   16e4c:	4b19      	ldr	r3, [pc, #100]	; (16eb4 <HTTP_DownloadFileTransaction+0xd4>)
   16e4e:	220a      	movs	r2, #10
   16e50:	0018      	movs	r0, r3
   16e52:	4b19      	ldr	r3, [pc, #100]	; (16eb8 <HTTP_DownloadFileTransaction+0xd8>)
   16e54:	4798      	blx	r3
   16e56:	0003      	movs	r3, r0
   16e58:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   16e5a:	230f      	movs	r3, #15
   16e5c:	18fb      	adds	r3, r7, r3
   16e5e:	781b      	ldrb	r3, [r3, #0]
   16e60:	2b00      	cmp	r3, #0
   16e62:	d008      	beq.n	16e76 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   16e64:	230f      	movs	r3, #15
   16e66:	18fb      	adds	r3, r7, r3
   16e68:	781a      	ldrb	r2, [r3, #0]
   16e6a:	4b14      	ldr	r3, [pc, #80]	; (16ebc <HTTP_DownloadFileTransaction+0xdc>)
   16e6c:	0019      	movs	r1, r3
   16e6e:	2000      	movs	r0, #0
   16e70:	4b13      	ldr	r3, [pc, #76]	; (16ec0 <HTTP_DownloadFileTransaction+0xe0>)
   16e72:	4798      	blx	r3
   16e74:	e003      	b.n	16e7e <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   16e76:	4b13      	ldr	r3, [pc, #76]	; (16ec4 <HTTP_DownloadFileTransaction+0xe4>)
   16e78:	0018      	movs	r0, r3
   16e7a:	4b13      	ldr	r3, [pc, #76]	; (16ec8 <HTTP_DownloadFileTransaction+0xe8>)
   16e7c:	4798      	blx	r3
    }
	
	f_close(&file_object);
   16e7e:	4b0d      	ldr	r3, [pc, #52]	; (16eb4 <HTTP_DownloadFileTransaction+0xd4>)
   16e80:	0018      	movs	r0, r3
   16e82:	4b12      	ldr	r3, [pc, #72]	; (16ecc <HTTP_DownloadFileTransaction+0xec>)
   16e84:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   16e86:	4b12      	ldr	r3, [pc, #72]	; (16ed0 <HTTP_DownloadFileTransaction+0xf0>)
   16e88:	2200      	movs	r2, #0
   16e8a:	701a      	strb	r2, [r3, #0]
}
   16e8c:	46c0      	nop			; (mov r8, r8)
   16e8e:	46bd      	mov	sp, r7
   16e90:	b005      	add	sp, #20
   16e92:	bd90      	pop	{r4, r7, pc}
   16e94:	00021ff1 	.word	0x00021ff1
   16e98:	20004730 	.word	0x20004730
   16e9c:	000326e5 	.word	0x000326e5
   16ea0:	0001c1c1 	.word	0x0001c1c1
   16ea4:	00015d29 	.word	0x00015d29
   16ea8:	000255ad 	.word	0x000255ad
   16eac:	200004b8 	.word	0x200004b8
   16eb0:	00036d38 	.word	0x00036d38
   16eb4:	200006ec 	.word	0x200006ec
   16eb8:	0002d9ad 	.word	0x0002d9ad
   16ebc:	00036d14 	.word	0x00036d14
   16ec0:	0001df01 	.word	0x0001df01
   16ec4:	00036d24 	.word	0x00036d24
   16ec8:	0001de15 	.word	0x0001de15
   16ecc:	0002e3ad 	.word	0x0002e3ad
   16ed0:	200004a4 	.word	0x200004a4

00016ed4 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   16ed4:	b580      	push	{r7, lr}
   16ed6:	af00      	add	r7, sp, #0
    socketDeinit();
   16ed8:	4b18      	ldr	r3, [pc, #96]	; (16f3c <MQTT_InitRoutine+0x68>)
   16eda:	4798      	blx	r3
    configure_mqtt();
   16edc:	4b18      	ldr	r3, [pc, #96]	; (16f40 <MQTT_InitRoutine+0x6c>)
   16ede:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16ee0:	4a18      	ldr	r2, [pc, #96]	; (16f44 <MQTT_InitRoutine+0x70>)
   16ee2:	4b19      	ldr	r3, [pc, #100]	; (16f48 <MQTT_InitRoutine+0x74>)
   16ee4:	0011      	movs	r1, r2
   16ee6:	0018      	movs	r0, r3
   16ee8:	4b18      	ldr	r3, [pc, #96]	; (16f4c <MQTT_InitRoutine+0x78>)
   16eea:	4798      	blx	r3
    socketInit();
   16eec:	4b18      	ldr	r3, [pc, #96]	; (16f50 <MQTT_InitRoutine+0x7c>)
   16eee:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   16ef0:	4b18      	ldr	r3, [pc, #96]	; (16f54 <MQTT_InitRoutine+0x80>)
   16ef2:	2234      	movs	r2, #52	; 0x34
   16ef4:	5c9b      	ldrb	r3, [r3, r2]
   16ef6:	2201      	movs	r2, #1
   16ef8:	4053      	eors	r3, r2
   16efa:	b2db      	uxtb	r3, r3
   16efc:	2b00      	cmp	r3, #0
   16efe:	d00c      	beq.n	16f1a <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16f00:	4a15      	ldr	r2, [pc, #84]	; (16f58 <MQTT_InitRoutine+0x84>)
   16f02:	4b14      	ldr	r3, [pc, #80]	; (16f54 <MQTT_InitRoutine+0x80>)
   16f04:	0011      	movs	r1, r2
   16f06:	0018      	movs	r0, r3
   16f08:	4b14      	ldr	r3, [pc, #80]	; (16f5c <MQTT_InitRoutine+0x88>)
   16f0a:	4798      	blx	r3
   16f0c:	1e03      	subs	r3, r0, #0
   16f0e:	d004      	beq.n	16f1a <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16f10:	4b13      	ldr	r3, [pc, #76]	; (16f60 <MQTT_InitRoutine+0x8c>)
   16f12:	0019      	movs	r1, r3
   16f14:	2001      	movs	r0, #1
   16f16:	4b13      	ldr	r3, [pc, #76]	; (16f64 <MQTT_InitRoutine+0x90>)
   16f18:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   16f1a:	4b0e      	ldr	r3, [pc, #56]	; (16f54 <MQTT_InitRoutine+0x80>)
   16f1c:	2234      	movs	r2, #52	; 0x34
   16f1e:	5c9b      	ldrb	r3, [r3, r2]
   16f20:	2b00      	cmp	r3, #0
   16f22:	d004      	beq.n	16f2e <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   16f24:	4b10      	ldr	r3, [pc, #64]	; (16f68 <MQTT_InitRoutine+0x94>)
   16f26:	0019      	movs	r1, r3
   16f28:	2001      	movs	r0, #1
   16f2a:	4b0e      	ldr	r3, [pc, #56]	; (16f64 <MQTT_InitRoutine+0x90>)
   16f2c:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   16f2e:	4b0f      	ldr	r3, [pc, #60]	; (16f6c <MQTT_InitRoutine+0x98>)
   16f30:	2201      	movs	r2, #1
   16f32:	701a      	strb	r2, [r3, #0]
}
   16f34:	46c0      	nop			; (mov r8, r8)
   16f36:	46bd      	mov	sp, r7
   16f38:	bd80      	pop	{r7, pc}
   16f3a:	46c0      	nop			; (mov r8, r8)
   16f3c:	000255ad 	.word	0x000255ad
   16f40:	00016bdd 	.word	0x00016bdd
   16f44:	000167e9 	.word	0x000167e9
   16f48:	000167b5 	.word	0x000167b5
   16f4c:	000255f5 	.word	0x000255f5
   16f50:	0002555d 	.word	0x0002555d
   16f54:	20000718 	.word	0x20000718
   16f58:	000364c0 	.word	0x000364c0
   16f5c:	0002f889 	.word	0x0002f889
   16f60:	000368cc 	.word	0x000368cc
   16f64:	0001df01 	.word	0x0001df01
   16f68:	00036d44 	.word	0x00036d44
   16f6c:	200004a4 	.word	0x200004a4

00016f70 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   16f70:	b580      	push	{r7, lr}
   16f72:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   16f74:	2000      	movs	r0, #0
   16f76:	4b0b      	ldr	r3, [pc, #44]	; (16fa4 <MQTT_HandleTransactions+0x34>)
   16f78:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   16f7a:	4b0b      	ldr	r3, [pc, #44]	; (16fa8 <MQTT_HandleTransactions+0x38>)
   16f7c:	0018      	movs	r0, r3
   16f7e:	4b0b      	ldr	r3, [pc, #44]	; (16fac <MQTT_HandleTransactions+0x3c>)
   16f80:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   16f82:	4b0b      	ldr	r3, [pc, #44]	; (16fb0 <MQTT_HandleTransactions+0x40>)
   16f84:	4798      	blx	r3
    MQTT_HandleImuMessages();
   16f86:	4b0b      	ldr	r3, [pc, #44]	; (16fb4 <MQTT_HandleTransactions+0x44>)
   16f88:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   16f8a:	4b0b      	ldr	r3, [pc, #44]	; (16fb8 <MQTT_HandleTransactions+0x48>)
   16f8c:	2234      	movs	r2, #52	; 0x34
   16f8e:	5c9b      	ldrb	r3, [r3, r2]
   16f90:	2b00      	cmp	r3, #0
   16f92:	d004      	beq.n	16f9e <MQTT_HandleTransactions+0x2e>
   16f94:	4b08      	ldr	r3, [pc, #32]	; (16fb8 <MQTT_HandleTransactions+0x48>)
   16f96:	2164      	movs	r1, #100	; 0x64
   16f98:	0018      	movs	r0, r3
   16f9a:	4b08      	ldr	r3, [pc, #32]	; (16fbc <MQTT_HandleTransactions+0x4c>)
   16f9c:	4798      	blx	r3
}
   16f9e:	46c0      	nop			; (mov r8, r8)
   16fa0:	46bd      	mov	sp, r7
   16fa2:	bd80      	pop	{r7, pc}
   16fa4:	00021ff1 	.word	0x00021ff1
   16fa8:	20004730 	.word	0x20004730
   16fac:	000326e5 	.word	0x000326e5
   16fb0:	0001704d 	.word	0x0001704d
   16fb4:	00016fc1 	.word	0x00016fc1
   16fb8:	20000718 	.word	0x20000718
   16fbc:	0002fab9 	.word	0x0002fab9

00016fc0 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   16fc0:	b590      	push	{r4, r7, lr}
   16fc2:	b085      	sub	sp, #20
   16fc4:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   16fc6:	4b18      	ldr	r3, [pc, #96]	; (17028 <MQTT_HandleImuMessages+0x68>)
   16fc8:	681b      	ldr	r3, [r3, #0]
   16fca:	0039      	movs	r1, r7
   16fcc:	2200      	movs	r2, #0
   16fce:	0018      	movs	r0, r3
   16fd0:	4b16      	ldr	r3, [pc, #88]	; (1702c <MQTT_HandleImuMessages+0x6c>)
   16fd2:	4798      	blx	r3
   16fd4:	0003      	movs	r3, r0
   16fd6:	2b01      	cmp	r3, #1
   16fd8:	d121      	bne.n	1701e <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   16fda:	003b      	movs	r3, r7
   16fdc:	2200      	movs	r2, #0
   16fde:	5e9b      	ldrsh	r3, [r3, r2]
   16fe0:	001c      	movs	r4, r3
   16fe2:	003b      	movs	r3, r7
   16fe4:	2202      	movs	r2, #2
   16fe6:	5e9b      	ldrsh	r3, [r3, r2]
   16fe8:	0019      	movs	r1, r3
   16fea:	003b      	movs	r3, r7
   16fec:	2204      	movs	r2, #4
   16fee:	5e9b      	ldrsh	r3, [r3, r2]
   16ff0:	4a0f      	ldr	r2, [pc, #60]	; (17030 <MQTT_HandleImuMessages+0x70>)
   16ff2:	4810      	ldr	r0, [pc, #64]	; (17034 <MQTT_HandleImuMessages+0x74>)
   16ff4:	9301      	str	r3, [sp, #4]
   16ff6:	9100      	str	r1, [sp, #0]
   16ff8:	0023      	movs	r3, r4
   16ffa:	213f      	movs	r1, #63	; 0x3f
   16ffc:	4c0e      	ldr	r4, [pc, #56]	; (17038 <MQTT_HandleImuMessages+0x78>)
   16ffe:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17000:	4b0c      	ldr	r3, [pc, #48]	; (17034 <MQTT_HandleImuMessages+0x74>)
   17002:	0018      	movs	r0, r3
   17004:	4b0d      	ldr	r3, [pc, #52]	; (1703c <MQTT_HandleImuMessages+0x7c>)
   17006:	4798      	blx	r3
   17008:	0004      	movs	r4, r0
   1700a:	4a0a      	ldr	r2, [pc, #40]	; (17034 <MQTT_HandleImuMessages+0x74>)
   1700c:	490c      	ldr	r1, [pc, #48]	; (17040 <MQTT_HandleImuMessages+0x80>)
   1700e:	480d      	ldr	r0, [pc, #52]	; (17044 <MQTT_HandleImuMessages+0x84>)
   17010:	2300      	movs	r3, #0
   17012:	9301      	str	r3, [sp, #4]
   17014:	2301      	movs	r3, #1
   17016:	9300      	str	r3, [sp, #0]
   17018:	0023      	movs	r3, r4
   1701a:	4c0b      	ldr	r4, [pc, #44]	; (17048 <MQTT_HandleImuMessages+0x88>)
   1701c:	47a0      	blx	r4
    }
}
   1701e:	46c0      	nop			; (mov r8, r8)
   17020:	46bd      	mov	sp, r7
   17022:	b003      	add	sp, #12
   17024:	bd90      	pop	{r4, r7, pc}
   17026:	46c0      	nop			; (mov r8, r8)
   17028:	200004b0 	.word	0x200004b0
   1702c:	0001b015 	.word	0x0001b015
   17030:	00036d60 	.word	0x00036d60
   17034:	20000024 	.word	0x20000024
   17038:	00034cb9 	.word	0x00034cb9
   1703c:	00034e17 	.word	0x00034e17
   17040:	00036c28 	.word	0x00036c28
   17044:	20000718 	.word	0x20000718
   17048:	0002fa05 	.word	0x0002fa05

0001704c <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   1704c:	b590      	push	{r4, r7, lr}
   1704e:	b08b      	sub	sp, #44	; 0x2c
   17050:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   17052:	4b39      	ldr	r3, [pc, #228]	; (17138 <MQTT_HandleGameMessages+0xec>)
   17054:	681b      	ldr	r3, [r3, #0]
   17056:	2208      	movs	r2, #8
   17058:	18b9      	adds	r1, r7, r2
   1705a:	2200      	movs	r2, #0
   1705c:	0018      	movs	r0, r3
   1705e:	4b37      	ldr	r3, [pc, #220]	; (1713c <MQTT_HandleGameMessages+0xf0>)
   17060:	4798      	blx	r3
   17062:	0003      	movs	r3, r0
   17064:	2b01      	cmp	r3, #1
   17066:	d163      	bne.n	17130 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   17068:	4b35      	ldr	r3, [pc, #212]	; (17140 <MQTT_HandleGameMessages+0xf4>)
   1706a:	4a36      	ldr	r2, [pc, #216]	; (17144 <MQTT_HandleGameMessages+0xf8>)
   1706c:	ca03      	ldmia	r2!, {r0, r1}
   1706e:	c303      	stmia	r3!, {r0, r1}
   17070:	8812      	ldrh	r2, [r2, #0]
   17072:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17074:	2300      	movs	r3, #0
   17076:	61fb      	str	r3, [r7, #28]
   17078:	e02d      	b.n	170d6 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   1707a:	2308      	movs	r3, #8
   1707c:	18fa      	adds	r2, r7, r3
   1707e:	69fb      	ldr	r3, [r7, #28]
   17080:	18d3      	adds	r3, r2, r3
   17082:	781b      	ldrb	r3, [r3, #0]
   17084:	2bff      	cmp	r3, #255	; 0xff
   17086:	d02a      	beq.n	170de <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   17088:	2308      	movs	r3, #8
   1708a:	18fa      	adds	r2, r7, r3
   1708c:	69fb      	ldr	r3, [r7, #28]
   1708e:	18d3      	adds	r3, r2, r3
   17090:	781b      	ldrb	r3, [r3, #0]
   17092:	4a2d      	ldr	r2, [pc, #180]	; (17148 <MQTT_HandleGameMessages+0xfc>)
   17094:	0038      	movs	r0, r7
   17096:	2103      	movs	r1, #3
   17098:	4c2c      	ldr	r4, [pc, #176]	; (1714c <MQTT_HandleGameMessages+0x100>)
   1709a:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   1709c:	003a      	movs	r2, r7
   1709e:	4b28      	ldr	r3, [pc, #160]	; (17140 <MQTT_HandleGameMessages+0xf4>)
   170a0:	0011      	movs	r1, r2
   170a2:	0018      	movs	r0, r3
   170a4:	4b2a      	ldr	r3, [pc, #168]	; (17150 <MQTT_HandleGameMessages+0x104>)
   170a6:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   170a8:	69fb      	ldr	r3, [r7, #28]
   170aa:	3301      	adds	r3, #1
   170ac:	2208      	movs	r2, #8
   170ae:	18ba      	adds	r2, r7, r2
   170b0:	5cd3      	ldrb	r3, [r2, r3]
   170b2:	2bff      	cmp	r3, #255	; 0xff
   170b4:	d00c      	beq.n	170d0 <MQTT_HandleGameMessages+0x84>
   170b6:	69fb      	ldr	r3, [r7, #28]
   170b8:	3301      	adds	r3, #1
   170ba:	2b13      	cmp	r3, #19
   170bc:	dc08      	bgt.n	170d0 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   170be:	003b      	movs	r3, r7
   170c0:	222c      	movs	r2, #44	; 0x2c
   170c2:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   170c4:	003a      	movs	r2, r7
   170c6:	4b1e      	ldr	r3, [pc, #120]	; (17140 <MQTT_HandleGameMessages+0xf4>)
   170c8:	0011      	movs	r1, r2
   170ca:	0018      	movs	r0, r3
   170cc:	4b20      	ldr	r3, [pc, #128]	; (17150 <MQTT_HandleGameMessages+0x104>)
   170ce:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   170d0:	69fb      	ldr	r3, [r7, #28]
   170d2:	3301      	adds	r3, #1
   170d4:	61fb      	str	r3, [r7, #28]
   170d6:	69fb      	ldr	r3, [r7, #28]
   170d8:	2b13      	cmp	r3, #19
   170da:	ddce      	ble.n	1707a <MQTT_HandleGameMessages+0x2e>
   170dc:	e000      	b.n	170e0 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   170de:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   170e0:	4b17      	ldr	r3, [pc, #92]	; (17140 <MQTT_HandleGameMessages+0xf4>)
   170e2:	0018      	movs	r0, r3
   170e4:	4b1b      	ldr	r3, [pc, #108]	; (17154 <MQTT_HandleGameMessages+0x108>)
   170e6:	4798      	blx	r3
   170e8:	0003      	movs	r3, r0
   170ea:	001a      	movs	r2, r3
   170ec:	4b14      	ldr	r3, [pc, #80]	; (17140 <MQTT_HandleGameMessages+0xf4>)
   170ee:	18d2      	adds	r2, r2, r3
   170f0:	4b19      	ldr	r3, [pc, #100]	; (17158 <MQTT_HandleGameMessages+0x10c>)
   170f2:	0010      	movs	r0, r2
   170f4:	0019      	movs	r1, r3
   170f6:	2303      	movs	r3, #3
   170f8:	001a      	movs	r2, r3
   170fa:	4b18      	ldr	r3, [pc, #96]	; (1715c <MQTT_HandleGameMessages+0x110>)
   170fc:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   170fe:	4b10      	ldr	r3, [pc, #64]	; (17140 <MQTT_HandleGameMessages+0xf4>)
   17100:	0019      	movs	r1, r3
   17102:	2001      	movs	r0, #1
   17104:	4b16      	ldr	r3, [pc, #88]	; (17160 <MQTT_HandleGameMessages+0x114>)
   17106:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   17108:	4b16      	ldr	r3, [pc, #88]	; (17164 <MQTT_HandleGameMessages+0x118>)
   1710a:	0019      	movs	r1, r3
   1710c:	2001      	movs	r0, #1
   1710e:	4b14      	ldr	r3, [pc, #80]	; (17160 <MQTT_HandleGameMessages+0x114>)
   17110:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17112:	4b0b      	ldr	r3, [pc, #44]	; (17140 <MQTT_HandleGameMessages+0xf4>)
   17114:	0018      	movs	r0, r3
   17116:	4b0f      	ldr	r3, [pc, #60]	; (17154 <MQTT_HandleGameMessages+0x108>)
   17118:	4798      	blx	r3
   1711a:	0004      	movs	r4, r0
   1711c:	4a08      	ldr	r2, [pc, #32]	; (17140 <MQTT_HandleGameMessages+0xf4>)
   1711e:	4912      	ldr	r1, [pc, #72]	; (17168 <MQTT_HandleGameMessages+0x11c>)
   17120:	4812      	ldr	r0, [pc, #72]	; (1716c <MQTT_HandleGameMessages+0x120>)
   17122:	2300      	movs	r3, #0
   17124:	9301      	str	r3, [sp, #4]
   17126:	2301      	movs	r3, #1
   17128:	9300      	str	r3, [sp, #0]
   1712a:	0023      	movs	r3, r4
   1712c:	4c10      	ldr	r4, [pc, #64]	; (17170 <MQTT_HandleGameMessages+0x124>)
   1712e:	47a0      	blx	r4
    }
}
   17130:	46c0      	nop			; (mov r8, r8)
   17132:	46bd      	mov	sp, r7
   17134:	b009      	add	sp, #36	; 0x24
   17136:	bd90      	pop	{r4, r7, pc}
   17138:	200004ac 	.word	0x200004ac
   1713c:	0001b015 	.word	0x0001b015
   17140:	20000024 	.word	0x20000024
   17144:	00036a68 	.word	0x00036a68
   17148:	00036d84 	.word	0x00036d84
   1714c:	00034cb9 	.word	0x00034cb9
   17150:	00034d9d 	.word	0x00034d9d
   17154:	00034e17 	.word	0x00034e17
   17158:	00036d88 	.word	0x00036d88
   1715c:	00034a29 	.word	0x00034a29
   17160:	0001df01 	.word	0x0001df01
   17164:	00036d8c 	.word	0x00036d8c
   17168:	00036d90 	.word	0x00036d90
   1716c:	20000718 	.word	0x20000718
   17170:	0002fa05 	.word	0x0002fa05

00017174 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   17174:	b590      	push	{r4, r7, lr}
   17176:	b08d      	sub	sp, #52	; 0x34
   17178:	af02      	add	r7, sp, #8
   1717a:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   1717c:	2064      	movs	r0, #100	; 0x64
   1717e:	4b79      	ldr	r3, [pc, #484]	; (17364 <vWifiTask+0x1f0>)
   17180:	4798      	blx	r3
    init_state();
   17182:	4b79      	ldr	r3, [pc, #484]	; (17368 <vWifiTask+0x1f4>)
   17184:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   17186:	2200      	movs	r2, #0
   17188:	2104      	movs	r1, #4
   1718a:	2005      	movs	r0, #5
   1718c:	4b77      	ldr	r3, [pc, #476]	; (1736c <vWifiTask+0x1f8>)
   1718e:	4798      	blx	r3
   17190:	0002      	movs	r2, r0
   17192:	4b77      	ldr	r3, [pc, #476]	; (17370 <vWifiTask+0x1fc>)
   17194:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   17196:	2200      	movs	r2, #0
   17198:	2106      	movs	r1, #6
   1719a:	2005      	movs	r0, #5
   1719c:	4b73      	ldr	r3, [pc, #460]	; (1736c <vWifiTask+0x1f8>)
   1719e:	4798      	blx	r3
   171a0:	0002      	movs	r2, r0
   171a2:	4b74      	ldr	r3, [pc, #464]	; (17374 <vWifiTask+0x200>)
   171a4:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   171a6:	2200      	movs	r2, #0
   171a8:	2114      	movs	r1, #20
   171aa:	2002      	movs	r0, #2
   171ac:	4b6f      	ldr	r3, [pc, #444]	; (1736c <vWifiTask+0x1f8>)
   171ae:	4798      	blx	r3
   171b0:	0002      	movs	r2, r0
   171b2:	4b71      	ldr	r3, [pc, #452]	; (17378 <vWifiTask+0x204>)
   171b4:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   171b6:	2200      	movs	r2, #0
   171b8:	2102      	movs	r1, #2
   171ba:	2005      	movs	r0, #5
   171bc:	4b6b      	ldr	r3, [pc, #428]	; (1736c <vWifiTask+0x1f8>)
   171be:	4798      	blx	r3
   171c0:	0002      	movs	r2, r0
   171c2:	4b6e      	ldr	r3, [pc, #440]	; (1737c <vWifiTask+0x208>)
   171c4:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   171c6:	4b6a      	ldr	r3, [pc, #424]	; (17370 <vWifiTask+0x1fc>)
   171c8:	681b      	ldr	r3, [r3, #0]
   171ca:	2b00      	cmp	r3, #0
   171cc:	d00b      	beq.n	171e6 <vWifiTask+0x72>
   171ce:	4b69      	ldr	r3, [pc, #420]	; (17374 <vWifiTask+0x200>)
   171d0:	681b      	ldr	r3, [r3, #0]
   171d2:	2b00      	cmp	r3, #0
   171d4:	d007      	beq.n	171e6 <vWifiTask+0x72>
   171d6:	4b68      	ldr	r3, [pc, #416]	; (17378 <vWifiTask+0x204>)
   171d8:	681b      	ldr	r3, [r3, #0]
   171da:	2b00      	cmp	r3, #0
   171dc:	d003      	beq.n	171e6 <vWifiTask+0x72>
   171de:	4b67      	ldr	r3, [pc, #412]	; (1737c <vWifiTask+0x208>)
   171e0:	681b      	ldr	r3, [r3, #0]
   171e2:	2b00      	cmp	r3, #0
   171e4:	d103      	bne.n	171ee <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   171e6:	4b66      	ldr	r3, [pc, #408]	; (17380 <vWifiTask+0x20c>)
   171e8:	0018      	movs	r0, r3
   171ea:	4b66      	ldr	r3, [pc, #408]	; (17384 <vWifiTask+0x210>)
   171ec:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   171ee:	4b66      	ldr	r3, [pc, #408]	; (17388 <vWifiTask+0x214>)
   171f0:	0018      	movs	r0, r3
   171f2:	4b64      	ldr	r3, [pc, #400]	; (17384 <vWifiTask+0x210>)
   171f4:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   171f6:	4b65      	ldr	r3, [pc, #404]	; (1738c <vWifiTask+0x218>)
   171f8:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   171fa:	4b65      	ldr	r3, [pc, #404]	; (17390 <vWifiTask+0x21c>)
   171fc:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   171fe:	4b65      	ldr	r3, [pc, #404]	; (17394 <vWifiTask+0x220>)
   17200:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   17202:	4b65      	ldr	r3, [pc, #404]	; (17398 <vWifiTask+0x224>)
   17204:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   17206:	4b65      	ldr	r3, [pc, #404]	; (1739c <vWifiTask+0x228>)
   17208:	4798      	blx	r3
    configure_extint_callbacks();
   1720a:	4b65      	ldr	r3, [pc, #404]	; (173a0 <vWifiTask+0x22c>)
   1720c:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1720e:	230c      	movs	r3, #12
   17210:	18fb      	adds	r3, r7, r3
   17212:	2218      	movs	r2, #24
   17214:	2100      	movs	r1, #0
   17216:	0018      	movs	r0, r3
   17218:	4b62      	ldr	r3, [pc, #392]	; (173a4 <vWifiTask+0x230>)
   1721a:	4798      	blx	r3

    nm_bsp_init();
   1721c:	4b62      	ldr	r3, [pc, #392]	; (173a8 <vWifiTask+0x234>)
   1721e:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   17220:	230c      	movs	r3, #12
   17222:	18fb      	adds	r3, r7, r3
   17224:	4a61      	ldr	r2, [pc, #388]	; (173ac <vWifiTask+0x238>)
   17226:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   17228:	2327      	movs	r3, #39	; 0x27
   1722a:	18fc      	adds	r4, r7, r3
   1722c:	230c      	movs	r3, #12
   1722e:	18fb      	adds	r3, r7, r3
   17230:	0018      	movs	r0, r3
   17232:	4b5f      	ldr	r3, [pc, #380]	; (173b0 <vWifiTask+0x23c>)
   17234:	4798      	blx	r3
   17236:	0003      	movs	r3, r0
   17238:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   1723a:	2327      	movs	r3, #39	; 0x27
   1723c:	18fb      	adds	r3, r7, r3
   1723e:	781b      	ldrb	r3, [r3, #0]
   17240:	b25b      	sxtb	r3, r3
   17242:	2b00      	cmp	r3, #0
   17244:	d009      	beq.n	1725a <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   17246:	2327      	movs	r3, #39	; 0x27
   17248:	18fb      	adds	r3, r7, r3
   1724a:	2200      	movs	r2, #0
   1724c:	569a      	ldrsb	r2, [r3, r2]
   1724e:	4b59      	ldr	r3, [pc, #356]	; (173b4 <vWifiTask+0x240>)
   17250:	0019      	movs	r1, r3
   17252:	2001      	movs	r0, #1
   17254:	4b58      	ldr	r3, [pc, #352]	; (173b8 <vWifiTask+0x244>)
   17256:	4798      	blx	r3
        while (1) {
   17258:	e7fe      	b.n	17258 <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   1725a:	4a58      	ldr	r2, [pc, #352]	; (173bc <vWifiTask+0x248>)
   1725c:	4b58      	ldr	r3, [pc, #352]	; (173c0 <vWifiTask+0x24c>)
   1725e:	0019      	movs	r1, r3
   17260:	2001      	movs	r0, #1
   17262:	4b55      	ldr	r3, [pc, #340]	; (173b8 <vWifiTask+0x244>)
   17264:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   17266:	4b57      	ldr	r3, [pc, #348]	; (173c4 <vWifiTask+0x250>)
   17268:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   1726a:	4a57      	ldr	r2, [pc, #348]	; (173c8 <vWifiTask+0x254>)
   1726c:	4b57      	ldr	r3, [pc, #348]	; (173cc <vWifiTask+0x258>)
   1726e:	0011      	movs	r1, r2
   17270:	0018      	movs	r0, r3
   17272:	4b57      	ldr	r3, [pc, #348]	; (173d0 <vWifiTask+0x25c>)
   17274:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   17276:	4a57      	ldr	r2, [pc, #348]	; (173d4 <vWifiTask+0x260>)
   17278:	4850      	ldr	r0, [pc, #320]	; (173bc <vWifiTask+0x248>)
   1727a:	23ff      	movs	r3, #255	; 0xff
   1727c:	9300      	str	r3, [sp, #0]
   1727e:	0013      	movs	r3, r2
   17280:	2202      	movs	r2, #2
   17282:	2109      	movs	r1, #9
   17284:	4c54      	ldr	r4, [pc, #336]	; (173d8 <vWifiTask+0x264>)
   17286:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   17288:	e006      	b.n	17298 <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   1728a:	2000      	movs	r0, #0
   1728c:	4b53      	ldr	r3, [pc, #332]	; (173dc <vWifiTask+0x268>)
   1728e:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17290:	4b53      	ldr	r3, [pc, #332]	; (173e0 <vWifiTask+0x26c>)
   17292:	0018      	movs	r0, r3
   17294:	4b53      	ldr	r3, [pc, #332]	; (173e4 <vWifiTask+0x270>)
   17296:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   17298:	2002      	movs	r0, #2
   1729a:	4b53      	ldr	r3, [pc, #332]	; (173e8 <vWifiTask+0x274>)
   1729c:	4798      	blx	r3
   1729e:	0003      	movs	r3, r0
   172a0:	001a      	movs	r2, r3
   172a2:	2301      	movs	r3, #1
   172a4:	4053      	eors	r3, r2
   172a6:	b2db      	uxtb	r3, r3
   172a8:	2b00      	cmp	r3, #0
   172aa:	d1ee      	bne.n	1728a <vWifiTask+0x116>
    }

    vTaskDelay(1000);
   172ac:	23fa      	movs	r3, #250	; 0xfa
   172ae:	009b      	lsls	r3, r3, #2
   172b0:	0018      	movs	r0, r3
   172b2:	4b2c      	ldr	r3, [pc, #176]	; (17364 <vWifiTask+0x1f0>)
   172b4:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   172b6:	4b4d      	ldr	r3, [pc, #308]	; (173ec <vWifiTask+0x278>)
   172b8:	2201      	movs	r2, #1
   172ba:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   172bc:	4b4b      	ldr	r3, [pc, #300]	; (173ec <vWifiTask+0x278>)
   172be:	781b      	ldrb	r3, [r3, #0]
   172c0:	b25b      	sxtb	r3, r3
   172c2:	2b01      	cmp	r3, #1
   172c4:	d00b      	beq.n	172de <vWifiTask+0x16a>
   172c6:	dc02      	bgt.n	172ce <vWifiTask+0x15a>
   172c8:	2b00      	cmp	r3, #0
   172ca:	d005      	beq.n	172d8 <vWifiTask+0x164>
   172cc:	e010      	b.n	172f0 <vWifiTask+0x17c>
   172ce:	2b02      	cmp	r3, #2
   172d0:	d008      	beq.n	172e4 <vWifiTask+0x170>
   172d2:	2b03      	cmp	r3, #3
   172d4:	d009      	beq.n	172ea <vWifiTask+0x176>
   172d6:	e00b      	b.n	172f0 <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   172d8:	4b45      	ldr	r3, [pc, #276]	; (173f0 <vWifiTask+0x27c>)
   172da:	4798      	blx	r3

                break;
   172dc:	e00c      	b.n	172f8 <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   172de:	4b45      	ldr	r3, [pc, #276]	; (173f4 <vWifiTask+0x280>)
   172e0:	4798      	blx	r3
                break;
   172e2:	e009      	b.n	172f8 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   172e4:	4b44      	ldr	r3, [pc, #272]	; (173f8 <vWifiTask+0x284>)
   172e6:	4798      	blx	r3
                break;
   172e8:	e006      	b.n	172f8 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   172ea:	4b44      	ldr	r3, [pc, #272]	; (173fc <vWifiTask+0x288>)
   172ec:	4798      	blx	r3
                break;
   172ee:	e003      	b.n	172f8 <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   172f0:	4b3e      	ldr	r3, [pc, #248]	; (173ec <vWifiTask+0x278>)
   172f2:	2200      	movs	r2, #0
   172f4:	701a      	strb	r2, [r3, #0]
                break;
   172f6:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   172f8:	230b      	movs	r3, #11
   172fa:	18fb      	adds	r3, r7, r3
   172fc:	2200      	movs	r2, #0
   172fe:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   17300:	4b1b      	ldr	r3, [pc, #108]	; (17370 <vWifiTask+0x1fc>)
   17302:	681b      	ldr	r3, [r3, #0]
   17304:	220b      	movs	r2, #11
   17306:	18b9      	adds	r1, r7, r2
   17308:	2200      	movs	r2, #0
   1730a:	0018      	movs	r0, r3
   1730c:	4b3c      	ldr	r3, [pc, #240]	; (17400 <vWifiTask+0x28c>)
   1730e:	4798      	blx	r3
   17310:	0003      	movs	r3, r0
   17312:	2b01      	cmp	r3, #1
   17314:	d105      	bne.n	17322 <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
   17316:	230b      	movs	r3, #11
   17318:	18fb      	adds	r3, r7, r3
   1731a:	781b      	ldrb	r3, [r3, #0]
   1731c:	b25a      	sxtb	r2, r3
   1731e:	4b33      	ldr	r3, [pc, #204]	; (173ec <vWifiTask+0x278>)
   17320:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   17322:	4b38      	ldr	r3, [pc, #224]	; (17404 <vWifiTask+0x290>)
   17324:	781b      	ldrb	r3, [r3, #0]
   17326:	b2db      	uxtb	r3, r3
   17328:	2b00      	cmp	r3, #0
   1732a:	d017      	beq.n	1735c <vWifiTask+0x1e8>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   1732c:	4b36      	ldr	r3, [pc, #216]	; (17408 <vWifiTask+0x294>)
   1732e:	0018      	movs	r0, r3
   17330:	4b36      	ldr	r3, [pc, #216]	; (1740c <vWifiTask+0x298>)
   17332:	4798      	blx	r3
   17334:	0004      	movs	r4, r0
   17336:	4a34      	ldr	r2, [pc, #208]	; (17408 <vWifiTask+0x294>)
   17338:	4935      	ldr	r1, [pc, #212]	; (17410 <vWifiTask+0x29c>)
   1733a:	4836      	ldr	r0, [pc, #216]	; (17414 <vWifiTask+0x2a0>)
   1733c:	2300      	movs	r3, #0
   1733e:	9301      	str	r3, [sp, #4]
   17340:	2301      	movs	r3, #1
   17342:	9300      	str	r3, [sp, #0]
   17344:	0023      	movs	r3, r4
   17346:	4c34      	ldr	r4, [pc, #208]	; (17418 <vWifiTask+0x2a4>)
   17348:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   1734a:	4a2f      	ldr	r2, [pc, #188]	; (17408 <vWifiTask+0x294>)
   1734c:	4b33      	ldr	r3, [pc, #204]	; (1741c <vWifiTask+0x2a8>)
   1734e:	0019      	movs	r1, r3
   17350:	2001      	movs	r0, #1
   17352:	4b19      	ldr	r3, [pc, #100]	; (173b8 <vWifiTask+0x244>)
   17354:	4798      	blx	r3
            isPressed = false;
   17356:	4b2b      	ldr	r3, [pc, #172]	; (17404 <vWifiTask+0x290>)
   17358:	2200      	movs	r2, #0
   1735a:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   1735c:	2064      	movs	r0, #100	; 0x64
   1735e:	4b01      	ldr	r3, [pc, #4]	; (17364 <vWifiTask+0x1f0>)
   17360:	4798      	blx	r3
    while (1) {
   17362:	e7ab      	b.n	172bc <vWifiTask+0x148>
   17364:	0001c1c1 	.word	0x0001c1c1
   17368:	00015cb9 	.word	0x00015cb9
   1736c:	0001a4b5 	.word	0x0001a4b5
   17370:	200004a8 	.word	0x200004a8
   17374:	200004b0 	.word	0x200004b0
   17378:	200004ac 	.word	0x200004ac
   1737c:	200004b4 	.word	0x200004b4
   17380:	00036da4 	.word	0x00036da4
   17384:	0001de15 	.word	0x0001de15
   17388:	00036dcc 	.word	0x00036dcc
   1738c:	000166f5 	.word	0x000166f5
   17390:	00016731 	.word	0x00016731
   17394:	00016bdd 	.word	0x00016bdd
   17398:	00016611 	.word	0x00016611
   1739c:	00016c95 	.word	0x00016c95
   173a0:	00016cd5 	.word	0x00016cd5
   173a4:	00034a5f 	.word	0x00034a5f
   173a8:	00020325 	.word	0x00020325
   173ac:	000164bd 	.word	0x000164bd
   173b0:	00021dfd 	.word	0x00021dfd
   173b4:	00036de8 	.word	0x00036de8
   173b8:	0001df01 	.word	0x0001df01
   173bc:	00036898 	.word	0x00036898
   173c0:	00036e14 	.word	0x00036e14
   173c4:	0002555d 	.word	0x0002555d
   173c8:	000167e9 	.word	0x000167e9
   173cc:	000167b5 	.word	0x000167b5
   173d0:	000255f5 	.word	0x000255f5
   173d4:	0003688c 	.word	0x0003688c
   173d8:	0002200d 	.word	0x0002200d
   173dc:	00021ff1 	.word	0x00021ff1
   173e0:	20004730 	.word	0x20004730
   173e4:	000326e5 	.word	0x000326e5
   173e8:	00015d29 	.word	0x00015d29
   173ec:	200004a4 	.word	0x200004a4
   173f0:	00016ed5 	.word	0x00016ed5
   173f4:	00016f71 	.word	0x00016f71
   173f8:	00016d4d 	.word	0x00016d4d
   173fc:	00016de1 	.word	0x00016de1
   17400:	0001b015 	.word	0x0001b015
   17404:	20000b50 	.word	0x20000b50
   17408:	20000064 	.word	0x20000064
   1740c:	00034e17 	.word	0x00034e17
   17410:	00036e38 	.word	0x00036e38
   17414:	20000718 	.word	0x20000718
   17418:	0002fa05 	.word	0x0002fa05
   1741c:	00036e54 	.word	0x00036e54

00017420 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   17420:	b590      	push	{r4, r7, lr}
   17422:	b083      	sub	sp, #12
   17424:	af00      	add	r7, sp, #0
   17426:	0002      	movs	r2, r0
   17428:	1dfb      	adds	r3, r7, #7
   1742a:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   1742c:	1dfb      	adds	r3, r7, #7
   1742e:	781b      	ldrb	r3, [r3, #0]
   17430:	2b03      	cmp	r3, #3
   17432:	d806      	bhi.n	17442 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   17434:	4b05      	ldr	r3, [pc, #20]	; (1744c <WifiHandlerSetState+0x2c>)
   17436:	6818      	ldr	r0, [r3, #0]
   17438:	1df9      	adds	r1, r7, #7
   1743a:	2300      	movs	r3, #0
   1743c:	220a      	movs	r2, #10
   1743e:	4c04      	ldr	r4, [pc, #16]	; (17450 <WifiHandlerSetState+0x30>)
   17440:	47a0      	blx	r4
    }
}
   17442:	46c0      	nop			; (mov r8, r8)
   17444:	46bd      	mov	sp, r7
   17446:	b003      	add	sp, #12
   17448:	bd90      	pop	{r4, r7, pc}
   1744a:	46c0      	nop			; (mov r8, r8)
   1744c:	200004a8 	.word	0x200004a8
   17450:	0001a75d 	.word	0x0001a75d

00017454 <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
   17454:	b590      	push	{r4, r7, lr}
   17456:	b085      	sub	sp, #20
   17458:	af00      	add	r7, sp, #0
   1745a:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
   1745c:	4b06      	ldr	r3, [pc, #24]	; (17478 <WifiAddImuDataToQueue+0x24>)
   1745e:	6818      	ldr	r0, [r3, #0]
   17460:	6879      	ldr	r1, [r7, #4]
   17462:	2300      	movs	r3, #0
   17464:	220a      	movs	r2, #10
   17466:	4c05      	ldr	r4, [pc, #20]	; (1747c <WifiAddImuDataToQueue+0x28>)
   17468:	47a0      	blx	r4
   1746a:	0003      	movs	r3, r0
   1746c:	60fb      	str	r3, [r7, #12]
    return error;
   1746e:	68fb      	ldr	r3, [r7, #12]
}
   17470:	0018      	movs	r0, r3
   17472:	46bd      	mov	sp, r7
   17474:	b005      	add	sp, #20
   17476:	bd90      	pop	{r4, r7, pc}
   17478:	200004b0 	.word	0x200004b0
   1747c:	0001a75d 	.word	0x0001a75d

00017480 <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   17480:	b590      	push	{r4, r7, lr}
   17482:	b085      	sub	sp, #20
   17484:	af00      	add	r7, sp, #0
   17486:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
   17488:	4b06      	ldr	r3, [pc, #24]	; (174a4 <WifiAddDistanceDataToQueue+0x24>)
   1748a:	6818      	ldr	r0, [r3, #0]
   1748c:	6879      	ldr	r1, [r7, #4]
   1748e:	2300      	movs	r3, #0
   17490:	220a      	movs	r2, #10
   17492:	4c05      	ldr	r4, [pc, #20]	; (174a8 <WifiAddDistanceDataToQueue+0x28>)
   17494:	47a0      	blx	r4
   17496:	0003      	movs	r3, r0
   17498:	60fb      	str	r3, [r7, #12]
    return error;
   1749a:	68fb      	ldr	r3, [r7, #12]
}
   1749c:	0018      	movs	r0, r3
   1749e:	46bd      	mov	sp, r7
   174a0:	b005      	add	sp, #20
   174a2:	bd90      	pop	{r4, r7, pc}
   174a4:	200004b4 	.word	0x200004b4
   174a8:	0001a75d 	.word	0x0001a75d

000174ac <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   174ac:	b590      	push	{r4, r7, lr}
   174ae:	b085      	sub	sp, #20
   174b0:	af00      	add	r7, sp, #0
   174b2:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   174b4:	4b06      	ldr	r3, [pc, #24]	; (174d0 <WifiAddGameDataToQueue+0x24>)
   174b6:	6818      	ldr	r0, [r3, #0]
   174b8:	6879      	ldr	r1, [r7, #4]
   174ba:	2300      	movs	r3, #0
   174bc:	220a      	movs	r2, #10
   174be:	4c05      	ldr	r4, [pc, #20]	; (174d4 <WifiAddGameDataToQueue+0x28>)
   174c0:	47a0      	blx	r4
   174c2:	0003      	movs	r3, r0
   174c4:	60fb      	str	r3, [r7, #12]
    return error;
   174c6:	68fb      	ldr	r3, [r7, #12]
}
   174c8:	0018      	movs	r0, r3
   174ca:	46bd      	mov	sp, r7
   174cc:	b005      	add	sp, #20
   174ce:	bd90      	pop	{r4, r7, pc}
   174d0:	200004ac 	.word	0x200004ac
   174d4:	0001a75d 	.word	0x0001a75d

000174d8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   174d8:	b580      	push	{r7, lr}
   174da:	b082      	sub	sp, #8
   174dc:	af00      	add	r7, sp, #0
   174de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   174e0:	687b      	ldr	r3, [r7, #4]
   174e2:	2200      	movs	r2, #0
   174e4:	701a      	strb	r2, [r3, #0]
}
   174e6:	46c0      	nop			; (mov r8, r8)
   174e8:	46bd      	mov	sp, r7
   174ea:	b002      	add	sp, #8
   174ec:	bd80      	pop	{r7, pc}
	...

000174f0 <system_apb_clock_set_mask>:
{
   174f0:	b580      	push	{r7, lr}
   174f2:	b082      	sub	sp, #8
   174f4:	af00      	add	r7, sp, #0
   174f6:	0002      	movs	r2, r0
   174f8:	6039      	str	r1, [r7, #0]
   174fa:	1dfb      	adds	r3, r7, #7
   174fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   174fe:	1dfb      	adds	r3, r7, #7
   17500:	781b      	ldrb	r3, [r3, #0]
   17502:	2b01      	cmp	r3, #1
   17504:	d00a      	beq.n	1751c <system_apb_clock_set_mask+0x2c>
   17506:	2b02      	cmp	r3, #2
   17508:	d00f      	beq.n	1752a <system_apb_clock_set_mask+0x3a>
   1750a:	2b00      	cmp	r3, #0
   1750c:	d114      	bne.n	17538 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1750e:	4b0e      	ldr	r3, [pc, #56]	; (17548 <system_apb_clock_set_mask+0x58>)
   17510:	4a0d      	ldr	r2, [pc, #52]	; (17548 <system_apb_clock_set_mask+0x58>)
   17512:	6991      	ldr	r1, [r2, #24]
   17514:	683a      	ldr	r2, [r7, #0]
   17516:	430a      	orrs	r2, r1
   17518:	619a      	str	r2, [r3, #24]
			break;
   1751a:	e00f      	b.n	1753c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1751c:	4b0a      	ldr	r3, [pc, #40]	; (17548 <system_apb_clock_set_mask+0x58>)
   1751e:	4a0a      	ldr	r2, [pc, #40]	; (17548 <system_apb_clock_set_mask+0x58>)
   17520:	69d1      	ldr	r1, [r2, #28]
   17522:	683a      	ldr	r2, [r7, #0]
   17524:	430a      	orrs	r2, r1
   17526:	61da      	str	r2, [r3, #28]
			break;
   17528:	e008      	b.n	1753c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1752a:	4b07      	ldr	r3, [pc, #28]	; (17548 <system_apb_clock_set_mask+0x58>)
   1752c:	4a06      	ldr	r2, [pc, #24]	; (17548 <system_apb_clock_set_mask+0x58>)
   1752e:	6a11      	ldr	r1, [r2, #32]
   17530:	683a      	ldr	r2, [r7, #0]
   17532:	430a      	orrs	r2, r1
   17534:	621a      	str	r2, [r3, #32]
			break;
   17536:	e001      	b.n	1753c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   17538:	2317      	movs	r3, #23
   1753a:	e000      	b.n	1753e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1753c:	2300      	movs	r3, #0
}
   1753e:	0018      	movs	r0, r3
   17540:	46bd      	mov	sp, r7
   17542:	b002      	add	sp, #8
   17544:	bd80      	pop	{r7, pc}
   17546:	46c0      	nop			; (mov r8, r8)
   17548:	40000400 	.word	0x40000400

0001754c <system_pinmux_get_config_defaults>:
{
   1754c:	b580      	push	{r7, lr}
   1754e:	b082      	sub	sp, #8
   17550:	af00      	add	r7, sp, #0
   17552:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17554:	687b      	ldr	r3, [r7, #4]
   17556:	2280      	movs	r2, #128	; 0x80
   17558:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1755a:	687b      	ldr	r3, [r7, #4]
   1755c:	2200      	movs	r2, #0
   1755e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   17560:	687b      	ldr	r3, [r7, #4]
   17562:	2201      	movs	r2, #1
   17564:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   17566:	687b      	ldr	r3, [r7, #4]
   17568:	2200      	movs	r2, #0
   1756a:	70da      	strb	r2, [r3, #3]
}
   1756c:	46c0      	nop			; (mov r8, r8)
   1756e:	46bd      	mov	sp, r7
   17570:	b002      	add	sp, #8
   17572:	bd80      	pop	{r7, pc}

00017574 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   17574:	b580      	push	{r7, lr}
   17576:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   17578:	4b05      	ldr	r3, [pc, #20]	; (17590 <system_is_debugger_present+0x1c>)
   1757a:	789b      	ldrb	r3, [r3, #2]
   1757c:	b2db      	uxtb	r3, r3
   1757e:	001a      	movs	r2, r3
   17580:	2302      	movs	r3, #2
   17582:	4013      	ands	r3, r2
   17584:	1e5a      	subs	r2, r3, #1
   17586:	4193      	sbcs	r3, r2
   17588:	b2db      	uxtb	r3, r3
}
   1758a:	0018      	movs	r0, r3
   1758c:	46bd      	mov	sp, r7
   1758e:	bd80      	pop	{r7, pc}
   17590:	41002000 	.word	0x41002000

00017594 <system_interrupt_enter_critical_section>:
{
   17594:	b580      	push	{r7, lr}
   17596:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   17598:	4b02      	ldr	r3, [pc, #8]	; (175a4 <system_interrupt_enter_critical_section+0x10>)
   1759a:	4798      	blx	r3
}
   1759c:	46c0      	nop			; (mov r8, r8)
   1759e:	46bd      	mov	sp, r7
   175a0:	bd80      	pop	{r7, pc}
   175a2:	46c0      	nop			; (mov r8, r8)
   175a4:	00026255 	.word	0x00026255

000175a8 <system_interrupt_leave_critical_section>:
{
   175a8:	b580      	push	{r7, lr}
   175aa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   175ac:	4b02      	ldr	r3, [pc, #8]	; (175b8 <system_interrupt_leave_critical_section+0x10>)
   175ae:	4798      	blx	r3
}
   175b0:	46c0      	nop			; (mov r8, r8)
   175b2:	46bd      	mov	sp, r7
   175b4:	bd80      	pop	{r7, pc}
   175b6:	46c0      	nop			; (mov r8, r8)
   175b8:	000262a9 	.word	0x000262a9

000175bc <system_interrupt_disable>:
{
   175bc:	b580      	push	{r7, lr}
   175be:	b082      	sub	sp, #8
   175c0:	af00      	add	r7, sp, #0
   175c2:	0002      	movs	r2, r0
   175c4:	1dfb      	adds	r3, r7, #7
   175c6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   175c8:	4a07      	ldr	r2, [pc, #28]	; (175e8 <system_interrupt_disable+0x2c>)
   175ca:	1dfb      	adds	r3, r7, #7
   175cc:	781b      	ldrb	r3, [r3, #0]
   175ce:	0019      	movs	r1, r3
   175d0:	231f      	movs	r3, #31
   175d2:	400b      	ands	r3, r1
   175d4:	2101      	movs	r1, #1
   175d6:	4099      	lsls	r1, r3
   175d8:	000b      	movs	r3, r1
   175da:	0019      	movs	r1, r3
   175dc:	2380      	movs	r3, #128	; 0x80
   175de:	50d1      	str	r1, [r2, r3]
}
   175e0:	46c0      	nop			; (mov r8, r8)
   175e2:	46bd      	mov	sp, r7
   175e4:	b002      	add	sp, #8
   175e6:	bd80      	pop	{r7, pc}
   175e8:	e000e100 	.word	0xe000e100

000175ec <i2c_master_is_syncing>:
{
   175ec:	b580      	push	{r7, lr}
   175ee:	b084      	sub	sp, #16
   175f0:	af00      	add	r7, sp, #0
   175f2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   175f4:	687b      	ldr	r3, [r7, #4]
   175f6:	681b      	ldr	r3, [r3, #0]
   175f8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   175fa:	68fb      	ldr	r3, [r7, #12]
   175fc:	69db      	ldr	r3, [r3, #28]
   175fe:	2207      	movs	r2, #7
   17600:	4013      	ands	r3, r2
   17602:	1e5a      	subs	r2, r3, #1
   17604:	4193      	sbcs	r3, r2
   17606:	b2db      	uxtb	r3, r3
}
   17608:	0018      	movs	r0, r3
   1760a:	46bd      	mov	sp, r7
   1760c:	b004      	add	sp, #16
   1760e:	bd80      	pop	{r7, pc}

00017610 <_i2c_master_wait_for_sync>:
{
   17610:	b580      	push	{r7, lr}
   17612:	b082      	sub	sp, #8
   17614:	af00      	add	r7, sp, #0
   17616:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   17618:	46c0      	nop			; (mov r8, r8)
   1761a:	687b      	ldr	r3, [r7, #4]
   1761c:	0018      	movs	r0, r3
   1761e:	4b04      	ldr	r3, [pc, #16]	; (17630 <_i2c_master_wait_for_sync+0x20>)
   17620:	4798      	blx	r3
   17622:	1e03      	subs	r3, r0, #0
   17624:	d1f9      	bne.n	1761a <_i2c_master_wait_for_sync+0xa>
}
   17626:	46c0      	nop			; (mov r8, r8)
   17628:	46bd      	mov	sp, r7
   1762a:	b002      	add	sp, #8
   1762c:	bd80      	pop	{r7, pc}
   1762e:	46c0      	nop			; (mov r8, r8)
   17630:	000175ed 	.word	0x000175ed

00017634 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   17634:	b580      	push	{r7, lr}
   17636:	b084      	sub	sp, #16
   17638:	af00      	add	r7, sp, #0
   1763a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1763c:	687b      	ldr	r3, [r7, #4]
   1763e:	681b      	ldr	r3, [r3, #0]
   17640:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   17642:	687b      	ldr	r3, [r7, #4]
   17644:	681b      	ldr	r3, [r3, #0]
   17646:	0018      	movs	r0, r3
   17648:	4b0d      	ldr	r3, [pc, #52]	; (17680 <i2c_master_disable+0x4c>)
   1764a:	4798      	blx	r3
   1764c:	0003      	movs	r3, r0
   1764e:	0018      	movs	r0, r3
   17650:	4b0c      	ldr	r3, [pc, #48]	; (17684 <i2c_master_disable+0x50>)
   17652:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   17654:	687b      	ldr	r3, [r7, #4]
   17656:	0018      	movs	r0, r3
   17658:	4b0b      	ldr	r3, [pc, #44]	; (17688 <i2c_master_disable+0x54>)
   1765a:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   1765c:	68fb      	ldr	r3, [r7, #12]
   1765e:	2283      	movs	r2, #131	; 0x83
   17660:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   17662:	68fb      	ldr	r3, [r7, #12]
   17664:	2283      	movs	r2, #131	; 0x83
   17666:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   17668:	68fb      	ldr	r3, [r7, #12]
   1766a:	681b      	ldr	r3, [r3, #0]
   1766c:	2202      	movs	r2, #2
   1766e:	4393      	bics	r3, r2
   17670:	001a      	movs	r2, r3
   17672:	68fb      	ldr	r3, [r7, #12]
   17674:	601a      	str	r2, [r3, #0]

}
   17676:	46c0      	nop			; (mov r8, r8)
   17678:	46bd      	mov	sp, r7
   1767a:	b004      	add	sp, #16
   1767c:	bd80      	pop	{r7, pc}
   1767e:	46c0      	nop			; (mov r8, r8)
   17680:	00027729 	.word	0x00027729
   17684:	000175bd 	.word	0x000175bd
   17688:	00017611 	.word	0x00017611

0001768c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   1768c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1768e:	b097      	sub	sp, #92	; 0x5c
   17690:	af00      	add	r7, sp, #0
   17692:	6178      	str	r0, [r7, #20]
   17694:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   17696:	2300      	movs	r3, #0
   17698:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   1769a:	2300      	movs	r3, #0
   1769c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   1769e:	2300      	movs	r3, #0
   176a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   176a2:	233b      	movs	r3, #59	; 0x3b
   176a4:	2210      	movs	r2, #16
   176a6:	4694      	mov	ip, r2
   176a8:	44bc      	add	ip, r7
   176aa:	4463      	add	r3, ip
   176ac:	2200      	movs	r2, #0
   176ae:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   176b0:	697b      	ldr	r3, [r7, #20]
   176b2:	681b      	ldr	r3, [r3, #0]
   176b4:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   176b6:	697b      	ldr	r3, [r7, #20]
   176b8:	681b      	ldr	r3, [r3, #0]
   176ba:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   176bc:	2323      	movs	r3, #35	; 0x23
   176be:	2210      	movs	r2, #16
   176c0:	18ba      	adds	r2, r7, r2
   176c2:	18d4      	adds	r4, r2, r3
   176c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   176c6:	0018      	movs	r0, r3
   176c8:	4bc0      	ldr	r3, [pc, #768]	; (179cc <_i2c_master_set_config+0x340>)
   176ca:	4798      	blx	r3
   176cc:	0003      	movs	r3, r0
   176ce:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   176d0:	230c      	movs	r3, #12
   176d2:	2210      	movs	r2, #16
   176d4:	4694      	mov	ip, r2
   176d6:	44bc      	add	ip, r7
   176d8:	4463      	add	r3, ip
   176da:	0018      	movs	r0, r3
   176dc:	4bbc      	ldr	r3, [pc, #752]	; (179d0 <_i2c_master_set_config+0x344>)
   176de:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   176e0:	693b      	ldr	r3, [r7, #16]
   176e2:	69db      	ldr	r3, [r3, #28]
   176e4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   176e6:	693b      	ldr	r3, [r7, #16]
   176e8:	6a1b      	ldr	r3, [r3, #32]
   176ea:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   176ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   176ee:	2b00      	cmp	r3, #0
   176f0:	d106      	bne.n	17700 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   176f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   176f4:	2100      	movs	r1, #0
   176f6:	0018      	movs	r0, r3
   176f8:	4bb6      	ldr	r3, [pc, #728]	; (179d4 <_i2c_master_set_config+0x348>)
   176fa:	4798      	blx	r3
   176fc:	0003      	movs	r3, r0
   176fe:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   17700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17702:	b2da      	uxtb	r2, r3
   17704:	230c      	movs	r3, #12
   17706:	2110      	movs	r1, #16
   17708:	468c      	mov	ip, r1
   1770a:	44bc      	add	ip, r7
   1770c:	4463      	add	r3, ip
   1770e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17710:	230c      	movs	r3, #12
   17712:	2210      	movs	r2, #16
   17714:	4694      	mov	ip, r2
   17716:	44bc      	add	ip, r7
   17718:	4463      	add	r3, ip
   1771a:	2202      	movs	r2, #2
   1771c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1771e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17720:	0c1b      	lsrs	r3, r3, #16
   17722:	b2db      	uxtb	r3, r3
   17724:	220c      	movs	r2, #12
   17726:	2110      	movs	r1, #16
   17728:	468c      	mov	ip, r1
   1772a:	44bc      	add	ip, r7
   1772c:	4462      	add	r2, ip
   1772e:	0011      	movs	r1, r2
   17730:	0018      	movs	r0, r3
   17732:	4ba9      	ldr	r3, [pc, #676]	; (179d8 <_i2c_master_set_config+0x34c>)
   17734:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   17736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17738:	2b00      	cmp	r3, #0
   1773a:	d106      	bne.n	1774a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   1773c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1773e:	2101      	movs	r1, #1
   17740:	0018      	movs	r0, r3
   17742:	4ba4      	ldr	r3, [pc, #656]	; (179d4 <_i2c_master_set_config+0x348>)
   17744:	4798      	blx	r3
   17746:	0003      	movs	r3, r0
   17748:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   1774a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1774c:	b2da      	uxtb	r2, r3
   1774e:	230c      	movs	r3, #12
   17750:	2110      	movs	r1, #16
   17752:	468c      	mov	ip, r1
   17754:	44bc      	add	ip, r7
   17756:	4463      	add	r3, ip
   17758:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1775a:	230c      	movs	r3, #12
   1775c:	2210      	movs	r2, #16
   1775e:	4694      	mov	ip, r2
   17760:	44bc      	add	ip, r7
   17762:	4463      	add	r3, ip
   17764:	2202      	movs	r2, #2
   17766:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   17768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1776a:	0c1b      	lsrs	r3, r3, #16
   1776c:	b2db      	uxtb	r3, r3
   1776e:	220c      	movs	r2, #12
   17770:	2110      	movs	r1, #16
   17772:	468c      	mov	ip, r1
   17774:	44bc      	add	ip, r7
   17776:	4462      	add	r2, ip
   17778:	0011      	movs	r1, r2
   1777a:	0018      	movs	r0, r3
   1777c:	4b96      	ldr	r3, [pc, #600]	; (179d8 <_i2c_master_set_config+0x34c>)
   1777e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   17780:	693b      	ldr	r3, [r7, #16]
   17782:	8a9a      	ldrh	r2, [r3, #20]
   17784:	697b      	ldr	r3, [r7, #20]
   17786:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   17788:	693b      	ldr	r3, [r7, #16]
   1778a:	8ada      	ldrh	r2, [r3, #22]
   1778c:	697b      	ldr	r3, [r7, #20]
   1778e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   17790:	693b      	ldr	r3, [r7, #16]
   17792:	7e1b      	ldrb	r3, [r3, #24]
   17794:	2b00      	cmp	r3, #0
   17796:	d103      	bne.n	177a0 <_i2c_master_set_config+0x114>
   17798:	4b90      	ldr	r3, [pc, #576]	; (179dc <_i2c_master_set_config+0x350>)
   1779a:	4798      	blx	r3
   1779c:	1e03      	subs	r3, r0, #0
   1779e:	d002      	beq.n	177a6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   177a0:	2380      	movs	r3, #128	; 0x80
   177a2:	657b      	str	r3, [r7, #84]	; 0x54
   177a4:	e001      	b.n	177aa <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   177a6:	2300      	movs	r3, #0
   177a8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   177aa:	693b      	ldr	r3, [r7, #16]
   177ac:	691b      	ldr	r3, [r3, #16]
   177ae:	2b00      	cmp	r3, #0
   177b0:	d004      	beq.n	177bc <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   177b2:	693b      	ldr	r3, [r7, #16]
   177b4:	691b      	ldr	r3, [r3, #16]
   177b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   177b8:	4313      	orrs	r3, r2
   177ba:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   177bc:	693b      	ldr	r3, [r7, #16]
   177be:	689b      	ldr	r3, [r3, #8]
   177c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   177c2:	4313      	orrs	r3, r2
   177c4:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   177c6:	693b      	ldr	r3, [r7, #16]
   177c8:	2224      	movs	r2, #36	; 0x24
   177ca:	5c9b      	ldrb	r3, [r3, r2]
   177cc:	2b00      	cmp	r3, #0
   177ce:	d004      	beq.n	177da <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   177d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   177d2:	2280      	movs	r2, #128	; 0x80
   177d4:	05d2      	lsls	r2, r2, #23
   177d6:	4313      	orrs	r3, r2
   177d8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   177da:	693b      	ldr	r3, [r7, #16]
   177dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   177de:	2b00      	cmp	r3, #0
   177e0:	d004      	beq.n	177ec <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   177e2:	693b      	ldr	r3, [r7, #16]
   177e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   177e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   177e8:	4313      	orrs	r3, r2
   177ea:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   177ec:	693b      	ldr	r3, [r7, #16]
   177ee:	222c      	movs	r2, #44	; 0x2c
   177f0:	5c9b      	ldrb	r3, [r3, r2]
   177f2:	2b00      	cmp	r3, #0
   177f4:	d105      	bne.n	17802 <_i2c_master_set_config+0x176>
   177f6:	693b      	ldr	r3, [r7, #16]
   177f8:	689a      	ldr	r2, [r3, #8]
   177fa:	2380      	movs	r3, #128	; 0x80
   177fc:	049b      	lsls	r3, r3, #18
   177fe:	429a      	cmp	r2, r3
   17800:	d104      	bne.n	1780c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   17802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17804:	2280      	movs	r2, #128	; 0x80
   17806:	0512      	lsls	r2, r2, #20
   17808:	4313      	orrs	r3, r2
   1780a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   1780c:	693b      	ldr	r3, [r7, #16]
   1780e:	222d      	movs	r2, #45	; 0x2d
   17810:	5c9b      	ldrb	r3, [r3, r2]
   17812:	2b00      	cmp	r3, #0
   17814:	d004      	beq.n	17820 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   17816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17818:	2280      	movs	r2, #128	; 0x80
   1781a:	0412      	lsls	r2, r2, #16
   1781c:	4313      	orrs	r3, r2
   1781e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   17820:	693b      	ldr	r3, [r7, #16]
   17822:	222e      	movs	r2, #46	; 0x2e
   17824:	5c9b      	ldrb	r3, [r3, r2]
   17826:	2b00      	cmp	r3, #0
   17828:	d004      	beq.n	17834 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   1782a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1782c:	2280      	movs	r2, #128	; 0x80
   1782e:	03d2      	lsls	r2, r2, #15
   17830:	4313      	orrs	r3, r2
   17832:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   17834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17836:	681a      	ldr	r2, [r3, #0]
   17838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1783a:	431a      	orrs	r2, r3
   1783c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1783e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   17840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17842:	2280      	movs	r2, #128	; 0x80
   17844:	0052      	lsls	r2, r2, #1
   17846:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   17848:	2323      	movs	r3, #35	; 0x23
   1784a:	2210      	movs	r2, #16
   1784c:	4694      	mov	ip, r2
   1784e:	44bc      	add	ip, r7
   17850:	4463      	add	r3, ip
   17852:	781b      	ldrb	r3, [r3, #0]
   17854:	3314      	adds	r3, #20
   17856:	b2db      	uxtb	r3, r3
   17858:	0018      	movs	r0, r3
   1785a:	4b61      	ldr	r3, [pc, #388]	; (179e0 <_i2c_master_set_config+0x354>)
   1785c:	4798      	blx	r3
   1785e:	0003      	movs	r3, r0
   17860:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   17862:	693b      	ldr	r3, [r7, #16]
   17864:	681b      	ldr	r3, [r3, #0]
   17866:	22fa      	movs	r2, #250	; 0xfa
   17868:	0092      	lsls	r2, r2, #2
   1786a:	4353      	muls	r3, r2
   1786c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   1786e:	693b      	ldr	r3, [r7, #16]
   17870:	685b      	ldr	r3, [r3, #4]
   17872:	22fa      	movs	r2, #250	; 0xfa
   17874:	0092      	lsls	r2, r2, #2
   17876:	4353      	muls	r3, r2
   17878:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   1787a:	693b      	ldr	r3, [r7, #16]
   1787c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   1787e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   17880:	4b58      	ldr	r3, [pc, #352]	; (179e4 <_i2c_master_set_config+0x358>)
   17882:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17884:	4798      	blx	r3
   17886:	0005      	movs	r5, r0
   17888:	000e      	movs	r6, r1
   1788a:	4b56      	ldr	r3, [pc, #344]	; (179e4 <_i2c_master_set_config+0x358>)
   1788c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1788e:	4798      	blx	r3
   17890:	60b8      	str	r0, [r7, #8]
   17892:	60f9      	str	r1, [r7, #12]
   17894:	4b53      	ldr	r3, [pc, #332]	; (179e4 <_i2c_master_set_config+0x358>)
   17896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17898:	4798      	blx	r3
   1789a:	4c53      	ldr	r4, [pc, #332]	; (179e8 <_i2c_master_set_config+0x35c>)
   1789c:	4a53      	ldr	r2, [pc, #332]	; (179ec <_i2c_master_set_config+0x360>)
   1789e:	4b54      	ldr	r3, [pc, #336]	; (179f0 <_i2c_master_set_config+0x364>)
   178a0:	47a0      	blx	r4
   178a2:	0003      	movs	r3, r0
   178a4:	000c      	movs	r4, r1
   178a6:	603b      	str	r3, [r7, #0]
   178a8:	607c      	str	r4, [r7, #4]
   178aa:	4b4e      	ldr	r3, [pc, #312]	; (179e4 <_i2c_master_set_config+0x358>)
   178ac:	6a38      	ldr	r0, [r7, #32]
   178ae:	4798      	blx	r3
   178b0:	0002      	movs	r2, r0
   178b2:	000b      	movs	r3, r1
   178b4:	4c4c      	ldr	r4, [pc, #304]	; (179e8 <_i2c_master_set_config+0x35c>)
   178b6:	6838      	ldr	r0, [r7, #0]
   178b8:	6879      	ldr	r1, [r7, #4]
   178ba:	47a0      	blx	r4
   178bc:	0003      	movs	r3, r0
   178be:	000c      	movs	r4, r1
   178c0:	0018      	movs	r0, r3
   178c2:	0021      	movs	r1, r4
   178c4:	4c4b      	ldr	r4, [pc, #300]	; (179f4 <_i2c_master_set_config+0x368>)
   178c6:	2200      	movs	r2, #0
   178c8:	4b4b      	ldr	r3, [pc, #300]	; (179f8 <_i2c_master_set_config+0x36c>)
   178ca:	47a0      	blx	r4
   178cc:	0003      	movs	r3, r0
   178ce:	000c      	movs	r4, r1
   178d0:	001a      	movs	r2, r3
   178d2:	0023      	movs	r3, r4
   178d4:	4c44      	ldr	r4, [pc, #272]	; (179e8 <_i2c_master_set_config+0x35c>)
   178d6:	68b8      	ldr	r0, [r7, #8]
   178d8:	68f9      	ldr	r1, [r7, #12]
   178da:	47a0      	blx	r4
   178dc:	0003      	movs	r3, r0
   178de:	000c      	movs	r4, r1
   178e0:	001a      	movs	r2, r3
   178e2:	0023      	movs	r3, r4
   178e4:	4c45      	ldr	r4, [pc, #276]	; (179fc <_i2c_master_set_config+0x370>)
   178e6:	0028      	movs	r0, r5
   178e8:	0031      	movs	r1, r6
   178ea:	47a0      	blx	r4
   178ec:	0003      	movs	r3, r0
   178ee:	000c      	movs	r4, r1
   178f0:	001d      	movs	r5, r3
   178f2:	0026      	movs	r6, r4
   178f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   178f6:	005a      	lsls	r2, r3, #1
   178f8:	4b3a      	ldr	r3, [pc, #232]	; (179e4 <_i2c_master_set_config+0x358>)
   178fa:	0010      	movs	r0, r2
   178fc:	4798      	blx	r3
   178fe:	0002      	movs	r2, r0
   17900:	000b      	movs	r3, r1
   17902:	4c3c      	ldr	r4, [pc, #240]	; (179f4 <_i2c_master_set_config+0x368>)
   17904:	0028      	movs	r0, r5
   17906:	0031      	movs	r1, r6
   17908:	47a0      	blx	r4
   1790a:	0003      	movs	r3, r0
   1790c:	000c      	movs	r4, r1
   1790e:	0018      	movs	r0, r3
   17910:	0021      	movs	r1, r4
   17912:	4c3a      	ldr	r4, [pc, #232]	; (179fc <_i2c_master_set_config+0x370>)
   17914:	2200      	movs	r2, #0
   17916:	4b3a      	ldr	r3, [pc, #232]	; (17a00 <_i2c_master_set_config+0x374>)
   17918:	47a0      	blx	r4
   1791a:	0003      	movs	r3, r0
   1791c:	000c      	movs	r4, r1
   1791e:	001d      	movs	r5, r3
   17920:	0026      	movs	r6, r4
   17922:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17924:	005a      	lsls	r2, r3, #1
   17926:	4b2f      	ldr	r3, [pc, #188]	; (179e4 <_i2c_master_set_config+0x358>)
   17928:	0010      	movs	r0, r2
   1792a:	4798      	blx	r3
   1792c:	0002      	movs	r2, r0
   1792e:	000b      	movs	r3, r1
   17930:	4c34      	ldr	r4, [pc, #208]	; (17a04 <_i2c_master_set_config+0x378>)
   17932:	0028      	movs	r0, r5
   17934:	0031      	movs	r1, r6
   17936:	47a0      	blx	r4
   17938:	0003      	movs	r3, r0
   1793a:	000c      	movs	r4, r1
   1793c:	0019      	movs	r1, r3
   1793e:	0022      	movs	r2, r4
   17940:	4b31      	ldr	r3, [pc, #196]	; (17a08 <_i2c_master_set_config+0x37c>)
   17942:	0008      	movs	r0, r1
   17944:	0011      	movs	r1, r2
   17946:	4798      	blx	r3
   17948:	0003      	movs	r3, r0
   1794a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   1794c:	693b      	ldr	r3, [r7, #16]
   1794e:	689a      	ldr	r2, [r3, #8]
   17950:	2380      	movs	r3, #128	; 0x80
   17952:	049b      	lsls	r3, r3, #18
   17954:	429a      	cmp	r2, r3
   17956:	d16a      	bne.n	17a2e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   17958:	4b22      	ldr	r3, [pc, #136]	; (179e4 <_i2c_master_set_config+0x358>)
   1795a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1795c:	4798      	blx	r3
   1795e:	4c25      	ldr	r4, [pc, #148]	; (179f4 <_i2c_master_set_config+0x368>)
   17960:	0002      	movs	r2, r0
   17962:	000b      	movs	r3, r1
   17964:	47a0      	blx	r4
   17966:	0003      	movs	r3, r0
   17968:	000c      	movs	r4, r1
   1796a:	001d      	movs	r5, r3
   1796c:	0026      	movs	r6, r4
   1796e:	4b1d      	ldr	r3, [pc, #116]	; (179e4 <_i2c_master_set_config+0x358>)
   17970:	6a78      	ldr	r0, [r7, #36]	; 0x24
   17972:	4798      	blx	r3
   17974:	4c1c      	ldr	r4, [pc, #112]	; (179e8 <_i2c_master_set_config+0x35c>)
   17976:	2200      	movs	r2, #0
   17978:	4b24      	ldr	r3, [pc, #144]	; (17a0c <_i2c_master_set_config+0x380>)
   1797a:	47a0      	blx	r4
   1797c:	0003      	movs	r3, r0
   1797e:	000c      	movs	r4, r1
   17980:	001a      	movs	r2, r3
   17982:	0023      	movs	r3, r4
   17984:	4c1f      	ldr	r4, [pc, #124]	; (17a04 <_i2c_master_set_config+0x378>)
   17986:	0028      	movs	r0, r5
   17988:	0031      	movs	r1, r6
   1798a:	47a0      	blx	r4
   1798c:	0003      	movs	r3, r0
   1798e:	000c      	movs	r4, r1
   17990:	0018      	movs	r0, r3
   17992:	0021      	movs	r1, r4
   17994:	4c19      	ldr	r4, [pc, #100]	; (179fc <_i2c_master_set_config+0x370>)
   17996:	2200      	movs	r2, #0
   17998:	4b19      	ldr	r3, [pc, #100]	; (17a00 <_i2c_master_set_config+0x374>)
   1799a:	47a0      	blx	r4
   1799c:	0003      	movs	r3, r0
   1799e:	000c      	movs	r4, r1
   179a0:	0019      	movs	r1, r3
   179a2:	0022      	movs	r2, r4
   179a4:	4b18      	ldr	r3, [pc, #96]	; (17a08 <_i2c_master_set_config+0x37c>)
   179a6:	0008      	movs	r0, r1
   179a8:	0011      	movs	r1, r2
   179aa:	4798      	blx	r3
   179ac:	0003      	movs	r3, r0
   179ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   179b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   179b2:	2b00      	cmp	r3, #0
   179b4:	d02e      	beq.n	17a14 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   179b6:	4b16      	ldr	r3, [pc, #88]	; (17a10 <_i2c_master_set_config+0x384>)
   179b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   179ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   179bc:	4798      	blx	r3
   179be:	0003      	movs	r3, r0
   179c0:	1e9a      	subs	r2, r3, #2
   179c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   179c4:	1ad3      	subs	r3, r2, r3
   179c6:	653b      	str	r3, [r7, #80]	; 0x50
   179c8:	e031      	b.n	17a2e <_i2c_master_set_config+0x3a2>
   179ca:	46c0      	nop			; (mov r8, r8)
   179cc:	00027659 	.word	0x00027659
   179d0:	0001754d 	.word	0x0001754d
   179d4:	0002749d 	.word	0x0002749d
   179d8:	0002a249 	.word	0x0002a249
   179dc:	00017575 	.word	0x00017575
   179e0:	0002a00d 	.word	0x0002a00d
   179e4:	00034901 	.word	0x00034901
   179e8:	00033d6d 	.word	0x00033d6d
   179ec:	e826d695 	.word	0xe826d695
   179f0:	3e112e0b 	.word	0x3e112e0b
   179f4:	000330e5 	.word	0x000330e5
   179f8:	40240000 	.word	0x40240000
   179fc:	0003426d 	.word	0x0003426d
   17a00:	3ff00000 	.word	0x3ff00000
   17a04:	00033705 	.word	0x00033705
   17a08:	00034899 	.word	0x00034899
   17a0c:	40080000 	.word	0x40080000
   17a10:	00032a85 	.word	0x00032a85
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   17a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17a16:	005a      	lsls	r2, r3, #1
   17a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17a1a:	18d3      	adds	r3, r2, r3
   17a1c:	1e5a      	subs	r2, r3, #1
   17a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17a20:	0059      	lsls	r1, r3, #1
   17a22:	4b1d      	ldr	r3, [pc, #116]	; (17a98 <_i2c_master_set_config+0x40c>)
   17a24:	0010      	movs	r0, r2
   17a26:	4798      	blx	r3
   17a28:	0003      	movs	r3, r0
   17a2a:	3b01      	subs	r3, #1
   17a2c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   17a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17a30:	2bff      	cmp	r3, #255	; 0xff
   17a32:	dc08      	bgt.n	17a46 <_i2c_master_set_config+0x3ba>
   17a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17a36:	2b00      	cmp	r3, #0
   17a38:	db05      	blt.n	17a46 <_i2c_master_set_config+0x3ba>
   17a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17a3c:	2bff      	cmp	r3, #255	; 0xff
   17a3e:	dc02      	bgt.n	17a46 <_i2c_master_set_config+0x3ba>
   17a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17a42:	2b00      	cmp	r3, #0
   17a44:	da06      	bge.n	17a54 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17a46:	233b      	movs	r3, #59	; 0x3b
   17a48:	2210      	movs	r2, #16
   17a4a:	4694      	mov	ip, r2
   17a4c:	44bc      	add	ip, r7
   17a4e:	4463      	add	r3, ip
   17a50:	2240      	movs	r2, #64	; 0x40
   17a52:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   17a54:	233b      	movs	r3, #59	; 0x3b
   17a56:	2210      	movs	r2, #16
   17a58:	4694      	mov	ip, r2
   17a5a:	44bc      	add	ip, r7
   17a5c:	4463      	add	r3, ip
   17a5e:	781b      	ldrb	r3, [r3, #0]
   17a60:	2b40      	cmp	r3, #64	; 0x40
   17a62:	d00e      	beq.n	17a82 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17a66:	22ff      	movs	r2, #255	; 0xff
   17a68:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   17a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17a6c:	041b      	lsls	r3, r3, #16
   17a6e:	0019      	movs	r1, r3
   17a70:	23ff      	movs	r3, #255	; 0xff
   17a72:	041b      	lsls	r3, r3, #16
   17a74:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17a76:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   17a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   17a7a:	0612      	lsls	r2, r2, #24
   17a7c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17a80:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   17a82:	233b      	movs	r3, #59	; 0x3b
   17a84:	2210      	movs	r2, #16
   17a86:	4694      	mov	ip, r2
   17a88:	44bc      	add	ip, r7
   17a8a:	4463      	add	r3, ip
   17a8c:	781b      	ldrb	r3, [r3, #0]
}
   17a8e:	0018      	movs	r0, r3
   17a90:	46bd      	mov	sp, r7
   17a92:	b017      	add	sp, #92	; 0x5c
   17a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17a96:	46c0      	nop			; (mov r8, r8)
   17a98:	00032a85 	.word	0x00032a85

00017a9c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   17a9c:	b590      	push	{r4, r7, lr}
   17a9e:	b08b      	sub	sp, #44	; 0x2c
   17aa0:	af00      	add	r7, sp, #0
   17aa2:	60f8      	str	r0, [r7, #12]
   17aa4:	60b9      	str	r1, [r7, #8]
   17aa6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   17aa8:	68fb      	ldr	r3, [r7, #12]
   17aaa:	68ba      	ldr	r2, [r7, #8]
   17aac:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17aae:	68fb      	ldr	r3, [r7, #12]
   17ab0:	681b      	ldr	r3, [r3, #0]
   17ab2:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17ab4:	68fb      	ldr	r3, [r7, #12]
   17ab6:	681b      	ldr	r3, [r3, #0]
   17ab8:	0018      	movs	r0, r3
   17aba:	4b3b      	ldr	r3, [pc, #236]	; (17ba8 <i2c_master_init+0x10c>)
   17abc:	4798      	blx	r3
   17abe:	0003      	movs	r3, r0
   17ac0:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   17ac2:	6a3b      	ldr	r3, [r7, #32]
   17ac4:	3302      	adds	r3, #2
   17ac6:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17ac8:	6a3b      	ldr	r3, [r7, #32]
   17aca:	3314      	adds	r3, #20
   17acc:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   17ace:	2201      	movs	r2, #1
   17ad0:	69fb      	ldr	r3, [r7, #28]
   17ad2:	409a      	lsls	r2, r3
   17ad4:	0013      	movs	r3, r2
   17ad6:	0019      	movs	r1, r3
   17ad8:	2002      	movs	r0, #2
   17ada:	4b34      	ldr	r3, [pc, #208]	; (17bac <i2c_master_init+0x110>)
   17adc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   17ade:	2314      	movs	r3, #20
   17ae0:	18fb      	adds	r3, r7, r3
   17ae2:	0018      	movs	r0, r3
   17ae4:	4b32      	ldr	r3, [pc, #200]	; (17bb0 <i2c_master_init+0x114>)
   17ae6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   17ae8:	687b      	ldr	r3, [r7, #4]
   17aea:	7b1a      	ldrb	r2, [r3, #12]
   17aec:	2314      	movs	r3, #20
   17aee:	18fb      	adds	r3, r7, r3
   17af0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   17af2:	69bb      	ldr	r3, [r7, #24]
   17af4:	b2db      	uxtb	r3, r3
   17af6:	2214      	movs	r2, #20
   17af8:	18ba      	adds	r2, r7, r2
   17afa:	0011      	movs	r1, r2
   17afc:	0018      	movs	r0, r3
   17afe:	4b2d      	ldr	r3, [pc, #180]	; (17bb4 <i2c_master_init+0x118>)
   17b00:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   17b02:	69bb      	ldr	r3, [r7, #24]
   17b04:	b2db      	uxtb	r3, r3
   17b06:	0018      	movs	r0, r3
   17b08:	4b2b      	ldr	r3, [pc, #172]	; (17bb8 <i2c_master_init+0x11c>)
   17b0a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   17b0c:	687b      	ldr	r3, [r7, #4]
   17b0e:	7b1b      	ldrb	r3, [r3, #12]
   17b10:	2100      	movs	r1, #0
   17b12:	0018      	movs	r0, r3
   17b14:	4b29      	ldr	r3, [pc, #164]	; (17bbc <i2c_master_init+0x120>)
   17b16:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   17b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17b1a:	681b      	ldr	r3, [r3, #0]
   17b1c:	2202      	movs	r2, #2
   17b1e:	4013      	ands	r3, r2
   17b20:	d001      	beq.n	17b26 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   17b22:	231c      	movs	r3, #28
   17b24:	e03b      	b.n	17b9e <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   17b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17b28:	681b      	ldr	r3, [r3, #0]
   17b2a:	2201      	movs	r2, #1
   17b2c:	4013      	ands	r3, r2
   17b2e:	d001      	beq.n	17b34 <i2c_master_init+0x98>
		return STATUS_BUSY;
   17b30:	2305      	movs	r3, #5
   17b32:	e034      	b.n	17b9e <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   17b34:	68fb      	ldr	r3, [r7, #12]
   17b36:	681b      	ldr	r3, [r3, #0]
   17b38:	2217      	movs	r2, #23
   17b3a:	18bc      	adds	r4, r7, r2
   17b3c:	0018      	movs	r0, r3
   17b3e:	4b1a      	ldr	r3, [pc, #104]	; (17ba8 <i2c_master_init+0x10c>)
   17b40:	4798      	blx	r3
   17b42:	0003      	movs	r3, r0
   17b44:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   17b46:	4a1e      	ldr	r2, [pc, #120]	; (17bc0 <i2c_master_init+0x124>)
   17b48:	2317      	movs	r3, #23
   17b4a:	18fb      	adds	r3, r7, r3
   17b4c:	781b      	ldrb	r3, [r3, #0]
   17b4e:	0011      	movs	r1, r2
   17b50:	0018      	movs	r0, r3
   17b52:	4b1c      	ldr	r3, [pc, #112]	; (17bc4 <i2c_master_init+0x128>)
   17b54:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   17b56:	2317      	movs	r3, #23
   17b58:	18fb      	adds	r3, r7, r3
   17b5a:	781a      	ldrb	r2, [r3, #0]
   17b5c:	4b1a      	ldr	r3, [pc, #104]	; (17bc8 <i2c_master_init+0x12c>)
   17b5e:	0092      	lsls	r2, r2, #2
   17b60:	68f9      	ldr	r1, [r7, #12]
   17b62:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   17b64:	68fb      	ldr	r3, [r7, #12]
   17b66:	2200      	movs	r2, #0
   17b68:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   17b6a:	68fb      	ldr	r3, [r7, #12]
   17b6c:	2200      	movs	r2, #0
   17b6e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   17b70:	68fb      	ldr	r3, [r7, #12]
   17b72:	2200      	movs	r2, #0
   17b74:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   17b76:	68fb      	ldr	r3, [r7, #12]
   17b78:	2200      	movs	r2, #0
   17b7a:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   17b7c:	68fb      	ldr	r3, [r7, #12]
   17b7e:	2225      	movs	r2, #37	; 0x25
   17b80:	2100      	movs	r1, #0
   17b82:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   17b84:	68fb      	ldr	r3, [r7, #12]
   17b86:	2200      	movs	r2, #0
   17b88:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   17b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17b8c:	2214      	movs	r2, #20
   17b8e:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   17b90:	687a      	ldr	r2, [r7, #4]
   17b92:	68fb      	ldr	r3, [r7, #12]
   17b94:	0011      	movs	r1, r2
   17b96:	0018      	movs	r0, r3
   17b98:	4b0c      	ldr	r3, [pc, #48]	; (17bcc <i2c_master_init+0x130>)
   17b9a:	4798      	blx	r3
   17b9c:	0003      	movs	r3, r0
}
   17b9e:	0018      	movs	r0, r3
   17ba0:	46bd      	mov	sp, r7
   17ba2:	b00b      	add	sp, #44	; 0x2c
   17ba4:	bd90      	pop	{r4, r7, pc}
   17ba6:	46c0      	nop			; (mov r8, r8)
   17ba8:	00027659 	.word	0x00027659
   17bac:	000174f1 	.word	0x000174f1
   17bb0:	000174d9 	.word	0x000174d9
   17bb4:	00029ee9 	.word	0x00029ee9
   17bb8:	00029f2d 	.word	0x00029f2d
   17bbc:	00027411 	.word	0x00027411
   17bc0:	00012bcd 	.word	0x00012bcd
   17bc4:	000276bd 	.word	0x000276bd
   17bc8:	20005a88 	.word	0x20005a88
   17bcc:	0001768d 	.word	0x0001768d

00017bd0 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   17bd0:	b580      	push	{r7, lr}
   17bd2:	b084      	sub	sp, #16
   17bd4:	af00      	add	r7, sp, #0
   17bd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17bd8:	687b      	ldr	r3, [r7, #4]
   17bda:	681b      	ldr	r3, [r3, #0]
   17bdc:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   17bde:	687b      	ldr	r3, [r7, #4]
   17be0:	0018      	movs	r0, r3
   17be2:	4b0f      	ldr	r3, [pc, #60]	; (17c20 <i2c_master_reset+0x50>)
   17be4:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   17be6:	687b      	ldr	r3, [r7, #4]
   17be8:	0018      	movs	r0, r3
   17bea:	4b0e      	ldr	r3, [pc, #56]	; (17c24 <i2c_master_reset+0x54>)
   17bec:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   17bee:	4b0e      	ldr	r3, [pc, #56]	; (17c28 <i2c_master_reset+0x58>)
   17bf0:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   17bf2:	687b      	ldr	r3, [r7, #4]
   17bf4:	681b      	ldr	r3, [r3, #0]
   17bf6:	0018      	movs	r0, r3
   17bf8:	4b0c      	ldr	r3, [pc, #48]	; (17c2c <i2c_master_reset+0x5c>)
   17bfa:	4798      	blx	r3
   17bfc:	0003      	movs	r3, r0
   17bfe:	0018      	movs	r0, r3
   17c00:	4b0b      	ldr	r3, [pc, #44]	; (17c30 <i2c_master_reset+0x60>)
   17c02:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   17c04:	4b0b      	ldr	r3, [pc, #44]	; (17c34 <i2c_master_reset+0x64>)
   17c06:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   17c08:	687b      	ldr	r3, [r7, #4]
   17c0a:	0018      	movs	r0, r3
   17c0c:	4b04      	ldr	r3, [pc, #16]	; (17c20 <i2c_master_reset+0x50>)
   17c0e:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   17c10:	68fb      	ldr	r3, [r7, #12]
   17c12:	2201      	movs	r2, #1
   17c14:	601a      	str	r2, [r3, #0]
}
   17c16:	46c0      	nop			; (mov r8, r8)
   17c18:	46bd      	mov	sp, r7
   17c1a:	b004      	add	sp, #16
   17c1c:	bd80      	pop	{r7, pc}
   17c1e:	46c0      	nop			; (mov r8, r8)
   17c20:	00017611 	.word	0x00017611
   17c24:	00017635 	.word	0x00017635
   17c28:	00017595 	.word	0x00017595
   17c2c:	00027729 	.word	0x00027729
   17c30:	0002a065 	.word	0x0002a065
   17c34:	000175a9 	.word	0x000175a9

00017c38 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   17c38:	b580      	push	{r7, lr}
   17c3a:	b084      	sub	sp, #16
   17c3c:	af00      	add	r7, sp, #0
   17c3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17c40:	687b      	ldr	r3, [r7, #4]
   17c42:	681b      	ldr	r3, [r3, #0]
   17c44:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   17c46:	68fb      	ldr	r3, [r7, #12]
   17c48:	7e1b      	ldrb	r3, [r3, #24]
   17c4a:	b2db      	uxtb	r3, r3
   17c4c:	001a      	movs	r2, r3
   17c4e:	2302      	movs	r3, #2
   17c50:	4013      	ands	r3, r2
   17c52:	d00b      	beq.n	17c6c <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   17c54:	68fb      	ldr	r3, [r7, #12]
   17c56:	2202      	movs	r2, #2
   17c58:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   17c5a:	68fb      	ldr	r3, [r7, #12]
   17c5c:	8b5b      	ldrh	r3, [r3, #26]
   17c5e:	b29b      	uxth	r3, r3
   17c60:	001a      	movs	r2, r3
   17c62:	2302      	movs	r3, #2
   17c64:	4013      	ands	r3, r2
   17c66:	d011      	beq.n	17c8c <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   17c68:	2341      	movs	r3, #65	; 0x41
   17c6a:	e010      	b.n	17c8e <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   17c6c:	68fb      	ldr	r3, [r7, #12]
   17c6e:	8b5b      	ldrh	r3, [r3, #26]
   17c70:	b29b      	uxth	r3, r3
   17c72:	001a      	movs	r2, r3
   17c74:	2304      	movs	r3, #4
   17c76:	4013      	ands	r3, r2
   17c78:	d008      	beq.n	17c8c <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   17c7a:	68fb      	ldr	r3, [r7, #12]
   17c7c:	685b      	ldr	r3, [r3, #4]
   17c7e:	22c0      	movs	r2, #192	; 0xc0
   17c80:	0292      	lsls	r2, r2, #10
   17c82:	431a      	orrs	r2, r3
   17c84:	68fb      	ldr	r3, [r7, #12]
   17c86:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   17c88:	2318      	movs	r3, #24
   17c8a:	e000      	b.n	17c8e <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   17c8c:	2300      	movs	r3, #0
}
   17c8e:	0018      	movs	r0, r3
   17c90:	46bd      	mov	sp, r7
   17c92:	b004      	add	sp, #16
   17c94:	bd80      	pop	{r7, pc}

00017c96 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   17c96:	b580      	push	{r7, lr}
   17c98:	b084      	sub	sp, #16
   17c9a:	af00      	add	r7, sp, #0
   17c9c:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17c9e:	687b      	ldr	r3, [r7, #4]
   17ca0:	681b      	ldr	r3, [r3, #0]
   17ca2:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   17ca4:	230e      	movs	r3, #14
   17ca6:	18fb      	adds	r3, r7, r3
   17ca8:	2200      	movs	r2, #0
   17caa:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17cac:	e00f      	b.n	17cce <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   17cae:	230e      	movs	r3, #14
   17cb0:	18fb      	adds	r3, r7, r3
   17cb2:	220e      	movs	r2, #14
   17cb4:	18ba      	adds	r2, r7, r2
   17cb6:	8812      	ldrh	r2, [r2, #0]
   17cb8:	3201      	adds	r2, #1
   17cba:	801a      	strh	r2, [r3, #0]
   17cbc:	687b      	ldr	r3, [r7, #4]
   17cbe:	891b      	ldrh	r3, [r3, #8]
   17cc0:	220e      	movs	r2, #14
   17cc2:	18ba      	adds	r2, r7, r2
   17cc4:	8812      	ldrh	r2, [r2, #0]
   17cc6:	429a      	cmp	r2, r3
   17cc8:	d301      	bcc.n	17cce <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   17cca:	2312      	movs	r3, #18
   17ccc:	e00e      	b.n	17cec <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17cce:	68bb      	ldr	r3, [r7, #8]
   17cd0:	7e1b      	ldrb	r3, [r3, #24]
   17cd2:	b2db      	uxtb	r3, r3
   17cd4:	001a      	movs	r2, r3
   17cd6:	2301      	movs	r3, #1
   17cd8:	4013      	ands	r3, r2
   17cda:	d106      	bne.n	17cea <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   17cdc:	68bb      	ldr	r3, [r7, #8]
   17cde:	7e1b      	ldrb	r3, [r3, #24]
   17ce0:	b2db      	uxtb	r3, r3
   17ce2:	001a      	movs	r2, r3
   17ce4:	2302      	movs	r3, #2
   17ce6:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17ce8:	d0e1      	beq.n	17cae <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   17cea:	2300      	movs	r3, #0
}
   17cec:	0018      	movs	r0, r3
   17cee:	46bd      	mov	sp, r7
   17cf0:	b004      	add	sp, #16
   17cf2:	bd80      	pop	{r7, pc}

00017cf4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   17cf4:	b590      	push	{r4, r7, lr}
   17cf6:	b085      	sub	sp, #20
   17cf8:	af00      	add	r7, sp, #0
   17cfa:	6078      	str	r0, [r7, #4]
   17cfc:	000a      	movs	r2, r1
   17cfe:	1cfb      	adds	r3, r7, #3
   17d00:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17d02:	687b      	ldr	r3, [r7, #4]
   17d04:	681b      	ldr	r3, [r3, #0]
   17d06:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   17d08:	68fb      	ldr	r3, [r7, #12]
   17d0a:	685b      	ldr	r3, [r3, #4]
   17d0c:	2280      	movs	r2, #128	; 0x80
   17d0e:	02d2      	lsls	r2, r2, #11
   17d10:	431a      	orrs	r2, r3
   17d12:	68fb      	ldr	r3, [r7, #12]
   17d14:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   17d16:	1cfb      	adds	r3, r7, #3
   17d18:	781a      	ldrb	r2, [r3, #0]
   17d1a:	68fb      	ldr	r3, [r7, #12]
   17d1c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   17d1e:	230b      	movs	r3, #11
   17d20:	18fc      	adds	r4, r7, r3
   17d22:	687b      	ldr	r3, [r7, #4]
   17d24:	0018      	movs	r0, r3
   17d26:	4b07      	ldr	r3, [pc, #28]	; (17d44 <_i2c_master_send_hs_master_code+0x50>)
   17d28:	4798      	blx	r3
   17d2a:	0003      	movs	r3, r0
   17d2c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   17d2e:	68fb      	ldr	r3, [r7, #12]
   17d30:	2201      	movs	r2, #1
   17d32:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   17d34:	230b      	movs	r3, #11
   17d36:	18fb      	adds	r3, r7, r3
   17d38:	781b      	ldrb	r3, [r3, #0]
}
   17d3a:	0018      	movs	r0, r3
   17d3c:	46bd      	mov	sp, r7
   17d3e:	b005      	add	sp, #20
   17d40:	bd90      	pop	{r4, r7, pc}
   17d42:	46c0      	nop			; (mov r8, r8)
   17d44:	00017c97 	.word	0x00017c97

00017d48 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   17d48:	b580      	push	{r7, lr}
   17d4a:	af00      	add	r7, sp, #0
   17d4c:	2000      	movs	r0, #0
   17d4e:	4b02      	ldr	r3, [pc, #8]	; (17d58 <TC3_Handler+0x10>)
   17d50:	4798      	blx	r3
   17d52:	46c0      	nop			; (mov r8, r8)
   17d54:	46bd      	mov	sp, r7
   17d56:	bd80      	pop	{r7, pc}
   17d58:	00017d85 	.word	0x00017d85

00017d5c <TC4_Handler>:
   17d5c:	b580      	push	{r7, lr}
   17d5e:	af00      	add	r7, sp, #0
   17d60:	2001      	movs	r0, #1
   17d62:	4b02      	ldr	r3, [pc, #8]	; (17d6c <TC4_Handler+0x10>)
   17d64:	4798      	blx	r3
   17d66:	46c0      	nop			; (mov r8, r8)
   17d68:	46bd      	mov	sp, r7
   17d6a:	bd80      	pop	{r7, pc}
   17d6c:	00017d85 	.word	0x00017d85

00017d70 <TC5_Handler>:
   17d70:	b580      	push	{r7, lr}
   17d72:	af00      	add	r7, sp, #0
   17d74:	2002      	movs	r0, #2
   17d76:	4b02      	ldr	r3, [pc, #8]	; (17d80 <TC5_Handler+0x10>)
   17d78:	4798      	blx	r3
   17d7a:	46c0      	nop			; (mov r8, r8)
   17d7c:	46bd      	mov	sp, r7
   17d7e:	bd80      	pop	{r7, pc}
   17d80:	00017d85 	.word	0x00017d85

00017d84 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   17d84:	b580      	push	{r7, lr}
   17d86:	b084      	sub	sp, #16
   17d88:	af00      	add	r7, sp, #0
   17d8a:	0002      	movs	r2, r0
   17d8c:	1dfb      	adds	r3, r7, #7
   17d8e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   17d90:	1dfb      	adds	r3, r7, #7
   17d92:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   17d94:	4b28      	ldr	r3, [pc, #160]	; (17e38 <_tc_interrupt_handler+0xb4>)
   17d96:	0092      	lsls	r2, r2, #2
   17d98:	58d3      	ldr	r3, [r2, r3]
   17d9a:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17d9c:	68fb      	ldr	r3, [r7, #12]
   17d9e:	681b      	ldr	r3, [r3, #0]
   17da0:	7b9b      	ldrb	r3, [r3, #14]
   17da2:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   17da4:	68fa      	ldr	r2, [r7, #12]
   17da6:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17da8:	4013      	ands	r3, r2
   17daa:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   17dac:	68fb      	ldr	r3, [r7, #12]
   17dae:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17db0:	230b      	movs	r3, #11
   17db2:	18fb      	adds	r3, r7, r3
   17db4:	400a      	ands	r2, r1
   17db6:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   17db8:	230b      	movs	r3, #11
   17dba:	18fb      	adds	r3, r7, r3
   17dbc:	781b      	ldrb	r3, [r3, #0]
   17dbe:	2201      	movs	r2, #1
   17dc0:	4013      	ands	r3, r2
   17dc2:	d008      	beq.n	17dd6 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   17dc4:	68fb      	ldr	r3, [r7, #12]
   17dc6:	689b      	ldr	r3, [r3, #8]
   17dc8:	68fa      	ldr	r2, [r7, #12]
   17dca:	0010      	movs	r0, r2
   17dcc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   17dce:	68fb      	ldr	r3, [r7, #12]
   17dd0:	681b      	ldr	r3, [r3, #0]
   17dd2:	2201      	movs	r2, #1
   17dd4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   17dd6:	230b      	movs	r3, #11
   17dd8:	18fb      	adds	r3, r7, r3
   17dda:	781b      	ldrb	r3, [r3, #0]
   17ddc:	2202      	movs	r2, #2
   17dde:	4013      	ands	r3, r2
   17de0:	d008      	beq.n	17df4 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   17de2:	68fb      	ldr	r3, [r7, #12]
   17de4:	68db      	ldr	r3, [r3, #12]
   17de6:	68fa      	ldr	r2, [r7, #12]
   17de8:	0010      	movs	r0, r2
   17dea:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   17dec:	68fb      	ldr	r3, [r7, #12]
   17dee:	681b      	ldr	r3, [r3, #0]
   17df0:	2202      	movs	r2, #2
   17df2:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   17df4:	230b      	movs	r3, #11
   17df6:	18fb      	adds	r3, r7, r3
   17df8:	781b      	ldrb	r3, [r3, #0]
   17dfa:	2210      	movs	r2, #16
   17dfc:	4013      	ands	r3, r2
   17dfe:	d008      	beq.n	17e12 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   17e00:	68fb      	ldr	r3, [r7, #12]
   17e02:	691b      	ldr	r3, [r3, #16]
   17e04:	68fa      	ldr	r2, [r7, #12]
   17e06:	0010      	movs	r0, r2
   17e08:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   17e0a:	68fb      	ldr	r3, [r7, #12]
   17e0c:	681b      	ldr	r3, [r3, #0]
   17e0e:	2210      	movs	r2, #16
   17e10:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   17e12:	230b      	movs	r3, #11
   17e14:	18fb      	adds	r3, r7, r3
   17e16:	781b      	ldrb	r3, [r3, #0]
   17e18:	2220      	movs	r2, #32
   17e1a:	4013      	ands	r3, r2
   17e1c:	d008      	beq.n	17e30 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   17e1e:	68fb      	ldr	r3, [r7, #12]
   17e20:	695b      	ldr	r3, [r3, #20]
   17e22:	68fa      	ldr	r2, [r7, #12]
   17e24:	0010      	movs	r0, r2
   17e26:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   17e28:	68fb      	ldr	r3, [r7, #12]
   17e2a:	681b      	ldr	r3, [r3, #0]
   17e2c:	2220      	movs	r2, #32
   17e2e:	739a      	strb	r2, [r3, #14]
	}
}
   17e30:	46c0      	nop			; (mov r8, r8)
   17e32:	46bd      	mov	sp, r7
   17e34:	b004      	add	sp, #16
   17e36:	bd80      	pop	{r7, pc}
   17e38:	20004870 	.word	0x20004870

00017e3c <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   17e3c:	b580      	push	{r7, lr}
   17e3e:	b084      	sub	sp, #16
   17e40:	af00      	add	r7, sp, #0
   17e42:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   17e44:	2300      	movs	r3, #0
   17e46:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   17e48:	687b      	ldr	r3, [r7, #4]
   17e4a:	2b00      	cmp	r3, #0
   17e4c:	d101      	bne.n	17e52 <FreeRTOS_CLIRegisterCommand+0x16>
   17e4e:	b672      	cpsid	i
   17e50:	e7fe      	b.n	17e50 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   17e52:	2008      	movs	r0, #8
   17e54:	4b11      	ldr	r3, [pc, #68]	; (17e9c <FreeRTOS_CLIRegisterCommand+0x60>)
   17e56:	4798      	blx	r3
   17e58:	0003      	movs	r3, r0
   17e5a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   17e5c:	68bb      	ldr	r3, [r7, #8]
   17e5e:	2b00      	cmp	r3, #0
   17e60:	d101      	bne.n	17e66 <FreeRTOS_CLIRegisterCommand+0x2a>
   17e62:	b672      	cpsid	i
   17e64:	e7fe      	b.n	17e64 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   17e66:	68bb      	ldr	r3, [r7, #8]
   17e68:	2b00      	cmp	r3, #0
   17e6a:	d012      	beq.n	17e92 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   17e6c:	4b0c      	ldr	r3, [pc, #48]	; (17ea0 <FreeRTOS_CLIRegisterCommand+0x64>)
   17e6e:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   17e70:	68bb      	ldr	r3, [r7, #8]
   17e72:	687a      	ldr	r2, [r7, #4]
   17e74:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   17e76:	68bb      	ldr	r3, [r7, #8]
   17e78:	2200      	movs	r2, #0
   17e7a:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   17e7c:	4b09      	ldr	r3, [pc, #36]	; (17ea4 <FreeRTOS_CLIRegisterCommand+0x68>)
   17e7e:	681b      	ldr	r3, [r3, #0]
   17e80:	68ba      	ldr	r2, [r7, #8]
   17e82:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   17e84:	4b07      	ldr	r3, [pc, #28]	; (17ea4 <FreeRTOS_CLIRegisterCommand+0x68>)
   17e86:	68ba      	ldr	r2, [r7, #8]
   17e88:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   17e8a:	4b07      	ldr	r3, [pc, #28]	; (17ea8 <FreeRTOS_CLIRegisterCommand+0x6c>)
   17e8c:	4798      	blx	r3

		xReturn = pdPASS;
   17e8e:	2301      	movs	r3, #1
   17e90:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   17e92:	68fb      	ldr	r3, [r7, #12]
}
   17e94:	0018      	movs	r0, r3
   17e96:	46bd      	mov	sp, r7
   17e98:	b004      	add	sp, #16
   17e9a:	bd80      	pop	{r7, pc}
   17e9c:	0001a301 	.word	0x0001a301
   17ea0:	0001a1c9 	.word	0x0001a1c9
   17ea4:	200000f4 	.word	0x200000f4
   17ea8:	0001a1ed 	.word	0x0001a1ed

00017eac <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   17eac:	b580      	push	{r7, lr}
   17eae:	b088      	sub	sp, #32
   17eb0:	af00      	add	r7, sp, #0
   17eb2:	60f8      	str	r0, [r7, #12]
   17eb4:	60b9      	str	r1, [r7, #8]
   17eb6:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   17eb8:	2301      	movs	r3, #1
   17eba:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   17ebc:	4b3d      	ldr	r3, [pc, #244]	; (17fb4 <FreeRTOS_CLIProcessCommand+0x108>)
   17ebe:	681b      	ldr	r3, [r3, #0]
   17ec0:	2b00      	cmp	r3, #0
   17ec2:	d144      	bne.n	17f4e <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17ec4:	4b3b      	ldr	r3, [pc, #236]	; (17fb4 <FreeRTOS_CLIProcessCommand+0x108>)
   17ec6:	4a3c      	ldr	r2, [pc, #240]	; (17fb8 <FreeRTOS_CLIProcessCommand+0x10c>)
   17ec8:	601a      	str	r2, [r3, #0]
   17eca:	e03a      	b.n	17f42 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   17ecc:	4b39      	ldr	r3, [pc, #228]	; (17fb4 <FreeRTOS_CLIProcessCommand+0x108>)
   17ece:	681b      	ldr	r3, [r3, #0]
   17ed0:	681b      	ldr	r3, [r3, #0]
   17ed2:	681b      	ldr	r3, [r3, #0]
   17ed4:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   17ed6:	69bb      	ldr	r3, [r7, #24]
   17ed8:	0018      	movs	r0, r3
   17eda:	4b38      	ldr	r3, [pc, #224]	; (17fbc <FreeRTOS_CLIProcessCommand+0x110>)
   17edc:	4798      	blx	r3
   17ede:	0003      	movs	r3, r0
   17ee0:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   17ee2:	68fa      	ldr	r2, [r7, #12]
   17ee4:	697b      	ldr	r3, [r7, #20]
   17ee6:	18d3      	adds	r3, r2, r3
   17ee8:	781b      	ldrb	r3, [r3, #0]
   17eea:	2b20      	cmp	r3, #32
   17eec:	d005      	beq.n	17efa <FreeRTOS_CLIProcessCommand+0x4e>
   17eee:	68fa      	ldr	r2, [r7, #12]
   17ef0:	697b      	ldr	r3, [r7, #20]
   17ef2:	18d3      	adds	r3, r2, r3
   17ef4:	781b      	ldrb	r3, [r3, #0]
   17ef6:	2b00      	cmp	r3, #0
   17ef8:	d11e      	bne.n	17f38 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   17efa:	697a      	ldr	r2, [r7, #20]
   17efc:	69b9      	ldr	r1, [r7, #24]
   17efe:	68fb      	ldr	r3, [r7, #12]
   17f00:	0018      	movs	r0, r3
   17f02:	4b2f      	ldr	r3, [pc, #188]	; (17fc0 <FreeRTOS_CLIProcessCommand+0x114>)
   17f04:	4798      	blx	r3
   17f06:	1e03      	subs	r3, r0, #0
   17f08:	d116      	bne.n	17f38 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   17f0a:	4b2a      	ldr	r3, [pc, #168]	; (17fb4 <FreeRTOS_CLIProcessCommand+0x108>)
   17f0c:	681b      	ldr	r3, [r3, #0]
   17f0e:	681b      	ldr	r3, [r3, #0]
   17f10:	7b1b      	ldrb	r3, [r3, #12]
   17f12:	b25b      	sxtb	r3, r3
   17f14:	2b00      	cmp	r3, #0
   17f16:	db19      	blt.n	17f4c <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   17f18:	68fb      	ldr	r3, [r7, #12]
   17f1a:	0018      	movs	r0, r3
   17f1c:	4b29      	ldr	r3, [pc, #164]	; (17fc4 <FreeRTOS_CLIProcessCommand+0x118>)
   17f1e:	4798      	blx	r3
   17f20:	0003      	movs	r3, r0
   17f22:	001a      	movs	r2, r3
   17f24:	4b23      	ldr	r3, [pc, #140]	; (17fb4 <FreeRTOS_CLIProcessCommand+0x108>)
   17f26:	681b      	ldr	r3, [r3, #0]
   17f28:	681b      	ldr	r3, [r3, #0]
   17f2a:	7b1b      	ldrb	r3, [r3, #12]
   17f2c:	b25b      	sxtb	r3, r3
   17f2e:	429a      	cmp	r2, r3
   17f30:	d00c      	beq.n	17f4c <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   17f32:	2300      	movs	r3, #0
   17f34:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   17f36:	e009      	b.n	17f4c <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17f38:	4b1e      	ldr	r3, [pc, #120]	; (17fb4 <FreeRTOS_CLIProcessCommand+0x108>)
   17f3a:	681b      	ldr	r3, [r3, #0]
   17f3c:	685a      	ldr	r2, [r3, #4]
   17f3e:	4b1d      	ldr	r3, [pc, #116]	; (17fb4 <FreeRTOS_CLIProcessCommand+0x108>)
   17f40:	601a      	str	r2, [r3, #0]
   17f42:	4b1c      	ldr	r3, [pc, #112]	; (17fb4 <FreeRTOS_CLIProcessCommand+0x108>)
   17f44:	681b      	ldr	r3, [r3, #0]
   17f46:	2b00      	cmp	r3, #0
   17f48:	d1c0      	bne.n	17ecc <FreeRTOS_CLIProcessCommand+0x20>
   17f4a:	e000      	b.n	17f4e <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   17f4c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   17f4e:	4b19      	ldr	r3, [pc, #100]	; (17fb4 <FreeRTOS_CLIProcessCommand+0x108>)
   17f50:	681b      	ldr	r3, [r3, #0]
   17f52:	2b00      	cmp	r3, #0
   17f54:	d00c      	beq.n	17f70 <FreeRTOS_CLIProcessCommand+0xc4>
   17f56:	69fb      	ldr	r3, [r7, #28]
   17f58:	2b00      	cmp	r3, #0
   17f5a:	d109      	bne.n	17f70 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17f5c:	687a      	ldr	r2, [r7, #4]
   17f5e:	491a      	ldr	r1, [pc, #104]	; (17fc8 <FreeRTOS_CLIProcessCommand+0x11c>)
   17f60:	68bb      	ldr	r3, [r7, #8]
   17f62:	0018      	movs	r0, r3
   17f64:	4b19      	ldr	r3, [pc, #100]	; (17fcc <FreeRTOS_CLIProcessCommand+0x120>)
   17f66:	4798      	blx	r3
		pxCommand = NULL;
   17f68:	4b12      	ldr	r3, [pc, #72]	; (17fb4 <FreeRTOS_CLIProcessCommand+0x108>)
   17f6a:	2200      	movs	r2, #0
   17f6c:	601a      	str	r2, [r3, #0]
   17f6e:	e01c      	b.n	17faa <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   17f70:	4b10      	ldr	r3, [pc, #64]	; (17fb4 <FreeRTOS_CLIProcessCommand+0x108>)
   17f72:	681b      	ldr	r3, [r3, #0]
   17f74:	2b00      	cmp	r3, #0
   17f76:	d010      	beq.n	17f9a <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   17f78:	4b0e      	ldr	r3, [pc, #56]	; (17fb4 <FreeRTOS_CLIProcessCommand+0x108>)
   17f7a:	681b      	ldr	r3, [r3, #0]
   17f7c:	681b      	ldr	r3, [r3, #0]
   17f7e:	689b      	ldr	r3, [r3, #8]
   17f80:	68fa      	ldr	r2, [r7, #12]
   17f82:	6879      	ldr	r1, [r7, #4]
   17f84:	68b8      	ldr	r0, [r7, #8]
   17f86:	4798      	blx	r3
   17f88:	0003      	movs	r3, r0
   17f8a:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   17f8c:	69fb      	ldr	r3, [r7, #28]
   17f8e:	2b00      	cmp	r3, #0
   17f90:	d10b      	bne.n	17faa <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   17f92:	4b08      	ldr	r3, [pc, #32]	; (17fb4 <FreeRTOS_CLIProcessCommand+0x108>)
   17f94:	2200      	movs	r2, #0
   17f96:	601a      	str	r2, [r3, #0]
   17f98:	e007      	b.n	17faa <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17f9a:	687a      	ldr	r2, [r7, #4]
   17f9c:	490c      	ldr	r1, [pc, #48]	; (17fd0 <FreeRTOS_CLIProcessCommand+0x124>)
   17f9e:	68bb      	ldr	r3, [r7, #8]
   17fa0:	0018      	movs	r0, r3
   17fa2:	4b0a      	ldr	r3, [pc, #40]	; (17fcc <FreeRTOS_CLIProcessCommand+0x120>)
   17fa4:	4798      	blx	r3
		xReturn = pdFALSE;
   17fa6:	2300      	movs	r3, #0
   17fa8:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   17faa:	69fb      	ldr	r3, [r7, #28]
}
   17fac:	0018      	movs	r0, r3
   17fae:	46bd      	mov	sp, r7
   17fb0:	b008      	add	sp, #32
   17fb2:	bd80      	pop	{r7, pc}
   17fb4:	20000b54 	.word	0x20000b54
   17fb8:	200000ec 	.word	0x200000ec
   17fbc:	00034e17 	.word	0x00034e17
   17fc0:	00034e25 	.word	0x00034e25
   17fc4:	000180e5 	.word	0x000180e5
   17fc8:	00036eb0 	.word	0x00036eb0
   17fcc:	00034e47 	.word	0x00034e47
   17fd0:	00036f08 	.word	0x00036f08

00017fd4 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
   17fd4:	b580      	push	{r7, lr}
   17fd6:	b086      	sub	sp, #24
   17fd8:	af00      	add	r7, sp, #0
   17fda:	60f8      	str	r0, [r7, #12]
   17fdc:	60b9      	str	r1, [r7, #8]
   17fde:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
   17fe0:	2300      	movs	r3, #0
   17fe2:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
   17fe4:	2300      	movs	r3, #0
   17fe6:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
   17fe8:	687b      	ldr	r3, [r7, #4]
   17fea:	2200      	movs	r2, #0
   17fec:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
   17fee:	e03b      	b.n	18068 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
   17ff0:	68fb      	ldr	r3, [r7, #12]
   17ff2:	3301      	adds	r3, #1
   17ff4:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   17ff6:	68fb      	ldr	r3, [r7, #12]
   17ff8:	781b      	ldrb	r3, [r3, #0]
   17ffa:	2b00      	cmp	r3, #0
   17ffc:	d007      	beq.n	1800e <FreeRTOS_CLIGetParameter+0x3a>
   17ffe:	68fb      	ldr	r3, [r7, #12]
   18000:	781b      	ldrb	r3, [r3, #0]
   18002:	2b20      	cmp	r3, #32
   18004:	d1f4      	bne.n	17ff0 <FreeRTOS_CLIGetParameter+0x1c>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
   18006:	e002      	b.n	1800e <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
   18008:	68fb      	ldr	r3, [r7, #12]
   1800a:	3301      	adds	r3, #1
   1800c:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
   1800e:	68fb      	ldr	r3, [r7, #12]
   18010:	781b      	ldrb	r3, [r3, #0]
   18012:	2b00      	cmp	r3, #0
   18014:	d003      	beq.n	1801e <FreeRTOS_CLIGetParameter+0x4a>
   18016:	68fb      	ldr	r3, [r7, #12]
   18018:	781b      	ldrb	r3, [r3, #0]
   1801a:	2b20      	cmp	r3, #32
   1801c:	d0f4      	beq.n	18008 <FreeRTOS_CLIGetParameter+0x34>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
   1801e:	68fb      	ldr	r3, [r7, #12]
   18020:	781b      	ldrb	r3, [r3, #0]
   18022:	2b00      	cmp	r3, #0
   18024:	d025      	beq.n	18072 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
   18026:	697b      	ldr	r3, [r7, #20]
   18028:	3301      	adds	r3, #1
   1802a:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
   1802c:	697a      	ldr	r2, [r7, #20]
   1802e:	68bb      	ldr	r3, [r7, #8]
   18030:	429a      	cmp	r2, r3
   18032:	d119      	bne.n	18068 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
   18034:	68fb      	ldr	r3, [r7, #12]
   18036:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   18038:	e007      	b.n	1804a <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
   1803a:	687b      	ldr	r3, [r7, #4]
   1803c:	681b      	ldr	r3, [r3, #0]
   1803e:	1c5a      	adds	r2, r3, #1
   18040:	687b      	ldr	r3, [r7, #4]
   18042:	601a      	str	r2, [r3, #0]
					pcCommandString++;
   18044:	68fb      	ldr	r3, [r7, #12]
   18046:	3301      	adds	r3, #1
   18048:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   1804a:	68fb      	ldr	r3, [r7, #12]
   1804c:	781b      	ldrb	r3, [r3, #0]
   1804e:	2b00      	cmp	r3, #0
   18050:	d003      	beq.n	1805a <FreeRTOS_CLIGetParameter+0x86>
   18052:	68fb      	ldr	r3, [r7, #12]
   18054:	781b      	ldrb	r3, [r3, #0]
   18056:	2b20      	cmp	r3, #32
   18058:	d1ef      	bne.n	1803a <FreeRTOS_CLIGetParameter+0x66>
				}

				if( *pxParameterStringLength == 0 )
   1805a:	687b      	ldr	r3, [r7, #4]
   1805c:	681b      	ldr	r3, [r3, #0]
   1805e:	2b00      	cmp	r3, #0
   18060:	d109      	bne.n	18076 <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
   18062:	2300      	movs	r3, #0
   18064:	613b      	str	r3, [r7, #16]
				}

				break;
   18066:	e006      	b.n	18076 <FreeRTOS_CLIGetParameter+0xa2>
	while( uxParametersFound < uxWantedParameter )
   18068:	697a      	ldr	r2, [r7, #20]
   1806a:	68bb      	ldr	r3, [r7, #8]
   1806c:	429a      	cmp	r2, r3
   1806e:	d3c2      	bcc.n	17ff6 <FreeRTOS_CLIGetParameter+0x22>
   18070:	e002      	b.n	18078 <FreeRTOS_CLIGetParameter+0xa4>
			}
		}
		else
		{
			break;
   18072:	46c0      	nop			; (mov r8, r8)
   18074:	e000      	b.n	18078 <FreeRTOS_CLIGetParameter+0xa4>
				break;
   18076:	46c0      	nop			; (mov r8, r8)
		}
	}

	return pcReturn;
   18078:	693b      	ldr	r3, [r7, #16]
}
   1807a:	0018      	movs	r0, r3
   1807c:	46bd      	mov	sp, r7
   1807e:	b006      	add	sp, #24
   18080:	bd80      	pop	{r7, pc}
	...

00018084 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   18084:	b580      	push	{r7, lr}
   18086:	b086      	sub	sp, #24
   18088:	af00      	add	r7, sp, #0
   1808a:	60f8      	str	r0, [r7, #12]
   1808c:	60b9      	str	r1, [r7, #8]
   1808e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   18090:	4b11      	ldr	r3, [pc, #68]	; (180d8 <prvHelpCommand+0x54>)
   18092:	681b      	ldr	r3, [r3, #0]
   18094:	2b00      	cmp	r3, #0
   18096:	d102      	bne.n	1809e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   18098:	4b0f      	ldr	r3, [pc, #60]	; (180d8 <prvHelpCommand+0x54>)
   1809a:	4a10      	ldr	r2, [pc, #64]	; (180dc <prvHelpCommand+0x58>)
   1809c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   1809e:	4b0e      	ldr	r3, [pc, #56]	; (180d8 <prvHelpCommand+0x54>)
   180a0:	681b      	ldr	r3, [r3, #0]
   180a2:	681b      	ldr	r3, [r3, #0]
   180a4:	6859      	ldr	r1, [r3, #4]
   180a6:	68ba      	ldr	r2, [r7, #8]
   180a8:	68fb      	ldr	r3, [r7, #12]
   180aa:	0018      	movs	r0, r3
   180ac:	4b0c      	ldr	r3, [pc, #48]	; (180e0 <prvHelpCommand+0x5c>)
   180ae:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   180b0:	4b09      	ldr	r3, [pc, #36]	; (180d8 <prvHelpCommand+0x54>)
   180b2:	681b      	ldr	r3, [r3, #0]
   180b4:	685a      	ldr	r2, [r3, #4]
   180b6:	4b08      	ldr	r3, [pc, #32]	; (180d8 <prvHelpCommand+0x54>)
   180b8:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   180ba:	4b07      	ldr	r3, [pc, #28]	; (180d8 <prvHelpCommand+0x54>)
   180bc:	681b      	ldr	r3, [r3, #0]
   180be:	2b00      	cmp	r3, #0
   180c0:	d102      	bne.n	180c8 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   180c2:	2300      	movs	r3, #0
   180c4:	617b      	str	r3, [r7, #20]
   180c6:	e001      	b.n	180cc <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   180c8:	2301      	movs	r3, #1
   180ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   180cc:	697b      	ldr	r3, [r7, #20]
}
   180ce:	0018      	movs	r0, r3
   180d0:	46bd      	mov	sp, r7
   180d2:	b006      	add	sp, #24
   180d4:	bd80      	pop	{r7, pc}
   180d6:	46c0      	nop			; (mov r8, r8)
   180d8:	20000b58 	.word	0x20000b58
   180dc:	200000ec 	.word	0x200000ec
   180e0:	00034e47 	.word	0x00034e47

000180e4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   180e4:	b580      	push	{r7, lr}
   180e6:	b084      	sub	sp, #16
   180e8:	af00      	add	r7, sp, #0
   180ea:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   180ec:	230f      	movs	r3, #15
   180ee:	18fb      	adds	r3, r7, r3
   180f0:	2200      	movs	r2, #0
   180f2:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   180f4:	2300      	movs	r3, #0
   180f6:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   180f8:	e018      	b.n	1812c <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   180fa:	687b      	ldr	r3, [r7, #4]
   180fc:	781b      	ldrb	r3, [r3, #0]
   180fe:	2b20      	cmp	r3, #32
   18100:	d10f      	bne.n	18122 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   18102:	68bb      	ldr	r3, [r7, #8]
   18104:	2b01      	cmp	r3, #1
   18106:	d00e      	beq.n	18126 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   18108:	230f      	movs	r3, #15
   1810a:	18fb      	adds	r3, r7, r3
   1810c:	781b      	ldrb	r3, [r3, #0]
   1810e:	b25b      	sxtb	r3, r3
   18110:	b2db      	uxtb	r3, r3
   18112:	3301      	adds	r3, #1
   18114:	b2da      	uxtb	r2, r3
   18116:	230f      	movs	r3, #15
   18118:	18fb      	adds	r3, r7, r3
   1811a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   1811c:	2301      	movs	r3, #1
   1811e:	60bb      	str	r3, [r7, #8]
   18120:	e001      	b.n	18126 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   18122:	2300      	movs	r3, #0
   18124:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   18126:	687b      	ldr	r3, [r7, #4]
   18128:	3301      	adds	r3, #1
   1812a:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   1812c:	687b      	ldr	r3, [r7, #4]
   1812e:	781b      	ldrb	r3, [r3, #0]
   18130:	2b00      	cmp	r3, #0
   18132:	d1e2      	bne.n	180fa <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   18134:	68bb      	ldr	r3, [r7, #8]
   18136:	2b01      	cmp	r3, #1
   18138:	d109      	bne.n	1814e <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   1813a:	230f      	movs	r3, #15
   1813c:	18fb      	adds	r3, r7, r3
   1813e:	781b      	ldrb	r3, [r3, #0]
   18140:	b25b      	sxtb	r3, r3
   18142:	b2db      	uxtb	r3, r3
   18144:	3b01      	subs	r3, #1
   18146:	b2da      	uxtb	r2, r3
   18148:	230f      	movs	r3, #15
   1814a:	18fb      	adds	r3, r7, r3
   1814c:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   1814e:	230f      	movs	r3, #15
   18150:	18fb      	adds	r3, r7, r3
   18152:	781b      	ldrb	r3, [r3, #0]
   18154:	b25b      	sxtb	r3, r3
}
   18156:	0018      	movs	r0, r3
   18158:	46bd      	mov	sp, r7
   1815a:	b004      	add	sp, #16
   1815c:	bd80      	pop	{r7, pc}
	...

00018160 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   18160:	b580      	push	{r7, lr}
   18162:	b082      	sub	sp, #8
   18164:	af00      	add	r7, sp, #0
   18166:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   18168:	687b      	ldr	r3, [r7, #4]
   1816a:	0018      	movs	r0, r3
   1816c:	4b03      	ldr	r3, [pc, #12]	; (1817c <prvTraceGetQueueNumber+0x1c>)
   1816e:	4798      	blx	r3
   18170:	0003      	movs	r3, r0
}
   18172:	0018      	movs	r0, r3
   18174:	46bd      	mov	sp, r7
   18176:	b002      	add	sp, #8
   18178:	bd80      	pop	{r7, pc}
   1817a:	46c0      	nop			; (mov r8, r8)
   1817c:	0001b925 	.word	0x0001b925

00018180 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   18180:	b580      	push	{r7, lr}
   18182:	b082      	sub	sp, #8
   18184:	af00      	add	r7, sp, #0
   18186:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   18188:	687b      	ldr	r3, [r7, #4]
   1818a:	0018      	movs	r0, r3
   1818c:	4b03      	ldr	r3, [pc, #12]	; (1819c <prvTraceGetQueueType+0x1c>)
   1818e:	4798      	blx	r3
   18190:	0003      	movs	r3, r0
}
   18192:	0018      	movs	r0, r3
   18194:	46bd      	mov	sp, r7
   18196:	b002      	add	sp, #8
   18198:	bd80      	pop	{r7, pc}
   1819a:	46c0      	nop			; (mov r8, r8)
   1819c:	0001b951 	.word	0x0001b951

000181a0 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   181a0:	b580      	push	{r7, lr}
   181a2:	b082      	sub	sp, #8
   181a4:	af00      	add	r7, sp, #0
   181a6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   181a8:	687b      	ldr	r3, [r7, #4]
   181aa:	0018      	movs	r0, r3
   181ac:	4b03      	ldr	r3, [pc, #12]	; (181bc <prvTraceGetTaskNumberLow16+0x1c>)
   181ae:	4798      	blx	r3
   181b0:	0003      	movs	r3, r0
   181b2:	b29b      	uxth	r3, r3
}
   181b4:	0018      	movs	r0, r3
   181b6:	46bd      	mov	sp, r7
   181b8:	b002      	add	sp, #8
   181ba:	bd80      	pop	{r7, pc}
   181bc:	0001cc81 	.word	0x0001cc81

000181c0 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   181c0:	b580      	push	{r7, lr}
   181c2:	b082      	sub	sp, #8
   181c4:	af00      	add	r7, sp, #0
   181c6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   181c8:	687b      	ldr	r3, [r7, #4]
   181ca:	0018      	movs	r0, r3
   181cc:	4b04      	ldr	r3, [pc, #16]	; (181e0 <prvTraceGetTaskNumberHigh16+0x20>)
   181ce:	4798      	blx	r3
   181d0:	0003      	movs	r3, r0
   181d2:	0c1b      	lsrs	r3, r3, #16
   181d4:	b29b      	uxth	r3, r3
}
   181d6:	0018      	movs	r0, r3
   181d8:	46bd      	mov	sp, r7
   181da:	b002      	add	sp, #8
   181dc:	bd80      	pop	{r7, pc}
   181de:	46c0      	nop			; (mov r8, r8)
   181e0:	0001cc81 	.word	0x0001cc81

000181e4 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   181e4:	b580      	push	{r7, lr}
   181e6:	b082      	sub	sp, #8
   181e8:	af00      	add	r7, sp, #0
   181ea:	6078      	str	r0, [r7, #4]
   181ec:	000a      	movs	r2, r1
   181ee:	1cbb      	adds	r3, r7, #2
   181f0:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   181f2:	687b      	ldr	r3, [r7, #4]
   181f4:	0018      	movs	r0, r3
   181f6:	4b08      	ldr	r3, [pc, #32]	; (18218 <prvTraceSetTaskNumberLow16+0x34>)
   181f8:	4798      	blx	r3
   181fa:	0003      	movs	r3, r0
   181fc:	0c1b      	lsrs	r3, r3, #16
   181fe:	041a      	lsls	r2, r3, #16
   18200:	1cbb      	adds	r3, r7, #2
   18202:	881b      	ldrh	r3, [r3, #0]
   18204:	431a      	orrs	r2, r3
   18206:	687b      	ldr	r3, [r7, #4]
   18208:	0011      	movs	r1, r2
   1820a:	0018      	movs	r0, r3
   1820c:	4b03      	ldr	r3, [pc, #12]	; (1821c <prvTraceSetTaskNumberLow16+0x38>)
   1820e:	4798      	blx	r3
}
   18210:	46c0      	nop			; (mov r8, r8)
   18212:	46bd      	mov	sp, r7
   18214:	b002      	add	sp, #8
   18216:	bd80      	pop	{r7, pc}
   18218:	0001cc81 	.word	0x0001cc81
   1821c:	0001cca9 	.word	0x0001cca9

00018220 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   18220:	b580      	push	{r7, lr}
   18222:	b082      	sub	sp, #8
   18224:	af00      	add	r7, sp, #0
   18226:	6078      	str	r0, [r7, #4]
   18228:	000a      	movs	r2, r1
   1822a:	1cbb      	adds	r3, r7, #2
   1822c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   1822e:	687b      	ldr	r3, [r7, #4]
   18230:	0018      	movs	r0, r3
   18232:	4b09      	ldr	r3, [pc, #36]	; (18258 <prvTraceSetTaskNumberHigh16+0x38>)
   18234:	4798      	blx	r3
   18236:	0003      	movs	r3, r0
   18238:	041b      	lsls	r3, r3, #16
   1823a:	0c1a      	lsrs	r2, r3, #16
   1823c:	1cbb      	adds	r3, r7, #2
   1823e:	881b      	ldrh	r3, [r3, #0]
   18240:	041b      	lsls	r3, r3, #16
   18242:	431a      	orrs	r2, r3
   18244:	687b      	ldr	r3, [r7, #4]
   18246:	0011      	movs	r1, r2
   18248:	0018      	movs	r0, r3
   1824a:	4b04      	ldr	r3, [pc, #16]	; (1825c <prvTraceSetTaskNumberHigh16+0x3c>)
   1824c:	4798      	blx	r3
}
   1824e:	46c0      	nop			; (mov r8, r8)
   18250:	46bd      	mov	sp, r7
   18252:	b002      	add	sp, #8
   18254:	bd80      	pop	{r7, pc}
   18256:	46c0      	nop			; (mov r8, r8)
   18258:	0001cc81 	.word	0x0001cc81
   1825c:	0001cca9 	.word	0x0001cca9

00018260 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   18260:	b580      	push	{r7, lr}
   18262:	b082      	sub	sp, #8
   18264:	af00      	add	r7, sp, #0
   18266:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   18268:	687b      	ldr	r3, [r7, #4]
   1826a:	0018      	movs	r0, r3
   1826c:	4b03      	ldr	r3, [pc, #12]	; (1827c <prvTraceGetQueueNumberLow16+0x1c>)
   1826e:	4798      	blx	r3
   18270:	0003      	movs	r3, r0
   18272:	b29b      	uxth	r3, r3
}
   18274:	0018      	movs	r0, r3
   18276:	46bd      	mov	sp, r7
   18278:	b002      	add	sp, #8
   1827a:	bd80      	pop	{r7, pc}
   1827c:	00018161 	.word	0x00018161

00018280 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   18280:	b580      	push	{r7, lr}
   18282:	b082      	sub	sp, #8
   18284:	af00      	add	r7, sp, #0
   18286:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   18288:	687b      	ldr	r3, [r7, #4]
   1828a:	0018      	movs	r0, r3
   1828c:	4b04      	ldr	r3, [pc, #16]	; (182a0 <prvTraceGetQueueNumberHigh16+0x20>)
   1828e:	4798      	blx	r3
   18290:	0003      	movs	r3, r0
   18292:	0c1b      	lsrs	r3, r3, #16
   18294:	b29b      	uxth	r3, r3
}
   18296:	0018      	movs	r0, r3
   18298:	46bd      	mov	sp, r7
   1829a:	b002      	add	sp, #8
   1829c:	bd80      	pop	{r7, pc}
   1829e:	46c0      	nop			; (mov r8, r8)
   182a0:	00018161 	.word	0x00018161

000182a4 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   182a4:	b580      	push	{r7, lr}
   182a6:	b082      	sub	sp, #8
   182a8:	af00      	add	r7, sp, #0
   182aa:	6078      	str	r0, [r7, #4]
   182ac:	000a      	movs	r2, r1
   182ae:	1cbb      	adds	r3, r7, #2
   182b0:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   182b2:	687b      	ldr	r3, [r7, #4]
   182b4:	0018      	movs	r0, r3
   182b6:	4b08      	ldr	r3, [pc, #32]	; (182d8 <prvTraceSetQueueNumberLow16+0x34>)
   182b8:	4798      	blx	r3
   182ba:	0003      	movs	r3, r0
   182bc:	0c1b      	lsrs	r3, r3, #16
   182be:	041a      	lsls	r2, r3, #16
   182c0:	1cbb      	adds	r3, r7, #2
   182c2:	881b      	ldrh	r3, [r3, #0]
   182c4:	431a      	orrs	r2, r3
   182c6:	687b      	ldr	r3, [r7, #4]
   182c8:	0011      	movs	r1, r2
   182ca:	0018      	movs	r0, r3
   182cc:	4b03      	ldr	r3, [pc, #12]	; (182dc <prvTraceSetQueueNumberLow16+0x38>)
   182ce:	4798      	blx	r3
}
   182d0:	46c0      	nop			; (mov r8, r8)
   182d2:	46bd      	mov	sp, r7
   182d4:	b002      	add	sp, #8
   182d6:	bd80      	pop	{r7, pc}
   182d8:	00018161 	.word	0x00018161
   182dc:	0001b939 	.word	0x0001b939

000182e0 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   182e0:	b580      	push	{r7, lr}
   182e2:	b082      	sub	sp, #8
   182e4:	af00      	add	r7, sp, #0
   182e6:	6078      	str	r0, [r7, #4]
   182e8:	000a      	movs	r2, r1
   182ea:	1cbb      	adds	r3, r7, #2
   182ec:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   182ee:	687b      	ldr	r3, [r7, #4]
   182f0:	0018      	movs	r0, r3
   182f2:	4b09      	ldr	r3, [pc, #36]	; (18318 <prvTraceSetQueueNumberHigh16+0x38>)
   182f4:	4798      	blx	r3
   182f6:	0003      	movs	r3, r0
   182f8:	041b      	lsls	r3, r3, #16
   182fa:	0c1a      	lsrs	r2, r3, #16
   182fc:	1cbb      	adds	r3, r7, #2
   182fe:	881b      	ldrh	r3, [r3, #0]
   18300:	041b      	lsls	r3, r3, #16
   18302:	431a      	orrs	r2, r3
   18304:	687b      	ldr	r3, [r7, #4]
   18306:	0011      	movs	r1, r2
   18308:	0018      	movs	r0, r3
   1830a:	4b04      	ldr	r3, [pc, #16]	; (1831c <prvTraceSetQueueNumberHigh16+0x3c>)
   1830c:	4798      	blx	r3
}
   1830e:	46c0      	nop			; (mov r8, r8)
   18310:	46bd      	mov	sp, r7
   18312:	b002      	add	sp, #8
   18314:	bd80      	pop	{r7, pc}
   18316:	46c0      	nop			; (mov r8, r8)
   18318:	00018161 	.word	0x00018161
   1831c:	0001b939 	.word	0x0001b939

00018320 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   18320:	b580      	push	{r7, lr}
   18322:	b084      	sub	sp, #16
   18324:	af00      	add	r7, sp, #0
   18326:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   18328:	2300      	movs	r3, #0
   1832a:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1832c:	2300      	movs	r3, #0
   1832e:	60bb      	str	r3, [r7, #8]
   18330:	e018      	b.n	18364 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   18332:	4b14      	ldr	r3, [pc, #80]	; (18384 <prvAddTaskToStackMonitor+0x64>)
   18334:	68ba      	ldr	r2, [r7, #8]
   18336:	00d2      	lsls	r2, r2, #3
   18338:	58d3      	ldr	r3, [r2, r3]
   1833a:	2b00      	cmp	r3, #0
   1833c:	d10f      	bne.n	1835e <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   1833e:	4b11      	ldr	r3, [pc, #68]	; (18384 <prvAddTaskToStackMonitor+0x64>)
   18340:	68ba      	ldr	r2, [r7, #8]
   18342:	00d2      	lsls	r2, r2, #3
   18344:	6879      	ldr	r1, [r7, #4]
   18346:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   18348:	4a0e      	ldr	r2, [pc, #56]	; (18384 <prvAddTaskToStackMonitor+0x64>)
   1834a:	68bb      	ldr	r3, [r7, #8]
   1834c:	00db      	lsls	r3, r3, #3
   1834e:	18d3      	adds	r3, r2, r3
   18350:	3304      	adds	r3, #4
   18352:	2201      	movs	r2, #1
   18354:	4252      	negs	r2, r2
   18356:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   18358:	2301      	movs	r3, #1
   1835a:	60fb      	str	r3, [r7, #12]
			break;
   1835c:	e005      	b.n	1836a <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1835e:	68bb      	ldr	r3, [r7, #8]
   18360:	3301      	adds	r3, #1
   18362:	60bb      	str	r3, [r7, #8]
   18364:	68bb      	ldr	r3, [r7, #8]
   18366:	2b09      	cmp	r3, #9
   18368:	dde3      	ble.n	18332 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   1836a:	68fb      	ldr	r3, [r7, #12]
   1836c:	2b00      	cmp	r3, #0
   1836e:	d104      	bne.n	1837a <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   18370:	4b05      	ldr	r3, [pc, #20]	; (18388 <prvAddTaskToStackMonitor+0x68>)
   18372:	681b      	ldr	r3, [r3, #0]
   18374:	1c5a      	adds	r2, r3, #1
   18376:	4b04      	ldr	r3, [pc, #16]	; (18388 <prvAddTaskToStackMonitor+0x68>)
   18378:	601a      	str	r2, [r3, #0]
	}
}
   1837a:	46c0      	nop			; (mov r8, r8)
   1837c:	46bd      	mov	sp, r7
   1837e:	b004      	add	sp, #16
   18380:	bd80      	pop	{r7, pc}
   18382:	46c0      	nop			; (mov r8, r8)
   18384:	20000b60 	.word	0x20000b60
   18388:	20000bb0 	.word	0x20000bb0

0001838c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   1838c:	b590      	push	{r4, r7, lr}
   1838e:	b085      	sub	sp, #20
   18390:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   18392:	2300      	movs	r3, #0
   18394:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   18396:	4b2b      	ldr	r3, [pc, #172]	; (18444 <prvReportStackUsage+0xb8>)
   18398:	681b      	ldr	r3, [r3, #0]
   1839a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   1839c:	4b29      	ldr	r3, [pc, #164]	; (18444 <prvReportStackUsage+0xb8>)
   1839e:	681a      	ldr	r2, [r3, #0]
   183a0:	4b29      	ldr	r3, [pc, #164]	; (18448 <prvReportStackUsage+0xbc>)
   183a2:	00d2      	lsls	r2, r2, #3
   183a4:	58d3      	ldr	r3, [r2, r3]
   183a6:	2b00      	cmp	r3, #0
   183a8:	d035      	beq.n	18416 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   183aa:	4b26      	ldr	r3, [pc, #152]	; (18444 <prvReportStackUsage+0xb8>)
   183ac:	681a      	ldr	r2, [r3, #0]
   183ae:	4b26      	ldr	r3, [pc, #152]	; (18448 <prvReportStackUsage+0xbc>)
   183b0:	00d2      	lsls	r2, r2, #3
   183b2:	58d3      	ldr	r3, [r2, r3]
   183b4:	0018      	movs	r0, r3
   183b6:	4b25      	ldr	r3, [pc, #148]	; (1844c <prvReportStackUsage+0xc0>)
   183b8:	4798      	blx	r3
   183ba:	0003      	movs	r3, r0
   183bc:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   183be:	4b21      	ldr	r3, [pc, #132]	; (18444 <prvReportStackUsage+0xb8>)
   183c0:	681b      	ldr	r3, [r3, #0]
   183c2:	4a21      	ldr	r2, [pc, #132]	; (18448 <prvReportStackUsage+0xbc>)
   183c4:	00db      	lsls	r3, r3, #3
   183c6:	18d3      	adds	r3, r2, r3
   183c8:	3304      	adds	r3, #4
   183ca:	681a      	ldr	r2, [r3, #0]
   183cc:	687b      	ldr	r3, [r7, #4]
   183ce:	429a      	cmp	r2, r3
   183d0:	d907      	bls.n	183e2 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   183d2:	4b1c      	ldr	r3, [pc, #112]	; (18444 <prvReportStackUsage+0xb8>)
   183d4:	681b      	ldr	r3, [r3, #0]
   183d6:	4a1c      	ldr	r2, [pc, #112]	; (18448 <prvReportStackUsage+0xbc>)
   183d8:	00db      	lsls	r3, r3, #3
   183da:	18d3      	adds	r3, r2, r3
   183dc:	3304      	adds	r3, #4
   183de:	687a      	ldr	r2, [r7, #4]
   183e0:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   183e2:	4b18      	ldr	r3, [pc, #96]	; (18444 <prvReportStackUsage+0xb8>)
   183e4:	681a      	ldr	r2, [r3, #0]
   183e6:	4b18      	ldr	r3, [pc, #96]	; (18448 <prvReportStackUsage+0xbc>)
   183e8:	00d2      	lsls	r2, r2, #3
   183ea:	58d3      	ldr	r3, [r2, r3]
   183ec:	0018      	movs	r0, r3
   183ee:	4b18      	ldr	r3, [pc, #96]	; (18450 <prvReportStackUsage+0xc4>)
   183f0:	4798      	blx	r3
   183f2:	0003      	movs	r3, r0
   183f4:	b2db      	uxtb	r3, r3
   183f6:	0019      	movs	r1, r3
   183f8:	4b12      	ldr	r3, [pc, #72]	; (18444 <prvReportStackUsage+0xb8>)
   183fa:	681b      	ldr	r3, [r3, #0]
   183fc:	4a12      	ldr	r2, [pc, #72]	; (18448 <prvReportStackUsage+0xbc>)
   183fe:	00db      	lsls	r3, r3, #3
   18400:	18d3      	adds	r3, r2, r3
   18402:	3304      	adds	r3, #4
   18404:	681b      	ldr	r3, [r3, #0]
   18406:	000a      	movs	r2, r1
   18408:	2103      	movs	r1, #3
   1840a:	20ea      	movs	r0, #234	; 0xea
   1840c:	4c11      	ldr	r4, [pc, #68]	; (18454 <prvReportStackUsage+0xc8>)
   1840e:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   18410:	68fb      	ldr	r3, [r7, #12]
   18412:	3301      	adds	r3, #1
   18414:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   18416:	4b0b      	ldr	r3, [pc, #44]	; (18444 <prvReportStackUsage+0xb8>)
   18418:	681b      	ldr	r3, [r3, #0]
   1841a:	1c5a      	adds	r2, r3, #1
   1841c:	4b0e      	ldr	r3, [pc, #56]	; (18458 <prvReportStackUsage+0xcc>)
   1841e:	210a      	movs	r1, #10
   18420:	0010      	movs	r0, r2
   18422:	4798      	blx	r3
   18424:	000b      	movs	r3, r1
   18426:	001a      	movs	r2, r3
   18428:	4b06      	ldr	r3, [pc, #24]	; (18444 <prvReportStackUsage+0xb8>)
   1842a:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   1842c:	68fb      	ldr	r3, [r7, #12]
   1842e:	2b00      	cmp	r3, #0
   18430:	dc04      	bgt.n	1843c <prvReportStackUsage+0xb0>
   18432:	4b04      	ldr	r3, [pc, #16]	; (18444 <prvReportStackUsage+0xb8>)
   18434:	681a      	ldr	r2, [r3, #0]
   18436:	68bb      	ldr	r3, [r7, #8]
   18438:	429a      	cmp	r2, r3
   1843a:	d1af      	bne.n	1839c <prvReportStackUsage+0x10>
}
   1843c:	46c0      	nop			; (mov r8, r8)
   1843e:	46bd      	mov	sp, r7
   18440:	b005      	add	sp, #20
   18442:	bd90      	pop	{r4, r7, pc}
   18444:	20000bb4 	.word	0x20000bb4
   18448:	20000b60 	.word	0x20000b60
   1844c:	0001ce21 	.word	0x0001ce21
   18450:	000181a1 	.word	0x000181a1
   18454:	00018ce9 	.word	0x00018ce9
   18458:	00032d65 	.word	0x00032d65

0001845c <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   1845c:	b580      	push	{r7, lr}
   1845e:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   18460:	4b02      	ldr	r3, [pc, #8]	; (1846c <prvTraceGetCurrentTaskHandle+0x10>)
   18462:	4798      	blx	r3
   18464:	0003      	movs	r3, r0
}
   18466:	0018      	movs	r0, r3
   18468:	46bd      	mov	sp, r7
   1846a:	bd80      	pop	{r7, pc}
   1846c:	0001cecd 	.word	0x0001cecd

00018470 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   18470:	b590      	push	{r4, r7, lr}
   18472:	b085      	sub	sp, #20
   18474:	af02      	add	r7, sp, #8
   18476:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   18478:	4b14      	ldr	r3, [pc, #80]	; (184cc <vTraceEnable+0x5c>)
   1847a:	4798      	blx	r3

	if (startOption == TRC_START)
   1847c:	687b      	ldr	r3, [r7, #4]
   1847e:	2b01      	cmp	r3, #1
   18480:	d102      	bne.n	18488 <vTraceEnable+0x18>
	{
		vTraceStart();
   18482:	4b13      	ldr	r3, [pc, #76]	; (184d0 <vTraceEnable+0x60>)
   18484:	4798      	blx	r3
   18486:	e00e      	b.n	184a6 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   18488:	687b      	ldr	r3, [r7, #4]
   1848a:	2b02      	cmp	r3, #2
   1848c:	d104      	bne.n	18498 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1848e:	4b11      	ldr	r3, [pc, #68]	; (184d4 <vTraceEnable+0x64>)
   18490:	0018      	movs	r0, r3
   18492:	4b11      	ldr	r3, [pc, #68]	; (184d8 <vTraceEnable+0x68>)
   18494:	4798      	blx	r3
   18496:	e006      	b.n	184a6 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   18498:	687b      	ldr	r3, [r7, #4]
   1849a:	2b00      	cmp	r3, #0
   1849c:	d003      	beq.n	184a6 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1849e:	4b0f      	ldr	r3, [pc, #60]	; (184dc <vTraceEnable+0x6c>)
   184a0:	0018      	movs	r0, r3
   184a2:	4b0d      	ldr	r3, [pc, #52]	; (184d8 <vTraceEnable+0x68>)
   184a4:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   184a6:	4b0e      	ldr	r3, [pc, #56]	; (184e0 <vTraceEnable+0x70>)
   184a8:	681b      	ldr	r3, [r3, #0]
   184aa:	2b00      	cmp	r3, #0
   184ac:	d10a      	bne.n	184c4 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   184ae:	2396      	movs	r3, #150	; 0x96
   184b0:	005a      	lsls	r2, r3, #1
   184b2:	490c      	ldr	r1, [pc, #48]	; (184e4 <vTraceEnable+0x74>)
   184b4:	480c      	ldr	r0, [pc, #48]	; (184e8 <vTraceEnable+0x78>)
   184b6:	4b0a      	ldr	r3, [pc, #40]	; (184e0 <vTraceEnable+0x70>)
   184b8:	9301      	str	r3, [sp, #4]
   184ba:	2304      	movs	r3, #4
   184bc:	9300      	str	r3, [sp, #0]
   184be:	2300      	movs	r3, #0
   184c0:	4c0a      	ldr	r4, [pc, #40]	; (184ec <vTraceEnable+0x7c>)
   184c2:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   184c4:	46c0      	nop			; (mov r8, r8)
   184c6:	46bd      	mov	sp, r7
   184c8:	b003      	add	sp, #12
   184ca:	bd90      	pop	{r4, r7, pc}
   184cc:	000193b5 	.word	0x000193b5
   184d0:	0001890d 	.word	0x0001890d
   184d4:	00036f68 	.word	0x00036f68
   184d8:	00019a5d 	.word	0x00019a5d
   184dc:	00036fa8 	.word	0x00036fa8
   184e0:	20000b5c 	.word	0x20000b5c
   184e4:	00036fdc 	.word	0x00036fdc
   184e8:	000184f1 	.word	0x000184f1
   184ec:	0001be25 	.word	0x0001be25

000184f0 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   184f0:	b580      	push	{r7, lr}
   184f2:	b082      	sub	sp, #8
   184f4:	af00      	add	r7, sp, #0
   184f6:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   184f8:	4b04      	ldr	r3, [pc, #16]	; (1850c <TzCtrl+0x1c>)
   184fa:	4798      	blx	r3
   184fc:	1e03      	subs	r3, r0, #0
   184fe:	d001      	beq.n	18504 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   18500:	4b03      	ldr	r3, [pc, #12]	; (18510 <TzCtrl+0x20>)
   18502:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   18504:	2004      	movs	r0, #4
   18506:	4b03      	ldr	r3, [pc, #12]	; (18514 <TzCtrl+0x24>)
   18508:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   1850a:	e7f5      	b.n	184f8 <TzCtrl+0x8>
   1850c:	00018951 	.word	0x00018951
   18510:	0001838d 	.word	0x0001838d
   18514:	0001c1c1 	.word	0x0001c1c1

00018518 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   18518:	b580      	push	{r7, lr}
   1851a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1851c:	4b60      	ldr	r3, [pc, #384]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   1851e:	681b      	ldr	r3, [r3, #0]
   18520:	2209      	movs	r2, #9
   18522:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   18524:	4b5e      	ldr	r3, [pc, #376]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18526:	681b      	ldr	r3, [r3, #0]
   18528:	2264      	movs	r2, #100	; 0x64
   1852a:	210a      	movs	r1, #10
   1852c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   1852e:	4b5c      	ldr	r3, [pc, #368]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18530:	681b      	ldr	r3, [r3, #0]
   18532:	2265      	movs	r2, #101	; 0x65
   18534:	210a      	movs	r1, #10
   18536:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   18538:	4b59      	ldr	r3, [pc, #356]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   1853a:	681b      	ldr	r3, [r3, #0]
   1853c:	2266      	movs	r2, #102	; 0x66
   1853e:	210a      	movs	r1, #10
   18540:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   18542:	4b57      	ldr	r3, [pc, #348]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18544:	681b      	ldr	r3, [r3, #0]
   18546:	2267      	movs	r2, #103	; 0x67
   18548:	210f      	movs	r1, #15
   1854a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   1854c:	4b54      	ldr	r3, [pc, #336]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   1854e:	681b      	ldr	r3, [r3, #0]
   18550:	2268      	movs	r2, #104	; 0x68
   18552:	2105      	movs	r1, #5
   18554:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   18556:	4b52      	ldr	r3, [pc, #328]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18558:	681b      	ldr	r3, [r3, #0]
   1855a:	2269      	movs	r2, #105	; 0x69
   1855c:	2105      	movs	r1, #5
   1855e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   18560:	4b4f      	ldr	r3, [pc, #316]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18562:	681b      	ldr	r3, [r3, #0]
   18564:	226a      	movs	r2, #106	; 0x6a
   18566:	2105      	movs	r1, #5
   18568:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   1856a:	4b4d      	ldr	r3, [pc, #308]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   1856c:	681b      	ldr	r3, [r3, #0]
   1856e:	226b      	movs	r2, #107	; 0x6b
   18570:	2105      	movs	r1, #5
   18572:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   18574:	4b4a      	ldr	r3, [pc, #296]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18576:	681b      	ldr	r3, [r3, #0]
   18578:	226c      	movs	r2, #108	; 0x6c
   1857a:	2105      	movs	r1, #5
   1857c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1857e:	4b48      	ldr	r3, [pc, #288]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18580:	681b      	ldr	r3, [r3, #0]
   18582:	2270      	movs	r2, #112	; 0x70
   18584:	210f      	movs	r1, #15
   18586:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   18588:	4b45      	ldr	r3, [pc, #276]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   1858a:	681b      	ldr	r3, [r3, #0]
   1858c:	2271      	movs	r2, #113	; 0x71
   1858e:	210f      	movs	r1, #15
   18590:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   18592:	4b43      	ldr	r3, [pc, #268]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18594:	681b      	ldr	r3, [r3, #0]
   18596:	2272      	movs	r2, #114	; 0x72
   18598:	210f      	movs	r1, #15
   1859a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   1859c:	4b40      	ldr	r3, [pc, #256]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   1859e:	681b      	ldr	r3, [r3, #0]
   185a0:	2273      	movs	r2, #115	; 0x73
   185a2:	210f      	movs	r1, #15
   185a4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   185a6:	4b3e      	ldr	r3, [pc, #248]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   185a8:	681b      	ldr	r3, [r3, #0]
   185aa:	2274      	movs	r2, #116	; 0x74
   185ac:	210f      	movs	r1, #15
   185ae:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   185b0:	4b3b      	ldr	r3, [pc, #236]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   185b2:	681b      	ldr	r3, [r3, #0]
   185b4:	2275      	movs	r2, #117	; 0x75
   185b6:	210f      	movs	r1, #15
   185b8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   185ba:	4b39      	ldr	r3, [pc, #228]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   185bc:	681b      	ldr	r3, [r3, #0]
   185be:	2276      	movs	r2, #118	; 0x76
   185c0:	210f      	movs	r1, #15
   185c2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   185c4:	4b36      	ldr	r3, [pc, #216]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   185c6:	681b      	ldr	r3, [r3, #0]
   185c8:	2277      	movs	r2, #119	; 0x77
   185ca:	210f      	movs	r1, #15
   185cc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   185ce:	4b34      	ldr	r3, [pc, #208]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   185d0:	681b      	ldr	r3, [r3, #0]
   185d2:	2278      	movs	r2, #120	; 0x78
   185d4:	210f      	movs	r1, #15
   185d6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   185d8:	4b31      	ldr	r3, [pc, #196]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   185da:	681b      	ldr	r3, [r3, #0]
   185dc:	227c      	movs	r2, #124	; 0x7c
   185de:	2110      	movs	r1, #16
   185e0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   185e2:	4b2f      	ldr	r3, [pc, #188]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   185e4:	681b      	ldr	r3, [r3, #0]
   185e6:	227d      	movs	r2, #125	; 0x7d
   185e8:	2110      	movs	r1, #16
   185ea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   185ec:	4b2c      	ldr	r3, [pc, #176]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   185ee:	681b      	ldr	r3, [r3, #0]
   185f0:	227e      	movs	r2, #126	; 0x7e
   185f2:	2110      	movs	r1, #16
   185f4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   185f6:	4b2a      	ldr	r3, [pc, #168]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   185f8:	681b      	ldr	r3, [r3, #0]
   185fa:	227f      	movs	r2, #127	; 0x7f
   185fc:	2113      	movs	r1, #19
   185fe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   18600:	4b27      	ldr	r3, [pc, #156]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18602:	681b      	ldr	r3, [r3, #0]
   18604:	2280      	movs	r2, #128	; 0x80
   18606:	2111      	movs	r1, #17
   18608:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1860a:	4b25      	ldr	r3, [pc, #148]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   1860c:	681b      	ldr	r3, [r3, #0]
   1860e:	2281      	movs	r2, #129	; 0x81
   18610:	2110      	movs	r1, #16
   18612:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   18614:	4b22      	ldr	r3, [pc, #136]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18616:	681b      	ldr	r3, [r3, #0]
   18618:	2282      	movs	r2, #130	; 0x82
   1861a:	2113      	movs	r1, #19
   1861c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1861e:	4b20      	ldr	r3, [pc, #128]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18620:	681b      	ldr	r3, [r3, #0]
   18622:	2283      	movs	r2, #131	; 0x83
   18624:	2113      	movs	r1, #19
   18626:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   18628:	4b1d      	ldr	r3, [pc, #116]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   1862a:	681b      	ldr	r3, [r3, #0]
   1862c:	2284      	movs	r2, #132	; 0x84
   1862e:	2113      	movs	r1, #19
   18630:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   18632:	4b1b      	ldr	r3, [pc, #108]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18634:	681b      	ldr	r3, [r3, #0]
   18636:	2288      	movs	r2, #136	; 0x88
   18638:	2100      	movs	r1, #0
   1863a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   1863c:	4b18      	ldr	r3, [pc, #96]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   1863e:	681b      	ldr	r3, [r3, #0]
   18640:	228a      	movs	r2, #138	; 0x8a
   18642:	21a0      	movs	r1, #160	; 0xa0
   18644:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   18646:	4b16      	ldr	r3, [pc, #88]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18648:	681b      	ldr	r3, [r3, #0]
   1864a:	228c      	movs	r2, #140	; 0x8c
   1864c:	21a0      	movs	r1, #160	; 0xa0
   1864e:	0049      	lsls	r1, r1, #1
   18650:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   18652:	4b13      	ldr	r3, [pc, #76]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18654:	681b      	ldr	r3, [r3, #0]
   18656:	228e      	movs	r2, #142	; 0x8e
   18658:	21f0      	movs	r1, #240	; 0xf0
   1865a:	0049      	lsls	r1, r1, #1
   1865c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1865e:	4b10      	ldr	r3, [pc, #64]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18660:	681b      	ldr	r3, [r3, #0]
   18662:	2290      	movs	r2, #144	; 0x90
   18664:	490f      	ldr	r1, [pc, #60]	; (186a4 <vTraceInitObjectPropertyTable+0x18c>)
   18666:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   18668:	4b0d      	ldr	r3, [pc, #52]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   1866a:	681b      	ldr	r3, [r3, #0]
   1866c:	2292      	movs	r2, #146	; 0x92
   1866e:	490e      	ldr	r1, [pc, #56]	; (186a8 <vTraceInitObjectPropertyTable+0x190>)
   18670:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   18672:	4b0b      	ldr	r3, [pc, #44]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18674:	681b      	ldr	r3, [r3, #0]
   18676:	2294      	movs	r2, #148	; 0x94
   18678:	490c      	ldr	r1, [pc, #48]	; (186ac <vTraceInitObjectPropertyTable+0x194>)
   1867a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   1867c:	4b08      	ldr	r3, [pc, #32]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   1867e:	681b      	ldr	r3, [r3, #0]
   18680:	2296      	movs	r2, #150	; 0x96
   18682:	490b      	ldr	r1, [pc, #44]	; (186b0 <vTraceInitObjectPropertyTable+0x198>)
   18684:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   18686:	4b06      	ldr	r3, [pc, #24]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18688:	681b      	ldr	r3, [r3, #0]
   1868a:	2298      	movs	r2, #152	; 0x98
   1868c:	218c      	movs	r1, #140	; 0x8c
   1868e:	00c9      	lsls	r1, r1, #3
   18690:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   18692:	4b03      	ldr	r3, [pc, #12]	; (186a0 <vTraceInitObjectPropertyTable+0x188>)
   18694:	681b      	ldr	r3, [r3, #0]
   18696:	4a07      	ldr	r2, [pc, #28]	; (186b4 <vTraceInitObjectPropertyTable+0x19c>)
   18698:	661a      	str	r2, [r3, #96]	; 0x60
}
   1869a:	46c0      	nop			; (mov r8, r8)
   1869c:	46bd      	mov	sp, r7
   1869e:	bd80      	pop	{r7, pc}
   186a0:	20000c74 	.word	0x20000c74
   186a4:	000002fd 	.word	0x000002fd
   186a8:	00000352 	.word	0x00000352
   186ac:	000003a2 	.word	0x000003a2
   186b0:	00000401 	.word	0x00000401
   186b4:	000004bf 	.word	0x000004bf

000186b8 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   186b8:	b580      	push	{r7, lr}
   186ba:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   186bc:	4b2e      	ldr	r3, [pc, #184]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   186be:	2200      	movs	r2, #0
   186c0:	825a      	strh	r2, [r3, #18]
   186c2:	4b2d      	ldr	r3, [pc, #180]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   186c4:	8a5a      	ldrh	r2, [r3, #18]
   186c6:	4b2c      	ldr	r3, [pc, #176]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   186c8:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   186ca:	4b2b      	ldr	r3, [pc, #172]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   186cc:	220a      	movs	r2, #10
   186ce:	829a      	strh	r2, [r3, #20]
   186d0:	4b29      	ldr	r3, [pc, #164]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   186d2:	8a9a      	ldrh	r2, [r3, #20]
   186d4:	4b28      	ldr	r3, [pc, #160]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   186d6:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   186d8:	4b27      	ldr	r3, [pc, #156]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   186da:	2214      	movs	r2, #20
   186dc:	82da      	strh	r2, [r3, #22]
   186de:	4b26      	ldr	r3, [pc, #152]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   186e0:	8ada      	ldrh	r2, [r3, #22]
   186e2:	4b25      	ldr	r3, [pc, #148]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   186e4:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   186e6:	4b24      	ldr	r3, [pc, #144]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   186e8:	221e      	movs	r2, #30
   186ea:	831a      	strh	r2, [r3, #24]
   186ec:	4b22      	ldr	r3, [pc, #136]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   186ee:	8b1a      	ldrh	r2, [r3, #24]
   186f0:	4b21      	ldr	r3, [pc, #132]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   186f2:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   186f4:	4b20      	ldr	r3, [pc, #128]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   186f6:	222d      	movs	r2, #45	; 0x2d
   186f8:	835a      	strh	r2, [r3, #26]
   186fa:	4b1f      	ldr	r3, [pc, #124]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   186fc:	8b5a      	ldrh	r2, [r3, #26]
   186fe:	4b1e      	ldr	r3, [pc, #120]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   18700:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   18702:	4b1d      	ldr	r3, [pc, #116]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   18704:	2232      	movs	r2, #50	; 0x32
   18706:	839a      	strh	r2, [r3, #28]
   18708:	4b1b      	ldr	r3, [pc, #108]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   1870a:	8b9a      	ldrh	r2, [r3, #28]
   1870c:	4b1a      	ldr	r3, [pc, #104]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   1870e:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   18710:	4b19      	ldr	r3, [pc, #100]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   18712:	2237      	movs	r2, #55	; 0x37
   18714:	83da      	strh	r2, [r3, #30]
   18716:	4b18      	ldr	r3, [pc, #96]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   18718:	8bda      	ldrh	r2, [r3, #30]
   1871a:	4b17      	ldr	r3, [pc, #92]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   1871c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1871e:	4b16      	ldr	r3, [pc, #88]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   18720:	223c      	movs	r2, #60	; 0x3c
   18722:	841a      	strh	r2, [r3, #32]
   18724:	4b14      	ldr	r3, [pc, #80]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   18726:	8c1a      	ldrh	r2, [r3, #32]
   18728:	4b13      	ldr	r3, [pc, #76]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   1872a:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   1872c:	4b12      	ldr	r3, [pc, #72]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   1872e:	2241      	movs	r2, #65	; 0x41
   18730:	845a      	strh	r2, [r3, #34]	; 0x22
   18732:	4b11      	ldr	r3, [pc, #68]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   18734:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   18736:	4b10      	ldr	r3, [pc, #64]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   18738:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   1873a:	4b0f      	ldr	r3, [pc, #60]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   1873c:	2209      	movs	r2, #9
   1873e:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   18740:	4b0d      	ldr	r3, [pc, #52]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   18742:	2213      	movs	r2, #19
   18744:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   18746:	4b0c      	ldr	r3, [pc, #48]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   18748:	221d      	movs	r2, #29
   1874a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   1874c:	4b0a      	ldr	r3, [pc, #40]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   1874e:	222c      	movs	r2, #44	; 0x2c
   18750:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   18752:	4b09      	ldr	r3, [pc, #36]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   18754:	2231      	movs	r2, #49	; 0x31
   18756:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   18758:	4b07      	ldr	r3, [pc, #28]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   1875a:	2236      	movs	r2, #54	; 0x36
   1875c:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1875e:	4b06      	ldr	r3, [pc, #24]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   18760:	223b      	movs	r2, #59	; 0x3b
   18762:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   18764:	4b04      	ldr	r3, [pc, #16]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   18766:	2240      	movs	r2, #64	; 0x40
   18768:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   1876a:	4b03      	ldr	r3, [pc, #12]	; (18778 <vTraceInitObjectHandleStack+0xc0>)
   1876c:	2245      	movs	r2, #69	; 0x45
   1876e:	869a      	strh	r2, [r3, #52]	; 0x34
}
   18770:	46c0      	nop			; (mov r8, r8)
   18772:	46bd      	mov	sp, r7
   18774:	bd80      	pop	{r7, pc}
   18776:	46c0      	nop			; (mov r8, r8)
   18778:	20000be4 	.word	0x20000be4

0001877c <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   1877c:	b580      	push	{r7, lr}
   1877e:	b082      	sub	sp, #8
   18780:	af00      	add	r7, sp, #0
   18782:	0002      	movs	r2, r0
   18784:	1dfb      	adds	r3, r7, #7
   18786:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   18788:	1dfb      	adds	r3, r7, #7
   1878a:	781b      	ldrb	r3, [r3, #0]
   1878c:	2b08      	cmp	r3, #8
   1878e:	d816      	bhi.n	187be <pszTraceGetErrorNotEnoughHandles+0x42>
   18790:	009a      	lsls	r2, r3, #2
   18792:	4b0d      	ldr	r3, [pc, #52]	; (187c8 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   18794:	18d3      	adds	r3, r2, r3
   18796:	681b      	ldr	r3, [r3, #0]
   18798:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1879a:	4b0c      	ldr	r3, [pc, #48]	; (187cc <pszTraceGetErrorNotEnoughHandles+0x50>)
   1879c:	e010      	b.n	187c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1879e:	4b0c      	ldr	r3, [pc, #48]	; (187d0 <pszTraceGetErrorNotEnoughHandles+0x54>)
   187a0:	e00e      	b.n	187c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   187a2:	4b0c      	ldr	r3, [pc, #48]	; (187d4 <pszTraceGetErrorNotEnoughHandles+0x58>)
   187a4:	e00c      	b.n	187c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   187a6:	4b0c      	ldr	r3, [pc, #48]	; (187d8 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   187a8:	e00a      	b.n	187c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   187aa:	4b0c      	ldr	r3, [pc, #48]	; (187dc <pszTraceGetErrorNotEnoughHandles+0x60>)
   187ac:	e008      	b.n	187c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   187ae:	4b0c      	ldr	r3, [pc, #48]	; (187e0 <pszTraceGetErrorNotEnoughHandles+0x64>)
   187b0:	e006      	b.n	187c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   187b2:	4b0c      	ldr	r3, [pc, #48]	; (187e4 <pszTraceGetErrorNotEnoughHandles+0x68>)
   187b4:	e004      	b.n	187c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   187b6:	4b0c      	ldr	r3, [pc, #48]	; (187e8 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   187b8:	e002      	b.n	187c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   187ba:	4b0c      	ldr	r3, [pc, #48]	; (187ec <pszTraceGetErrorNotEnoughHandles+0x70>)
   187bc:	e000      	b.n	187c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   187be:	4b0c      	ldr	r3, [pc, #48]	; (187f0 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   187c0:	0018      	movs	r0, r3
   187c2:	46bd      	mov	sp, r7
   187c4:	b002      	add	sp, #8
   187c6:	bd80      	pop	{r7, pc}
   187c8:	000372e4 	.word	0x000372e4
   187cc:	00036fe4 	.word	0x00036fe4
   187d0:	0003702c 	.word	0x0003702c
   187d4:	00037074 	.word	0x00037074
   187d8:	000370c8 	.word	0x000370c8
   187dc:	00037114 	.word	0x00037114
   187e0:	00037160 	.word	0x00037160
   187e4:	000371ac 	.word	0x000371ac
   187e8:	00037200 	.word	0x00037200
   187ec:	00037258 	.word	0x00037258
   187f0:	000372b4 	.word	0x000372b4

000187f4 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   187f4:	b590      	push	{r4, r7, lr}
   187f6:	b087      	sub	sp, #28
   187f8:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   187fa:	2317      	movs	r3, #23
   187fc:	18fb      	adds	r3, r7, r3
   187fe:	2200      	movs	r2, #0
   18800:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   18802:	4b36      	ldr	r3, [pc, #216]	; (188dc <uiTraceStart+0xe8>)
   18804:	681b      	ldr	r3, [r3, #0]
   18806:	2b00      	cmp	r3, #0
   18808:	d10b      	bne.n	18822 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1880a:	4b34      	ldr	r3, [pc, #208]	; (188dc <uiTraceStart+0xe8>)
   1880c:	681b      	ldr	r3, [r3, #0]
   1880e:	2b00      	cmp	r3, #0
   18810:	d105      	bne.n	1881e <uiTraceStart+0x2a>
   18812:	4b33      	ldr	r3, [pc, #204]	; (188e0 <uiTraceStart+0xec>)
   18814:	0018      	movs	r0, r3
   18816:	4b33      	ldr	r3, [pc, #204]	; (188e4 <uiTraceStart+0xf0>)
   18818:	4798      	blx	r3
   1881a:	2300      	movs	r3, #0
   1881c:	e059      	b.n	188d2 <uiTraceStart+0xde>
		return 0;
   1881e:	2300      	movs	r3, #0
   18820:	e057      	b.n	188d2 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   18822:	4b2e      	ldr	r3, [pc, #184]	; (188dc <uiTraceStart+0xe8>)
   18824:	681b      	ldr	r3, [r3, #0]
   18826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18828:	2b01      	cmp	r3, #1
   1882a:	d101      	bne.n	18830 <uiTraceStart+0x3c>
		return 1; /* Already running */
   1882c:	2301      	movs	r3, #1
   1882e:	e050      	b.n	188d2 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   18830:	4b2d      	ldr	r3, [pc, #180]	; (188e8 <uiTraceStart+0xf4>)
   18832:	681b      	ldr	r3, [r3, #0]
   18834:	2b00      	cmp	r3, #0
   18836:	d149      	bne.n	188cc <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18838:	f3ef 8310 	mrs	r3, PRIMASK
   1883c:	60bb      	str	r3, [r7, #8]
  return(result);
   1883e:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   18840:	613b      	str	r3, [r7, #16]
   18842:	2301      	movs	r3, #1
   18844:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18846:	68fb      	ldr	r3, [r7, #12]
   18848:	f383 8810 	msr	PRIMASK, r3
   1884c:	4b27      	ldr	r3, [pc, #156]	; (188ec <uiTraceStart+0xf8>)
   1884e:	681b      	ldr	r3, [r3, #0]
   18850:	1c5a      	adds	r2, r3, #1
   18852:	4b26      	ldr	r3, [pc, #152]	; (188ec <uiTraceStart+0xf8>)
   18854:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   18856:	4b21      	ldr	r3, [pc, #132]	; (188dc <uiTraceStart+0xe8>)
   18858:	681b      	ldr	r3, [r3, #0]
   1885a:	2201      	movs	r2, #1
   1885c:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1885e:	4b24      	ldr	r3, [pc, #144]	; (188f0 <uiTraceStart+0xfc>)
   18860:	4798      	blx	r3
   18862:	0003      	movs	r3, r0
   18864:	0018      	movs	r0, r3
   18866:	4b23      	ldr	r3, [pc, #140]	; (188f4 <uiTraceStart+0x100>)
   18868:	4798      	blx	r3
   1886a:	0003      	movs	r3, r0
   1886c:	001a      	movs	r2, r3
   1886e:	2317      	movs	r3, #23
   18870:	18fb      	adds	r3, r7, r3
   18872:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   18874:	2317      	movs	r3, #23
   18876:	18fb      	adds	r3, r7, r3
   18878:	781b      	ldrb	r3, [r3, #0]
   1887a:	2b00      	cmp	r3, #0
   1887c:	d116      	bne.n	188ac <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1887e:	2317      	movs	r3, #23
   18880:	18fc      	adds	r4, r7, r3
   18882:	2003      	movs	r0, #3
   18884:	4b1c      	ldr	r3, [pc, #112]	; (188f8 <uiTraceStart+0x104>)
   18886:	4798      	blx	r3
   18888:	0003      	movs	r3, r0
   1888a:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1888c:	4a1b      	ldr	r2, [pc, #108]	; (188fc <uiTraceStart+0x108>)
   1888e:	2317      	movs	r3, #23
   18890:	18fb      	adds	r3, r7, r3
   18892:	781b      	ldrb	r3, [r3, #0]
   18894:	0019      	movs	r1, r3
   18896:	2003      	movs	r0, #3
   18898:	4b19      	ldr	r3, [pc, #100]	; (18900 <uiTraceStart+0x10c>)
   1889a:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   1889c:	2317      	movs	r3, #23
   1889e:	18fb      	adds	r3, r7, r3
   188a0:	781b      	ldrb	r3, [r3, #0]
   188a2:	2200      	movs	r2, #0
   188a4:	0019      	movs	r1, r3
   188a6:	2003      	movs	r0, #3
   188a8:	4b16      	ldr	r3, [pc, #88]	; (18904 <uiTraceStart+0x110>)
   188aa:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   188ac:	2317      	movs	r3, #23
   188ae:	18fb      	adds	r3, r7, r3
   188b0:	781b      	ldrb	r3, [r3, #0]
   188b2:	0018      	movs	r0, r3
   188b4:	4b14      	ldr	r3, [pc, #80]	; (18908 <uiTraceStart+0x114>)
   188b6:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   188b8:	4b0c      	ldr	r3, [pc, #48]	; (188ec <uiTraceStart+0xf8>)
   188ba:	681b      	ldr	r3, [r3, #0]
   188bc:	1e5a      	subs	r2, r3, #1
   188be:	4b0b      	ldr	r3, [pc, #44]	; (188ec <uiTraceStart+0xf8>)
   188c0:	601a      	str	r2, [r3, #0]
   188c2:	693b      	ldr	r3, [r7, #16]
   188c4:	607b      	str	r3, [r7, #4]
   188c6:	687b      	ldr	r3, [r7, #4]
   188c8:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   188cc:	4b03      	ldr	r3, [pc, #12]	; (188dc <uiTraceStart+0xe8>)
   188ce:	681b      	ldr	r3, [r3, #0]
   188d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   188d2:	0018      	movs	r0, r3
   188d4:	46bd      	mov	sp, r7
   188d6:	b007      	add	sp, #28
   188d8:	bd90      	pop	{r4, r7, pc}
   188da:	46c0      	nop			; (mov r8, r8)
   188dc:	20000c74 	.word	0x20000c74
   188e0:	00037308 	.word	0x00037308
   188e4:	00019a5d 	.word	0x00019a5d
   188e8:	20000bd4 	.word	0x20000bd4
   188ec:	20000bcc 	.word	0x20000bcc
   188f0:	0001845d 	.word	0x0001845d
   188f4:	000181a1 	.word	0x000181a1
   188f8:	00019741 	.word	0x00019741
   188fc:	0003734c 	.word	0x0003734c
   18900:	00019971 	.word	0x00019971
   18904:	000190d5 	.word	0x000190d5
   18908:	00018fbd 	.word	0x00018fbd

0001890c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1890c:	b580      	push	{r7, lr}
   1890e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   18910:	4b02      	ldr	r3, [pc, #8]	; (1891c <vTraceStart+0x10>)
   18912:	4798      	blx	r3
}
   18914:	46c0      	nop			; (mov r8, r8)
   18916:	46bd      	mov	sp, r7
   18918:	bd80      	pop	{r7, pc}
   1891a:	46c0      	nop			; (mov r8, r8)
   1891c:	000187f5 	.word	0x000187f5

00018920 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   18920:	b580      	push	{r7, lr}
   18922:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18924:	4b08      	ldr	r3, [pc, #32]	; (18948 <vTraceStop+0x28>)
   18926:	681b      	ldr	r3, [r3, #0]
   18928:	2b00      	cmp	r3, #0
   1892a:	d003      	beq.n	18934 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   1892c:	4b06      	ldr	r3, [pc, #24]	; (18948 <vTraceStop+0x28>)
   1892e:	681b      	ldr	r3, [r3, #0]
   18930:	2200      	movs	r2, #0
   18932:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   18934:	4b05      	ldr	r3, [pc, #20]	; (1894c <vTraceStop+0x2c>)
   18936:	681b      	ldr	r3, [r3, #0]
   18938:	2b00      	cmp	r3, #0
   1893a:	d002      	beq.n	18942 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   1893c:	4b03      	ldr	r3, [pc, #12]	; (1894c <vTraceStop+0x2c>)
   1893e:	681b      	ldr	r3, [r3, #0]
   18940:	4798      	blx	r3
	}
}
   18942:	46c0      	nop			; (mov r8, r8)
   18944:	46bd      	mov	sp, r7
   18946:	bd80      	pop	{r7, pc}
   18948:	20000c74 	.word	0x20000c74
   1894c:	20000bdc 	.word	0x20000bdc

00018950 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   18950:	b580      	push	{r7, lr}
   18952:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18954:	4b05      	ldr	r3, [pc, #20]	; (1896c <xTraceIsRecordingEnabled+0x1c>)
   18956:	681b      	ldr	r3, [r3, #0]
   18958:	2b00      	cmp	r3, #0
   1895a:	d003      	beq.n	18964 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   1895c:	4b03      	ldr	r3, [pc, #12]	; (1896c <xTraceIsRecordingEnabled+0x1c>)
   1895e:	681b      	ldr	r3, [r3, #0]
   18960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18962:	e000      	b.n	18966 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   18964:	2300      	movs	r3, #0
	}
}
   18966:	0018      	movs	r0, r3
   18968:	46bd      	mov	sp, r7
   1896a:	bd80      	pop	{r7, pc}
   1896c:	20000c74 	.word	0x20000c74

00018970 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   18970:	b590      	push	{r4, r7, lr}
   18972:	b089      	sub	sp, #36	; 0x24
   18974:	af00      	add	r7, sp, #0
   18976:	0002      	movs	r2, r0
   18978:	1dfb      	adds	r3, r7, #7
   1897a:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   1897c:	1dfb      	adds	r3, r7, #7
   1897e:	781b      	ldrb	r3, [r3, #0]
   18980:	2b00      	cmp	r3, #0
   18982:	d057      	beq.n	18a34 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   18984:	4b2e      	ldr	r3, [pc, #184]	; (18a40 <prvTraceStoreTaskReady+0xd0>)
   18986:	681b      	ldr	r3, [r3, #0]
   18988:	2b00      	cmp	r3, #0
   1898a:	d055      	beq.n	18a38 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1898c:	1dfb      	adds	r3, r7, #7
   1898e:	781b      	ldrb	r3, [r3, #0]
   18990:	2b0f      	cmp	r3, #15
   18992:	d904      	bls.n	1899e <prvTraceStoreTaskReady+0x2e>
   18994:	4b2b      	ldr	r3, [pc, #172]	; (18a44 <prvTraceStoreTaskReady+0xd4>)
   18996:	0018      	movs	r0, r3
   18998:	4b2b      	ldr	r3, [pc, #172]	; (18a48 <prvTraceStoreTaskReady+0xd8>)
   1899a:	4798      	blx	r3
   1899c:	e04d      	b.n	18a3a <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1899e:	4b2b      	ldr	r3, [pc, #172]	; (18a4c <prvTraceStoreTaskReady+0xdc>)
   189a0:	681b      	ldr	r3, [r3, #0]
   189a2:	2b00      	cmp	r3, #0
   189a4:	d004      	beq.n	189b0 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   189a6:	4b2a      	ldr	r3, [pc, #168]	; (18a50 <prvTraceStoreTaskReady+0xe0>)
   189a8:	0018      	movs	r0, r3
   189aa:	4b27      	ldr	r3, [pc, #156]	; (18a48 <prvTraceStoreTaskReady+0xd8>)
   189ac:	4798      	blx	r3
		return;
   189ae:	e044      	b.n	18a3a <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   189b0:	f3ef 8310 	mrs	r3, PRIMASK
   189b4:	60fb      	str	r3, [r7, #12]
  return(result);
   189b6:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   189b8:	61fb      	str	r3, [r7, #28]
   189ba:	2301      	movs	r3, #1
   189bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   189be:	693b      	ldr	r3, [r7, #16]
   189c0:	f383 8810 	msr	PRIMASK, r3
   189c4:	4b21      	ldr	r3, [pc, #132]	; (18a4c <prvTraceStoreTaskReady+0xdc>)
   189c6:	681b      	ldr	r3, [r3, #0]
   189c8:	1c5a      	adds	r2, r3, #1
   189ca:	4b20      	ldr	r3, [pc, #128]	; (18a4c <prvTraceStoreTaskReady+0xdc>)
   189cc:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   189ce:	4b21      	ldr	r3, [pc, #132]	; (18a54 <prvTraceStoreTaskReady+0xe4>)
   189d0:	681b      	ldr	r3, [r3, #0]
   189d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   189d4:	2b00      	cmp	r3, #0
   189d6:	d022      	beq.n	18a1e <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   189d8:	231a      	movs	r3, #26
   189da:	18fc      	adds	r4, r7, r3
   189dc:	4b1e      	ldr	r3, [pc, #120]	; (18a58 <prvTraceStoreTaskReady+0xe8>)
   189de:	0018      	movs	r0, r3
   189e0:	4b1e      	ldr	r3, [pc, #120]	; (18a5c <prvTraceStoreTaskReady+0xec>)
   189e2:	4798      	blx	r3
   189e4:	0003      	movs	r3, r0
   189e6:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   189e8:	2319      	movs	r3, #25
   189ea:	18fb      	adds	r3, r7, r3
   189ec:	1dfa      	adds	r2, r7, #7
   189ee:	7812      	ldrb	r2, [r2, #0]
   189f0:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   189f2:	4b1b      	ldr	r3, [pc, #108]	; (18a60 <prvTraceStoreTaskReady+0xf0>)
   189f4:	4798      	blx	r3
   189f6:	0003      	movs	r3, r0
   189f8:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   189fa:	697b      	ldr	r3, [r7, #20]
   189fc:	2b00      	cmp	r3, #0
   189fe:	d00e      	beq.n	18a1e <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   18a00:	697b      	ldr	r3, [r7, #20]
   18a02:	2202      	movs	r2, #2
   18a04:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   18a06:	697b      	ldr	r3, [r7, #20]
   18a08:	221a      	movs	r2, #26
   18a0a:	18ba      	adds	r2, r7, r2
   18a0c:	8812      	ldrh	r2, [r2, #0]
   18a0e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   18a10:	697b      	ldr	r3, [r7, #20]
   18a12:	2219      	movs	r2, #25
   18a14:	18ba      	adds	r2, r7, r2
   18a16:	7812      	ldrb	r2, [r2, #0]
   18a18:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   18a1a:	4b12      	ldr	r3, [pc, #72]	; (18a64 <prvTraceStoreTaskReady+0xf4>)
   18a1c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18a1e:	4b0b      	ldr	r3, [pc, #44]	; (18a4c <prvTraceStoreTaskReady+0xdc>)
   18a20:	681b      	ldr	r3, [r3, #0]
   18a22:	1e5a      	subs	r2, r3, #1
   18a24:	4b09      	ldr	r3, [pc, #36]	; (18a4c <prvTraceStoreTaskReady+0xdc>)
   18a26:	601a      	str	r2, [r3, #0]
   18a28:	69fb      	ldr	r3, [r7, #28]
   18a2a:	60bb      	str	r3, [r7, #8]
   18a2c:	68bb      	ldr	r3, [r7, #8]
   18a2e:	f383 8810 	msr	PRIMASK, r3
   18a32:	e002      	b.n	18a3a <prvTraceStoreTaskReady+0xca>
		return;
   18a34:	46c0      	nop			; (mov r8, r8)
   18a36:	e000      	b.n	18a3a <prvTraceStoreTaskReady+0xca>
		return;
   18a38:	46c0      	nop			; (mov r8, r8)
}
   18a3a:	46bd      	mov	sp, r7
   18a3c:	b009      	add	sp, #36	; 0x24
   18a3e:	bd90      	pop	{r4, r7, pc}
   18a40:	20000100 	.word	0x20000100
   18a44:	000376b4 	.word	0x000376b4
   18a48:	00019a5d 	.word	0x00019a5d
   18a4c:	20000bcc 	.word	0x20000bcc
   18a50:	000376f4 	.word	0x000376f4
   18a54:	20000c74 	.word	0x20000c74
   18a58:	0000ffff 	.word	0x0000ffff
   18a5c:	00019c71 	.word	0x00019c71
   18a60:	00019615 	.word	0x00019615
   18a64:	00019c19 	.word	0x00019c19

00018a68 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   18a68:	b580      	push	{r7, lr}
   18a6a:	b08e      	sub	sp, #56	; 0x38
   18a6c:	af00      	add	r7, sp, #0
   18a6e:	60f8      	str	r0, [r7, #12]
   18a70:	60b9      	str	r1, [r7, #8]
   18a72:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   18a74:	4b48      	ldr	r3, [pc, #288]	; (18b98 <vTraceStoreMemMangEvent+0x130>)
   18a76:	681b      	ldr	r3, [r3, #0]
   18a78:	2b00      	cmp	r3, #0
   18a7a:	d100      	bne.n	18a7e <vTraceStoreMemMangEvent+0x16>
   18a7c:	e088      	b.n	18b90 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   18a7e:	687b      	ldr	r3, [r7, #4]
   18a80:	2b00      	cmp	r3, #0
   18a82:	da03      	bge.n	18a8c <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   18a84:	687b      	ldr	r3, [r7, #4]
   18a86:	425b      	negs	r3, r3
   18a88:	637b      	str	r3, [r7, #52]	; 0x34
   18a8a:	e001      	b.n	18a90 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   18a8c:	687b      	ldr	r3, [r7, #4]
   18a8e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18a90:	f3ef 8310 	mrs	r3, PRIMASK
   18a94:	61bb      	str	r3, [r7, #24]
  return(result);
   18a96:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   18a98:	633b      	str	r3, [r7, #48]	; 0x30
   18a9a:	2301      	movs	r3, #1
   18a9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18a9e:	69fb      	ldr	r3, [r7, #28]
   18aa0:	f383 8810 	msr	PRIMASK, r3
   18aa4:	4b3d      	ldr	r3, [pc, #244]	; (18b9c <vTraceStoreMemMangEvent+0x134>)
   18aa6:	681b      	ldr	r3, [r3, #0]
   18aa8:	1c5a      	adds	r2, r3, #1
   18aaa:	4b3c      	ldr	r3, [pc, #240]	; (18b9c <vTraceStoreMemMangEvent+0x134>)
   18aac:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   18aae:	68bb      	ldr	r3, [r7, #8]
   18ab0:	2b00      	cmp	r3, #0
   18ab2:	d005      	beq.n	18ac0 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   18ab4:	4b3a      	ldr	r3, [pc, #232]	; (18ba0 <vTraceStoreMemMangEvent+0x138>)
   18ab6:	681a      	ldr	r2, [r3, #0]
   18ab8:	687b      	ldr	r3, [r7, #4]
   18aba:	18d2      	adds	r2, r2, r3
   18abc:	4b38      	ldr	r3, [pc, #224]	; (18ba0 <vTraceStoreMemMangEvent+0x138>)
   18abe:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   18ac0:	4b35      	ldr	r3, [pc, #212]	; (18b98 <vTraceStoreMemMangEvent+0x130>)
   18ac2:	681b      	ldr	r3, [r3, #0]
   18ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18ac6:	2b00      	cmp	r3, #0
   18ac8:	d057      	beq.n	18b7a <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   18aca:	20ff      	movs	r0, #255	; 0xff
   18acc:	4b35      	ldr	r3, [pc, #212]	; (18ba4 <vTraceStoreMemMangEvent+0x13c>)
   18ace:	4798      	blx	r3
   18ad0:	0003      	movs	r3, r0
   18ad2:	001a      	movs	r2, r3
   18ad4:	232f      	movs	r3, #47	; 0x2f
   18ad6:	18fb      	adds	r3, r7, r3
   18ad8:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   18ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18adc:	4a32      	ldr	r2, [pc, #200]	; (18ba8 <vTraceStoreMemMangEvent+0x140>)
   18ade:	0019      	movs	r1, r3
   18ae0:	0010      	movs	r0, r2
   18ae2:	4b32      	ldr	r3, [pc, #200]	; (18bac <vTraceStoreMemMangEvent+0x144>)
   18ae4:	4798      	blx	r3
   18ae6:	0002      	movs	r2, r0
   18ae8:	232c      	movs	r3, #44	; 0x2c
   18aea:	18fb      	adds	r3, r7, r3
   18aec:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   18aee:	4b30      	ldr	r3, [pc, #192]	; (18bb0 <vTraceStoreMemMangEvent+0x148>)
   18af0:	4798      	blx	r3
   18af2:	0003      	movs	r3, r0
   18af4:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   18af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18af8:	2b00      	cmp	r3, #0
   18afa:	d03e      	beq.n	18b7a <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   18afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18afe:	222f      	movs	r2, #47	; 0x2f
   18b00:	18ba      	adds	r2, r7, r2
   18b02:	7812      	ldrb	r2, [r2, #0]
   18b04:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   18b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18b08:	2200      	movs	r2, #0
   18b0a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   18b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18b0e:	222c      	movs	r2, #44	; 0x2c
   18b10:	18ba      	adds	r2, r7, r2
   18b12:	8812      	ldrh	r2, [r2, #0]
   18b14:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18b16:	4b27      	ldr	r3, [pc, #156]	; (18bb4 <vTraceStoreMemMangEvent+0x14c>)
   18b18:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   18b1a:	68bb      	ldr	r3, [r7, #8]
   18b1c:	4a22      	ldr	r2, [pc, #136]	; (18ba8 <vTraceStoreMemMangEvent+0x140>)
   18b1e:	0019      	movs	r1, r3
   18b20:	0010      	movs	r0, r2
   18b22:	4b22      	ldr	r3, [pc, #136]	; (18bac <vTraceStoreMemMangEvent+0x144>)
   18b24:	4798      	blx	r3
   18b26:	0002      	movs	r2, r0
   18b28:	2326      	movs	r3, #38	; 0x26
   18b2a:	18fb      	adds	r3, r7, r3
   18b2c:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   18b2e:	2325      	movs	r3, #37	; 0x25
   18b30:	18fb      	adds	r3, r7, r3
   18b32:	2200      	movs	r2, #0
   18b34:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   18b36:	4b1e      	ldr	r3, [pc, #120]	; (18bb0 <vTraceStoreMemMangEvent+0x148>)
   18b38:	4798      	blx	r3
   18b3a:	0003      	movs	r3, r0
   18b3c:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   18b3e:	6a3b      	ldr	r3, [r7, #32]
   18b40:	2b00      	cmp	r3, #0
   18b42:	d01a      	beq.n	18b7a <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   18b44:	6a3b      	ldr	r3, [r7, #32]
   18b46:	2226      	movs	r2, #38	; 0x26
   18b48:	18ba      	adds	r2, r7, r2
   18b4a:	8812      	ldrh	r2, [r2, #0]
   18b4c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   18b4e:	6a3b      	ldr	r3, [r7, #32]
   18b50:	2225      	movs	r2, #37	; 0x25
   18b52:	18ba      	adds	r2, r7, r2
   18b54:	7812      	ldrb	r2, [r2, #0]
   18b56:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   18b58:	68fb      	ldr	r3, [r7, #12]
   18b5a:	b2db      	uxtb	r3, r3
   18b5c:	3301      	adds	r3, #1
   18b5e:	b2da      	uxtb	r2, r3
   18b60:	6a3b      	ldr	r3, [r7, #32]
   18b62:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   18b64:	68fb      	ldr	r3, [r7, #12]
   18b66:	b2da      	uxtb	r2, r3
   18b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18b6a:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   18b6c:	4b11      	ldr	r3, [pc, #68]	; (18bb4 <vTraceStoreMemMangEvent+0x14c>)
   18b6e:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   18b70:	4b09      	ldr	r3, [pc, #36]	; (18b98 <vTraceStoreMemMangEvent+0x130>)
   18b72:	681b      	ldr	r3, [r3, #0]
   18b74:	4a0a      	ldr	r2, [pc, #40]	; (18ba0 <vTraceStoreMemMangEvent+0x138>)
   18b76:	6812      	ldr	r2, [r2, #0]
   18b78:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   18b7a:	4b08      	ldr	r3, [pc, #32]	; (18b9c <vTraceStoreMemMangEvent+0x134>)
   18b7c:	681b      	ldr	r3, [r3, #0]
   18b7e:	1e5a      	subs	r2, r3, #1
   18b80:	4b06      	ldr	r3, [pc, #24]	; (18b9c <vTraceStoreMemMangEvent+0x134>)
   18b82:	601a      	str	r2, [r3, #0]
   18b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18b86:	617b      	str	r3, [r7, #20]
   18b88:	697b      	ldr	r3, [r7, #20]
   18b8a:	f383 8810 	msr	PRIMASK, r3
   18b8e:	e000      	b.n	18b92 <vTraceStoreMemMangEvent+0x12a>
		return;
   18b90:	46c0      	nop			; (mov r8, r8)
}
   18b92:	46bd      	mov	sp, r7
   18b94:	b00e      	add	sp, #56	; 0x38
   18b96:	bd80      	pop	{r7, pc}
   18b98:	20000c74 	.word	0x20000c74
   18b9c:	20000bcc 	.word	0x20000bcc
   18ba0:	20000be0 	.word	0x20000be0
   18ba4:	00019c71 	.word	0x00019c71
   18ba8:	0000ffff 	.word	0x0000ffff
   18bac:	00018e35 	.word	0x00018e35
   18bb0:	00019615 	.word	0x00019615
   18bb4:	00019c19 	.word	0x00019c19

00018bb8 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   18bb8:	b590      	push	{r4, r7, lr}
   18bba:	b08b      	sub	sp, #44	; 0x2c
   18bbc:	af00      	add	r7, sp, #0
   18bbe:	60f8      	str	r0, [r7, #12]
   18bc0:	607a      	str	r2, [r7, #4]
   18bc2:	230b      	movs	r3, #11
   18bc4:	18fb      	adds	r3, r7, r3
   18bc6:	1c0a      	adds	r2, r1, #0
   18bc8:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   18bca:	68fb      	ldr	r3, [r7, #12]
   18bcc:	2bfe      	cmp	r3, #254	; 0xfe
   18bce:	d904      	bls.n	18bda <prvTraceStoreKernelCall+0x22>
   18bd0:	4b39      	ldr	r3, [pc, #228]	; (18cb8 <prvTraceStoreKernelCall+0x100>)
   18bd2:	0018      	movs	r0, r3
   18bd4:	4b39      	ldr	r3, [pc, #228]	; (18cbc <prvTraceStoreKernelCall+0x104>)
   18bd6:	4798      	blx	r3
   18bd8:	e06b      	b.n	18cb2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   18bda:	230b      	movs	r3, #11
   18bdc:	18fb      	adds	r3, r7, r3
   18bde:	781b      	ldrb	r3, [r3, #0]
   18be0:	2b08      	cmp	r3, #8
   18be2:	d904      	bls.n	18bee <prvTraceStoreKernelCall+0x36>
   18be4:	4b36      	ldr	r3, [pc, #216]	; (18cc0 <prvTraceStoreKernelCall+0x108>)
   18be6:	0018      	movs	r0, r3
   18be8:	4b34      	ldr	r3, [pc, #208]	; (18cbc <prvTraceStoreKernelCall+0x104>)
   18bea:	4798      	blx	r3
   18bec:	e061      	b.n	18cb2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   18bee:	4b35      	ldr	r3, [pc, #212]	; (18cc4 <prvTraceStoreKernelCall+0x10c>)
   18bf0:	681a      	ldr	r2, [r3, #0]
   18bf2:	230b      	movs	r3, #11
   18bf4:	18fb      	adds	r3, r7, r3
   18bf6:	781b      	ldrb	r3, [r3, #0]
   18bf8:	2164      	movs	r1, #100	; 0x64
   18bfa:	18d3      	adds	r3, r2, r3
   18bfc:	185b      	adds	r3, r3, r1
   18bfe:	781b      	ldrb	r3, [r3, #0]
   18c00:	001a      	movs	r2, r3
   18c02:	687b      	ldr	r3, [r7, #4]
   18c04:	429a      	cmp	r2, r3
   18c06:	d204      	bcs.n	18c12 <prvTraceStoreKernelCall+0x5a>
   18c08:	4b2f      	ldr	r3, [pc, #188]	; (18cc8 <prvTraceStoreKernelCall+0x110>)
   18c0a:	0018      	movs	r0, r3
   18c0c:	4b2b      	ldr	r3, [pc, #172]	; (18cbc <prvTraceStoreKernelCall+0x104>)
   18c0e:	4798      	blx	r3
   18c10:	e04f      	b.n	18cb2 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   18c12:	4b2e      	ldr	r3, [pc, #184]	; (18ccc <prvTraceStoreKernelCall+0x114>)
   18c14:	681b      	ldr	r3, [r3, #0]
   18c16:	2b00      	cmp	r3, #0
   18c18:	d004      	beq.n	18c24 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   18c1a:	4b2d      	ldr	r3, [pc, #180]	; (18cd0 <prvTraceStoreKernelCall+0x118>)
   18c1c:	0018      	movs	r0, r3
   18c1e:	4b27      	ldr	r3, [pc, #156]	; (18cbc <prvTraceStoreKernelCall+0x104>)
   18c20:	4798      	blx	r3
		return;
   18c22:	e046      	b.n	18cb2 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   18c24:	4b2b      	ldr	r3, [pc, #172]	; (18cd4 <prvTraceStoreKernelCall+0x11c>)
   18c26:	781b      	ldrb	r3, [r3, #0]
   18c28:	2b00      	cmp	r3, #0
   18c2a:	d041      	beq.n	18cb0 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18c2c:	f3ef 8310 	mrs	r3, PRIMASK
   18c30:	617b      	str	r3, [r7, #20]
  return(result);
   18c32:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   18c34:	627b      	str	r3, [r7, #36]	; 0x24
   18c36:	2301      	movs	r3, #1
   18c38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18c3a:	69bb      	ldr	r3, [r7, #24]
   18c3c:	f383 8810 	msr	PRIMASK, r3
   18c40:	4b22      	ldr	r3, [pc, #136]	; (18ccc <prvTraceStoreKernelCall+0x114>)
   18c42:	681b      	ldr	r3, [r3, #0]
   18c44:	1c5a      	adds	r2, r3, #1
   18c46:	4b21      	ldr	r3, [pc, #132]	; (18ccc <prvTraceStoreKernelCall+0x114>)
   18c48:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   18c4a:	4b1e      	ldr	r3, [pc, #120]	; (18cc4 <prvTraceStoreKernelCall+0x10c>)
   18c4c:	681b      	ldr	r3, [r3, #0]
   18c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18c50:	2b00      	cmp	r3, #0
   18c52:	d022      	beq.n	18c9a <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18c54:	2322      	movs	r3, #34	; 0x22
   18c56:	18fc      	adds	r4, r7, r3
   18c58:	4b1f      	ldr	r3, [pc, #124]	; (18cd8 <prvTraceStoreKernelCall+0x120>)
   18c5a:	0018      	movs	r0, r3
   18c5c:	4b1f      	ldr	r3, [pc, #124]	; (18cdc <prvTraceStoreKernelCall+0x124>)
   18c5e:	4798      	blx	r3
   18c60:	0003      	movs	r3, r0
   18c62:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   18c64:	2321      	movs	r3, #33	; 0x21
   18c66:	18fb      	adds	r3, r7, r3
   18c68:	687a      	ldr	r2, [r7, #4]
   18c6a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   18c6c:	4b1c      	ldr	r3, [pc, #112]	; (18ce0 <prvTraceStoreKernelCall+0x128>)
   18c6e:	4798      	blx	r3
   18c70:	0003      	movs	r3, r0
   18c72:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   18c74:	69fb      	ldr	r3, [r7, #28]
   18c76:	2b00      	cmp	r3, #0
   18c78:	d00f      	beq.n	18c9a <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   18c7a:	69fb      	ldr	r3, [r7, #28]
   18c7c:	2222      	movs	r2, #34	; 0x22
   18c7e:	18ba      	adds	r2, r7, r2
   18c80:	8812      	ldrh	r2, [r2, #0]
   18c82:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   18c84:	68fb      	ldr	r3, [r7, #12]
   18c86:	b2da      	uxtb	r2, r3
   18c88:	69fb      	ldr	r3, [r7, #28]
   18c8a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18c8c:	69fb      	ldr	r3, [r7, #28]
   18c8e:	2221      	movs	r2, #33	; 0x21
   18c90:	18ba      	adds	r2, r7, r2
   18c92:	7812      	ldrb	r2, [r2, #0]
   18c94:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   18c96:	4b13      	ldr	r3, [pc, #76]	; (18ce4 <prvTraceStoreKernelCall+0x12c>)
   18c98:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18c9a:	4b0c      	ldr	r3, [pc, #48]	; (18ccc <prvTraceStoreKernelCall+0x114>)
   18c9c:	681b      	ldr	r3, [r3, #0]
   18c9e:	1e5a      	subs	r2, r3, #1
   18ca0:	4b0a      	ldr	r3, [pc, #40]	; (18ccc <prvTraceStoreKernelCall+0x114>)
   18ca2:	601a      	str	r2, [r3, #0]
   18ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18ca6:	613b      	str	r3, [r7, #16]
   18ca8:	693b      	ldr	r3, [r7, #16]
   18caa:	f383 8810 	msr	PRIMASK, r3
   18cae:	e000      	b.n	18cb2 <prvTraceStoreKernelCall+0xfa>
		return;
   18cb0:	46c0      	nop			; (mov r8, r8)
}
   18cb2:	46bd      	mov	sp, r7
   18cb4:	b00b      	add	sp, #44	; 0x2c
   18cb6:	bd90      	pop	{r4, r7, pc}
   18cb8:	00037764 	.word	0x00037764
   18cbc:	00019a5d 	.word	0x00019a5d
   18cc0:	0003779c 	.word	0x0003779c
   18cc4:	20000c74 	.word	0x20000c74
   18cc8:	000377e4 	.word	0x000377e4
   18ccc:	20000bcc 	.word	0x20000bcc
   18cd0:	0003782c 	.word	0x0003782c
   18cd4:	20000bd8 	.word	0x20000bd8
   18cd8:	0000ffff 	.word	0x0000ffff
   18cdc:	00019c71 	.word	0x00019c71
   18ce0:	00019615 	.word	0x00019615
   18ce4:	00019c19 	.word	0x00019c19

00018ce8 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   18ce8:	b580      	push	{r7, lr}
   18cea:	b08a      	sub	sp, #40	; 0x28
   18cec:	af00      	add	r7, sp, #0
   18cee:	60f8      	str	r0, [r7, #12]
   18cf0:	607a      	str	r2, [r7, #4]
   18cf2:	603b      	str	r3, [r7, #0]
   18cf4:	230b      	movs	r3, #11
   18cf6:	18fb      	adds	r3, r7, r3
   18cf8:	1c0a      	adds	r2, r1, #0
   18cfa:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   18cfc:	68fb      	ldr	r3, [r7, #12]
   18cfe:	2bfe      	cmp	r3, #254	; 0xfe
   18d00:	d904      	bls.n	18d0c <prvTraceStoreKernelCallWithParam+0x24>
   18d02:	4b40      	ldr	r3, [pc, #256]	; (18e04 <prvTraceStoreKernelCallWithParam+0x11c>)
   18d04:	0018      	movs	r0, r3
   18d06:	4b40      	ldr	r3, [pc, #256]	; (18e08 <prvTraceStoreKernelCallWithParam+0x120>)
   18d08:	4798      	blx	r3
   18d0a:	e077      	b.n	18dfc <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   18d0c:	230b      	movs	r3, #11
   18d0e:	18fb      	adds	r3, r7, r3
   18d10:	781b      	ldrb	r3, [r3, #0]
   18d12:	2b08      	cmp	r3, #8
   18d14:	d904      	bls.n	18d20 <prvTraceStoreKernelCallWithParam+0x38>
   18d16:	4b3d      	ldr	r3, [pc, #244]	; (18e0c <prvTraceStoreKernelCallWithParam+0x124>)
   18d18:	0018      	movs	r0, r3
   18d1a:	4b3b      	ldr	r3, [pc, #236]	; (18e08 <prvTraceStoreKernelCallWithParam+0x120>)
   18d1c:	4798      	blx	r3
   18d1e:	e06d      	b.n	18dfc <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   18d20:	4b3b      	ldr	r3, [pc, #236]	; (18e10 <prvTraceStoreKernelCallWithParam+0x128>)
   18d22:	681a      	ldr	r2, [r3, #0]
   18d24:	230b      	movs	r3, #11
   18d26:	18fb      	adds	r3, r7, r3
   18d28:	781b      	ldrb	r3, [r3, #0]
   18d2a:	2164      	movs	r1, #100	; 0x64
   18d2c:	18d3      	adds	r3, r2, r3
   18d2e:	185b      	adds	r3, r3, r1
   18d30:	781b      	ldrb	r3, [r3, #0]
   18d32:	001a      	movs	r2, r3
   18d34:	687b      	ldr	r3, [r7, #4]
   18d36:	429a      	cmp	r2, r3
   18d38:	d204      	bcs.n	18d44 <prvTraceStoreKernelCallWithParam+0x5c>
   18d3a:	4b36      	ldr	r3, [pc, #216]	; (18e14 <prvTraceStoreKernelCallWithParam+0x12c>)
   18d3c:	0018      	movs	r0, r3
   18d3e:	4b32      	ldr	r3, [pc, #200]	; (18e08 <prvTraceStoreKernelCallWithParam+0x120>)
   18d40:	4798      	blx	r3
   18d42:	e05b      	b.n	18dfc <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   18d44:	4b34      	ldr	r3, [pc, #208]	; (18e18 <prvTraceStoreKernelCallWithParam+0x130>)
   18d46:	681b      	ldr	r3, [r3, #0]
   18d48:	2b00      	cmp	r3, #0
   18d4a:	d004      	beq.n	18d56 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   18d4c:	4b33      	ldr	r3, [pc, #204]	; (18e1c <prvTraceStoreKernelCallWithParam+0x134>)
   18d4e:	0018      	movs	r0, r3
   18d50:	4b2d      	ldr	r3, [pc, #180]	; (18e08 <prvTraceStoreKernelCallWithParam+0x120>)
   18d52:	4798      	blx	r3
		return;
   18d54:	e052      	b.n	18dfc <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18d56:	f3ef 8310 	mrs	r3, PRIMASK
   18d5a:	617b      	str	r3, [r7, #20]
  return(result);
   18d5c:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   18d5e:	627b      	str	r3, [r7, #36]	; 0x24
   18d60:	2301      	movs	r3, #1
   18d62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18d64:	69bb      	ldr	r3, [r7, #24]
   18d66:	f383 8810 	msr	PRIMASK, r3
   18d6a:	4b2b      	ldr	r3, [pc, #172]	; (18e18 <prvTraceStoreKernelCallWithParam+0x130>)
   18d6c:	681b      	ldr	r3, [r3, #0]
   18d6e:	1c5a      	adds	r2, r3, #1
   18d70:	4b29      	ldr	r3, [pc, #164]	; (18e18 <prvTraceStoreKernelCallWithParam+0x130>)
   18d72:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18d74:	4b26      	ldr	r3, [pc, #152]	; (18e10 <prvTraceStoreKernelCallWithParam+0x128>)
   18d76:	681b      	ldr	r3, [r3, #0]
   18d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18d7a:	2b00      	cmp	r3, #0
   18d7c:	d034      	beq.n	18de8 <prvTraceStoreKernelCallWithParam+0x100>
   18d7e:	4b28      	ldr	r3, [pc, #160]	; (18e20 <prvTraceStoreKernelCallWithParam+0x138>)
   18d80:	781b      	ldrb	r3, [r3, #0]
   18d82:	2b00      	cmp	r3, #0
   18d84:	d030      	beq.n	18de8 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   18d86:	20ff      	movs	r0, #255	; 0xff
   18d88:	4b26      	ldr	r3, [pc, #152]	; (18e24 <prvTraceStoreKernelCallWithParam+0x13c>)
   18d8a:	4798      	blx	r3
   18d8c:	0003      	movs	r3, r0
   18d8e:	001a      	movs	r2, r3
   18d90:	2323      	movs	r3, #35	; 0x23
   18d92:	18fb      	adds	r3, r7, r3
   18d94:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   18d96:	683b      	ldr	r3, [r7, #0]
   18d98:	0019      	movs	r1, r3
   18d9a:	20ff      	movs	r0, #255	; 0xff
   18d9c:	4b22      	ldr	r3, [pc, #136]	; (18e28 <prvTraceStoreKernelCallWithParam+0x140>)
   18d9e:	4798      	blx	r3
   18da0:	0002      	movs	r2, r0
   18da2:	2322      	movs	r3, #34	; 0x22
   18da4:	18fb      	adds	r3, r7, r3
   18da6:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   18da8:	2321      	movs	r3, #33	; 0x21
   18daa:	18fb      	adds	r3, r7, r3
   18dac:	687a      	ldr	r2, [r7, #4]
   18dae:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   18db0:	4b1e      	ldr	r3, [pc, #120]	; (18e2c <prvTraceStoreKernelCallWithParam+0x144>)
   18db2:	4798      	blx	r3
   18db4:	0003      	movs	r3, r0
   18db6:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   18db8:	69fb      	ldr	r3, [r7, #28]
   18dba:	2b00      	cmp	r3, #0
   18dbc:	d014      	beq.n	18de8 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   18dbe:	69fb      	ldr	r3, [r7, #28]
   18dc0:	2223      	movs	r2, #35	; 0x23
   18dc2:	18ba      	adds	r2, r7, r2
   18dc4:	7812      	ldrb	r2, [r2, #0]
   18dc6:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   18dc8:	68fb      	ldr	r3, [r7, #12]
   18dca:	b2da      	uxtb	r2, r3
   18dcc:	69fb      	ldr	r3, [r7, #28]
   18dce:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18dd0:	69fb      	ldr	r3, [r7, #28]
   18dd2:	2221      	movs	r2, #33	; 0x21
   18dd4:	18ba      	adds	r2, r7, r2
   18dd6:	7812      	ldrb	r2, [r2, #0]
   18dd8:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   18dda:	69fb      	ldr	r3, [r7, #28]
   18ddc:	2222      	movs	r2, #34	; 0x22
   18dde:	18ba      	adds	r2, r7, r2
   18de0:	7812      	ldrb	r2, [r2, #0]
   18de2:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   18de4:	4b12      	ldr	r3, [pc, #72]	; (18e30 <prvTraceStoreKernelCallWithParam+0x148>)
   18de6:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18de8:	4b0b      	ldr	r3, [pc, #44]	; (18e18 <prvTraceStoreKernelCallWithParam+0x130>)
   18dea:	681b      	ldr	r3, [r3, #0]
   18dec:	1e5a      	subs	r2, r3, #1
   18dee:	4b0a      	ldr	r3, [pc, #40]	; (18e18 <prvTraceStoreKernelCallWithParam+0x130>)
   18df0:	601a      	str	r2, [r3, #0]
   18df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18df4:	613b      	str	r3, [r7, #16]
   18df6:	693b      	ldr	r3, [r7, #16]
   18df8:	f383 8810 	msr	PRIMASK, r3
}
   18dfc:	46bd      	mov	sp, r7
   18dfe:	b00a      	add	sp, #40	; 0x28
   18e00:	bd80      	pop	{r7, pc}
   18e02:	46c0      	nop			; (mov r8, r8)
   18e04:	00037864 	.word	0x00037864
   18e08:	00019a5d 	.word	0x00019a5d
   18e0c:	000378a4 	.word	0x000378a4
   18e10:	20000c74 	.word	0x20000c74
   18e14:	000378f4 	.word	0x000378f4
   18e18:	20000bcc 	.word	0x20000bcc
   18e1c:	00037944 	.word	0x00037944
   18e20:	20000bd8 	.word	0x20000bd8
   18e24:	00019c71 	.word	0x00019c71
   18e28:	00018e35 	.word	0x00018e35
   18e2c:	00019615 	.word	0x00019615
   18e30:	00019c19 	.word	0x00019c19

00018e34 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   18e34:	b580      	push	{r7, lr}
   18e36:	b084      	sub	sp, #16
   18e38:	af00      	add	r7, sp, #0
   18e3a:	6078      	str	r0, [r7, #4]
   18e3c:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   18e3e:	687b      	ldr	r3, [r7, #4]
   18e40:	2bff      	cmp	r3, #255	; 0xff
   18e42:	d009      	beq.n	18e58 <prvTraceGetParam+0x24>
   18e44:	687b      	ldr	r3, [r7, #4]
   18e46:	4a19      	ldr	r2, [pc, #100]	; (18eac <prvTraceGetParam+0x78>)
   18e48:	4293      	cmp	r3, r2
   18e4a:	d005      	beq.n	18e58 <prvTraceGetParam+0x24>
   18e4c:	4b18      	ldr	r3, [pc, #96]	; (18eb0 <prvTraceGetParam+0x7c>)
   18e4e:	0018      	movs	r0, r3
   18e50:	4b18      	ldr	r3, [pc, #96]	; (18eb4 <prvTraceGetParam+0x80>)
   18e52:	4798      	blx	r3
   18e54:	683b      	ldr	r3, [r7, #0]
   18e56:	e024      	b.n	18ea2 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   18e58:	683a      	ldr	r2, [r7, #0]
   18e5a:	687b      	ldr	r3, [r7, #4]
   18e5c:	429a      	cmp	r2, r3
   18e5e:	d801      	bhi.n	18e64 <prvTraceGetParam+0x30>
	{
		return param;
   18e60:	683b      	ldr	r3, [r7, #0]
   18e62:	e01e      	b.n	18ea2 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   18e64:	4b14      	ldr	r3, [pc, #80]	; (18eb8 <prvTraceGetParam+0x84>)
   18e66:	4798      	blx	r3
   18e68:	0003      	movs	r3, r0
   18e6a:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   18e6c:	68fb      	ldr	r3, [r7, #12]
   18e6e:	2b00      	cmp	r3, #0
   18e70:	d014      	beq.n	18e9c <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   18e72:	68fb      	ldr	r3, [r7, #12]
   18e74:	2201      	movs	r2, #1
   18e76:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   18e78:	687b      	ldr	r3, [r7, #4]
   18e7a:	43db      	mvns	r3, r3
   18e7c:	683a      	ldr	r2, [r7, #0]
   18e7e:	4013      	ands	r3, r2
   18e80:	0a1b      	lsrs	r3, r3, #8
   18e82:	b2da      	uxtb	r2, r3
   18e84:	68fb      	ldr	r3, [r7, #12]
   18e86:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   18e88:	687b      	ldr	r3, [r7, #4]
   18e8a:	43db      	mvns	r3, r3
   18e8c:	683a      	ldr	r2, [r7, #0]
   18e8e:	4013      	ands	r3, r2
   18e90:	0c1b      	lsrs	r3, r3, #16
   18e92:	b29a      	uxth	r2, r3
   18e94:	68fb      	ldr	r3, [r7, #12]
   18e96:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18e98:	4b08      	ldr	r3, [pc, #32]	; (18ebc <prvTraceGetParam+0x88>)
   18e9a:	4798      	blx	r3
		}

		return param & param_max;
   18e9c:	683b      	ldr	r3, [r7, #0]
   18e9e:	687a      	ldr	r2, [r7, #4]
   18ea0:	4013      	ands	r3, r2
	}
}
   18ea2:	0018      	movs	r0, r3
   18ea4:	46bd      	mov	sp, r7
   18ea6:	b004      	add	sp, #16
   18ea8:	bd80      	pop	{r7, pc}
   18eaa:	46c0      	nop			; (mov r8, r8)
   18eac:	0000ffff 	.word	0x0000ffff
   18eb0:	0003797c 	.word	0x0003797c
   18eb4:	00019a5d 	.word	0x00019a5d
   18eb8:	00019615 	.word	0x00019615
   18ebc:	00019c19 	.word	0x00019c19

00018ec0 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   18ec0:	b580      	push	{r7, lr}
   18ec2:	b08a      	sub	sp, #40	; 0x28
   18ec4:	af00      	add	r7, sp, #0
   18ec6:	6078      	str	r0, [r7, #4]
   18ec8:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   18eca:	2326      	movs	r3, #38	; 0x26
   18ecc:	18fb      	adds	r3, r7, r3
   18ece:	2200      	movs	r2, #0
   18ed0:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   18ed2:	687b      	ldr	r3, [r7, #4]
   18ed4:	2bfe      	cmp	r3, #254	; 0xfe
   18ed6:	d904      	bls.n	18ee2 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   18ed8:	4b2d      	ldr	r3, [pc, #180]	; (18f90 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   18eda:	0018      	movs	r0, r3
   18edc:	4b2d      	ldr	r3, [pc, #180]	; (18f94 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18ede:	4798      	blx	r3
   18ee0:	e053      	b.n	18f8a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   18ee2:	4b2d      	ldr	r3, [pc, #180]	; (18f98 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18ee4:	681b      	ldr	r3, [r3, #0]
   18ee6:	2b00      	cmp	r3, #0
   18ee8:	d004      	beq.n	18ef4 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   18eea:	4b2c      	ldr	r3, [pc, #176]	; (18f9c <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   18eec:	0018      	movs	r0, r3
   18eee:	4b29      	ldr	r3, [pc, #164]	; (18f94 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18ef0:	4798      	blx	r3
		return;
   18ef2:	e04a      	b.n	18f8a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18ef4:	f3ef 8310 	mrs	r3, PRIMASK
   18ef8:	613b      	str	r3, [r7, #16]
  return(result);
   18efa:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   18efc:	623b      	str	r3, [r7, #32]
   18efe:	2301      	movs	r3, #1
   18f00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18f02:	697b      	ldr	r3, [r7, #20]
   18f04:	f383 8810 	msr	PRIMASK, r3
   18f08:	4b23      	ldr	r3, [pc, #140]	; (18f98 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18f0a:	681b      	ldr	r3, [r3, #0]
   18f0c:	1c5a      	adds	r2, r3, #1
   18f0e:	4b22      	ldr	r3, [pc, #136]	; (18f98 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18f10:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18f12:	4b23      	ldr	r3, [pc, #140]	; (18fa0 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   18f14:	681b      	ldr	r3, [r3, #0]
   18f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18f18:	2b00      	cmp	r3, #0
   18f1a:	d02c      	beq.n	18f76 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   18f1c:	4b21      	ldr	r3, [pc, #132]	; (18fa4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   18f1e:	781b      	ldrb	r3, [r3, #0]
   18f20:	2b00      	cmp	r3, #0
   18f22:	d028      	beq.n	18f76 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   18f24:	20ff      	movs	r0, #255	; 0xff
   18f26:	4b20      	ldr	r3, [pc, #128]	; (18fa8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   18f28:	4798      	blx	r3
   18f2a:	0003      	movs	r3, r0
   18f2c:	001a      	movs	r2, r3
   18f2e:	231f      	movs	r3, #31
   18f30:	18fb      	adds	r3, r7, r3
   18f32:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   18f34:	683b      	ldr	r3, [r7, #0]
   18f36:	4a1d      	ldr	r2, [pc, #116]	; (18fac <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   18f38:	0019      	movs	r1, r3
   18f3a:	0010      	movs	r0, r2
   18f3c:	4b1c      	ldr	r3, [pc, #112]	; (18fb0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   18f3e:	4798      	blx	r3
   18f40:	0002      	movs	r2, r0
   18f42:	2326      	movs	r3, #38	; 0x26
   18f44:	18fb      	adds	r3, r7, r3
   18f46:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   18f48:	4b1a      	ldr	r3, [pc, #104]	; (18fb4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   18f4a:	4798      	blx	r3
   18f4c:	0003      	movs	r3, r0
   18f4e:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   18f50:	69bb      	ldr	r3, [r7, #24]
   18f52:	2b00      	cmp	r3, #0
   18f54:	d00f      	beq.n	18f76 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   18f56:	69bb      	ldr	r3, [r7, #24]
   18f58:	221f      	movs	r2, #31
   18f5a:	18ba      	adds	r2, r7, r2
   18f5c:	7812      	ldrb	r2, [r2, #0]
   18f5e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   18f60:	687b      	ldr	r3, [r7, #4]
   18f62:	b2da      	uxtb	r2, r3
   18f64:	69bb      	ldr	r3, [r7, #24]
   18f66:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   18f68:	69bb      	ldr	r3, [r7, #24]
   18f6a:	2226      	movs	r2, #38	; 0x26
   18f6c:	18ba      	adds	r2, r7, r2
   18f6e:	8812      	ldrh	r2, [r2, #0]
   18f70:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18f72:	4b11      	ldr	r3, [pc, #68]	; (18fb8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   18f74:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18f76:	4b08      	ldr	r3, [pc, #32]	; (18f98 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18f78:	681b      	ldr	r3, [r3, #0]
   18f7a:	1e5a      	subs	r2, r3, #1
   18f7c:	4b06      	ldr	r3, [pc, #24]	; (18f98 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18f7e:	601a      	str	r2, [r3, #0]
   18f80:	6a3b      	ldr	r3, [r7, #32]
   18f82:	60fb      	str	r3, [r7, #12]
   18f84:	68fb      	ldr	r3, [r7, #12]
   18f86:	f383 8810 	msr	PRIMASK, r3
}
   18f8a:	46bd      	mov	sp, r7
   18f8c:	b00a      	add	sp, #40	; 0x28
   18f8e:	bd80      	pop	{r7, pc}
   18f90:	000379b8 	.word	0x000379b8
   18f94:	00019a5d 	.word	0x00019a5d
   18f98:	20000bcc 	.word	0x20000bcc
   18f9c:	00037a10 	.word	0x00037a10
   18fa0:	20000c74 	.word	0x20000c74
   18fa4:	20000bd8 	.word	0x20000bd8
   18fa8:	00019c71 	.word	0x00019c71
   18fac:	0000ffff 	.word	0x0000ffff
   18fb0:	00018e35 	.word	0x00018e35
   18fb4:	00019615 	.word	0x00019615
   18fb8:	00019c19 	.word	0x00019c19

00018fbc <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   18fbc:	b590      	push	{r4, r7, lr}
   18fbe:	b089      	sub	sp, #36	; 0x24
   18fc0:	af00      	add	r7, sp, #0
   18fc2:	0002      	movs	r2, r0
   18fc4:	1dfb      	adds	r3, r7, #7
   18fc6:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   18fc8:	1dfb      	adds	r3, r7, #7
   18fca:	781b      	ldrb	r3, [r3, #0]
   18fcc:	2b0f      	cmp	r3, #15
   18fce:	d904      	bls.n	18fda <prvTraceStoreTaskswitch+0x1e>
   18fd0:	4b34      	ldr	r3, [pc, #208]	; (190a4 <prvTraceStoreTaskswitch+0xe8>)
   18fd2:	0018      	movs	r0, r3
   18fd4:	4b34      	ldr	r3, [pc, #208]	; (190a8 <prvTraceStoreTaskswitch+0xec>)
   18fd6:	4798      	blx	r3
   18fd8:	e061      	b.n	1909e <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18fda:	f3ef 8310 	mrs	r3, PRIMASK
   18fde:	60fb      	str	r3, [r7, #12]
  return(result);
   18fe0:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   18fe2:	61fb      	str	r3, [r7, #28]
   18fe4:	2301      	movs	r3, #1
   18fe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18fe8:	693b      	ldr	r3, [r7, #16]
   18fea:	f383 8810 	msr	PRIMASK, r3
   18fee:	4b2f      	ldr	r3, [pc, #188]	; (190ac <prvTraceStoreTaskswitch+0xf0>)
   18ff0:	681b      	ldr	r3, [r3, #0]
   18ff2:	1c5a      	adds	r2, r3, #1
   18ff4:	4b2d      	ldr	r3, [pc, #180]	; (190ac <prvTraceStoreTaskswitch+0xf0>)
   18ff6:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   18ff8:	4b2d      	ldr	r3, [pc, #180]	; (190b0 <prvTraceStoreTaskswitch+0xf4>)
   18ffa:	781b      	ldrb	r3, [r3, #0]
   18ffc:	1dfa      	adds	r2, r7, #7
   18ffe:	7812      	ldrb	r2, [r2, #0]
   19000:	429a      	cmp	r2, r3
   19002:	d042      	beq.n	1908a <prvTraceStoreTaskswitch+0xce>
   19004:	4b2b      	ldr	r3, [pc, #172]	; (190b4 <prvTraceStoreTaskswitch+0xf8>)
   19006:	681b      	ldr	r3, [r3, #0]
   19008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1900a:	2b00      	cmp	r3, #0
   1900c:	d03d      	beq.n	1908a <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   1900e:	4b2a      	ldr	r3, [pc, #168]	; (190b8 <prvTraceStoreTaskswitch+0xfc>)
   19010:	2200      	movs	r2, #0
   19012:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19014:	231a      	movs	r3, #26
   19016:	18fc      	adds	r4, r7, r3
   19018:	4b28      	ldr	r3, [pc, #160]	; (190bc <prvTraceStoreTaskswitch+0x100>)
   1901a:	0018      	movs	r0, r3
   1901c:	4b28      	ldr	r3, [pc, #160]	; (190c0 <prvTraceStoreTaskswitch+0x104>)
   1901e:	4798      	blx	r3
   19020:	0003      	movs	r3, r0
   19022:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   19024:	4b22      	ldr	r3, [pc, #136]	; (190b0 <prvTraceStoreTaskswitch+0xf4>)
   19026:	1dfa      	adds	r2, r7, #7
   19028:	7812      	ldrb	r2, [r2, #0]
   1902a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   1902c:	2319      	movs	r3, #25
   1902e:	18fb      	adds	r3, r7, r3
   19030:	4a1f      	ldr	r2, [pc, #124]	; (190b0 <prvTraceStoreTaskswitch+0xf4>)
   19032:	7812      	ldrb	r2, [r2, #0]
   19034:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   19036:	4b23      	ldr	r3, [pc, #140]	; (190c4 <prvTraceStoreTaskswitch+0x108>)
   19038:	4798      	blx	r3
   1903a:	0003      	movs	r3, r0
   1903c:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   1903e:	697b      	ldr	r3, [r7, #20]
   19040:	2b00      	cmp	r3, #0
   19042:	d022      	beq.n	1908a <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   19044:	4b1a      	ldr	r3, [pc, #104]	; (190b0 <prvTraceStoreTaskswitch+0xf4>)
   19046:	781b      	ldrb	r3, [r3, #0]
   19048:	0019      	movs	r1, r3
   1904a:	2003      	movs	r0, #3
   1904c:	4b1e      	ldr	r3, [pc, #120]	; (190c8 <prvTraceStoreTaskswitch+0x10c>)
   1904e:	4798      	blx	r3
   19050:	0003      	movs	r3, r0
   19052:	2b01      	cmp	r3, #1
   19054:	d103      	bne.n	1905e <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   19056:	697b      	ldr	r3, [r7, #20]
   19058:	2207      	movs	r2, #7
   1905a:	701a      	strb	r2, [r3, #0]
   1905c:	e002      	b.n	19064 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   1905e:	697b      	ldr	r3, [r7, #20]
   19060:	2206      	movs	r2, #6
   19062:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   19064:	697b      	ldr	r3, [r7, #20]
   19066:	221a      	movs	r2, #26
   19068:	18ba      	adds	r2, r7, r2
   1906a:	8812      	ldrh	r2, [r2, #0]
   1906c:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   1906e:	697b      	ldr	r3, [r7, #20]
   19070:	2219      	movs	r2, #25
   19072:	18ba      	adds	r2, r7, r2
   19074:	7812      	ldrb	r2, [r2, #0]
   19076:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   19078:	4b0d      	ldr	r3, [pc, #52]	; (190b0 <prvTraceStoreTaskswitch+0xf4>)
   1907a:	781b      	ldrb	r3, [r3, #0]
   1907c:	2201      	movs	r2, #1
   1907e:	0019      	movs	r1, r3
   19080:	2003      	movs	r0, #3
   19082:	4b12      	ldr	r3, [pc, #72]	; (190cc <prvTraceStoreTaskswitch+0x110>)
   19084:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   19086:	4b12      	ldr	r3, [pc, #72]	; (190d0 <prvTraceStoreTaskswitch+0x114>)
   19088:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   1908a:	4b08      	ldr	r3, [pc, #32]	; (190ac <prvTraceStoreTaskswitch+0xf0>)
   1908c:	681b      	ldr	r3, [r3, #0]
   1908e:	1e5a      	subs	r2, r3, #1
   19090:	4b06      	ldr	r3, [pc, #24]	; (190ac <prvTraceStoreTaskswitch+0xf0>)
   19092:	601a      	str	r2, [r3, #0]
   19094:	69fb      	ldr	r3, [r7, #28]
   19096:	60bb      	str	r3, [r7, #8]
   19098:	68bb      	ldr	r3, [r7, #8]
   1909a:	f383 8810 	msr	PRIMASK, r3
}
   1909e:	46bd      	mov	sp, r7
   190a0:	b009      	add	sp, #36	; 0x24
   190a2:	bd90      	pop	{r4, r7, pc}
   190a4:	00037a48 	.word	0x00037a48
   190a8:	00019a5d 	.word	0x00019a5d
   190ac:	20000bcc 	.word	0x20000bcc
   190b0:	20000bd8 	.word	0x20000bd8
   190b4:	20000c74 	.word	0x20000c74
   190b8:	20000bb8 	.word	0x20000bb8
   190bc:	0000ffff 	.word	0x0000ffff
   190c0:	00019c71 	.word	0x00019c71
   190c4:	00019615 	.word	0x00019615
   190c8:	000192b9 	.word	0x000192b9
   190cc:	00019215 	.word	0x00019215
   190d0:	00019c19 	.word	0x00019c19

000190d4 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   190d4:	b590      	push	{r4, r7, lr}
   190d6:	b083      	sub	sp, #12
   190d8:	af00      	add	r7, sp, #0
   190da:	0004      	movs	r4, r0
   190dc:	0008      	movs	r0, r1
   190de:	0011      	movs	r1, r2
   190e0:	1dfb      	adds	r3, r7, #7
   190e2:	1c22      	adds	r2, r4, #0
   190e4:	701a      	strb	r2, [r3, #0]
   190e6:	1dbb      	adds	r3, r7, #6
   190e8:	1c02      	adds	r2, r0, #0
   190ea:	701a      	strb	r2, [r3, #0]
   190ec:	1d7b      	adds	r3, r7, #5
   190ee:	1c0a      	adds	r2, r1, #0
   190f0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   190f2:	1dfb      	adds	r3, r7, #7
   190f4:	781b      	ldrb	r3, [r3, #0]
   190f6:	2b08      	cmp	r3, #8
   190f8:	d904      	bls.n	19104 <prvTraceSetPriorityProperty+0x30>
   190fa:	4b1a      	ldr	r3, [pc, #104]	; (19164 <prvTraceSetPriorityProperty+0x90>)
   190fc:	0018      	movs	r0, r3
   190fe:	4b1a      	ldr	r3, [pc, #104]	; (19168 <prvTraceSetPriorityProperty+0x94>)
   19100:	4798      	blx	r3
   19102:	e02c      	b.n	1915e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19104:	4b19      	ldr	r3, [pc, #100]	; (1916c <prvTraceSetPriorityProperty+0x98>)
   19106:	681a      	ldr	r2, [r3, #0]
   19108:	1dfb      	adds	r3, r7, #7
   1910a:	781b      	ldrb	r3, [r3, #0]
   1910c:	2164      	movs	r1, #100	; 0x64
   1910e:	18d3      	adds	r3, r2, r3
   19110:	185b      	adds	r3, r3, r1
   19112:	781b      	ldrb	r3, [r3, #0]
   19114:	1dba      	adds	r2, r7, #6
   19116:	7812      	ldrb	r2, [r2, #0]
   19118:	429a      	cmp	r2, r3
   1911a:	d904      	bls.n	19126 <prvTraceSetPriorityProperty+0x52>
   1911c:	4b14      	ldr	r3, [pc, #80]	; (19170 <prvTraceSetPriorityProperty+0x9c>)
   1911e:	0018      	movs	r0, r3
   19120:	4b11      	ldr	r3, [pc, #68]	; (19168 <prvTraceSetPriorityProperty+0x94>)
   19122:	4798      	blx	r3
   19124:	e01b      	b.n	1915e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   19126:	4b11      	ldr	r3, [pc, #68]	; (1916c <prvTraceSetPriorityProperty+0x98>)
   19128:	681c      	ldr	r4, [r3, #0]
   1912a:	1dfb      	adds	r3, r7, #7
   1912c:	781a      	ldrb	r2, [r3, #0]
   1912e:	1dbb      	adds	r3, r7, #6
   19130:	781b      	ldrb	r3, [r3, #0]
   19132:	0011      	movs	r1, r2
   19134:	0018      	movs	r0, r3
   19136:	4b0f      	ldr	r3, [pc, #60]	; (19174 <prvTraceSetPriorityProperty+0xa0>)
   19138:	4798      	blx	r3
   1913a:	0003      	movs	r3, r0
   1913c:	0018      	movs	r0, r3
   1913e:	4b0b      	ldr	r3, [pc, #44]	; (1916c <prvTraceSetPriorityProperty+0x98>)
   19140:	681a      	ldr	r2, [r3, #0]
   19142:	1dfb      	adds	r3, r7, #7
   19144:	781b      	ldrb	r3, [r3, #0]
   19146:	2170      	movs	r1, #112	; 0x70
   19148:	18d3      	adds	r3, r2, r3
   1914a:	185b      	adds	r3, r3, r1
   1914c:	781b      	ldrb	r3, [r3, #0]
   1914e:	18c3      	adds	r3, r0, r3
   19150:	3301      	adds	r3, #1
   19152:	229c      	movs	r2, #156	; 0x9c
   19154:	18e3      	adds	r3, r4, r3
   19156:	189b      	adds	r3, r3, r2
   19158:	1d7a      	adds	r2, r7, #5
   1915a:	7812      	ldrb	r2, [r2, #0]
   1915c:	701a      	strb	r2, [r3, #0]
}
   1915e:	46bd      	mov	sp, r7
   19160:	b003      	add	sp, #12
   19162:	bd90      	pop	{r4, r7, pc}
   19164:	00037bdc 	.word	0x00037bdc
   19168:	00019a5d 	.word	0x00019a5d
   1916c:	20000c74 	.word	0x20000c74
   19170:	00037c28 	.word	0x00037c28
   19174:	00019669 	.word	0x00019669

00019178 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   19178:	b590      	push	{r4, r7, lr}
   1917a:	b083      	sub	sp, #12
   1917c:	af00      	add	r7, sp, #0
   1917e:	0002      	movs	r2, r0
   19180:	1dfb      	adds	r3, r7, #7
   19182:	701a      	strb	r2, [r3, #0]
   19184:	1dbb      	adds	r3, r7, #6
   19186:	1c0a      	adds	r2, r1, #0
   19188:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1918a:	1dfb      	adds	r3, r7, #7
   1918c:	781b      	ldrb	r3, [r3, #0]
   1918e:	2b08      	cmp	r3, #8
   19190:	d905      	bls.n	1919e <prvTraceGetPriorityProperty+0x26>
   19192:	4b1b      	ldr	r3, [pc, #108]	; (19200 <prvTraceGetPriorityProperty+0x88>)
   19194:	0018      	movs	r0, r3
   19196:	4b1b      	ldr	r3, [pc, #108]	; (19204 <prvTraceGetPriorityProperty+0x8c>)
   19198:	4798      	blx	r3
   1919a:	2300      	movs	r3, #0
   1919c:	e02b      	b.n	191f6 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1919e:	4b1a      	ldr	r3, [pc, #104]	; (19208 <prvTraceGetPriorityProperty+0x90>)
   191a0:	681a      	ldr	r2, [r3, #0]
   191a2:	1dfb      	adds	r3, r7, #7
   191a4:	781b      	ldrb	r3, [r3, #0]
   191a6:	2164      	movs	r1, #100	; 0x64
   191a8:	18d3      	adds	r3, r2, r3
   191aa:	185b      	adds	r3, r3, r1
   191ac:	781b      	ldrb	r3, [r3, #0]
   191ae:	1dba      	adds	r2, r7, #6
   191b0:	7812      	ldrb	r2, [r2, #0]
   191b2:	429a      	cmp	r2, r3
   191b4:	d905      	bls.n	191c2 <prvTraceGetPriorityProperty+0x4a>
   191b6:	4b15      	ldr	r3, [pc, #84]	; (1920c <prvTraceGetPriorityProperty+0x94>)
   191b8:	0018      	movs	r0, r3
   191ba:	4b12      	ldr	r3, [pc, #72]	; (19204 <prvTraceGetPriorityProperty+0x8c>)
   191bc:	4798      	blx	r3
   191be:	2300      	movs	r3, #0
   191c0:	e019      	b.n	191f6 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   191c2:	4b11      	ldr	r3, [pc, #68]	; (19208 <prvTraceGetPriorityProperty+0x90>)
   191c4:	681c      	ldr	r4, [r3, #0]
   191c6:	1dfb      	adds	r3, r7, #7
   191c8:	781a      	ldrb	r2, [r3, #0]
   191ca:	1dbb      	adds	r3, r7, #6
   191cc:	781b      	ldrb	r3, [r3, #0]
   191ce:	0011      	movs	r1, r2
   191d0:	0018      	movs	r0, r3
   191d2:	4b0f      	ldr	r3, [pc, #60]	; (19210 <prvTraceGetPriorityProperty+0x98>)
   191d4:	4798      	blx	r3
   191d6:	0003      	movs	r3, r0
   191d8:	0018      	movs	r0, r3
   191da:	4b0b      	ldr	r3, [pc, #44]	; (19208 <prvTraceGetPriorityProperty+0x90>)
   191dc:	681a      	ldr	r2, [r3, #0]
   191de:	1dfb      	adds	r3, r7, #7
   191e0:	781b      	ldrb	r3, [r3, #0]
   191e2:	2170      	movs	r1, #112	; 0x70
   191e4:	18d3      	adds	r3, r2, r3
   191e6:	185b      	adds	r3, r3, r1
   191e8:	781b      	ldrb	r3, [r3, #0]
   191ea:	18c3      	adds	r3, r0, r3
   191ec:	3301      	adds	r3, #1
   191ee:	229c      	movs	r2, #156	; 0x9c
   191f0:	18e3      	adds	r3, r4, r3
   191f2:	189b      	adds	r3, r3, r2
   191f4:	781b      	ldrb	r3, [r3, #0]
}
   191f6:	0018      	movs	r0, r3
   191f8:	46bd      	mov	sp, r7
   191fa:	b003      	add	sp, #12
   191fc:	bd90      	pop	{r4, r7, pc}
   191fe:	46c0      	nop			; (mov r8, r8)
   19200:	00037c68 	.word	0x00037c68
   19204:	00019a5d 	.word	0x00019a5d
   19208:	20000c74 	.word	0x20000c74
   1920c:	00037cb4 	.word	0x00037cb4
   19210:	00019669 	.word	0x00019669

00019214 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19214:	b590      	push	{r4, r7, lr}
   19216:	b083      	sub	sp, #12
   19218:	af00      	add	r7, sp, #0
   1921a:	0004      	movs	r4, r0
   1921c:	0008      	movs	r0, r1
   1921e:	0011      	movs	r1, r2
   19220:	1dfb      	adds	r3, r7, #7
   19222:	1c22      	adds	r2, r4, #0
   19224:	701a      	strb	r2, [r3, #0]
   19226:	1dbb      	adds	r3, r7, #6
   19228:	1c02      	adds	r2, r0, #0
   1922a:	701a      	strb	r2, [r3, #0]
   1922c:	1d7b      	adds	r3, r7, #5
   1922e:	1c0a      	adds	r2, r1, #0
   19230:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19232:	1dfb      	adds	r3, r7, #7
   19234:	781b      	ldrb	r3, [r3, #0]
   19236:	2b08      	cmp	r3, #8
   19238:	d904      	bls.n	19244 <prvTraceSetObjectState+0x30>
   1923a:	4b1a      	ldr	r3, [pc, #104]	; (192a4 <prvTraceSetObjectState+0x90>)
   1923c:	0018      	movs	r0, r3
   1923e:	4b1a      	ldr	r3, [pc, #104]	; (192a8 <prvTraceSetObjectState+0x94>)
   19240:	4798      	blx	r3
   19242:	e02b      	b.n	1929c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19244:	4b19      	ldr	r3, [pc, #100]	; (192ac <prvTraceSetObjectState+0x98>)
   19246:	681a      	ldr	r2, [r3, #0]
   19248:	1dfb      	adds	r3, r7, #7
   1924a:	781b      	ldrb	r3, [r3, #0]
   1924c:	2164      	movs	r1, #100	; 0x64
   1924e:	18d3      	adds	r3, r2, r3
   19250:	185b      	adds	r3, r3, r1
   19252:	781b      	ldrb	r3, [r3, #0]
   19254:	1dba      	adds	r2, r7, #6
   19256:	7812      	ldrb	r2, [r2, #0]
   19258:	429a      	cmp	r2, r3
   1925a:	d904      	bls.n	19266 <prvTraceSetObjectState+0x52>
   1925c:	4b14      	ldr	r3, [pc, #80]	; (192b0 <prvTraceSetObjectState+0x9c>)
   1925e:	0018      	movs	r0, r3
   19260:	4b11      	ldr	r3, [pc, #68]	; (192a8 <prvTraceSetObjectState+0x94>)
   19262:	4798      	blx	r3
   19264:	e01a      	b.n	1929c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   19266:	4b11      	ldr	r3, [pc, #68]	; (192ac <prvTraceSetObjectState+0x98>)
   19268:	681c      	ldr	r4, [r3, #0]
   1926a:	1dfb      	adds	r3, r7, #7
   1926c:	781a      	ldrb	r2, [r3, #0]
   1926e:	1dbb      	adds	r3, r7, #6
   19270:	781b      	ldrb	r3, [r3, #0]
   19272:	0011      	movs	r1, r2
   19274:	0018      	movs	r0, r3
   19276:	4b0f      	ldr	r3, [pc, #60]	; (192b4 <prvTraceSetObjectState+0xa0>)
   19278:	4798      	blx	r3
   1927a:	0003      	movs	r3, r0
   1927c:	0018      	movs	r0, r3
   1927e:	4b0b      	ldr	r3, [pc, #44]	; (192ac <prvTraceSetObjectState+0x98>)
   19280:	681a      	ldr	r2, [r3, #0]
   19282:	1dfb      	adds	r3, r7, #7
   19284:	781b      	ldrb	r3, [r3, #0]
   19286:	2170      	movs	r1, #112	; 0x70
   19288:	18d3      	adds	r3, r2, r3
   1928a:	185b      	adds	r3, r3, r1
   1928c:	781b      	ldrb	r3, [r3, #0]
   1928e:	18c3      	adds	r3, r0, r3
   19290:	229c      	movs	r2, #156	; 0x9c
   19292:	18e3      	adds	r3, r4, r3
   19294:	189b      	adds	r3, r3, r2
   19296:	1d7a      	adds	r2, r7, #5
   19298:	7812      	ldrb	r2, [r2, #0]
   1929a:	701a      	strb	r2, [r3, #0]
}
   1929c:	46bd      	mov	sp, r7
   1929e:	b003      	add	sp, #12
   192a0:	bd90      	pop	{r4, r7, pc}
   192a2:	46c0      	nop			; (mov r8, r8)
   192a4:	00037cf4 	.word	0x00037cf4
   192a8:	00019a5d 	.word	0x00019a5d
   192ac:	20000c74 	.word	0x20000c74
   192b0:	00037d38 	.word	0x00037d38
   192b4:	00019669 	.word	0x00019669

000192b8 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   192b8:	b590      	push	{r4, r7, lr}
   192ba:	b083      	sub	sp, #12
   192bc:	af00      	add	r7, sp, #0
   192be:	0002      	movs	r2, r0
   192c0:	1dfb      	adds	r3, r7, #7
   192c2:	701a      	strb	r2, [r3, #0]
   192c4:	1dbb      	adds	r3, r7, #6
   192c6:	1c0a      	adds	r2, r1, #0
   192c8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   192ca:	1dfb      	adds	r3, r7, #7
   192cc:	781b      	ldrb	r3, [r3, #0]
   192ce:	2b08      	cmp	r3, #8
   192d0:	d905      	bls.n	192de <prvTraceGetObjectState+0x26>
   192d2:	4b1a      	ldr	r3, [pc, #104]	; (1933c <prvTraceGetObjectState+0x84>)
   192d4:	0018      	movs	r0, r3
   192d6:	4b1a      	ldr	r3, [pc, #104]	; (19340 <prvTraceGetObjectState+0x88>)
   192d8:	4798      	blx	r3
   192da:	2300      	movs	r3, #0
   192dc:	e02a      	b.n	19334 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   192de:	4b19      	ldr	r3, [pc, #100]	; (19344 <prvTraceGetObjectState+0x8c>)
   192e0:	681a      	ldr	r2, [r3, #0]
   192e2:	1dfb      	adds	r3, r7, #7
   192e4:	781b      	ldrb	r3, [r3, #0]
   192e6:	2164      	movs	r1, #100	; 0x64
   192e8:	18d3      	adds	r3, r2, r3
   192ea:	185b      	adds	r3, r3, r1
   192ec:	781b      	ldrb	r3, [r3, #0]
   192ee:	1dba      	adds	r2, r7, #6
   192f0:	7812      	ldrb	r2, [r2, #0]
   192f2:	429a      	cmp	r2, r3
   192f4:	d905      	bls.n	19302 <prvTraceGetObjectState+0x4a>
   192f6:	4b14      	ldr	r3, [pc, #80]	; (19348 <prvTraceGetObjectState+0x90>)
   192f8:	0018      	movs	r0, r3
   192fa:	4b11      	ldr	r3, [pc, #68]	; (19340 <prvTraceGetObjectState+0x88>)
   192fc:	4798      	blx	r3
   192fe:	2300      	movs	r3, #0
   19300:	e018      	b.n	19334 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   19302:	4b10      	ldr	r3, [pc, #64]	; (19344 <prvTraceGetObjectState+0x8c>)
   19304:	681c      	ldr	r4, [r3, #0]
   19306:	1dfb      	adds	r3, r7, #7
   19308:	781a      	ldrb	r2, [r3, #0]
   1930a:	1dbb      	adds	r3, r7, #6
   1930c:	781b      	ldrb	r3, [r3, #0]
   1930e:	0011      	movs	r1, r2
   19310:	0018      	movs	r0, r3
   19312:	4b0e      	ldr	r3, [pc, #56]	; (1934c <prvTraceGetObjectState+0x94>)
   19314:	4798      	blx	r3
   19316:	0003      	movs	r3, r0
   19318:	0018      	movs	r0, r3
   1931a:	4b0a      	ldr	r3, [pc, #40]	; (19344 <prvTraceGetObjectState+0x8c>)
   1931c:	681a      	ldr	r2, [r3, #0]
   1931e:	1dfb      	adds	r3, r7, #7
   19320:	781b      	ldrb	r3, [r3, #0]
   19322:	2170      	movs	r1, #112	; 0x70
   19324:	18d3      	adds	r3, r2, r3
   19326:	185b      	adds	r3, r3, r1
   19328:	781b      	ldrb	r3, [r3, #0]
   1932a:	18c3      	adds	r3, r0, r3
   1932c:	229c      	movs	r2, #156	; 0x9c
   1932e:	18e3      	adds	r3, r4, r3
   19330:	189b      	adds	r3, r3, r2
   19332:	781b      	ldrb	r3, [r3, #0]
}
   19334:	0018      	movs	r0, r3
   19336:	46bd      	mov	sp, r7
   19338:	b003      	add	sp, #12
   1933a:	bd90      	pop	{r4, r7, pc}
   1933c:	00037d74 	.word	0x00037d74
   19340:	00019a5d 	.word	0x00019a5d
   19344:	20000c74 	.word	0x20000c74
   19348:	00037db8 	.word	0x00037db8
   1934c:	00019669 	.word	0x00019669

00019350 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   19350:	b590      	push	{r4, r7, lr}
   19352:	b083      	sub	sp, #12
   19354:	af00      	add	r7, sp, #0
   19356:	0002      	movs	r2, r0
   19358:	1dfb      	adds	r3, r7, #7
   1935a:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   1935c:	4b11      	ldr	r3, [pc, #68]	; (193a4 <prvTraceSetTaskInstanceFinished+0x54>)
   1935e:	681b      	ldr	r3, [r3, #0]
   19360:	2267      	movs	r2, #103	; 0x67
   19362:	5c9b      	ldrb	r3, [r3, r2]
   19364:	1dfa      	adds	r2, r7, #7
   19366:	7812      	ldrb	r2, [r2, #0]
   19368:	429a      	cmp	r2, r3
   1936a:	d904      	bls.n	19376 <prvTraceSetTaskInstanceFinished+0x26>
   1936c:	4b0e      	ldr	r3, [pc, #56]	; (193a8 <prvTraceSetTaskInstanceFinished+0x58>)
   1936e:	0018      	movs	r0, r3
   19370:	4b0e      	ldr	r3, [pc, #56]	; (193ac <prvTraceSetTaskInstanceFinished+0x5c>)
   19372:	4798      	blx	r3
   19374:	e013      	b.n	1939e <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   19376:	4b0b      	ldr	r3, [pc, #44]	; (193a4 <prvTraceSetTaskInstanceFinished+0x54>)
   19378:	681c      	ldr	r4, [r3, #0]
   1937a:	1dfb      	adds	r3, r7, #7
   1937c:	781b      	ldrb	r3, [r3, #0]
   1937e:	2103      	movs	r1, #3
   19380:	0018      	movs	r0, r3
   19382:	4b0b      	ldr	r3, [pc, #44]	; (193b0 <prvTraceSetTaskInstanceFinished+0x60>)
   19384:	4798      	blx	r3
   19386:	0003      	movs	r3, r0
   19388:	0019      	movs	r1, r3
   1938a:	4b06      	ldr	r3, [pc, #24]	; (193a4 <prvTraceSetTaskInstanceFinished+0x54>)
   1938c:	681b      	ldr	r3, [r3, #0]
   1938e:	2273      	movs	r2, #115	; 0x73
   19390:	5c9b      	ldrb	r3, [r3, r2]
   19392:	18cb      	adds	r3, r1, r3
   19394:	229c      	movs	r2, #156	; 0x9c
   19396:	18e3      	adds	r3, r4, r3
   19398:	189b      	adds	r3, r3, r2
   1939a:	2200      	movs	r2, #0
   1939c:	701a      	strb	r2, [r3, #0]
#endif
}
   1939e:	46bd      	mov	sp, r7
   193a0:	b003      	add	sp, #12
   193a2:	bd90      	pop	{r4, r7, pc}
   193a4:	20000c74 	.word	0x20000c74
   193a8:	00037df4 	.word	0x00037df4
   193ac:	00019a5d 	.word	0x00019a5d
   193b0:	00019669 	.word	0x00019669

000193b4 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   193b4:	b580      	push	{r7, lr}
   193b6:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   193b8:	4b75      	ldr	r3, [pc, #468]	; (19590 <prvTraceInitTraceData+0x1dc>)
   193ba:	681b      	ldr	r3, [r3, #0]
   193bc:	2b00      	cmp	r3, #0
   193be:	d103      	bne.n	193c8 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   193c0:	4b73      	ldr	r3, [pc, #460]	; (19590 <prvTraceInitTraceData+0x1dc>)
   193c2:	4a74      	ldr	r2, [pc, #464]	; (19594 <prvTraceInitTraceData+0x1e0>)
   193c4:	601a      	str	r2, [r3, #0]
   193c6:	e006      	b.n	193d6 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   193c8:	4b71      	ldr	r3, [pc, #452]	; (19590 <prvTraceInitTraceData+0x1dc>)
   193ca:	681b      	ldr	r3, [r3, #0]
   193cc:	781b      	ldrb	r3, [r3, #0]
   193ce:	b2db      	uxtb	r3, r3
   193d0:	2b01      	cmp	r3, #1
   193d2:	d100      	bne.n	193d6 <prvTraceInitTraceData+0x22>
   193d4:	e0d8      	b.n	19588 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   193d6:	4b70      	ldr	r3, [pc, #448]	; (19598 <prvTraceInitTraceData+0x1e4>)
   193d8:	681a      	ldr	r2, [r3, #0]
   193da:	4b70      	ldr	r3, [pc, #448]	; (1959c <prvTraceInitTraceData+0x1e8>)
   193dc:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   193de:	4b6c      	ldr	r3, [pc, #432]	; (19590 <prvTraceInitTraceData+0x1dc>)
   193e0:	6818      	ldr	r0, [r3, #0]
   193e2:	23bd      	movs	r3, #189	; 0xbd
   193e4:	011b      	lsls	r3, r3, #4
   193e6:	001a      	movs	r2, r3
   193e8:	2100      	movs	r1, #0
   193ea:	4b6d      	ldr	r3, [pc, #436]	; (195a0 <prvTraceInitTraceData+0x1ec>)
   193ec:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   193ee:	4b68      	ldr	r3, [pc, #416]	; (19590 <prvTraceInitTraceData+0x1dc>)
   193f0:	681b      	ldr	r3, [r3, #0]
   193f2:	4a6c      	ldr	r2, [pc, #432]	; (195a4 <prvTraceInitTraceData+0x1f0>)
   193f4:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   193f6:	4b66      	ldr	r3, [pc, #408]	; (19590 <prvTraceInitTraceData+0x1dc>)
   193f8:	681b      	ldr	r3, [r3, #0]
   193fa:	2205      	movs	r2, #5
   193fc:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   193fe:	4b64      	ldr	r3, [pc, #400]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19400:	681b      	ldr	r3, [r3, #0]
   19402:	2200      	movs	r2, #0
   19404:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   19406:	4b62      	ldr	r3, [pc, #392]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19408:	681b      	ldr	r3, [r3, #0]
   1940a:	22bd      	movs	r2, #189	; 0xbd
   1940c:	0112      	lsls	r2, r2, #4
   1940e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   19410:	4b5f      	ldr	r3, [pc, #380]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19412:	681b      	ldr	r3, [r3, #0]
   19414:	2296      	movs	r2, #150	; 0x96
   19416:	0052      	lsls	r2, r2, #1
   19418:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1941a:	4b5d      	ldr	r3, [pc, #372]	; (19590 <prvTraceInitTraceData+0x1dc>)
   1941c:	681b      	ldr	r3, [r3, #0]
   1941e:	4a62      	ldr	r2, [pc, #392]	; (195a8 <prvTraceInitTraceData+0x1f4>)
   19420:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   19422:	4b5b      	ldr	r3, [pc, #364]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19424:	681b      	ldr	r3, [r3, #0]
   19426:	2200      	movs	r2, #0
   19428:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1942a:	4b59      	ldr	r3, [pc, #356]	; (19590 <prvTraceInitTraceData+0x1dc>)
   1942c:	681b      	ldr	r3, [r3, #0]
   1942e:	2200      	movs	r2, #0
   19430:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   19432:	4b5e      	ldr	r3, [pc, #376]	; (195ac <prvTraceInitTraceData+0x1f8>)
   19434:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   19436:	4b56      	ldr	r3, [pc, #344]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19438:	681b      	ldr	r3, [r3, #0]
   1943a:	4a5d      	ldr	r2, [pc, #372]	; (195b0 <prvTraceInitTraceData+0x1fc>)
   1943c:	495d      	ldr	r1, [pc, #372]	; (195b4 <prvTraceInitTraceData+0x200>)
   1943e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   19440:	4b53      	ldr	r3, [pc, #332]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19442:	681a      	ldr	r2, [r3, #0]
   19444:	23ac      	movs	r3, #172	; 0xac
   19446:	00db      	lsls	r3, r3, #3
   19448:	21c8      	movs	r1, #200	; 0xc8
   1944a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1944c:	4b50      	ldr	r3, [pc, #320]	; (19590 <prvTraceInitTraceData+0x1dc>)
   1944e:	681b      	ldr	r3, [r3, #0]
   19450:	4a59      	ldr	r2, [pc, #356]	; (195b8 <prvTraceInitTraceData+0x204>)
   19452:	2101      	movs	r1, #1
   19454:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   19456:	4b4e      	ldr	r3, [pc, #312]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19458:	681a      	ldr	r2, [r3, #0]
   1945a:	23d7      	movs	r3, #215	; 0xd7
   1945c:	00db      	lsls	r3, r3, #3
   1945e:	4957      	ldr	r1, [pc, #348]	; (195bc <prvTraceInitTraceData+0x208>)
   19460:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   19462:	4b4b      	ldr	r3, [pc, #300]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19464:	681b      	ldr	r3, [r3, #0]
   19466:	4a56      	ldr	r2, [pc, #344]	; (195c0 <prvTraceInitTraceData+0x20c>)
   19468:	4694      	mov	ip, r2
   1946a:	4463      	add	r3, ip
   1946c:	4955      	ldr	r1, [pc, #340]	; (195c4 <prvTraceInitTraceData+0x210>)
   1946e:	2250      	movs	r2, #80	; 0x50
   19470:	0018      	movs	r0, r3
   19472:	4b55      	ldr	r3, [pc, #340]	; (195c8 <prvTraceInitTraceData+0x214>)
   19474:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   19476:	4b46      	ldr	r3, [pc, #280]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19478:	681b      	ldr	r3, [r3, #0]
   1947a:	4a54      	ldr	r2, [pc, #336]	; (195cc <prvTraceInitTraceData+0x218>)
   1947c:	4954      	ldr	r1, [pc, #336]	; (195d0 <prvTraceInitTraceData+0x21c>)
   1947e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   19480:	4b43      	ldr	r3, [pc, #268]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19482:	681b      	ldr	r3, [r3, #0]
   19484:	4a53      	ldr	r2, [pc, #332]	; (195d4 <prvTraceInitTraceData+0x220>)
   19486:	210a      	movs	r1, #10
   19488:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   1948a:	4b41      	ldr	r3, [pc, #260]	; (19590 <prvTraceInitTraceData+0x1dc>)
   1948c:	681b      	ldr	r3, [r3, #0]
   1948e:	4a52      	ldr	r2, [pc, #328]	; (195d8 <prvTraceInitTraceData+0x224>)
   19490:	210b      	movs	r1, #11
   19492:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   19494:	4b3e      	ldr	r3, [pc, #248]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19496:	681b      	ldr	r3, [r3, #0]
   19498:	4a50      	ldr	r2, [pc, #320]	; (195dc <prvTraceInitTraceData+0x228>)
   1949a:	210c      	movs	r1, #12
   1949c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1949e:	4b3c      	ldr	r3, [pc, #240]	; (19590 <prvTraceInitTraceData+0x1dc>)
   194a0:	681b      	ldr	r3, [r3, #0]
   194a2:	4a4f      	ldr	r2, [pc, #316]	; (195e0 <prvTraceInitTraceData+0x22c>)
   194a4:	210d      	movs	r1, #13
   194a6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   194a8:	4b39      	ldr	r3, [pc, #228]	; (19590 <prvTraceInitTraceData+0x1dc>)
   194aa:	681b      	ldr	r3, [r3, #0]
   194ac:	4a4d      	ldr	r2, [pc, #308]	; (195e4 <prvTraceInitTraceData+0x230>)
   194ae:	2171      	movs	r1, #113	; 0x71
   194b0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   194b2:	4b37      	ldr	r3, [pc, #220]	; (19590 <prvTraceInitTraceData+0x1dc>)
   194b4:	681b      	ldr	r3, [r3, #0]
   194b6:	4a4c      	ldr	r2, [pc, #304]	; (195e8 <prvTraceInitTraceData+0x234>)
   194b8:	2172      	movs	r1, #114	; 0x72
   194ba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   194bc:	4b34      	ldr	r3, [pc, #208]	; (19590 <prvTraceInitTraceData+0x1dc>)
   194be:	681b      	ldr	r3, [r3, #0]
   194c0:	4a4a      	ldr	r2, [pc, #296]	; (195ec <prvTraceInitTraceData+0x238>)
   194c2:	2173      	movs	r1, #115	; 0x73
   194c4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   194c6:	4b32      	ldr	r3, [pc, #200]	; (19590 <prvTraceInitTraceData+0x1dc>)
   194c8:	681b      	ldr	r3, [r3, #0]
   194ca:	4a49      	ldr	r2, [pc, #292]	; (195f0 <prvTraceInitTraceData+0x23c>)
   194cc:	2174      	movs	r1, #116	; 0x74
   194ce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   194d0:	4b2f      	ldr	r3, [pc, #188]	; (19590 <prvTraceInitTraceData+0x1dc>)
   194d2:	681b      	ldr	r3, [r3, #0]
   194d4:	4a47      	ldr	r2, [pc, #284]	; (195f4 <prvTraceInitTraceData+0x240>)
   194d6:	21f1      	movs	r1, #241	; 0xf1
   194d8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   194da:	4b2d      	ldr	r3, [pc, #180]	; (19590 <prvTraceInitTraceData+0x1dc>)
   194dc:	681b      	ldr	r3, [r3, #0]
   194de:	4a46      	ldr	r2, [pc, #280]	; (195f8 <prvTraceInitTraceData+0x244>)
   194e0:	21f2      	movs	r1, #242	; 0xf2
   194e2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   194e4:	4b2a      	ldr	r3, [pc, #168]	; (19590 <prvTraceInitTraceData+0x1dc>)
   194e6:	681b      	ldr	r3, [r3, #0]
   194e8:	4a44      	ldr	r2, [pc, #272]	; (195fc <prvTraceInitTraceData+0x248>)
   194ea:	21f3      	movs	r1, #243	; 0xf3
   194ec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   194ee:	4b28      	ldr	r3, [pc, #160]	; (19590 <prvTraceInitTraceData+0x1dc>)
   194f0:	681b      	ldr	r3, [r3, #0]
   194f2:	4a43      	ldr	r2, [pc, #268]	; (19600 <prvTraceInitTraceData+0x24c>)
   194f4:	21f4      	movs	r1, #244	; 0xf4
   194f6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   194f8:	4b42      	ldr	r3, [pc, #264]	; (19604 <prvTraceInitTraceData+0x250>)
   194fa:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   194fc:	4b24      	ldr	r3, [pc, #144]	; (19590 <prvTraceInitTraceData+0x1dc>)
   194fe:	681b      	ldr	r3, [r3, #0]
   19500:	22f4      	movs	r2, #244	; 0xf4
   19502:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   19504:	4b22      	ldr	r3, [pc, #136]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19506:	681b      	ldr	r3, [r3, #0]
   19508:	22f3      	movs	r2, #243	; 0xf3
   1950a:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1950c:	4b20      	ldr	r3, [pc, #128]	; (19590 <prvTraceInitTraceData+0x1dc>)
   1950e:	681b      	ldr	r3, [r3, #0]
   19510:	22f2      	movs	r2, #242	; 0xf2
   19512:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   19514:	4b1e      	ldr	r3, [pc, #120]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19516:	681b      	ldr	r3, [r3, #0]
   19518:	22f1      	movs	r2, #241	; 0xf1
   1951a:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1951c:	4b1c      	ldr	r3, [pc, #112]	; (19590 <prvTraceInitTraceData+0x1dc>)
   1951e:	681b      	ldr	r3, [r3, #0]
   19520:	2274      	movs	r2, #116	; 0x74
   19522:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   19524:	4b1a      	ldr	r3, [pc, #104]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19526:	681b      	ldr	r3, [r3, #0]
   19528:	2273      	movs	r2, #115	; 0x73
   1952a:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1952c:	4b18      	ldr	r3, [pc, #96]	; (19590 <prvTraceInitTraceData+0x1dc>)
   1952e:	681b      	ldr	r3, [r3, #0]
   19530:	2272      	movs	r2, #114	; 0x72
   19532:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   19534:	4b16      	ldr	r3, [pc, #88]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19536:	681b      	ldr	r3, [r3, #0]
   19538:	2271      	movs	r2, #113	; 0x71
   1953a:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1953c:	4b14      	ldr	r3, [pc, #80]	; (19590 <prvTraceInitTraceData+0x1dc>)
   1953e:	681b      	ldr	r3, [r3, #0]
   19540:	2204      	movs	r2, #4
   19542:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   19544:	4b12      	ldr	r3, [pc, #72]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19546:	681b      	ldr	r3, [r3, #0]
   19548:	2203      	movs	r2, #3
   1954a:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1954c:	4b10      	ldr	r3, [pc, #64]	; (19590 <prvTraceInitTraceData+0x1dc>)
   1954e:	681b      	ldr	r3, [r3, #0]
   19550:	2202      	movs	r2, #2
   19552:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   19554:	4b0e      	ldr	r3, [pc, #56]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19556:	681b      	ldr	r3, [r3, #0]
   19558:	2201      	movs	r2, #1
   1955a:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1955c:	4b2a      	ldr	r3, [pc, #168]	; (19608 <prvTraceInitTraceData+0x254>)
   1955e:	681b      	ldr	r3, [r3, #0]
   19560:	2b00      	cmp	r3, #0
   19562:	d012      	beq.n	1958a <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   19564:	4b0a      	ldr	r3, [pc, #40]	; (19590 <prvTraceInitTraceData+0x1dc>)
   19566:	681b      	ldr	r3, [r3, #0]
   19568:	4a15      	ldr	r2, [pc, #84]	; (195c0 <prvTraceInitTraceData+0x20c>)
   1956a:	1898      	adds	r0, r3, r2
   1956c:	4b26      	ldr	r3, [pc, #152]	; (19608 <prvTraceInitTraceData+0x254>)
   1956e:	681b      	ldr	r3, [r3, #0]
   19570:	2250      	movs	r2, #80	; 0x50
   19572:	0019      	movs	r1, r3
   19574:	4b14      	ldr	r3, [pc, #80]	; (195c8 <prvTraceInitTraceData+0x214>)
   19576:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   19578:	4b05      	ldr	r3, [pc, #20]	; (19590 <prvTraceInitTraceData+0x1dc>)
   1957a:	681b      	ldr	r3, [r3, #0]
   1957c:	4a23      	ldr	r2, [pc, #140]	; (1960c <prvTraceInitTraceData+0x258>)
   1957e:	2101      	movs	r1, #1
   19580:	5099      	str	r1, [r3, r2]
		vTraceStop();
   19582:	4b23      	ldr	r3, [pc, #140]	; (19610 <prvTraceInitTraceData+0x25c>)
   19584:	4798      	blx	r3
   19586:	e000      	b.n	1958a <prvTraceInitTraceData+0x1d6>
			return;
   19588:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1958a:	46bd      	mov	sp, r7
   1958c:	bd80      	pop	{r7, pc}
   1958e:	46c0      	nop			; (mov r8, r8)
   19590:	20000c74 	.word	0x20000c74
   19594:	2000487c 	.word	0x2000487c
   19598:	e000e018 	.word	0xe000e018
   1959c:	2000544c 	.word	0x2000544c
   195a0:	00034a5f 	.word	0x00034a5f
   195a4:	00001aa1 	.word	0x00001aa1
   195a8:	f0f0f0f0 	.word	0xf0f0f0f0
   195ac:	00018519 	.word	0x00018519
   195b0:	0000055c 	.word	0x0000055c
   195b4:	f1f1f1f1 	.word	0xf1f1f1f1
   195b8:	00000564 	.word	0x00000564
   195bc:	f2f2f2f2 	.word	0xf2f2f2f2
   195c0:	000006bc 	.word	0x000006bc
   195c4:	00037e3c 	.word	0x00037e3c
   195c8:	00019929 	.word	0x00019929
   195cc:	0000070c 	.word	0x0000070c
   195d0:	f3f3f3f3 	.word	0xf3f3f3f3
   195d4:	00000bc4 	.word	0x00000bc4
   195d8:	00000bc5 	.word	0x00000bc5
   195dc:	00000bc6 	.word	0x00000bc6
   195e0:	00000bc7 	.word	0x00000bc7
   195e4:	00000bc8 	.word	0x00000bc8
   195e8:	00000bc9 	.word	0x00000bc9
   195ec:	00000bca 	.word	0x00000bca
   195f0:	00000bcb 	.word	0x00000bcb
   195f4:	00000bcc 	.word	0x00000bcc
   195f8:	00000bcd 	.word	0x00000bcd
   195fc:	00000bce 	.word	0x00000bce
   19600:	00000bcf 	.word	0x00000bcf
   19604:	000186b9 	.word	0x000186b9
   19608:	20000bd4 	.word	0x20000bd4
   1960c:	000006b4 	.word	0x000006b4
   19610:	00018921 	.word	0x00018921

00019614 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   19614:	b580      	push	{r7, lr}
   19616:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   19618:	4b10      	ldr	r3, [pc, #64]	; (1965c <prvTraceNextFreeEventBufferSlot+0x48>)
   1961a:	681b      	ldr	r3, [r3, #0]
   1961c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1961e:	2b00      	cmp	r3, #0
   19620:	d101      	bne.n	19626 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   19622:	2300      	movs	r3, #0
   19624:	e017      	b.n	19656 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   19626:	4b0d      	ldr	r3, [pc, #52]	; (1965c <prvTraceNextFreeEventBufferSlot+0x48>)
   19628:	681b      	ldr	r3, [r3, #0]
   1962a:	69da      	ldr	r2, [r3, #28]
   1962c:	232c      	movs	r3, #44	; 0x2c
   1962e:	33ff      	adds	r3, #255	; 0xff
   19630:	429a      	cmp	r2, r3
   19632:	d905      	bls.n	19640 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   19634:	4b0a      	ldr	r3, [pc, #40]	; (19660 <prvTraceNextFreeEventBufferSlot+0x4c>)
   19636:	0018      	movs	r0, r3
   19638:	4b0a      	ldr	r3, [pc, #40]	; (19664 <prvTraceNextFreeEventBufferSlot+0x50>)
   1963a:	4798      	blx	r3
		return NULL;
   1963c:	2300      	movs	r3, #0
   1963e:	e00a      	b.n	19656 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   19640:	4b06      	ldr	r3, [pc, #24]	; (1965c <prvTraceNextFreeEventBufferSlot+0x48>)
   19642:	681a      	ldr	r2, [r3, #0]
   19644:	4b05      	ldr	r3, [pc, #20]	; (1965c <prvTraceNextFreeEventBufferSlot+0x48>)
   19646:	681b      	ldr	r3, [r3, #0]
   19648:	69db      	ldr	r3, [r3, #28]
   1964a:	009b      	lsls	r3, r3, #2
   1964c:	21e2      	movs	r1, #226	; 0xe2
   1964e:	00c9      	lsls	r1, r1, #3
   19650:	468c      	mov	ip, r1
   19652:	4463      	add	r3, ip
   19654:	18d3      	adds	r3, r2, r3
}
   19656:	0018      	movs	r0, r3
   19658:	46bd      	mov	sp, r7
   1965a:	bd80      	pop	{r7, pc}
   1965c:	20000c74 	.word	0x20000c74
   19660:	00037e50 	.word	0x00037e50
   19664:	00019a5d 	.word	0x00019a5d

00019668 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   19668:	b580      	push	{r7, lr}
   1966a:	b082      	sub	sp, #8
   1966c:	af00      	add	r7, sp, #0
   1966e:	0002      	movs	r2, r0
   19670:	1dfb      	adds	r3, r7, #7
   19672:	701a      	strb	r2, [r3, #0]
   19674:	1dbb      	adds	r3, r7, #6
   19676:	1c0a      	adds	r2, r1, #0
   19678:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1967a:	1dbb      	adds	r3, r7, #6
   1967c:	781b      	ldrb	r3, [r3, #0]
   1967e:	2b08      	cmp	r3, #8
   19680:	d905      	bls.n	1968e <uiIndexOfObject+0x26>
   19682:	4b2a      	ldr	r3, [pc, #168]	; (1972c <uiIndexOfObject+0xc4>)
   19684:	0018      	movs	r0, r3
   19686:	4b2a      	ldr	r3, [pc, #168]	; (19730 <uiIndexOfObject+0xc8>)
   19688:	4798      	blx	r3
   1968a:	2300      	movs	r3, #0
   1968c:	e049      	b.n	19722 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1968e:	1dfb      	adds	r3, r7, #7
   19690:	781b      	ldrb	r3, [r3, #0]
   19692:	2b00      	cmp	r3, #0
   19694:	d00b      	beq.n	196ae <uiIndexOfObject+0x46>
   19696:	4b27      	ldr	r3, [pc, #156]	; (19734 <uiIndexOfObject+0xcc>)
   19698:	681a      	ldr	r2, [r3, #0]
   1969a:	1dbb      	adds	r3, r7, #6
   1969c:	781b      	ldrb	r3, [r3, #0]
   1969e:	2164      	movs	r1, #100	; 0x64
   196a0:	18d3      	adds	r3, r2, r3
   196a2:	185b      	adds	r3, r3, r1
   196a4:	781b      	ldrb	r3, [r3, #0]
   196a6:	1dfa      	adds	r2, r7, #7
   196a8:	7812      	ldrb	r2, [r2, #0]
   196aa:	429a      	cmp	r2, r3
   196ac:	d905      	bls.n	196ba <uiIndexOfObject+0x52>
   196ae:	4b22      	ldr	r3, [pc, #136]	; (19738 <uiIndexOfObject+0xd0>)
   196b0:	0018      	movs	r0, r3
   196b2:	4b1f      	ldr	r3, [pc, #124]	; (19730 <uiIndexOfObject+0xc8>)
   196b4:	4798      	blx	r3
   196b6:	2300      	movs	r3, #0
   196b8:	e033      	b.n	19722 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   196ba:	1dbb      	adds	r3, r7, #6
   196bc:	781b      	ldrb	r3, [r3, #0]
   196be:	2b08      	cmp	r3, #8
   196c0:	d82a      	bhi.n	19718 <uiIndexOfObject+0xb0>
   196c2:	1dfb      	adds	r3, r7, #7
   196c4:	781b      	ldrb	r3, [r3, #0]
   196c6:	2b00      	cmp	r3, #0
   196c8:	d026      	beq.n	19718 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   196ca:	4b1a      	ldr	r3, [pc, #104]	; (19734 <uiIndexOfObject+0xcc>)
   196cc:	681a      	ldr	r2, [r3, #0]
   196ce:	1dbb      	adds	r3, r7, #6
   196d0:	781b      	ldrb	r3, [r3, #0]
   196d2:	2164      	movs	r1, #100	; 0x64
   196d4:	18d3      	adds	r3, r2, r3
   196d6:	185b      	adds	r3, r3, r1
   196d8:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   196da:	1dfa      	adds	r2, r7, #7
   196dc:	7812      	ldrb	r2, [r2, #0]
   196de:	429a      	cmp	r2, r3
   196e0:	d81a      	bhi.n	19718 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   196e2:	4b14      	ldr	r3, [pc, #80]	; (19734 <uiIndexOfObject+0xcc>)
   196e4:	681a      	ldr	r2, [r3, #0]
   196e6:	1dbb      	adds	r3, r7, #6
   196e8:	781b      	ldrb	r3, [r3, #0]
   196ea:	3340      	adds	r3, #64	; 0x40
   196ec:	005b      	lsls	r3, r3, #1
   196ee:	18d3      	adds	r3, r2, r3
   196f0:	3308      	adds	r3, #8
   196f2:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   196f4:	4b0f      	ldr	r3, [pc, #60]	; (19734 <uiIndexOfObject+0xcc>)
   196f6:	6819      	ldr	r1, [r3, #0]
   196f8:	1dbb      	adds	r3, r7, #6
   196fa:	781b      	ldrb	r3, [r3, #0]
   196fc:	207c      	movs	r0, #124	; 0x7c
   196fe:	18cb      	adds	r3, r1, r3
   19700:	181b      	adds	r3, r3, r0
   19702:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19704:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19706:	1df9      	adds	r1, r7, #7
   19708:	7809      	ldrb	r1, [r1, #0]
   1970a:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1970c:	b289      	uxth	r1, r1
   1970e:	434b      	muls	r3, r1
   19710:	b29b      	uxth	r3, r3
   19712:	18d3      	adds	r3, r2, r3
   19714:	b29b      	uxth	r3, r3
   19716:	e004      	b.n	19722 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   19718:	4b08      	ldr	r3, [pc, #32]	; (1973c <uiIndexOfObject+0xd4>)
   1971a:	0018      	movs	r0, r3
   1971c:	4b04      	ldr	r3, [pc, #16]	; (19730 <uiIndexOfObject+0xc8>)
   1971e:	4798      	blx	r3
	return 0;
   19720:	2300      	movs	r3, #0
}
   19722:	0018      	movs	r0, r3
   19724:	46bd      	mov	sp, r7
   19726:	b002      	add	sp, #8
   19728:	bd80      	pop	{r7, pc}
   1972a:	46c0      	nop			; (mov r8, r8)
   1972c:	00037e78 	.word	0x00037e78
   19730:	00019a5d 	.word	0x00019a5d
   19734:	20000c74 	.word	0x20000c74
   19738:	00037eb8 	.word	0x00037eb8
   1973c:	00037ef8 	.word	0x00037ef8

00019740 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   19740:	b580      	push	{r7, lr}
   19742:	b088      	sub	sp, #32
   19744:	af00      	add	r7, sp, #0
   19746:	0002      	movs	r2, r0
   19748:	1dfb      	adds	r3, r7, #7
   1974a:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1974c:	4b5a      	ldr	r3, [pc, #360]	; (198b8 <prvTraceGetObjectHandle+0x178>)
   1974e:	681b      	ldr	r3, [r3, #0]
   19750:	2b00      	cmp	r3, #0
   19752:	d105      	bne.n	19760 <prvTraceGetObjectHandle+0x20>
   19754:	4b59      	ldr	r3, [pc, #356]	; (198bc <prvTraceGetObjectHandle+0x17c>)
   19756:	0018      	movs	r0, r3
   19758:	4b59      	ldr	r3, [pc, #356]	; (198c0 <prvTraceGetObjectHandle+0x180>)
   1975a:	4798      	blx	r3
   1975c:	2300      	movs	r3, #0
   1975e:	e0a7      	b.n	198b0 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   19760:	1dfb      	adds	r3, r7, #7
   19762:	781b      	ldrb	r3, [r3, #0]
   19764:	2b08      	cmp	r3, #8
   19766:	d905      	bls.n	19774 <prvTraceGetObjectHandle+0x34>
   19768:	4b56      	ldr	r3, [pc, #344]	; (198c4 <prvTraceGetObjectHandle+0x184>)
   1976a:	0018      	movs	r0, r3
   1976c:	4b54      	ldr	r3, [pc, #336]	; (198c0 <prvTraceGetObjectHandle+0x180>)
   1976e:	4798      	blx	r3
   19770:	2300      	movs	r3, #0
   19772:	e09d      	b.n	198b0 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19774:	f3ef 8310 	mrs	r3, PRIMASK
   19778:	60fb      	str	r3, [r7, #12]
  return(result);
   1977a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1977c:	61bb      	str	r3, [r7, #24]
   1977e:	2301      	movs	r3, #1
   19780:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19782:	693b      	ldr	r3, [r7, #16]
   19784:	f383 8810 	msr	PRIMASK, r3
   19788:	4b4f      	ldr	r3, [pc, #316]	; (198c8 <prvTraceGetObjectHandle+0x188>)
   1978a:	681b      	ldr	r3, [r3, #0]
   1978c:	1c5a      	adds	r2, r3, #1
   1978e:	4b4e      	ldr	r3, [pc, #312]	; (198c8 <prvTraceGetObjectHandle+0x188>)
   19790:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   19792:	1dfb      	adds	r3, r7, #7
   19794:	781a      	ldrb	r2, [r3, #0]
   19796:	4b4d      	ldr	r3, [pc, #308]	; (198cc <prvTraceGetObjectHandle+0x18c>)
   19798:	0052      	lsls	r2, r2, #1
   1979a:	5ad3      	ldrh	r3, [r2, r3]
   1979c:	001a      	movs	r2, r3
   1979e:	4b4c      	ldr	r3, [pc, #304]	; (198d0 <prvTraceGetObjectHandle+0x190>)
   197a0:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   197a2:	4b4b      	ldr	r3, [pc, #300]	; (198d0 <prvTraceGetObjectHandle+0x190>)
   197a4:	681b      	ldr	r3, [r3, #0]
   197a6:	4a49      	ldr	r2, [pc, #292]	; (198cc <prvTraceGetObjectHandle+0x18c>)
   197a8:	2148      	movs	r1, #72	; 0x48
   197aa:	18d3      	adds	r3, r2, r3
   197ac:	185b      	adds	r3, r3, r1
   197ae:	781b      	ldrb	r3, [r3, #0]
   197b0:	2b00      	cmp	r3, #0
   197b2:	d117      	bne.n	197e4 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   197b4:	4b46      	ldr	r3, [pc, #280]	; (198d0 <prvTraceGetObjectHandle+0x190>)
   197b6:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   197b8:	4b45      	ldr	r3, [pc, #276]	; (198d0 <prvTraceGetObjectHandle+0x190>)
   197ba:	681b      	ldr	r3, [r3, #0]
   197bc:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   197be:	1dfb      	adds	r3, r7, #7
   197c0:	781b      	ldrb	r3, [r3, #0]
   197c2:	4842      	ldr	r0, [pc, #264]	; (198cc <prvTraceGetObjectHandle+0x18c>)
   197c4:	3308      	adds	r3, #8
   197c6:	005b      	lsls	r3, r3, #1
   197c8:	18c3      	adds	r3, r0, r3
   197ca:	3302      	adds	r3, #2
   197cc:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   197ce:	b2db      	uxtb	r3, r3
   197d0:	1acb      	subs	r3, r1, r3
   197d2:	b2db      	uxtb	r3, r3
   197d4:	3301      	adds	r3, #1
   197d6:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   197d8:	4b3c      	ldr	r3, [pc, #240]	; (198cc <prvTraceGetObjectHandle+0x18c>)
   197da:	2148      	movs	r1, #72	; 0x48
   197dc:	189b      	adds	r3, r3, r2
   197de:	185b      	adds	r3, r3, r1
   197e0:	1c02      	adds	r2, r0, #0
   197e2:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   197e4:	4b3a      	ldr	r3, [pc, #232]	; (198d0 <prvTraceGetObjectHandle+0x190>)
   197e6:	681a      	ldr	r2, [r3, #0]
   197e8:	231f      	movs	r3, #31
   197ea:	18fb      	adds	r3, r7, r3
   197ec:	4937      	ldr	r1, [pc, #220]	; (198cc <prvTraceGetObjectHandle+0x18c>)
   197ee:	2048      	movs	r0, #72	; 0x48
   197f0:	188a      	adds	r2, r1, r2
   197f2:	1812      	adds	r2, r2, r0
   197f4:	7812      	ldrb	r2, [r2, #0]
   197f6:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   197f8:	1dfb      	adds	r3, r7, #7
   197fa:	781a      	ldrb	r2, [r3, #0]
   197fc:	4b33      	ldr	r3, [pc, #204]	; (198cc <prvTraceGetObjectHandle+0x18c>)
   197fe:	0052      	lsls	r2, r2, #1
   19800:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   19802:	1dfb      	adds	r3, r7, #7
   19804:	781b      	ldrb	r3, [r3, #0]
   19806:	4931      	ldr	r1, [pc, #196]	; (198cc <prvTraceGetObjectHandle+0x18c>)
   19808:	3310      	adds	r3, #16
   1980a:	005b      	lsls	r3, r3, #1
   1980c:	18cb      	adds	r3, r1, r3
   1980e:	3304      	adds	r3, #4
   19810:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19812:	429a      	cmp	r2, r3
   19814:	d90d      	bls.n	19832 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19816:	1dfb      	adds	r3, r7, #7
   19818:	781b      	ldrb	r3, [r3, #0]
   1981a:	0018      	movs	r0, r3
   1981c:	4b2d      	ldr	r3, [pc, #180]	; (198d4 <prvTraceGetObjectHandle+0x194>)
   1981e:	4798      	blx	r3
   19820:	0003      	movs	r3, r0
   19822:	0018      	movs	r0, r3
   19824:	4b26      	ldr	r3, [pc, #152]	; (198c0 <prvTraceGetObjectHandle+0x180>)
   19826:	4798      	blx	r3
		handle = 0;
   19828:	231f      	movs	r3, #31
   1982a:	18fb      	adds	r3, r7, r3
   1982c:	2200      	movs	r2, #0
   1982e:	701a      	strb	r2, [r3, #0]
   19830:	e031      	b.n	19896 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   19832:	1dfb      	adds	r3, r7, #7
   19834:	781b      	ldrb	r3, [r3, #0]
   19836:	4a25      	ldr	r2, [pc, #148]	; (198cc <prvTraceGetObjectHandle+0x18c>)
   19838:	0059      	lsls	r1, r3, #1
   1983a:	5a8a      	ldrh	r2, [r1, r2]
   1983c:	3201      	adds	r2, #1
   1983e:	b291      	uxth	r1, r2
   19840:	4a22      	ldr	r2, [pc, #136]	; (198cc <prvTraceGetObjectHandle+0x18c>)
   19842:	005b      	lsls	r3, r3, #1
   19844:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   19846:	1dfb      	adds	r3, r7, #7
   19848:	781a      	ldrb	r2, [r3, #0]
   1984a:	4b20      	ldr	r3, [pc, #128]	; (198cc <prvTraceGetObjectHandle+0x18c>)
   1984c:	0052      	lsls	r2, r2, #1
   1984e:	5ad3      	ldrh	r3, [r2, r3]
   19850:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   19852:	1dfb      	adds	r3, r7, #7
   19854:	781b      	ldrb	r3, [r3, #0]
   19856:	4a1d      	ldr	r2, [pc, #116]	; (198cc <prvTraceGetObjectHandle+0x18c>)
   19858:	3308      	adds	r3, #8
   1985a:	005b      	lsls	r3, r3, #1
   1985c:	18d3      	adds	r3, r2, r3
   1985e:	3302      	adds	r3, #2
   19860:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   19862:	1acb      	subs	r3, r1, r3
   19864:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   19866:	1dfb      	adds	r3, r7, #7
   19868:	781b      	ldrb	r3, [r3, #0]
   1986a:	4a18      	ldr	r2, [pc, #96]	; (198cc <prvTraceGetObjectHandle+0x18c>)
   1986c:	3318      	adds	r3, #24
   1986e:	005b      	lsls	r3, r3, #1
   19870:	18d3      	adds	r3, r2, r3
   19872:	3306      	adds	r3, #6
   19874:	881b      	ldrh	r3, [r3, #0]
   19876:	001a      	movs	r2, r3
		if (hndCount >
   19878:	697b      	ldr	r3, [r7, #20]
   1987a:	429a      	cmp	r2, r3
   1987c:	da0b      	bge.n	19896 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1987e:	1dfb      	adds	r3, r7, #7
   19880:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   19882:	697a      	ldr	r2, [r7, #20]
   19884:	b2d2      	uxtb	r2, r2
   19886:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19888:	4a10      	ldr	r2, [pc, #64]	; (198cc <prvTraceGetObjectHandle+0x18c>)
   1988a:	3318      	adds	r3, #24
   1988c:	005b      	lsls	r3, r3, #1
   1988e:	18d3      	adds	r3, r2, r3
   19890:	3306      	adds	r3, #6
   19892:	1c0a      	adds	r2, r1, #0
   19894:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   19896:	4b0c      	ldr	r3, [pc, #48]	; (198c8 <prvTraceGetObjectHandle+0x188>)
   19898:	681b      	ldr	r3, [r3, #0]
   1989a:	1e5a      	subs	r2, r3, #1
   1989c:	4b0a      	ldr	r3, [pc, #40]	; (198c8 <prvTraceGetObjectHandle+0x188>)
   1989e:	601a      	str	r2, [r3, #0]
   198a0:	69bb      	ldr	r3, [r7, #24]
   198a2:	60bb      	str	r3, [r7, #8]
   198a4:	68bb      	ldr	r3, [r7, #8]
   198a6:	f383 8810 	msr	PRIMASK, r3

	return handle;
   198aa:	231f      	movs	r3, #31
   198ac:	18fb      	adds	r3, r7, r3
   198ae:	781b      	ldrb	r3, [r3, #0]
}
   198b0:	0018      	movs	r0, r3
   198b2:	46bd      	mov	sp, r7
   198b4:	b008      	add	sp, #32
   198b6:	bd80      	pop	{r7, pc}
   198b8:	20000c74 	.word	0x20000c74
   198bc:	00037358 	.word	0x00037358
   198c0:	00019a5d 	.word	0x00019a5d
   198c4:	00037f38 	.word	0x00037f38
   198c8:	20000bcc 	.word	0x20000bcc
   198cc:	20000be4 	.word	0x20000be4
   198d0:	20000c78 	.word	0x20000c78
   198d4:	0001877d 	.word	0x0001877d

000198d8 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   198d8:	b590      	push	{r4, r7, lr}
   198da:	b085      	sub	sp, #20
   198dc:	af00      	add	r7, sp, #0
   198de:	0002      	movs	r2, r0
   198e0:	1dfb      	adds	r3, r7, #7
   198e2:	701a      	strb	r2, [r3, #0]
   198e4:	1dbb      	adds	r3, r7, #6
   198e6:	1c0a      	adds	r2, r1, #0
   198e8:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   198ea:	230e      	movs	r3, #14
   198ec:	18fc      	adds	r4, r7, r3
   198ee:	1dfb      	adds	r3, r7, #7
   198f0:	781a      	ldrb	r2, [r3, #0]
   198f2:	1dbb      	adds	r3, r7, #6
   198f4:	781b      	ldrb	r3, [r3, #0]
   198f6:	0011      	movs	r1, r2
   198f8:	0018      	movs	r0, r3
   198fa:	4b09      	ldr	r3, [pc, #36]	; (19920 <prvMarkObjectAsUsed+0x48>)
   198fc:	4798      	blx	r3
   198fe:	0003      	movs	r3, r0
   19900:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   19902:	4b08      	ldr	r3, [pc, #32]	; (19924 <prvMarkObjectAsUsed+0x4c>)
   19904:	681a      	ldr	r2, [r3, #0]
   19906:	230e      	movs	r3, #14
   19908:	18fb      	adds	r3, r7, r3
   1990a:	881b      	ldrh	r3, [r3, #0]
   1990c:	219c      	movs	r1, #156	; 0x9c
   1990e:	18d3      	adds	r3, r2, r3
   19910:	185b      	adds	r3, r3, r1
   19912:	2201      	movs	r2, #1
   19914:	701a      	strb	r2, [r3, #0]
}
   19916:	46c0      	nop			; (mov r8, r8)
   19918:	46bd      	mov	sp, r7
   1991a:	b005      	add	sp, #20
   1991c:	bd90      	pop	{r4, r7, pc}
   1991e:	46c0      	nop			; (mov r8, r8)
   19920:	00019669 	.word	0x00019669
   19924:	20000c74 	.word	0x20000c74

00019928 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   19928:	b580      	push	{r7, lr}
   1992a:	b086      	sub	sp, #24
   1992c:	af00      	add	r7, sp, #0
   1992e:	60f8      	str	r0, [r7, #12]
   19930:	60b9      	str	r1, [r7, #8]
   19932:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   19934:	2300      	movs	r3, #0
   19936:	617b      	str	r3, [r7, #20]
   19938:	e010      	b.n	1995c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1993a:	68fa      	ldr	r2, [r7, #12]
   1993c:	697b      	ldr	r3, [r7, #20]
   1993e:	18d3      	adds	r3, r2, r3
   19940:	68b9      	ldr	r1, [r7, #8]
   19942:	697a      	ldr	r2, [r7, #20]
   19944:	188a      	adds	r2, r1, r2
   19946:	7812      	ldrb	r2, [r2, #0]
   19948:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1994a:	68ba      	ldr	r2, [r7, #8]
   1994c:	697b      	ldr	r3, [r7, #20]
   1994e:	18d3      	adds	r3, r2, r3
   19950:	781b      	ldrb	r3, [r3, #0]
   19952:	2b00      	cmp	r3, #0
   19954:	d007      	beq.n	19966 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   19956:	697b      	ldr	r3, [r7, #20]
   19958:	3301      	adds	r3, #1
   1995a:	617b      	str	r3, [r7, #20]
   1995c:	697a      	ldr	r2, [r7, #20]
   1995e:	687b      	ldr	r3, [r7, #4]
   19960:	429a      	cmp	r2, r3
   19962:	d3ea      	bcc.n	1993a <prvStrncpy+0x12>
			break;
	}
}
   19964:	e000      	b.n	19968 <prvStrncpy+0x40>
			break;
   19966:	46c0      	nop			; (mov r8, r8)
}
   19968:	46c0      	nop			; (mov r8, r8)
   1996a:	46bd      	mov	sp, r7
   1996c:	b006      	add	sp, #24
   1996e:	bd80      	pop	{r7, pc}

00019970 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   19970:	b580      	push	{r7, lr}
   19972:	b082      	sub	sp, #8
   19974:	af00      	add	r7, sp, #0
   19976:	603a      	str	r2, [r7, #0]
   19978:	1dfb      	adds	r3, r7, #7
   1997a:	1c02      	adds	r2, r0, #0
   1997c:	701a      	strb	r2, [r3, #0]
   1997e:	1dbb      	adds	r3, r7, #6
   19980:	1c0a      	adds	r2, r1, #0
   19982:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   19984:	683b      	ldr	r3, [r7, #0]
   19986:	2b00      	cmp	r3, #0
   19988:	d104      	bne.n	19994 <prvTraceSetObjectName+0x24>
   1998a:	4b2a      	ldr	r3, [pc, #168]	; (19a34 <prvTraceSetObjectName+0xc4>)
   1998c:	0018      	movs	r0, r3
   1998e:	4b2a      	ldr	r3, [pc, #168]	; (19a38 <prvTraceSetObjectName+0xc8>)
   19990:	4798      	blx	r3
   19992:	e04b      	b.n	19a2c <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   19994:	1dfb      	adds	r3, r7, #7
   19996:	781b      	ldrb	r3, [r3, #0]
   19998:	2b08      	cmp	r3, #8
   1999a:	d904      	bls.n	199a6 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1999c:	4b27      	ldr	r3, [pc, #156]	; (19a3c <prvTraceSetObjectName+0xcc>)
   1999e:	0018      	movs	r0, r3
   199a0:	4b25      	ldr	r3, [pc, #148]	; (19a38 <prvTraceSetObjectName+0xc8>)
   199a2:	4798      	blx	r3
		return;
   199a4:	e042      	b.n	19a2c <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   199a6:	1dbb      	adds	r3, r7, #6
   199a8:	781b      	ldrb	r3, [r3, #0]
   199aa:	2b00      	cmp	r3, #0
   199ac:	d104      	bne.n	199b8 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   199ae:	4b24      	ldr	r3, [pc, #144]	; (19a40 <prvTraceSetObjectName+0xd0>)
   199b0:	0018      	movs	r0, r3
   199b2:	4b21      	ldr	r3, [pc, #132]	; (19a38 <prvTraceSetObjectName+0xc8>)
   199b4:	4798      	blx	r3
		return;
   199b6:	e039      	b.n	19a2c <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   199b8:	4b22      	ldr	r3, [pc, #136]	; (19a44 <prvTraceSetObjectName+0xd4>)
   199ba:	681a      	ldr	r2, [r3, #0]
   199bc:	1dfb      	adds	r3, r7, #7
   199be:	781b      	ldrb	r3, [r3, #0]
   199c0:	2164      	movs	r1, #100	; 0x64
   199c2:	18d3      	adds	r3, r2, r3
   199c4:	185b      	adds	r3, r3, r1
   199c6:	781b      	ldrb	r3, [r3, #0]
   199c8:	1dba      	adds	r2, r7, #6
   199ca:	7812      	ldrb	r2, [r2, #0]
   199cc:	429a      	cmp	r2, r3
   199ce:	d909      	bls.n	199e4 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   199d0:	1dfb      	adds	r3, r7, #7
   199d2:	781b      	ldrb	r3, [r3, #0]
   199d4:	0018      	movs	r0, r3
   199d6:	4b1c      	ldr	r3, [pc, #112]	; (19a48 <prvTraceSetObjectName+0xd8>)
   199d8:	4798      	blx	r3
   199da:	0003      	movs	r3, r0
   199dc:	0018      	movs	r0, r3
   199de:	4b16      	ldr	r3, [pc, #88]	; (19a38 <prvTraceSetObjectName+0xc8>)
   199e0:	4798      	blx	r3
   199e2:	e023      	b.n	19a2c <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   199e4:	1dfb      	adds	r3, r7, #7
   199e6:	781a      	ldrb	r2, [r3, #0]
   199e8:	1dbb      	adds	r3, r7, #6
   199ea:	781b      	ldrb	r3, [r3, #0]
   199ec:	0011      	movs	r1, r2
   199ee:	0018      	movs	r0, r3
   199f0:	4b16      	ldr	r3, [pc, #88]	; (19a4c <prvTraceSetObjectName+0xdc>)
   199f2:	4798      	blx	r3
   199f4:	0003      	movs	r3, r0
   199f6:	001a      	movs	r2, r3
   199f8:	4b15      	ldr	r3, [pc, #84]	; (19a50 <prvTraceSetObjectName+0xe0>)
   199fa:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   199fc:	4b15      	ldr	r3, [pc, #84]	; (19a54 <prvTraceSetObjectName+0xe4>)
   199fe:	681b      	ldr	r3, [r3, #0]
   19a00:	2b00      	cmp	r3, #0
   19a02:	d113      	bne.n	19a2c <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19a04:	4b0f      	ldr	r3, [pc, #60]	; (19a44 <prvTraceSetObjectName+0xd4>)
   19a06:	681a      	ldr	r2, [r3, #0]
   19a08:	4b11      	ldr	r3, [pc, #68]	; (19a50 <prvTraceSetObjectName+0xe0>)
   19a0a:	881b      	ldrh	r3, [r3, #0]
   19a0c:	3398      	adds	r3, #152	; 0x98
   19a0e:	18d3      	adds	r3, r2, r3
   19a10:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   19a12:	4b0c      	ldr	r3, [pc, #48]	; (19a44 <prvTraceSetObjectName+0xd4>)
   19a14:	681a      	ldr	r2, [r3, #0]
   19a16:	1dfb      	adds	r3, r7, #7
   19a18:	781b      	ldrb	r3, [r3, #0]
   19a1a:	2170      	movs	r1, #112	; 0x70
   19a1c:	18d3      	adds	r3, r2, r3
   19a1e:	185b      	adds	r3, r3, r1
   19a20:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19a22:	001a      	movs	r2, r3
   19a24:	683b      	ldr	r3, [r7, #0]
   19a26:	0019      	movs	r1, r3
   19a28:	4b0b      	ldr	r3, [pc, #44]	; (19a58 <prvTraceSetObjectName+0xe8>)
   19a2a:	4798      	blx	r3
		}
	}
}
   19a2c:	46bd      	mov	sp, r7
   19a2e:	b002      	add	sp, #8
   19a30:	bd80      	pop	{r7, pc}
   19a32:	46c0      	nop			; (mov r8, r8)
   19a34:	0003803c 	.word	0x0003803c
   19a38:	00019a5d 	.word	0x00019a5d
   19a3c:	00038070 	.word	0x00038070
   19a40:	000380a0 	.word	0x000380a0
   19a44:	20000c74 	.word	0x20000c74
   19a48:	0001877d 	.word	0x0001877d
   19a4c:	00019669 	.word	0x00019669
   19a50:	20000c7c 	.word	0x20000c7c
   19a54:	20000bd4 	.word	0x20000bd4
   19a58:	00019929 	.word	0x00019929

00019a5c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   19a5c:	b580      	push	{r7, lr}
   19a5e:	b082      	sub	sp, #8
   19a60:	af00      	add	r7, sp, #0
   19a62:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   19a64:	4b11      	ldr	r3, [pc, #68]	; (19aac <prvTraceError+0x50>)
   19a66:	681b      	ldr	r3, [r3, #0]
   19a68:	2b00      	cmp	r3, #0
   19a6a:	d001      	beq.n	19a70 <prvTraceError+0x14>
	{
		vTraceStop();
   19a6c:	4b10      	ldr	r3, [pc, #64]	; (19ab0 <prvTraceError+0x54>)
   19a6e:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   19a70:	4b10      	ldr	r3, [pc, #64]	; (19ab4 <prvTraceError+0x58>)
   19a72:	681b      	ldr	r3, [r3, #0]
   19a74:	2b00      	cmp	r3, #0
   19a76:	d115      	bne.n	19aa4 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   19a78:	4b0e      	ldr	r3, [pc, #56]	; (19ab4 <prvTraceError+0x58>)
   19a7a:	687a      	ldr	r2, [r7, #4]
   19a7c:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   19a7e:	4b0b      	ldr	r3, [pc, #44]	; (19aac <prvTraceError+0x50>)
   19a80:	681b      	ldr	r3, [r3, #0]
   19a82:	2b00      	cmp	r3, #0
   19a84:	d00e      	beq.n	19aa4 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   19a86:	4b09      	ldr	r3, [pc, #36]	; (19aac <prvTraceError+0x50>)
   19a88:	681b      	ldr	r3, [r3, #0]
   19a8a:	4a0b      	ldr	r2, [pc, #44]	; (19ab8 <prvTraceError+0x5c>)
   19a8c:	1898      	adds	r0, r3, r2
   19a8e:	4b09      	ldr	r3, [pc, #36]	; (19ab4 <prvTraceError+0x58>)
   19a90:	681b      	ldr	r3, [r3, #0]
   19a92:	2250      	movs	r2, #80	; 0x50
   19a94:	0019      	movs	r1, r3
   19a96:	4b09      	ldr	r3, [pc, #36]	; (19abc <prvTraceError+0x60>)
   19a98:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   19a9a:	4b04      	ldr	r3, [pc, #16]	; (19aac <prvTraceError+0x50>)
   19a9c:	681b      	ldr	r3, [r3, #0]
   19a9e:	4a08      	ldr	r2, [pc, #32]	; (19ac0 <prvTraceError+0x64>)
   19aa0:	2101      	movs	r1, #1
   19aa2:	5099      	str	r1, [r3, r2]
		}
	}
}
   19aa4:	46c0      	nop			; (mov r8, r8)
   19aa6:	46bd      	mov	sp, r7
   19aa8:	b002      	add	sp, #8
   19aaa:	bd80      	pop	{r7, pc}
   19aac:	20000c74 	.word	0x20000c74
   19ab0:	00018921 	.word	0x00018921
   19ab4:	20000bd4 	.word	0x20000bd4
   19ab8:	000006bc 	.word	0x000006bc
   19abc:	00019929 	.word	0x00019929
   19ac0:	000006b4 	.word	0x000006b4

00019ac4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   19ac4:	b580      	push	{r7, lr}
   19ac6:	b086      	sub	sp, #24
   19ac8:	af00      	add	r7, sp, #0
   19aca:	0002      	movs	r2, r0
   19acc:	1dfb      	adds	r3, r7, #7
   19ace:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   19ad0:	2300      	movs	r3, #0
   19ad2:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   19ad4:	2300      	movs	r3, #0
   19ad6:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   19ad8:	1dfb      	adds	r3, r7, #7
   19ada:	781b      	ldrb	r3, [r3, #0]
   19adc:	2b00      	cmp	r3, #0
   19ade:	d000      	beq.n	19ae2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   19ae0:	e089      	b.n	19bf6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   19ae2:	4b49      	ldr	r3, [pc, #292]	; (19c08 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   19ae4:	0018      	movs	r0, r3
   19ae6:	4b49      	ldr	r3, [pc, #292]	; (19c0c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   19ae8:	4798      	blx	r3
   19aea:	e08a      	b.n	19c02 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   19aec:	4b48      	ldr	r3, [pc, #288]	; (19c10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19aee:	681b      	ldr	r3, [r3, #0]
   19af0:	69da      	ldr	r2, [r3, #28]
   19af2:	697b      	ldr	r3, [r7, #20]
   19af4:	18d3      	adds	r3, r2, r3
   19af6:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   19af8:	4b45      	ldr	r3, [pc, #276]	; (19c10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19afa:	6819      	ldr	r1, [r3, #0]
   19afc:	693b      	ldr	r3, [r7, #16]
   19afe:	009a      	lsls	r2, r3, #2
   19b00:	23e2      	movs	r3, #226	; 0xe2
   19b02:	00db      	lsls	r3, r3, #3
   19b04:	188a      	adds	r2, r1, r2
   19b06:	18d3      	adds	r3, r2, r3
   19b08:	781b      	ldrb	r3, [r3, #0]
   19b0a:	2b98      	cmp	r3, #152	; 0x98
   19b0c:	d934      	bls.n	19b78 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   19b0e:	4b40      	ldr	r3, [pc, #256]	; (19c10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19b10:	6819      	ldr	r1, [r3, #0]
   19b12:	693b      	ldr	r3, [r7, #16]
   19b14:	009a      	lsls	r2, r3, #2
   19b16:	23e2      	movs	r3, #226	; 0xe2
   19b18:	00db      	lsls	r3, r3, #3
   19b1a:	188a      	adds	r2, r1, r2
   19b1c:	18d3      	adds	r3, r2, r3
   19b1e:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   19b20:	2ba7      	cmp	r3, #167	; 0xa7
   19b22:	d829      	bhi.n	19b78 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   19b24:	4b3a      	ldr	r3, [pc, #232]	; (19c10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19b26:	6819      	ldr	r1, [r3, #0]
   19b28:	693b      	ldr	r3, [r7, #16]
   19b2a:	009a      	lsls	r2, r3, #2
   19b2c:	23e2      	movs	r3, #226	; 0xe2
   19b2e:	00db      	lsls	r3, r3, #3
   19b30:	188a      	adds	r2, r1, r2
   19b32:	18d3      	adds	r3, r2, r3
   19b34:	781a      	ldrb	r2, [r3, #0]
   19b36:	230f      	movs	r3, #15
   19b38:	18fb      	adds	r3, r7, r3
   19b3a:	3268      	adds	r2, #104	; 0x68
   19b3c:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   19b3e:	230f      	movs	r3, #15
   19b40:	18fb      	adds	r3, r7, r3
   19b42:	781a      	ldrb	r2, [r3, #0]
   19b44:	693b      	ldr	r3, [r7, #16]
   19b46:	18d2      	adds	r2, r2, r3
   19b48:	4b31      	ldr	r3, [pc, #196]	; (19c10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19b4a:	681b      	ldr	r3, [r3, #0]
   19b4c:	699b      	ldr	r3, [r3, #24]
   19b4e:	429a      	cmp	r2, r3
   19b50:	d24d      	bcs.n	19bee <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   19b52:	4b2f      	ldr	r3, [pc, #188]	; (19c10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19b54:	681a      	ldr	r2, [r3, #0]
   19b56:	693b      	ldr	r3, [r7, #16]
   19b58:	009b      	lsls	r3, r3, #2
   19b5a:	21e2      	movs	r1, #226	; 0xe2
   19b5c:	00c9      	lsls	r1, r1, #3
   19b5e:	468c      	mov	ip, r1
   19b60:	4463      	add	r3, ip
   19b62:	18d0      	adds	r0, r2, r3
   19b64:	230f      	movs	r3, #15
   19b66:	18fb      	adds	r3, r7, r3
   19b68:	781b      	ldrb	r3, [r3, #0]
   19b6a:	3301      	adds	r3, #1
   19b6c:	009b      	lsls	r3, r3, #2
   19b6e:	001a      	movs	r2, r3
   19b70:	2100      	movs	r1, #0
   19b72:	4b28      	ldr	r3, [pc, #160]	; (19c14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19b74:	4798      	blx	r3
		{
   19b76:	e03a      	b.n	19bee <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   19b78:	4b25      	ldr	r3, [pc, #148]	; (19c10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19b7a:	6819      	ldr	r1, [r3, #0]
   19b7c:	693b      	ldr	r3, [r7, #16]
   19b7e:	009a      	lsls	r2, r3, #2
   19b80:	23e2      	movs	r3, #226	; 0xe2
   19b82:	00db      	lsls	r3, r3, #3
   19b84:	188a      	adds	r2, r1, r2
   19b86:	18d3      	adds	r3, r2, r3
   19b88:	781b      	ldrb	r3, [r3, #0]
   19b8a:	2b01      	cmp	r3, #1
   19b8c:	d130      	bne.n	19bf0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   19b8e:	693b      	ldr	r3, [r7, #16]
   19b90:	1c5a      	adds	r2, r3, #1
   19b92:	4b1f      	ldr	r3, [pc, #124]	; (19c10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19b94:	681b      	ldr	r3, [r3, #0]
   19b96:	699b      	ldr	r3, [r3, #24]
   19b98:	429a      	cmp	r2, r3
   19b9a:	d20e      	bcs.n	19bba <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   19b9c:	4b1c      	ldr	r3, [pc, #112]	; (19c10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19b9e:	681a      	ldr	r2, [r3, #0]
   19ba0:	693b      	ldr	r3, [r7, #16]
   19ba2:	009b      	lsls	r3, r3, #2
   19ba4:	21e2      	movs	r1, #226	; 0xe2
   19ba6:	00c9      	lsls	r1, r1, #3
   19ba8:	468c      	mov	ip, r1
   19baa:	4463      	add	r3, ip
   19bac:	18d3      	adds	r3, r2, r3
   19bae:	2208      	movs	r2, #8
   19bb0:	2100      	movs	r1, #0
   19bb2:	0018      	movs	r0, r3
   19bb4:	4b17      	ldr	r3, [pc, #92]	; (19c14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19bb6:	4798      	blx	r3
   19bb8:	e01a      	b.n	19bf0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   19bba:	4b15      	ldr	r3, [pc, #84]	; (19c10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19bbc:	681b      	ldr	r3, [r3, #0]
   19bbe:	22e2      	movs	r2, #226	; 0xe2
   19bc0:	00d2      	lsls	r2, r2, #3
   19bc2:	4694      	mov	ip, r2
   19bc4:	4463      	add	r3, ip
   19bc6:	2204      	movs	r2, #4
   19bc8:	2100      	movs	r1, #0
   19bca:	0018      	movs	r0, r3
   19bcc:	4b11      	ldr	r3, [pc, #68]	; (19c14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19bce:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   19bd0:	4b0f      	ldr	r3, [pc, #60]	; (19c10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19bd2:	681a      	ldr	r2, [r3, #0]
   19bd4:	693b      	ldr	r3, [r7, #16]
   19bd6:	009b      	lsls	r3, r3, #2
   19bd8:	21e2      	movs	r1, #226	; 0xe2
   19bda:	00c9      	lsls	r1, r1, #3
   19bdc:	468c      	mov	ip, r1
   19bde:	4463      	add	r3, ip
   19be0:	18d3      	adds	r3, r2, r3
   19be2:	2204      	movs	r2, #4
   19be4:	2100      	movs	r1, #0
   19be6:	0018      	movs	r0, r3
   19be8:	4b0a      	ldr	r3, [pc, #40]	; (19c14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19bea:	4798      	blx	r3
   19bec:	e000      	b.n	19bf0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   19bee:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   19bf0:	697b      	ldr	r3, [r7, #20]
   19bf2:	3301      	adds	r3, #1
   19bf4:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   19bf6:	1dfb      	adds	r3, r7, #7
   19bf8:	781a      	ldrb	r2, [r3, #0]
   19bfa:	697b      	ldr	r3, [r7, #20]
   19bfc:	429a      	cmp	r2, r3
   19bfe:	d900      	bls.n	19c02 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   19c00:	e774      	b.n	19aec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   19c02:	46bd      	mov	sp, r7
   19c04:	b006      	add	sp, #24
   19c06:	bd80      	pop	{r7, pc}
   19c08:	00038100 	.word	0x00038100
   19c0c:	00019a5d 	.word	0x00019a5d
   19c10:	20000c74 	.word	0x20000c74
   19c14:	00034a5f 	.word	0x00034a5f

00019c18 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   19c18:	b580      	push	{r7, lr}
   19c1a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   19c1c:	4b12      	ldr	r3, [pc, #72]	; (19c68 <prvTraceUpdateCounters+0x50>)
   19c1e:	681b      	ldr	r3, [r3, #0]
   19c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19c22:	2b00      	cmp	r3, #0
   19c24:	d01c      	beq.n	19c60 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   19c26:	4b10      	ldr	r3, [pc, #64]	; (19c68 <prvTraceUpdateCounters+0x50>)
   19c28:	681b      	ldr	r3, [r3, #0]
   19c2a:	695a      	ldr	r2, [r3, #20]
   19c2c:	3201      	adds	r2, #1
   19c2e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   19c30:	4b0d      	ldr	r3, [pc, #52]	; (19c68 <prvTraceUpdateCounters+0x50>)
   19c32:	681b      	ldr	r3, [r3, #0]
   19c34:	69da      	ldr	r2, [r3, #28]
   19c36:	3201      	adds	r2, #1
   19c38:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   19c3a:	4b0b      	ldr	r3, [pc, #44]	; (19c68 <prvTraceUpdateCounters+0x50>)
   19c3c:	681b      	ldr	r3, [r3, #0]
   19c3e:	69da      	ldr	r2, [r3, #28]
   19c40:	232c      	movs	r3, #44	; 0x2c
   19c42:	33ff      	adds	r3, #255	; 0xff
   19c44:	429a      	cmp	r2, r3
   19c46:	d907      	bls.n	19c58 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   19c48:	4b07      	ldr	r3, [pc, #28]	; (19c68 <prvTraceUpdateCounters+0x50>)
   19c4a:	681b      	ldr	r3, [r3, #0]
   19c4c:	2201      	movs	r2, #1
   19c4e:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   19c50:	4b05      	ldr	r3, [pc, #20]	; (19c68 <prvTraceUpdateCounters+0x50>)
   19c52:	681b      	ldr	r3, [r3, #0]
   19c54:	2200      	movs	r2, #0
   19c56:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   19c58:	2001      	movs	r0, #1
   19c5a:	4b04      	ldr	r3, [pc, #16]	; (19c6c <prvTraceUpdateCounters+0x54>)
   19c5c:	4798      	blx	r3
   19c5e:	e000      	b.n	19c62 <prvTraceUpdateCounters+0x4a>
		return;
   19c60:	46c0      	nop			; (mov r8, r8)
#endif
}
   19c62:	46bd      	mov	sp, r7
   19c64:	bd80      	pop	{r7, pc}
   19c66:	46c0      	nop			; (mov r8, r8)
   19c68:	20000c74 	.word	0x20000c74
   19c6c:	00019ac5 	.word	0x00019ac5

00019c70 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   19c70:	b5b0      	push	{r4, r5, r7, lr}
   19c72:	b086      	sub	sp, #24
   19c74:	af00      	add	r7, sp, #0
   19c76:	0002      	movs	r2, r0
   19c78:	1dbb      	adds	r3, r7, #6
   19c7a:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   19c7c:	2300      	movs	r3, #0
   19c7e:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   19c80:	2300      	movs	r3, #0
   19c82:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   19c84:	2300      	movs	r3, #0
   19c86:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   19c88:	1dbb      	adds	r3, r7, #6
   19c8a:	881b      	ldrh	r3, [r3, #0]
   19c8c:	2bff      	cmp	r3, #255	; 0xff
   19c8e:	d00a      	beq.n	19ca6 <prvTraceGetDTS+0x36>
   19c90:	1dbb      	adds	r3, r7, #6
   19c92:	881b      	ldrh	r3, [r3, #0]
   19c94:	4a60      	ldr	r2, [pc, #384]	; (19e18 <prvTraceGetDTS+0x1a8>)
   19c96:	4293      	cmp	r3, r2
   19c98:	d005      	beq.n	19ca6 <prvTraceGetDTS+0x36>
   19c9a:	4b60      	ldr	r3, [pc, #384]	; (19e1c <prvTraceGetDTS+0x1ac>)
   19c9c:	0018      	movs	r0, r3
   19c9e:	4b60      	ldr	r3, [pc, #384]	; (19e20 <prvTraceGetDTS+0x1b0>)
   19ca0:	4798      	blx	r3
   19ca2:	2300      	movs	r3, #0
   19ca4:	e0b3      	b.n	19e0e <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   19ca6:	4b5f      	ldr	r3, [pc, #380]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19ca8:	681b      	ldr	r3, [r3, #0]
   19caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19cac:	2b00      	cmp	r3, #0
   19cae:	d118      	bne.n	19ce2 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   19cb0:	4b5d      	ldr	r3, [pc, #372]	; (19e28 <prvTraceGetDTS+0x1b8>)
   19cb2:	681b      	ldr	r3, [r3, #0]
   19cb4:	2b00      	cmp	r3, #0
   19cb6:	d006      	beq.n	19cc6 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   19cb8:	4b5a      	ldr	r3, [pc, #360]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19cba:	681b      	ldr	r3, [r3, #0]
   19cbc:	4a5a      	ldr	r2, [pc, #360]	; (19e28 <prvTraceGetDTS+0x1b8>)
   19cbe:	6812      	ldr	r2, [r2, #0]
   19cc0:	0892      	lsrs	r2, r2, #2
   19cc2:	625a      	str	r2, [r3, #36]	; 0x24
   19cc4:	e00d      	b.n	19ce2 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   19cc6:	4b59      	ldr	r3, [pc, #356]	; (19e2c <prvTraceGetDTS+0x1bc>)
   19cc8:	681a      	ldr	r2, [r3, #0]
   19cca:	4b59      	ldr	r3, [pc, #356]	; (19e30 <prvTraceGetDTS+0x1c0>)
   19ccc:	681b      	ldr	r3, [r3, #0]
   19cce:	429a      	cmp	r2, r3
   19cd0:	d007      	beq.n	19ce2 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   19cd2:	4b54      	ldr	r3, [pc, #336]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19cd4:	681c      	ldr	r4, [r3, #0]
   19cd6:	2000      	movs	r0, #0
   19cd8:	4b56      	ldr	r3, [pc, #344]	; (19e34 <prvTraceGetDTS+0x1c4>)
   19cda:	4798      	blx	r3
   19cdc:	0003      	movs	r3, r0
   19cde:	089b      	lsrs	r3, r3, #2
   19ce0:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   19ce2:	230c      	movs	r3, #12
   19ce4:	18fb      	adds	r3, r7, r3
   19ce6:	0018      	movs	r0, r3
   19ce8:	4b53      	ldr	r3, [pc, #332]	; (19e38 <prvTraceGetDTS+0x1c8>)
   19cea:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   19cec:	68fa      	ldr	r2, [r7, #12]
   19cee:	4b53      	ldr	r3, [pc, #332]	; (19e3c <prvTraceGetDTS+0x1cc>)
   19cf0:	681b      	ldr	r3, [r3, #0]
   19cf2:	1ad3      	subs	r3, r2, r3
   19cf4:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   19cf6:	68fa      	ldr	r2, [r7, #12]
   19cf8:	4b50      	ldr	r3, [pc, #320]	; (19e3c <prvTraceGetDTS+0x1cc>)
   19cfa:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   19cfc:	4b49      	ldr	r3, [pc, #292]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19cfe:	681b      	ldr	r3, [r3, #0]
   19d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19d02:	2b00      	cmp	r3, #0
   19d04:	d044      	beq.n	19d90 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   19d06:	4b47      	ldr	r3, [pc, #284]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d08:	681b      	ldr	r3, [r3, #0]
   19d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19d0c:	693b      	ldr	r3, [r7, #16]
   19d0e:	429a      	cmp	r2, r3
   19d10:	d21e      	bcs.n	19d50 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   19d12:	4b44      	ldr	r3, [pc, #272]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d14:	681c      	ldr	r4, [r3, #0]
   19d16:	4b43      	ldr	r3, [pc, #268]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d18:	681b      	ldr	r3, [r3, #0]
   19d1a:	6add      	ldr	r5, [r3, #44]	; 0x2c
   19d1c:	4b41      	ldr	r3, [pc, #260]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d1e:	681b      	ldr	r3, [r3, #0]
   19d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19d22:	4b47      	ldr	r3, [pc, #284]	; (19e40 <prvTraceGetDTS+0x1d0>)
   19d24:	0011      	movs	r1, r2
   19d26:	6938      	ldr	r0, [r7, #16]
   19d28:	4798      	blx	r3
   19d2a:	0003      	movs	r3, r0
   19d2c:	18eb      	adds	r3, r5, r3
   19d2e:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   19d30:	4b3c      	ldr	r3, [pc, #240]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d32:	681c      	ldr	r4, [r3, #0]
   19d34:	4b3b      	ldr	r3, [pc, #236]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d36:	681b      	ldr	r3, [r3, #0]
   19d38:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   19d3a:	4b3a      	ldr	r3, [pc, #232]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d3c:	681b      	ldr	r3, [r3, #0]
   19d3e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19d40:	693a      	ldr	r2, [r7, #16]
   19d42:	4b40      	ldr	r3, [pc, #256]	; (19e44 <prvTraceGetDTS+0x1d4>)
   19d44:	0010      	movs	r0, r2
   19d46:	4798      	blx	r3
   19d48:	000b      	movs	r3, r1
   19d4a:	18eb      	adds	r3, r5, r3
   19d4c:	62a3      	str	r3, [r4, #40]	; 0x28
   19d4e:	e007      	b.n	19d60 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   19d50:	4b34      	ldr	r3, [pc, #208]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d52:	681b      	ldr	r3, [r3, #0]
   19d54:	4a33      	ldr	r2, [pc, #204]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d56:	6812      	ldr	r2, [r2, #0]
   19d58:	6a91      	ldr	r1, [r2, #40]	; 0x28
   19d5a:	693a      	ldr	r2, [r7, #16]
   19d5c:	188a      	adds	r2, r1, r2
   19d5e:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   19d60:	4b30      	ldr	r3, [pc, #192]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d62:	681b      	ldr	r3, [r3, #0]
   19d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   19d66:	4b2f      	ldr	r3, [pc, #188]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d68:	681b      	ldr	r3, [r3, #0]
   19d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19d6c:	429a      	cmp	r2, r3
   19d6e:	d313      	bcc.n	19d98 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   19d70:	4b2c      	ldr	r3, [pc, #176]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d72:	681b      	ldr	r3, [r3, #0]
   19d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19d76:	3201      	adds	r2, #1
   19d78:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   19d7a:	4b2a      	ldr	r3, [pc, #168]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d7c:	681b      	ldr	r3, [r3, #0]
   19d7e:	4a29      	ldr	r2, [pc, #164]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d80:	6812      	ldr	r2, [r2, #0]
   19d82:	6a91      	ldr	r1, [r2, #40]	; 0x28
   19d84:	4a27      	ldr	r2, [pc, #156]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d86:	6812      	ldr	r2, [r2, #0]
   19d88:	6a52      	ldr	r2, [r2, #36]	; 0x24
   19d8a:	1a8a      	subs	r2, r1, r2
   19d8c:	629a      	str	r2, [r3, #40]	; 0x28
   19d8e:	e003      	b.n	19d98 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   19d90:	4b24      	ldr	r3, [pc, #144]	; (19e24 <prvTraceGetDTS+0x1b4>)
   19d92:	681b      	ldr	r3, [r3, #0]
   19d94:	68fa      	ldr	r2, [r7, #12]
   19d96:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   19d98:	1dbb      	adds	r3, r7, #6
   19d9a:	881a      	ldrh	r2, [r3, #0]
   19d9c:	693b      	ldr	r3, [r7, #16]
   19d9e:	429a      	cmp	r2, r3
   19da0:	d22f      	bcs.n	19e02 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   19da2:	4b29      	ldr	r3, [pc, #164]	; (19e48 <prvTraceGetDTS+0x1d8>)
   19da4:	4798      	blx	r3
   19da6:	0003      	movs	r3, r0
   19da8:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   19daa:	697b      	ldr	r3, [r7, #20]
   19dac:	2b00      	cmp	r3, #0
   19dae:	d028      	beq.n	19e02 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   19db0:	1dbb      	adds	r3, r7, #6
   19db2:	881b      	ldrh	r3, [r3, #0]
   19db4:	4a18      	ldr	r2, [pc, #96]	; (19e18 <prvTraceGetDTS+0x1a8>)
   19db6:	4293      	cmp	r3, r2
   19db8:	d10b      	bne.n	19dd2 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   19dba:	697b      	ldr	r3, [r7, #20]
   19dbc:	22a9      	movs	r2, #169	; 0xa9
   19dbe:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   19dc0:	693b      	ldr	r3, [r7, #16]
   19dc2:	0c1b      	lsrs	r3, r3, #16
   19dc4:	b29a      	uxth	r2, r3
   19dc6:	697b      	ldr	r3, [r7, #20]
   19dc8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   19dca:	697b      	ldr	r3, [r7, #20]
   19dcc:	2200      	movs	r2, #0
   19dce:	705a      	strb	r2, [r3, #1]
   19dd0:	e015      	b.n	19dfe <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   19dd2:	1dbb      	adds	r3, r7, #6
   19dd4:	881b      	ldrh	r3, [r3, #0]
   19dd6:	2bff      	cmp	r3, #255	; 0xff
   19dd8:	d10d      	bne.n	19df6 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   19dda:	697b      	ldr	r3, [r7, #20]
   19ddc:	22a8      	movs	r2, #168	; 0xa8
   19dde:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   19de0:	693b      	ldr	r3, [r7, #16]
   19de2:	0a1b      	lsrs	r3, r3, #8
   19de4:	b29a      	uxth	r2, r3
   19de6:	697b      	ldr	r3, [r7, #20]
   19de8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   19dea:	693b      	ldr	r3, [r7, #16]
   19dec:	0e1b      	lsrs	r3, r3, #24
   19dee:	b2da      	uxtb	r2, r3
   19df0:	697b      	ldr	r3, [r7, #20]
   19df2:	705a      	strb	r2, [r3, #1]
   19df4:	e003      	b.n	19dfe <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   19df6:	4b15      	ldr	r3, [pc, #84]	; (19e4c <prvTraceGetDTS+0x1dc>)
   19df8:	0018      	movs	r0, r3
   19dfa:	4b09      	ldr	r3, [pc, #36]	; (19e20 <prvTraceGetDTS+0x1b0>)
   19dfc:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   19dfe:	4b14      	ldr	r3, [pc, #80]	; (19e50 <prvTraceGetDTS+0x1e0>)
   19e00:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   19e02:	693b      	ldr	r3, [r7, #16]
   19e04:	b29b      	uxth	r3, r3
   19e06:	1dba      	adds	r2, r7, #6
   19e08:	8812      	ldrh	r2, [r2, #0]
   19e0a:	4013      	ands	r3, r2
   19e0c:	b29b      	uxth	r3, r3
}
   19e0e:	0018      	movs	r0, r3
   19e10:	46bd      	mov	sp, r7
   19e12:	b006      	add	sp, #24
   19e14:	bdb0      	pop	{r4, r5, r7, pc}
   19e16:	46c0      	nop			; (mov r8, r8)
   19e18:	0000ffff 	.word	0x0000ffff
   19e1c:	00038158 	.word	0x00038158
   19e20:	00019a5d 	.word	0x00019a5d
   19e24:	20000c74 	.word	0x20000c74
   19e28:	20000bd0 	.word	0x20000bd0
   19e2c:	e000e018 	.word	0xe000e018
   19e30:	2000544c 	.word	0x2000544c
   19e34:	00029e11 	.word	0x00029e11
   19e38:	00019e55 	.word	0x00019e55
   19e3c:	20000c80 	.word	0x20000c80
   19e40:	00032a85 	.word	0x00032a85
   19e44:	00032b91 	.word	0x00032b91
   19e48:	00019615 	.word	0x00019615
   19e4c:	00038198 	.word	0x00038198
   19e50:	00019c19 	.word	0x00019c19

00019e54 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   19e54:	b580      	push	{r7, lr}
   19e56:	b084      	sub	sp, #16
   19e58:	af00      	add	r7, sp, #0
   19e5a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   19e5c:	2300      	movs	r3, #0
   19e5e:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   19e60:	2300      	movs	r3, #0
   19e62:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   19e64:	4b2d      	ldr	r3, [pc, #180]	; (19f1c <prvTracePortGetTimeStamp+0xc8>)
   19e66:	681b      	ldr	r3, [r3, #0]
   19e68:	2b01      	cmp	r3, #1
   19e6a:	d107      	bne.n	19e7c <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   19e6c:	687b      	ldr	r3, [r7, #4]
   19e6e:	2b00      	cmp	r3, #0
   19e70:	d04f      	beq.n	19f12 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   19e72:	4b2b      	ldr	r3, [pc, #172]	; (19f20 <prvTracePortGetTimeStamp+0xcc>)
   19e74:	681a      	ldr	r2, [r3, #0]
   19e76:	687b      	ldr	r3, [r7, #4]
   19e78:	601a      	str	r2, [r3, #0]
		return;
   19e7a:	e04a      	b.n	19f12 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   19e7c:	4b29      	ldr	r3, [pc, #164]	; (19f24 <prvTracePortGetTimeStamp+0xd0>)
   19e7e:	681a      	ldr	r2, [r3, #0]
   19e80:	4b29      	ldr	r3, [pc, #164]	; (19f28 <prvTracePortGetTimeStamp+0xd4>)
   19e82:	681b      	ldr	r3, [r3, #0]
   19e84:	1ad3      	subs	r3, r2, r3
   19e86:	3301      	adds	r3, #1
   19e88:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   19e8a:	4b28      	ldr	r3, [pc, #160]	; (19f2c <prvTracePortGetTimeStamp+0xd8>)
   19e8c:	681a      	ldr	r2, [r3, #0]
   19e8e:	4b28      	ldr	r3, [pc, #160]	; (19f30 <prvTracePortGetTimeStamp+0xdc>)
   19e90:	681b      	ldr	r3, [r3, #0]
   19e92:	1ad3      	subs	r3, r2, r3
   19e94:	3b01      	subs	r3, #1
   19e96:	2b00      	cmp	r3, #0
   19e98:	db03      	blt.n	19ea2 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   19e9a:	4b24      	ldr	r3, [pc, #144]	; (19f2c <prvTracePortGetTimeStamp+0xd8>)
   19e9c:	681b      	ldr	r3, [r3, #0]
   19e9e:	60fb      	str	r3, [r7, #12]
   19ea0:	e002      	b.n	19ea8 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   19ea2:	4b23      	ldr	r3, [pc, #140]	; (19f30 <prvTracePortGetTimeStamp+0xdc>)
   19ea4:	681b      	ldr	r3, [r3, #0]
   19ea6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   19ea8:	4b20      	ldr	r3, [pc, #128]	; (19f2c <prvTracePortGetTimeStamp+0xd8>)
   19eaa:	681b      	ldr	r3, [r3, #0]
   19eac:	68fa      	ldr	r2, [r7, #12]
   19eae:	429a      	cmp	r2, r3
   19eb0:	d107      	bne.n	19ec2 <prvTracePortGetTimeStamp+0x6e>
   19eb2:	4b20      	ldr	r3, [pc, #128]	; (19f34 <prvTracePortGetTimeStamp+0xe0>)
   19eb4:	681b      	ldr	r3, [r3, #0]
   19eb6:	68ba      	ldr	r2, [r7, #8]
   19eb8:	429a      	cmp	r2, r3
   19eba:	d202      	bcs.n	19ec2 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   19ebc:	68fb      	ldr	r3, [r7, #12]
   19ebe:	3301      	adds	r3, #1
   19ec0:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   19ec2:	687b      	ldr	r3, [r7, #4]
   19ec4:	2b00      	cmp	r3, #0
   19ec6:	d016      	beq.n	19ef6 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   19ec8:	4b16      	ldr	r3, [pc, #88]	; (19f24 <prvTracePortGetTimeStamp+0xd0>)
   19eca:	681b      	ldr	r3, [r3, #0]
   19ecc:	3301      	adds	r3, #1
   19ece:	089b      	lsrs	r3, r3, #2
   19ed0:	68fa      	ldr	r2, [r7, #12]
   19ed2:	435a      	muls	r2, r3
   19ed4:	4b12      	ldr	r3, [pc, #72]	; (19f20 <prvTracePortGetTimeStamp+0xcc>)
   19ed6:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   19ed8:	4b12      	ldr	r3, [pc, #72]	; (19f24 <prvTracePortGetTimeStamp+0xd0>)
   19eda:	681b      	ldr	r3, [r3, #0]
   19edc:	3301      	adds	r3, #1
   19ede:	2203      	movs	r2, #3
   19ee0:	4013      	ands	r3, r2
   19ee2:	68fa      	ldr	r2, [r7, #12]
   19ee4:	435a      	muls	r2, r3
   19ee6:	68bb      	ldr	r3, [r7, #8]
   19ee8:	18d3      	adds	r3, r2, r3
   19eea:	089a      	lsrs	r2, r3, #2
   19eec:	4b0c      	ldr	r3, [pc, #48]	; (19f20 <prvTracePortGetTimeStamp+0xcc>)
   19eee:	681b      	ldr	r3, [r3, #0]
   19ef0:	18d2      	adds	r2, r2, r3
   19ef2:	4b0b      	ldr	r3, [pc, #44]	; (19f20 <prvTracePortGetTimeStamp+0xcc>)
   19ef4:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   19ef6:	4b0d      	ldr	r3, [pc, #52]	; (19f2c <prvTracePortGetTimeStamp+0xd8>)
   19ef8:	68fa      	ldr	r2, [r7, #12]
   19efa:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   19efc:	687b      	ldr	r3, [r7, #4]
   19efe:	2b00      	cmp	r3, #0
   19f00:	d003      	beq.n	19f0a <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   19f02:	4b07      	ldr	r3, [pc, #28]	; (19f20 <prvTracePortGetTimeStamp+0xcc>)
   19f04:	681a      	ldr	r2, [r3, #0]
   19f06:	687b      	ldr	r3, [r7, #4]
   19f08:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   19f0a:	4b0a      	ldr	r3, [pc, #40]	; (19f34 <prvTracePortGetTimeStamp+0xe0>)
   19f0c:	68ba      	ldr	r2, [r7, #8]
   19f0e:	601a      	str	r2, [r3, #0]
   19f10:	e000      	b.n	19f14 <prvTracePortGetTimeStamp+0xc0>
		return;
   19f12:	46c0      	nop			; (mov r8, r8)
}
   19f14:	46bd      	mov	sp, r7
   19f16:	b004      	add	sp, #16
   19f18:	bd80      	pop	{r7, pc}
   19f1a:	46c0      	nop			; (mov r8, r8)
   19f1c:	20000bc0 	.word	0x20000bc0
   19f20:	20000bc4 	.word	0x20000bc4
   19f24:	e000e014 	.word	0xe000e014
   19f28:	e000e018 	.word	0xe000e018
   19f2c:	20000c84 	.word	0x20000c84
   19f30:	20000bbc 	.word	0x20000bbc
   19f34:	20000c88 	.word	0x20000c88

00019f38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   19f38:	b580      	push	{r7, lr}
   19f3a:	b082      	sub	sp, #8
   19f3c:	af00      	add	r7, sp, #0
   19f3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19f40:	687b      	ldr	r3, [r7, #4]
   19f42:	3308      	adds	r3, #8
   19f44:	001a      	movs	r2, r3
   19f46:	687b      	ldr	r3, [r7, #4]
   19f48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   19f4a:	687b      	ldr	r3, [r7, #4]
   19f4c:	2201      	movs	r2, #1
   19f4e:	4252      	negs	r2, r2
   19f50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19f52:	687b      	ldr	r3, [r7, #4]
   19f54:	3308      	adds	r3, #8
   19f56:	001a      	movs	r2, r3
   19f58:	687b      	ldr	r3, [r7, #4]
   19f5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19f5c:	687b      	ldr	r3, [r7, #4]
   19f5e:	3308      	adds	r3, #8
   19f60:	001a      	movs	r2, r3
   19f62:	687b      	ldr	r3, [r7, #4]
   19f64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   19f66:	687b      	ldr	r3, [r7, #4]
   19f68:	2200      	movs	r2, #0
   19f6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   19f6c:	46c0      	nop			; (mov r8, r8)
   19f6e:	46bd      	mov	sp, r7
   19f70:	b002      	add	sp, #8
   19f72:	bd80      	pop	{r7, pc}

00019f74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   19f74:	b580      	push	{r7, lr}
   19f76:	b082      	sub	sp, #8
   19f78:	af00      	add	r7, sp, #0
   19f7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   19f7c:	687b      	ldr	r3, [r7, #4]
   19f7e:	2200      	movs	r2, #0
   19f80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   19f82:	46c0      	nop			; (mov r8, r8)
   19f84:	46bd      	mov	sp, r7
   19f86:	b002      	add	sp, #8
   19f88:	bd80      	pop	{r7, pc}

00019f8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19f8a:	b580      	push	{r7, lr}
   19f8c:	b084      	sub	sp, #16
   19f8e:	af00      	add	r7, sp, #0
   19f90:	6078      	str	r0, [r7, #4]
   19f92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   19f94:	687b      	ldr	r3, [r7, #4]
   19f96:	685b      	ldr	r3, [r3, #4]
   19f98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   19f9a:	683b      	ldr	r3, [r7, #0]
   19f9c:	68fa      	ldr	r2, [r7, #12]
   19f9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   19fa0:	68fb      	ldr	r3, [r7, #12]
   19fa2:	689a      	ldr	r2, [r3, #8]
   19fa4:	683b      	ldr	r3, [r7, #0]
   19fa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   19fa8:	68fb      	ldr	r3, [r7, #12]
   19faa:	689b      	ldr	r3, [r3, #8]
   19fac:	683a      	ldr	r2, [r7, #0]
   19fae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   19fb0:	68fb      	ldr	r3, [r7, #12]
   19fb2:	683a      	ldr	r2, [r7, #0]
   19fb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19fb6:	683b      	ldr	r3, [r7, #0]
   19fb8:	687a      	ldr	r2, [r7, #4]
   19fba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19fbc:	687b      	ldr	r3, [r7, #4]
   19fbe:	681b      	ldr	r3, [r3, #0]
   19fc0:	1c5a      	adds	r2, r3, #1
   19fc2:	687b      	ldr	r3, [r7, #4]
   19fc4:	601a      	str	r2, [r3, #0]
}
   19fc6:	46c0      	nop			; (mov r8, r8)
   19fc8:	46bd      	mov	sp, r7
   19fca:	b004      	add	sp, #16
   19fcc:	bd80      	pop	{r7, pc}

00019fce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19fce:	b580      	push	{r7, lr}
   19fd0:	b084      	sub	sp, #16
   19fd2:	af00      	add	r7, sp, #0
   19fd4:	6078      	str	r0, [r7, #4]
   19fd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   19fd8:	683b      	ldr	r3, [r7, #0]
   19fda:	681b      	ldr	r3, [r3, #0]
   19fdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   19fde:	68bb      	ldr	r3, [r7, #8]
   19fe0:	3301      	adds	r3, #1
   19fe2:	d103      	bne.n	19fec <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   19fe4:	687b      	ldr	r3, [r7, #4]
   19fe6:	691b      	ldr	r3, [r3, #16]
   19fe8:	60fb      	str	r3, [r7, #12]
   19fea:	e00c      	b.n	1a006 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19fec:	687b      	ldr	r3, [r7, #4]
   19fee:	3308      	adds	r3, #8
   19ff0:	60fb      	str	r3, [r7, #12]
   19ff2:	e002      	b.n	19ffa <vListInsert+0x2c>
   19ff4:	68fb      	ldr	r3, [r7, #12]
   19ff6:	685b      	ldr	r3, [r3, #4]
   19ff8:	60fb      	str	r3, [r7, #12]
   19ffa:	68fb      	ldr	r3, [r7, #12]
   19ffc:	685b      	ldr	r3, [r3, #4]
   19ffe:	681a      	ldr	r2, [r3, #0]
   1a000:	68bb      	ldr	r3, [r7, #8]
   1a002:	429a      	cmp	r2, r3
   1a004:	d9f6      	bls.n	19ff4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1a006:	68fb      	ldr	r3, [r7, #12]
   1a008:	685a      	ldr	r2, [r3, #4]
   1a00a:	683b      	ldr	r3, [r7, #0]
   1a00c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1a00e:	683b      	ldr	r3, [r7, #0]
   1a010:	685b      	ldr	r3, [r3, #4]
   1a012:	683a      	ldr	r2, [r7, #0]
   1a014:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1a016:	683b      	ldr	r3, [r7, #0]
   1a018:	68fa      	ldr	r2, [r7, #12]
   1a01a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1a01c:	68fb      	ldr	r3, [r7, #12]
   1a01e:	683a      	ldr	r2, [r7, #0]
   1a020:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1a022:	683b      	ldr	r3, [r7, #0]
   1a024:	687a      	ldr	r2, [r7, #4]
   1a026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1a028:	687b      	ldr	r3, [r7, #4]
   1a02a:	681b      	ldr	r3, [r3, #0]
   1a02c:	1c5a      	adds	r2, r3, #1
   1a02e:	687b      	ldr	r3, [r7, #4]
   1a030:	601a      	str	r2, [r3, #0]
}
   1a032:	46c0      	nop			; (mov r8, r8)
   1a034:	46bd      	mov	sp, r7
   1a036:	b004      	add	sp, #16
   1a038:	bd80      	pop	{r7, pc}

0001a03a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1a03a:	b580      	push	{r7, lr}
   1a03c:	b084      	sub	sp, #16
   1a03e:	af00      	add	r7, sp, #0
   1a040:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1a042:	687b      	ldr	r3, [r7, #4]
   1a044:	691b      	ldr	r3, [r3, #16]
   1a046:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1a048:	687b      	ldr	r3, [r7, #4]
   1a04a:	685b      	ldr	r3, [r3, #4]
   1a04c:	687a      	ldr	r2, [r7, #4]
   1a04e:	6892      	ldr	r2, [r2, #8]
   1a050:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1a052:	687b      	ldr	r3, [r7, #4]
   1a054:	689b      	ldr	r3, [r3, #8]
   1a056:	687a      	ldr	r2, [r7, #4]
   1a058:	6852      	ldr	r2, [r2, #4]
   1a05a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1a05c:	68fb      	ldr	r3, [r7, #12]
   1a05e:	685a      	ldr	r2, [r3, #4]
   1a060:	687b      	ldr	r3, [r7, #4]
   1a062:	429a      	cmp	r2, r3
   1a064:	d103      	bne.n	1a06e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1a066:	687b      	ldr	r3, [r7, #4]
   1a068:	689a      	ldr	r2, [r3, #8]
   1a06a:	68fb      	ldr	r3, [r7, #12]
   1a06c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1a06e:	687b      	ldr	r3, [r7, #4]
   1a070:	2200      	movs	r2, #0
   1a072:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1a074:	68fb      	ldr	r3, [r7, #12]
   1a076:	681b      	ldr	r3, [r3, #0]
   1a078:	1e5a      	subs	r2, r3, #1
   1a07a:	68fb      	ldr	r3, [r7, #12]
   1a07c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1a07e:	68fb      	ldr	r3, [r7, #12]
   1a080:	681b      	ldr	r3, [r3, #0]
}
   1a082:	0018      	movs	r0, r3
   1a084:	46bd      	mov	sp, r7
   1a086:	b004      	add	sp, #16
   1a088:	bd80      	pop	{r7, pc}
	...

0001a08c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1a08c:	b580      	push	{r7, lr}
   1a08e:	b084      	sub	sp, #16
   1a090:	af00      	add	r7, sp, #0
   1a092:	60f8      	str	r0, [r7, #12]
   1a094:	60b9      	str	r1, [r7, #8]
   1a096:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1a098:	68fb      	ldr	r3, [r7, #12]
   1a09a:	3b04      	subs	r3, #4
   1a09c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1a09e:	68fb      	ldr	r3, [r7, #12]
   1a0a0:	2280      	movs	r2, #128	; 0x80
   1a0a2:	0452      	lsls	r2, r2, #17
   1a0a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1a0a6:	68fb      	ldr	r3, [r7, #12]
   1a0a8:	3b04      	subs	r3, #4
   1a0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1a0ac:	68ba      	ldr	r2, [r7, #8]
   1a0ae:	68fb      	ldr	r3, [r7, #12]
   1a0b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1a0b2:	68fb      	ldr	r3, [r7, #12]
   1a0b4:	3b04      	subs	r3, #4
   1a0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1a0b8:	4a08      	ldr	r2, [pc, #32]	; (1a0dc <pxPortInitialiseStack+0x50>)
   1a0ba:	68fb      	ldr	r3, [r7, #12]
   1a0bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1a0be:	68fb      	ldr	r3, [r7, #12]
   1a0c0:	3b14      	subs	r3, #20
   1a0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1a0c4:	687a      	ldr	r2, [r7, #4]
   1a0c6:	68fb      	ldr	r3, [r7, #12]
   1a0c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1a0ca:	68fb      	ldr	r3, [r7, #12]
   1a0cc:	3b20      	subs	r3, #32
   1a0ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1a0d0:	68fb      	ldr	r3, [r7, #12]
}
   1a0d2:	0018      	movs	r0, r3
   1a0d4:	46bd      	mov	sp, r7
   1a0d6:	b004      	add	sp, #16
   1a0d8:	bd80      	pop	{r7, pc}
   1a0da:	46c0      	nop			; (mov r8, r8)
   1a0dc:	0001a0e1 	.word	0x0001a0e1

0001a0e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1a0e0:	b580      	push	{r7, lr}
   1a0e2:	b082      	sub	sp, #8
   1a0e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1a0e6:	2300      	movs	r3, #0
   1a0e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1a0ea:	4b07      	ldr	r3, [pc, #28]	; (1a108 <prvTaskExitError+0x28>)
   1a0ec:	681b      	ldr	r3, [r3, #0]
   1a0ee:	3301      	adds	r3, #1
   1a0f0:	d001      	beq.n	1a0f6 <prvTaskExitError+0x16>
   1a0f2:	b672      	cpsid	i
   1a0f4:	e7fe      	b.n	1a0f4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1a0f6:	b672      	cpsid	i
	while( ulDummy == 0 )
   1a0f8:	46c0      	nop			; (mov r8, r8)
   1a0fa:	687b      	ldr	r3, [r7, #4]
   1a0fc:	2b00      	cmp	r3, #0
   1a0fe:	d0fc      	beq.n	1a0fa <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1a100:	46c0      	nop			; (mov r8, r8)
   1a102:	46bd      	mov	sp, r7
   1a104:	b002      	add	sp, #8
   1a106:	bd80      	pop	{r7, pc}
   1a108:	20000108 	.word	0x20000108

0001a10c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1a10c:	b580      	push	{r7, lr}
   1a10e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1a110:	46c0      	nop			; (mov r8, r8)
   1a112:	46bd      	mov	sp, r7
   1a114:	bd80      	pop	{r7, pc}
	...

0001a120 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1a120:	4a0b      	ldr	r2, [pc, #44]	; (1a150 <pxCurrentTCBConst2>)
   1a122:	6813      	ldr	r3, [r2, #0]
   1a124:	6818      	ldr	r0, [r3, #0]
   1a126:	3020      	adds	r0, #32
   1a128:	f380 8809 	msr	PSP, r0
   1a12c:	2002      	movs	r0, #2
   1a12e:	f380 8814 	msr	CONTROL, r0
   1a132:	f3bf 8f6f 	isb	sy
   1a136:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1a138:	46ae      	mov	lr, r5
   1a13a:	bc08      	pop	{r3}
   1a13c:	bc04      	pop	{r2}
   1a13e:	b662      	cpsie	i
   1a140:	4718      	bx	r3
   1a142:	46c0      	nop			; (mov r8, r8)
   1a144:	46c0      	nop			; (mov r8, r8)
   1a146:	46c0      	nop			; (mov r8, r8)
   1a148:	46c0      	nop			; (mov r8, r8)
   1a14a:	46c0      	nop			; (mov r8, r8)
   1a14c:	46c0      	nop			; (mov r8, r8)
   1a14e:	46c0      	nop			; (mov r8, r8)

0001a150 <pxCurrentTCBConst2>:
   1a150:	20003f5c 	.word	0x20003f5c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1a154:	46c0      	nop			; (mov r8, r8)
   1a156:	46c0      	nop			; (mov r8, r8)

0001a158 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1a158:	b580      	push	{r7, lr}
   1a15a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1a15c:	4b0e      	ldr	r3, [pc, #56]	; (1a198 <xPortStartScheduler+0x40>)
   1a15e:	4a0e      	ldr	r2, [pc, #56]	; (1a198 <xPortStartScheduler+0x40>)
   1a160:	6812      	ldr	r2, [r2, #0]
   1a162:	21ff      	movs	r1, #255	; 0xff
   1a164:	0409      	lsls	r1, r1, #16
   1a166:	430a      	orrs	r2, r1
   1a168:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1a16a:	4b0b      	ldr	r3, [pc, #44]	; (1a198 <xPortStartScheduler+0x40>)
   1a16c:	4a0a      	ldr	r2, [pc, #40]	; (1a198 <xPortStartScheduler+0x40>)
   1a16e:	6812      	ldr	r2, [r2, #0]
   1a170:	21ff      	movs	r1, #255	; 0xff
   1a172:	0609      	lsls	r1, r1, #24
   1a174:	430a      	orrs	r2, r1
   1a176:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1a178:	4b08      	ldr	r3, [pc, #32]	; (1a19c <xPortStartScheduler+0x44>)
   1a17a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1a17c:	4b08      	ldr	r3, [pc, #32]	; (1a1a0 <xPortStartScheduler+0x48>)
   1a17e:	2200      	movs	r2, #0
   1a180:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1a182:	4b08      	ldr	r3, [pc, #32]	; (1a1a4 <xPortStartScheduler+0x4c>)
   1a184:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1a186:	4b08      	ldr	r3, [pc, #32]	; (1a1a8 <xPortStartScheduler+0x50>)
   1a188:	4798      	blx	r3
	prvTaskExitError();
   1a18a:	4b08      	ldr	r3, [pc, #32]	; (1a1ac <xPortStartScheduler+0x54>)
   1a18c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1a18e:	2300      	movs	r3, #0
}
   1a190:	0018      	movs	r0, r3
   1a192:	46bd      	mov	sp, r7
   1a194:	bd80      	pop	{r7, pc}
   1a196:	46c0      	nop			; (mov r8, r8)
   1a198:	e000ed20 	.word	0xe000ed20
   1a19c:	0001a2b9 	.word	0x0001a2b9
   1a1a0:	20000108 	.word	0x20000108
   1a1a4:	0001a121 	.word	0x0001a121
   1a1a8:	0001c815 	.word	0x0001c815
   1a1ac:	0001a0e1 	.word	0x0001a0e1

0001a1b0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1a1b0:	b580      	push	{r7, lr}
   1a1b2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1a1b4:	4b03      	ldr	r3, [pc, #12]	; (1a1c4 <vPortYield+0x14>)
   1a1b6:	2280      	movs	r2, #128	; 0x80
   1a1b8:	0552      	lsls	r2, r2, #21
   1a1ba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1a1bc:	46c0      	nop			; (mov r8, r8)
   1a1be:	46bd      	mov	sp, r7
   1a1c0:	bd80      	pop	{r7, pc}
   1a1c2:	46c0      	nop			; (mov r8, r8)
   1a1c4:	e000ed04 	.word	0xe000ed04

0001a1c8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1a1c8:	b580      	push	{r7, lr}
   1a1ca:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1a1cc:	b672      	cpsid	i
    uxCriticalNesting++;
   1a1ce:	4b06      	ldr	r3, [pc, #24]	; (1a1e8 <vPortEnterCritical+0x20>)
   1a1d0:	681b      	ldr	r3, [r3, #0]
   1a1d2:	1c5a      	adds	r2, r3, #1
   1a1d4:	4b04      	ldr	r3, [pc, #16]	; (1a1e8 <vPortEnterCritical+0x20>)
   1a1d6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1a1d8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1a1dc:	f3bf 8f6f 	isb	sy
}
   1a1e0:	46c0      	nop			; (mov r8, r8)
   1a1e2:	46bd      	mov	sp, r7
   1a1e4:	bd80      	pop	{r7, pc}
   1a1e6:	46c0      	nop			; (mov r8, r8)
   1a1e8:	20000108 	.word	0x20000108

0001a1ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1a1ec:	b580      	push	{r7, lr}
   1a1ee:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1a1f0:	4b09      	ldr	r3, [pc, #36]	; (1a218 <vPortExitCritical+0x2c>)
   1a1f2:	681b      	ldr	r3, [r3, #0]
   1a1f4:	2b00      	cmp	r3, #0
   1a1f6:	d101      	bne.n	1a1fc <vPortExitCritical+0x10>
   1a1f8:	b672      	cpsid	i
   1a1fa:	e7fe      	b.n	1a1fa <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1a1fc:	4b06      	ldr	r3, [pc, #24]	; (1a218 <vPortExitCritical+0x2c>)
   1a1fe:	681b      	ldr	r3, [r3, #0]
   1a200:	1e5a      	subs	r2, r3, #1
   1a202:	4b05      	ldr	r3, [pc, #20]	; (1a218 <vPortExitCritical+0x2c>)
   1a204:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1a206:	4b04      	ldr	r3, [pc, #16]	; (1a218 <vPortExitCritical+0x2c>)
   1a208:	681b      	ldr	r3, [r3, #0]
   1a20a:	2b00      	cmp	r3, #0
   1a20c:	d100      	bne.n	1a210 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1a20e:	b662      	cpsie	i
    }
}
   1a210:	46c0      	nop			; (mov r8, r8)
   1a212:	46bd      	mov	sp, r7
   1a214:	bd80      	pop	{r7, pc}
   1a216:	46c0      	nop			; (mov r8, r8)
   1a218:	20000108 	.word	0x20000108

0001a21c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1a21c:	f3ef 8010 	mrs	r0, PRIMASK
   1a220:	b672      	cpsid	i
   1a222:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1a224:	46c0      	nop			; (mov r8, r8)
   1a226:	0018      	movs	r0, r3

0001a228 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1a228:	f380 8810 	msr	PRIMASK, r0
   1a22c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1a22e:	46c0      	nop			; (mov r8, r8)

0001a230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1a230:	f3ef 8009 	mrs	r0, PSP
   1a234:	4b0e      	ldr	r3, [pc, #56]	; (1a270 <pxCurrentTCBConst>)
   1a236:	681a      	ldr	r2, [r3, #0]
   1a238:	3820      	subs	r0, #32
   1a23a:	6010      	str	r0, [r2, #0]
   1a23c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1a23e:	4644      	mov	r4, r8
   1a240:	464d      	mov	r5, r9
   1a242:	4656      	mov	r6, sl
   1a244:	465f      	mov	r7, fp
   1a246:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1a248:	b508      	push	{r3, lr}
   1a24a:	b672      	cpsid	i
   1a24c:	f002 fae2 	bl	1c814 <vTaskSwitchContext>
   1a250:	b662      	cpsie	i
   1a252:	bc0c      	pop	{r2, r3}
   1a254:	6811      	ldr	r1, [r2, #0]
   1a256:	6808      	ldr	r0, [r1, #0]
   1a258:	3010      	adds	r0, #16
   1a25a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1a25c:	46a0      	mov	r8, r4
   1a25e:	46a9      	mov	r9, r5
   1a260:	46b2      	mov	sl, r6
   1a262:	46bb      	mov	fp, r7
   1a264:	f380 8809 	msr	PSP, r0
   1a268:	3820      	subs	r0, #32
   1a26a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1a26c:	4718      	bx	r3
   1a26e:	46c0      	nop			; (mov r8, r8)

0001a270 <pxCurrentTCBConst>:
   1a270:	20003f5c 	.word	0x20003f5c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1a274:	46c0      	nop			; (mov r8, r8)
   1a276:	46c0      	nop			; (mov r8, r8)

0001a278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1a278:	b580      	push	{r7, lr}
   1a27a:	b082      	sub	sp, #8
   1a27c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1a27e:	4b0a      	ldr	r3, [pc, #40]	; (1a2a8 <SysTick_Handler+0x30>)
   1a280:	4798      	blx	r3
   1a282:	0003      	movs	r3, r0
   1a284:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1a286:	4b09      	ldr	r3, [pc, #36]	; (1a2ac <SysTick_Handler+0x34>)
   1a288:	4798      	blx	r3
   1a28a:	1e03      	subs	r3, r0, #0
   1a28c:	d003      	beq.n	1a296 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1a28e:	4b08      	ldr	r3, [pc, #32]	; (1a2b0 <SysTick_Handler+0x38>)
   1a290:	2280      	movs	r2, #128	; 0x80
   1a292:	0552      	lsls	r2, r2, #21
   1a294:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1a296:	687b      	ldr	r3, [r7, #4]
   1a298:	0018      	movs	r0, r3
   1a29a:	4b06      	ldr	r3, [pc, #24]	; (1a2b4 <SysTick_Handler+0x3c>)
   1a29c:	4798      	blx	r3
}
   1a29e:	46c0      	nop			; (mov r8, r8)
   1a2a0:	46bd      	mov	sp, r7
   1a2a2:	b002      	add	sp, #8
   1a2a4:	bd80      	pop	{r7, pc}
   1a2a6:	46c0      	nop			; (mov r8, r8)
   1a2a8:	0001a21d 	.word	0x0001a21d
   1a2ac:	0001c625 	.word	0x0001c625
   1a2b0:	e000ed04 	.word	0xe000ed04
   1a2b4:	0001a229 	.word	0x0001a229

0001a2b8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1a2b8:	b5b0      	push	{r4, r5, r7, lr}
   1a2ba:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1a2bc:	4b0b      	ldr	r3, [pc, #44]	; (1a2ec <prvSetupTimerInterrupt+0x34>)
   1a2be:	2200      	movs	r2, #0
   1a2c0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1a2c2:	4b0b      	ldr	r3, [pc, #44]	; (1a2f0 <prvSetupTimerInterrupt+0x38>)
   1a2c4:	2200      	movs	r2, #0
   1a2c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1a2c8:	4c0a      	ldr	r4, [pc, #40]	; (1a2f4 <prvSetupTimerInterrupt+0x3c>)
   1a2ca:	2000      	movs	r0, #0
   1a2cc:	4b0a      	ldr	r3, [pc, #40]	; (1a2f8 <prvSetupTimerInterrupt+0x40>)
   1a2ce:	4798      	blx	r3
   1a2d0:	4b0a      	ldr	r3, [pc, #40]	; (1a2fc <prvSetupTimerInterrupt+0x44>)
   1a2d2:	22fa      	movs	r2, #250	; 0xfa
   1a2d4:	0091      	lsls	r1, r2, #2
   1a2d6:	4798      	blx	r3
   1a2d8:	0003      	movs	r3, r0
   1a2da:	3b01      	subs	r3, #1
   1a2dc:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1a2de:	4b03      	ldr	r3, [pc, #12]	; (1a2ec <prvSetupTimerInterrupt+0x34>)
   1a2e0:	2207      	movs	r2, #7
   1a2e2:	601a      	str	r2, [r3, #0]
}
   1a2e4:	46c0      	nop			; (mov r8, r8)
   1a2e6:	46bd      	mov	sp, r7
   1a2e8:	bdb0      	pop	{r4, r5, r7, pc}
   1a2ea:	46c0      	nop			; (mov r8, r8)
   1a2ec:	e000e010 	.word	0xe000e010
   1a2f0:	e000e018 	.word	0xe000e018
   1a2f4:	e000e014 	.word	0xe000e014
   1a2f8:	00029e11 	.word	0x00029e11
   1a2fc:	00032a85 	.word	0x00032a85

0001a300 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1a300:	b580      	push	{r7, lr}
   1a302:	b084      	sub	sp, #16
   1a304:	af00      	add	r7, sp, #0
   1a306:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1a308:	2300      	movs	r3, #0
   1a30a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1a30c:	687b      	ldr	r3, [r7, #4]
   1a30e:	2207      	movs	r2, #7
   1a310:	4013      	ands	r3, r2
   1a312:	d004      	beq.n	1a31e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1a314:	687b      	ldr	r3, [r7, #4]
   1a316:	2207      	movs	r2, #7
   1a318:	4393      	bics	r3, r2
   1a31a:	3308      	adds	r3, #8
   1a31c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1a31e:	4b21      	ldr	r3, [pc, #132]	; (1a3a4 <pvPortMalloc+0xa4>)
   1a320:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1a322:	4b21      	ldr	r3, [pc, #132]	; (1a3a8 <pvPortMalloc+0xa8>)
   1a324:	681b      	ldr	r3, [r3, #0]
   1a326:	2b00      	cmp	r3, #0
   1a328:	d105      	bne.n	1a336 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1a32a:	4b20      	ldr	r3, [pc, #128]	; (1a3ac <pvPortMalloc+0xac>)
   1a32c:	2207      	movs	r2, #7
   1a32e:	4393      	bics	r3, r2
   1a330:	001a      	movs	r2, r3
   1a332:	4b1d      	ldr	r3, [pc, #116]	; (1a3a8 <pvPortMalloc+0xa8>)
   1a334:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a336:	4b1e      	ldr	r3, [pc, #120]	; (1a3b0 <pvPortMalloc+0xb0>)
   1a338:	681a      	ldr	r2, [r3, #0]
   1a33a:	687b      	ldr	r3, [r7, #4]
   1a33c:	18d3      	adds	r3, r2, r3
   1a33e:	4a1d      	ldr	r2, [pc, #116]	; (1a3b4 <pvPortMalloc+0xb4>)
   1a340:	4293      	cmp	r3, r2
   1a342:	d813      	bhi.n	1a36c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1a344:	4b1a      	ldr	r3, [pc, #104]	; (1a3b0 <pvPortMalloc+0xb0>)
   1a346:	681a      	ldr	r2, [r3, #0]
   1a348:	687b      	ldr	r3, [r7, #4]
   1a34a:	18d2      	adds	r2, r2, r3
   1a34c:	4b18      	ldr	r3, [pc, #96]	; (1a3b0 <pvPortMalloc+0xb0>)
   1a34e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a350:	429a      	cmp	r2, r3
   1a352:	d90b      	bls.n	1a36c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1a354:	4b14      	ldr	r3, [pc, #80]	; (1a3a8 <pvPortMalloc+0xa8>)
   1a356:	681a      	ldr	r2, [r3, #0]
   1a358:	4b15      	ldr	r3, [pc, #84]	; (1a3b0 <pvPortMalloc+0xb0>)
   1a35a:	681b      	ldr	r3, [r3, #0]
   1a35c:	18d3      	adds	r3, r2, r3
   1a35e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1a360:	4b13      	ldr	r3, [pc, #76]	; (1a3b0 <pvPortMalloc+0xb0>)
   1a362:	681a      	ldr	r2, [r3, #0]
   1a364:	687b      	ldr	r3, [r7, #4]
   1a366:	18d2      	adds	r2, r2, r3
   1a368:	4b11      	ldr	r3, [pc, #68]	; (1a3b0 <pvPortMalloc+0xb0>)
   1a36a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1a36c:	68fb      	ldr	r3, [r7, #12]
   1a36e:	2b00      	cmp	r3, #0
   1a370:	d006      	beq.n	1a380 <pvPortMalloc+0x80>
   1a372:	68fb      	ldr	r3, [r7, #12]
   1a374:	687a      	ldr	r2, [r7, #4]
   1a376:	0019      	movs	r1, r3
   1a378:	2094      	movs	r0, #148	; 0x94
   1a37a:	4b0f      	ldr	r3, [pc, #60]	; (1a3b8 <pvPortMalloc+0xb8>)
   1a37c:	4798      	blx	r3
   1a37e:	e005      	b.n	1a38c <pvPortMalloc+0x8c>
   1a380:	68fb      	ldr	r3, [r7, #12]
   1a382:	687a      	ldr	r2, [r7, #4]
   1a384:	0019      	movs	r1, r3
   1a386:	20e8      	movs	r0, #232	; 0xe8
   1a388:	4b0b      	ldr	r3, [pc, #44]	; (1a3b8 <pvPortMalloc+0xb8>)
   1a38a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1a38c:	4b0b      	ldr	r3, [pc, #44]	; (1a3bc <pvPortMalloc+0xbc>)
   1a38e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1a390:	68fb      	ldr	r3, [r7, #12]
   1a392:	2b00      	cmp	r3, #0
   1a394:	d101      	bne.n	1a39a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1a396:	4b0a      	ldr	r3, [pc, #40]	; (1a3c0 <pvPortMalloc+0xc0>)
   1a398:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1a39a:	68fb      	ldr	r3, [r7, #12]
}
   1a39c:	0018      	movs	r0, r3
   1a39e:	46bd      	mov	sp, r7
   1a3a0:	b004      	add	sp, #16
   1a3a2:	bd80      	pop	{r7, pc}
   1a3a4:	0001c481 	.word	0x0001c481
   1a3a8:	20003f58 	.word	0x20003f58
   1a3ac:	20000c94 	.word	0x20000c94
   1a3b0:	20003f54 	.word	0x20003f54
   1a3b4:	000032bf 	.word	0x000032bf
   1a3b8:	00018a69 	.word	0x00018a69
   1a3bc:	0001c499 	.word	0x0001c499
   1a3c0:	00032a55 	.word	0x00032a55

0001a3c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1a3c4:	b580      	push	{r7, lr}
   1a3c6:	b082      	sub	sp, #8
   1a3c8:	af00      	add	r7, sp, #0
   1a3ca:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1a3cc:	687b      	ldr	r3, [r7, #4]
   1a3ce:	2b00      	cmp	r3, #0
   1a3d0:	d001      	beq.n	1a3d6 <vPortFree+0x12>
   1a3d2:	b672      	cpsid	i
   1a3d4:	e7fe      	b.n	1a3d4 <vPortFree+0x10>
}
   1a3d6:	46c0      	nop			; (mov r8, r8)
   1a3d8:	46bd      	mov	sp, r7
   1a3da:	b002      	add	sp, #8
   1a3dc:	bd80      	pop	{r7, pc}
	...

0001a3e0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1a3e0:	b580      	push	{r7, lr}
   1a3e2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1a3e4:	4b03      	ldr	r3, [pc, #12]	; (1a3f4 <xPortGetFreeHeapSize+0x14>)
   1a3e6:	681b      	ldr	r3, [r3, #0]
   1a3e8:	22cb      	movs	r2, #203	; 0xcb
   1a3ea:	0192      	lsls	r2, r2, #6
   1a3ec:	1ad3      	subs	r3, r2, r3
}
   1a3ee:	0018      	movs	r0, r3
   1a3f0:	46bd      	mov	sp, r7
   1a3f2:	bd80      	pop	{r7, pc}
   1a3f4:	20003f54 	.word	0x20003f54

0001a3f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1a3f8:	b580      	push	{r7, lr}
   1a3fa:	b084      	sub	sp, #16
   1a3fc:	af00      	add	r7, sp, #0
   1a3fe:	6078      	str	r0, [r7, #4]
   1a400:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a402:	687b      	ldr	r3, [r7, #4]
   1a404:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1a406:	68fb      	ldr	r3, [r7, #12]
   1a408:	2b00      	cmp	r3, #0
   1a40a:	d101      	bne.n	1a410 <xQueueGenericReset+0x18>
   1a40c:	b672      	cpsid	i
   1a40e:	e7fe      	b.n	1a40e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1a410:	4b23      	ldr	r3, [pc, #140]	; (1a4a0 <xQueueGenericReset+0xa8>)
   1a412:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1a414:	68fb      	ldr	r3, [r7, #12]
   1a416:	681a      	ldr	r2, [r3, #0]
   1a418:	68fb      	ldr	r3, [r7, #12]
   1a41a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1a41c:	68fb      	ldr	r3, [r7, #12]
   1a41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a420:	434b      	muls	r3, r1
   1a422:	18d2      	adds	r2, r2, r3
   1a424:	68fb      	ldr	r3, [r7, #12]
   1a426:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1a428:	68fb      	ldr	r3, [r7, #12]
   1a42a:	2200      	movs	r2, #0
   1a42c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1a42e:	68fb      	ldr	r3, [r7, #12]
   1a430:	681a      	ldr	r2, [r3, #0]
   1a432:	68fb      	ldr	r3, [r7, #12]
   1a434:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1a436:	68fb      	ldr	r3, [r7, #12]
   1a438:	681a      	ldr	r2, [r3, #0]
   1a43a:	68fb      	ldr	r3, [r7, #12]
   1a43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a43e:	1e59      	subs	r1, r3, #1
   1a440:	68fb      	ldr	r3, [r7, #12]
   1a442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a444:	434b      	muls	r3, r1
   1a446:	18d2      	adds	r2, r2, r3
   1a448:	68fb      	ldr	r3, [r7, #12]
   1a44a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1a44c:	68fb      	ldr	r3, [r7, #12]
   1a44e:	2244      	movs	r2, #68	; 0x44
   1a450:	21ff      	movs	r1, #255	; 0xff
   1a452:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1a454:	68fb      	ldr	r3, [r7, #12]
   1a456:	2245      	movs	r2, #69	; 0x45
   1a458:	21ff      	movs	r1, #255	; 0xff
   1a45a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1a45c:	683b      	ldr	r3, [r7, #0]
   1a45e:	2b00      	cmp	r3, #0
   1a460:	d10d      	bne.n	1a47e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a462:	68fb      	ldr	r3, [r7, #12]
   1a464:	691b      	ldr	r3, [r3, #16]
   1a466:	2b00      	cmp	r3, #0
   1a468:	d013      	beq.n	1a492 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a46a:	68fb      	ldr	r3, [r7, #12]
   1a46c:	3310      	adds	r3, #16
   1a46e:	0018      	movs	r0, r3
   1a470:	4b0c      	ldr	r3, [pc, #48]	; (1a4a4 <xQueueGenericReset+0xac>)
   1a472:	4798      	blx	r3
   1a474:	1e03      	subs	r3, r0, #0
   1a476:	d00c      	beq.n	1a492 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1a478:	4b0b      	ldr	r3, [pc, #44]	; (1a4a8 <xQueueGenericReset+0xb0>)
   1a47a:	4798      	blx	r3
   1a47c:	e009      	b.n	1a492 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1a47e:	68fb      	ldr	r3, [r7, #12]
   1a480:	3310      	adds	r3, #16
   1a482:	0018      	movs	r0, r3
   1a484:	4b09      	ldr	r3, [pc, #36]	; (1a4ac <xQueueGenericReset+0xb4>)
   1a486:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1a488:	68fb      	ldr	r3, [r7, #12]
   1a48a:	3324      	adds	r3, #36	; 0x24
   1a48c:	0018      	movs	r0, r3
   1a48e:	4b07      	ldr	r3, [pc, #28]	; (1a4ac <xQueueGenericReset+0xb4>)
   1a490:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1a492:	4b07      	ldr	r3, [pc, #28]	; (1a4b0 <xQueueGenericReset+0xb8>)
   1a494:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1a496:	2301      	movs	r3, #1
}
   1a498:	0018      	movs	r0, r3
   1a49a:	46bd      	mov	sp, r7
   1a49c:	b004      	add	sp, #16
   1a49e:	bd80      	pop	{r7, pc}
   1a4a0:	0001a1c9 	.word	0x0001a1c9
   1a4a4:	0001ca59 	.word	0x0001ca59
   1a4a8:	0001a1b1 	.word	0x0001a1b1
   1a4ac:	00019f39 	.word	0x00019f39
   1a4b0:	0001a1ed 	.word	0x0001a1ed

0001a4b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1a4b4:	b590      	push	{r4, r7, lr}
   1a4b6:	b08b      	sub	sp, #44	; 0x2c
   1a4b8:	af02      	add	r7, sp, #8
   1a4ba:	60f8      	str	r0, [r7, #12]
   1a4bc:	60b9      	str	r1, [r7, #8]
   1a4be:	1dfb      	adds	r3, r7, #7
   1a4c0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1a4c2:	68fb      	ldr	r3, [r7, #12]
   1a4c4:	2b00      	cmp	r3, #0
   1a4c6:	d101      	bne.n	1a4cc <xQueueGenericCreate+0x18>
   1a4c8:	b672      	cpsid	i
   1a4ca:	e7fe      	b.n	1a4ca <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1a4cc:	68bb      	ldr	r3, [r7, #8]
   1a4ce:	2b00      	cmp	r3, #0
   1a4d0:	d102      	bne.n	1a4d8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1a4d2:	2300      	movs	r3, #0
   1a4d4:	61fb      	str	r3, [r7, #28]
   1a4d6:	e003      	b.n	1a4e0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a4d8:	68fb      	ldr	r3, [r7, #12]
   1a4da:	68ba      	ldr	r2, [r7, #8]
   1a4dc:	4353      	muls	r3, r2
   1a4de:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1a4e0:	69fb      	ldr	r3, [r7, #28]
   1a4e2:	3354      	adds	r3, #84	; 0x54
   1a4e4:	0018      	movs	r0, r3
   1a4e6:	4b19      	ldr	r3, [pc, #100]	; (1a54c <xQueueGenericCreate+0x98>)
   1a4e8:	4798      	blx	r3
   1a4ea:	0003      	movs	r3, r0
   1a4ec:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1a4ee:	69bb      	ldr	r3, [r7, #24]
   1a4f0:	2b00      	cmp	r3, #0
   1a4f2:	d00d      	beq.n	1a510 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1a4f4:	69bb      	ldr	r3, [r7, #24]
   1a4f6:	3354      	adds	r3, #84	; 0x54
   1a4f8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1a4fa:	1dfb      	adds	r3, r7, #7
   1a4fc:	781c      	ldrb	r4, [r3, #0]
   1a4fe:	697a      	ldr	r2, [r7, #20]
   1a500:	68b9      	ldr	r1, [r7, #8]
   1a502:	68f8      	ldr	r0, [r7, #12]
   1a504:	69bb      	ldr	r3, [r7, #24]
   1a506:	9300      	str	r3, [sp, #0]
   1a508:	0023      	movs	r3, r4
   1a50a:	4c11      	ldr	r4, [pc, #68]	; (1a550 <xQueueGenericCreate+0x9c>)
   1a50c:	47a0      	blx	r4
   1a50e:	e017      	b.n	1a540 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1a510:	4b10      	ldr	r3, [pc, #64]	; (1a554 <xQueueGenericCreate+0xa0>)
   1a512:	4798      	blx	r3
   1a514:	0003      	movs	r3, r0
   1a516:	0018      	movs	r0, r3
   1a518:	4b0f      	ldr	r3, [pc, #60]	; (1a558 <xQueueGenericCreate+0xa4>)
   1a51a:	4798      	blx	r3
   1a51c:	0003      	movs	r3, r0
   1a51e:	001a      	movs	r2, r3
   1a520:	4b0e      	ldr	r3, [pc, #56]	; (1a55c <xQueueGenericCreate+0xa8>)
   1a522:	881b      	ldrh	r3, [r3, #0]
   1a524:	4013      	ands	r3, r2
   1a526:	b29b      	uxth	r3, r3
   1a528:	2b00      	cmp	r3, #0
   1a52a:	d009      	beq.n	1a540 <xQueueGenericCreate+0x8c>
   1a52c:	1dfb      	adds	r3, r7, #7
   1a52e:	781b      	ldrb	r3, [r3, #0]
   1a530:	4a0b      	ldr	r2, [pc, #44]	; (1a560 <xQueueGenericCreate+0xac>)
   1a532:	5cd3      	ldrb	r3, [r2, r3]
   1a534:	3340      	adds	r3, #64	; 0x40
   1a536:	b2db      	uxtb	r3, r3
   1a538:	2100      	movs	r1, #0
   1a53a:	0018      	movs	r0, r3
   1a53c:	4b09      	ldr	r3, [pc, #36]	; (1a564 <xQueueGenericCreate+0xb0>)
   1a53e:	4798      	blx	r3
		}

		return pxNewQueue;
   1a540:	69bb      	ldr	r3, [r7, #24]
	}
   1a542:	0018      	movs	r0, r3
   1a544:	46bd      	mov	sp, r7
   1a546:	b009      	add	sp, #36	; 0x24
   1a548:	bd90      	pop	{r4, r7, pc}
   1a54a:	46c0      	nop			; (mov r8, r8)
   1a54c:	0001a301 	.word	0x0001a301
   1a550:	0001a569 	.word	0x0001a569
   1a554:	0001845d 	.word	0x0001845d
   1a558:	000181c1 	.word	0x000181c1
   1a55c:	20000104 	.word	0x20000104
   1a560:	200000f8 	.word	0x200000f8
   1a564:	00018ec1 	.word	0x00018ec1

0001a568 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1a568:	b5b0      	push	{r4, r5, r7, lr}
   1a56a:	b084      	sub	sp, #16
   1a56c:	af00      	add	r7, sp, #0
   1a56e:	60f8      	str	r0, [r7, #12]
   1a570:	60b9      	str	r1, [r7, #8]
   1a572:	607a      	str	r2, [r7, #4]
   1a574:	001a      	movs	r2, r3
   1a576:	1cfb      	adds	r3, r7, #3
   1a578:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1a57a:	68bb      	ldr	r3, [r7, #8]
   1a57c:	2b00      	cmp	r3, #0
   1a57e:	d103      	bne.n	1a588 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1a580:	6a3b      	ldr	r3, [r7, #32]
   1a582:	6a3a      	ldr	r2, [r7, #32]
   1a584:	601a      	str	r2, [r3, #0]
   1a586:	e002      	b.n	1a58e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1a588:	6a3b      	ldr	r3, [r7, #32]
   1a58a:	687a      	ldr	r2, [r7, #4]
   1a58c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1a58e:	6a3b      	ldr	r3, [r7, #32]
   1a590:	68fa      	ldr	r2, [r7, #12]
   1a592:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1a594:	6a3b      	ldr	r3, [r7, #32]
   1a596:	68ba      	ldr	r2, [r7, #8]
   1a598:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1a59a:	6a3b      	ldr	r3, [r7, #32]
   1a59c:	2101      	movs	r1, #1
   1a59e:	0018      	movs	r0, r3
   1a5a0:	4b41      	ldr	r3, [pc, #260]	; (1a6a8 <prvInitialiseNewQueue+0x140>)
   1a5a2:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1a5a4:	6a3b      	ldr	r3, [r7, #32]
   1a5a6:	1cfa      	adds	r2, r7, #3
   1a5a8:	2150      	movs	r1, #80	; 0x50
   1a5aa:	7812      	ldrb	r2, [r2, #0]
   1a5ac:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1a5ae:	6a3b      	ldr	r3, [r7, #32]
   1a5b0:	2200      	movs	r2, #0
   1a5b2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1a5b4:	6a3b      	ldr	r3, [r7, #32]
   1a5b6:	0018      	movs	r0, r3
   1a5b8:	4b3c      	ldr	r3, [pc, #240]	; (1a6ac <prvInitialiseNewQueue+0x144>)
   1a5ba:	4798      	blx	r3
   1a5bc:	0003      	movs	r3, r0
   1a5be:	001a      	movs	r2, r3
   1a5c0:	4b3b      	ldr	r3, [pc, #236]	; (1a6b0 <prvInitialiseNewQueue+0x148>)
   1a5c2:	5c9b      	ldrb	r3, [r3, r2]
   1a5c4:	0018      	movs	r0, r3
   1a5c6:	4b3b      	ldr	r3, [pc, #236]	; (1a6b4 <prvInitialiseNewQueue+0x14c>)
   1a5c8:	4798      	blx	r3
   1a5ca:	0003      	movs	r3, r0
   1a5cc:	b29a      	uxth	r2, r3
   1a5ce:	6a3b      	ldr	r3, [r7, #32]
   1a5d0:	0011      	movs	r1, r2
   1a5d2:	0018      	movs	r0, r3
   1a5d4:	4b38      	ldr	r3, [pc, #224]	; (1a6b8 <prvInitialiseNewQueue+0x150>)
   1a5d6:	4798      	blx	r3
   1a5d8:	4b38      	ldr	r3, [pc, #224]	; (1a6bc <prvInitialiseNewQueue+0x154>)
   1a5da:	881a      	ldrh	r2, [r3, #0]
   1a5dc:	6a3b      	ldr	r3, [r7, #32]
   1a5de:	0011      	movs	r1, r2
   1a5e0:	0018      	movs	r0, r3
   1a5e2:	4b37      	ldr	r3, [pc, #220]	; (1a6c0 <prvInitialiseNewQueue+0x158>)
   1a5e4:	4798      	blx	r3
   1a5e6:	6a3b      	ldr	r3, [r7, #32]
   1a5e8:	0018      	movs	r0, r3
   1a5ea:	4b30      	ldr	r3, [pc, #192]	; (1a6ac <prvInitialiseNewQueue+0x144>)
   1a5ec:	4798      	blx	r3
   1a5ee:	0003      	movs	r3, r0
   1a5f0:	001a      	movs	r2, r3
   1a5f2:	4b2f      	ldr	r3, [pc, #188]	; (1a6b0 <prvInitialiseNewQueue+0x148>)
   1a5f4:	5c9c      	ldrb	r4, [r3, r2]
   1a5f6:	6a3b      	ldr	r3, [r7, #32]
   1a5f8:	0018      	movs	r0, r3
   1a5fa:	4b32      	ldr	r3, [pc, #200]	; (1a6c4 <prvInitialiseNewQueue+0x15c>)
   1a5fc:	4798      	blx	r3
   1a5fe:	0003      	movs	r3, r0
   1a600:	b2db      	uxtb	r3, r3
   1a602:	0019      	movs	r1, r3
   1a604:	0020      	movs	r0, r4
   1a606:	4b30      	ldr	r3, [pc, #192]	; (1a6c8 <prvInitialiseNewQueue+0x160>)
   1a608:	4798      	blx	r3
   1a60a:	4b30      	ldr	r3, [pc, #192]	; (1a6cc <prvInitialiseNewQueue+0x164>)
   1a60c:	4798      	blx	r3
   1a60e:	0003      	movs	r3, r0
   1a610:	0018      	movs	r0, r3
   1a612:	4b2f      	ldr	r3, [pc, #188]	; (1a6d0 <prvInitialiseNewQueue+0x168>)
   1a614:	4798      	blx	r3
   1a616:	0003      	movs	r3, r0
   1a618:	001a      	movs	r2, r3
   1a61a:	4b2e      	ldr	r3, [pc, #184]	; (1a6d4 <prvInitialiseNewQueue+0x16c>)
   1a61c:	881b      	ldrh	r3, [r3, #0]
   1a61e:	4013      	ands	r3, r2
   1a620:	b29b      	uxth	r3, r3
   1a622:	2b00      	cmp	r3, #0
   1a624:	d029      	beq.n	1a67a <prvInitialiseNewQueue+0x112>
   1a626:	6a3b      	ldr	r3, [r7, #32]
   1a628:	0018      	movs	r0, r3
   1a62a:	4b2b      	ldr	r3, [pc, #172]	; (1a6d8 <prvInitialiseNewQueue+0x170>)
   1a62c:	4798      	blx	r3
   1a62e:	0003      	movs	r3, r0
   1a630:	001a      	movs	r2, r3
   1a632:	4b28      	ldr	r3, [pc, #160]	; (1a6d4 <prvInitialiseNewQueue+0x16c>)
   1a634:	881b      	ldrh	r3, [r3, #0]
   1a636:	4013      	ands	r3, r2
   1a638:	b29b      	uxth	r3, r3
   1a63a:	2b00      	cmp	r3, #0
   1a63c:	d01d      	beq.n	1a67a <prvInitialiseNewQueue+0x112>
   1a63e:	6a3b      	ldr	r3, [r7, #32]
   1a640:	0018      	movs	r0, r3
   1a642:	4b1a      	ldr	r3, [pc, #104]	; (1a6ac <prvInitialiseNewQueue+0x144>)
   1a644:	4798      	blx	r3
   1a646:	0003      	movs	r3, r0
   1a648:	001a      	movs	r2, r3
   1a64a:	4b19      	ldr	r3, [pc, #100]	; (1a6b0 <prvInitialiseNewQueue+0x148>)
   1a64c:	5c9b      	ldrb	r3, [r3, r2]
   1a64e:	3318      	adds	r3, #24
   1a650:	b2db      	uxtb	r3, r3
   1a652:	001d      	movs	r5, r3
   1a654:	6a3b      	ldr	r3, [r7, #32]
   1a656:	0018      	movs	r0, r3
   1a658:	4b14      	ldr	r3, [pc, #80]	; (1a6ac <prvInitialiseNewQueue+0x144>)
   1a65a:	4798      	blx	r3
   1a65c:	0003      	movs	r3, r0
   1a65e:	001a      	movs	r2, r3
   1a660:	4b13      	ldr	r3, [pc, #76]	; (1a6b0 <prvInitialiseNewQueue+0x148>)
   1a662:	5c9c      	ldrb	r4, [r3, r2]
   1a664:	6a3b      	ldr	r3, [r7, #32]
   1a666:	0018      	movs	r0, r3
   1a668:	4b16      	ldr	r3, [pc, #88]	; (1a6c4 <prvInitialiseNewQueue+0x15c>)
   1a66a:	4798      	blx	r3
   1a66c:	0003      	movs	r3, r0
   1a66e:	b2db      	uxtb	r3, r3
   1a670:	001a      	movs	r2, r3
   1a672:	0021      	movs	r1, r4
   1a674:	0028      	movs	r0, r5
   1a676:	4b19      	ldr	r3, [pc, #100]	; (1a6dc <prvInitialiseNewQueue+0x174>)
   1a678:	4798      	blx	r3
   1a67a:	6a3b      	ldr	r3, [r7, #32]
   1a67c:	0018      	movs	r0, r3
   1a67e:	4b0b      	ldr	r3, [pc, #44]	; (1a6ac <prvInitialiseNewQueue+0x144>)
   1a680:	4798      	blx	r3
   1a682:	0003      	movs	r3, r0
   1a684:	001a      	movs	r2, r3
   1a686:	4b0a      	ldr	r3, [pc, #40]	; (1a6b0 <prvInitialiseNewQueue+0x148>)
   1a688:	5c9c      	ldrb	r4, [r3, r2]
   1a68a:	6a3b      	ldr	r3, [r7, #32]
   1a68c:	0018      	movs	r0, r3
   1a68e:	4b0d      	ldr	r3, [pc, #52]	; (1a6c4 <prvInitialiseNewQueue+0x15c>)
   1a690:	4798      	blx	r3
   1a692:	0003      	movs	r3, r0
   1a694:	b2db      	uxtb	r3, r3
   1a696:	2200      	movs	r2, #0
   1a698:	0019      	movs	r1, r3
   1a69a:	0020      	movs	r0, r4
   1a69c:	4b10      	ldr	r3, [pc, #64]	; (1a6e0 <prvInitialiseNewQueue+0x178>)
   1a69e:	4798      	blx	r3
}
   1a6a0:	46c0      	nop			; (mov r8, r8)
   1a6a2:	46bd      	mov	sp, r7
   1a6a4:	b004      	add	sp, #16
   1a6a6:	bdb0      	pop	{r4, r5, r7, pc}
   1a6a8:	0001a3f9 	.word	0x0001a3f9
   1a6ac:	00018181 	.word	0x00018181
   1a6b0:	200000f8 	.word	0x200000f8
   1a6b4:	00019741 	.word	0x00019741
   1a6b8:	000182a5 	.word	0x000182a5
   1a6bc:	20000106 	.word	0x20000106
   1a6c0:	000182e1 	.word	0x000182e1
   1a6c4:	00018261 	.word	0x00018261
   1a6c8:	000198d9 	.word	0x000198d9
   1a6cc:	0001845d 	.word	0x0001845d
   1a6d0:	000181c1 	.word	0x000181c1
   1a6d4:	20000104 	.word	0x20000104
   1a6d8:	00018281 	.word	0x00018281
   1a6dc:	00018bb9 	.word	0x00018bb9
   1a6e0:	00019215 	.word	0x00019215

0001a6e4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1a6e4:	b590      	push	{r4, r7, lr}
   1a6e6:	b083      	sub	sp, #12
   1a6e8:	af00      	add	r7, sp, #0
   1a6ea:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1a6ec:	687b      	ldr	r3, [r7, #4]
   1a6ee:	2b00      	cmp	r3, #0
   1a6f0:	d00e      	beq.n	1a710 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1a6f2:	687b      	ldr	r3, [r7, #4]
   1a6f4:	2200      	movs	r2, #0
   1a6f6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1a6f8:	687b      	ldr	r3, [r7, #4]
   1a6fa:	2200      	movs	r2, #0
   1a6fc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1a6fe:	687b      	ldr	r3, [r7, #4]
   1a700:	2200      	movs	r2, #0
   1a702:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1a704:	6878      	ldr	r0, [r7, #4]
   1a706:	2300      	movs	r3, #0
   1a708:	2200      	movs	r2, #0
   1a70a:	2100      	movs	r1, #0
   1a70c:	4c02      	ldr	r4, [pc, #8]	; (1a718 <prvInitialiseMutex+0x34>)
   1a70e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1a710:	46c0      	nop			; (mov r8, r8)
   1a712:	46bd      	mov	sp, r7
   1a714:	b003      	add	sp, #12
   1a716:	bd90      	pop	{r4, r7, pc}
   1a718:	0001a75d 	.word	0x0001a75d

0001a71c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1a71c:	b580      	push	{r7, lr}
   1a71e:	b086      	sub	sp, #24
   1a720:	af00      	add	r7, sp, #0
   1a722:	0002      	movs	r2, r0
   1a724:	1dfb      	adds	r3, r7, #7
   1a726:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1a728:	2301      	movs	r3, #1
   1a72a:	617b      	str	r3, [r7, #20]
   1a72c:	2300      	movs	r3, #0
   1a72e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1a730:	1dfb      	adds	r3, r7, #7
   1a732:	781a      	ldrb	r2, [r3, #0]
   1a734:	6939      	ldr	r1, [r7, #16]
   1a736:	697b      	ldr	r3, [r7, #20]
   1a738:	0018      	movs	r0, r3
   1a73a:	4b06      	ldr	r3, [pc, #24]	; (1a754 <xQueueCreateMutex+0x38>)
   1a73c:	4798      	blx	r3
   1a73e:	0003      	movs	r3, r0
   1a740:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1a742:	68fb      	ldr	r3, [r7, #12]
   1a744:	0018      	movs	r0, r3
   1a746:	4b04      	ldr	r3, [pc, #16]	; (1a758 <xQueueCreateMutex+0x3c>)
   1a748:	4798      	blx	r3

		return pxNewQueue;
   1a74a:	68fb      	ldr	r3, [r7, #12]
	}
   1a74c:	0018      	movs	r0, r3
   1a74e:	46bd      	mov	sp, r7
   1a750:	b006      	add	sp, #24
   1a752:	bd80      	pop	{r7, pc}
   1a754:	0001a4b5 	.word	0x0001a4b5
   1a758:	0001a6e5 	.word	0x0001a6e5

0001a75c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1a75c:	b5b0      	push	{r4, r5, r7, lr}
   1a75e:	b08a      	sub	sp, #40	; 0x28
   1a760:	af00      	add	r7, sp, #0
   1a762:	60f8      	str	r0, [r7, #12]
   1a764:	60b9      	str	r1, [r7, #8]
   1a766:	607a      	str	r2, [r7, #4]
   1a768:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1a76a:	2300      	movs	r3, #0
   1a76c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a76e:	68fb      	ldr	r3, [r7, #12]
   1a770:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1a772:	6a3b      	ldr	r3, [r7, #32]
   1a774:	2b00      	cmp	r3, #0
   1a776:	d101      	bne.n	1a77c <xQueueGenericSend+0x20>
   1a778:	b672      	cpsid	i
   1a77a:	e7fe      	b.n	1a77a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a77c:	68bb      	ldr	r3, [r7, #8]
   1a77e:	2b00      	cmp	r3, #0
   1a780:	d103      	bne.n	1a78a <xQueueGenericSend+0x2e>
   1a782:	6a3b      	ldr	r3, [r7, #32]
   1a784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a786:	2b00      	cmp	r3, #0
   1a788:	d101      	bne.n	1a78e <xQueueGenericSend+0x32>
   1a78a:	2301      	movs	r3, #1
   1a78c:	e000      	b.n	1a790 <xQueueGenericSend+0x34>
   1a78e:	2300      	movs	r3, #0
   1a790:	2b00      	cmp	r3, #0
   1a792:	d101      	bne.n	1a798 <xQueueGenericSend+0x3c>
   1a794:	b672      	cpsid	i
   1a796:	e7fe      	b.n	1a796 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a798:	683b      	ldr	r3, [r7, #0]
   1a79a:	2b02      	cmp	r3, #2
   1a79c:	d103      	bne.n	1a7a6 <xQueueGenericSend+0x4a>
   1a79e:	6a3b      	ldr	r3, [r7, #32]
   1a7a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a7a2:	2b01      	cmp	r3, #1
   1a7a4:	d101      	bne.n	1a7aa <xQueueGenericSend+0x4e>
   1a7a6:	2301      	movs	r3, #1
   1a7a8:	e000      	b.n	1a7ac <xQueueGenericSend+0x50>
   1a7aa:	2300      	movs	r3, #0
   1a7ac:	2b00      	cmp	r3, #0
   1a7ae:	d101      	bne.n	1a7b4 <xQueueGenericSend+0x58>
   1a7b0:	b672      	cpsid	i
   1a7b2:	e7fe      	b.n	1a7b2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a7b4:	4bbc      	ldr	r3, [pc, #752]	; (1aaa8 <xQueueGenericSend+0x34c>)
   1a7b6:	4798      	blx	r3
   1a7b8:	1e03      	subs	r3, r0, #0
   1a7ba:	d102      	bne.n	1a7c2 <xQueueGenericSend+0x66>
   1a7bc:	687b      	ldr	r3, [r7, #4]
   1a7be:	2b00      	cmp	r3, #0
   1a7c0:	d101      	bne.n	1a7c6 <xQueueGenericSend+0x6a>
   1a7c2:	2301      	movs	r3, #1
   1a7c4:	e000      	b.n	1a7c8 <xQueueGenericSend+0x6c>
   1a7c6:	2300      	movs	r3, #0
   1a7c8:	2b00      	cmp	r3, #0
   1a7ca:	d101      	bne.n	1a7d0 <xQueueGenericSend+0x74>
   1a7cc:	b672      	cpsid	i
   1a7ce:	e7fe      	b.n	1a7ce <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1a7d0:	4bb6      	ldr	r3, [pc, #728]	; (1aaac <xQueueGenericSend+0x350>)
   1a7d2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a7d4:	6a3b      	ldr	r3, [r7, #32]
   1a7d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a7d8:	6a3b      	ldr	r3, [r7, #32]
   1a7da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a7dc:	429a      	cmp	r2, r3
   1a7de:	d303      	bcc.n	1a7e8 <xQueueGenericSend+0x8c>
   1a7e0:	683b      	ldr	r3, [r7, #0]
   1a7e2:	2b02      	cmp	r3, #2
   1a7e4:	d000      	beq.n	1a7e8 <xQueueGenericSend+0x8c>
   1a7e6:	e08e      	b.n	1a906 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1a7e8:	4bb1      	ldr	r3, [pc, #708]	; (1aab0 <xQueueGenericSend+0x354>)
   1a7ea:	4798      	blx	r3
   1a7ec:	0003      	movs	r3, r0
   1a7ee:	0018      	movs	r0, r3
   1a7f0:	4bb0      	ldr	r3, [pc, #704]	; (1aab4 <xQueueGenericSend+0x358>)
   1a7f2:	4798      	blx	r3
   1a7f4:	0003      	movs	r3, r0
   1a7f6:	001a      	movs	r2, r3
   1a7f8:	4baf      	ldr	r3, [pc, #700]	; (1aab8 <xQueueGenericSend+0x35c>)
   1a7fa:	881b      	ldrh	r3, [r3, #0]
   1a7fc:	4013      	ands	r3, r2
   1a7fe:	b29b      	uxth	r3, r3
   1a800:	2b00      	cmp	r3, #0
   1a802:	d02e      	beq.n	1a862 <xQueueGenericSend+0x106>
   1a804:	6a3b      	ldr	r3, [r7, #32]
   1a806:	0018      	movs	r0, r3
   1a808:	4bac      	ldr	r3, [pc, #688]	; (1aabc <xQueueGenericSend+0x360>)
   1a80a:	4798      	blx	r3
   1a80c:	0003      	movs	r3, r0
   1a80e:	001a      	movs	r2, r3
   1a810:	4ba9      	ldr	r3, [pc, #676]	; (1aab8 <xQueueGenericSend+0x35c>)
   1a812:	881b      	ldrh	r3, [r3, #0]
   1a814:	4013      	ands	r3, r2
   1a816:	b29b      	uxth	r3, r3
   1a818:	2b00      	cmp	r3, #0
   1a81a:	d022      	beq.n	1a862 <xQueueGenericSend+0x106>
   1a81c:	683b      	ldr	r3, [r7, #0]
   1a81e:	2b00      	cmp	r3, #0
   1a820:	d10b      	bne.n	1a83a <xQueueGenericSend+0xde>
   1a822:	6a3b      	ldr	r3, [r7, #32]
   1a824:	0018      	movs	r0, r3
   1a826:	4ba6      	ldr	r3, [pc, #664]	; (1aac0 <xQueueGenericSend+0x364>)
   1a828:	4798      	blx	r3
   1a82a:	0003      	movs	r3, r0
   1a82c:	001a      	movs	r2, r3
   1a82e:	4ba5      	ldr	r3, [pc, #660]	; (1aac4 <xQueueGenericSend+0x368>)
   1a830:	5c9b      	ldrb	r3, [r3, r2]
   1a832:	3320      	adds	r3, #32
   1a834:	b2db      	uxtb	r3, r3
   1a836:	001d      	movs	r5, r3
   1a838:	e000      	b.n	1a83c <xQueueGenericSend+0xe0>
   1a83a:	2525      	movs	r5, #37	; 0x25
   1a83c:	6a3b      	ldr	r3, [r7, #32]
   1a83e:	0018      	movs	r0, r3
   1a840:	4b9f      	ldr	r3, [pc, #636]	; (1aac0 <xQueueGenericSend+0x364>)
   1a842:	4798      	blx	r3
   1a844:	0003      	movs	r3, r0
   1a846:	001a      	movs	r2, r3
   1a848:	4b9e      	ldr	r3, [pc, #632]	; (1aac4 <xQueueGenericSend+0x368>)
   1a84a:	5c9c      	ldrb	r4, [r3, r2]
   1a84c:	6a3b      	ldr	r3, [r7, #32]
   1a84e:	0018      	movs	r0, r3
   1a850:	4b9d      	ldr	r3, [pc, #628]	; (1aac8 <xQueueGenericSend+0x36c>)
   1a852:	4798      	blx	r3
   1a854:	0003      	movs	r3, r0
   1a856:	b2db      	uxtb	r3, r3
   1a858:	001a      	movs	r2, r3
   1a85a:	0021      	movs	r1, r4
   1a85c:	0028      	movs	r0, r5
   1a85e:	4b9b      	ldr	r3, [pc, #620]	; (1aacc <xQueueGenericSend+0x370>)
   1a860:	4798      	blx	r3
   1a862:	6a3b      	ldr	r3, [r7, #32]
   1a864:	0018      	movs	r0, r3
   1a866:	4b96      	ldr	r3, [pc, #600]	; (1aac0 <xQueueGenericSend+0x364>)
   1a868:	4798      	blx	r3
   1a86a:	0003      	movs	r3, r0
   1a86c:	001a      	movs	r2, r3
   1a86e:	4b95      	ldr	r3, [pc, #596]	; (1aac4 <xQueueGenericSend+0x368>)
   1a870:	5c9c      	ldrb	r4, [r3, r2]
   1a872:	6a3b      	ldr	r3, [r7, #32]
   1a874:	0018      	movs	r0, r3
   1a876:	4b94      	ldr	r3, [pc, #592]	; (1aac8 <xQueueGenericSend+0x36c>)
   1a878:	4798      	blx	r3
   1a87a:	0003      	movs	r3, r0
   1a87c:	b2dd      	uxtb	r5, r3
   1a87e:	6a3b      	ldr	r3, [r7, #32]
   1a880:	0018      	movs	r0, r3
   1a882:	4b8f      	ldr	r3, [pc, #572]	; (1aac0 <xQueueGenericSend+0x364>)
   1a884:	4798      	blx	r3
   1a886:	0003      	movs	r3, r0
   1a888:	001a      	movs	r2, r3
   1a88a:	4b8e      	ldr	r3, [pc, #568]	; (1aac4 <xQueueGenericSend+0x368>)
   1a88c:	5c9b      	ldrb	r3, [r3, r2]
   1a88e:	2b02      	cmp	r3, #2
   1a890:	d005      	beq.n	1a89e <xQueueGenericSend+0x142>
   1a892:	6a3b      	ldr	r3, [r7, #32]
   1a894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a896:	b2db      	uxtb	r3, r3
   1a898:	3301      	adds	r3, #1
   1a89a:	b2db      	uxtb	r3, r3
   1a89c:	e000      	b.n	1a8a0 <xQueueGenericSend+0x144>
   1a89e:	2300      	movs	r3, #0
   1a8a0:	001a      	movs	r2, r3
   1a8a2:	0029      	movs	r1, r5
   1a8a4:	0020      	movs	r0, r4
   1a8a6:	4b8a      	ldr	r3, [pc, #552]	; (1aad0 <xQueueGenericSend+0x374>)
   1a8a8:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1a8aa:	683a      	ldr	r2, [r7, #0]
   1a8ac:	68b9      	ldr	r1, [r7, #8]
   1a8ae:	6a3b      	ldr	r3, [r7, #32]
   1a8b0:	0018      	movs	r0, r3
   1a8b2:	4b88      	ldr	r3, [pc, #544]	; (1aad4 <xQueueGenericSend+0x378>)
   1a8b4:	4798      	blx	r3
   1a8b6:	0003      	movs	r3, r0
   1a8b8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a8ba:	6a3b      	ldr	r3, [r7, #32]
   1a8bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a8be:	2b00      	cmp	r3, #0
   1a8c0:	d00a      	beq.n	1a8d8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a8c2:	683a      	ldr	r2, [r7, #0]
   1a8c4:	6a3b      	ldr	r3, [r7, #32]
   1a8c6:	0011      	movs	r1, r2
   1a8c8:	0018      	movs	r0, r3
   1a8ca:	4b83      	ldr	r3, [pc, #524]	; (1aad8 <xQueueGenericSend+0x37c>)
   1a8cc:	4798      	blx	r3
   1a8ce:	1e03      	subs	r3, r0, #0
   1a8d0:	d015      	beq.n	1a8fe <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1a8d2:	4b82      	ldr	r3, [pc, #520]	; (1aadc <xQueueGenericSend+0x380>)
   1a8d4:	4798      	blx	r3
   1a8d6:	e012      	b.n	1a8fe <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a8d8:	6a3b      	ldr	r3, [r7, #32]
   1a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a8dc:	2b00      	cmp	r3, #0
   1a8de:	d009      	beq.n	1a8f4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a8e0:	6a3b      	ldr	r3, [r7, #32]
   1a8e2:	3324      	adds	r3, #36	; 0x24
   1a8e4:	0018      	movs	r0, r3
   1a8e6:	4b7e      	ldr	r3, [pc, #504]	; (1aae0 <xQueueGenericSend+0x384>)
   1a8e8:	4798      	blx	r3
   1a8ea:	1e03      	subs	r3, r0, #0
   1a8ec:	d007      	beq.n	1a8fe <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1a8ee:	4b7b      	ldr	r3, [pc, #492]	; (1aadc <xQueueGenericSend+0x380>)
   1a8f0:	4798      	blx	r3
   1a8f2:	e004      	b.n	1a8fe <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1a8f4:	69fb      	ldr	r3, [r7, #28]
   1a8f6:	2b00      	cmp	r3, #0
   1a8f8:	d001      	beq.n	1a8fe <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1a8fa:	4b78      	ldr	r3, [pc, #480]	; (1aadc <xQueueGenericSend+0x380>)
   1a8fc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1a8fe:	4b79      	ldr	r3, [pc, #484]	; (1aae4 <xQueueGenericSend+0x388>)
   1a900:	4798      	blx	r3
				return pdPASS;
   1a902:	2301      	movs	r3, #1
   1a904:	e142      	b.n	1ab8c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a906:	687b      	ldr	r3, [r7, #4]
   1a908:	2b00      	cmp	r3, #0
   1a90a:	d140      	bne.n	1a98e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1a90c:	4b75      	ldr	r3, [pc, #468]	; (1aae4 <xQueueGenericSend+0x388>)
   1a90e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1a910:	4b67      	ldr	r3, [pc, #412]	; (1aab0 <xQueueGenericSend+0x354>)
   1a912:	4798      	blx	r3
   1a914:	0003      	movs	r3, r0
   1a916:	0018      	movs	r0, r3
   1a918:	4b66      	ldr	r3, [pc, #408]	; (1aab4 <xQueueGenericSend+0x358>)
   1a91a:	4798      	blx	r3
   1a91c:	0003      	movs	r3, r0
   1a91e:	001a      	movs	r2, r3
   1a920:	4b65      	ldr	r3, [pc, #404]	; (1aab8 <xQueueGenericSend+0x35c>)
   1a922:	881b      	ldrh	r3, [r3, #0]
   1a924:	4013      	ands	r3, r2
   1a926:	b29b      	uxth	r3, r3
   1a928:	2b00      	cmp	r3, #0
   1a92a:	d02e      	beq.n	1a98a <xQueueGenericSend+0x22e>
   1a92c:	6a3b      	ldr	r3, [r7, #32]
   1a92e:	0018      	movs	r0, r3
   1a930:	4b62      	ldr	r3, [pc, #392]	; (1aabc <xQueueGenericSend+0x360>)
   1a932:	4798      	blx	r3
   1a934:	0003      	movs	r3, r0
   1a936:	001a      	movs	r2, r3
   1a938:	4b5f      	ldr	r3, [pc, #380]	; (1aab8 <xQueueGenericSend+0x35c>)
   1a93a:	881b      	ldrh	r3, [r3, #0]
   1a93c:	4013      	ands	r3, r2
   1a93e:	b29b      	uxth	r3, r3
   1a940:	2b00      	cmp	r3, #0
   1a942:	d022      	beq.n	1a98a <xQueueGenericSend+0x22e>
   1a944:	683b      	ldr	r3, [r7, #0]
   1a946:	2b00      	cmp	r3, #0
   1a948:	d10b      	bne.n	1a962 <xQueueGenericSend+0x206>
   1a94a:	6a3b      	ldr	r3, [r7, #32]
   1a94c:	0018      	movs	r0, r3
   1a94e:	4b5c      	ldr	r3, [pc, #368]	; (1aac0 <xQueueGenericSend+0x364>)
   1a950:	4798      	blx	r3
   1a952:	0003      	movs	r3, r0
   1a954:	001a      	movs	r2, r3
   1a956:	4b5b      	ldr	r3, [pc, #364]	; (1aac4 <xQueueGenericSend+0x368>)
   1a958:	5c9b      	ldrb	r3, [r3, r2]
   1a95a:	3348      	adds	r3, #72	; 0x48
   1a95c:	b2db      	uxtb	r3, r3
   1a95e:	001d      	movs	r5, r3
   1a960:	e000      	b.n	1a964 <xQueueGenericSend+0x208>
   1a962:	254d      	movs	r5, #77	; 0x4d
   1a964:	6a3b      	ldr	r3, [r7, #32]
   1a966:	0018      	movs	r0, r3
   1a968:	4b55      	ldr	r3, [pc, #340]	; (1aac0 <xQueueGenericSend+0x364>)
   1a96a:	4798      	blx	r3
   1a96c:	0003      	movs	r3, r0
   1a96e:	001a      	movs	r2, r3
   1a970:	4b54      	ldr	r3, [pc, #336]	; (1aac4 <xQueueGenericSend+0x368>)
   1a972:	5c9c      	ldrb	r4, [r3, r2]
   1a974:	6a3b      	ldr	r3, [r7, #32]
   1a976:	0018      	movs	r0, r3
   1a978:	4b53      	ldr	r3, [pc, #332]	; (1aac8 <xQueueGenericSend+0x36c>)
   1a97a:	4798      	blx	r3
   1a97c:	0003      	movs	r3, r0
   1a97e:	b2db      	uxtb	r3, r3
   1a980:	001a      	movs	r2, r3
   1a982:	0021      	movs	r1, r4
   1a984:	0028      	movs	r0, r5
   1a986:	4b51      	ldr	r3, [pc, #324]	; (1aacc <xQueueGenericSend+0x370>)
   1a988:	4798      	blx	r3
					return errQUEUE_FULL;
   1a98a:	2300      	movs	r3, #0
   1a98c:	e0fe      	b.n	1ab8c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a990:	2b00      	cmp	r3, #0
   1a992:	d106      	bne.n	1a9a2 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a994:	2314      	movs	r3, #20
   1a996:	18fb      	adds	r3, r7, r3
   1a998:	0018      	movs	r0, r3
   1a99a:	4b53      	ldr	r3, [pc, #332]	; (1aae8 <xQueueGenericSend+0x38c>)
   1a99c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a99e:	2301      	movs	r3, #1
   1a9a0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a9a2:	4b50      	ldr	r3, [pc, #320]	; (1aae4 <xQueueGenericSend+0x388>)
   1a9a4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a9a6:	4b51      	ldr	r3, [pc, #324]	; (1aaec <xQueueGenericSend+0x390>)
   1a9a8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a9aa:	4b40      	ldr	r3, [pc, #256]	; (1aaac <xQueueGenericSend+0x350>)
   1a9ac:	4798      	blx	r3
   1a9ae:	6a3b      	ldr	r3, [r7, #32]
   1a9b0:	2244      	movs	r2, #68	; 0x44
   1a9b2:	5c9b      	ldrb	r3, [r3, r2]
   1a9b4:	b25b      	sxtb	r3, r3
   1a9b6:	3301      	adds	r3, #1
   1a9b8:	d103      	bne.n	1a9c2 <xQueueGenericSend+0x266>
   1a9ba:	6a3b      	ldr	r3, [r7, #32]
   1a9bc:	2244      	movs	r2, #68	; 0x44
   1a9be:	2100      	movs	r1, #0
   1a9c0:	5499      	strb	r1, [r3, r2]
   1a9c2:	6a3b      	ldr	r3, [r7, #32]
   1a9c4:	2245      	movs	r2, #69	; 0x45
   1a9c6:	5c9b      	ldrb	r3, [r3, r2]
   1a9c8:	b25b      	sxtb	r3, r3
   1a9ca:	3301      	adds	r3, #1
   1a9cc:	d103      	bne.n	1a9d6 <xQueueGenericSend+0x27a>
   1a9ce:	6a3b      	ldr	r3, [r7, #32]
   1a9d0:	2245      	movs	r2, #69	; 0x45
   1a9d2:	2100      	movs	r1, #0
   1a9d4:	5499      	strb	r1, [r3, r2]
   1a9d6:	4b43      	ldr	r3, [pc, #268]	; (1aae4 <xQueueGenericSend+0x388>)
   1a9d8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a9da:	1d3a      	adds	r2, r7, #4
   1a9dc:	2314      	movs	r3, #20
   1a9de:	18fb      	adds	r3, r7, r3
   1a9e0:	0011      	movs	r1, r2
   1a9e2:	0018      	movs	r0, r3
   1a9e4:	4b42      	ldr	r3, [pc, #264]	; (1aaf0 <xQueueGenericSend+0x394>)
   1a9e6:	4798      	blx	r3
   1a9e8:	1e03      	subs	r3, r0, #0
   1a9ea:	d000      	beq.n	1a9ee <xQueueGenericSend+0x292>
   1a9ec:	e08a      	b.n	1ab04 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1a9ee:	6a3b      	ldr	r3, [r7, #32]
   1a9f0:	0018      	movs	r0, r3
   1a9f2:	4b40      	ldr	r3, [pc, #256]	; (1aaf4 <xQueueGenericSend+0x398>)
   1a9f4:	4798      	blx	r3
   1a9f6:	1e03      	subs	r3, r0, #0
   1a9f8:	d04f      	beq.n	1aa9a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1a9fa:	4b2d      	ldr	r3, [pc, #180]	; (1aab0 <xQueueGenericSend+0x354>)
   1a9fc:	4798      	blx	r3
   1a9fe:	0003      	movs	r3, r0
   1aa00:	0018      	movs	r0, r3
   1aa02:	4b2c      	ldr	r3, [pc, #176]	; (1aab4 <xQueueGenericSend+0x358>)
   1aa04:	4798      	blx	r3
   1aa06:	0003      	movs	r3, r0
   1aa08:	001a      	movs	r2, r3
   1aa0a:	4b2b      	ldr	r3, [pc, #172]	; (1aab8 <xQueueGenericSend+0x35c>)
   1aa0c:	881b      	ldrh	r3, [r3, #0]
   1aa0e:	4013      	ands	r3, r2
   1aa10:	b29b      	uxth	r3, r3
   1aa12:	2b00      	cmp	r3, #0
   1aa14:	d02e      	beq.n	1aa74 <xQueueGenericSend+0x318>
   1aa16:	6a3b      	ldr	r3, [r7, #32]
   1aa18:	0018      	movs	r0, r3
   1aa1a:	4b28      	ldr	r3, [pc, #160]	; (1aabc <xQueueGenericSend+0x360>)
   1aa1c:	4798      	blx	r3
   1aa1e:	0003      	movs	r3, r0
   1aa20:	001a      	movs	r2, r3
   1aa22:	4b25      	ldr	r3, [pc, #148]	; (1aab8 <xQueueGenericSend+0x35c>)
   1aa24:	881b      	ldrh	r3, [r3, #0]
   1aa26:	4013      	ands	r3, r2
   1aa28:	b29b      	uxth	r3, r3
   1aa2a:	2b00      	cmp	r3, #0
   1aa2c:	d022      	beq.n	1aa74 <xQueueGenericSend+0x318>
   1aa2e:	683b      	ldr	r3, [r7, #0]
   1aa30:	2b00      	cmp	r3, #0
   1aa32:	d10b      	bne.n	1aa4c <xQueueGenericSend+0x2f0>
   1aa34:	6a3b      	ldr	r3, [r7, #32]
   1aa36:	0018      	movs	r0, r3
   1aa38:	4b21      	ldr	r3, [pc, #132]	; (1aac0 <xQueueGenericSend+0x364>)
   1aa3a:	4798      	blx	r3
   1aa3c:	0003      	movs	r3, r0
   1aa3e:	001a      	movs	r2, r3
   1aa40:	4b20      	ldr	r3, [pc, #128]	; (1aac4 <xQueueGenericSend+0x368>)
   1aa42:	5c9b      	ldrb	r3, [r3, r2]
   1aa44:	3370      	adds	r3, #112	; 0x70
   1aa46:	b2db      	uxtb	r3, r3
   1aa48:	001d      	movs	r5, r3
   1aa4a:	e000      	b.n	1aa4e <xQueueGenericSend+0x2f2>
   1aa4c:	2575      	movs	r5, #117	; 0x75
   1aa4e:	6a3b      	ldr	r3, [r7, #32]
   1aa50:	0018      	movs	r0, r3
   1aa52:	4b1b      	ldr	r3, [pc, #108]	; (1aac0 <xQueueGenericSend+0x364>)
   1aa54:	4798      	blx	r3
   1aa56:	0003      	movs	r3, r0
   1aa58:	001a      	movs	r2, r3
   1aa5a:	4b1a      	ldr	r3, [pc, #104]	; (1aac4 <xQueueGenericSend+0x368>)
   1aa5c:	5c9c      	ldrb	r4, [r3, r2]
   1aa5e:	6a3b      	ldr	r3, [r7, #32]
   1aa60:	0018      	movs	r0, r3
   1aa62:	4b19      	ldr	r3, [pc, #100]	; (1aac8 <xQueueGenericSend+0x36c>)
   1aa64:	4798      	blx	r3
   1aa66:	0003      	movs	r3, r0
   1aa68:	b2db      	uxtb	r3, r3
   1aa6a:	001a      	movs	r2, r3
   1aa6c:	0021      	movs	r1, r4
   1aa6e:	0028      	movs	r0, r5
   1aa70:	4b16      	ldr	r3, [pc, #88]	; (1aacc <xQueueGenericSend+0x370>)
   1aa72:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1aa74:	6a3b      	ldr	r3, [r7, #32]
   1aa76:	3310      	adds	r3, #16
   1aa78:	687a      	ldr	r2, [r7, #4]
   1aa7a:	0011      	movs	r1, r2
   1aa7c:	0018      	movs	r0, r3
   1aa7e:	4b1e      	ldr	r3, [pc, #120]	; (1aaf8 <xQueueGenericSend+0x39c>)
   1aa80:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1aa82:	6a3b      	ldr	r3, [r7, #32]
   1aa84:	0018      	movs	r0, r3
   1aa86:	4b1d      	ldr	r3, [pc, #116]	; (1aafc <xQueueGenericSend+0x3a0>)
   1aa88:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1aa8a:	4b1d      	ldr	r3, [pc, #116]	; (1ab00 <xQueueGenericSend+0x3a4>)
   1aa8c:	4798      	blx	r3
   1aa8e:	1e03      	subs	r3, r0, #0
   1aa90:	d000      	beq.n	1aa94 <xQueueGenericSend+0x338>
   1aa92:	e69d      	b.n	1a7d0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1aa94:	4b11      	ldr	r3, [pc, #68]	; (1aadc <xQueueGenericSend+0x380>)
   1aa96:	4798      	blx	r3
   1aa98:	e69a      	b.n	1a7d0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1aa9a:	6a3b      	ldr	r3, [r7, #32]
   1aa9c:	0018      	movs	r0, r3
   1aa9e:	4b17      	ldr	r3, [pc, #92]	; (1aafc <xQueueGenericSend+0x3a0>)
   1aaa0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1aaa2:	4b17      	ldr	r3, [pc, #92]	; (1ab00 <xQueueGenericSend+0x3a4>)
   1aaa4:	4798      	blx	r3
   1aaa6:	e693      	b.n	1a7d0 <xQueueGenericSend+0x74>
   1aaa8:	0001cee9 	.word	0x0001cee9
   1aaac:	0001a1c9 	.word	0x0001a1c9
   1aab0:	0001845d 	.word	0x0001845d
   1aab4:	000181c1 	.word	0x000181c1
   1aab8:	20000104 	.word	0x20000104
   1aabc:	00018281 	.word	0x00018281
   1aac0:	00018181 	.word	0x00018181
   1aac4:	200000f8 	.word	0x200000f8
   1aac8:	00018261 	.word	0x00018261
   1aacc:	00018bb9 	.word	0x00018bb9
   1aad0:	00019215 	.word	0x00019215
   1aad4:	0001b995 	.word	0x0001b995
   1aad8:	0001bc99 	.word	0x0001bc99
   1aadc:	0001a1b1 	.word	0x0001a1b1
   1aae0:	0001ca59 	.word	0x0001ca59
   1aae4:	0001a1ed 	.word	0x0001a1ed
   1aae8:	0001cb99 	.word	0x0001cb99
   1aaec:	0001c481 	.word	0x0001c481
   1aaf0:	0001cbc1 	.word	0x0001cbc1
   1aaf4:	0001bbe9 	.word	0x0001bbe9
   1aaf8:	0001c935 	.word	0x0001c935
   1aafc:	0001bac5 	.word	0x0001bac5
   1ab00:	0001c499 	.word	0x0001c499
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1ab04:	6a3b      	ldr	r3, [r7, #32]
   1ab06:	0018      	movs	r0, r3
   1ab08:	4b22      	ldr	r3, [pc, #136]	; (1ab94 <xQueueGenericSend+0x438>)
   1ab0a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1ab0c:	4b22      	ldr	r3, [pc, #136]	; (1ab98 <xQueueGenericSend+0x43c>)
   1ab0e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1ab10:	4b22      	ldr	r3, [pc, #136]	; (1ab9c <xQueueGenericSend+0x440>)
   1ab12:	4798      	blx	r3
   1ab14:	0003      	movs	r3, r0
   1ab16:	0018      	movs	r0, r3
   1ab18:	4b21      	ldr	r3, [pc, #132]	; (1aba0 <xQueueGenericSend+0x444>)
   1ab1a:	4798      	blx	r3
   1ab1c:	0003      	movs	r3, r0
   1ab1e:	001a      	movs	r2, r3
   1ab20:	4b20      	ldr	r3, [pc, #128]	; (1aba4 <xQueueGenericSend+0x448>)
   1ab22:	881b      	ldrh	r3, [r3, #0]
   1ab24:	4013      	ands	r3, r2
   1ab26:	b29b      	uxth	r3, r3
   1ab28:	2b00      	cmp	r3, #0
   1ab2a:	d02e      	beq.n	1ab8a <xQueueGenericSend+0x42e>
   1ab2c:	6a3b      	ldr	r3, [r7, #32]
   1ab2e:	0018      	movs	r0, r3
   1ab30:	4b1d      	ldr	r3, [pc, #116]	; (1aba8 <xQueueGenericSend+0x44c>)
   1ab32:	4798      	blx	r3
   1ab34:	0003      	movs	r3, r0
   1ab36:	001a      	movs	r2, r3
   1ab38:	4b1a      	ldr	r3, [pc, #104]	; (1aba4 <xQueueGenericSend+0x448>)
   1ab3a:	881b      	ldrh	r3, [r3, #0]
   1ab3c:	4013      	ands	r3, r2
   1ab3e:	b29b      	uxth	r3, r3
   1ab40:	2b00      	cmp	r3, #0
   1ab42:	d022      	beq.n	1ab8a <xQueueGenericSend+0x42e>
   1ab44:	683b      	ldr	r3, [r7, #0]
   1ab46:	2b00      	cmp	r3, #0
   1ab48:	d10b      	bne.n	1ab62 <xQueueGenericSend+0x406>
   1ab4a:	6a3b      	ldr	r3, [r7, #32]
   1ab4c:	0018      	movs	r0, r3
   1ab4e:	4b17      	ldr	r3, [pc, #92]	; (1abac <xQueueGenericSend+0x450>)
   1ab50:	4798      	blx	r3
   1ab52:	0003      	movs	r3, r0
   1ab54:	001a      	movs	r2, r3
   1ab56:	4b16      	ldr	r3, [pc, #88]	; (1abb0 <xQueueGenericSend+0x454>)
   1ab58:	5c9b      	ldrb	r3, [r3, r2]
   1ab5a:	3348      	adds	r3, #72	; 0x48
   1ab5c:	b2db      	uxtb	r3, r3
   1ab5e:	001d      	movs	r5, r3
   1ab60:	e000      	b.n	1ab64 <xQueueGenericSend+0x408>
   1ab62:	254d      	movs	r5, #77	; 0x4d
   1ab64:	6a3b      	ldr	r3, [r7, #32]
   1ab66:	0018      	movs	r0, r3
   1ab68:	4b10      	ldr	r3, [pc, #64]	; (1abac <xQueueGenericSend+0x450>)
   1ab6a:	4798      	blx	r3
   1ab6c:	0003      	movs	r3, r0
   1ab6e:	001a      	movs	r2, r3
   1ab70:	4b0f      	ldr	r3, [pc, #60]	; (1abb0 <xQueueGenericSend+0x454>)
   1ab72:	5c9c      	ldrb	r4, [r3, r2]
   1ab74:	6a3b      	ldr	r3, [r7, #32]
   1ab76:	0018      	movs	r0, r3
   1ab78:	4b0e      	ldr	r3, [pc, #56]	; (1abb4 <xQueueGenericSend+0x458>)
   1ab7a:	4798      	blx	r3
   1ab7c:	0003      	movs	r3, r0
   1ab7e:	b2db      	uxtb	r3, r3
   1ab80:	001a      	movs	r2, r3
   1ab82:	0021      	movs	r1, r4
   1ab84:	0028      	movs	r0, r5
   1ab86:	4b0c      	ldr	r3, [pc, #48]	; (1abb8 <xQueueGenericSend+0x45c>)
   1ab88:	4798      	blx	r3
			return errQUEUE_FULL;
   1ab8a:	2300      	movs	r3, #0
		}
	}
}
   1ab8c:	0018      	movs	r0, r3
   1ab8e:	46bd      	mov	sp, r7
   1ab90:	b00a      	add	sp, #40	; 0x28
   1ab92:	bdb0      	pop	{r4, r5, r7, pc}
   1ab94:	0001bac5 	.word	0x0001bac5
   1ab98:	0001c499 	.word	0x0001c499
   1ab9c:	0001845d 	.word	0x0001845d
   1aba0:	000181c1 	.word	0x000181c1
   1aba4:	20000104 	.word	0x20000104
   1aba8:	00018281 	.word	0x00018281
   1abac:	00018181 	.word	0x00018181
   1abb0:	200000f8 	.word	0x200000f8
   1abb4:	00018261 	.word	0x00018261
   1abb8:	00018bb9 	.word	0x00018bb9

0001abbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1abbc:	b5b0      	push	{r4, r5, r7, lr}
   1abbe:	b088      	sub	sp, #32
   1abc0:	af00      	add	r7, sp, #0
   1abc2:	60f8      	str	r0, [r7, #12]
   1abc4:	60b9      	str	r1, [r7, #8]
   1abc6:	607a      	str	r2, [r7, #4]
   1abc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1abca:	68fb      	ldr	r3, [r7, #12]
   1abcc:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1abce:	69bb      	ldr	r3, [r7, #24]
   1abd0:	2b00      	cmp	r3, #0
   1abd2:	d101      	bne.n	1abd8 <xQueueGenericSendFromISR+0x1c>
   1abd4:	b672      	cpsid	i
   1abd6:	e7fe      	b.n	1abd6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1abd8:	68bb      	ldr	r3, [r7, #8]
   1abda:	2b00      	cmp	r3, #0
   1abdc:	d103      	bne.n	1abe6 <xQueueGenericSendFromISR+0x2a>
   1abde:	69bb      	ldr	r3, [r7, #24]
   1abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1abe2:	2b00      	cmp	r3, #0
   1abe4:	d101      	bne.n	1abea <xQueueGenericSendFromISR+0x2e>
   1abe6:	2301      	movs	r3, #1
   1abe8:	e000      	b.n	1abec <xQueueGenericSendFromISR+0x30>
   1abea:	2300      	movs	r3, #0
   1abec:	2b00      	cmp	r3, #0
   1abee:	d101      	bne.n	1abf4 <xQueueGenericSendFromISR+0x38>
   1abf0:	b672      	cpsid	i
   1abf2:	e7fe      	b.n	1abf2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1abf4:	683b      	ldr	r3, [r7, #0]
   1abf6:	2b02      	cmp	r3, #2
   1abf8:	d103      	bne.n	1ac02 <xQueueGenericSendFromISR+0x46>
   1abfa:	69bb      	ldr	r3, [r7, #24]
   1abfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1abfe:	2b01      	cmp	r3, #1
   1ac00:	d101      	bne.n	1ac06 <xQueueGenericSendFromISR+0x4a>
   1ac02:	2301      	movs	r3, #1
   1ac04:	e000      	b.n	1ac08 <xQueueGenericSendFromISR+0x4c>
   1ac06:	2300      	movs	r3, #0
   1ac08:	2b00      	cmp	r3, #0
   1ac0a:	d101      	bne.n	1ac10 <xQueueGenericSendFromISR+0x54>
   1ac0c:	b672      	cpsid	i
   1ac0e:	e7fe      	b.n	1ac0e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1ac10:	4b68      	ldr	r3, [pc, #416]	; (1adb4 <xQueueGenericSendFromISR+0x1f8>)
   1ac12:	4798      	blx	r3
   1ac14:	0003      	movs	r3, r0
   1ac16:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1ac18:	69bb      	ldr	r3, [r7, #24]
   1ac1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ac1c:	69bb      	ldr	r3, [r7, #24]
   1ac1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ac20:	429a      	cmp	r2, r3
   1ac22:	d303      	bcc.n	1ac2c <xQueueGenericSendFromISR+0x70>
   1ac24:	683b      	ldr	r3, [r7, #0]
   1ac26:	2b02      	cmp	r3, #2
   1ac28:	d000      	beq.n	1ac2c <xQueueGenericSendFromISR+0x70>
   1ac2a:	e088      	b.n	1ad3e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1ac2c:	2313      	movs	r3, #19
   1ac2e:	18fb      	adds	r3, r7, r3
   1ac30:	69ba      	ldr	r2, [r7, #24]
   1ac32:	2145      	movs	r1, #69	; 0x45
   1ac34:	5c52      	ldrb	r2, [r2, r1]
   1ac36:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1ac38:	69bb      	ldr	r3, [r7, #24]
   1ac3a:	0018      	movs	r0, r3
   1ac3c:	4b5e      	ldr	r3, [pc, #376]	; (1adb8 <xQueueGenericSendFromISR+0x1fc>)
   1ac3e:	4798      	blx	r3
   1ac40:	0003      	movs	r3, r0
   1ac42:	001a      	movs	r2, r3
   1ac44:	4b5d      	ldr	r3, [pc, #372]	; (1adbc <xQueueGenericSendFromISR+0x200>)
   1ac46:	881b      	ldrh	r3, [r3, #0]
   1ac48:	4013      	ands	r3, r2
   1ac4a:	b29b      	uxth	r3, r3
   1ac4c:	2b00      	cmp	r3, #0
   1ac4e:	d022      	beq.n	1ac96 <xQueueGenericSendFromISR+0xda>
   1ac50:	683b      	ldr	r3, [r7, #0]
   1ac52:	2b00      	cmp	r3, #0
   1ac54:	d10b      	bne.n	1ac6e <xQueueGenericSendFromISR+0xb2>
   1ac56:	69bb      	ldr	r3, [r7, #24]
   1ac58:	0018      	movs	r0, r3
   1ac5a:	4b59      	ldr	r3, [pc, #356]	; (1adc0 <xQueueGenericSendFromISR+0x204>)
   1ac5c:	4798      	blx	r3
   1ac5e:	0003      	movs	r3, r0
   1ac60:	001a      	movs	r2, r3
   1ac62:	4b58      	ldr	r3, [pc, #352]	; (1adc4 <xQueueGenericSendFromISR+0x208>)
   1ac64:	5c9b      	ldrb	r3, [r3, r2]
   1ac66:	3330      	adds	r3, #48	; 0x30
   1ac68:	b2db      	uxtb	r3, r3
   1ac6a:	001d      	movs	r5, r3
   1ac6c:	e000      	b.n	1ac70 <xQueueGenericSendFromISR+0xb4>
   1ac6e:	2535      	movs	r5, #53	; 0x35
   1ac70:	69bb      	ldr	r3, [r7, #24]
   1ac72:	0018      	movs	r0, r3
   1ac74:	4b52      	ldr	r3, [pc, #328]	; (1adc0 <xQueueGenericSendFromISR+0x204>)
   1ac76:	4798      	blx	r3
   1ac78:	0003      	movs	r3, r0
   1ac7a:	001a      	movs	r2, r3
   1ac7c:	4b51      	ldr	r3, [pc, #324]	; (1adc4 <xQueueGenericSendFromISR+0x208>)
   1ac7e:	5c9c      	ldrb	r4, [r3, r2]
   1ac80:	69bb      	ldr	r3, [r7, #24]
   1ac82:	0018      	movs	r0, r3
   1ac84:	4b50      	ldr	r3, [pc, #320]	; (1adc8 <xQueueGenericSendFromISR+0x20c>)
   1ac86:	4798      	blx	r3
   1ac88:	0003      	movs	r3, r0
   1ac8a:	b2db      	uxtb	r3, r3
   1ac8c:	001a      	movs	r2, r3
   1ac8e:	0021      	movs	r1, r4
   1ac90:	0028      	movs	r0, r5
   1ac92:	4b4e      	ldr	r3, [pc, #312]	; (1adcc <xQueueGenericSendFromISR+0x210>)
   1ac94:	4798      	blx	r3
   1ac96:	69bb      	ldr	r3, [r7, #24]
   1ac98:	0018      	movs	r0, r3
   1ac9a:	4b49      	ldr	r3, [pc, #292]	; (1adc0 <xQueueGenericSendFromISR+0x204>)
   1ac9c:	4798      	blx	r3
   1ac9e:	0003      	movs	r3, r0
   1aca0:	001a      	movs	r2, r3
   1aca2:	4b48      	ldr	r3, [pc, #288]	; (1adc4 <xQueueGenericSendFromISR+0x208>)
   1aca4:	5c9c      	ldrb	r4, [r3, r2]
   1aca6:	69bb      	ldr	r3, [r7, #24]
   1aca8:	0018      	movs	r0, r3
   1acaa:	4b47      	ldr	r3, [pc, #284]	; (1adc8 <xQueueGenericSendFromISR+0x20c>)
   1acac:	4798      	blx	r3
   1acae:	0003      	movs	r3, r0
   1acb0:	b2d9      	uxtb	r1, r3
   1acb2:	69bb      	ldr	r3, [r7, #24]
   1acb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1acb6:	b2db      	uxtb	r3, r3
   1acb8:	3301      	adds	r3, #1
   1acba:	b2db      	uxtb	r3, r3
   1acbc:	001a      	movs	r2, r3
   1acbe:	0020      	movs	r0, r4
   1acc0:	4b43      	ldr	r3, [pc, #268]	; (1add0 <xQueueGenericSendFromISR+0x214>)
   1acc2:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1acc4:	683a      	ldr	r2, [r7, #0]
   1acc6:	68b9      	ldr	r1, [r7, #8]
   1acc8:	69bb      	ldr	r3, [r7, #24]
   1acca:	0018      	movs	r0, r3
   1accc:	4b41      	ldr	r3, [pc, #260]	; (1add4 <xQueueGenericSendFromISR+0x218>)
   1acce:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1acd0:	2313      	movs	r3, #19
   1acd2:	18fb      	adds	r3, r7, r3
   1acd4:	781b      	ldrb	r3, [r3, #0]
   1acd6:	b25b      	sxtb	r3, r3
   1acd8:	3301      	adds	r3, #1
   1acda:	d124      	bne.n	1ad26 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1acdc:	69bb      	ldr	r3, [r7, #24]
   1acde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ace0:	2b00      	cmp	r3, #0
   1ace2:	d00e      	beq.n	1ad02 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1ace4:	683a      	ldr	r2, [r7, #0]
   1ace6:	69bb      	ldr	r3, [r7, #24]
   1ace8:	0011      	movs	r1, r2
   1acea:	0018      	movs	r0, r3
   1acec:	4b3a      	ldr	r3, [pc, #232]	; (1add8 <xQueueGenericSendFromISR+0x21c>)
   1acee:	4798      	blx	r3
   1acf0:	1e03      	subs	r3, r0, #0
   1acf2:	d021      	beq.n	1ad38 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1acf4:	687b      	ldr	r3, [r7, #4]
   1acf6:	2b00      	cmp	r3, #0
   1acf8:	d01e      	beq.n	1ad38 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1acfa:	687b      	ldr	r3, [r7, #4]
   1acfc:	2201      	movs	r2, #1
   1acfe:	601a      	str	r2, [r3, #0]
   1ad00:	e01a      	b.n	1ad38 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ad02:	69bb      	ldr	r3, [r7, #24]
   1ad04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ad06:	2b00      	cmp	r3, #0
   1ad08:	d016      	beq.n	1ad38 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ad0a:	69bb      	ldr	r3, [r7, #24]
   1ad0c:	3324      	adds	r3, #36	; 0x24
   1ad0e:	0018      	movs	r0, r3
   1ad10:	4b32      	ldr	r3, [pc, #200]	; (1addc <xQueueGenericSendFromISR+0x220>)
   1ad12:	4798      	blx	r3
   1ad14:	1e03      	subs	r3, r0, #0
   1ad16:	d00f      	beq.n	1ad38 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1ad18:	687b      	ldr	r3, [r7, #4]
   1ad1a:	2b00      	cmp	r3, #0
   1ad1c:	d00c      	beq.n	1ad38 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1ad1e:	687b      	ldr	r3, [r7, #4]
   1ad20:	2201      	movs	r2, #1
   1ad22:	601a      	str	r2, [r3, #0]
   1ad24:	e008      	b.n	1ad38 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1ad26:	2313      	movs	r3, #19
   1ad28:	18fb      	adds	r3, r7, r3
   1ad2a:	781b      	ldrb	r3, [r3, #0]
   1ad2c:	3301      	adds	r3, #1
   1ad2e:	b2db      	uxtb	r3, r3
   1ad30:	b259      	sxtb	r1, r3
   1ad32:	69bb      	ldr	r3, [r7, #24]
   1ad34:	2245      	movs	r2, #69	; 0x45
   1ad36:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1ad38:	2301      	movs	r3, #1
   1ad3a:	61fb      	str	r3, [r7, #28]
		{
   1ad3c:	e030      	b.n	1ada0 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1ad3e:	69bb      	ldr	r3, [r7, #24]
   1ad40:	0018      	movs	r0, r3
   1ad42:	4b1d      	ldr	r3, [pc, #116]	; (1adb8 <xQueueGenericSendFromISR+0x1fc>)
   1ad44:	4798      	blx	r3
   1ad46:	0003      	movs	r3, r0
   1ad48:	001a      	movs	r2, r3
   1ad4a:	4b1c      	ldr	r3, [pc, #112]	; (1adbc <xQueueGenericSendFromISR+0x200>)
   1ad4c:	881b      	ldrh	r3, [r3, #0]
   1ad4e:	4013      	ands	r3, r2
   1ad50:	b29b      	uxth	r3, r3
   1ad52:	2b00      	cmp	r3, #0
   1ad54:	d022      	beq.n	1ad9c <xQueueGenericSendFromISR+0x1e0>
   1ad56:	683b      	ldr	r3, [r7, #0]
   1ad58:	2b00      	cmp	r3, #0
   1ad5a:	d10b      	bne.n	1ad74 <xQueueGenericSendFromISR+0x1b8>
   1ad5c:	69bb      	ldr	r3, [r7, #24]
   1ad5e:	0018      	movs	r0, r3
   1ad60:	4b17      	ldr	r3, [pc, #92]	; (1adc0 <xQueueGenericSendFromISR+0x204>)
   1ad62:	4798      	blx	r3
   1ad64:	0003      	movs	r3, r0
   1ad66:	001a      	movs	r2, r3
   1ad68:	4b16      	ldr	r3, [pc, #88]	; (1adc4 <xQueueGenericSendFromISR+0x208>)
   1ad6a:	5c9b      	ldrb	r3, [r3, r2]
   1ad6c:	3358      	adds	r3, #88	; 0x58
   1ad6e:	b2db      	uxtb	r3, r3
   1ad70:	001d      	movs	r5, r3
   1ad72:	e000      	b.n	1ad76 <xQueueGenericSendFromISR+0x1ba>
   1ad74:	255d      	movs	r5, #93	; 0x5d
   1ad76:	69bb      	ldr	r3, [r7, #24]
   1ad78:	0018      	movs	r0, r3
   1ad7a:	4b11      	ldr	r3, [pc, #68]	; (1adc0 <xQueueGenericSendFromISR+0x204>)
   1ad7c:	4798      	blx	r3
   1ad7e:	0003      	movs	r3, r0
   1ad80:	001a      	movs	r2, r3
   1ad82:	4b10      	ldr	r3, [pc, #64]	; (1adc4 <xQueueGenericSendFromISR+0x208>)
   1ad84:	5c9c      	ldrb	r4, [r3, r2]
   1ad86:	69bb      	ldr	r3, [r7, #24]
   1ad88:	0018      	movs	r0, r3
   1ad8a:	4b0f      	ldr	r3, [pc, #60]	; (1adc8 <xQueueGenericSendFromISR+0x20c>)
   1ad8c:	4798      	blx	r3
   1ad8e:	0003      	movs	r3, r0
   1ad90:	b2db      	uxtb	r3, r3
   1ad92:	001a      	movs	r2, r3
   1ad94:	0021      	movs	r1, r4
   1ad96:	0028      	movs	r0, r5
   1ad98:	4b0c      	ldr	r3, [pc, #48]	; (1adcc <xQueueGenericSendFromISR+0x210>)
   1ad9a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1ad9c:	2300      	movs	r3, #0
   1ad9e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1ada0:	697b      	ldr	r3, [r7, #20]
   1ada2:	0018      	movs	r0, r3
   1ada4:	4b0e      	ldr	r3, [pc, #56]	; (1ade0 <xQueueGenericSendFromISR+0x224>)
   1ada6:	4798      	blx	r3

	return xReturn;
   1ada8:	69fb      	ldr	r3, [r7, #28]
}
   1adaa:	0018      	movs	r0, r3
   1adac:	46bd      	mov	sp, r7
   1adae:	b008      	add	sp, #32
   1adb0:	bdb0      	pop	{r4, r5, r7, pc}
   1adb2:	46c0      	nop			; (mov r8, r8)
   1adb4:	0001a21d 	.word	0x0001a21d
   1adb8:	00018281 	.word	0x00018281
   1adbc:	20000104 	.word	0x20000104
   1adc0:	00018181 	.word	0x00018181
   1adc4:	200000f8 	.word	0x200000f8
   1adc8:	00018261 	.word	0x00018261
   1adcc:	00018bb9 	.word	0x00018bb9
   1add0:	00019215 	.word	0x00019215
   1add4:	0001b995 	.word	0x0001b995
   1add8:	0001bc99 	.word	0x0001bc99
   1addc:	0001ca59 	.word	0x0001ca59
   1ade0:	0001a229 	.word	0x0001a229

0001ade4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1ade4:	b580      	push	{r7, lr}
   1ade6:	b082      	sub	sp, #8
   1ade8:	af00      	add	r7, sp, #0
   1adea:	6078      	str	r0, [r7, #4]
   1adec:	6039      	str	r1, [r7, #0]
   1adee:	6839      	ldr	r1, [r7, #0]
   1adf0:	687b      	ldr	r3, [r7, #4]
   1adf2:	2200      	movs	r2, #0
   1adf4:	0018      	movs	r0, r3
   1adf6:	4b03      	ldr	r3, [pc, #12]	; (1ae04 <xQueueGiveFromISR+0x20>)
   1adf8:	4798      	blx	r3
   1adfa:	0003      	movs	r3, r0
   1adfc:	0018      	movs	r0, r3
   1adfe:	46bd      	mov	sp, r7
   1ae00:	b002      	add	sp, #8
   1ae02:	bd80      	pop	{r7, pc}
   1ae04:	0001ae09 	.word	0x0001ae09

0001ae08 <MyWrapper>:
{
   1ae08:	b5b0      	push	{r4, r5, r7, lr}
   1ae0a:	b08a      	sub	sp, #40	; 0x28
   1ae0c:	af00      	add	r7, sp, #0
   1ae0e:	60f8      	str	r0, [r7, #12]
   1ae10:	60b9      	str	r1, [r7, #8]
   1ae12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ae14:	68fb      	ldr	r3, [r7, #12]
   1ae16:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1ae18:	6a3b      	ldr	r3, [r7, #32]
   1ae1a:	2b00      	cmp	r3, #0
   1ae1c:	d101      	bne.n	1ae22 <MyWrapper+0x1a>
   1ae1e:	b672      	cpsid	i
   1ae20:	e7fe      	b.n	1ae20 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1ae22:	6a3b      	ldr	r3, [r7, #32]
   1ae24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ae26:	2b00      	cmp	r3, #0
   1ae28:	d001      	beq.n	1ae2e <MyWrapper+0x26>
   1ae2a:	b672      	cpsid	i
   1ae2c:	e7fe      	b.n	1ae2c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1ae2e:	6a3b      	ldr	r3, [r7, #32]
   1ae30:	681b      	ldr	r3, [r3, #0]
   1ae32:	2b00      	cmp	r3, #0
   1ae34:	d103      	bne.n	1ae3e <MyWrapper+0x36>
   1ae36:	6a3b      	ldr	r3, [r7, #32]
   1ae38:	685b      	ldr	r3, [r3, #4]
   1ae3a:	2b00      	cmp	r3, #0
   1ae3c:	d101      	bne.n	1ae42 <MyWrapper+0x3a>
   1ae3e:	2301      	movs	r3, #1
   1ae40:	e000      	b.n	1ae44 <MyWrapper+0x3c>
   1ae42:	2300      	movs	r3, #0
   1ae44:	2b00      	cmp	r3, #0
   1ae46:	d101      	bne.n	1ae4c <MyWrapper+0x44>
   1ae48:	b672      	cpsid	i
   1ae4a:	e7fe      	b.n	1ae4a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1ae4c:	4b66      	ldr	r3, [pc, #408]	; (1afe8 <MyWrapper+0x1e0>)
   1ae4e:	4798      	blx	r3
   1ae50:	0003      	movs	r3, r0
   1ae52:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1ae54:	6a3b      	ldr	r3, [r7, #32]
   1ae56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ae58:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1ae5a:	6a3b      	ldr	r3, [r7, #32]
   1ae5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1ae5e:	69bb      	ldr	r3, [r7, #24]
   1ae60:	429a      	cmp	r2, r3
   1ae62:	d800      	bhi.n	1ae66 <MyWrapper+0x5e>
   1ae64:	e085      	b.n	1af72 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1ae66:	2317      	movs	r3, #23
   1ae68:	18fb      	adds	r3, r7, r3
   1ae6a:	6a3a      	ldr	r2, [r7, #32]
   1ae6c:	2145      	movs	r1, #69	; 0x45
   1ae6e:	5c52      	ldrb	r2, [r2, r1]
   1ae70:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1ae72:	6a3b      	ldr	r3, [r7, #32]
   1ae74:	0018      	movs	r0, r3
   1ae76:	4b5d      	ldr	r3, [pc, #372]	; (1afec <MyWrapper+0x1e4>)
   1ae78:	4798      	blx	r3
   1ae7a:	0003      	movs	r3, r0
   1ae7c:	001a      	movs	r2, r3
   1ae7e:	4b5c      	ldr	r3, [pc, #368]	; (1aff0 <MyWrapper+0x1e8>)
   1ae80:	881b      	ldrh	r3, [r3, #0]
   1ae82:	4013      	ands	r3, r2
   1ae84:	b29b      	uxth	r3, r3
   1ae86:	2b00      	cmp	r3, #0
   1ae88:	d022      	beq.n	1aed0 <MyWrapper+0xc8>
   1ae8a:	687b      	ldr	r3, [r7, #4]
   1ae8c:	2b00      	cmp	r3, #0
   1ae8e:	d10b      	bne.n	1aea8 <MyWrapper+0xa0>
   1ae90:	6a3b      	ldr	r3, [r7, #32]
   1ae92:	0018      	movs	r0, r3
   1ae94:	4b57      	ldr	r3, [pc, #348]	; (1aff4 <MyWrapper+0x1ec>)
   1ae96:	4798      	blx	r3
   1ae98:	0003      	movs	r3, r0
   1ae9a:	001a      	movs	r2, r3
   1ae9c:	4b56      	ldr	r3, [pc, #344]	; (1aff8 <MyWrapper+0x1f0>)
   1ae9e:	5c9b      	ldrb	r3, [r3, r2]
   1aea0:	3330      	adds	r3, #48	; 0x30
   1aea2:	b2db      	uxtb	r3, r3
   1aea4:	001d      	movs	r5, r3
   1aea6:	e000      	b.n	1aeaa <MyWrapper+0xa2>
   1aea8:	2535      	movs	r5, #53	; 0x35
   1aeaa:	6a3b      	ldr	r3, [r7, #32]
   1aeac:	0018      	movs	r0, r3
   1aeae:	4b51      	ldr	r3, [pc, #324]	; (1aff4 <MyWrapper+0x1ec>)
   1aeb0:	4798      	blx	r3
   1aeb2:	0003      	movs	r3, r0
   1aeb4:	001a      	movs	r2, r3
   1aeb6:	4b50      	ldr	r3, [pc, #320]	; (1aff8 <MyWrapper+0x1f0>)
   1aeb8:	5c9c      	ldrb	r4, [r3, r2]
   1aeba:	6a3b      	ldr	r3, [r7, #32]
   1aebc:	0018      	movs	r0, r3
   1aebe:	4b4f      	ldr	r3, [pc, #316]	; (1affc <MyWrapper+0x1f4>)
   1aec0:	4798      	blx	r3
   1aec2:	0003      	movs	r3, r0
   1aec4:	b2db      	uxtb	r3, r3
   1aec6:	001a      	movs	r2, r3
   1aec8:	0021      	movs	r1, r4
   1aeca:	0028      	movs	r0, r5
   1aecc:	4b4c      	ldr	r3, [pc, #304]	; (1b000 <MyWrapper+0x1f8>)
   1aece:	4798      	blx	r3
   1aed0:	6a3b      	ldr	r3, [r7, #32]
   1aed2:	0018      	movs	r0, r3
   1aed4:	4b47      	ldr	r3, [pc, #284]	; (1aff4 <MyWrapper+0x1ec>)
   1aed6:	4798      	blx	r3
   1aed8:	0003      	movs	r3, r0
   1aeda:	001a      	movs	r2, r3
   1aedc:	4b46      	ldr	r3, [pc, #280]	; (1aff8 <MyWrapper+0x1f0>)
   1aede:	5c9c      	ldrb	r4, [r3, r2]
   1aee0:	6a3b      	ldr	r3, [r7, #32]
   1aee2:	0018      	movs	r0, r3
   1aee4:	4b45      	ldr	r3, [pc, #276]	; (1affc <MyWrapper+0x1f4>)
   1aee6:	4798      	blx	r3
   1aee8:	0003      	movs	r3, r0
   1aeea:	b2d9      	uxtb	r1, r3
   1aeec:	6a3b      	ldr	r3, [r7, #32]
   1aeee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1aef0:	b2db      	uxtb	r3, r3
   1aef2:	3301      	adds	r3, #1
   1aef4:	b2db      	uxtb	r3, r3
   1aef6:	001a      	movs	r2, r3
   1aef8:	0020      	movs	r0, r4
   1aefa:	4b42      	ldr	r3, [pc, #264]	; (1b004 <MyWrapper+0x1fc>)
   1aefc:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1aefe:	69bb      	ldr	r3, [r7, #24]
   1af00:	1c5a      	adds	r2, r3, #1
   1af02:	6a3b      	ldr	r3, [r7, #32]
   1af04:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1af06:	2317      	movs	r3, #23
   1af08:	18fb      	adds	r3, r7, r3
   1af0a:	781b      	ldrb	r3, [r3, #0]
   1af0c:	b25b      	sxtb	r3, r3
   1af0e:	3301      	adds	r3, #1
   1af10:	d123      	bne.n	1af5a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1af12:	6a3b      	ldr	r3, [r7, #32]
   1af14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1af16:	2b00      	cmp	r3, #0
   1af18:	d00d      	beq.n	1af36 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1af1a:	6a3b      	ldr	r3, [r7, #32]
   1af1c:	2100      	movs	r1, #0
   1af1e:	0018      	movs	r0, r3
   1af20:	4b39      	ldr	r3, [pc, #228]	; (1b008 <MyWrapper+0x200>)
   1af22:	4798      	blx	r3
   1af24:	1e03      	subs	r3, r0, #0
   1af26:	d021      	beq.n	1af6c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1af28:	68bb      	ldr	r3, [r7, #8]
   1af2a:	2b00      	cmp	r3, #0
   1af2c:	d01e      	beq.n	1af6c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1af2e:	68bb      	ldr	r3, [r7, #8]
   1af30:	2201      	movs	r2, #1
   1af32:	601a      	str	r2, [r3, #0]
   1af34:	e01a      	b.n	1af6c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1af36:	6a3b      	ldr	r3, [r7, #32]
   1af38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1af3a:	2b00      	cmp	r3, #0
   1af3c:	d016      	beq.n	1af6c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1af3e:	6a3b      	ldr	r3, [r7, #32]
   1af40:	3324      	adds	r3, #36	; 0x24
   1af42:	0018      	movs	r0, r3
   1af44:	4b31      	ldr	r3, [pc, #196]	; (1b00c <MyWrapper+0x204>)
   1af46:	4798      	blx	r3
   1af48:	1e03      	subs	r3, r0, #0
   1af4a:	d00f      	beq.n	1af6c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1af4c:	68bb      	ldr	r3, [r7, #8]
   1af4e:	2b00      	cmp	r3, #0
   1af50:	d00c      	beq.n	1af6c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1af52:	68bb      	ldr	r3, [r7, #8]
   1af54:	2201      	movs	r2, #1
   1af56:	601a      	str	r2, [r3, #0]
   1af58:	e008      	b.n	1af6c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1af5a:	2317      	movs	r3, #23
   1af5c:	18fb      	adds	r3, r7, r3
   1af5e:	781b      	ldrb	r3, [r3, #0]
   1af60:	3301      	adds	r3, #1
   1af62:	b2db      	uxtb	r3, r3
   1af64:	b259      	sxtb	r1, r3
   1af66:	6a3b      	ldr	r3, [r7, #32]
   1af68:	2245      	movs	r2, #69	; 0x45
   1af6a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1af6c:	2301      	movs	r3, #1
   1af6e:	627b      	str	r3, [r7, #36]	; 0x24
   1af70:	e030      	b.n	1afd4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1af72:	6a3b      	ldr	r3, [r7, #32]
   1af74:	0018      	movs	r0, r3
   1af76:	4b1d      	ldr	r3, [pc, #116]	; (1afec <MyWrapper+0x1e4>)
   1af78:	4798      	blx	r3
   1af7a:	0003      	movs	r3, r0
   1af7c:	001a      	movs	r2, r3
   1af7e:	4b1c      	ldr	r3, [pc, #112]	; (1aff0 <MyWrapper+0x1e8>)
   1af80:	881b      	ldrh	r3, [r3, #0]
   1af82:	4013      	ands	r3, r2
   1af84:	b29b      	uxth	r3, r3
   1af86:	2b00      	cmp	r3, #0
   1af88:	d022      	beq.n	1afd0 <MyWrapper+0x1c8>
   1af8a:	687b      	ldr	r3, [r7, #4]
   1af8c:	2b00      	cmp	r3, #0
   1af8e:	d10b      	bne.n	1afa8 <MyWrapper+0x1a0>
   1af90:	6a3b      	ldr	r3, [r7, #32]
   1af92:	0018      	movs	r0, r3
   1af94:	4b17      	ldr	r3, [pc, #92]	; (1aff4 <MyWrapper+0x1ec>)
   1af96:	4798      	blx	r3
   1af98:	0003      	movs	r3, r0
   1af9a:	001a      	movs	r2, r3
   1af9c:	4b16      	ldr	r3, [pc, #88]	; (1aff8 <MyWrapper+0x1f0>)
   1af9e:	5c9b      	ldrb	r3, [r3, r2]
   1afa0:	3358      	adds	r3, #88	; 0x58
   1afa2:	b2db      	uxtb	r3, r3
   1afa4:	001d      	movs	r5, r3
   1afa6:	e000      	b.n	1afaa <MyWrapper+0x1a2>
   1afa8:	255d      	movs	r5, #93	; 0x5d
   1afaa:	6a3b      	ldr	r3, [r7, #32]
   1afac:	0018      	movs	r0, r3
   1afae:	4b11      	ldr	r3, [pc, #68]	; (1aff4 <MyWrapper+0x1ec>)
   1afb0:	4798      	blx	r3
   1afb2:	0003      	movs	r3, r0
   1afb4:	001a      	movs	r2, r3
   1afb6:	4b10      	ldr	r3, [pc, #64]	; (1aff8 <MyWrapper+0x1f0>)
   1afb8:	5c9c      	ldrb	r4, [r3, r2]
   1afba:	6a3b      	ldr	r3, [r7, #32]
   1afbc:	0018      	movs	r0, r3
   1afbe:	4b0f      	ldr	r3, [pc, #60]	; (1affc <MyWrapper+0x1f4>)
   1afc0:	4798      	blx	r3
   1afc2:	0003      	movs	r3, r0
   1afc4:	b2db      	uxtb	r3, r3
   1afc6:	001a      	movs	r2, r3
   1afc8:	0021      	movs	r1, r4
   1afca:	0028      	movs	r0, r5
   1afcc:	4b0c      	ldr	r3, [pc, #48]	; (1b000 <MyWrapper+0x1f8>)
   1afce:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1afd0:	2300      	movs	r3, #0
   1afd2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1afd4:	69fb      	ldr	r3, [r7, #28]
   1afd6:	0018      	movs	r0, r3
   1afd8:	4b0d      	ldr	r3, [pc, #52]	; (1b010 <MyWrapper+0x208>)
   1afda:	4798      	blx	r3

	return xReturn;
   1afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1afde:	0018      	movs	r0, r3
   1afe0:	46bd      	mov	sp, r7
   1afe2:	b00a      	add	sp, #40	; 0x28
   1afe4:	bdb0      	pop	{r4, r5, r7, pc}
   1afe6:	46c0      	nop			; (mov r8, r8)
   1afe8:	0001a21d 	.word	0x0001a21d
   1afec:	00018281 	.word	0x00018281
   1aff0:	20000104 	.word	0x20000104
   1aff4:	00018181 	.word	0x00018181
   1aff8:	200000f8 	.word	0x200000f8
   1affc:	00018261 	.word	0x00018261
   1b000:	00018bb9 	.word	0x00018bb9
   1b004:	00019215 	.word	0x00019215
   1b008:	0001bc99 	.word	0x0001bc99
   1b00c:	0001ca59 	.word	0x0001ca59
   1b010:	0001a229 	.word	0x0001a229

0001b014 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1b014:	b5b0      	push	{r4, r5, r7, lr}
   1b016:	b08a      	sub	sp, #40	; 0x28
   1b018:	af00      	add	r7, sp, #0
   1b01a:	60f8      	str	r0, [r7, #12]
   1b01c:	60b9      	str	r1, [r7, #8]
   1b01e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1b020:	2300      	movs	r3, #0
   1b022:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b024:	68fb      	ldr	r3, [r7, #12]
   1b026:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b028:	6a3b      	ldr	r3, [r7, #32]
   1b02a:	2b00      	cmp	r3, #0
   1b02c:	d101      	bne.n	1b032 <xQueueReceive+0x1e>
   1b02e:	b672      	cpsid	i
   1b030:	e7fe      	b.n	1b030 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b032:	68bb      	ldr	r3, [r7, #8]
   1b034:	2b00      	cmp	r3, #0
   1b036:	d103      	bne.n	1b040 <xQueueReceive+0x2c>
   1b038:	6a3b      	ldr	r3, [r7, #32]
   1b03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b03c:	2b00      	cmp	r3, #0
   1b03e:	d101      	bne.n	1b044 <xQueueReceive+0x30>
   1b040:	2301      	movs	r3, #1
   1b042:	e000      	b.n	1b046 <xQueueReceive+0x32>
   1b044:	2300      	movs	r3, #0
   1b046:	2b00      	cmp	r3, #0
   1b048:	d101      	bne.n	1b04e <xQueueReceive+0x3a>
   1b04a:	b672      	cpsid	i
   1b04c:	e7fe      	b.n	1b04c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b04e:	4bbf      	ldr	r3, [pc, #764]	; (1b34c <xQueueReceive+0x338>)
   1b050:	4798      	blx	r3
   1b052:	1e03      	subs	r3, r0, #0
   1b054:	d102      	bne.n	1b05c <xQueueReceive+0x48>
   1b056:	687b      	ldr	r3, [r7, #4]
   1b058:	2b00      	cmp	r3, #0
   1b05a:	d101      	bne.n	1b060 <xQueueReceive+0x4c>
   1b05c:	2301      	movs	r3, #1
   1b05e:	e000      	b.n	1b062 <xQueueReceive+0x4e>
   1b060:	2300      	movs	r3, #0
   1b062:	2b00      	cmp	r3, #0
   1b064:	d101      	bne.n	1b06a <xQueueReceive+0x56>
   1b066:	b672      	cpsid	i
   1b068:	e7fe      	b.n	1b068 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b06a:	4bb9      	ldr	r3, [pc, #740]	; (1b350 <xQueueReceive+0x33c>)
   1b06c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b06e:	6a3b      	ldr	r3, [r7, #32]
   1b070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b072:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b074:	69fb      	ldr	r3, [r7, #28]
   1b076:	2b00      	cmp	r3, #0
   1b078:	d100      	bne.n	1b07c <xQueueReceive+0x68>
   1b07a:	e07d      	b.n	1b178 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1b07c:	68ba      	ldr	r2, [r7, #8]
   1b07e:	6a3b      	ldr	r3, [r7, #32]
   1b080:	0011      	movs	r1, r2
   1b082:	0018      	movs	r0, r3
   1b084:	4bb3      	ldr	r3, [pc, #716]	; (1b354 <xQueueReceive+0x340>)
   1b086:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1b088:	4bb3      	ldr	r3, [pc, #716]	; (1b358 <xQueueReceive+0x344>)
   1b08a:	4798      	blx	r3
   1b08c:	0003      	movs	r3, r0
   1b08e:	0018      	movs	r0, r3
   1b090:	4bb2      	ldr	r3, [pc, #712]	; (1b35c <xQueueReceive+0x348>)
   1b092:	4798      	blx	r3
   1b094:	0003      	movs	r3, r0
   1b096:	001a      	movs	r2, r3
   1b098:	4bb1      	ldr	r3, [pc, #708]	; (1b360 <xQueueReceive+0x34c>)
   1b09a:	881b      	ldrh	r3, [r3, #0]
   1b09c:	4013      	ands	r3, r2
   1b09e:	b29b      	uxth	r3, r3
   1b0a0:	2b00      	cmp	r3, #0
   1b0a2:	d029      	beq.n	1b0f8 <xQueueReceive+0xe4>
   1b0a4:	6a3b      	ldr	r3, [r7, #32]
   1b0a6:	0018      	movs	r0, r3
   1b0a8:	4bae      	ldr	r3, [pc, #696]	; (1b364 <xQueueReceive+0x350>)
   1b0aa:	4798      	blx	r3
   1b0ac:	0003      	movs	r3, r0
   1b0ae:	001a      	movs	r2, r3
   1b0b0:	4bab      	ldr	r3, [pc, #684]	; (1b360 <xQueueReceive+0x34c>)
   1b0b2:	881b      	ldrh	r3, [r3, #0]
   1b0b4:	4013      	ands	r3, r2
   1b0b6:	b29b      	uxth	r3, r3
   1b0b8:	2b00      	cmp	r3, #0
   1b0ba:	d01d      	beq.n	1b0f8 <xQueueReceive+0xe4>
   1b0bc:	6a3b      	ldr	r3, [r7, #32]
   1b0be:	0018      	movs	r0, r3
   1b0c0:	4ba9      	ldr	r3, [pc, #676]	; (1b368 <xQueueReceive+0x354>)
   1b0c2:	4798      	blx	r3
   1b0c4:	0003      	movs	r3, r0
   1b0c6:	001a      	movs	r2, r3
   1b0c8:	4ba8      	ldr	r3, [pc, #672]	; (1b36c <xQueueReceive+0x358>)
   1b0ca:	5c9b      	ldrb	r3, [r3, r2]
   1b0cc:	3328      	adds	r3, #40	; 0x28
   1b0ce:	b2db      	uxtb	r3, r3
   1b0d0:	001d      	movs	r5, r3
   1b0d2:	6a3b      	ldr	r3, [r7, #32]
   1b0d4:	0018      	movs	r0, r3
   1b0d6:	4ba4      	ldr	r3, [pc, #656]	; (1b368 <xQueueReceive+0x354>)
   1b0d8:	4798      	blx	r3
   1b0da:	0003      	movs	r3, r0
   1b0dc:	001a      	movs	r2, r3
   1b0de:	4ba3      	ldr	r3, [pc, #652]	; (1b36c <xQueueReceive+0x358>)
   1b0e0:	5c9c      	ldrb	r4, [r3, r2]
   1b0e2:	6a3b      	ldr	r3, [r7, #32]
   1b0e4:	0018      	movs	r0, r3
   1b0e6:	4ba2      	ldr	r3, [pc, #648]	; (1b370 <xQueueReceive+0x35c>)
   1b0e8:	4798      	blx	r3
   1b0ea:	0003      	movs	r3, r0
   1b0ec:	b2db      	uxtb	r3, r3
   1b0ee:	001a      	movs	r2, r3
   1b0f0:	0021      	movs	r1, r4
   1b0f2:	0028      	movs	r0, r5
   1b0f4:	4b9f      	ldr	r3, [pc, #636]	; (1b374 <xQueueReceive+0x360>)
   1b0f6:	4798      	blx	r3
   1b0f8:	6a3b      	ldr	r3, [r7, #32]
   1b0fa:	0018      	movs	r0, r3
   1b0fc:	4b9a      	ldr	r3, [pc, #616]	; (1b368 <xQueueReceive+0x354>)
   1b0fe:	4798      	blx	r3
   1b100:	0003      	movs	r3, r0
   1b102:	001a      	movs	r2, r3
   1b104:	4b99      	ldr	r3, [pc, #612]	; (1b36c <xQueueReceive+0x358>)
   1b106:	5c9c      	ldrb	r4, [r3, r2]
   1b108:	6a3b      	ldr	r3, [r7, #32]
   1b10a:	0018      	movs	r0, r3
   1b10c:	4b98      	ldr	r3, [pc, #608]	; (1b370 <xQueueReceive+0x35c>)
   1b10e:	4798      	blx	r3
   1b110:	0003      	movs	r3, r0
   1b112:	b2dd      	uxtb	r5, r3
   1b114:	6a3b      	ldr	r3, [r7, #32]
   1b116:	0018      	movs	r0, r3
   1b118:	4b93      	ldr	r3, [pc, #588]	; (1b368 <xQueueReceive+0x354>)
   1b11a:	4798      	blx	r3
   1b11c:	0003      	movs	r3, r0
   1b11e:	001a      	movs	r2, r3
   1b120:	4b92      	ldr	r3, [pc, #584]	; (1b36c <xQueueReceive+0x358>)
   1b122:	5c9b      	ldrb	r3, [r3, r2]
   1b124:	2b02      	cmp	r3, #2
   1b126:	d108      	bne.n	1b13a <xQueueReceive+0x126>
   1b128:	4b8b      	ldr	r3, [pc, #556]	; (1b358 <xQueueReceive+0x344>)
   1b12a:	4798      	blx	r3
   1b12c:	0003      	movs	r3, r0
   1b12e:	0018      	movs	r0, r3
   1b130:	4b91      	ldr	r3, [pc, #580]	; (1b378 <xQueueReceive+0x364>)
   1b132:	4798      	blx	r3
   1b134:	0003      	movs	r3, r0
   1b136:	b2db      	uxtb	r3, r3
   1b138:	e004      	b.n	1b144 <xQueueReceive+0x130>
   1b13a:	6a3b      	ldr	r3, [r7, #32]
   1b13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b13e:	b2db      	uxtb	r3, r3
   1b140:	3b01      	subs	r3, #1
   1b142:	b2db      	uxtb	r3, r3
   1b144:	001a      	movs	r2, r3
   1b146:	0029      	movs	r1, r5
   1b148:	0020      	movs	r0, r4
   1b14a:	4b8c      	ldr	r3, [pc, #560]	; (1b37c <xQueueReceive+0x368>)
   1b14c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1b14e:	69fb      	ldr	r3, [r7, #28]
   1b150:	1e5a      	subs	r2, r3, #1
   1b152:	6a3b      	ldr	r3, [r7, #32]
   1b154:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b156:	6a3b      	ldr	r3, [r7, #32]
   1b158:	691b      	ldr	r3, [r3, #16]
   1b15a:	2b00      	cmp	r3, #0
   1b15c:	d008      	beq.n	1b170 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b15e:	6a3b      	ldr	r3, [r7, #32]
   1b160:	3310      	adds	r3, #16
   1b162:	0018      	movs	r0, r3
   1b164:	4b86      	ldr	r3, [pc, #536]	; (1b380 <xQueueReceive+0x36c>)
   1b166:	4798      	blx	r3
   1b168:	1e03      	subs	r3, r0, #0
   1b16a:	d001      	beq.n	1b170 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b16c:	4b85      	ldr	r3, [pc, #532]	; (1b384 <xQueueReceive+0x370>)
   1b16e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b170:	4b85      	ldr	r3, [pc, #532]	; (1b388 <xQueueReceive+0x374>)
   1b172:	4798      	blx	r3
				return pdPASS;
   1b174:	2301      	movs	r3, #1
   1b176:	e15f      	b.n	1b438 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b178:	687b      	ldr	r3, [r7, #4]
   1b17a:	2b00      	cmp	r3, #0
   1b17c:	d13b      	bne.n	1b1f6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b17e:	4b82      	ldr	r3, [pc, #520]	; (1b388 <xQueueReceive+0x374>)
   1b180:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b182:	4b75      	ldr	r3, [pc, #468]	; (1b358 <xQueueReceive+0x344>)
   1b184:	4798      	blx	r3
   1b186:	0003      	movs	r3, r0
   1b188:	0018      	movs	r0, r3
   1b18a:	4b74      	ldr	r3, [pc, #464]	; (1b35c <xQueueReceive+0x348>)
   1b18c:	4798      	blx	r3
   1b18e:	0003      	movs	r3, r0
   1b190:	001a      	movs	r2, r3
   1b192:	4b73      	ldr	r3, [pc, #460]	; (1b360 <xQueueReceive+0x34c>)
   1b194:	881b      	ldrh	r3, [r3, #0]
   1b196:	4013      	ands	r3, r2
   1b198:	b29b      	uxth	r3, r3
   1b19a:	2b00      	cmp	r3, #0
   1b19c:	d029      	beq.n	1b1f2 <xQueueReceive+0x1de>
   1b19e:	6a3b      	ldr	r3, [r7, #32]
   1b1a0:	0018      	movs	r0, r3
   1b1a2:	4b70      	ldr	r3, [pc, #448]	; (1b364 <xQueueReceive+0x350>)
   1b1a4:	4798      	blx	r3
   1b1a6:	0003      	movs	r3, r0
   1b1a8:	001a      	movs	r2, r3
   1b1aa:	4b6d      	ldr	r3, [pc, #436]	; (1b360 <xQueueReceive+0x34c>)
   1b1ac:	881b      	ldrh	r3, [r3, #0]
   1b1ae:	4013      	ands	r3, r2
   1b1b0:	b29b      	uxth	r3, r3
   1b1b2:	2b00      	cmp	r3, #0
   1b1b4:	d01d      	beq.n	1b1f2 <xQueueReceive+0x1de>
   1b1b6:	6a3b      	ldr	r3, [r7, #32]
   1b1b8:	0018      	movs	r0, r3
   1b1ba:	4b6b      	ldr	r3, [pc, #428]	; (1b368 <xQueueReceive+0x354>)
   1b1bc:	4798      	blx	r3
   1b1be:	0003      	movs	r3, r0
   1b1c0:	001a      	movs	r2, r3
   1b1c2:	4b6a      	ldr	r3, [pc, #424]	; (1b36c <xQueueReceive+0x358>)
   1b1c4:	5c9b      	ldrb	r3, [r3, r2]
   1b1c6:	3350      	adds	r3, #80	; 0x50
   1b1c8:	b2db      	uxtb	r3, r3
   1b1ca:	001d      	movs	r5, r3
   1b1cc:	6a3b      	ldr	r3, [r7, #32]
   1b1ce:	0018      	movs	r0, r3
   1b1d0:	4b65      	ldr	r3, [pc, #404]	; (1b368 <xQueueReceive+0x354>)
   1b1d2:	4798      	blx	r3
   1b1d4:	0003      	movs	r3, r0
   1b1d6:	001a      	movs	r2, r3
   1b1d8:	4b64      	ldr	r3, [pc, #400]	; (1b36c <xQueueReceive+0x358>)
   1b1da:	5c9c      	ldrb	r4, [r3, r2]
   1b1dc:	6a3b      	ldr	r3, [r7, #32]
   1b1de:	0018      	movs	r0, r3
   1b1e0:	4b63      	ldr	r3, [pc, #396]	; (1b370 <xQueueReceive+0x35c>)
   1b1e2:	4798      	blx	r3
   1b1e4:	0003      	movs	r3, r0
   1b1e6:	b2db      	uxtb	r3, r3
   1b1e8:	001a      	movs	r2, r3
   1b1ea:	0021      	movs	r1, r4
   1b1ec:	0028      	movs	r0, r5
   1b1ee:	4b61      	ldr	r3, [pc, #388]	; (1b374 <xQueueReceive+0x360>)
   1b1f0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1b1f2:	2300      	movs	r3, #0
   1b1f4:	e120      	b.n	1b438 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b1f8:	2b00      	cmp	r3, #0
   1b1fa:	d106      	bne.n	1b20a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b1fc:	2314      	movs	r3, #20
   1b1fe:	18fb      	adds	r3, r7, r3
   1b200:	0018      	movs	r0, r3
   1b202:	4b62      	ldr	r3, [pc, #392]	; (1b38c <xQueueReceive+0x378>)
   1b204:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b206:	2301      	movs	r3, #1
   1b208:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b20a:	4b5f      	ldr	r3, [pc, #380]	; (1b388 <xQueueReceive+0x374>)
   1b20c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b20e:	4b60      	ldr	r3, [pc, #384]	; (1b390 <xQueueReceive+0x37c>)
   1b210:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b212:	4b4f      	ldr	r3, [pc, #316]	; (1b350 <xQueueReceive+0x33c>)
   1b214:	4798      	blx	r3
   1b216:	6a3b      	ldr	r3, [r7, #32]
   1b218:	2244      	movs	r2, #68	; 0x44
   1b21a:	5c9b      	ldrb	r3, [r3, r2]
   1b21c:	b25b      	sxtb	r3, r3
   1b21e:	3301      	adds	r3, #1
   1b220:	d103      	bne.n	1b22a <xQueueReceive+0x216>
   1b222:	6a3b      	ldr	r3, [r7, #32]
   1b224:	2244      	movs	r2, #68	; 0x44
   1b226:	2100      	movs	r1, #0
   1b228:	5499      	strb	r1, [r3, r2]
   1b22a:	6a3b      	ldr	r3, [r7, #32]
   1b22c:	2245      	movs	r2, #69	; 0x45
   1b22e:	5c9b      	ldrb	r3, [r3, r2]
   1b230:	b25b      	sxtb	r3, r3
   1b232:	3301      	adds	r3, #1
   1b234:	d103      	bne.n	1b23e <xQueueReceive+0x22a>
   1b236:	6a3b      	ldr	r3, [r7, #32]
   1b238:	2245      	movs	r2, #69	; 0x45
   1b23a:	2100      	movs	r1, #0
   1b23c:	5499      	strb	r1, [r3, r2]
   1b23e:	4b52      	ldr	r3, [pc, #328]	; (1b388 <xQueueReceive+0x374>)
   1b240:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b242:	1d3a      	adds	r2, r7, #4
   1b244:	2314      	movs	r3, #20
   1b246:	18fb      	adds	r3, r7, r3
   1b248:	0011      	movs	r1, r2
   1b24a:	0018      	movs	r0, r3
   1b24c:	4b51      	ldr	r3, [pc, #324]	; (1b394 <xQueueReceive+0x380>)
   1b24e:	4798      	blx	r3
   1b250:	1e03      	subs	r3, r0, #0
   1b252:	d000      	beq.n	1b256 <xQueueReceive+0x242>
   1b254:	e0aa      	b.n	1b3ac <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b256:	6a3b      	ldr	r3, [r7, #32]
   1b258:	0018      	movs	r0, r3
   1b25a:	4b4f      	ldr	r3, [pc, #316]	; (1b398 <xQueueReceive+0x384>)
   1b25c:	4798      	blx	r3
   1b25e:	1e03      	subs	r3, r0, #0
   1b260:	d06d      	beq.n	1b33e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b262:	4b3d      	ldr	r3, [pc, #244]	; (1b358 <xQueueReceive+0x344>)
   1b264:	4798      	blx	r3
   1b266:	0003      	movs	r3, r0
   1b268:	0018      	movs	r0, r3
   1b26a:	4b3c      	ldr	r3, [pc, #240]	; (1b35c <xQueueReceive+0x348>)
   1b26c:	4798      	blx	r3
   1b26e:	0003      	movs	r3, r0
   1b270:	001a      	movs	r2, r3
   1b272:	4b3b      	ldr	r3, [pc, #236]	; (1b360 <xQueueReceive+0x34c>)
   1b274:	881b      	ldrh	r3, [r3, #0]
   1b276:	4013      	ands	r3, r2
   1b278:	b29b      	uxth	r3, r3
   1b27a:	2b00      	cmp	r3, #0
   1b27c:	d029      	beq.n	1b2d2 <xQueueReceive+0x2be>
   1b27e:	6a3b      	ldr	r3, [r7, #32]
   1b280:	0018      	movs	r0, r3
   1b282:	4b38      	ldr	r3, [pc, #224]	; (1b364 <xQueueReceive+0x350>)
   1b284:	4798      	blx	r3
   1b286:	0003      	movs	r3, r0
   1b288:	001a      	movs	r2, r3
   1b28a:	4b35      	ldr	r3, [pc, #212]	; (1b360 <xQueueReceive+0x34c>)
   1b28c:	881b      	ldrh	r3, [r3, #0]
   1b28e:	4013      	ands	r3, r2
   1b290:	b29b      	uxth	r3, r3
   1b292:	2b00      	cmp	r3, #0
   1b294:	d01d      	beq.n	1b2d2 <xQueueReceive+0x2be>
   1b296:	6a3b      	ldr	r3, [r7, #32]
   1b298:	0018      	movs	r0, r3
   1b29a:	4b33      	ldr	r3, [pc, #204]	; (1b368 <xQueueReceive+0x354>)
   1b29c:	4798      	blx	r3
   1b29e:	0003      	movs	r3, r0
   1b2a0:	001a      	movs	r2, r3
   1b2a2:	4b32      	ldr	r3, [pc, #200]	; (1b36c <xQueueReceive+0x358>)
   1b2a4:	5c9b      	ldrb	r3, [r3, r2]
   1b2a6:	3368      	adds	r3, #104	; 0x68
   1b2a8:	b2db      	uxtb	r3, r3
   1b2aa:	001d      	movs	r5, r3
   1b2ac:	6a3b      	ldr	r3, [r7, #32]
   1b2ae:	0018      	movs	r0, r3
   1b2b0:	4b2d      	ldr	r3, [pc, #180]	; (1b368 <xQueueReceive+0x354>)
   1b2b2:	4798      	blx	r3
   1b2b4:	0003      	movs	r3, r0
   1b2b6:	001a      	movs	r2, r3
   1b2b8:	4b2c      	ldr	r3, [pc, #176]	; (1b36c <xQueueReceive+0x358>)
   1b2ba:	5c9c      	ldrb	r4, [r3, r2]
   1b2bc:	6a3b      	ldr	r3, [r7, #32]
   1b2be:	0018      	movs	r0, r3
   1b2c0:	4b2b      	ldr	r3, [pc, #172]	; (1b370 <xQueueReceive+0x35c>)
   1b2c2:	4798      	blx	r3
   1b2c4:	0003      	movs	r3, r0
   1b2c6:	b2db      	uxtb	r3, r3
   1b2c8:	001a      	movs	r2, r3
   1b2ca:	0021      	movs	r1, r4
   1b2cc:	0028      	movs	r0, r5
   1b2ce:	4b29      	ldr	r3, [pc, #164]	; (1b374 <xQueueReceive+0x360>)
   1b2d0:	4798      	blx	r3
   1b2d2:	6a3b      	ldr	r3, [r7, #32]
   1b2d4:	0018      	movs	r0, r3
   1b2d6:	4b24      	ldr	r3, [pc, #144]	; (1b368 <xQueueReceive+0x354>)
   1b2d8:	4798      	blx	r3
   1b2da:	0003      	movs	r3, r0
   1b2dc:	001a      	movs	r2, r3
   1b2de:	4b23      	ldr	r3, [pc, #140]	; (1b36c <xQueueReceive+0x358>)
   1b2e0:	5c9b      	ldrb	r3, [r3, r2]
   1b2e2:	2b02      	cmp	r3, #2
   1b2e4:	d018      	beq.n	1b318 <xQueueReceive+0x304>
   1b2e6:	4b1c      	ldr	r3, [pc, #112]	; (1b358 <xQueueReceive+0x344>)
   1b2e8:	4798      	blx	r3
   1b2ea:	0003      	movs	r3, r0
   1b2ec:	0018      	movs	r0, r3
   1b2ee:	4b1b      	ldr	r3, [pc, #108]	; (1b35c <xQueueReceive+0x348>)
   1b2f0:	4798      	blx	r3
   1b2f2:	0003      	movs	r3, r0
   1b2f4:	001a      	movs	r2, r3
   1b2f6:	4b1a      	ldr	r3, [pc, #104]	; (1b360 <xQueueReceive+0x34c>)
   1b2f8:	881b      	ldrh	r3, [r3, #0]
   1b2fa:	4013      	ands	r3, r2
   1b2fc:	b29b      	uxth	r3, r3
   1b2fe:	2b00      	cmp	r3, #0
   1b300:	d00a      	beq.n	1b318 <xQueueReceive+0x304>
   1b302:	4b15      	ldr	r3, [pc, #84]	; (1b358 <xQueueReceive+0x344>)
   1b304:	4798      	blx	r3
   1b306:	0003      	movs	r3, r0
   1b308:	0018      	movs	r0, r3
   1b30a:	4b1b      	ldr	r3, [pc, #108]	; (1b378 <xQueueReceive+0x364>)
   1b30c:	4798      	blx	r3
   1b30e:	0003      	movs	r3, r0
   1b310:	b2db      	uxtb	r3, r3
   1b312:	0018      	movs	r0, r3
   1b314:	4b21      	ldr	r3, [pc, #132]	; (1b39c <xQueueReceive+0x388>)
   1b316:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b318:	6a3b      	ldr	r3, [r7, #32]
   1b31a:	3324      	adds	r3, #36	; 0x24
   1b31c:	687a      	ldr	r2, [r7, #4]
   1b31e:	0011      	movs	r1, r2
   1b320:	0018      	movs	r0, r3
   1b322:	4b1f      	ldr	r3, [pc, #124]	; (1b3a0 <xQueueReceive+0x38c>)
   1b324:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b326:	6a3b      	ldr	r3, [r7, #32]
   1b328:	0018      	movs	r0, r3
   1b32a:	4b1e      	ldr	r3, [pc, #120]	; (1b3a4 <xQueueReceive+0x390>)
   1b32c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b32e:	4b1e      	ldr	r3, [pc, #120]	; (1b3a8 <xQueueReceive+0x394>)
   1b330:	4798      	blx	r3
   1b332:	1e03      	subs	r3, r0, #0
   1b334:	d000      	beq.n	1b338 <xQueueReceive+0x324>
   1b336:	e698      	b.n	1b06a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1b338:	4b12      	ldr	r3, [pc, #72]	; (1b384 <xQueueReceive+0x370>)
   1b33a:	4798      	blx	r3
   1b33c:	e695      	b.n	1b06a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1b33e:	6a3b      	ldr	r3, [r7, #32]
   1b340:	0018      	movs	r0, r3
   1b342:	4b18      	ldr	r3, [pc, #96]	; (1b3a4 <xQueueReceive+0x390>)
   1b344:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b346:	4b18      	ldr	r3, [pc, #96]	; (1b3a8 <xQueueReceive+0x394>)
   1b348:	4798      	blx	r3
   1b34a:	e68e      	b.n	1b06a <xQueueReceive+0x56>
   1b34c:	0001cee9 	.word	0x0001cee9
   1b350:	0001a1c9 	.word	0x0001a1c9
   1b354:	0001ba75 	.word	0x0001ba75
   1b358:	0001845d 	.word	0x0001845d
   1b35c:	000181c1 	.word	0x000181c1
   1b360:	20000104 	.word	0x20000104
   1b364:	00018281 	.word	0x00018281
   1b368:	00018181 	.word	0x00018181
   1b36c:	200000f8 	.word	0x200000f8
   1b370:	00018261 	.word	0x00018261
   1b374:	00018bb9 	.word	0x00018bb9
   1b378:	000181a1 	.word	0x000181a1
   1b37c:	00019215 	.word	0x00019215
   1b380:	0001ca59 	.word	0x0001ca59
   1b384:	0001a1b1 	.word	0x0001a1b1
   1b388:	0001a1ed 	.word	0x0001a1ed
   1b38c:	0001cb99 	.word	0x0001cb99
   1b390:	0001c481 	.word	0x0001c481
   1b394:	0001cbc1 	.word	0x0001cbc1
   1b398:	0001bbb5 	.word	0x0001bbb5
   1b39c:	00019351 	.word	0x00019351
   1b3a0:	0001c935 	.word	0x0001c935
   1b3a4:	0001bac5 	.word	0x0001bac5
   1b3a8:	0001c499 	.word	0x0001c499
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1b3ac:	6a3b      	ldr	r3, [r7, #32]
   1b3ae:	0018      	movs	r0, r3
   1b3b0:	4b23      	ldr	r3, [pc, #140]	; (1b440 <xQueueReceive+0x42c>)
   1b3b2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b3b4:	4b23      	ldr	r3, [pc, #140]	; (1b444 <xQueueReceive+0x430>)
   1b3b6:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b3b8:	6a3b      	ldr	r3, [r7, #32]
   1b3ba:	0018      	movs	r0, r3
   1b3bc:	4b22      	ldr	r3, [pc, #136]	; (1b448 <xQueueReceive+0x434>)
   1b3be:	4798      	blx	r3
   1b3c0:	1e03      	subs	r3, r0, #0
   1b3c2:	d100      	bne.n	1b3c6 <xQueueReceive+0x3b2>
   1b3c4:	e651      	b.n	1b06a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b3c6:	4b21      	ldr	r3, [pc, #132]	; (1b44c <xQueueReceive+0x438>)
   1b3c8:	4798      	blx	r3
   1b3ca:	0003      	movs	r3, r0
   1b3cc:	0018      	movs	r0, r3
   1b3ce:	4b20      	ldr	r3, [pc, #128]	; (1b450 <xQueueReceive+0x43c>)
   1b3d0:	4798      	blx	r3
   1b3d2:	0003      	movs	r3, r0
   1b3d4:	001a      	movs	r2, r3
   1b3d6:	4b1f      	ldr	r3, [pc, #124]	; (1b454 <xQueueReceive+0x440>)
   1b3d8:	881b      	ldrh	r3, [r3, #0]
   1b3da:	4013      	ands	r3, r2
   1b3dc:	b29b      	uxth	r3, r3
   1b3de:	2b00      	cmp	r3, #0
   1b3e0:	d029      	beq.n	1b436 <xQueueReceive+0x422>
   1b3e2:	6a3b      	ldr	r3, [r7, #32]
   1b3e4:	0018      	movs	r0, r3
   1b3e6:	4b1c      	ldr	r3, [pc, #112]	; (1b458 <xQueueReceive+0x444>)
   1b3e8:	4798      	blx	r3
   1b3ea:	0003      	movs	r3, r0
   1b3ec:	001a      	movs	r2, r3
   1b3ee:	4b19      	ldr	r3, [pc, #100]	; (1b454 <xQueueReceive+0x440>)
   1b3f0:	881b      	ldrh	r3, [r3, #0]
   1b3f2:	4013      	ands	r3, r2
   1b3f4:	b29b      	uxth	r3, r3
   1b3f6:	2b00      	cmp	r3, #0
   1b3f8:	d01d      	beq.n	1b436 <xQueueReceive+0x422>
   1b3fa:	6a3b      	ldr	r3, [r7, #32]
   1b3fc:	0018      	movs	r0, r3
   1b3fe:	4b17      	ldr	r3, [pc, #92]	; (1b45c <xQueueReceive+0x448>)
   1b400:	4798      	blx	r3
   1b402:	0003      	movs	r3, r0
   1b404:	001a      	movs	r2, r3
   1b406:	4b16      	ldr	r3, [pc, #88]	; (1b460 <xQueueReceive+0x44c>)
   1b408:	5c9b      	ldrb	r3, [r3, r2]
   1b40a:	3350      	adds	r3, #80	; 0x50
   1b40c:	b2db      	uxtb	r3, r3
   1b40e:	001d      	movs	r5, r3
   1b410:	6a3b      	ldr	r3, [r7, #32]
   1b412:	0018      	movs	r0, r3
   1b414:	4b11      	ldr	r3, [pc, #68]	; (1b45c <xQueueReceive+0x448>)
   1b416:	4798      	blx	r3
   1b418:	0003      	movs	r3, r0
   1b41a:	001a      	movs	r2, r3
   1b41c:	4b10      	ldr	r3, [pc, #64]	; (1b460 <xQueueReceive+0x44c>)
   1b41e:	5c9c      	ldrb	r4, [r3, r2]
   1b420:	6a3b      	ldr	r3, [r7, #32]
   1b422:	0018      	movs	r0, r3
   1b424:	4b0f      	ldr	r3, [pc, #60]	; (1b464 <xQueueReceive+0x450>)
   1b426:	4798      	blx	r3
   1b428:	0003      	movs	r3, r0
   1b42a:	b2db      	uxtb	r3, r3
   1b42c:	001a      	movs	r2, r3
   1b42e:	0021      	movs	r1, r4
   1b430:	0028      	movs	r0, r5
   1b432:	4b0d      	ldr	r3, [pc, #52]	; (1b468 <xQueueReceive+0x454>)
   1b434:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b436:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b438:	0018      	movs	r0, r3
   1b43a:	46bd      	mov	sp, r7
   1b43c:	b00a      	add	sp, #40	; 0x28
   1b43e:	bdb0      	pop	{r4, r5, r7, pc}
   1b440:	0001bac5 	.word	0x0001bac5
   1b444:	0001c499 	.word	0x0001c499
   1b448:	0001bbb5 	.word	0x0001bbb5
   1b44c:	0001845d 	.word	0x0001845d
   1b450:	000181c1 	.word	0x000181c1
   1b454:	20000104 	.word	0x20000104
   1b458:	00018281 	.word	0x00018281
   1b45c:	00018181 	.word	0x00018181
   1b460:	200000f8 	.word	0x200000f8
   1b464:	00018261 	.word	0x00018261
   1b468:	00018bb9 	.word	0x00018bb9

0001b46c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1b46c:	b5b0      	push	{r4, r5, r7, lr}
   1b46e:	b08a      	sub	sp, #40	; 0x28
   1b470:	af00      	add	r7, sp, #0
   1b472:	6078      	str	r0, [r7, #4]
   1b474:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1b476:	2300      	movs	r3, #0
   1b478:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b47a:	687b      	ldr	r3, [r7, #4]
   1b47c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1b47e:	2300      	movs	r3, #0
   1b480:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b482:	69fb      	ldr	r3, [r7, #28]
   1b484:	2b00      	cmp	r3, #0
   1b486:	d101      	bne.n	1b48c <xQueueSemaphoreTake+0x20>
   1b488:	b672      	cpsid	i
   1b48a:	e7fe      	b.n	1b48a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b48c:	69fb      	ldr	r3, [r7, #28]
   1b48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b490:	2b00      	cmp	r3, #0
   1b492:	d001      	beq.n	1b498 <xQueueSemaphoreTake+0x2c>
   1b494:	b672      	cpsid	i
   1b496:	e7fe      	b.n	1b496 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b498:	4bcb      	ldr	r3, [pc, #812]	; (1b7c8 <xQueueSemaphoreTake+0x35c>)
   1b49a:	4798      	blx	r3
   1b49c:	1e03      	subs	r3, r0, #0
   1b49e:	d102      	bne.n	1b4a6 <xQueueSemaphoreTake+0x3a>
   1b4a0:	683b      	ldr	r3, [r7, #0]
   1b4a2:	2b00      	cmp	r3, #0
   1b4a4:	d101      	bne.n	1b4aa <xQueueSemaphoreTake+0x3e>
   1b4a6:	2301      	movs	r3, #1
   1b4a8:	e000      	b.n	1b4ac <xQueueSemaphoreTake+0x40>
   1b4aa:	2300      	movs	r3, #0
   1b4ac:	2b00      	cmp	r3, #0
   1b4ae:	d101      	bne.n	1b4b4 <xQueueSemaphoreTake+0x48>
   1b4b0:	b672      	cpsid	i
   1b4b2:	e7fe      	b.n	1b4b2 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b4b4:	4bc5      	ldr	r3, [pc, #788]	; (1b7cc <xQueueSemaphoreTake+0x360>)
   1b4b6:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1b4b8:	69fb      	ldr	r3, [r7, #28]
   1b4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b4bc:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1b4be:	69bb      	ldr	r3, [r7, #24]
   1b4c0:	2b00      	cmp	r3, #0
   1b4c2:	d100      	bne.n	1b4c6 <xQueueSemaphoreTake+0x5a>
   1b4c4:	e080      	b.n	1b5c8 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1b4c6:	4bc2      	ldr	r3, [pc, #776]	; (1b7d0 <xQueueSemaphoreTake+0x364>)
   1b4c8:	4798      	blx	r3
   1b4ca:	0003      	movs	r3, r0
   1b4cc:	0018      	movs	r0, r3
   1b4ce:	4bc1      	ldr	r3, [pc, #772]	; (1b7d4 <xQueueSemaphoreTake+0x368>)
   1b4d0:	4798      	blx	r3
   1b4d2:	0003      	movs	r3, r0
   1b4d4:	001a      	movs	r2, r3
   1b4d6:	4bc0      	ldr	r3, [pc, #768]	; (1b7d8 <xQueueSemaphoreTake+0x36c>)
   1b4d8:	881b      	ldrh	r3, [r3, #0]
   1b4da:	4013      	ands	r3, r2
   1b4dc:	b29b      	uxth	r3, r3
   1b4de:	2b00      	cmp	r3, #0
   1b4e0:	d029      	beq.n	1b536 <xQueueSemaphoreTake+0xca>
   1b4e2:	69fb      	ldr	r3, [r7, #28]
   1b4e4:	0018      	movs	r0, r3
   1b4e6:	4bbd      	ldr	r3, [pc, #756]	; (1b7dc <xQueueSemaphoreTake+0x370>)
   1b4e8:	4798      	blx	r3
   1b4ea:	0003      	movs	r3, r0
   1b4ec:	001a      	movs	r2, r3
   1b4ee:	4bba      	ldr	r3, [pc, #744]	; (1b7d8 <xQueueSemaphoreTake+0x36c>)
   1b4f0:	881b      	ldrh	r3, [r3, #0]
   1b4f2:	4013      	ands	r3, r2
   1b4f4:	b29b      	uxth	r3, r3
   1b4f6:	2b00      	cmp	r3, #0
   1b4f8:	d01d      	beq.n	1b536 <xQueueSemaphoreTake+0xca>
   1b4fa:	69fb      	ldr	r3, [r7, #28]
   1b4fc:	0018      	movs	r0, r3
   1b4fe:	4bb8      	ldr	r3, [pc, #736]	; (1b7e0 <xQueueSemaphoreTake+0x374>)
   1b500:	4798      	blx	r3
   1b502:	0003      	movs	r3, r0
   1b504:	001a      	movs	r2, r3
   1b506:	4bb7      	ldr	r3, [pc, #732]	; (1b7e4 <xQueueSemaphoreTake+0x378>)
   1b508:	5c9b      	ldrb	r3, [r3, r2]
   1b50a:	3328      	adds	r3, #40	; 0x28
   1b50c:	b2db      	uxtb	r3, r3
   1b50e:	001d      	movs	r5, r3
   1b510:	69fb      	ldr	r3, [r7, #28]
   1b512:	0018      	movs	r0, r3
   1b514:	4bb2      	ldr	r3, [pc, #712]	; (1b7e0 <xQueueSemaphoreTake+0x374>)
   1b516:	4798      	blx	r3
   1b518:	0003      	movs	r3, r0
   1b51a:	001a      	movs	r2, r3
   1b51c:	4bb1      	ldr	r3, [pc, #708]	; (1b7e4 <xQueueSemaphoreTake+0x378>)
   1b51e:	5c9c      	ldrb	r4, [r3, r2]
   1b520:	69fb      	ldr	r3, [r7, #28]
   1b522:	0018      	movs	r0, r3
   1b524:	4bb0      	ldr	r3, [pc, #704]	; (1b7e8 <xQueueSemaphoreTake+0x37c>)
   1b526:	4798      	blx	r3
   1b528:	0003      	movs	r3, r0
   1b52a:	b2db      	uxtb	r3, r3
   1b52c:	001a      	movs	r2, r3
   1b52e:	0021      	movs	r1, r4
   1b530:	0028      	movs	r0, r5
   1b532:	4bae      	ldr	r3, [pc, #696]	; (1b7ec <xQueueSemaphoreTake+0x380>)
   1b534:	4798      	blx	r3
   1b536:	69fb      	ldr	r3, [r7, #28]
   1b538:	0018      	movs	r0, r3
   1b53a:	4ba9      	ldr	r3, [pc, #676]	; (1b7e0 <xQueueSemaphoreTake+0x374>)
   1b53c:	4798      	blx	r3
   1b53e:	0003      	movs	r3, r0
   1b540:	001a      	movs	r2, r3
   1b542:	4ba8      	ldr	r3, [pc, #672]	; (1b7e4 <xQueueSemaphoreTake+0x378>)
   1b544:	5c9c      	ldrb	r4, [r3, r2]
   1b546:	69fb      	ldr	r3, [r7, #28]
   1b548:	0018      	movs	r0, r3
   1b54a:	4ba7      	ldr	r3, [pc, #668]	; (1b7e8 <xQueueSemaphoreTake+0x37c>)
   1b54c:	4798      	blx	r3
   1b54e:	0003      	movs	r3, r0
   1b550:	b2dd      	uxtb	r5, r3
   1b552:	69fb      	ldr	r3, [r7, #28]
   1b554:	0018      	movs	r0, r3
   1b556:	4ba2      	ldr	r3, [pc, #648]	; (1b7e0 <xQueueSemaphoreTake+0x374>)
   1b558:	4798      	blx	r3
   1b55a:	0003      	movs	r3, r0
   1b55c:	001a      	movs	r2, r3
   1b55e:	4ba1      	ldr	r3, [pc, #644]	; (1b7e4 <xQueueSemaphoreTake+0x378>)
   1b560:	5c9b      	ldrb	r3, [r3, r2]
   1b562:	2b02      	cmp	r3, #2
   1b564:	d108      	bne.n	1b578 <xQueueSemaphoreTake+0x10c>
   1b566:	4b9a      	ldr	r3, [pc, #616]	; (1b7d0 <xQueueSemaphoreTake+0x364>)
   1b568:	4798      	blx	r3
   1b56a:	0003      	movs	r3, r0
   1b56c:	0018      	movs	r0, r3
   1b56e:	4ba0      	ldr	r3, [pc, #640]	; (1b7f0 <xQueueSemaphoreTake+0x384>)
   1b570:	4798      	blx	r3
   1b572:	0003      	movs	r3, r0
   1b574:	b2db      	uxtb	r3, r3
   1b576:	e004      	b.n	1b582 <xQueueSemaphoreTake+0x116>
   1b578:	69fb      	ldr	r3, [r7, #28]
   1b57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b57c:	b2db      	uxtb	r3, r3
   1b57e:	3b01      	subs	r3, #1
   1b580:	b2db      	uxtb	r3, r3
   1b582:	001a      	movs	r2, r3
   1b584:	0029      	movs	r1, r5
   1b586:	0020      	movs	r0, r4
   1b588:	4b9a      	ldr	r3, [pc, #616]	; (1b7f4 <xQueueSemaphoreTake+0x388>)
   1b58a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1b58c:	69bb      	ldr	r3, [r7, #24]
   1b58e:	1e5a      	subs	r2, r3, #1
   1b590:	69fb      	ldr	r3, [r7, #28]
   1b592:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b594:	69fb      	ldr	r3, [r7, #28]
   1b596:	681b      	ldr	r3, [r3, #0]
   1b598:	2b00      	cmp	r3, #0
   1b59a:	d104      	bne.n	1b5a6 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1b59c:	4b96      	ldr	r3, [pc, #600]	; (1b7f8 <xQueueSemaphoreTake+0x38c>)
   1b59e:	4798      	blx	r3
   1b5a0:	0002      	movs	r2, r0
   1b5a2:	69fb      	ldr	r3, [r7, #28]
   1b5a4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b5a6:	69fb      	ldr	r3, [r7, #28]
   1b5a8:	691b      	ldr	r3, [r3, #16]
   1b5aa:	2b00      	cmp	r3, #0
   1b5ac:	d008      	beq.n	1b5c0 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b5ae:	69fb      	ldr	r3, [r7, #28]
   1b5b0:	3310      	adds	r3, #16
   1b5b2:	0018      	movs	r0, r3
   1b5b4:	4b91      	ldr	r3, [pc, #580]	; (1b7fc <xQueueSemaphoreTake+0x390>)
   1b5b6:	4798      	blx	r3
   1b5b8:	1e03      	subs	r3, r0, #0
   1b5ba:	d001      	beq.n	1b5c0 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b5bc:	4b90      	ldr	r3, [pc, #576]	; (1b800 <xQueueSemaphoreTake+0x394>)
   1b5be:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b5c0:	4b90      	ldr	r3, [pc, #576]	; (1b804 <xQueueSemaphoreTake+0x398>)
   1b5c2:	4798      	blx	r3
				return pdPASS;
   1b5c4:	2301      	movs	r3, #1
   1b5c6:	e18b      	b.n	1b8e0 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b5c8:	683b      	ldr	r3, [r7, #0]
   1b5ca:	2b00      	cmp	r3, #0
   1b5cc:	d140      	bne.n	1b650 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1b5ce:	6a3b      	ldr	r3, [r7, #32]
   1b5d0:	2b00      	cmp	r3, #0
   1b5d2:	d001      	beq.n	1b5d8 <xQueueSemaphoreTake+0x16c>
   1b5d4:	b672      	cpsid	i
   1b5d6:	e7fe      	b.n	1b5d6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1b5d8:	4b8a      	ldr	r3, [pc, #552]	; (1b804 <xQueueSemaphoreTake+0x398>)
   1b5da:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b5dc:	4b7c      	ldr	r3, [pc, #496]	; (1b7d0 <xQueueSemaphoreTake+0x364>)
   1b5de:	4798      	blx	r3
   1b5e0:	0003      	movs	r3, r0
   1b5e2:	0018      	movs	r0, r3
   1b5e4:	4b7b      	ldr	r3, [pc, #492]	; (1b7d4 <xQueueSemaphoreTake+0x368>)
   1b5e6:	4798      	blx	r3
   1b5e8:	0003      	movs	r3, r0
   1b5ea:	001a      	movs	r2, r3
   1b5ec:	4b7a      	ldr	r3, [pc, #488]	; (1b7d8 <xQueueSemaphoreTake+0x36c>)
   1b5ee:	881b      	ldrh	r3, [r3, #0]
   1b5f0:	4013      	ands	r3, r2
   1b5f2:	b29b      	uxth	r3, r3
   1b5f4:	2b00      	cmp	r3, #0
   1b5f6:	d029      	beq.n	1b64c <xQueueSemaphoreTake+0x1e0>
   1b5f8:	69fb      	ldr	r3, [r7, #28]
   1b5fa:	0018      	movs	r0, r3
   1b5fc:	4b77      	ldr	r3, [pc, #476]	; (1b7dc <xQueueSemaphoreTake+0x370>)
   1b5fe:	4798      	blx	r3
   1b600:	0003      	movs	r3, r0
   1b602:	001a      	movs	r2, r3
   1b604:	4b74      	ldr	r3, [pc, #464]	; (1b7d8 <xQueueSemaphoreTake+0x36c>)
   1b606:	881b      	ldrh	r3, [r3, #0]
   1b608:	4013      	ands	r3, r2
   1b60a:	b29b      	uxth	r3, r3
   1b60c:	2b00      	cmp	r3, #0
   1b60e:	d01d      	beq.n	1b64c <xQueueSemaphoreTake+0x1e0>
   1b610:	69fb      	ldr	r3, [r7, #28]
   1b612:	0018      	movs	r0, r3
   1b614:	4b72      	ldr	r3, [pc, #456]	; (1b7e0 <xQueueSemaphoreTake+0x374>)
   1b616:	4798      	blx	r3
   1b618:	0003      	movs	r3, r0
   1b61a:	001a      	movs	r2, r3
   1b61c:	4b71      	ldr	r3, [pc, #452]	; (1b7e4 <xQueueSemaphoreTake+0x378>)
   1b61e:	5c9b      	ldrb	r3, [r3, r2]
   1b620:	3350      	adds	r3, #80	; 0x50
   1b622:	b2db      	uxtb	r3, r3
   1b624:	001d      	movs	r5, r3
   1b626:	69fb      	ldr	r3, [r7, #28]
   1b628:	0018      	movs	r0, r3
   1b62a:	4b6d      	ldr	r3, [pc, #436]	; (1b7e0 <xQueueSemaphoreTake+0x374>)
   1b62c:	4798      	blx	r3
   1b62e:	0003      	movs	r3, r0
   1b630:	001a      	movs	r2, r3
   1b632:	4b6c      	ldr	r3, [pc, #432]	; (1b7e4 <xQueueSemaphoreTake+0x378>)
   1b634:	5c9c      	ldrb	r4, [r3, r2]
   1b636:	69fb      	ldr	r3, [r7, #28]
   1b638:	0018      	movs	r0, r3
   1b63a:	4b6b      	ldr	r3, [pc, #428]	; (1b7e8 <xQueueSemaphoreTake+0x37c>)
   1b63c:	4798      	blx	r3
   1b63e:	0003      	movs	r3, r0
   1b640:	b2db      	uxtb	r3, r3
   1b642:	001a      	movs	r2, r3
   1b644:	0021      	movs	r1, r4
   1b646:	0028      	movs	r0, r5
   1b648:	4b68      	ldr	r3, [pc, #416]	; (1b7ec <xQueueSemaphoreTake+0x380>)
   1b64a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1b64c:	2300      	movs	r3, #0
   1b64e:	e147      	b.n	1b8e0 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b652:	2b00      	cmp	r3, #0
   1b654:	d106      	bne.n	1b664 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b656:	230c      	movs	r3, #12
   1b658:	18fb      	adds	r3, r7, r3
   1b65a:	0018      	movs	r0, r3
   1b65c:	4b6a      	ldr	r3, [pc, #424]	; (1b808 <xQueueSemaphoreTake+0x39c>)
   1b65e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b660:	2301      	movs	r3, #1
   1b662:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b664:	4b67      	ldr	r3, [pc, #412]	; (1b804 <xQueueSemaphoreTake+0x398>)
   1b666:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b668:	4b68      	ldr	r3, [pc, #416]	; (1b80c <xQueueSemaphoreTake+0x3a0>)
   1b66a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b66c:	4b57      	ldr	r3, [pc, #348]	; (1b7cc <xQueueSemaphoreTake+0x360>)
   1b66e:	4798      	blx	r3
   1b670:	69fb      	ldr	r3, [r7, #28]
   1b672:	2244      	movs	r2, #68	; 0x44
   1b674:	5c9b      	ldrb	r3, [r3, r2]
   1b676:	b25b      	sxtb	r3, r3
   1b678:	3301      	adds	r3, #1
   1b67a:	d103      	bne.n	1b684 <xQueueSemaphoreTake+0x218>
   1b67c:	69fb      	ldr	r3, [r7, #28]
   1b67e:	2244      	movs	r2, #68	; 0x44
   1b680:	2100      	movs	r1, #0
   1b682:	5499      	strb	r1, [r3, r2]
   1b684:	69fb      	ldr	r3, [r7, #28]
   1b686:	2245      	movs	r2, #69	; 0x45
   1b688:	5c9b      	ldrb	r3, [r3, r2]
   1b68a:	b25b      	sxtb	r3, r3
   1b68c:	3301      	adds	r3, #1
   1b68e:	d103      	bne.n	1b698 <xQueueSemaphoreTake+0x22c>
   1b690:	69fb      	ldr	r3, [r7, #28]
   1b692:	2245      	movs	r2, #69	; 0x45
   1b694:	2100      	movs	r1, #0
   1b696:	5499      	strb	r1, [r3, r2]
   1b698:	4b5a      	ldr	r3, [pc, #360]	; (1b804 <xQueueSemaphoreTake+0x398>)
   1b69a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b69c:	003a      	movs	r2, r7
   1b69e:	230c      	movs	r3, #12
   1b6a0:	18fb      	adds	r3, r7, r3
   1b6a2:	0011      	movs	r1, r2
   1b6a4:	0018      	movs	r0, r3
   1b6a6:	4b5a      	ldr	r3, [pc, #360]	; (1b810 <xQueueSemaphoreTake+0x3a4>)
   1b6a8:	4798      	blx	r3
   1b6aa:	1e03      	subs	r3, r0, #0
   1b6ac:	d000      	beq.n	1b6b0 <xQueueSemaphoreTake+0x244>
   1b6ae:	e0bd      	b.n	1b82c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b6b0:	69fb      	ldr	r3, [r7, #28]
   1b6b2:	0018      	movs	r0, r3
   1b6b4:	4b57      	ldr	r3, [pc, #348]	; (1b814 <xQueueSemaphoreTake+0x3a8>)
   1b6b6:	4798      	blx	r3
   1b6b8:	1e03      	subs	r3, r0, #0
   1b6ba:	d100      	bne.n	1b6be <xQueueSemaphoreTake+0x252>
   1b6bc:	e07c      	b.n	1b7b8 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b6be:	4b44      	ldr	r3, [pc, #272]	; (1b7d0 <xQueueSemaphoreTake+0x364>)
   1b6c0:	4798      	blx	r3
   1b6c2:	0003      	movs	r3, r0
   1b6c4:	0018      	movs	r0, r3
   1b6c6:	4b43      	ldr	r3, [pc, #268]	; (1b7d4 <xQueueSemaphoreTake+0x368>)
   1b6c8:	4798      	blx	r3
   1b6ca:	0003      	movs	r3, r0
   1b6cc:	001a      	movs	r2, r3
   1b6ce:	4b42      	ldr	r3, [pc, #264]	; (1b7d8 <xQueueSemaphoreTake+0x36c>)
   1b6d0:	881b      	ldrh	r3, [r3, #0]
   1b6d2:	4013      	ands	r3, r2
   1b6d4:	b29b      	uxth	r3, r3
   1b6d6:	2b00      	cmp	r3, #0
   1b6d8:	d029      	beq.n	1b72e <xQueueSemaphoreTake+0x2c2>
   1b6da:	69fb      	ldr	r3, [r7, #28]
   1b6dc:	0018      	movs	r0, r3
   1b6de:	4b3f      	ldr	r3, [pc, #252]	; (1b7dc <xQueueSemaphoreTake+0x370>)
   1b6e0:	4798      	blx	r3
   1b6e2:	0003      	movs	r3, r0
   1b6e4:	001a      	movs	r2, r3
   1b6e6:	4b3c      	ldr	r3, [pc, #240]	; (1b7d8 <xQueueSemaphoreTake+0x36c>)
   1b6e8:	881b      	ldrh	r3, [r3, #0]
   1b6ea:	4013      	ands	r3, r2
   1b6ec:	b29b      	uxth	r3, r3
   1b6ee:	2b00      	cmp	r3, #0
   1b6f0:	d01d      	beq.n	1b72e <xQueueSemaphoreTake+0x2c2>
   1b6f2:	69fb      	ldr	r3, [r7, #28]
   1b6f4:	0018      	movs	r0, r3
   1b6f6:	4b3a      	ldr	r3, [pc, #232]	; (1b7e0 <xQueueSemaphoreTake+0x374>)
   1b6f8:	4798      	blx	r3
   1b6fa:	0003      	movs	r3, r0
   1b6fc:	001a      	movs	r2, r3
   1b6fe:	4b39      	ldr	r3, [pc, #228]	; (1b7e4 <xQueueSemaphoreTake+0x378>)
   1b700:	5c9b      	ldrb	r3, [r3, r2]
   1b702:	3368      	adds	r3, #104	; 0x68
   1b704:	b2db      	uxtb	r3, r3
   1b706:	001d      	movs	r5, r3
   1b708:	69fb      	ldr	r3, [r7, #28]
   1b70a:	0018      	movs	r0, r3
   1b70c:	4b34      	ldr	r3, [pc, #208]	; (1b7e0 <xQueueSemaphoreTake+0x374>)
   1b70e:	4798      	blx	r3
   1b710:	0003      	movs	r3, r0
   1b712:	001a      	movs	r2, r3
   1b714:	4b33      	ldr	r3, [pc, #204]	; (1b7e4 <xQueueSemaphoreTake+0x378>)
   1b716:	5c9c      	ldrb	r4, [r3, r2]
   1b718:	69fb      	ldr	r3, [r7, #28]
   1b71a:	0018      	movs	r0, r3
   1b71c:	4b32      	ldr	r3, [pc, #200]	; (1b7e8 <xQueueSemaphoreTake+0x37c>)
   1b71e:	4798      	blx	r3
   1b720:	0003      	movs	r3, r0
   1b722:	b2db      	uxtb	r3, r3
   1b724:	001a      	movs	r2, r3
   1b726:	0021      	movs	r1, r4
   1b728:	0028      	movs	r0, r5
   1b72a:	4b30      	ldr	r3, [pc, #192]	; (1b7ec <xQueueSemaphoreTake+0x380>)
   1b72c:	4798      	blx	r3
   1b72e:	69fb      	ldr	r3, [r7, #28]
   1b730:	0018      	movs	r0, r3
   1b732:	4b2b      	ldr	r3, [pc, #172]	; (1b7e0 <xQueueSemaphoreTake+0x374>)
   1b734:	4798      	blx	r3
   1b736:	0003      	movs	r3, r0
   1b738:	001a      	movs	r2, r3
   1b73a:	4b2a      	ldr	r3, [pc, #168]	; (1b7e4 <xQueueSemaphoreTake+0x378>)
   1b73c:	5c9b      	ldrb	r3, [r3, r2]
   1b73e:	2b02      	cmp	r3, #2
   1b740:	d018      	beq.n	1b774 <xQueueSemaphoreTake+0x308>
   1b742:	4b23      	ldr	r3, [pc, #140]	; (1b7d0 <xQueueSemaphoreTake+0x364>)
   1b744:	4798      	blx	r3
   1b746:	0003      	movs	r3, r0
   1b748:	0018      	movs	r0, r3
   1b74a:	4b22      	ldr	r3, [pc, #136]	; (1b7d4 <xQueueSemaphoreTake+0x368>)
   1b74c:	4798      	blx	r3
   1b74e:	0003      	movs	r3, r0
   1b750:	001a      	movs	r2, r3
   1b752:	4b21      	ldr	r3, [pc, #132]	; (1b7d8 <xQueueSemaphoreTake+0x36c>)
   1b754:	881b      	ldrh	r3, [r3, #0]
   1b756:	4013      	ands	r3, r2
   1b758:	b29b      	uxth	r3, r3
   1b75a:	2b00      	cmp	r3, #0
   1b75c:	d00a      	beq.n	1b774 <xQueueSemaphoreTake+0x308>
   1b75e:	4b1c      	ldr	r3, [pc, #112]	; (1b7d0 <xQueueSemaphoreTake+0x364>)
   1b760:	4798      	blx	r3
   1b762:	0003      	movs	r3, r0
   1b764:	0018      	movs	r0, r3
   1b766:	4b22      	ldr	r3, [pc, #136]	; (1b7f0 <xQueueSemaphoreTake+0x384>)
   1b768:	4798      	blx	r3
   1b76a:	0003      	movs	r3, r0
   1b76c:	b2db      	uxtb	r3, r3
   1b76e:	0018      	movs	r0, r3
   1b770:	4b29      	ldr	r3, [pc, #164]	; (1b818 <xQueueSemaphoreTake+0x3ac>)
   1b772:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b774:	69fb      	ldr	r3, [r7, #28]
   1b776:	681b      	ldr	r3, [r3, #0]
   1b778:	2b00      	cmp	r3, #0
   1b77a:	d10a      	bne.n	1b792 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1b77c:	4b13      	ldr	r3, [pc, #76]	; (1b7cc <xQueueSemaphoreTake+0x360>)
   1b77e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1b780:	69fb      	ldr	r3, [r7, #28]
   1b782:	685b      	ldr	r3, [r3, #4]
   1b784:	0018      	movs	r0, r3
   1b786:	4b25      	ldr	r3, [pc, #148]	; (1b81c <xQueueSemaphoreTake+0x3b0>)
   1b788:	4798      	blx	r3
   1b78a:	0003      	movs	r3, r0
   1b78c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1b78e:	4b1d      	ldr	r3, [pc, #116]	; (1b804 <xQueueSemaphoreTake+0x398>)
   1b790:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b792:	69fb      	ldr	r3, [r7, #28]
   1b794:	3324      	adds	r3, #36	; 0x24
   1b796:	683a      	ldr	r2, [r7, #0]
   1b798:	0011      	movs	r1, r2
   1b79a:	0018      	movs	r0, r3
   1b79c:	4b20      	ldr	r3, [pc, #128]	; (1b820 <xQueueSemaphoreTake+0x3b4>)
   1b79e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b7a0:	69fb      	ldr	r3, [r7, #28]
   1b7a2:	0018      	movs	r0, r3
   1b7a4:	4b1f      	ldr	r3, [pc, #124]	; (1b824 <xQueueSemaphoreTake+0x3b8>)
   1b7a6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b7a8:	4b1f      	ldr	r3, [pc, #124]	; (1b828 <xQueueSemaphoreTake+0x3bc>)
   1b7aa:	4798      	blx	r3
   1b7ac:	1e03      	subs	r3, r0, #0
   1b7ae:	d000      	beq.n	1b7b2 <xQueueSemaphoreTake+0x346>
   1b7b0:	e680      	b.n	1b4b4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1b7b2:	4b13      	ldr	r3, [pc, #76]	; (1b800 <xQueueSemaphoreTake+0x394>)
   1b7b4:	4798      	blx	r3
   1b7b6:	e67d      	b.n	1b4b4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1b7b8:	69fb      	ldr	r3, [r7, #28]
   1b7ba:	0018      	movs	r0, r3
   1b7bc:	4b19      	ldr	r3, [pc, #100]	; (1b824 <xQueueSemaphoreTake+0x3b8>)
   1b7be:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b7c0:	4b19      	ldr	r3, [pc, #100]	; (1b828 <xQueueSemaphoreTake+0x3bc>)
   1b7c2:	4798      	blx	r3
   1b7c4:	e676      	b.n	1b4b4 <xQueueSemaphoreTake+0x48>
   1b7c6:	46c0      	nop			; (mov r8, r8)
   1b7c8:	0001cee9 	.word	0x0001cee9
   1b7cc:	0001a1c9 	.word	0x0001a1c9
   1b7d0:	0001845d 	.word	0x0001845d
   1b7d4:	000181c1 	.word	0x000181c1
   1b7d8:	20000104 	.word	0x20000104
   1b7dc:	00018281 	.word	0x00018281
   1b7e0:	00018181 	.word	0x00018181
   1b7e4:	200000f8 	.word	0x200000f8
   1b7e8:	00018261 	.word	0x00018261
   1b7ec:	00018bb9 	.word	0x00018bb9
   1b7f0:	000181a1 	.word	0x000181a1
   1b7f4:	00019215 	.word	0x00019215
   1b7f8:	0001d3b5 	.word	0x0001d3b5
   1b7fc:	0001ca59 	.word	0x0001ca59
   1b800:	0001a1b1 	.word	0x0001a1b1
   1b804:	0001a1ed 	.word	0x0001a1ed
   1b808:	0001cb99 	.word	0x0001cb99
   1b80c:	0001c481 	.word	0x0001c481
   1b810:	0001cbc1 	.word	0x0001cbc1
   1b814:	0001bbb5 	.word	0x0001bbb5
   1b818:	00019351 	.word	0x00019351
   1b81c:	0001cf21 	.word	0x0001cf21
   1b820:	0001c935 	.word	0x0001c935
   1b824:	0001bac5 	.word	0x0001bac5
   1b828:	0001c499 	.word	0x0001c499
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1b82c:	69fb      	ldr	r3, [r7, #28]
   1b82e:	0018      	movs	r0, r3
   1b830:	4b2d      	ldr	r3, [pc, #180]	; (1b8e8 <xQueueSemaphoreTake+0x47c>)
   1b832:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b834:	4b2d      	ldr	r3, [pc, #180]	; (1b8ec <xQueueSemaphoreTake+0x480>)
   1b836:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b838:	69fb      	ldr	r3, [r7, #28]
   1b83a:	0018      	movs	r0, r3
   1b83c:	4b2c      	ldr	r3, [pc, #176]	; (1b8f0 <xQueueSemaphoreTake+0x484>)
   1b83e:	4798      	blx	r3
   1b840:	1e03      	subs	r3, r0, #0
   1b842:	d100      	bne.n	1b846 <xQueueSemaphoreTake+0x3da>
   1b844:	e636      	b.n	1b4b4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1b846:	6a3b      	ldr	r3, [r7, #32]
   1b848:	2b00      	cmp	r3, #0
   1b84a:	d010      	beq.n	1b86e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1b84c:	4b29      	ldr	r3, [pc, #164]	; (1b8f4 <xQueueSemaphoreTake+0x488>)
   1b84e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1b850:	69fb      	ldr	r3, [r7, #28]
   1b852:	0018      	movs	r0, r3
   1b854:	4b28      	ldr	r3, [pc, #160]	; (1b8f8 <xQueueSemaphoreTake+0x48c>)
   1b856:	4798      	blx	r3
   1b858:	0003      	movs	r3, r0
   1b85a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1b85c:	69fb      	ldr	r3, [r7, #28]
   1b85e:	685b      	ldr	r3, [r3, #4]
   1b860:	697a      	ldr	r2, [r7, #20]
   1b862:	0011      	movs	r1, r2
   1b864:	0018      	movs	r0, r3
   1b866:	4b25      	ldr	r3, [pc, #148]	; (1b8fc <xQueueSemaphoreTake+0x490>)
   1b868:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1b86a:	4b25      	ldr	r3, [pc, #148]	; (1b900 <xQueueSemaphoreTake+0x494>)
   1b86c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b86e:	4b25      	ldr	r3, [pc, #148]	; (1b904 <xQueueSemaphoreTake+0x498>)
   1b870:	4798      	blx	r3
   1b872:	0003      	movs	r3, r0
   1b874:	0018      	movs	r0, r3
   1b876:	4b24      	ldr	r3, [pc, #144]	; (1b908 <xQueueSemaphoreTake+0x49c>)
   1b878:	4798      	blx	r3
   1b87a:	0003      	movs	r3, r0
   1b87c:	001a      	movs	r2, r3
   1b87e:	4b23      	ldr	r3, [pc, #140]	; (1b90c <xQueueSemaphoreTake+0x4a0>)
   1b880:	881b      	ldrh	r3, [r3, #0]
   1b882:	4013      	ands	r3, r2
   1b884:	b29b      	uxth	r3, r3
   1b886:	2b00      	cmp	r3, #0
   1b888:	d029      	beq.n	1b8de <xQueueSemaphoreTake+0x472>
   1b88a:	69fb      	ldr	r3, [r7, #28]
   1b88c:	0018      	movs	r0, r3
   1b88e:	4b20      	ldr	r3, [pc, #128]	; (1b910 <xQueueSemaphoreTake+0x4a4>)
   1b890:	4798      	blx	r3
   1b892:	0003      	movs	r3, r0
   1b894:	001a      	movs	r2, r3
   1b896:	4b1d      	ldr	r3, [pc, #116]	; (1b90c <xQueueSemaphoreTake+0x4a0>)
   1b898:	881b      	ldrh	r3, [r3, #0]
   1b89a:	4013      	ands	r3, r2
   1b89c:	b29b      	uxth	r3, r3
   1b89e:	2b00      	cmp	r3, #0
   1b8a0:	d01d      	beq.n	1b8de <xQueueSemaphoreTake+0x472>
   1b8a2:	69fb      	ldr	r3, [r7, #28]
   1b8a4:	0018      	movs	r0, r3
   1b8a6:	4b1b      	ldr	r3, [pc, #108]	; (1b914 <xQueueSemaphoreTake+0x4a8>)
   1b8a8:	4798      	blx	r3
   1b8aa:	0003      	movs	r3, r0
   1b8ac:	001a      	movs	r2, r3
   1b8ae:	4b1a      	ldr	r3, [pc, #104]	; (1b918 <xQueueSemaphoreTake+0x4ac>)
   1b8b0:	5c9b      	ldrb	r3, [r3, r2]
   1b8b2:	3350      	adds	r3, #80	; 0x50
   1b8b4:	b2db      	uxtb	r3, r3
   1b8b6:	001d      	movs	r5, r3
   1b8b8:	69fb      	ldr	r3, [r7, #28]
   1b8ba:	0018      	movs	r0, r3
   1b8bc:	4b15      	ldr	r3, [pc, #84]	; (1b914 <xQueueSemaphoreTake+0x4a8>)
   1b8be:	4798      	blx	r3
   1b8c0:	0003      	movs	r3, r0
   1b8c2:	001a      	movs	r2, r3
   1b8c4:	4b14      	ldr	r3, [pc, #80]	; (1b918 <xQueueSemaphoreTake+0x4ac>)
   1b8c6:	5c9c      	ldrb	r4, [r3, r2]
   1b8c8:	69fb      	ldr	r3, [r7, #28]
   1b8ca:	0018      	movs	r0, r3
   1b8cc:	4b13      	ldr	r3, [pc, #76]	; (1b91c <xQueueSemaphoreTake+0x4b0>)
   1b8ce:	4798      	blx	r3
   1b8d0:	0003      	movs	r3, r0
   1b8d2:	b2db      	uxtb	r3, r3
   1b8d4:	001a      	movs	r2, r3
   1b8d6:	0021      	movs	r1, r4
   1b8d8:	0028      	movs	r0, r5
   1b8da:	4b11      	ldr	r3, [pc, #68]	; (1b920 <xQueueSemaphoreTake+0x4b4>)
   1b8dc:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b8de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b8e0:	0018      	movs	r0, r3
   1b8e2:	46bd      	mov	sp, r7
   1b8e4:	b00a      	add	sp, #40	; 0x28
   1b8e6:	bdb0      	pop	{r4, r5, r7, pc}
   1b8e8:	0001bac5 	.word	0x0001bac5
   1b8ec:	0001c499 	.word	0x0001c499
   1b8f0:	0001bbb5 	.word	0x0001bbb5
   1b8f4:	0001a1c9 	.word	0x0001a1c9
   1b8f8:	0001b967 	.word	0x0001b967
   1b8fc:	0001d219 	.word	0x0001d219
   1b900:	0001a1ed 	.word	0x0001a1ed
   1b904:	0001845d 	.word	0x0001845d
   1b908:	000181c1 	.word	0x000181c1
   1b90c:	20000104 	.word	0x20000104
   1b910:	00018281 	.word	0x00018281
   1b914:	00018181 	.word	0x00018181
   1b918:	200000f8 	.word	0x200000f8
   1b91c:	00018261 	.word	0x00018261
   1b920:	00018bb9 	.word	0x00018bb9

0001b924 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1b924:	b580      	push	{r7, lr}
   1b926:	b082      	sub	sp, #8
   1b928:	af00      	add	r7, sp, #0
   1b92a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1b92c:	687b      	ldr	r3, [r7, #4]
   1b92e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1b930:	0018      	movs	r0, r3
   1b932:	46bd      	mov	sp, r7
   1b934:	b002      	add	sp, #8
   1b936:	bd80      	pop	{r7, pc}

0001b938 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1b938:	b580      	push	{r7, lr}
   1b93a:	b082      	sub	sp, #8
   1b93c:	af00      	add	r7, sp, #0
   1b93e:	6078      	str	r0, [r7, #4]
   1b940:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1b942:	687b      	ldr	r3, [r7, #4]
   1b944:	683a      	ldr	r2, [r7, #0]
   1b946:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1b948:	46c0      	nop			; (mov r8, r8)
   1b94a:	46bd      	mov	sp, r7
   1b94c:	b002      	add	sp, #8
   1b94e:	bd80      	pop	{r7, pc}

0001b950 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1b950:	b580      	push	{r7, lr}
   1b952:	b082      	sub	sp, #8
   1b954:	af00      	add	r7, sp, #0
   1b956:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1b958:	687b      	ldr	r3, [r7, #4]
   1b95a:	2250      	movs	r2, #80	; 0x50
   1b95c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1b95e:	0018      	movs	r0, r3
   1b960:	46bd      	mov	sp, r7
   1b962:	b002      	add	sp, #8
   1b964:	bd80      	pop	{r7, pc}

0001b966 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1b966:	b580      	push	{r7, lr}
   1b968:	b084      	sub	sp, #16
   1b96a:	af00      	add	r7, sp, #0
   1b96c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1b96e:	687b      	ldr	r3, [r7, #4]
   1b970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b972:	2b00      	cmp	r3, #0
   1b974:	d006      	beq.n	1b984 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1b976:	687b      	ldr	r3, [r7, #4]
   1b978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b97a:	681b      	ldr	r3, [r3, #0]
   1b97c:	2205      	movs	r2, #5
   1b97e:	1ad3      	subs	r3, r2, r3
   1b980:	60fb      	str	r3, [r7, #12]
   1b982:	e001      	b.n	1b988 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1b984:	2300      	movs	r3, #0
   1b986:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1b988:	68fb      	ldr	r3, [r7, #12]
	}
   1b98a:	0018      	movs	r0, r3
   1b98c:	46bd      	mov	sp, r7
   1b98e:	b004      	add	sp, #16
   1b990:	bd80      	pop	{r7, pc}
	...

0001b994 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1b994:	b580      	push	{r7, lr}
   1b996:	b086      	sub	sp, #24
   1b998:	af00      	add	r7, sp, #0
   1b99a:	60f8      	str	r0, [r7, #12]
   1b99c:	60b9      	str	r1, [r7, #8]
   1b99e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1b9a0:	2300      	movs	r3, #0
   1b9a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b9a4:	68fb      	ldr	r3, [r7, #12]
   1b9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b9a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1b9aa:	68fb      	ldr	r3, [r7, #12]
   1b9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b9ae:	2b00      	cmp	r3, #0
   1b9b0:	d10e      	bne.n	1b9d0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b9b2:	68fb      	ldr	r3, [r7, #12]
   1b9b4:	681b      	ldr	r3, [r3, #0]
   1b9b6:	2b00      	cmp	r3, #0
   1b9b8:	d14e      	bne.n	1ba58 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1b9ba:	68fb      	ldr	r3, [r7, #12]
   1b9bc:	685b      	ldr	r3, [r3, #4]
   1b9be:	0018      	movs	r0, r3
   1b9c0:	4b2a      	ldr	r3, [pc, #168]	; (1ba6c <prvCopyDataToQueue+0xd8>)
   1b9c2:	4798      	blx	r3
   1b9c4:	0003      	movs	r3, r0
   1b9c6:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1b9c8:	68fb      	ldr	r3, [r7, #12]
   1b9ca:	2200      	movs	r2, #0
   1b9cc:	605a      	str	r2, [r3, #4]
   1b9ce:	e043      	b.n	1ba58 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1b9d0:	687b      	ldr	r3, [r7, #4]
   1b9d2:	2b00      	cmp	r3, #0
   1b9d4:	d119      	bne.n	1ba0a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1b9d6:	68fb      	ldr	r3, [r7, #12]
   1b9d8:	6898      	ldr	r0, [r3, #8]
   1b9da:	68fb      	ldr	r3, [r7, #12]
   1b9dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b9de:	68bb      	ldr	r3, [r7, #8]
   1b9e0:	0019      	movs	r1, r3
   1b9e2:	4b23      	ldr	r3, [pc, #140]	; (1ba70 <prvCopyDataToQueue+0xdc>)
   1b9e4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1b9e6:	68fb      	ldr	r3, [r7, #12]
   1b9e8:	689a      	ldr	r2, [r3, #8]
   1b9ea:	68fb      	ldr	r3, [r7, #12]
   1b9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b9ee:	18d2      	adds	r2, r2, r3
   1b9f0:	68fb      	ldr	r3, [r7, #12]
   1b9f2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b9f4:	68fb      	ldr	r3, [r7, #12]
   1b9f6:	689a      	ldr	r2, [r3, #8]
   1b9f8:	68fb      	ldr	r3, [r7, #12]
   1b9fa:	685b      	ldr	r3, [r3, #4]
   1b9fc:	429a      	cmp	r2, r3
   1b9fe:	d32b      	bcc.n	1ba58 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1ba00:	68fb      	ldr	r3, [r7, #12]
   1ba02:	681a      	ldr	r2, [r3, #0]
   1ba04:	68fb      	ldr	r3, [r7, #12]
   1ba06:	609a      	str	r2, [r3, #8]
   1ba08:	e026      	b.n	1ba58 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ba0a:	68fb      	ldr	r3, [r7, #12]
   1ba0c:	68d8      	ldr	r0, [r3, #12]
   1ba0e:	68fb      	ldr	r3, [r7, #12]
   1ba10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1ba12:	68bb      	ldr	r3, [r7, #8]
   1ba14:	0019      	movs	r1, r3
   1ba16:	4b16      	ldr	r3, [pc, #88]	; (1ba70 <prvCopyDataToQueue+0xdc>)
   1ba18:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1ba1a:	68fb      	ldr	r3, [r7, #12]
   1ba1c:	68da      	ldr	r2, [r3, #12]
   1ba1e:	68fb      	ldr	r3, [r7, #12]
   1ba20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ba22:	425b      	negs	r3, r3
   1ba24:	18d2      	adds	r2, r2, r3
   1ba26:	68fb      	ldr	r3, [r7, #12]
   1ba28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1ba2a:	68fb      	ldr	r3, [r7, #12]
   1ba2c:	68da      	ldr	r2, [r3, #12]
   1ba2e:	68fb      	ldr	r3, [r7, #12]
   1ba30:	681b      	ldr	r3, [r3, #0]
   1ba32:	429a      	cmp	r2, r3
   1ba34:	d207      	bcs.n	1ba46 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1ba36:	68fb      	ldr	r3, [r7, #12]
   1ba38:	685a      	ldr	r2, [r3, #4]
   1ba3a:	68fb      	ldr	r3, [r7, #12]
   1ba3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ba3e:	425b      	negs	r3, r3
   1ba40:	18d2      	adds	r2, r2, r3
   1ba42:	68fb      	ldr	r3, [r7, #12]
   1ba44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1ba46:	687b      	ldr	r3, [r7, #4]
   1ba48:	2b02      	cmp	r3, #2
   1ba4a:	d105      	bne.n	1ba58 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1ba4c:	693b      	ldr	r3, [r7, #16]
   1ba4e:	2b00      	cmp	r3, #0
   1ba50:	d002      	beq.n	1ba58 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1ba52:	693b      	ldr	r3, [r7, #16]
   1ba54:	3b01      	subs	r3, #1
   1ba56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1ba58:	693b      	ldr	r3, [r7, #16]
   1ba5a:	1c5a      	adds	r2, r3, #1
   1ba5c:	68fb      	ldr	r3, [r7, #12]
   1ba5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1ba60:	697b      	ldr	r3, [r7, #20]
}
   1ba62:	0018      	movs	r0, r3
   1ba64:	46bd      	mov	sp, r7
   1ba66:	b006      	add	sp, #24
   1ba68:	bd80      	pop	{r7, pc}
   1ba6a:	46c0      	nop			; (mov r8, r8)
   1ba6c:	0001d0b1 	.word	0x0001d0b1
   1ba70:	00034a29 	.word	0x00034a29

0001ba74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1ba74:	b580      	push	{r7, lr}
   1ba76:	b082      	sub	sp, #8
   1ba78:	af00      	add	r7, sp, #0
   1ba7a:	6078      	str	r0, [r7, #4]
   1ba7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1ba7e:	687b      	ldr	r3, [r7, #4]
   1ba80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ba82:	2b00      	cmp	r3, #0
   1ba84:	d018      	beq.n	1bab8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1ba86:	687b      	ldr	r3, [r7, #4]
   1ba88:	68da      	ldr	r2, [r3, #12]
   1ba8a:	687b      	ldr	r3, [r7, #4]
   1ba8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ba8e:	18d2      	adds	r2, r2, r3
   1ba90:	687b      	ldr	r3, [r7, #4]
   1ba92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1ba94:	687b      	ldr	r3, [r7, #4]
   1ba96:	68da      	ldr	r2, [r3, #12]
   1ba98:	687b      	ldr	r3, [r7, #4]
   1ba9a:	685b      	ldr	r3, [r3, #4]
   1ba9c:	429a      	cmp	r2, r3
   1ba9e:	d303      	bcc.n	1baa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1baa0:	687b      	ldr	r3, [r7, #4]
   1baa2:	681a      	ldr	r2, [r3, #0]
   1baa4:	687b      	ldr	r3, [r7, #4]
   1baa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1baa8:	687b      	ldr	r3, [r7, #4]
   1baaa:	68d9      	ldr	r1, [r3, #12]
   1baac:	687b      	ldr	r3, [r7, #4]
   1baae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1bab0:	683b      	ldr	r3, [r7, #0]
   1bab2:	0018      	movs	r0, r3
   1bab4:	4b02      	ldr	r3, [pc, #8]	; (1bac0 <prvCopyDataFromQueue+0x4c>)
   1bab6:	4798      	blx	r3
	}
}
   1bab8:	46c0      	nop			; (mov r8, r8)
   1baba:	46bd      	mov	sp, r7
   1babc:	b002      	add	sp, #8
   1babe:	bd80      	pop	{r7, pc}
   1bac0:	00034a29 	.word	0x00034a29

0001bac4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1bac4:	b580      	push	{r7, lr}
   1bac6:	b084      	sub	sp, #16
   1bac8:	af00      	add	r7, sp, #0
   1baca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1bacc:	4b34      	ldr	r3, [pc, #208]	; (1bba0 <prvUnlockQueue+0xdc>)
   1bace:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1bad0:	230f      	movs	r3, #15
   1bad2:	18fb      	adds	r3, r7, r3
   1bad4:	687a      	ldr	r2, [r7, #4]
   1bad6:	2145      	movs	r1, #69	; 0x45
   1bad8:	5c52      	ldrb	r2, [r2, r1]
   1bada:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1badc:	e022      	b.n	1bb24 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1bade:	687b      	ldr	r3, [r7, #4]
   1bae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bae2:	2b00      	cmp	r3, #0
   1bae4:	d009      	beq.n	1bafa <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1bae6:	687b      	ldr	r3, [r7, #4]
   1bae8:	2100      	movs	r1, #0
   1baea:	0018      	movs	r0, r3
   1baec:	4b2d      	ldr	r3, [pc, #180]	; (1bba4 <prvUnlockQueue+0xe0>)
   1baee:	4798      	blx	r3
   1baf0:	1e03      	subs	r3, r0, #0
   1baf2:	d00f      	beq.n	1bb14 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1baf4:	4b2c      	ldr	r3, [pc, #176]	; (1bba8 <prvUnlockQueue+0xe4>)
   1baf6:	4798      	blx	r3
   1baf8:	e00c      	b.n	1bb14 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1bafa:	687b      	ldr	r3, [r7, #4]
   1bafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bafe:	2b00      	cmp	r3, #0
   1bb00:	d017      	beq.n	1bb32 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1bb02:	687b      	ldr	r3, [r7, #4]
   1bb04:	3324      	adds	r3, #36	; 0x24
   1bb06:	0018      	movs	r0, r3
   1bb08:	4b28      	ldr	r3, [pc, #160]	; (1bbac <prvUnlockQueue+0xe8>)
   1bb0a:	4798      	blx	r3
   1bb0c:	1e03      	subs	r3, r0, #0
   1bb0e:	d001      	beq.n	1bb14 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1bb10:	4b25      	ldr	r3, [pc, #148]	; (1bba8 <prvUnlockQueue+0xe4>)
   1bb12:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1bb14:	230f      	movs	r3, #15
   1bb16:	18fb      	adds	r3, r7, r3
   1bb18:	781b      	ldrb	r3, [r3, #0]
   1bb1a:	3b01      	subs	r3, #1
   1bb1c:	b2da      	uxtb	r2, r3
   1bb1e:	230f      	movs	r3, #15
   1bb20:	18fb      	adds	r3, r7, r3
   1bb22:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1bb24:	230f      	movs	r3, #15
   1bb26:	18fb      	adds	r3, r7, r3
   1bb28:	781b      	ldrb	r3, [r3, #0]
   1bb2a:	b25b      	sxtb	r3, r3
   1bb2c:	2b00      	cmp	r3, #0
   1bb2e:	dcd6      	bgt.n	1bade <prvUnlockQueue+0x1a>
   1bb30:	e000      	b.n	1bb34 <prvUnlockQueue+0x70>
						break;
   1bb32:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1bb34:	687b      	ldr	r3, [r7, #4]
   1bb36:	2245      	movs	r2, #69	; 0x45
   1bb38:	21ff      	movs	r1, #255	; 0xff
   1bb3a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1bb3c:	4b1c      	ldr	r3, [pc, #112]	; (1bbb0 <prvUnlockQueue+0xec>)
   1bb3e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1bb40:	4b17      	ldr	r3, [pc, #92]	; (1bba0 <prvUnlockQueue+0xdc>)
   1bb42:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1bb44:	230e      	movs	r3, #14
   1bb46:	18fb      	adds	r3, r7, r3
   1bb48:	687a      	ldr	r2, [r7, #4]
   1bb4a:	2144      	movs	r1, #68	; 0x44
   1bb4c:	5c52      	ldrb	r2, [r2, r1]
   1bb4e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1bb50:	e014      	b.n	1bb7c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bb52:	687b      	ldr	r3, [r7, #4]
   1bb54:	691b      	ldr	r3, [r3, #16]
   1bb56:	2b00      	cmp	r3, #0
   1bb58:	d017      	beq.n	1bb8a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bb5a:	687b      	ldr	r3, [r7, #4]
   1bb5c:	3310      	adds	r3, #16
   1bb5e:	0018      	movs	r0, r3
   1bb60:	4b12      	ldr	r3, [pc, #72]	; (1bbac <prvUnlockQueue+0xe8>)
   1bb62:	4798      	blx	r3
   1bb64:	1e03      	subs	r3, r0, #0
   1bb66:	d001      	beq.n	1bb6c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1bb68:	4b0f      	ldr	r3, [pc, #60]	; (1bba8 <prvUnlockQueue+0xe4>)
   1bb6a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1bb6c:	230e      	movs	r3, #14
   1bb6e:	18fb      	adds	r3, r7, r3
   1bb70:	781b      	ldrb	r3, [r3, #0]
   1bb72:	3b01      	subs	r3, #1
   1bb74:	b2da      	uxtb	r2, r3
   1bb76:	230e      	movs	r3, #14
   1bb78:	18fb      	adds	r3, r7, r3
   1bb7a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1bb7c:	230e      	movs	r3, #14
   1bb7e:	18fb      	adds	r3, r7, r3
   1bb80:	781b      	ldrb	r3, [r3, #0]
   1bb82:	b25b      	sxtb	r3, r3
   1bb84:	2b00      	cmp	r3, #0
   1bb86:	dce4      	bgt.n	1bb52 <prvUnlockQueue+0x8e>
   1bb88:	e000      	b.n	1bb8c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1bb8a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1bb8c:	687b      	ldr	r3, [r7, #4]
   1bb8e:	2244      	movs	r2, #68	; 0x44
   1bb90:	21ff      	movs	r1, #255	; 0xff
   1bb92:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1bb94:	4b06      	ldr	r3, [pc, #24]	; (1bbb0 <prvUnlockQueue+0xec>)
   1bb96:	4798      	blx	r3
}
   1bb98:	46c0      	nop			; (mov r8, r8)
   1bb9a:	46bd      	mov	sp, r7
   1bb9c:	b004      	add	sp, #16
   1bb9e:	bd80      	pop	{r7, pc}
   1bba0:	0001a1c9 	.word	0x0001a1c9
   1bba4:	0001bc99 	.word	0x0001bc99
   1bba8:	0001cc6d 	.word	0x0001cc6d
   1bbac:	0001ca59 	.word	0x0001ca59
   1bbb0:	0001a1ed 	.word	0x0001a1ed

0001bbb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1bbb4:	b580      	push	{r7, lr}
   1bbb6:	b084      	sub	sp, #16
   1bbb8:	af00      	add	r7, sp, #0
   1bbba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1bbbc:	4b08      	ldr	r3, [pc, #32]	; (1bbe0 <prvIsQueueEmpty+0x2c>)
   1bbbe:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1bbc0:	687b      	ldr	r3, [r7, #4]
   1bbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bbc4:	2b00      	cmp	r3, #0
   1bbc6:	d102      	bne.n	1bbce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1bbc8:	2301      	movs	r3, #1
   1bbca:	60fb      	str	r3, [r7, #12]
   1bbcc:	e001      	b.n	1bbd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1bbce:	2300      	movs	r3, #0
   1bbd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1bbd2:	4b04      	ldr	r3, [pc, #16]	; (1bbe4 <prvIsQueueEmpty+0x30>)
   1bbd4:	4798      	blx	r3

	return xReturn;
   1bbd6:	68fb      	ldr	r3, [r7, #12]
}
   1bbd8:	0018      	movs	r0, r3
   1bbda:	46bd      	mov	sp, r7
   1bbdc:	b004      	add	sp, #16
   1bbde:	bd80      	pop	{r7, pc}
   1bbe0:	0001a1c9 	.word	0x0001a1c9
   1bbe4:	0001a1ed 	.word	0x0001a1ed

0001bbe8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1bbe8:	b580      	push	{r7, lr}
   1bbea:	b084      	sub	sp, #16
   1bbec:	af00      	add	r7, sp, #0
   1bbee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1bbf0:	4b09      	ldr	r3, [pc, #36]	; (1bc18 <prvIsQueueFull+0x30>)
   1bbf2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1bbf4:	687b      	ldr	r3, [r7, #4]
   1bbf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1bbf8:	687b      	ldr	r3, [r7, #4]
   1bbfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bbfc:	429a      	cmp	r2, r3
   1bbfe:	d102      	bne.n	1bc06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1bc00:	2301      	movs	r3, #1
   1bc02:	60fb      	str	r3, [r7, #12]
   1bc04:	e001      	b.n	1bc0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1bc06:	2300      	movs	r3, #0
   1bc08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1bc0a:	4b04      	ldr	r3, [pc, #16]	; (1bc1c <prvIsQueueFull+0x34>)
   1bc0c:	4798      	blx	r3

	return xReturn;
   1bc0e:	68fb      	ldr	r3, [r7, #12]
}
   1bc10:	0018      	movs	r0, r3
   1bc12:	46bd      	mov	sp, r7
   1bc14:	b004      	add	sp, #16
   1bc16:	bd80      	pop	{r7, pc}
   1bc18:	0001a1c9 	.word	0x0001a1c9
   1bc1c:	0001a1ed 	.word	0x0001a1ed

0001bc20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1bc20:	b580      	push	{r7, lr}
   1bc22:	b086      	sub	sp, #24
   1bc24:	af00      	add	r7, sp, #0
   1bc26:	60f8      	str	r0, [r7, #12]
   1bc28:	60b9      	str	r1, [r7, #8]
   1bc2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bc2c:	68fb      	ldr	r3, [r7, #12]
   1bc2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1bc30:	4b15      	ldr	r3, [pc, #84]	; (1bc88 <vQueueWaitForMessageRestricted+0x68>)
   1bc32:	4798      	blx	r3
   1bc34:	697b      	ldr	r3, [r7, #20]
   1bc36:	2244      	movs	r2, #68	; 0x44
   1bc38:	5c9b      	ldrb	r3, [r3, r2]
   1bc3a:	b25b      	sxtb	r3, r3
   1bc3c:	3301      	adds	r3, #1
   1bc3e:	d103      	bne.n	1bc48 <vQueueWaitForMessageRestricted+0x28>
   1bc40:	697b      	ldr	r3, [r7, #20]
   1bc42:	2244      	movs	r2, #68	; 0x44
   1bc44:	2100      	movs	r1, #0
   1bc46:	5499      	strb	r1, [r3, r2]
   1bc48:	697b      	ldr	r3, [r7, #20]
   1bc4a:	2245      	movs	r2, #69	; 0x45
   1bc4c:	5c9b      	ldrb	r3, [r3, r2]
   1bc4e:	b25b      	sxtb	r3, r3
   1bc50:	3301      	adds	r3, #1
   1bc52:	d103      	bne.n	1bc5c <vQueueWaitForMessageRestricted+0x3c>
   1bc54:	697b      	ldr	r3, [r7, #20]
   1bc56:	2245      	movs	r2, #69	; 0x45
   1bc58:	2100      	movs	r1, #0
   1bc5a:	5499      	strb	r1, [r3, r2]
   1bc5c:	4b0b      	ldr	r3, [pc, #44]	; (1bc8c <vQueueWaitForMessageRestricted+0x6c>)
   1bc5e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1bc60:	697b      	ldr	r3, [r7, #20]
   1bc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bc64:	2b00      	cmp	r3, #0
   1bc66:	d106      	bne.n	1bc76 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1bc68:	697b      	ldr	r3, [r7, #20]
   1bc6a:	3324      	adds	r3, #36	; 0x24
   1bc6c:	687a      	ldr	r2, [r7, #4]
   1bc6e:	68b9      	ldr	r1, [r7, #8]
   1bc70:	0018      	movs	r0, r3
   1bc72:	4b07      	ldr	r3, [pc, #28]	; (1bc90 <vQueueWaitForMessageRestricted+0x70>)
   1bc74:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1bc76:	697b      	ldr	r3, [r7, #20]
   1bc78:	0018      	movs	r0, r3
   1bc7a:	4b06      	ldr	r3, [pc, #24]	; (1bc94 <vQueueWaitForMessageRestricted+0x74>)
   1bc7c:	4798      	blx	r3
	}
   1bc7e:	46c0      	nop			; (mov r8, r8)
   1bc80:	46bd      	mov	sp, r7
   1bc82:	b006      	add	sp, #24
   1bc84:	bd80      	pop	{r7, pc}
   1bc86:	46c0      	nop			; (mov r8, r8)
   1bc88:	0001a1c9 	.word	0x0001a1c9
   1bc8c:	0001a1ed 	.word	0x0001a1ed
   1bc90:	0001c979 	.word	0x0001c979
   1bc94:	0001bac5 	.word	0x0001bac5

0001bc98 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1bc98:	b5b0      	push	{r4, r5, r7, lr}
   1bc9a:	b086      	sub	sp, #24
   1bc9c:	af00      	add	r7, sp, #0
   1bc9e:	6078      	str	r0, [r7, #4]
   1bca0:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1bca2:	687b      	ldr	r3, [r7, #4]
   1bca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bca6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1bca8:	2300      	movs	r3, #0
   1bcaa:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1bcac:	693b      	ldr	r3, [r7, #16]
   1bcae:	2b00      	cmp	r3, #0
   1bcb0:	d101      	bne.n	1bcb6 <prvNotifyQueueSetContainer+0x1e>
   1bcb2:	b672      	cpsid	i
   1bcb4:	e7fe      	b.n	1bcb4 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1bcb6:	693b      	ldr	r3, [r7, #16]
   1bcb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1bcba:	693b      	ldr	r3, [r7, #16]
   1bcbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bcbe:	429a      	cmp	r2, r3
   1bcc0:	d301      	bcc.n	1bcc6 <prvNotifyQueueSetContainer+0x2e>
   1bcc2:	b672      	cpsid	i
   1bcc4:	e7fe      	b.n	1bcc4 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1bcc6:	693b      	ldr	r3, [r7, #16]
   1bcc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1bcca:	693b      	ldr	r3, [r7, #16]
   1bccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bcce:	429a      	cmp	r2, r3
   1bcd0:	d300      	bcc.n	1bcd4 <prvNotifyQueueSetContainer+0x3c>
   1bcd2:	e08b      	b.n	1bdec <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1bcd4:	230f      	movs	r3, #15
   1bcd6:	18fb      	adds	r3, r7, r3
   1bcd8:	693a      	ldr	r2, [r7, #16]
   1bcda:	2145      	movs	r1, #69	; 0x45
   1bcdc:	5c52      	ldrb	r2, [r2, r1]
   1bcde:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1bce0:	4b45      	ldr	r3, [pc, #276]	; (1bdf8 <prvNotifyQueueSetContainer+0x160>)
   1bce2:	4798      	blx	r3
   1bce4:	0003      	movs	r3, r0
   1bce6:	0018      	movs	r0, r3
   1bce8:	4b44      	ldr	r3, [pc, #272]	; (1bdfc <prvNotifyQueueSetContainer+0x164>)
   1bcea:	4798      	blx	r3
   1bcec:	0003      	movs	r3, r0
   1bcee:	001a      	movs	r2, r3
   1bcf0:	4b43      	ldr	r3, [pc, #268]	; (1be00 <prvNotifyQueueSetContainer+0x168>)
   1bcf2:	881b      	ldrh	r3, [r3, #0]
   1bcf4:	4013      	ands	r3, r2
   1bcf6:	b29b      	uxth	r3, r3
   1bcf8:	2b00      	cmp	r3, #0
   1bcfa:	d02e      	beq.n	1bd5a <prvNotifyQueueSetContainer+0xc2>
   1bcfc:	693b      	ldr	r3, [r7, #16]
   1bcfe:	0018      	movs	r0, r3
   1bd00:	4b40      	ldr	r3, [pc, #256]	; (1be04 <prvNotifyQueueSetContainer+0x16c>)
   1bd02:	4798      	blx	r3
   1bd04:	0003      	movs	r3, r0
   1bd06:	001a      	movs	r2, r3
   1bd08:	4b3d      	ldr	r3, [pc, #244]	; (1be00 <prvNotifyQueueSetContainer+0x168>)
   1bd0a:	881b      	ldrh	r3, [r3, #0]
   1bd0c:	4013      	ands	r3, r2
   1bd0e:	b29b      	uxth	r3, r3
   1bd10:	2b00      	cmp	r3, #0
   1bd12:	d022      	beq.n	1bd5a <prvNotifyQueueSetContainer+0xc2>
   1bd14:	683b      	ldr	r3, [r7, #0]
   1bd16:	2b00      	cmp	r3, #0
   1bd18:	d10b      	bne.n	1bd32 <prvNotifyQueueSetContainer+0x9a>
   1bd1a:	693b      	ldr	r3, [r7, #16]
   1bd1c:	0018      	movs	r0, r3
   1bd1e:	4b3a      	ldr	r3, [pc, #232]	; (1be08 <prvNotifyQueueSetContainer+0x170>)
   1bd20:	4798      	blx	r3
   1bd22:	0003      	movs	r3, r0
   1bd24:	001a      	movs	r2, r3
   1bd26:	4b39      	ldr	r3, [pc, #228]	; (1be0c <prvNotifyQueueSetContainer+0x174>)
   1bd28:	5c9b      	ldrb	r3, [r3, r2]
   1bd2a:	3320      	adds	r3, #32
   1bd2c:	b2db      	uxtb	r3, r3
   1bd2e:	001d      	movs	r5, r3
   1bd30:	e000      	b.n	1bd34 <prvNotifyQueueSetContainer+0x9c>
   1bd32:	2525      	movs	r5, #37	; 0x25
   1bd34:	693b      	ldr	r3, [r7, #16]
   1bd36:	0018      	movs	r0, r3
   1bd38:	4b33      	ldr	r3, [pc, #204]	; (1be08 <prvNotifyQueueSetContainer+0x170>)
   1bd3a:	4798      	blx	r3
   1bd3c:	0003      	movs	r3, r0
   1bd3e:	001a      	movs	r2, r3
   1bd40:	4b32      	ldr	r3, [pc, #200]	; (1be0c <prvNotifyQueueSetContainer+0x174>)
   1bd42:	5c9c      	ldrb	r4, [r3, r2]
   1bd44:	693b      	ldr	r3, [r7, #16]
   1bd46:	0018      	movs	r0, r3
   1bd48:	4b31      	ldr	r3, [pc, #196]	; (1be10 <prvNotifyQueueSetContainer+0x178>)
   1bd4a:	4798      	blx	r3
   1bd4c:	0003      	movs	r3, r0
   1bd4e:	b2db      	uxtb	r3, r3
   1bd50:	001a      	movs	r2, r3
   1bd52:	0021      	movs	r1, r4
   1bd54:	0028      	movs	r0, r5
   1bd56:	4b2f      	ldr	r3, [pc, #188]	; (1be14 <prvNotifyQueueSetContainer+0x17c>)
   1bd58:	4798      	blx	r3
   1bd5a:	693b      	ldr	r3, [r7, #16]
   1bd5c:	0018      	movs	r0, r3
   1bd5e:	4b2a      	ldr	r3, [pc, #168]	; (1be08 <prvNotifyQueueSetContainer+0x170>)
   1bd60:	4798      	blx	r3
   1bd62:	0003      	movs	r3, r0
   1bd64:	001a      	movs	r2, r3
   1bd66:	4b29      	ldr	r3, [pc, #164]	; (1be0c <prvNotifyQueueSetContainer+0x174>)
   1bd68:	5c9c      	ldrb	r4, [r3, r2]
   1bd6a:	693b      	ldr	r3, [r7, #16]
   1bd6c:	0018      	movs	r0, r3
   1bd6e:	4b28      	ldr	r3, [pc, #160]	; (1be10 <prvNotifyQueueSetContainer+0x178>)
   1bd70:	4798      	blx	r3
   1bd72:	0003      	movs	r3, r0
   1bd74:	b2dd      	uxtb	r5, r3
   1bd76:	693b      	ldr	r3, [r7, #16]
   1bd78:	0018      	movs	r0, r3
   1bd7a:	4b23      	ldr	r3, [pc, #140]	; (1be08 <prvNotifyQueueSetContainer+0x170>)
   1bd7c:	4798      	blx	r3
   1bd7e:	0003      	movs	r3, r0
   1bd80:	001a      	movs	r2, r3
   1bd82:	4b22      	ldr	r3, [pc, #136]	; (1be0c <prvNotifyQueueSetContainer+0x174>)
   1bd84:	5c9b      	ldrb	r3, [r3, r2]
   1bd86:	2b02      	cmp	r3, #2
   1bd88:	d005      	beq.n	1bd96 <prvNotifyQueueSetContainer+0xfe>
   1bd8a:	693b      	ldr	r3, [r7, #16]
   1bd8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bd8e:	b2db      	uxtb	r3, r3
   1bd90:	3301      	adds	r3, #1
   1bd92:	b2db      	uxtb	r3, r3
   1bd94:	e000      	b.n	1bd98 <prvNotifyQueueSetContainer+0x100>
   1bd96:	2300      	movs	r3, #0
   1bd98:	001a      	movs	r2, r3
   1bd9a:	0029      	movs	r1, r5
   1bd9c:	0020      	movs	r0, r4
   1bd9e:	4b1e      	ldr	r3, [pc, #120]	; (1be18 <prvNotifyQueueSetContainer+0x180>)
   1bda0:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1bda2:	683a      	ldr	r2, [r7, #0]
   1bda4:	1d39      	adds	r1, r7, #4
   1bda6:	693b      	ldr	r3, [r7, #16]
   1bda8:	0018      	movs	r0, r3
   1bdaa:	4b1c      	ldr	r3, [pc, #112]	; (1be1c <prvNotifyQueueSetContainer+0x184>)
   1bdac:	4798      	blx	r3
   1bdae:	0003      	movs	r3, r0
   1bdb0:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1bdb2:	230f      	movs	r3, #15
   1bdb4:	18fb      	adds	r3, r7, r3
   1bdb6:	781b      	ldrb	r3, [r3, #0]
   1bdb8:	b25b      	sxtb	r3, r3
   1bdba:	3301      	adds	r3, #1
   1bdbc:	d10d      	bne.n	1bdda <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1bdbe:	693b      	ldr	r3, [r7, #16]
   1bdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bdc2:	2b00      	cmp	r3, #0
   1bdc4:	d012      	beq.n	1bdec <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1bdc6:	693b      	ldr	r3, [r7, #16]
   1bdc8:	3324      	adds	r3, #36	; 0x24
   1bdca:	0018      	movs	r0, r3
   1bdcc:	4b14      	ldr	r3, [pc, #80]	; (1be20 <prvNotifyQueueSetContainer+0x188>)
   1bdce:	4798      	blx	r3
   1bdd0:	1e03      	subs	r3, r0, #0
   1bdd2:	d00b      	beq.n	1bdec <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1bdd4:	2301      	movs	r3, #1
   1bdd6:	617b      	str	r3, [r7, #20]
   1bdd8:	e008      	b.n	1bdec <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1bdda:	230f      	movs	r3, #15
   1bddc:	18fb      	adds	r3, r7, r3
   1bdde:	781b      	ldrb	r3, [r3, #0]
   1bde0:	3301      	adds	r3, #1
   1bde2:	b2db      	uxtb	r3, r3
   1bde4:	b259      	sxtb	r1, r3
   1bde6:	693b      	ldr	r3, [r7, #16]
   1bde8:	2245      	movs	r2, #69	; 0x45
   1bdea:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1bdec:	697b      	ldr	r3, [r7, #20]
	}
   1bdee:	0018      	movs	r0, r3
   1bdf0:	46bd      	mov	sp, r7
   1bdf2:	b006      	add	sp, #24
   1bdf4:	bdb0      	pop	{r4, r5, r7, pc}
   1bdf6:	46c0      	nop			; (mov r8, r8)
   1bdf8:	0001845d 	.word	0x0001845d
   1bdfc:	000181c1 	.word	0x000181c1
   1be00:	20000104 	.word	0x20000104
   1be04:	00018281 	.word	0x00018281
   1be08:	00018181 	.word	0x00018181
   1be0c:	200000f8 	.word	0x200000f8
   1be10:	00018261 	.word	0x00018261
   1be14:	00018bb9 	.word	0x00018bb9
   1be18:	00019215 	.word	0x00019215
   1be1c:	0001b995 	.word	0x0001b995
   1be20:	0001ca59 	.word	0x0001ca59

0001be24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1be24:	b590      	push	{r4, r7, lr}
   1be26:	b08d      	sub	sp, #52	; 0x34
   1be28:	af04      	add	r7, sp, #16
   1be2a:	60f8      	str	r0, [r7, #12]
   1be2c:	60b9      	str	r1, [r7, #8]
   1be2e:	603b      	str	r3, [r7, #0]
   1be30:	1dbb      	adds	r3, r7, #6
   1be32:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1be34:	1dbb      	adds	r3, r7, #6
   1be36:	881b      	ldrh	r3, [r3, #0]
   1be38:	009b      	lsls	r3, r3, #2
   1be3a:	0018      	movs	r0, r3
   1be3c:	4b1d      	ldr	r3, [pc, #116]	; (1beb4 <xTaskCreate+0x90>)
   1be3e:	4798      	blx	r3
   1be40:	0003      	movs	r3, r0
   1be42:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1be44:	697b      	ldr	r3, [r7, #20]
   1be46:	2b00      	cmp	r3, #0
   1be48:	d010      	beq.n	1be6c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1be4a:	2054      	movs	r0, #84	; 0x54
   1be4c:	4b19      	ldr	r3, [pc, #100]	; (1beb4 <xTaskCreate+0x90>)
   1be4e:	4798      	blx	r3
   1be50:	0003      	movs	r3, r0
   1be52:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1be54:	69fb      	ldr	r3, [r7, #28]
   1be56:	2b00      	cmp	r3, #0
   1be58:	d003      	beq.n	1be62 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1be5a:	69fb      	ldr	r3, [r7, #28]
   1be5c:	697a      	ldr	r2, [r7, #20]
   1be5e:	631a      	str	r2, [r3, #48]	; 0x30
   1be60:	e006      	b.n	1be70 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1be62:	697b      	ldr	r3, [r7, #20]
   1be64:	0018      	movs	r0, r3
   1be66:	4b14      	ldr	r3, [pc, #80]	; (1beb8 <xTaskCreate+0x94>)
   1be68:	4798      	blx	r3
   1be6a:	e001      	b.n	1be70 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1be6c:	2300      	movs	r3, #0
   1be6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1be70:	69fb      	ldr	r3, [r7, #28]
   1be72:	2b00      	cmp	r3, #0
   1be74:	d016      	beq.n	1bea4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1be76:	1dbb      	adds	r3, r7, #6
   1be78:	881a      	ldrh	r2, [r3, #0]
   1be7a:	683c      	ldr	r4, [r7, #0]
   1be7c:	68b9      	ldr	r1, [r7, #8]
   1be7e:	68f8      	ldr	r0, [r7, #12]
   1be80:	2300      	movs	r3, #0
   1be82:	9303      	str	r3, [sp, #12]
   1be84:	69fb      	ldr	r3, [r7, #28]
   1be86:	9302      	str	r3, [sp, #8]
   1be88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1be8a:	9301      	str	r3, [sp, #4]
   1be8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1be8e:	9300      	str	r3, [sp, #0]
   1be90:	0023      	movs	r3, r4
   1be92:	4c0a      	ldr	r4, [pc, #40]	; (1bebc <xTaskCreate+0x98>)
   1be94:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1be96:	69fb      	ldr	r3, [r7, #28]
   1be98:	0018      	movs	r0, r3
   1be9a:	4b09      	ldr	r3, [pc, #36]	; (1bec0 <xTaskCreate+0x9c>)
   1be9c:	4798      	blx	r3
			xReturn = pdPASS;
   1be9e:	2301      	movs	r3, #1
   1bea0:	61bb      	str	r3, [r7, #24]
   1bea2:	e002      	b.n	1beaa <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1bea4:	2301      	movs	r3, #1
   1bea6:	425b      	negs	r3, r3
   1bea8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1beaa:	69bb      	ldr	r3, [r7, #24]
	}
   1beac:	0018      	movs	r0, r3
   1beae:	46bd      	mov	sp, r7
   1beb0:	b009      	add	sp, #36	; 0x24
   1beb2:	bd90      	pop	{r4, r7, pc}
   1beb4:	0001a301 	.word	0x0001a301
   1beb8:	0001a3c5 	.word	0x0001a3c5
   1bebc:	0001bec5 	.word	0x0001bec5
   1bec0:	0001bfd5 	.word	0x0001bfd5

0001bec4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1bec4:	b580      	push	{r7, lr}
   1bec6:	b086      	sub	sp, #24
   1bec8:	af00      	add	r7, sp, #0
   1beca:	60f8      	str	r0, [r7, #12]
   1becc:	60b9      	str	r1, [r7, #8]
   1bece:	607a      	str	r2, [r7, #4]
   1bed0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1bed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bed4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1bed6:	687b      	ldr	r3, [r7, #4]
   1bed8:	009b      	lsls	r3, r3, #2
   1beda:	001a      	movs	r2, r3
   1bedc:	21a5      	movs	r1, #165	; 0xa5
   1bede:	4b39      	ldr	r3, [pc, #228]	; (1bfc4 <prvInitialiseNewTask+0x100>)
   1bee0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1bee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1bee6:	687b      	ldr	r3, [r7, #4]
   1bee8:	4937      	ldr	r1, [pc, #220]	; (1bfc8 <prvInitialiseNewTask+0x104>)
   1beea:	468c      	mov	ip, r1
   1beec:	4463      	add	r3, ip
   1beee:	009b      	lsls	r3, r3, #2
   1bef0:	18d3      	adds	r3, r2, r3
   1bef2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1bef4:	693b      	ldr	r3, [r7, #16]
   1bef6:	2207      	movs	r2, #7
   1bef8:	4393      	bics	r3, r2
   1befa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1befc:	693b      	ldr	r3, [r7, #16]
   1befe:	2207      	movs	r2, #7
   1bf00:	4013      	ands	r3, r2
   1bf02:	d001      	beq.n	1bf08 <prvInitialiseNewTask+0x44>
   1bf04:	b672      	cpsid	i
   1bf06:	e7fe      	b.n	1bf06 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1bf08:	2300      	movs	r3, #0
   1bf0a:	617b      	str	r3, [r7, #20]
   1bf0c:	e013      	b.n	1bf36 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1bf0e:	68ba      	ldr	r2, [r7, #8]
   1bf10:	697b      	ldr	r3, [r7, #20]
   1bf12:	18d3      	adds	r3, r2, r3
   1bf14:	7818      	ldrb	r0, [r3, #0]
   1bf16:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bf18:	2134      	movs	r1, #52	; 0x34
   1bf1a:	697b      	ldr	r3, [r7, #20]
   1bf1c:	18d3      	adds	r3, r2, r3
   1bf1e:	185b      	adds	r3, r3, r1
   1bf20:	1c02      	adds	r2, r0, #0
   1bf22:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1bf24:	68ba      	ldr	r2, [r7, #8]
   1bf26:	697b      	ldr	r3, [r7, #20]
   1bf28:	18d3      	adds	r3, r2, r3
   1bf2a:	781b      	ldrb	r3, [r3, #0]
   1bf2c:	2b00      	cmp	r3, #0
   1bf2e:	d006      	beq.n	1bf3e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1bf30:	697b      	ldr	r3, [r7, #20]
   1bf32:	3301      	adds	r3, #1
   1bf34:	617b      	str	r3, [r7, #20]
   1bf36:	697b      	ldr	r3, [r7, #20]
   1bf38:	2b07      	cmp	r3, #7
   1bf3a:	d9e8      	bls.n	1bf0e <prvInitialiseNewTask+0x4a>
   1bf3c:	e000      	b.n	1bf40 <prvInitialiseNewTask+0x7c>
		{
			break;
   1bf3e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1bf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf42:	223b      	movs	r2, #59	; 0x3b
   1bf44:	2100      	movs	r1, #0
   1bf46:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1bf48:	6a3b      	ldr	r3, [r7, #32]
   1bf4a:	2b04      	cmp	r3, #4
   1bf4c:	d901      	bls.n	1bf52 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1bf4e:	2304      	movs	r3, #4
   1bf50:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1bf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf54:	6a3a      	ldr	r2, [r7, #32]
   1bf56:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1bf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf5a:	6a3a      	ldr	r2, [r7, #32]
   1bf5c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1bf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf60:	2200      	movs	r2, #0
   1bf62:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1bf64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf66:	3304      	adds	r3, #4
   1bf68:	0018      	movs	r0, r3
   1bf6a:	4b18      	ldr	r3, [pc, #96]	; (1bfcc <prvInitialiseNewTask+0x108>)
   1bf6c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1bf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf70:	3318      	adds	r3, #24
   1bf72:	0018      	movs	r0, r3
   1bf74:	4b15      	ldr	r3, [pc, #84]	; (1bfcc <prvInitialiseNewTask+0x108>)
   1bf76:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1bf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bf7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bf7e:	6a3b      	ldr	r3, [r7, #32]
   1bf80:	2205      	movs	r2, #5
   1bf82:	1ad2      	subs	r2, r2, r3
   1bf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bf8c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1bf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf90:	2200      	movs	r2, #0
   1bf92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1bf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf96:	2250      	movs	r2, #80	; 0x50
   1bf98:	2100      	movs	r1, #0
   1bf9a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1bf9c:	683a      	ldr	r2, [r7, #0]
   1bf9e:	68f9      	ldr	r1, [r7, #12]
   1bfa0:	693b      	ldr	r3, [r7, #16]
   1bfa2:	0018      	movs	r0, r3
   1bfa4:	4b0a      	ldr	r3, [pc, #40]	; (1bfd0 <prvInitialiseNewTask+0x10c>)
   1bfa6:	4798      	blx	r3
   1bfa8:	0002      	movs	r2, r0
   1bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bfac:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bfb0:	2b00      	cmp	r3, #0
   1bfb2:	d002      	beq.n	1bfba <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bfb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bfb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1bfba:	46c0      	nop			; (mov r8, r8)
   1bfbc:	46bd      	mov	sp, r7
   1bfbe:	b006      	add	sp, #24
   1bfc0:	bd80      	pop	{r7, pc}
   1bfc2:	46c0      	nop			; (mov r8, r8)
   1bfc4:	00034a5f 	.word	0x00034a5f
   1bfc8:	3fffffff 	.word	0x3fffffff
   1bfcc:	00019f75 	.word	0x00019f75
   1bfd0:	0001a08d 	.word	0x0001a08d

0001bfd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1bfd4:	b580      	push	{r7, lr}
   1bfd6:	b082      	sub	sp, #8
   1bfd8:	af00      	add	r7, sp, #0
   1bfda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1bfdc:	4b60      	ldr	r3, [pc, #384]	; (1c160 <prvAddNewTaskToReadyList+0x18c>)
   1bfde:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1bfe0:	4b60      	ldr	r3, [pc, #384]	; (1c164 <prvAddNewTaskToReadyList+0x190>)
   1bfe2:	681b      	ldr	r3, [r3, #0]
   1bfe4:	1c5a      	adds	r2, r3, #1
   1bfe6:	4b5f      	ldr	r3, [pc, #380]	; (1c164 <prvAddNewTaskToReadyList+0x190>)
   1bfe8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1bfea:	4b5f      	ldr	r3, [pc, #380]	; (1c168 <prvAddNewTaskToReadyList+0x194>)
   1bfec:	681b      	ldr	r3, [r3, #0]
   1bfee:	2b00      	cmp	r3, #0
   1bff0:	d109      	bne.n	1c006 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1bff2:	4b5d      	ldr	r3, [pc, #372]	; (1c168 <prvAddNewTaskToReadyList+0x194>)
   1bff4:	687a      	ldr	r2, [r7, #4]
   1bff6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1bff8:	4b5a      	ldr	r3, [pc, #360]	; (1c164 <prvAddNewTaskToReadyList+0x190>)
   1bffa:	681b      	ldr	r3, [r3, #0]
   1bffc:	2b01      	cmp	r3, #1
   1bffe:	d110      	bne.n	1c022 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1c000:	4b5a      	ldr	r3, [pc, #360]	; (1c16c <prvAddNewTaskToReadyList+0x198>)
   1c002:	4798      	blx	r3
   1c004:	e00d      	b.n	1c022 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1c006:	4b5a      	ldr	r3, [pc, #360]	; (1c170 <prvAddNewTaskToReadyList+0x19c>)
   1c008:	681b      	ldr	r3, [r3, #0]
   1c00a:	2b00      	cmp	r3, #0
   1c00c:	d109      	bne.n	1c022 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1c00e:	4b56      	ldr	r3, [pc, #344]	; (1c168 <prvAddNewTaskToReadyList+0x194>)
   1c010:	681b      	ldr	r3, [r3, #0]
   1c012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c014:	687b      	ldr	r3, [r7, #4]
   1c016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c018:	429a      	cmp	r2, r3
   1c01a:	d802      	bhi.n	1c022 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1c01c:	4b52      	ldr	r3, [pc, #328]	; (1c168 <prvAddNewTaskToReadyList+0x194>)
   1c01e:	687a      	ldr	r2, [r7, #4]
   1c020:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1c022:	4b54      	ldr	r3, [pc, #336]	; (1c174 <prvAddNewTaskToReadyList+0x1a0>)
   1c024:	681b      	ldr	r3, [r3, #0]
   1c026:	1c5a      	adds	r2, r3, #1
   1c028:	4b52      	ldr	r3, [pc, #328]	; (1c174 <prvAddNewTaskToReadyList+0x1a0>)
   1c02a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1c02c:	4b51      	ldr	r3, [pc, #324]	; (1c174 <prvAddNewTaskToReadyList+0x1a0>)
   1c02e:	681a      	ldr	r2, [r3, #0]
   1c030:	687b      	ldr	r3, [r7, #4]
   1c032:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1c034:	687b      	ldr	r3, [r7, #4]
   1c036:	2b00      	cmp	r3, #0
   1c038:	d052      	beq.n	1c0e0 <prvAddNewTaskToReadyList+0x10c>
   1c03a:	2003      	movs	r0, #3
   1c03c:	4b4e      	ldr	r3, [pc, #312]	; (1c178 <prvAddNewTaskToReadyList+0x1a4>)
   1c03e:	4798      	blx	r3
   1c040:	0003      	movs	r3, r0
   1c042:	b29a      	uxth	r2, r3
   1c044:	687b      	ldr	r3, [r7, #4]
   1c046:	0011      	movs	r1, r2
   1c048:	0018      	movs	r0, r3
   1c04a:	4b4c      	ldr	r3, [pc, #304]	; (1c17c <prvAddNewTaskToReadyList+0x1a8>)
   1c04c:	4798      	blx	r3
   1c04e:	4b4c      	ldr	r3, [pc, #304]	; (1c180 <prvAddNewTaskToReadyList+0x1ac>)
   1c050:	881a      	ldrh	r2, [r3, #0]
   1c052:	687b      	ldr	r3, [r7, #4]
   1c054:	0011      	movs	r1, r2
   1c056:	0018      	movs	r0, r3
   1c058:	4b4a      	ldr	r3, [pc, #296]	; (1c184 <prvAddNewTaskToReadyList+0x1b0>)
   1c05a:	4798      	blx	r3
   1c05c:	687b      	ldr	r3, [r7, #4]
   1c05e:	0018      	movs	r0, r3
   1c060:	4b49      	ldr	r3, [pc, #292]	; (1c188 <prvAddNewTaskToReadyList+0x1b4>)
   1c062:	4798      	blx	r3
   1c064:	0003      	movs	r3, r0
   1c066:	b2d9      	uxtb	r1, r3
   1c068:	687b      	ldr	r3, [r7, #4]
   1c06a:	3334      	adds	r3, #52	; 0x34
   1c06c:	001a      	movs	r2, r3
   1c06e:	2003      	movs	r0, #3
   1c070:	4b46      	ldr	r3, [pc, #280]	; (1c18c <prvAddNewTaskToReadyList+0x1b8>)
   1c072:	4798      	blx	r3
   1c074:	687b      	ldr	r3, [r7, #4]
   1c076:	0018      	movs	r0, r3
   1c078:	4b43      	ldr	r3, [pc, #268]	; (1c188 <prvAddNewTaskToReadyList+0x1b4>)
   1c07a:	4798      	blx	r3
   1c07c:	0003      	movs	r3, r0
   1c07e:	b2d9      	uxtb	r1, r3
   1c080:	687b      	ldr	r3, [r7, #4]
   1c082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c084:	b2db      	uxtb	r3, r3
   1c086:	001a      	movs	r2, r3
   1c088:	2003      	movs	r0, #3
   1c08a:	4b41      	ldr	r3, [pc, #260]	; (1c190 <prvAddNewTaskToReadyList+0x1bc>)
   1c08c:	4798      	blx	r3
   1c08e:	4b41      	ldr	r3, [pc, #260]	; (1c194 <prvAddNewTaskToReadyList+0x1c0>)
   1c090:	4798      	blx	r3
   1c092:	0003      	movs	r3, r0
   1c094:	0018      	movs	r0, r3
   1c096:	4b40      	ldr	r3, [pc, #256]	; (1c198 <prvAddNewTaskToReadyList+0x1c4>)
   1c098:	4798      	blx	r3
   1c09a:	0003      	movs	r3, r0
   1c09c:	001a      	movs	r2, r3
   1c09e:	4b3f      	ldr	r3, [pc, #252]	; (1c19c <prvAddNewTaskToReadyList+0x1c8>)
   1c0a0:	881b      	ldrh	r3, [r3, #0]
   1c0a2:	4013      	ands	r3, r2
   1c0a4:	b29b      	uxth	r3, r3
   1c0a6:	2b00      	cmp	r3, #0
   1c0a8:	d016      	beq.n	1c0d8 <prvAddNewTaskToReadyList+0x104>
   1c0aa:	687b      	ldr	r3, [r7, #4]
   1c0ac:	0018      	movs	r0, r3
   1c0ae:	4b3a      	ldr	r3, [pc, #232]	; (1c198 <prvAddNewTaskToReadyList+0x1c4>)
   1c0b0:	4798      	blx	r3
   1c0b2:	0003      	movs	r3, r0
   1c0b4:	001a      	movs	r2, r3
   1c0b6:	4b39      	ldr	r3, [pc, #228]	; (1c19c <prvAddNewTaskToReadyList+0x1c8>)
   1c0b8:	881b      	ldrh	r3, [r3, #0]
   1c0ba:	4013      	ands	r3, r2
   1c0bc:	b29b      	uxth	r3, r3
   1c0be:	2b00      	cmp	r3, #0
   1c0c0:	d00a      	beq.n	1c0d8 <prvAddNewTaskToReadyList+0x104>
   1c0c2:	687b      	ldr	r3, [r7, #4]
   1c0c4:	0018      	movs	r0, r3
   1c0c6:	4b30      	ldr	r3, [pc, #192]	; (1c188 <prvAddNewTaskToReadyList+0x1b4>)
   1c0c8:	4798      	blx	r3
   1c0ca:	0003      	movs	r3, r0
   1c0cc:	b2db      	uxtb	r3, r3
   1c0ce:	001a      	movs	r2, r3
   1c0d0:	2103      	movs	r1, #3
   1c0d2:	201b      	movs	r0, #27
   1c0d4:	4b32      	ldr	r3, [pc, #200]	; (1c1a0 <prvAddNewTaskToReadyList+0x1cc>)
   1c0d6:	4798      	blx	r3
   1c0d8:	687b      	ldr	r3, [r7, #4]
   1c0da:	0018      	movs	r0, r3
   1c0dc:	4b31      	ldr	r3, [pc, #196]	; (1c1a4 <prvAddNewTaskToReadyList+0x1d0>)
   1c0de:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1c0e0:	687b      	ldr	r3, [r7, #4]
   1c0e2:	0018      	movs	r0, r3
   1c0e4:	4b2c      	ldr	r3, [pc, #176]	; (1c198 <prvAddNewTaskToReadyList+0x1c4>)
   1c0e6:	4798      	blx	r3
   1c0e8:	0003      	movs	r3, r0
   1c0ea:	001a      	movs	r2, r3
   1c0ec:	4b2b      	ldr	r3, [pc, #172]	; (1c19c <prvAddNewTaskToReadyList+0x1c8>)
   1c0ee:	881b      	ldrh	r3, [r3, #0]
   1c0f0:	4013      	ands	r3, r2
   1c0f2:	b29b      	uxth	r3, r3
   1c0f4:	2b00      	cmp	r3, #0
   1c0f6:	d008      	beq.n	1c10a <prvAddNewTaskToReadyList+0x136>
   1c0f8:	687b      	ldr	r3, [r7, #4]
   1c0fa:	0018      	movs	r0, r3
   1c0fc:	4b22      	ldr	r3, [pc, #136]	; (1c188 <prvAddNewTaskToReadyList+0x1b4>)
   1c0fe:	4798      	blx	r3
   1c100:	0003      	movs	r3, r0
   1c102:	b2db      	uxtb	r3, r3
   1c104:	0018      	movs	r0, r3
   1c106:	4b28      	ldr	r3, [pc, #160]	; (1c1a8 <prvAddNewTaskToReadyList+0x1d4>)
   1c108:	4798      	blx	r3
   1c10a:	687b      	ldr	r3, [r7, #4]
   1c10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c10e:	4b27      	ldr	r3, [pc, #156]	; (1c1ac <prvAddNewTaskToReadyList+0x1d8>)
   1c110:	681b      	ldr	r3, [r3, #0]
   1c112:	429a      	cmp	r2, r3
   1c114:	d903      	bls.n	1c11e <prvAddNewTaskToReadyList+0x14a>
   1c116:	687b      	ldr	r3, [r7, #4]
   1c118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c11a:	4b24      	ldr	r3, [pc, #144]	; (1c1ac <prvAddNewTaskToReadyList+0x1d8>)
   1c11c:	601a      	str	r2, [r3, #0]
   1c11e:	687b      	ldr	r3, [r7, #4]
   1c120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c122:	0013      	movs	r3, r2
   1c124:	009b      	lsls	r3, r3, #2
   1c126:	189b      	adds	r3, r3, r2
   1c128:	009b      	lsls	r3, r3, #2
   1c12a:	4a21      	ldr	r2, [pc, #132]	; (1c1b0 <prvAddNewTaskToReadyList+0x1dc>)
   1c12c:	189a      	adds	r2, r3, r2
   1c12e:	687b      	ldr	r3, [r7, #4]
   1c130:	3304      	adds	r3, #4
   1c132:	0019      	movs	r1, r3
   1c134:	0010      	movs	r0, r2
   1c136:	4b1f      	ldr	r3, [pc, #124]	; (1c1b4 <prvAddNewTaskToReadyList+0x1e0>)
   1c138:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1c13a:	4b1f      	ldr	r3, [pc, #124]	; (1c1b8 <prvAddNewTaskToReadyList+0x1e4>)
   1c13c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1c13e:	4b0c      	ldr	r3, [pc, #48]	; (1c170 <prvAddNewTaskToReadyList+0x19c>)
   1c140:	681b      	ldr	r3, [r3, #0]
   1c142:	2b00      	cmp	r3, #0
   1c144:	d008      	beq.n	1c158 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1c146:	4b08      	ldr	r3, [pc, #32]	; (1c168 <prvAddNewTaskToReadyList+0x194>)
   1c148:	681b      	ldr	r3, [r3, #0]
   1c14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c14c:	687b      	ldr	r3, [r7, #4]
   1c14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c150:	429a      	cmp	r2, r3
   1c152:	d201      	bcs.n	1c158 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1c154:	4b19      	ldr	r3, [pc, #100]	; (1c1bc <prvAddNewTaskToReadyList+0x1e8>)
   1c156:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c158:	46c0      	nop			; (mov r8, r8)
   1c15a:	46bd      	mov	sp, r7
   1c15c:	b002      	add	sp, #8
   1c15e:	bd80      	pop	{r7, pc}
   1c160:	0001a1c9 	.word	0x0001a1c9
   1c164:	20004034 	.word	0x20004034
   1c168:	20003f5c 	.word	0x20003f5c
   1c16c:	0001ccf5 	.word	0x0001ccf5
   1c170:	20004040 	.word	0x20004040
   1c174:	20004050 	.word	0x20004050
   1c178:	00019741 	.word	0x00019741
   1c17c:	000181e5 	.word	0x000181e5
   1c180:	20000106 	.word	0x20000106
   1c184:	00018221 	.word	0x00018221
   1c188:	000181a1 	.word	0x000181a1
   1c18c:	00019971 	.word	0x00019971
   1c190:	000190d5 	.word	0x000190d5
   1c194:	0001845d 	.word	0x0001845d
   1c198:	000181c1 	.word	0x000181c1
   1c19c:	20000104 	.word	0x20000104
   1c1a0:	00018bb9 	.word	0x00018bb9
   1c1a4:	00018321 	.word	0x00018321
   1c1a8:	00018971 	.word	0x00018971
   1c1ac:	2000403c 	.word	0x2000403c
   1c1b0:	20003f60 	.word	0x20003f60
   1c1b4:	00019f8b 	.word	0x00019f8b
   1c1b8:	0001a1ed 	.word	0x0001a1ed
   1c1bc:	0001a1b1 	.word	0x0001a1b1

0001c1c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1c1c0:	b580      	push	{r7, lr}
   1c1c2:	b084      	sub	sp, #16
   1c1c4:	af00      	add	r7, sp, #0
   1c1c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1c1c8:	2300      	movs	r3, #0
   1c1ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1c1cc:	687b      	ldr	r3, [r7, #4]
   1c1ce:	2b00      	cmp	r3, #0
   1c1d0:	d045      	beq.n	1c25e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1c1d2:	4b27      	ldr	r3, [pc, #156]	; (1c270 <vTaskDelay+0xb0>)
   1c1d4:	681b      	ldr	r3, [r3, #0]
   1c1d6:	2b00      	cmp	r3, #0
   1c1d8:	d001      	beq.n	1c1de <vTaskDelay+0x1e>
   1c1da:	b672      	cpsid	i
   1c1dc:	e7fe      	b.n	1c1dc <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1c1de:	4b25      	ldr	r3, [pc, #148]	; (1c274 <vTaskDelay+0xb4>)
   1c1e0:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1c1e2:	4b25      	ldr	r3, [pc, #148]	; (1c278 <vTaskDelay+0xb8>)
   1c1e4:	681b      	ldr	r3, [r3, #0]
   1c1e6:	0018      	movs	r0, r3
   1c1e8:	4b24      	ldr	r3, [pc, #144]	; (1c27c <vTaskDelay+0xbc>)
   1c1ea:	4798      	blx	r3
   1c1ec:	0003      	movs	r3, r0
   1c1ee:	001a      	movs	r2, r3
   1c1f0:	4b23      	ldr	r3, [pc, #140]	; (1c280 <vTaskDelay+0xc0>)
   1c1f2:	881b      	ldrh	r3, [r3, #0]
   1c1f4:	4013      	ands	r3, r2
   1c1f6:	b29b      	uxth	r3, r3
   1c1f8:	2b00      	cmp	r3, #0
   1c1fa:	d00e      	beq.n	1c21a <vTaskDelay+0x5a>
   1c1fc:	687b      	ldr	r3, [r7, #4]
   1c1fe:	0019      	movs	r1, r3
   1c200:	2089      	movs	r0, #137	; 0x89
   1c202:	4b20      	ldr	r3, [pc, #128]	; (1c284 <vTaskDelay+0xc4>)
   1c204:	4798      	blx	r3
   1c206:	4b1c      	ldr	r3, [pc, #112]	; (1c278 <vTaskDelay+0xb8>)
   1c208:	681b      	ldr	r3, [r3, #0]
   1c20a:	0018      	movs	r0, r3
   1c20c:	4b1e      	ldr	r3, [pc, #120]	; (1c288 <vTaskDelay+0xc8>)
   1c20e:	4798      	blx	r3
   1c210:	0003      	movs	r3, r0
   1c212:	b2db      	uxtb	r3, r3
   1c214:	0018      	movs	r0, r3
   1c216:	4b1d      	ldr	r3, [pc, #116]	; (1c28c <vTaskDelay+0xcc>)
   1c218:	4798      	blx	r3
   1c21a:	4b1d      	ldr	r3, [pc, #116]	; (1c290 <vTaskDelay+0xd0>)
   1c21c:	4798      	blx	r3
   1c21e:	0003      	movs	r3, r0
   1c220:	0018      	movs	r0, r3
   1c222:	4b16      	ldr	r3, [pc, #88]	; (1c27c <vTaskDelay+0xbc>)
   1c224:	4798      	blx	r3
   1c226:	0003      	movs	r3, r0
   1c228:	001a      	movs	r2, r3
   1c22a:	4b15      	ldr	r3, [pc, #84]	; (1c280 <vTaskDelay+0xc0>)
   1c22c:	881b      	ldrh	r3, [r3, #0]
   1c22e:	4013      	ands	r3, r2
   1c230:	b29b      	uxth	r3, r3
   1c232:	2b00      	cmp	r3, #0
   1c234:	d00a      	beq.n	1c24c <vTaskDelay+0x8c>
   1c236:	4b16      	ldr	r3, [pc, #88]	; (1c290 <vTaskDelay+0xd0>)
   1c238:	4798      	blx	r3
   1c23a:	0003      	movs	r3, r0
   1c23c:	0018      	movs	r0, r3
   1c23e:	4b12      	ldr	r3, [pc, #72]	; (1c288 <vTaskDelay+0xc8>)
   1c240:	4798      	blx	r3
   1c242:	0003      	movs	r3, r0
   1c244:	b2db      	uxtb	r3, r3
   1c246:	0018      	movs	r0, r3
   1c248:	4b10      	ldr	r3, [pc, #64]	; (1c28c <vTaskDelay+0xcc>)
   1c24a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1c24c:	687b      	ldr	r3, [r7, #4]
   1c24e:	2100      	movs	r1, #0
   1c250:	0018      	movs	r0, r3
   1c252:	4b10      	ldr	r3, [pc, #64]	; (1c294 <vTaskDelay+0xd4>)
   1c254:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1c256:	4b10      	ldr	r3, [pc, #64]	; (1c298 <vTaskDelay+0xd8>)
   1c258:	4798      	blx	r3
   1c25a:	0003      	movs	r3, r0
   1c25c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1c25e:	68fb      	ldr	r3, [r7, #12]
   1c260:	2b00      	cmp	r3, #0
   1c262:	d101      	bne.n	1c268 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1c264:	4b0d      	ldr	r3, [pc, #52]	; (1c29c <vTaskDelay+0xdc>)
   1c266:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c268:	46c0      	nop			; (mov r8, r8)
   1c26a:	46bd      	mov	sp, r7
   1c26c:	b004      	add	sp, #16
   1c26e:	bd80      	pop	{r7, pc}
   1c270:	2000405c 	.word	0x2000405c
   1c274:	0001c481 	.word	0x0001c481
   1c278:	20003f5c 	.word	0x20003f5c
   1c27c:	000181c1 	.word	0x000181c1
   1c280:	20000104 	.word	0x20000104
   1c284:	00018ec1 	.word	0x00018ec1
   1c288:	000181a1 	.word	0x000181a1
   1c28c:	00019351 	.word	0x00019351
   1c290:	0001845d 	.word	0x0001845d
   1c294:	0001d3d9 	.word	0x0001d3d9
   1c298:	0001c499 	.word	0x0001c499
   1c29c:	0001a1b1 	.word	0x0001a1b1

0001c2a0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1c2a0:	b580      	push	{r7, lr}
   1c2a2:	b084      	sub	sp, #16
   1c2a4:	af00      	add	r7, sp, #0
   1c2a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1c2a8:	4b42      	ldr	r3, [pc, #264]	; (1c3b4 <vTaskSuspend+0x114>)
   1c2aa:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1c2ac:	687b      	ldr	r3, [r7, #4]
   1c2ae:	2b00      	cmp	r3, #0
   1c2b0:	d102      	bne.n	1c2b8 <vTaskSuspend+0x18>
   1c2b2:	4b41      	ldr	r3, [pc, #260]	; (1c3b8 <vTaskSuspend+0x118>)
   1c2b4:	681b      	ldr	r3, [r3, #0]
   1c2b6:	e000      	b.n	1c2ba <vTaskSuspend+0x1a>
   1c2b8:	687b      	ldr	r3, [r7, #4]
   1c2ba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1c2bc:	4b3f      	ldr	r3, [pc, #252]	; (1c3bc <vTaskSuspend+0x11c>)
   1c2be:	4798      	blx	r3
   1c2c0:	0003      	movs	r3, r0
   1c2c2:	0018      	movs	r0, r3
   1c2c4:	4b3e      	ldr	r3, [pc, #248]	; (1c3c0 <vTaskSuspend+0x120>)
   1c2c6:	4798      	blx	r3
   1c2c8:	0003      	movs	r3, r0
   1c2ca:	001a      	movs	r2, r3
   1c2cc:	4b3d      	ldr	r3, [pc, #244]	; (1c3c4 <vTaskSuspend+0x124>)
   1c2ce:	881b      	ldrh	r3, [r3, #0]
   1c2d0:	4013      	ands	r3, r2
   1c2d2:	b29b      	uxth	r3, r3
   1c2d4:	2b00      	cmp	r3, #0
   1c2d6:	d016      	beq.n	1c306 <vTaskSuspend+0x66>
   1c2d8:	68fb      	ldr	r3, [r7, #12]
   1c2da:	0018      	movs	r0, r3
   1c2dc:	4b38      	ldr	r3, [pc, #224]	; (1c3c0 <vTaskSuspend+0x120>)
   1c2de:	4798      	blx	r3
   1c2e0:	0003      	movs	r3, r0
   1c2e2:	001a      	movs	r2, r3
   1c2e4:	4b37      	ldr	r3, [pc, #220]	; (1c3c4 <vTaskSuspend+0x124>)
   1c2e6:	881b      	ldrh	r3, [r3, #0]
   1c2e8:	4013      	ands	r3, r2
   1c2ea:	b29b      	uxth	r3, r3
   1c2ec:	2b00      	cmp	r3, #0
   1c2ee:	d00a      	beq.n	1c306 <vTaskSuspend+0x66>
   1c2f0:	68fb      	ldr	r3, [r7, #12]
   1c2f2:	0018      	movs	r0, r3
   1c2f4:	4b34      	ldr	r3, [pc, #208]	; (1c3c8 <vTaskSuspend+0x128>)
   1c2f6:	4798      	blx	r3
   1c2f8:	0003      	movs	r3, r0
   1c2fa:	b2db      	uxtb	r3, r3
   1c2fc:	001a      	movs	r2, r3
   1c2fe:	2103      	movs	r1, #3
   1c300:	208a      	movs	r0, #138	; 0x8a
   1c302:	4b32      	ldr	r3, [pc, #200]	; (1c3cc <vTaskSuspend+0x12c>)
   1c304:	4798      	blx	r3
   1c306:	68fb      	ldr	r3, [r7, #12]
   1c308:	0018      	movs	r0, r3
   1c30a:	4b2f      	ldr	r3, [pc, #188]	; (1c3c8 <vTaskSuspend+0x128>)
   1c30c:	4798      	blx	r3
   1c30e:	0003      	movs	r3, r0
   1c310:	b2db      	uxtb	r3, r3
   1c312:	0018      	movs	r0, r3
   1c314:	4b2e      	ldr	r3, [pc, #184]	; (1c3d0 <vTaskSuspend+0x130>)
   1c316:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c318:	68fb      	ldr	r3, [r7, #12]
   1c31a:	3304      	adds	r3, #4
   1c31c:	0018      	movs	r0, r3
   1c31e:	4b2d      	ldr	r3, [pc, #180]	; (1c3d4 <vTaskSuspend+0x134>)
   1c320:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c322:	68fb      	ldr	r3, [r7, #12]
   1c324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c326:	2b00      	cmp	r3, #0
   1c328:	d004      	beq.n	1c334 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c32a:	68fb      	ldr	r3, [r7, #12]
   1c32c:	3318      	adds	r3, #24
   1c32e:	0018      	movs	r0, r3
   1c330:	4b28      	ldr	r3, [pc, #160]	; (1c3d4 <vTaskSuspend+0x134>)
   1c332:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1c334:	68fb      	ldr	r3, [r7, #12]
   1c336:	1d1a      	adds	r2, r3, #4
   1c338:	4b27      	ldr	r3, [pc, #156]	; (1c3d8 <vTaskSuspend+0x138>)
   1c33a:	0011      	movs	r1, r2
   1c33c:	0018      	movs	r0, r3
   1c33e:	4b27      	ldr	r3, [pc, #156]	; (1c3dc <vTaskSuspend+0x13c>)
   1c340:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1c342:	68fb      	ldr	r3, [r7, #12]
   1c344:	2250      	movs	r2, #80	; 0x50
   1c346:	5c9b      	ldrb	r3, [r3, r2]
   1c348:	b2db      	uxtb	r3, r3
   1c34a:	2b01      	cmp	r3, #1
   1c34c:	d103      	bne.n	1c356 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c34e:	68fb      	ldr	r3, [r7, #12]
   1c350:	2250      	movs	r2, #80	; 0x50
   1c352:	2100      	movs	r1, #0
   1c354:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1c356:	4b22      	ldr	r3, [pc, #136]	; (1c3e0 <vTaskSuspend+0x140>)
   1c358:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1c35a:	4b22      	ldr	r3, [pc, #136]	; (1c3e4 <vTaskSuspend+0x144>)
   1c35c:	681b      	ldr	r3, [r3, #0]
   1c35e:	2b00      	cmp	r3, #0
   1c360:	d005      	beq.n	1c36e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1c362:	4b14      	ldr	r3, [pc, #80]	; (1c3b4 <vTaskSuspend+0x114>)
   1c364:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1c366:	4b20      	ldr	r3, [pc, #128]	; (1c3e8 <vTaskSuspend+0x148>)
   1c368:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1c36a:	4b1d      	ldr	r3, [pc, #116]	; (1c3e0 <vTaskSuspend+0x140>)
   1c36c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1c36e:	4b12      	ldr	r3, [pc, #72]	; (1c3b8 <vTaskSuspend+0x118>)
   1c370:	681b      	ldr	r3, [r3, #0]
   1c372:	68fa      	ldr	r2, [r7, #12]
   1c374:	429a      	cmp	r2, r3
   1c376:	d118      	bne.n	1c3aa <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1c378:	4b1a      	ldr	r3, [pc, #104]	; (1c3e4 <vTaskSuspend+0x144>)
   1c37a:	681b      	ldr	r3, [r3, #0]
   1c37c:	2b00      	cmp	r3, #0
   1c37e:	d008      	beq.n	1c392 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1c380:	4b1a      	ldr	r3, [pc, #104]	; (1c3ec <vTaskSuspend+0x14c>)
   1c382:	681b      	ldr	r3, [r3, #0]
   1c384:	2b00      	cmp	r3, #0
   1c386:	d001      	beq.n	1c38c <vTaskSuspend+0xec>
   1c388:	b672      	cpsid	i
   1c38a:	e7fe      	b.n	1c38a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1c38c:	4b18      	ldr	r3, [pc, #96]	; (1c3f0 <vTaskSuspend+0x150>)
   1c38e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c390:	e00b      	b.n	1c3aa <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1c392:	4b11      	ldr	r3, [pc, #68]	; (1c3d8 <vTaskSuspend+0x138>)
   1c394:	681a      	ldr	r2, [r3, #0]
   1c396:	4b17      	ldr	r3, [pc, #92]	; (1c3f4 <vTaskSuspend+0x154>)
   1c398:	681b      	ldr	r3, [r3, #0]
   1c39a:	429a      	cmp	r2, r3
   1c39c:	d103      	bne.n	1c3a6 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1c39e:	4b06      	ldr	r3, [pc, #24]	; (1c3b8 <vTaskSuspend+0x118>)
   1c3a0:	2200      	movs	r2, #0
   1c3a2:	601a      	str	r2, [r3, #0]
	}
   1c3a4:	e001      	b.n	1c3aa <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1c3a6:	4b14      	ldr	r3, [pc, #80]	; (1c3f8 <vTaskSuspend+0x158>)
   1c3a8:	4798      	blx	r3
	}
   1c3aa:	46c0      	nop			; (mov r8, r8)
   1c3ac:	46bd      	mov	sp, r7
   1c3ae:	b004      	add	sp, #16
   1c3b0:	bd80      	pop	{r7, pc}
   1c3b2:	46c0      	nop			; (mov r8, r8)
   1c3b4:	0001a1c9 	.word	0x0001a1c9
   1c3b8:	20003f5c 	.word	0x20003f5c
   1c3bc:	0001845d 	.word	0x0001845d
   1c3c0:	000181c1 	.word	0x000181c1
   1c3c4:	20000104 	.word	0x20000104
   1c3c8:	000181a1 	.word	0x000181a1
   1c3cc:	00018bb9 	.word	0x00018bb9
   1c3d0:	00019351 	.word	0x00019351
   1c3d4:	0001a03b 	.word	0x0001a03b
   1c3d8:	20004020 	.word	0x20004020
   1c3dc:	00019f8b 	.word	0x00019f8b
   1c3e0:	0001a1ed 	.word	0x0001a1ed
   1c3e4:	20004040 	.word	0x20004040
   1c3e8:	0001ce85 	.word	0x0001ce85
   1c3ec:	2000405c 	.word	0x2000405c
   1c3f0:	0001a1b1 	.word	0x0001a1b1
   1c3f4:	20004034 	.word	0x20004034
   1c3f8:	0001c815 	.word	0x0001c815

0001c3fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1c3fc:	b590      	push	{r4, r7, lr}
   1c3fe:	b085      	sub	sp, #20
   1c400:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1c402:	4916      	ldr	r1, [pc, #88]	; (1c45c <vTaskStartScheduler+0x60>)
   1c404:	4816      	ldr	r0, [pc, #88]	; (1c460 <vTaskStartScheduler+0x64>)
   1c406:	4b17      	ldr	r3, [pc, #92]	; (1c464 <vTaskStartScheduler+0x68>)
   1c408:	9301      	str	r3, [sp, #4]
   1c40a:	2300      	movs	r3, #0
   1c40c:	9300      	str	r3, [sp, #0]
   1c40e:	2300      	movs	r3, #0
   1c410:	2296      	movs	r2, #150	; 0x96
   1c412:	4c15      	ldr	r4, [pc, #84]	; (1c468 <vTaskStartScheduler+0x6c>)
   1c414:	47a0      	blx	r4
   1c416:	0003      	movs	r3, r0
   1c418:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1c41a:	687b      	ldr	r3, [r7, #4]
   1c41c:	2b01      	cmp	r3, #1
   1c41e:	d103      	bne.n	1c428 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1c420:	4b12      	ldr	r3, [pc, #72]	; (1c46c <vTaskStartScheduler+0x70>)
   1c422:	4798      	blx	r3
   1c424:	0003      	movs	r3, r0
   1c426:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1c428:	687b      	ldr	r3, [r7, #4]
   1c42a:	2b01      	cmp	r3, #1
   1c42c:	d10d      	bne.n	1c44a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1c42e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1c430:	4b0f      	ldr	r3, [pc, #60]	; (1c470 <vTaskStartScheduler+0x74>)
   1c432:	2201      	movs	r2, #1
   1c434:	4252      	negs	r2, r2
   1c436:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1c438:	4b0e      	ldr	r3, [pc, #56]	; (1c474 <vTaskStartScheduler+0x78>)
   1c43a:	2201      	movs	r2, #1
   1c43c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1c43e:	4b0e      	ldr	r3, [pc, #56]	; (1c478 <vTaskStartScheduler+0x7c>)
   1c440:	2200      	movs	r2, #0
   1c442:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1c444:	4b0d      	ldr	r3, [pc, #52]	; (1c47c <vTaskStartScheduler+0x80>)
   1c446:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1c448:	e004      	b.n	1c454 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1c44a:	687b      	ldr	r3, [r7, #4]
   1c44c:	3301      	adds	r3, #1
   1c44e:	d101      	bne.n	1c454 <vTaskStartScheduler+0x58>
   1c450:	b672      	cpsid	i
   1c452:	e7fe      	b.n	1c452 <vTaskStartScheduler+0x56>
}
   1c454:	46c0      	nop			; (mov r8, r8)
   1c456:	46bd      	mov	sp, r7
   1c458:	b003      	add	sp, #12
   1c45a:	bd90      	pop	{r4, r7, pc}
   1c45c:	00038384 	.word	0x00038384
   1c460:	0001cccd 	.word	0x0001cccd
   1c464:	20004058 	.word	0x20004058
   1c468:	0001be25 	.word	0x0001be25
   1c46c:	0001d48d 	.word	0x0001d48d
   1c470:	20004054 	.word	0x20004054
   1c474:	20004040 	.word	0x20004040
   1c478:	20004038 	.word	0x20004038
   1c47c:	0001a159 	.word	0x0001a159

0001c480 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1c480:	b580      	push	{r7, lr}
   1c482:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1c484:	4b03      	ldr	r3, [pc, #12]	; (1c494 <vTaskSuspendAll+0x14>)
   1c486:	681b      	ldr	r3, [r3, #0]
   1c488:	1c5a      	adds	r2, r3, #1
   1c48a:	4b02      	ldr	r3, [pc, #8]	; (1c494 <vTaskSuspendAll+0x14>)
   1c48c:	601a      	str	r2, [r3, #0]
}
   1c48e:	46c0      	nop			; (mov r8, r8)
   1c490:	46bd      	mov	sp, r7
   1c492:	bd80      	pop	{r7, pc}
   1c494:	2000405c 	.word	0x2000405c

0001c498 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1c498:	b580      	push	{r7, lr}
   1c49a:	b084      	sub	sp, #16
   1c49c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1c49e:	2300      	movs	r3, #0
   1c4a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1c4a2:	2300      	movs	r3, #0
   1c4a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1c4a6:	4b45      	ldr	r3, [pc, #276]	; (1c5bc <xTaskResumeAll+0x124>)
   1c4a8:	681b      	ldr	r3, [r3, #0]
   1c4aa:	2b00      	cmp	r3, #0
   1c4ac:	d101      	bne.n	1c4b2 <xTaskResumeAll+0x1a>
   1c4ae:	b672      	cpsid	i
   1c4b0:	e7fe      	b.n	1c4b0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1c4b2:	4b43      	ldr	r3, [pc, #268]	; (1c5c0 <xTaskResumeAll+0x128>)
   1c4b4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1c4b6:	4b41      	ldr	r3, [pc, #260]	; (1c5bc <xTaskResumeAll+0x124>)
   1c4b8:	681b      	ldr	r3, [r3, #0]
   1c4ba:	1e5a      	subs	r2, r3, #1
   1c4bc:	4b3f      	ldr	r3, [pc, #252]	; (1c5bc <xTaskResumeAll+0x124>)
   1c4be:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c4c0:	4b3e      	ldr	r3, [pc, #248]	; (1c5bc <xTaskResumeAll+0x124>)
   1c4c2:	681b      	ldr	r3, [r3, #0]
   1c4c4:	2b00      	cmp	r3, #0
   1c4c6:	d000      	beq.n	1c4ca <xTaskResumeAll+0x32>
   1c4c8:	e071      	b.n	1c5ae <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1c4ca:	4b3e      	ldr	r3, [pc, #248]	; (1c5c4 <xTaskResumeAll+0x12c>)
   1c4cc:	681b      	ldr	r3, [r3, #0]
   1c4ce:	2b00      	cmp	r3, #0
   1c4d0:	d100      	bne.n	1c4d4 <xTaskResumeAll+0x3c>
   1c4d2:	e06c      	b.n	1c5ae <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c4d4:	e044      	b.n	1c560 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1c4d6:	4b3c      	ldr	r3, [pc, #240]	; (1c5c8 <xTaskResumeAll+0x130>)
   1c4d8:	68db      	ldr	r3, [r3, #12]
   1c4da:	68db      	ldr	r3, [r3, #12]
   1c4dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c4de:	68fb      	ldr	r3, [r7, #12]
   1c4e0:	3318      	adds	r3, #24
   1c4e2:	0018      	movs	r0, r3
   1c4e4:	4b39      	ldr	r3, [pc, #228]	; (1c5cc <xTaskResumeAll+0x134>)
   1c4e6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c4e8:	68fb      	ldr	r3, [r7, #12]
   1c4ea:	3304      	adds	r3, #4
   1c4ec:	0018      	movs	r0, r3
   1c4ee:	4b37      	ldr	r3, [pc, #220]	; (1c5cc <xTaskResumeAll+0x134>)
   1c4f0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1c4f2:	68fb      	ldr	r3, [r7, #12]
   1c4f4:	0018      	movs	r0, r3
   1c4f6:	4b36      	ldr	r3, [pc, #216]	; (1c5d0 <xTaskResumeAll+0x138>)
   1c4f8:	4798      	blx	r3
   1c4fa:	0003      	movs	r3, r0
   1c4fc:	001a      	movs	r2, r3
   1c4fe:	4b35      	ldr	r3, [pc, #212]	; (1c5d4 <xTaskResumeAll+0x13c>)
   1c500:	881b      	ldrh	r3, [r3, #0]
   1c502:	4013      	ands	r3, r2
   1c504:	b29b      	uxth	r3, r3
   1c506:	2b00      	cmp	r3, #0
   1c508:	d008      	beq.n	1c51c <xTaskResumeAll+0x84>
   1c50a:	68fb      	ldr	r3, [r7, #12]
   1c50c:	0018      	movs	r0, r3
   1c50e:	4b32      	ldr	r3, [pc, #200]	; (1c5d8 <xTaskResumeAll+0x140>)
   1c510:	4798      	blx	r3
   1c512:	0003      	movs	r3, r0
   1c514:	b2db      	uxtb	r3, r3
   1c516:	0018      	movs	r0, r3
   1c518:	4b30      	ldr	r3, [pc, #192]	; (1c5dc <xTaskResumeAll+0x144>)
   1c51a:	4798      	blx	r3
   1c51c:	68fb      	ldr	r3, [r7, #12]
   1c51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c520:	4b2f      	ldr	r3, [pc, #188]	; (1c5e0 <xTaskResumeAll+0x148>)
   1c522:	681b      	ldr	r3, [r3, #0]
   1c524:	429a      	cmp	r2, r3
   1c526:	d903      	bls.n	1c530 <xTaskResumeAll+0x98>
   1c528:	68fb      	ldr	r3, [r7, #12]
   1c52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c52c:	4b2c      	ldr	r3, [pc, #176]	; (1c5e0 <xTaskResumeAll+0x148>)
   1c52e:	601a      	str	r2, [r3, #0]
   1c530:	68fb      	ldr	r3, [r7, #12]
   1c532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c534:	0013      	movs	r3, r2
   1c536:	009b      	lsls	r3, r3, #2
   1c538:	189b      	adds	r3, r3, r2
   1c53a:	009b      	lsls	r3, r3, #2
   1c53c:	4a29      	ldr	r2, [pc, #164]	; (1c5e4 <xTaskResumeAll+0x14c>)
   1c53e:	189a      	adds	r2, r3, r2
   1c540:	68fb      	ldr	r3, [r7, #12]
   1c542:	3304      	adds	r3, #4
   1c544:	0019      	movs	r1, r3
   1c546:	0010      	movs	r0, r2
   1c548:	4b27      	ldr	r3, [pc, #156]	; (1c5e8 <xTaskResumeAll+0x150>)
   1c54a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c54c:	68fb      	ldr	r3, [r7, #12]
   1c54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c550:	4b26      	ldr	r3, [pc, #152]	; (1c5ec <xTaskResumeAll+0x154>)
   1c552:	681b      	ldr	r3, [r3, #0]
   1c554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c556:	429a      	cmp	r2, r3
   1c558:	d302      	bcc.n	1c560 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1c55a:	4b25      	ldr	r3, [pc, #148]	; (1c5f0 <xTaskResumeAll+0x158>)
   1c55c:	2201      	movs	r2, #1
   1c55e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c560:	4b19      	ldr	r3, [pc, #100]	; (1c5c8 <xTaskResumeAll+0x130>)
   1c562:	681b      	ldr	r3, [r3, #0]
   1c564:	2b00      	cmp	r3, #0
   1c566:	d1b6      	bne.n	1c4d6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1c568:	68fb      	ldr	r3, [r7, #12]
   1c56a:	2b00      	cmp	r3, #0
   1c56c:	d001      	beq.n	1c572 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1c56e:	4b21      	ldr	r3, [pc, #132]	; (1c5f4 <xTaskResumeAll+0x15c>)
   1c570:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1c572:	4b21      	ldr	r3, [pc, #132]	; (1c5f8 <xTaskResumeAll+0x160>)
   1c574:	681b      	ldr	r3, [r3, #0]
   1c576:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1c578:	687b      	ldr	r3, [r7, #4]
   1c57a:	2b00      	cmp	r3, #0
   1c57c:	d00f      	beq.n	1c59e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1c57e:	4b1f      	ldr	r3, [pc, #124]	; (1c5fc <xTaskResumeAll+0x164>)
   1c580:	4798      	blx	r3
   1c582:	1e03      	subs	r3, r0, #0
   1c584:	d002      	beq.n	1c58c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1c586:	4b1a      	ldr	r3, [pc, #104]	; (1c5f0 <xTaskResumeAll+0x158>)
   1c588:	2201      	movs	r2, #1
   1c58a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1c58c:	687b      	ldr	r3, [r7, #4]
   1c58e:	3b01      	subs	r3, #1
   1c590:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1c592:	687b      	ldr	r3, [r7, #4]
   1c594:	2b00      	cmp	r3, #0
   1c596:	d1f2      	bne.n	1c57e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1c598:	4b17      	ldr	r3, [pc, #92]	; (1c5f8 <xTaskResumeAll+0x160>)
   1c59a:	2200      	movs	r2, #0
   1c59c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1c59e:	4b14      	ldr	r3, [pc, #80]	; (1c5f0 <xTaskResumeAll+0x158>)
   1c5a0:	681b      	ldr	r3, [r3, #0]
   1c5a2:	2b00      	cmp	r3, #0
   1c5a4:	d003      	beq.n	1c5ae <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1c5a6:	2301      	movs	r3, #1
   1c5a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1c5aa:	4b15      	ldr	r3, [pc, #84]	; (1c600 <xTaskResumeAll+0x168>)
   1c5ac:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1c5ae:	4b15      	ldr	r3, [pc, #84]	; (1c604 <xTaskResumeAll+0x16c>)
   1c5b0:	4798      	blx	r3

	return xAlreadyYielded;
   1c5b2:	68bb      	ldr	r3, [r7, #8]
}
   1c5b4:	0018      	movs	r0, r3
   1c5b6:	46bd      	mov	sp, r7
   1c5b8:	b004      	add	sp, #16
   1c5ba:	bd80      	pop	{r7, pc}
   1c5bc:	2000405c 	.word	0x2000405c
   1c5c0:	0001a1c9 	.word	0x0001a1c9
   1c5c4:	20004034 	.word	0x20004034
   1c5c8:	20003ff4 	.word	0x20003ff4
   1c5cc:	0001a03b 	.word	0x0001a03b
   1c5d0:	000181c1 	.word	0x000181c1
   1c5d4:	20000104 	.word	0x20000104
   1c5d8:	000181a1 	.word	0x000181a1
   1c5dc:	00018971 	.word	0x00018971
   1c5e0:	2000403c 	.word	0x2000403c
   1c5e4:	20003f60 	.word	0x20003f60
   1c5e8:	00019f8b 	.word	0x00019f8b
   1c5ec:	20003f5c 	.word	0x20003f5c
   1c5f0:	20004048 	.word	0x20004048
   1c5f4:	0001ce85 	.word	0x0001ce85
   1c5f8:	20004044 	.word	0x20004044
   1c5fc:	0001c625 	.word	0x0001c625
   1c600:	0001a1b1 	.word	0x0001a1b1
   1c604:	0001a1ed 	.word	0x0001a1ed

0001c608 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1c608:	b580      	push	{r7, lr}
   1c60a:	b082      	sub	sp, #8
   1c60c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1c60e:	4b04      	ldr	r3, [pc, #16]	; (1c620 <xTaskGetTickCount+0x18>)
   1c610:	681b      	ldr	r3, [r3, #0]
   1c612:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1c614:	687b      	ldr	r3, [r7, #4]
}
   1c616:	0018      	movs	r0, r3
   1c618:	46bd      	mov	sp, r7
   1c61a:	b002      	add	sp, #8
   1c61c:	bd80      	pop	{r7, pc}
   1c61e:	46c0      	nop			; (mov r8, r8)
   1c620:	20004038 	.word	0x20004038

0001c624 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1c624:	b580      	push	{r7, lr}
   1c626:	b086      	sub	sp, #24
   1c628:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1c62a:	2300      	movs	r3, #0
   1c62c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1c62e:	4b64      	ldr	r3, [pc, #400]	; (1c7c0 <xTaskIncrementTick+0x19c>)
   1c630:	681b      	ldr	r3, [r3, #0]
   1c632:	2b01      	cmp	r3, #1
   1c634:	d003      	beq.n	1c63e <xTaskIncrementTick+0x1a>
   1c636:	4b63      	ldr	r3, [pc, #396]	; (1c7c4 <xTaskIncrementTick+0x1a0>)
   1c638:	681b      	ldr	r3, [r3, #0]
   1c63a:	2b00      	cmp	r3, #0
   1c63c:	d107      	bne.n	1c64e <xTaskIncrementTick+0x2a>
   1c63e:	4b62      	ldr	r3, [pc, #392]	; (1c7c8 <xTaskIncrementTick+0x1a4>)
   1c640:	681b      	ldr	r3, [r3, #0]
   1c642:	1c5a      	adds	r2, r3, #1
   1c644:	4b60      	ldr	r3, [pc, #384]	; (1c7c8 <xTaskIncrementTick+0x1a4>)
   1c646:	601a      	str	r2, [r3, #0]
   1c648:	2000      	movs	r0, #0
   1c64a:	4b60      	ldr	r3, [pc, #384]	; (1c7cc <xTaskIncrementTick+0x1a8>)
   1c64c:	4798      	blx	r3
   1c64e:	4b5c      	ldr	r3, [pc, #368]	; (1c7c0 <xTaskIncrementTick+0x19c>)
   1c650:	681b      	ldr	r3, [r3, #0]
   1c652:	2b00      	cmp	r3, #0
   1c654:	d106      	bne.n	1c664 <xTaskIncrementTick+0x40>
   1c656:	4b5e      	ldr	r3, [pc, #376]	; (1c7d0 <xTaskIncrementTick+0x1ac>)
   1c658:	681b      	ldr	r3, [r3, #0]
   1c65a:	3301      	adds	r3, #1
   1c65c:	0019      	movs	r1, r3
   1c65e:	2003      	movs	r0, #3
   1c660:	4b5c      	ldr	r3, [pc, #368]	; (1c7d4 <xTaskIncrementTick+0x1b0>)
   1c662:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c664:	4b56      	ldr	r3, [pc, #344]	; (1c7c0 <xTaskIncrementTick+0x19c>)
   1c666:	681b      	ldr	r3, [r3, #0]
   1c668:	2b00      	cmp	r3, #0
   1c66a:	d000      	beq.n	1c66e <xTaskIncrementTick+0x4a>
   1c66c:	e098      	b.n	1c7a0 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1c66e:	4b58      	ldr	r3, [pc, #352]	; (1c7d0 <xTaskIncrementTick+0x1ac>)
   1c670:	681b      	ldr	r3, [r3, #0]
   1c672:	3301      	adds	r3, #1
   1c674:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1c676:	4b56      	ldr	r3, [pc, #344]	; (1c7d0 <xTaskIncrementTick+0x1ac>)
   1c678:	693a      	ldr	r2, [r7, #16]
   1c67a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1c67c:	693b      	ldr	r3, [r7, #16]
   1c67e:	2b00      	cmp	r3, #0
   1c680:	d117      	bne.n	1c6b2 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1c682:	4b55      	ldr	r3, [pc, #340]	; (1c7d8 <xTaskIncrementTick+0x1b4>)
   1c684:	681b      	ldr	r3, [r3, #0]
   1c686:	681b      	ldr	r3, [r3, #0]
   1c688:	2b00      	cmp	r3, #0
   1c68a:	d001      	beq.n	1c690 <xTaskIncrementTick+0x6c>
   1c68c:	b672      	cpsid	i
   1c68e:	e7fe      	b.n	1c68e <xTaskIncrementTick+0x6a>
   1c690:	4b51      	ldr	r3, [pc, #324]	; (1c7d8 <xTaskIncrementTick+0x1b4>)
   1c692:	681b      	ldr	r3, [r3, #0]
   1c694:	60fb      	str	r3, [r7, #12]
   1c696:	4b51      	ldr	r3, [pc, #324]	; (1c7dc <xTaskIncrementTick+0x1b8>)
   1c698:	681a      	ldr	r2, [r3, #0]
   1c69a:	4b4f      	ldr	r3, [pc, #316]	; (1c7d8 <xTaskIncrementTick+0x1b4>)
   1c69c:	601a      	str	r2, [r3, #0]
   1c69e:	4b4f      	ldr	r3, [pc, #316]	; (1c7dc <xTaskIncrementTick+0x1b8>)
   1c6a0:	68fa      	ldr	r2, [r7, #12]
   1c6a2:	601a      	str	r2, [r3, #0]
   1c6a4:	4b4e      	ldr	r3, [pc, #312]	; (1c7e0 <xTaskIncrementTick+0x1bc>)
   1c6a6:	681b      	ldr	r3, [r3, #0]
   1c6a8:	1c5a      	adds	r2, r3, #1
   1c6aa:	4b4d      	ldr	r3, [pc, #308]	; (1c7e0 <xTaskIncrementTick+0x1bc>)
   1c6ac:	601a      	str	r2, [r3, #0]
   1c6ae:	4b4d      	ldr	r3, [pc, #308]	; (1c7e4 <xTaskIncrementTick+0x1c0>)
   1c6b0:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1c6b2:	4b4d      	ldr	r3, [pc, #308]	; (1c7e8 <xTaskIncrementTick+0x1c4>)
   1c6b4:	681b      	ldr	r3, [r3, #0]
   1c6b6:	693a      	ldr	r2, [r7, #16]
   1c6b8:	429a      	cmp	r2, r3
   1c6ba:	d363      	bcc.n	1c784 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c6bc:	4b46      	ldr	r3, [pc, #280]	; (1c7d8 <xTaskIncrementTick+0x1b4>)
   1c6be:	681b      	ldr	r3, [r3, #0]
   1c6c0:	681b      	ldr	r3, [r3, #0]
   1c6c2:	2b00      	cmp	r3, #0
   1c6c4:	d101      	bne.n	1c6ca <xTaskIncrementTick+0xa6>
   1c6c6:	2301      	movs	r3, #1
   1c6c8:	e000      	b.n	1c6cc <xTaskIncrementTick+0xa8>
   1c6ca:	2300      	movs	r3, #0
   1c6cc:	2b00      	cmp	r3, #0
   1c6ce:	d004      	beq.n	1c6da <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c6d0:	4b45      	ldr	r3, [pc, #276]	; (1c7e8 <xTaskIncrementTick+0x1c4>)
   1c6d2:	2201      	movs	r2, #1
   1c6d4:	4252      	negs	r2, r2
   1c6d6:	601a      	str	r2, [r3, #0]
					break;
   1c6d8:	e054      	b.n	1c784 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1c6da:	4b3f      	ldr	r3, [pc, #252]	; (1c7d8 <xTaskIncrementTick+0x1b4>)
   1c6dc:	681b      	ldr	r3, [r3, #0]
   1c6de:	68db      	ldr	r3, [r3, #12]
   1c6e0:	68db      	ldr	r3, [r3, #12]
   1c6e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1c6e4:	68bb      	ldr	r3, [r7, #8]
   1c6e6:	685b      	ldr	r3, [r3, #4]
   1c6e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1c6ea:	693a      	ldr	r2, [r7, #16]
   1c6ec:	687b      	ldr	r3, [r7, #4]
   1c6ee:	429a      	cmp	r2, r3
   1c6f0:	d203      	bcs.n	1c6fa <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1c6f2:	4b3d      	ldr	r3, [pc, #244]	; (1c7e8 <xTaskIncrementTick+0x1c4>)
   1c6f4:	687a      	ldr	r2, [r7, #4]
   1c6f6:	601a      	str	r2, [r3, #0]
						break;
   1c6f8:	e044      	b.n	1c784 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c6fa:	68bb      	ldr	r3, [r7, #8]
   1c6fc:	3304      	adds	r3, #4
   1c6fe:	0018      	movs	r0, r3
   1c700:	4b3a      	ldr	r3, [pc, #232]	; (1c7ec <xTaskIncrementTick+0x1c8>)
   1c702:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c704:	68bb      	ldr	r3, [r7, #8]
   1c706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c708:	2b00      	cmp	r3, #0
   1c70a:	d004      	beq.n	1c716 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c70c:	68bb      	ldr	r3, [r7, #8]
   1c70e:	3318      	adds	r3, #24
   1c710:	0018      	movs	r0, r3
   1c712:	4b36      	ldr	r3, [pc, #216]	; (1c7ec <xTaskIncrementTick+0x1c8>)
   1c714:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1c716:	68bb      	ldr	r3, [r7, #8]
   1c718:	0018      	movs	r0, r3
   1c71a:	4b35      	ldr	r3, [pc, #212]	; (1c7f0 <xTaskIncrementTick+0x1cc>)
   1c71c:	4798      	blx	r3
   1c71e:	0003      	movs	r3, r0
   1c720:	001a      	movs	r2, r3
   1c722:	4b34      	ldr	r3, [pc, #208]	; (1c7f4 <xTaskIncrementTick+0x1d0>)
   1c724:	881b      	ldrh	r3, [r3, #0]
   1c726:	4013      	ands	r3, r2
   1c728:	b29b      	uxth	r3, r3
   1c72a:	2b00      	cmp	r3, #0
   1c72c:	d008      	beq.n	1c740 <xTaskIncrementTick+0x11c>
   1c72e:	68bb      	ldr	r3, [r7, #8]
   1c730:	0018      	movs	r0, r3
   1c732:	4b31      	ldr	r3, [pc, #196]	; (1c7f8 <xTaskIncrementTick+0x1d4>)
   1c734:	4798      	blx	r3
   1c736:	0003      	movs	r3, r0
   1c738:	b2db      	uxtb	r3, r3
   1c73a:	0018      	movs	r0, r3
   1c73c:	4b2f      	ldr	r3, [pc, #188]	; (1c7fc <xTaskIncrementTick+0x1d8>)
   1c73e:	4798      	blx	r3
   1c740:	68bb      	ldr	r3, [r7, #8]
   1c742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c744:	4b2e      	ldr	r3, [pc, #184]	; (1c800 <xTaskIncrementTick+0x1dc>)
   1c746:	681b      	ldr	r3, [r3, #0]
   1c748:	429a      	cmp	r2, r3
   1c74a:	d903      	bls.n	1c754 <xTaskIncrementTick+0x130>
   1c74c:	68bb      	ldr	r3, [r7, #8]
   1c74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c750:	4b2b      	ldr	r3, [pc, #172]	; (1c800 <xTaskIncrementTick+0x1dc>)
   1c752:	601a      	str	r2, [r3, #0]
   1c754:	68bb      	ldr	r3, [r7, #8]
   1c756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c758:	0013      	movs	r3, r2
   1c75a:	009b      	lsls	r3, r3, #2
   1c75c:	189b      	adds	r3, r3, r2
   1c75e:	009b      	lsls	r3, r3, #2
   1c760:	4a28      	ldr	r2, [pc, #160]	; (1c804 <xTaskIncrementTick+0x1e0>)
   1c762:	189a      	adds	r2, r3, r2
   1c764:	68bb      	ldr	r3, [r7, #8]
   1c766:	3304      	adds	r3, #4
   1c768:	0019      	movs	r1, r3
   1c76a:	0010      	movs	r0, r2
   1c76c:	4b26      	ldr	r3, [pc, #152]	; (1c808 <xTaskIncrementTick+0x1e4>)
   1c76e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c770:	68bb      	ldr	r3, [r7, #8]
   1c772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c774:	4b25      	ldr	r3, [pc, #148]	; (1c80c <xTaskIncrementTick+0x1e8>)
   1c776:	681b      	ldr	r3, [r3, #0]
   1c778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c77a:	429a      	cmp	r2, r3
   1c77c:	d39e      	bcc.n	1c6bc <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1c77e:	2301      	movs	r3, #1
   1c780:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c782:	e79b      	b.n	1c6bc <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1c784:	4b21      	ldr	r3, [pc, #132]	; (1c80c <xTaskIncrementTick+0x1e8>)
   1c786:	681b      	ldr	r3, [r3, #0]
   1c788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c78a:	491e      	ldr	r1, [pc, #120]	; (1c804 <xTaskIncrementTick+0x1e0>)
   1c78c:	0013      	movs	r3, r2
   1c78e:	009b      	lsls	r3, r3, #2
   1c790:	189b      	adds	r3, r3, r2
   1c792:	009b      	lsls	r3, r3, #2
   1c794:	585b      	ldr	r3, [r3, r1]
   1c796:	2b01      	cmp	r3, #1
   1c798:	d907      	bls.n	1c7aa <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1c79a:	2301      	movs	r3, #1
   1c79c:	617b      	str	r3, [r7, #20]
   1c79e:	e004      	b.n	1c7aa <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1c7a0:	4b08      	ldr	r3, [pc, #32]	; (1c7c4 <xTaskIncrementTick+0x1a0>)
   1c7a2:	681b      	ldr	r3, [r3, #0]
   1c7a4:	1c5a      	adds	r2, r3, #1
   1c7a6:	4b07      	ldr	r3, [pc, #28]	; (1c7c4 <xTaskIncrementTick+0x1a0>)
   1c7a8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1c7aa:	4b19      	ldr	r3, [pc, #100]	; (1c810 <xTaskIncrementTick+0x1ec>)
   1c7ac:	681b      	ldr	r3, [r3, #0]
   1c7ae:	2b00      	cmp	r3, #0
   1c7b0:	d001      	beq.n	1c7b6 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1c7b2:	2301      	movs	r3, #1
   1c7b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1c7b6:	697b      	ldr	r3, [r7, #20]
}
   1c7b8:	0018      	movs	r0, r3
   1c7ba:	46bd      	mov	sp, r7
   1c7bc:	b006      	add	sp, #24
   1c7be:	bd80      	pop	{r7, pc}
   1c7c0:	2000405c 	.word	0x2000405c
   1c7c4:	20004044 	.word	0x20004044
   1c7c8:	20000bbc 	.word	0x20000bbc
   1c7cc:	00019e55 	.word	0x00019e55
   1c7d0:	20004038 	.word	0x20004038
   1c7d4:	00018ec1 	.word	0x00018ec1
   1c7d8:	20003fec 	.word	0x20003fec
   1c7dc:	20003ff0 	.word	0x20003ff0
   1c7e0:	2000404c 	.word	0x2000404c
   1c7e4:	0001ce85 	.word	0x0001ce85
   1c7e8:	20004054 	.word	0x20004054
   1c7ec:	0001a03b 	.word	0x0001a03b
   1c7f0:	000181c1 	.word	0x000181c1
   1c7f4:	20000104 	.word	0x20000104
   1c7f8:	000181a1 	.word	0x000181a1
   1c7fc:	00018971 	.word	0x00018971
   1c800:	2000403c 	.word	0x2000403c
   1c804:	20003f60 	.word	0x20003f60
   1c808:	00019f8b 	.word	0x00019f8b
   1c80c:	20003f5c 	.word	0x20003f5c
   1c810:	20004048 	.word	0x20004048

0001c814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1c814:	b580      	push	{r7, lr}
   1c816:	b082      	sub	sp, #8
   1c818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1c81a:	4b3a      	ldr	r3, [pc, #232]	; (1c904 <vTaskSwitchContext+0xf0>)
   1c81c:	681b      	ldr	r3, [r3, #0]
   1c81e:	2b00      	cmp	r3, #0
   1c820:	d003      	beq.n	1c82a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1c822:	4b39      	ldr	r3, [pc, #228]	; (1c908 <vTaskSwitchContext+0xf4>)
   1c824:	2201      	movs	r2, #1
   1c826:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1c828:	e067      	b.n	1c8fa <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1c82a:	4b37      	ldr	r3, [pc, #220]	; (1c908 <vTaskSwitchContext+0xf4>)
   1c82c:	2200      	movs	r2, #0
   1c82e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1c830:	4b36      	ldr	r3, [pc, #216]	; (1c90c <vTaskSwitchContext+0xf8>)
   1c832:	681b      	ldr	r3, [r3, #0]
   1c834:	681a      	ldr	r2, [r3, #0]
   1c836:	4b35      	ldr	r3, [pc, #212]	; (1c90c <vTaskSwitchContext+0xf8>)
   1c838:	681b      	ldr	r3, [r3, #0]
   1c83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c83c:	429a      	cmp	r2, r3
   1c83e:	d808      	bhi.n	1c852 <vTaskSwitchContext+0x3e>
   1c840:	4b32      	ldr	r3, [pc, #200]	; (1c90c <vTaskSwitchContext+0xf8>)
   1c842:	681a      	ldr	r2, [r3, #0]
   1c844:	4b31      	ldr	r3, [pc, #196]	; (1c90c <vTaskSwitchContext+0xf8>)
   1c846:	681b      	ldr	r3, [r3, #0]
   1c848:	3334      	adds	r3, #52	; 0x34
   1c84a:	0019      	movs	r1, r3
   1c84c:	0010      	movs	r0, r2
   1c84e:	4b30      	ldr	r3, [pc, #192]	; (1c910 <vTaskSwitchContext+0xfc>)
   1c850:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1c852:	4b30      	ldr	r3, [pc, #192]	; (1c914 <vTaskSwitchContext+0x100>)
   1c854:	681b      	ldr	r3, [r3, #0]
   1c856:	607b      	str	r3, [r7, #4]
   1c858:	e007      	b.n	1c86a <vTaskSwitchContext+0x56>
   1c85a:	687b      	ldr	r3, [r7, #4]
   1c85c:	2b00      	cmp	r3, #0
   1c85e:	d101      	bne.n	1c864 <vTaskSwitchContext+0x50>
   1c860:	b672      	cpsid	i
   1c862:	e7fe      	b.n	1c862 <vTaskSwitchContext+0x4e>
   1c864:	687b      	ldr	r3, [r7, #4]
   1c866:	3b01      	subs	r3, #1
   1c868:	607b      	str	r3, [r7, #4]
   1c86a:	492b      	ldr	r1, [pc, #172]	; (1c918 <vTaskSwitchContext+0x104>)
   1c86c:	687a      	ldr	r2, [r7, #4]
   1c86e:	0013      	movs	r3, r2
   1c870:	009b      	lsls	r3, r3, #2
   1c872:	189b      	adds	r3, r3, r2
   1c874:	009b      	lsls	r3, r3, #2
   1c876:	585b      	ldr	r3, [r3, r1]
   1c878:	2b00      	cmp	r3, #0
   1c87a:	d0ee      	beq.n	1c85a <vTaskSwitchContext+0x46>
   1c87c:	687a      	ldr	r2, [r7, #4]
   1c87e:	0013      	movs	r3, r2
   1c880:	009b      	lsls	r3, r3, #2
   1c882:	189b      	adds	r3, r3, r2
   1c884:	009b      	lsls	r3, r3, #2
   1c886:	4a24      	ldr	r2, [pc, #144]	; (1c918 <vTaskSwitchContext+0x104>)
   1c888:	189b      	adds	r3, r3, r2
   1c88a:	603b      	str	r3, [r7, #0]
   1c88c:	683b      	ldr	r3, [r7, #0]
   1c88e:	685b      	ldr	r3, [r3, #4]
   1c890:	685a      	ldr	r2, [r3, #4]
   1c892:	683b      	ldr	r3, [r7, #0]
   1c894:	605a      	str	r2, [r3, #4]
   1c896:	683b      	ldr	r3, [r7, #0]
   1c898:	685a      	ldr	r2, [r3, #4]
   1c89a:	683b      	ldr	r3, [r7, #0]
   1c89c:	3308      	adds	r3, #8
   1c89e:	429a      	cmp	r2, r3
   1c8a0:	d104      	bne.n	1c8ac <vTaskSwitchContext+0x98>
   1c8a2:	683b      	ldr	r3, [r7, #0]
   1c8a4:	685b      	ldr	r3, [r3, #4]
   1c8a6:	685a      	ldr	r2, [r3, #4]
   1c8a8:	683b      	ldr	r3, [r7, #0]
   1c8aa:	605a      	str	r2, [r3, #4]
   1c8ac:	683b      	ldr	r3, [r7, #0]
   1c8ae:	685b      	ldr	r3, [r3, #4]
   1c8b0:	68da      	ldr	r2, [r3, #12]
   1c8b2:	4b16      	ldr	r3, [pc, #88]	; (1c90c <vTaskSwitchContext+0xf8>)
   1c8b4:	601a      	str	r2, [r3, #0]
   1c8b6:	4b17      	ldr	r3, [pc, #92]	; (1c914 <vTaskSwitchContext+0x100>)
   1c8b8:	687a      	ldr	r2, [r7, #4]
   1c8ba:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1c8bc:	4b17      	ldr	r3, [pc, #92]	; (1c91c <vTaskSwitchContext+0x108>)
   1c8be:	2201      	movs	r2, #1
   1c8c0:	601a      	str	r2, [r3, #0]
   1c8c2:	4b17      	ldr	r3, [pc, #92]	; (1c920 <vTaskSwitchContext+0x10c>)
   1c8c4:	4798      	blx	r3
   1c8c6:	0003      	movs	r3, r0
   1c8c8:	0018      	movs	r0, r3
   1c8ca:	4b16      	ldr	r3, [pc, #88]	; (1c924 <vTaskSwitchContext+0x110>)
   1c8cc:	4798      	blx	r3
   1c8ce:	0003      	movs	r3, r0
   1c8d0:	001a      	movs	r2, r3
   1c8d2:	4b15      	ldr	r3, [pc, #84]	; (1c928 <vTaskSwitchContext+0x114>)
   1c8d4:	881b      	ldrh	r3, [r3, #0]
   1c8d6:	4013      	ands	r3, r2
   1c8d8:	b29b      	uxth	r3, r3
   1c8da:	2b00      	cmp	r3, #0
   1c8dc:	d00a      	beq.n	1c8f4 <vTaskSwitchContext+0xe0>
   1c8de:	4b10      	ldr	r3, [pc, #64]	; (1c920 <vTaskSwitchContext+0x10c>)
   1c8e0:	4798      	blx	r3
   1c8e2:	0003      	movs	r3, r0
   1c8e4:	0018      	movs	r0, r3
   1c8e6:	4b11      	ldr	r3, [pc, #68]	; (1c92c <vTaskSwitchContext+0x118>)
   1c8e8:	4798      	blx	r3
   1c8ea:	0003      	movs	r3, r0
   1c8ec:	b2db      	uxtb	r3, r3
   1c8ee:	0018      	movs	r0, r3
   1c8f0:	4b0f      	ldr	r3, [pc, #60]	; (1c930 <vTaskSwitchContext+0x11c>)
   1c8f2:	4798      	blx	r3
   1c8f4:	4b09      	ldr	r3, [pc, #36]	; (1c91c <vTaskSwitchContext+0x108>)
   1c8f6:	2202      	movs	r2, #2
   1c8f8:	601a      	str	r2, [r3, #0]
}
   1c8fa:	46c0      	nop			; (mov r8, r8)
   1c8fc:	46bd      	mov	sp, r7
   1c8fe:	b002      	add	sp, #8
   1c900:	bd80      	pop	{r7, pc}
   1c902:	46c0      	nop			; (mov r8, r8)
   1c904:	2000405c 	.word	0x2000405c
   1c908:	20004048 	.word	0x20004048
   1c90c:	20003f5c 	.word	0x20003f5c
   1c910:	00032a6d 	.word	0x00032a6d
   1c914:	2000403c 	.word	0x2000403c
   1c918:	20003f60 	.word	0x20003f60
   1c91c:	20000bc8 	.word	0x20000bc8
   1c920:	0001845d 	.word	0x0001845d
   1c924:	000181c1 	.word	0x000181c1
   1c928:	20000104 	.word	0x20000104
   1c92c:	000181a1 	.word	0x000181a1
   1c930:	00018fbd 	.word	0x00018fbd

0001c934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1c934:	b580      	push	{r7, lr}
   1c936:	b082      	sub	sp, #8
   1c938:	af00      	add	r7, sp, #0
   1c93a:	6078      	str	r0, [r7, #4]
   1c93c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1c93e:	687b      	ldr	r3, [r7, #4]
   1c940:	2b00      	cmp	r3, #0
   1c942:	d101      	bne.n	1c948 <vTaskPlaceOnEventList+0x14>
   1c944:	b672      	cpsid	i
   1c946:	e7fe      	b.n	1c946 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c948:	4b08      	ldr	r3, [pc, #32]	; (1c96c <vTaskPlaceOnEventList+0x38>)
   1c94a:	681b      	ldr	r3, [r3, #0]
   1c94c:	3318      	adds	r3, #24
   1c94e:	001a      	movs	r2, r3
   1c950:	687b      	ldr	r3, [r7, #4]
   1c952:	0011      	movs	r1, r2
   1c954:	0018      	movs	r0, r3
   1c956:	4b06      	ldr	r3, [pc, #24]	; (1c970 <vTaskPlaceOnEventList+0x3c>)
   1c958:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1c95a:	683b      	ldr	r3, [r7, #0]
   1c95c:	2101      	movs	r1, #1
   1c95e:	0018      	movs	r0, r3
   1c960:	4b04      	ldr	r3, [pc, #16]	; (1c974 <vTaskPlaceOnEventList+0x40>)
   1c962:	4798      	blx	r3
}
   1c964:	46c0      	nop			; (mov r8, r8)
   1c966:	46bd      	mov	sp, r7
   1c968:	b002      	add	sp, #8
   1c96a:	bd80      	pop	{r7, pc}
   1c96c:	20003f5c 	.word	0x20003f5c
   1c970:	00019fcf 	.word	0x00019fcf
   1c974:	0001d3d9 	.word	0x0001d3d9

0001c978 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c978:	b580      	push	{r7, lr}
   1c97a:	b084      	sub	sp, #16
   1c97c:	af00      	add	r7, sp, #0
   1c97e:	60f8      	str	r0, [r7, #12]
   1c980:	60b9      	str	r1, [r7, #8]
   1c982:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1c984:	68fb      	ldr	r3, [r7, #12]
   1c986:	2b00      	cmp	r3, #0
   1c988:	d101      	bne.n	1c98e <vTaskPlaceOnEventListRestricted+0x16>
   1c98a:	b672      	cpsid	i
   1c98c:	e7fe      	b.n	1c98c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c98e:	4b28      	ldr	r3, [pc, #160]	; (1ca30 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c990:	681b      	ldr	r3, [r3, #0]
   1c992:	3318      	adds	r3, #24
   1c994:	001a      	movs	r2, r3
   1c996:	68fb      	ldr	r3, [r7, #12]
   1c998:	0011      	movs	r1, r2
   1c99a:	0018      	movs	r0, r3
   1c99c:	4b25      	ldr	r3, [pc, #148]	; (1ca34 <vTaskPlaceOnEventListRestricted+0xbc>)
   1c99e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1c9a0:	687b      	ldr	r3, [r7, #4]
   1c9a2:	2b00      	cmp	r3, #0
   1c9a4:	d002      	beq.n	1c9ac <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1c9a6:	2301      	movs	r3, #1
   1c9a8:	425b      	negs	r3, r3
   1c9aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1c9ac:	4b20      	ldr	r3, [pc, #128]	; (1ca30 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c9ae:	681b      	ldr	r3, [r3, #0]
   1c9b0:	0018      	movs	r0, r3
   1c9b2:	4b21      	ldr	r3, [pc, #132]	; (1ca38 <vTaskPlaceOnEventListRestricted+0xc0>)
   1c9b4:	4798      	blx	r3
   1c9b6:	0003      	movs	r3, r0
   1c9b8:	001a      	movs	r2, r3
   1c9ba:	4b20      	ldr	r3, [pc, #128]	; (1ca3c <vTaskPlaceOnEventListRestricted+0xc4>)
   1c9bc:	881b      	ldrh	r3, [r3, #0]
   1c9be:	4013      	ands	r3, r2
   1c9c0:	b29b      	uxth	r3, r3
   1c9c2:	2b00      	cmp	r3, #0
   1c9c4:	d011      	beq.n	1c9ea <vTaskPlaceOnEventListRestricted+0x72>
   1c9c6:	4b1e      	ldr	r3, [pc, #120]	; (1ca40 <vTaskPlaceOnEventListRestricted+0xc8>)
   1c9c8:	681a      	ldr	r2, [r3, #0]
   1c9ca:	68bb      	ldr	r3, [r7, #8]
   1c9cc:	18d3      	adds	r3, r2, r3
   1c9ce:	0019      	movs	r1, r3
   1c9d0:	2088      	movs	r0, #136	; 0x88
   1c9d2:	4b1c      	ldr	r3, [pc, #112]	; (1ca44 <vTaskPlaceOnEventListRestricted+0xcc>)
   1c9d4:	4798      	blx	r3
   1c9d6:	4b16      	ldr	r3, [pc, #88]	; (1ca30 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c9d8:	681b      	ldr	r3, [r3, #0]
   1c9da:	0018      	movs	r0, r3
   1c9dc:	4b1a      	ldr	r3, [pc, #104]	; (1ca48 <vTaskPlaceOnEventListRestricted+0xd0>)
   1c9de:	4798      	blx	r3
   1c9e0:	0003      	movs	r3, r0
   1c9e2:	b2db      	uxtb	r3, r3
   1c9e4:	0018      	movs	r0, r3
   1c9e6:	4b19      	ldr	r3, [pc, #100]	; (1ca4c <vTaskPlaceOnEventListRestricted+0xd4>)
   1c9e8:	4798      	blx	r3
   1c9ea:	4b19      	ldr	r3, [pc, #100]	; (1ca50 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c9ec:	4798      	blx	r3
   1c9ee:	0003      	movs	r3, r0
   1c9f0:	0018      	movs	r0, r3
   1c9f2:	4b11      	ldr	r3, [pc, #68]	; (1ca38 <vTaskPlaceOnEventListRestricted+0xc0>)
   1c9f4:	4798      	blx	r3
   1c9f6:	0003      	movs	r3, r0
   1c9f8:	001a      	movs	r2, r3
   1c9fa:	4b10      	ldr	r3, [pc, #64]	; (1ca3c <vTaskPlaceOnEventListRestricted+0xc4>)
   1c9fc:	881b      	ldrh	r3, [r3, #0]
   1c9fe:	4013      	ands	r3, r2
   1ca00:	b29b      	uxth	r3, r3
   1ca02:	2b00      	cmp	r3, #0
   1ca04:	d00a      	beq.n	1ca1c <vTaskPlaceOnEventListRestricted+0xa4>
   1ca06:	4b12      	ldr	r3, [pc, #72]	; (1ca50 <vTaskPlaceOnEventListRestricted+0xd8>)
   1ca08:	4798      	blx	r3
   1ca0a:	0003      	movs	r3, r0
   1ca0c:	0018      	movs	r0, r3
   1ca0e:	4b0e      	ldr	r3, [pc, #56]	; (1ca48 <vTaskPlaceOnEventListRestricted+0xd0>)
   1ca10:	4798      	blx	r3
   1ca12:	0003      	movs	r3, r0
   1ca14:	b2db      	uxtb	r3, r3
   1ca16:	0018      	movs	r0, r3
   1ca18:	4b0c      	ldr	r3, [pc, #48]	; (1ca4c <vTaskPlaceOnEventListRestricted+0xd4>)
   1ca1a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1ca1c:	687a      	ldr	r2, [r7, #4]
   1ca1e:	68bb      	ldr	r3, [r7, #8]
   1ca20:	0011      	movs	r1, r2
   1ca22:	0018      	movs	r0, r3
   1ca24:	4b0b      	ldr	r3, [pc, #44]	; (1ca54 <vTaskPlaceOnEventListRestricted+0xdc>)
   1ca26:	4798      	blx	r3
	}
   1ca28:	46c0      	nop			; (mov r8, r8)
   1ca2a:	46bd      	mov	sp, r7
   1ca2c:	b004      	add	sp, #16
   1ca2e:	bd80      	pop	{r7, pc}
   1ca30:	20003f5c 	.word	0x20003f5c
   1ca34:	00019f8b 	.word	0x00019f8b
   1ca38:	000181c1 	.word	0x000181c1
   1ca3c:	20000104 	.word	0x20000104
   1ca40:	20004038 	.word	0x20004038
   1ca44:	00018ec1 	.word	0x00018ec1
   1ca48:	000181a1 	.word	0x000181a1
   1ca4c:	00019351 	.word	0x00019351
   1ca50:	0001845d 	.word	0x0001845d
   1ca54:	0001d3d9 	.word	0x0001d3d9

0001ca58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1ca58:	b580      	push	{r7, lr}
   1ca5a:	b084      	sub	sp, #16
   1ca5c:	af00      	add	r7, sp, #0
   1ca5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1ca60:	687b      	ldr	r3, [r7, #4]
   1ca62:	68db      	ldr	r3, [r3, #12]
   1ca64:	68db      	ldr	r3, [r3, #12]
   1ca66:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1ca68:	68bb      	ldr	r3, [r7, #8]
   1ca6a:	2b00      	cmp	r3, #0
   1ca6c:	d101      	bne.n	1ca72 <xTaskRemoveFromEventList+0x1a>
   1ca6e:	b672      	cpsid	i
   1ca70:	e7fe      	b.n	1ca70 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1ca72:	68bb      	ldr	r3, [r7, #8]
   1ca74:	3318      	adds	r3, #24
   1ca76:	0018      	movs	r0, r3
   1ca78:	4b2a      	ldr	r3, [pc, #168]	; (1cb24 <xTaskRemoveFromEventList+0xcc>)
   1ca7a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ca7c:	4b2a      	ldr	r3, [pc, #168]	; (1cb28 <xTaskRemoveFromEventList+0xd0>)
   1ca7e:	681b      	ldr	r3, [r3, #0]
   1ca80:	2b00      	cmp	r3, #0
   1ca82:	d132      	bne.n	1caea <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1ca84:	68bb      	ldr	r3, [r7, #8]
   1ca86:	3304      	adds	r3, #4
   1ca88:	0018      	movs	r0, r3
   1ca8a:	4b26      	ldr	r3, [pc, #152]	; (1cb24 <xTaskRemoveFromEventList+0xcc>)
   1ca8c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1ca8e:	68bb      	ldr	r3, [r7, #8]
   1ca90:	0018      	movs	r0, r3
   1ca92:	4b26      	ldr	r3, [pc, #152]	; (1cb2c <xTaskRemoveFromEventList+0xd4>)
   1ca94:	4798      	blx	r3
   1ca96:	0003      	movs	r3, r0
   1ca98:	001a      	movs	r2, r3
   1ca9a:	4b25      	ldr	r3, [pc, #148]	; (1cb30 <xTaskRemoveFromEventList+0xd8>)
   1ca9c:	881b      	ldrh	r3, [r3, #0]
   1ca9e:	4013      	ands	r3, r2
   1caa0:	b29b      	uxth	r3, r3
   1caa2:	2b00      	cmp	r3, #0
   1caa4:	d008      	beq.n	1cab8 <xTaskRemoveFromEventList+0x60>
   1caa6:	68bb      	ldr	r3, [r7, #8]
   1caa8:	0018      	movs	r0, r3
   1caaa:	4b22      	ldr	r3, [pc, #136]	; (1cb34 <xTaskRemoveFromEventList+0xdc>)
   1caac:	4798      	blx	r3
   1caae:	0003      	movs	r3, r0
   1cab0:	b2db      	uxtb	r3, r3
   1cab2:	0018      	movs	r0, r3
   1cab4:	4b20      	ldr	r3, [pc, #128]	; (1cb38 <xTaskRemoveFromEventList+0xe0>)
   1cab6:	4798      	blx	r3
   1cab8:	68bb      	ldr	r3, [r7, #8]
   1caba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cabc:	4b1f      	ldr	r3, [pc, #124]	; (1cb3c <xTaskRemoveFromEventList+0xe4>)
   1cabe:	681b      	ldr	r3, [r3, #0]
   1cac0:	429a      	cmp	r2, r3
   1cac2:	d903      	bls.n	1cacc <xTaskRemoveFromEventList+0x74>
   1cac4:	68bb      	ldr	r3, [r7, #8]
   1cac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cac8:	4b1c      	ldr	r3, [pc, #112]	; (1cb3c <xTaskRemoveFromEventList+0xe4>)
   1caca:	601a      	str	r2, [r3, #0]
   1cacc:	68bb      	ldr	r3, [r7, #8]
   1cace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cad0:	0013      	movs	r3, r2
   1cad2:	009b      	lsls	r3, r3, #2
   1cad4:	189b      	adds	r3, r3, r2
   1cad6:	009b      	lsls	r3, r3, #2
   1cad8:	4a19      	ldr	r2, [pc, #100]	; (1cb40 <xTaskRemoveFromEventList+0xe8>)
   1cada:	189a      	adds	r2, r3, r2
   1cadc:	68bb      	ldr	r3, [r7, #8]
   1cade:	3304      	adds	r3, #4
   1cae0:	0019      	movs	r1, r3
   1cae2:	0010      	movs	r0, r2
   1cae4:	4b17      	ldr	r3, [pc, #92]	; (1cb44 <xTaskRemoveFromEventList+0xec>)
   1cae6:	4798      	blx	r3
   1cae8:	e007      	b.n	1cafa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1caea:	68bb      	ldr	r3, [r7, #8]
   1caec:	3318      	adds	r3, #24
   1caee:	001a      	movs	r2, r3
   1caf0:	4b15      	ldr	r3, [pc, #84]	; (1cb48 <xTaskRemoveFromEventList+0xf0>)
   1caf2:	0011      	movs	r1, r2
   1caf4:	0018      	movs	r0, r3
   1caf6:	4b13      	ldr	r3, [pc, #76]	; (1cb44 <xTaskRemoveFromEventList+0xec>)
   1caf8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1cafa:	68bb      	ldr	r3, [r7, #8]
   1cafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cafe:	4b13      	ldr	r3, [pc, #76]	; (1cb4c <xTaskRemoveFromEventList+0xf4>)
   1cb00:	681b      	ldr	r3, [r3, #0]
   1cb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cb04:	429a      	cmp	r2, r3
   1cb06:	d905      	bls.n	1cb14 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1cb08:	2301      	movs	r3, #1
   1cb0a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1cb0c:	4b10      	ldr	r3, [pc, #64]	; (1cb50 <xTaskRemoveFromEventList+0xf8>)
   1cb0e:	2201      	movs	r2, #1
   1cb10:	601a      	str	r2, [r3, #0]
   1cb12:	e001      	b.n	1cb18 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1cb14:	2300      	movs	r3, #0
   1cb16:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1cb18:	68fb      	ldr	r3, [r7, #12]
}
   1cb1a:	0018      	movs	r0, r3
   1cb1c:	46bd      	mov	sp, r7
   1cb1e:	b004      	add	sp, #16
   1cb20:	bd80      	pop	{r7, pc}
   1cb22:	46c0      	nop			; (mov r8, r8)
   1cb24:	0001a03b 	.word	0x0001a03b
   1cb28:	2000405c 	.word	0x2000405c
   1cb2c:	000181c1 	.word	0x000181c1
   1cb30:	20000104 	.word	0x20000104
   1cb34:	000181a1 	.word	0x000181a1
   1cb38:	00018971 	.word	0x00018971
   1cb3c:	2000403c 	.word	0x2000403c
   1cb40:	20003f60 	.word	0x20003f60
   1cb44:	00019f8b 	.word	0x00019f8b
   1cb48:	20003ff4 	.word	0x20003ff4
   1cb4c:	20003f5c 	.word	0x20003f5c
   1cb50:	20004048 	.word	0x20004048

0001cb54 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1cb54:	b580      	push	{r7, lr}
   1cb56:	b082      	sub	sp, #8
   1cb58:	af00      	add	r7, sp, #0
   1cb5a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1cb5c:	687b      	ldr	r3, [r7, #4]
   1cb5e:	2b00      	cmp	r3, #0
   1cb60:	d101      	bne.n	1cb66 <vTaskSetTimeOutState+0x12>
   1cb62:	b672      	cpsid	i
   1cb64:	e7fe      	b.n	1cb64 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1cb66:	4b08      	ldr	r3, [pc, #32]	; (1cb88 <vTaskSetTimeOutState+0x34>)
   1cb68:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1cb6a:	4b08      	ldr	r3, [pc, #32]	; (1cb8c <vTaskSetTimeOutState+0x38>)
   1cb6c:	681a      	ldr	r2, [r3, #0]
   1cb6e:	687b      	ldr	r3, [r7, #4]
   1cb70:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1cb72:	4b07      	ldr	r3, [pc, #28]	; (1cb90 <vTaskSetTimeOutState+0x3c>)
   1cb74:	681a      	ldr	r2, [r3, #0]
   1cb76:	687b      	ldr	r3, [r7, #4]
   1cb78:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1cb7a:	4b06      	ldr	r3, [pc, #24]	; (1cb94 <vTaskSetTimeOutState+0x40>)
   1cb7c:	4798      	blx	r3
}
   1cb7e:	46c0      	nop			; (mov r8, r8)
   1cb80:	46bd      	mov	sp, r7
   1cb82:	b002      	add	sp, #8
   1cb84:	bd80      	pop	{r7, pc}
   1cb86:	46c0      	nop			; (mov r8, r8)
   1cb88:	0001a1c9 	.word	0x0001a1c9
   1cb8c:	2000404c 	.word	0x2000404c
   1cb90:	20004038 	.word	0x20004038
   1cb94:	0001a1ed 	.word	0x0001a1ed

0001cb98 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1cb98:	b580      	push	{r7, lr}
   1cb9a:	b082      	sub	sp, #8
   1cb9c:	af00      	add	r7, sp, #0
   1cb9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1cba0:	4b05      	ldr	r3, [pc, #20]	; (1cbb8 <vTaskInternalSetTimeOutState+0x20>)
   1cba2:	681a      	ldr	r2, [r3, #0]
   1cba4:	687b      	ldr	r3, [r7, #4]
   1cba6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1cba8:	4b04      	ldr	r3, [pc, #16]	; (1cbbc <vTaskInternalSetTimeOutState+0x24>)
   1cbaa:	681a      	ldr	r2, [r3, #0]
   1cbac:	687b      	ldr	r3, [r7, #4]
   1cbae:	605a      	str	r2, [r3, #4]
}
   1cbb0:	46c0      	nop			; (mov r8, r8)
   1cbb2:	46bd      	mov	sp, r7
   1cbb4:	b002      	add	sp, #8
   1cbb6:	bd80      	pop	{r7, pc}
   1cbb8:	2000404c 	.word	0x2000404c
   1cbbc:	20004038 	.word	0x20004038

0001cbc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1cbc0:	b580      	push	{r7, lr}
   1cbc2:	b086      	sub	sp, #24
   1cbc4:	af00      	add	r7, sp, #0
   1cbc6:	6078      	str	r0, [r7, #4]
   1cbc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1cbca:	687b      	ldr	r3, [r7, #4]
   1cbcc:	2b00      	cmp	r3, #0
   1cbce:	d101      	bne.n	1cbd4 <xTaskCheckForTimeOut+0x14>
   1cbd0:	b672      	cpsid	i
   1cbd2:	e7fe      	b.n	1cbd2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1cbd4:	683b      	ldr	r3, [r7, #0]
   1cbd6:	2b00      	cmp	r3, #0
   1cbd8:	d101      	bne.n	1cbde <xTaskCheckForTimeOut+0x1e>
   1cbda:	b672      	cpsid	i
   1cbdc:	e7fe      	b.n	1cbdc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1cbde:	4b1e      	ldr	r3, [pc, #120]	; (1cc58 <xTaskCheckForTimeOut+0x98>)
   1cbe0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1cbe2:	4b1e      	ldr	r3, [pc, #120]	; (1cc5c <xTaskCheckForTimeOut+0x9c>)
   1cbe4:	681b      	ldr	r3, [r3, #0]
   1cbe6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1cbe8:	687b      	ldr	r3, [r7, #4]
   1cbea:	685b      	ldr	r3, [r3, #4]
   1cbec:	693a      	ldr	r2, [r7, #16]
   1cbee:	1ad3      	subs	r3, r2, r3
   1cbf0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1cbf2:	683b      	ldr	r3, [r7, #0]
   1cbf4:	681b      	ldr	r3, [r3, #0]
   1cbf6:	3301      	adds	r3, #1
   1cbf8:	d102      	bne.n	1cc00 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1cbfa:	2300      	movs	r3, #0
   1cbfc:	617b      	str	r3, [r7, #20]
   1cbfe:	e024      	b.n	1cc4a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1cc00:	687b      	ldr	r3, [r7, #4]
   1cc02:	681a      	ldr	r2, [r3, #0]
   1cc04:	4b16      	ldr	r3, [pc, #88]	; (1cc60 <xTaskCheckForTimeOut+0xa0>)
   1cc06:	681b      	ldr	r3, [r3, #0]
   1cc08:	429a      	cmp	r2, r3
   1cc0a:	d007      	beq.n	1cc1c <xTaskCheckForTimeOut+0x5c>
   1cc0c:	687b      	ldr	r3, [r7, #4]
   1cc0e:	685a      	ldr	r2, [r3, #4]
   1cc10:	693b      	ldr	r3, [r7, #16]
   1cc12:	429a      	cmp	r2, r3
   1cc14:	d802      	bhi.n	1cc1c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1cc16:	2301      	movs	r3, #1
   1cc18:	617b      	str	r3, [r7, #20]
   1cc1a:	e016      	b.n	1cc4a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1cc1c:	683b      	ldr	r3, [r7, #0]
   1cc1e:	681a      	ldr	r2, [r3, #0]
   1cc20:	68fb      	ldr	r3, [r7, #12]
   1cc22:	429a      	cmp	r2, r3
   1cc24:	d90c      	bls.n	1cc40 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1cc26:	683b      	ldr	r3, [r7, #0]
   1cc28:	681a      	ldr	r2, [r3, #0]
   1cc2a:	68fb      	ldr	r3, [r7, #12]
   1cc2c:	1ad2      	subs	r2, r2, r3
   1cc2e:	683b      	ldr	r3, [r7, #0]
   1cc30:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1cc32:	687b      	ldr	r3, [r7, #4]
   1cc34:	0018      	movs	r0, r3
   1cc36:	4b0b      	ldr	r3, [pc, #44]	; (1cc64 <xTaskCheckForTimeOut+0xa4>)
   1cc38:	4798      	blx	r3
			xReturn = pdFALSE;
   1cc3a:	2300      	movs	r3, #0
   1cc3c:	617b      	str	r3, [r7, #20]
   1cc3e:	e004      	b.n	1cc4a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1cc40:	683b      	ldr	r3, [r7, #0]
   1cc42:	2200      	movs	r2, #0
   1cc44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1cc46:	2301      	movs	r3, #1
   1cc48:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1cc4a:	4b07      	ldr	r3, [pc, #28]	; (1cc68 <xTaskCheckForTimeOut+0xa8>)
   1cc4c:	4798      	blx	r3

	return xReturn;
   1cc4e:	697b      	ldr	r3, [r7, #20]
}
   1cc50:	0018      	movs	r0, r3
   1cc52:	46bd      	mov	sp, r7
   1cc54:	b006      	add	sp, #24
   1cc56:	bd80      	pop	{r7, pc}
   1cc58:	0001a1c9 	.word	0x0001a1c9
   1cc5c:	20004038 	.word	0x20004038
   1cc60:	2000404c 	.word	0x2000404c
   1cc64:	0001cb99 	.word	0x0001cb99
   1cc68:	0001a1ed 	.word	0x0001a1ed

0001cc6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1cc6c:	b580      	push	{r7, lr}
   1cc6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1cc70:	4b02      	ldr	r3, [pc, #8]	; (1cc7c <vTaskMissedYield+0x10>)
   1cc72:	2201      	movs	r2, #1
   1cc74:	601a      	str	r2, [r3, #0]
}
   1cc76:	46c0      	nop			; (mov r8, r8)
   1cc78:	46bd      	mov	sp, r7
   1cc7a:	bd80      	pop	{r7, pc}
   1cc7c:	20004048 	.word	0x20004048

0001cc80 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1cc80:	b580      	push	{r7, lr}
   1cc82:	b084      	sub	sp, #16
   1cc84:	af00      	add	r7, sp, #0
   1cc86:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1cc88:	687b      	ldr	r3, [r7, #4]
   1cc8a:	2b00      	cmp	r3, #0
   1cc8c:	d005      	beq.n	1cc9a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1cc8e:	687b      	ldr	r3, [r7, #4]
   1cc90:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1cc92:	68bb      	ldr	r3, [r7, #8]
   1cc94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cc96:	60fb      	str	r3, [r7, #12]
   1cc98:	e001      	b.n	1cc9e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1cc9a:	2300      	movs	r3, #0
   1cc9c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1cc9e:	68fb      	ldr	r3, [r7, #12]
	}
   1cca0:	0018      	movs	r0, r3
   1cca2:	46bd      	mov	sp, r7
   1cca4:	b004      	add	sp, #16
   1cca6:	bd80      	pop	{r7, pc}

0001cca8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1cca8:	b580      	push	{r7, lr}
   1ccaa:	b084      	sub	sp, #16
   1ccac:	af00      	add	r7, sp, #0
   1ccae:	6078      	str	r0, [r7, #4]
   1ccb0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1ccb2:	687b      	ldr	r3, [r7, #4]
   1ccb4:	2b00      	cmp	r3, #0
   1ccb6:	d004      	beq.n	1ccc2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1ccb8:	687b      	ldr	r3, [r7, #4]
   1ccba:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1ccbc:	68fb      	ldr	r3, [r7, #12]
   1ccbe:	683a      	ldr	r2, [r7, #0]
   1ccc0:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1ccc2:	46c0      	nop			; (mov r8, r8)
   1ccc4:	46bd      	mov	sp, r7
   1ccc6:	b004      	add	sp, #16
   1ccc8:	bd80      	pop	{r7, pc}
	...

0001cccc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1cccc:	b580      	push	{r7, lr}
   1ccce:	b082      	sub	sp, #8
   1ccd0:	af00      	add	r7, sp, #0
   1ccd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1ccd4:	4b04      	ldr	r3, [pc, #16]	; (1cce8 <prvIdleTask+0x1c>)
   1ccd6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1ccd8:	4b04      	ldr	r3, [pc, #16]	; (1ccec <prvIdleTask+0x20>)
   1ccda:	681b      	ldr	r3, [r3, #0]
   1ccdc:	2b01      	cmp	r3, #1
   1ccde:	d9f9      	bls.n	1ccd4 <prvIdleTask+0x8>
			{
				taskYIELD();
   1cce0:	4b03      	ldr	r3, [pc, #12]	; (1ccf0 <prvIdleTask+0x24>)
   1cce2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1cce4:	e7f6      	b.n	1ccd4 <prvIdleTask+0x8>
   1cce6:	46c0      	nop			; (mov r8, r8)
   1cce8:	0001cd81 	.word	0x0001cd81
   1ccec:	20003f60 	.word	0x20003f60
   1ccf0:	0001a1b1 	.word	0x0001a1b1

0001ccf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1ccf4:	b580      	push	{r7, lr}
   1ccf6:	b082      	sub	sp, #8
   1ccf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1ccfa:	2300      	movs	r3, #0
   1ccfc:	607b      	str	r3, [r7, #4]
   1ccfe:	e00c      	b.n	1cd1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1cd00:	687a      	ldr	r2, [r7, #4]
   1cd02:	0013      	movs	r3, r2
   1cd04:	009b      	lsls	r3, r3, #2
   1cd06:	189b      	adds	r3, r3, r2
   1cd08:	009b      	lsls	r3, r3, #2
   1cd0a:	4a14      	ldr	r2, [pc, #80]	; (1cd5c <prvInitialiseTaskLists+0x68>)
   1cd0c:	189b      	adds	r3, r3, r2
   1cd0e:	0018      	movs	r0, r3
   1cd10:	4b13      	ldr	r3, [pc, #76]	; (1cd60 <prvInitialiseTaskLists+0x6c>)
   1cd12:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1cd14:	687b      	ldr	r3, [r7, #4]
   1cd16:	3301      	adds	r3, #1
   1cd18:	607b      	str	r3, [r7, #4]
   1cd1a:	687b      	ldr	r3, [r7, #4]
   1cd1c:	2b04      	cmp	r3, #4
   1cd1e:	d9ef      	bls.n	1cd00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1cd20:	4b10      	ldr	r3, [pc, #64]	; (1cd64 <prvInitialiseTaskLists+0x70>)
   1cd22:	0018      	movs	r0, r3
   1cd24:	4b0e      	ldr	r3, [pc, #56]	; (1cd60 <prvInitialiseTaskLists+0x6c>)
   1cd26:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1cd28:	4b0f      	ldr	r3, [pc, #60]	; (1cd68 <prvInitialiseTaskLists+0x74>)
   1cd2a:	0018      	movs	r0, r3
   1cd2c:	4b0c      	ldr	r3, [pc, #48]	; (1cd60 <prvInitialiseTaskLists+0x6c>)
   1cd2e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1cd30:	4b0e      	ldr	r3, [pc, #56]	; (1cd6c <prvInitialiseTaskLists+0x78>)
   1cd32:	0018      	movs	r0, r3
   1cd34:	4b0a      	ldr	r3, [pc, #40]	; (1cd60 <prvInitialiseTaskLists+0x6c>)
   1cd36:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1cd38:	4b0d      	ldr	r3, [pc, #52]	; (1cd70 <prvInitialiseTaskLists+0x7c>)
   1cd3a:	0018      	movs	r0, r3
   1cd3c:	4b08      	ldr	r3, [pc, #32]	; (1cd60 <prvInitialiseTaskLists+0x6c>)
   1cd3e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1cd40:	4b0c      	ldr	r3, [pc, #48]	; (1cd74 <prvInitialiseTaskLists+0x80>)
   1cd42:	0018      	movs	r0, r3
   1cd44:	4b06      	ldr	r3, [pc, #24]	; (1cd60 <prvInitialiseTaskLists+0x6c>)
   1cd46:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1cd48:	4b0b      	ldr	r3, [pc, #44]	; (1cd78 <prvInitialiseTaskLists+0x84>)
   1cd4a:	4a06      	ldr	r2, [pc, #24]	; (1cd64 <prvInitialiseTaskLists+0x70>)
   1cd4c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1cd4e:	4b0b      	ldr	r3, [pc, #44]	; (1cd7c <prvInitialiseTaskLists+0x88>)
   1cd50:	4a05      	ldr	r2, [pc, #20]	; (1cd68 <prvInitialiseTaskLists+0x74>)
   1cd52:	601a      	str	r2, [r3, #0]
}
   1cd54:	46c0      	nop			; (mov r8, r8)
   1cd56:	46bd      	mov	sp, r7
   1cd58:	b002      	add	sp, #8
   1cd5a:	bd80      	pop	{r7, pc}
   1cd5c:	20003f60 	.word	0x20003f60
   1cd60:	00019f39 	.word	0x00019f39
   1cd64:	20003fc4 	.word	0x20003fc4
   1cd68:	20003fd8 	.word	0x20003fd8
   1cd6c:	20003ff4 	.word	0x20003ff4
   1cd70:	20004008 	.word	0x20004008
   1cd74:	20004020 	.word	0x20004020
   1cd78:	20003fec 	.word	0x20003fec
   1cd7c:	20003ff0 	.word	0x20003ff0

0001cd80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1cd80:	b580      	push	{r7, lr}
   1cd82:	b082      	sub	sp, #8
   1cd84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1cd86:	e01a      	b.n	1cdbe <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1cd88:	4b11      	ldr	r3, [pc, #68]	; (1cdd0 <prvCheckTasksWaitingTermination+0x50>)
   1cd8a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1cd8c:	4b11      	ldr	r3, [pc, #68]	; (1cdd4 <prvCheckTasksWaitingTermination+0x54>)
   1cd8e:	68db      	ldr	r3, [r3, #12]
   1cd90:	68db      	ldr	r3, [r3, #12]
   1cd92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cd94:	687b      	ldr	r3, [r7, #4]
   1cd96:	3304      	adds	r3, #4
   1cd98:	0018      	movs	r0, r3
   1cd9a:	4b0f      	ldr	r3, [pc, #60]	; (1cdd8 <prvCheckTasksWaitingTermination+0x58>)
   1cd9c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1cd9e:	4b0f      	ldr	r3, [pc, #60]	; (1cddc <prvCheckTasksWaitingTermination+0x5c>)
   1cda0:	681b      	ldr	r3, [r3, #0]
   1cda2:	1e5a      	subs	r2, r3, #1
   1cda4:	4b0d      	ldr	r3, [pc, #52]	; (1cddc <prvCheckTasksWaitingTermination+0x5c>)
   1cda6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1cda8:	4b0d      	ldr	r3, [pc, #52]	; (1cde0 <prvCheckTasksWaitingTermination+0x60>)
   1cdaa:	681b      	ldr	r3, [r3, #0]
   1cdac:	1e5a      	subs	r2, r3, #1
   1cdae:	4b0c      	ldr	r3, [pc, #48]	; (1cde0 <prvCheckTasksWaitingTermination+0x60>)
   1cdb0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1cdb2:	4b0c      	ldr	r3, [pc, #48]	; (1cde4 <prvCheckTasksWaitingTermination+0x64>)
   1cdb4:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1cdb6:	687b      	ldr	r3, [r7, #4]
   1cdb8:	0018      	movs	r0, r3
   1cdba:	4b0b      	ldr	r3, [pc, #44]	; (1cde8 <prvCheckTasksWaitingTermination+0x68>)
   1cdbc:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1cdbe:	4b08      	ldr	r3, [pc, #32]	; (1cde0 <prvCheckTasksWaitingTermination+0x60>)
   1cdc0:	681b      	ldr	r3, [r3, #0]
   1cdc2:	2b00      	cmp	r3, #0
   1cdc4:	d1e0      	bne.n	1cd88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1cdc6:	46c0      	nop			; (mov r8, r8)
   1cdc8:	46bd      	mov	sp, r7
   1cdca:	b002      	add	sp, #8
   1cdcc:	bd80      	pop	{r7, pc}
   1cdce:	46c0      	nop			; (mov r8, r8)
   1cdd0:	0001a1c9 	.word	0x0001a1c9
   1cdd4:	20004008 	.word	0x20004008
   1cdd8:	0001a03b 	.word	0x0001a03b
   1cddc:	20004034 	.word	0x20004034
   1cde0:	2000401c 	.word	0x2000401c
   1cde4:	0001a1ed 	.word	0x0001a1ed
   1cde8:	0001ce5d 	.word	0x0001ce5d

0001cdec <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1cdec:	b580      	push	{r7, lr}
   1cdee:	b084      	sub	sp, #16
   1cdf0:	af00      	add	r7, sp, #0
   1cdf2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1cdf4:	2300      	movs	r3, #0
   1cdf6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1cdf8:	e005      	b.n	1ce06 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1cdfa:	687b      	ldr	r3, [r7, #4]
   1cdfc:	3301      	adds	r3, #1
   1cdfe:	607b      	str	r3, [r7, #4]
			ulCount++;
   1ce00:	68fb      	ldr	r3, [r7, #12]
   1ce02:	3301      	adds	r3, #1
   1ce04:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1ce06:	687b      	ldr	r3, [r7, #4]
   1ce08:	781b      	ldrb	r3, [r3, #0]
   1ce0a:	2ba5      	cmp	r3, #165	; 0xa5
   1ce0c:	d0f5      	beq.n	1cdfa <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1ce0e:	68fb      	ldr	r3, [r7, #12]
   1ce10:	089b      	lsrs	r3, r3, #2
   1ce12:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1ce14:	68fb      	ldr	r3, [r7, #12]
   1ce16:	b29b      	uxth	r3, r3
	}
   1ce18:	0018      	movs	r0, r3
   1ce1a:	46bd      	mov	sp, r7
   1ce1c:	b004      	add	sp, #16
   1ce1e:	bd80      	pop	{r7, pc}

0001ce20 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1ce20:	b580      	push	{r7, lr}
   1ce22:	b086      	sub	sp, #24
   1ce24:	af00      	add	r7, sp, #0
   1ce26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1ce28:	687b      	ldr	r3, [r7, #4]
   1ce2a:	2b00      	cmp	r3, #0
   1ce2c:	d102      	bne.n	1ce34 <uxTaskGetStackHighWaterMark+0x14>
   1ce2e:	4b09      	ldr	r3, [pc, #36]	; (1ce54 <uxTaskGetStackHighWaterMark+0x34>)
   1ce30:	681b      	ldr	r3, [r3, #0]
   1ce32:	e000      	b.n	1ce36 <uxTaskGetStackHighWaterMark+0x16>
   1ce34:	687b      	ldr	r3, [r7, #4]
   1ce36:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1ce38:	697b      	ldr	r3, [r7, #20]
   1ce3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ce3c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1ce3e:	693b      	ldr	r3, [r7, #16]
   1ce40:	0018      	movs	r0, r3
   1ce42:	4b05      	ldr	r3, [pc, #20]	; (1ce58 <uxTaskGetStackHighWaterMark+0x38>)
   1ce44:	4798      	blx	r3
   1ce46:	0003      	movs	r3, r0
   1ce48:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1ce4a:	68fb      	ldr	r3, [r7, #12]
	}
   1ce4c:	0018      	movs	r0, r3
   1ce4e:	46bd      	mov	sp, r7
   1ce50:	b006      	add	sp, #24
   1ce52:	bd80      	pop	{r7, pc}
   1ce54:	20003f5c 	.word	0x20003f5c
   1ce58:	0001cded 	.word	0x0001cded

0001ce5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1ce5c:	b580      	push	{r7, lr}
   1ce5e:	b082      	sub	sp, #8
   1ce60:	af00      	add	r7, sp, #0
   1ce62:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1ce64:	687b      	ldr	r3, [r7, #4]
   1ce66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ce68:	0018      	movs	r0, r3
   1ce6a:	4b05      	ldr	r3, [pc, #20]	; (1ce80 <prvDeleteTCB+0x24>)
   1ce6c:	4798      	blx	r3
			vPortFree( pxTCB );
   1ce6e:	687b      	ldr	r3, [r7, #4]
   1ce70:	0018      	movs	r0, r3
   1ce72:	4b03      	ldr	r3, [pc, #12]	; (1ce80 <prvDeleteTCB+0x24>)
   1ce74:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1ce76:	46c0      	nop			; (mov r8, r8)
   1ce78:	46bd      	mov	sp, r7
   1ce7a:	b002      	add	sp, #8
   1ce7c:	bd80      	pop	{r7, pc}
   1ce7e:	46c0      	nop			; (mov r8, r8)
   1ce80:	0001a3c5 	.word	0x0001a3c5

0001ce84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1ce84:	b580      	push	{r7, lr}
   1ce86:	b082      	sub	sp, #8
   1ce88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1ce8a:	4b0e      	ldr	r3, [pc, #56]	; (1cec4 <prvResetNextTaskUnblockTime+0x40>)
   1ce8c:	681b      	ldr	r3, [r3, #0]
   1ce8e:	681b      	ldr	r3, [r3, #0]
   1ce90:	2b00      	cmp	r3, #0
   1ce92:	d101      	bne.n	1ce98 <prvResetNextTaskUnblockTime+0x14>
   1ce94:	2301      	movs	r3, #1
   1ce96:	e000      	b.n	1ce9a <prvResetNextTaskUnblockTime+0x16>
   1ce98:	2300      	movs	r3, #0
   1ce9a:	2b00      	cmp	r3, #0
   1ce9c:	d004      	beq.n	1cea8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1ce9e:	4b0a      	ldr	r3, [pc, #40]	; (1cec8 <prvResetNextTaskUnblockTime+0x44>)
   1cea0:	2201      	movs	r2, #1
   1cea2:	4252      	negs	r2, r2
   1cea4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1cea6:	e008      	b.n	1ceba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1cea8:	4b06      	ldr	r3, [pc, #24]	; (1cec4 <prvResetNextTaskUnblockTime+0x40>)
   1ceaa:	681b      	ldr	r3, [r3, #0]
   1ceac:	68db      	ldr	r3, [r3, #12]
   1ceae:	68db      	ldr	r3, [r3, #12]
   1ceb0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1ceb2:	687b      	ldr	r3, [r7, #4]
   1ceb4:	685a      	ldr	r2, [r3, #4]
   1ceb6:	4b04      	ldr	r3, [pc, #16]	; (1cec8 <prvResetNextTaskUnblockTime+0x44>)
   1ceb8:	601a      	str	r2, [r3, #0]
}
   1ceba:	46c0      	nop			; (mov r8, r8)
   1cebc:	46bd      	mov	sp, r7
   1cebe:	b002      	add	sp, #8
   1cec0:	bd80      	pop	{r7, pc}
   1cec2:	46c0      	nop			; (mov r8, r8)
   1cec4:	20003fec 	.word	0x20003fec
   1cec8:	20004054 	.word	0x20004054

0001cecc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1cecc:	b580      	push	{r7, lr}
   1cece:	b082      	sub	sp, #8
   1ced0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1ced2:	4b04      	ldr	r3, [pc, #16]	; (1cee4 <xTaskGetCurrentTaskHandle+0x18>)
   1ced4:	681b      	ldr	r3, [r3, #0]
   1ced6:	607b      	str	r3, [r7, #4]

		return xReturn;
   1ced8:	687b      	ldr	r3, [r7, #4]
	}
   1ceda:	0018      	movs	r0, r3
   1cedc:	46bd      	mov	sp, r7
   1cede:	b002      	add	sp, #8
   1cee0:	bd80      	pop	{r7, pc}
   1cee2:	46c0      	nop			; (mov r8, r8)
   1cee4:	20003f5c 	.word	0x20003f5c

0001cee8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1cee8:	b580      	push	{r7, lr}
   1ceea:	b082      	sub	sp, #8
   1ceec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1ceee:	4b0a      	ldr	r3, [pc, #40]	; (1cf18 <xTaskGetSchedulerState+0x30>)
   1cef0:	681b      	ldr	r3, [r3, #0]
   1cef2:	2b00      	cmp	r3, #0
   1cef4:	d102      	bne.n	1cefc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1cef6:	2301      	movs	r3, #1
   1cef8:	607b      	str	r3, [r7, #4]
   1cefa:	e008      	b.n	1cf0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cefc:	4b07      	ldr	r3, [pc, #28]	; (1cf1c <xTaskGetSchedulerState+0x34>)
   1cefe:	681b      	ldr	r3, [r3, #0]
   1cf00:	2b00      	cmp	r3, #0
   1cf02:	d102      	bne.n	1cf0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1cf04:	2302      	movs	r3, #2
   1cf06:	607b      	str	r3, [r7, #4]
   1cf08:	e001      	b.n	1cf0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1cf0a:	2300      	movs	r3, #0
   1cf0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1cf0e:	687b      	ldr	r3, [r7, #4]
	}
   1cf10:	0018      	movs	r0, r3
   1cf12:	46bd      	mov	sp, r7
   1cf14:	b002      	add	sp, #8
   1cf16:	bd80      	pop	{r7, pc}
   1cf18:	20004040 	.word	0x20004040
   1cf1c:	2000405c 	.word	0x2000405c

0001cf20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1cf20:	b590      	push	{r4, r7, lr}
   1cf22:	b085      	sub	sp, #20
   1cf24:	af00      	add	r7, sp, #0
   1cf26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1cf28:	687b      	ldr	r3, [r7, #4]
   1cf2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1cf2c:	2300      	movs	r3, #0
   1cf2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1cf30:	687b      	ldr	r3, [r7, #4]
   1cf32:	2b00      	cmp	r3, #0
   1cf34:	d100      	bne.n	1cf38 <xTaskPriorityInherit+0x18>
   1cf36:	e09d      	b.n	1d074 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1cf38:	68bb      	ldr	r3, [r7, #8]
   1cf3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf3c:	4b50      	ldr	r3, [pc, #320]	; (1d080 <xTaskPriorityInherit+0x160>)
   1cf3e:	681b      	ldr	r3, [r3, #0]
   1cf40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf42:	429a      	cmp	r2, r3
   1cf44:	d300      	bcc.n	1cf48 <xTaskPriorityInherit+0x28>
   1cf46:	e08c      	b.n	1d062 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1cf48:	68bb      	ldr	r3, [r7, #8]
   1cf4a:	699b      	ldr	r3, [r3, #24]
   1cf4c:	2b00      	cmp	r3, #0
   1cf4e:	db06      	blt.n	1cf5e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cf50:	4b4b      	ldr	r3, [pc, #300]	; (1d080 <xTaskPriorityInherit+0x160>)
   1cf52:	681b      	ldr	r3, [r3, #0]
   1cf54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf56:	2205      	movs	r2, #5
   1cf58:	1ad2      	subs	r2, r2, r3
   1cf5a:	68bb      	ldr	r3, [r7, #8]
   1cf5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1cf5e:	68bb      	ldr	r3, [r7, #8]
   1cf60:	6959      	ldr	r1, [r3, #20]
   1cf62:	68bb      	ldr	r3, [r7, #8]
   1cf64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf66:	0013      	movs	r3, r2
   1cf68:	009b      	lsls	r3, r3, #2
   1cf6a:	189b      	adds	r3, r3, r2
   1cf6c:	009b      	lsls	r3, r3, #2
   1cf6e:	4a45      	ldr	r2, [pc, #276]	; (1d084 <xTaskPriorityInherit+0x164>)
   1cf70:	189b      	adds	r3, r3, r2
   1cf72:	4299      	cmp	r1, r3
   1cf74:	d101      	bne.n	1cf7a <xTaskPriorityInherit+0x5a>
   1cf76:	2301      	movs	r3, #1
   1cf78:	e000      	b.n	1cf7c <xTaskPriorityInherit+0x5c>
   1cf7a:	2300      	movs	r3, #0
   1cf7c:	2b00      	cmp	r3, #0
   1cf7e:	d037      	beq.n	1cff0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cf80:	68bb      	ldr	r3, [r7, #8]
   1cf82:	3304      	adds	r3, #4
   1cf84:	0018      	movs	r0, r3
   1cf86:	4b40      	ldr	r3, [pc, #256]	; (1d088 <xTaskPriorityInherit+0x168>)
   1cf88:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1cf8a:	4b3d      	ldr	r3, [pc, #244]	; (1d080 <xTaskPriorityInherit+0x160>)
   1cf8c:	681b      	ldr	r3, [r3, #0]
   1cf8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf90:	68bb      	ldr	r3, [r7, #8]
   1cf92:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1cf94:	68bb      	ldr	r3, [r7, #8]
   1cf96:	0018      	movs	r0, r3
   1cf98:	4b3c      	ldr	r3, [pc, #240]	; (1d08c <xTaskPriorityInherit+0x16c>)
   1cf9a:	4798      	blx	r3
   1cf9c:	0003      	movs	r3, r0
   1cf9e:	001a      	movs	r2, r3
   1cfa0:	4b3b      	ldr	r3, [pc, #236]	; (1d090 <xTaskPriorityInherit+0x170>)
   1cfa2:	881b      	ldrh	r3, [r3, #0]
   1cfa4:	4013      	ands	r3, r2
   1cfa6:	b29b      	uxth	r3, r3
   1cfa8:	2b00      	cmp	r3, #0
   1cfaa:	d008      	beq.n	1cfbe <xTaskPriorityInherit+0x9e>
   1cfac:	68bb      	ldr	r3, [r7, #8]
   1cfae:	0018      	movs	r0, r3
   1cfb0:	4b38      	ldr	r3, [pc, #224]	; (1d094 <xTaskPriorityInherit+0x174>)
   1cfb2:	4798      	blx	r3
   1cfb4:	0003      	movs	r3, r0
   1cfb6:	b2db      	uxtb	r3, r3
   1cfb8:	0018      	movs	r0, r3
   1cfba:	4b37      	ldr	r3, [pc, #220]	; (1d098 <xTaskPriorityInherit+0x178>)
   1cfbc:	4798      	blx	r3
   1cfbe:	68bb      	ldr	r3, [r7, #8]
   1cfc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfc2:	4b36      	ldr	r3, [pc, #216]	; (1d09c <xTaskPriorityInherit+0x17c>)
   1cfc4:	681b      	ldr	r3, [r3, #0]
   1cfc6:	429a      	cmp	r2, r3
   1cfc8:	d903      	bls.n	1cfd2 <xTaskPriorityInherit+0xb2>
   1cfca:	68bb      	ldr	r3, [r7, #8]
   1cfcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfce:	4b33      	ldr	r3, [pc, #204]	; (1d09c <xTaskPriorityInherit+0x17c>)
   1cfd0:	601a      	str	r2, [r3, #0]
   1cfd2:	68bb      	ldr	r3, [r7, #8]
   1cfd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfd6:	0013      	movs	r3, r2
   1cfd8:	009b      	lsls	r3, r3, #2
   1cfda:	189b      	adds	r3, r3, r2
   1cfdc:	009b      	lsls	r3, r3, #2
   1cfde:	4a29      	ldr	r2, [pc, #164]	; (1d084 <xTaskPriorityInherit+0x164>)
   1cfe0:	189a      	adds	r2, r3, r2
   1cfe2:	68bb      	ldr	r3, [r7, #8]
   1cfe4:	3304      	adds	r3, #4
   1cfe6:	0019      	movs	r1, r3
   1cfe8:	0010      	movs	r0, r2
   1cfea:	4b2d      	ldr	r3, [pc, #180]	; (1d0a0 <xTaskPriorityInherit+0x180>)
   1cfec:	4798      	blx	r3
   1cfee:	e004      	b.n	1cffa <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1cff0:	4b23      	ldr	r3, [pc, #140]	; (1d080 <xTaskPriorityInherit+0x160>)
   1cff2:	681b      	ldr	r3, [r3, #0]
   1cff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cff6:	68bb      	ldr	r3, [r7, #8]
   1cff8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1cffa:	68bb      	ldr	r3, [r7, #8]
   1cffc:	0018      	movs	r0, r3
   1cffe:	4b23      	ldr	r3, [pc, #140]	; (1d08c <xTaskPriorityInherit+0x16c>)
   1d000:	4798      	blx	r3
   1d002:	0003      	movs	r3, r0
   1d004:	001a      	movs	r2, r3
   1d006:	4b22      	ldr	r3, [pc, #136]	; (1d090 <xTaskPriorityInherit+0x170>)
   1d008:	881b      	ldrh	r3, [r3, #0]
   1d00a:	4013      	ands	r3, r2
   1d00c:	b29b      	uxth	r3, r3
   1d00e:	2b00      	cmp	r3, #0
   1d010:	d024      	beq.n	1d05c <xTaskPriorityInherit+0x13c>
   1d012:	68bb      	ldr	r3, [r7, #8]
   1d014:	0018      	movs	r0, r3
   1d016:	4b1f      	ldr	r3, [pc, #124]	; (1d094 <xTaskPriorityInherit+0x174>)
   1d018:	4798      	blx	r3
   1d01a:	0003      	movs	r3, r0
   1d01c:	b2db      	uxtb	r3, r3
   1d01e:	001c      	movs	r4, r3
   1d020:	68bb      	ldr	r3, [r7, #8]
   1d022:	0018      	movs	r0, r3
   1d024:	4b1b      	ldr	r3, [pc, #108]	; (1d094 <xTaskPriorityInherit+0x174>)
   1d026:	4798      	blx	r3
   1d028:	0003      	movs	r3, r0
   1d02a:	b2db      	uxtb	r3, r3
   1d02c:	0019      	movs	r1, r3
   1d02e:	2003      	movs	r0, #3
   1d030:	4b1c      	ldr	r3, [pc, #112]	; (1d0a4 <xTaskPriorityInherit+0x184>)
   1d032:	4798      	blx	r3
   1d034:	0003      	movs	r3, r0
   1d036:	0022      	movs	r2, r4
   1d038:	2103      	movs	r1, #3
   1d03a:	208e      	movs	r0, #142	; 0x8e
   1d03c:	4c1a      	ldr	r4, [pc, #104]	; (1d0a8 <xTaskPriorityInherit+0x188>)
   1d03e:	47a0      	blx	r4
   1d040:	68bb      	ldr	r3, [r7, #8]
   1d042:	0018      	movs	r0, r3
   1d044:	4b13      	ldr	r3, [pc, #76]	; (1d094 <xTaskPriorityInherit+0x174>)
   1d046:	4798      	blx	r3
   1d048:	0003      	movs	r3, r0
   1d04a:	b2d9      	uxtb	r1, r3
   1d04c:	4b0c      	ldr	r3, [pc, #48]	; (1d080 <xTaskPriorityInherit+0x160>)
   1d04e:	681b      	ldr	r3, [r3, #0]
   1d050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d052:	b2db      	uxtb	r3, r3
   1d054:	001a      	movs	r2, r3
   1d056:	2003      	movs	r0, #3
   1d058:	4b14      	ldr	r3, [pc, #80]	; (1d0ac <xTaskPriorityInherit+0x18c>)
   1d05a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1d05c:	2301      	movs	r3, #1
   1d05e:	60fb      	str	r3, [r7, #12]
   1d060:	e008      	b.n	1d074 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1d062:	68bb      	ldr	r3, [r7, #8]
   1d064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d066:	4b06      	ldr	r3, [pc, #24]	; (1d080 <xTaskPriorityInherit+0x160>)
   1d068:	681b      	ldr	r3, [r3, #0]
   1d06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d06c:	429a      	cmp	r2, r3
   1d06e:	d201      	bcs.n	1d074 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1d070:	2301      	movs	r3, #1
   1d072:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1d074:	68fb      	ldr	r3, [r7, #12]
	}
   1d076:	0018      	movs	r0, r3
   1d078:	46bd      	mov	sp, r7
   1d07a:	b005      	add	sp, #20
   1d07c:	bd90      	pop	{r4, r7, pc}
   1d07e:	46c0      	nop			; (mov r8, r8)
   1d080:	20003f5c 	.word	0x20003f5c
   1d084:	20003f60 	.word	0x20003f60
   1d088:	0001a03b 	.word	0x0001a03b
   1d08c:	000181c1 	.word	0x000181c1
   1d090:	20000104 	.word	0x20000104
   1d094:	000181a1 	.word	0x000181a1
   1d098:	00018971 	.word	0x00018971
   1d09c:	2000403c 	.word	0x2000403c
   1d0a0:	00019f8b 	.word	0x00019f8b
   1d0a4:	00019179 	.word	0x00019179
   1d0a8:	00018ce9 	.word	0x00018ce9
   1d0ac:	000190d5 	.word	0x000190d5

0001d0b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1d0b0:	b590      	push	{r4, r7, lr}
   1d0b2:	b085      	sub	sp, #20
   1d0b4:	af00      	add	r7, sp, #0
   1d0b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1d0b8:	687b      	ldr	r3, [r7, #4]
   1d0ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1d0bc:	2300      	movs	r3, #0
   1d0be:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1d0c0:	687b      	ldr	r3, [r7, #4]
   1d0c2:	2b00      	cmp	r3, #0
   1d0c4:	d100      	bne.n	1d0c8 <xTaskPriorityDisinherit+0x18>
   1d0c6:	e089      	b.n	1d1dc <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1d0c8:	4b47      	ldr	r3, [pc, #284]	; (1d1e8 <xTaskPriorityDisinherit+0x138>)
   1d0ca:	681b      	ldr	r3, [r3, #0]
   1d0cc:	68ba      	ldr	r2, [r7, #8]
   1d0ce:	429a      	cmp	r2, r3
   1d0d0:	d001      	beq.n	1d0d6 <xTaskPriorityDisinherit+0x26>
   1d0d2:	b672      	cpsid	i
   1d0d4:	e7fe      	b.n	1d0d4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1d0d6:	68bb      	ldr	r3, [r7, #8]
   1d0d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d0da:	2b00      	cmp	r3, #0
   1d0dc:	d101      	bne.n	1d0e2 <xTaskPriorityDisinherit+0x32>
   1d0de:	b672      	cpsid	i
   1d0e0:	e7fe      	b.n	1d0e0 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1d0e2:	68bb      	ldr	r3, [r7, #8]
   1d0e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d0e6:	1e5a      	subs	r2, r3, #1
   1d0e8:	68bb      	ldr	r3, [r7, #8]
   1d0ea:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1d0ec:	68bb      	ldr	r3, [r7, #8]
   1d0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d0f0:	68bb      	ldr	r3, [r7, #8]
   1d0f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d0f4:	429a      	cmp	r2, r3
   1d0f6:	d071      	beq.n	1d1dc <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1d0f8:	68bb      	ldr	r3, [r7, #8]
   1d0fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d0fc:	2b00      	cmp	r3, #0
   1d0fe:	d16d      	bne.n	1d1dc <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d100:	68bb      	ldr	r3, [r7, #8]
   1d102:	3304      	adds	r3, #4
   1d104:	0018      	movs	r0, r3
   1d106:	4b39      	ldr	r3, [pc, #228]	; (1d1ec <xTaskPriorityDisinherit+0x13c>)
   1d108:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1d10a:	68bb      	ldr	r3, [r7, #8]
   1d10c:	0018      	movs	r0, r3
   1d10e:	4b38      	ldr	r3, [pc, #224]	; (1d1f0 <xTaskPriorityDisinherit+0x140>)
   1d110:	4798      	blx	r3
   1d112:	0003      	movs	r3, r0
   1d114:	001a      	movs	r2, r3
   1d116:	4b37      	ldr	r3, [pc, #220]	; (1d1f4 <xTaskPriorityDisinherit+0x144>)
   1d118:	881b      	ldrh	r3, [r3, #0]
   1d11a:	4013      	ands	r3, r2
   1d11c:	b29b      	uxth	r3, r3
   1d11e:	2b00      	cmp	r3, #0
   1d120:	d023      	beq.n	1d16a <xTaskPriorityDisinherit+0xba>
   1d122:	68bb      	ldr	r3, [r7, #8]
   1d124:	0018      	movs	r0, r3
   1d126:	4b34      	ldr	r3, [pc, #208]	; (1d1f8 <xTaskPriorityDisinherit+0x148>)
   1d128:	4798      	blx	r3
   1d12a:	0003      	movs	r3, r0
   1d12c:	b2db      	uxtb	r3, r3
   1d12e:	001c      	movs	r4, r3
   1d130:	68bb      	ldr	r3, [r7, #8]
   1d132:	0018      	movs	r0, r3
   1d134:	4b30      	ldr	r3, [pc, #192]	; (1d1f8 <xTaskPriorityDisinherit+0x148>)
   1d136:	4798      	blx	r3
   1d138:	0003      	movs	r3, r0
   1d13a:	b2db      	uxtb	r3, r3
   1d13c:	0019      	movs	r1, r3
   1d13e:	2003      	movs	r0, #3
   1d140:	4b2e      	ldr	r3, [pc, #184]	; (1d1fc <xTaskPriorityDisinherit+0x14c>)
   1d142:	4798      	blx	r3
   1d144:	0003      	movs	r3, r0
   1d146:	0022      	movs	r2, r4
   1d148:	2103      	movs	r1, #3
   1d14a:	208f      	movs	r0, #143	; 0x8f
   1d14c:	4c2c      	ldr	r4, [pc, #176]	; (1d200 <xTaskPriorityDisinherit+0x150>)
   1d14e:	47a0      	blx	r4
   1d150:	68bb      	ldr	r3, [r7, #8]
   1d152:	0018      	movs	r0, r3
   1d154:	4b28      	ldr	r3, [pc, #160]	; (1d1f8 <xTaskPriorityDisinherit+0x148>)
   1d156:	4798      	blx	r3
   1d158:	0003      	movs	r3, r0
   1d15a:	b2d9      	uxtb	r1, r3
   1d15c:	68bb      	ldr	r3, [r7, #8]
   1d15e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d160:	b2db      	uxtb	r3, r3
   1d162:	001a      	movs	r2, r3
   1d164:	2003      	movs	r0, #3
   1d166:	4b27      	ldr	r3, [pc, #156]	; (1d204 <xTaskPriorityDisinherit+0x154>)
   1d168:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1d16a:	68bb      	ldr	r3, [r7, #8]
   1d16c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d16e:	68bb      	ldr	r3, [r7, #8]
   1d170:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d172:	68bb      	ldr	r3, [r7, #8]
   1d174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d176:	2205      	movs	r2, #5
   1d178:	1ad2      	subs	r2, r2, r3
   1d17a:	68bb      	ldr	r3, [r7, #8]
   1d17c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1d17e:	68bb      	ldr	r3, [r7, #8]
   1d180:	0018      	movs	r0, r3
   1d182:	4b1b      	ldr	r3, [pc, #108]	; (1d1f0 <xTaskPriorityDisinherit+0x140>)
   1d184:	4798      	blx	r3
   1d186:	0003      	movs	r3, r0
   1d188:	001a      	movs	r2, r3
   1d18a:	4b1a      	ldr	r3, [pc, #104]	; (1d1f4 <xTaskPriorityDisinherit+0x144>)
   1d18c:	881b      	ldrh	r3, [r3, #0]
   1d18e:	4013      	ands	r3, r2
   1d190:	b29b      	uxth	r3, r3
   1d192:	2b00      	cmp	r3, #0
   1d194:	d008      	beq.n	1d1a8 <xTaskPriorityDisinherit+0xf8>
   1d196:	68bb      	ldr	r3, [r7, #8]
   1d198:	0018      	movs	r0, r3
   1d19a:	4b17      	ldr	r3, [pc, #92]	; (1d1f8 <xTaskPriorityDisinherit+0x148>)
   1d19c:	4798      	blx	r3
   1d19e:	0003      	movs	r3, r0
   1d1a0:	b2db      	uxtb	r3, r3
   1d1a2:	0018      	movs	r0, r3
   1d1a4:	4b18      	ldr	r3, [pc, #96]	; (1d208 <xTaskPriorityDisinherit+0x158>)
   1d1a6:	4798      	blx	r3
   1d1a8:	68bb      	ldr	r3, [r7, #8]
   1d1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1ac:	4b17      	ldr	r3, [pc, #92]	; (1d20c <xTaskPriorityDisinherit+0x15c>)
   1d1ae:	681b      	ldr	r3, [r3, #0]
   1d1b0:	429a      	cmp	r2, r3
   1d1b2:	d903      	bls.n	1d1bc <xTaskPriorityDisinherit+0x10c>
   1d1b4:	68bb      	ldr	r3, [r7, #8]
   1d1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1b8:	4b14      	ldr	r3, [pc, #80]	; (1d20c <xTaskPriorityDisinherit+0x15c>)
   1d1ba:	601a      	str	r2, [r3, #0]
   1d1bc:	68bb      	ldr	r3, [r7, #8]
   1d1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1c0:	0013      	movs	r3, r2
   1d1c2:	009b      	lsls	r3, r3, #2
   1d1c4:	189b      	adds	r3, r3, r2
   1d1c6:	009b      	lsls	r3, r3, #2
   1d1c8:	4a11      	ldr	r2, [pc, #68]	; (1d210 <xTaskPriorityDisinherit+0x160>)
   1d1ca:	189a      	adds	r2, r3, r2
   1d1cc:	68bb      	ldr	r3, [r7, #8]
   1d1ce:	3304      	adds	r3, #4
   1d1d0:	0019      	movs	r1, r3
   1d1d2:	0010      	movs	r0, r2
   1d1d4:	4b0f      	ldr	r3, [pc, #60]	; (1d214 <xTaskPriorityDisinherit+0x164>)
   1d1d6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1d1d8:	2301      	movs	r3, #1
   1d1da:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1d1dc:	68fb      	ldr	r3, [r7, #12]
	}
   1d1de:	0018      	movs	r0, r3
   1d1e0:	46bd      	mov	sp, r7
   1d1e2:	b005      	add	sp, #20
   1d1e4:	bd90      	pop	{r4, r7, pc}
   1d1e6:	46c0      	nop			; (mov r8, r8)
   1d1e8:	20003f5c 	.word	0x20003f5c
   1d1ec:	0001a03b 	.word	0x0001a03b
   1d1f0:	000181c1 	.word	0x000181c1
   1d1f4:	20000104 	.word	0x20000104
   1d1f8:	000181a1 	.word	0x000181a1
   1d1fc:	00019179 	.word	0x00019179
   1d200:	00018ce9 	.word	0x00018ce9
   1d204:	000190d5 	.word	0x000190d5
   1d208:	00018971 	.word	0x00018971
   1d20c:	2000403c 	.word	0x2000403c
   1d210:	20003f60 	.word	0x20003f60
   1d214:	00019f8b 	.word	0x00019f8b

0001d218 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1d218:	b590      	push	{r4, r7, lr}
   1d21a:	b087      	sub	sp, #28
   1d21c:	af00      	add	r7, sp, #0
   1d21e:	6078      	str	r0, [r7, #4]
   1d220:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1d222:	687b      	ldr	r3, [r7, #4]
   1d224:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1d226:	2301      	movs	r3, #1
   1d228:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1d22a:	687b      	ldr	r3, [r7, #4]
   1d22c:	2b00      	cmp	r3, #0
   1d22e:	d100      	bne.n	1d232 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1d230:	e0a4      	b.n	1d37c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1d232:	693b      	ldr	r3, [r7, #16]
   1d234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d236:	2b00      	cmp	r3, #0
   1d238:	d101      	bne.n	1d23e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1d23a:	b672      	cpsid	i
   1d23c:	e7fe      	b.n	1d23c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1d23e:	693b      	ldr	r3, [r7, #16]
   1d240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d242:	683b      	ldr	r3, [r7, #0]
   1d244:	429a      	cmp	r2, r3
   1d246:	d202      	bcs.n	1d24e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1d248:	683b      	ldr	r3, [r7, #0]
   1d24a:	617b      	str	r3, [r7, #20]
   1d24c:	e002      	b.n	1d254 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1d24e:	693b      	ldr	r3, [r7, #16]
   1d250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d252:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1d254:	693b      	ldr	r3, [r7, #16]
   1d256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d258:	697b      	ldr	r3, [r7, #20]
   1d25a:	429a      	cmp	r2, r3
   1d25c:	d100      	bne.n	1d260 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1d25e:	e08d      	b.n	1d37c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1d260:	693b      	ldr	r3, [r7, #16]
   1d262:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d264:	68fb      	ldr	r3, [r7, #12]
   1d266:	429a      	cmp	r2, r3
   1d268:	d000      	beq.n	1d26c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1d26a:	e087      	b.n	1d37c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1d26c:	4b45      	ldr	r3, [pc, #276]	; (1d384 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1d26e:	681b      	ldr	r3, [r3, #0]
   1d270:	693a      	ldr	r2, [r7, #16]
   1d272:	429a      	cmp	r2, r3
   1d274:	d101      	bne.n	1d27a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1d276:	b672      	cpsid	i
   1d278:	e7fe      	b.n	1d278 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1d27a:	693b      	ldr	r3, [r7, #16]
   1d27c:	0018      	movs	r0, r3
   1d27e:	4b42      	ldr	r3, [pc, #264]	; (1d388 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d280:	4798      	blx	r3
   1d282:	0003      	movs	r3, r0
   1d284:	001a      	movs	r2, r3
   1d286:	4b41      	ldr	r3, [pc, #260]	; (1d38c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d288:	881b      	ldrh	r3, [r3, #0]
   1d28a:	4013      	ands	r3, r2
   1d28c:	b29b      	uxth	r3, r3
   1d28e:	2b00      	cmp	r3, #0
   1d290:	d023      	beq.n	1d2da <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1d292:	693b      	ldr	r3, [r7, #16]
   1d294:	0018      	movs	r0, r3
   1d296:	4b3e      	ldr	r3, [pc, #248]	; (1d390 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d298:	4798      	blx	r3
   1d29a:	0003      	movs	r3, r0
   1d29c:	b2db      	uxtb	r3, r3
   1d29e:	001c      	movs	r4, r3
   1d2a0:	693b      	ldr	r3, [r7, #16]
   1d2a2:	0018      	movs	r0, r3
   1d2a4:	4b3a      	ldr	r3, [pc, #232]	; (1d390 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d2a6:	4798      	blx	r3
   1d2a8:	0003      	movs	r3, r0
   1d2aa:	b2db      	uxtb	r3, r3
   1d2ac:	0019      	movs	r1, r3
   1d2ae:	2003      	movs	r0, #3
   1d2b0:	4b38      	ldr	r3, [pc, #224]	; (1d394 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1d2b2:	4798      	blx	r3
   1d2b4:	0003      	movs	r3, r0
   1d2b6:	0022      	movs	r2, r4
   1d2b8:	2103      	movs	r1, #3
   1d2ba:	208f      	movs	r0, #143	; 0x8f
   1d2bc:	4c36      	ldr	r4, [pc, #216]	; (1d398 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1d2be:	47a0      	blx	r4
   1d2c0:	693b      	ldr	r3, [r7, #16]
   1d2c2:	0018      	movs	r0, r3
   1d2c4:	4b32      	ldr	r3, [pc, #200]	; (1d390 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d2c6:	4798      	blx	r3
   1d2c8:	0003      	movs	r3, r0
   1d2ca:	b2d9      	uxtb	r1, r3
   1d2cc:	693b      	ldr	r3, [r7, #16]
   1d2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d2d0:	b2db      	uxtb	r3, r3
   1d2d2:	001a      	movs	r2, r3
   1d2d4:	2003      	movs	r0, #3
   1d2d6:	4b31      	ldr	r3, [pc, #196]	; (1d39c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1d2d8:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1d2da:	693b      	ldr	r3, [r7, #16]
   1d2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d2de:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1d2e0:	693b      	ldr	r3, [r7, #16]
   1d2e2:	697a      	ldr	r2, [r7, #20]
   1d2e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d2e6:	693b      	ldr	r3, [r7, #16]
   1d2e8:	699b      	ldr	r3, [r3, #24]
   1d2ea:	2b00      	cmp	r3, #0
   1d2ec:	db04      	blt.n	1d2f8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d2ee:	697b      	ldr	r3, [r7, #20]
   1d2f0:	2205      	movs	r2, #5
   1d2f2:	1ad2      	subs	r2, r2, r3
   1d2f4:	693b      	ldr	r3, [r7, #16]
   1d2f6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1d2f8:	693b      	ldr	r3, [r7, #16]
   1d2fa:	6959      	ldr	r1, [r3, #20]
   1d2fc:	68ba      	ldr	r2, [r7, #8]
   1d2fe:	0013      	movs	r3, r2
   1d300:	009b      	lsls	r3, r3, #2
   1d302:	189b      	adds	r3, r3, r2
   1d304:	009b      	lsls	r3, r3, #2
   1d306:	4a26      	ldr	r2, [pc, #152]	; (1d3a0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d308:	189b      	adds	r3, r3, r2
   1d30a:	4299      	cmp	r1, r3
   1d30c:	d101      	bne.n	1d312 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1d30e:	2301      	movs	r3, #1
   1d310:	e000      	b.n	1d314 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1d312:	2300      	movs	r3, #0
   1d314:	2b00      	cmp	r3, #0
   1d316:	d031      	beq.n	1d37c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d318:	693b      	ldr	r3, [r7, #16]
   1d31a:	3304      	adds	r3, #4
   1d31c:	0018      	movs	r0, r3
   1d31e:	4b21      	ldr	r3, [pc, #132]	; (1d3a4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1d320:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1d322:	693b      	ldr	r3, [r7, #16]
   1d324:	0018      	movs	r0, r3
   1d326:	4b18      	ldr	r3, [pc, #96]	; (1d388 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d328:	4798      	blx	r3
   1d32a:	0003      	movs	r3, r0
   1d32c:	001a      	movs	r2, r3
   1d32e:	4b17      	ldr	r3, [pc, #92]	; (1d38c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d330:	881b      	ldrh	r3, [r3, #0]
   1d332:	4013      	ands	r3, r2
   1d334:	b29b      	uxth	r3, r3
   1d336:	2b00      	cmp	r3, #0
   1d338:	d008      	beq.n	1d34c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1d33a:	693b      	ldr	r3, [r7, #16]
   1d33c:	0018      	movs	r0, r3
   1d33e:	4b14      	ldr	r3, [pc, #80]	; (1d390 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d340:	4798      	blx	r3
   1d342:	0003      	movs	r3, r0
   1d344:	b2db      	uxtb	r3, r3
   1d346:	0018      	movs	r0, r3
   1d348:	4b17      	ldr	r3, [pc, #92]	; (1d3a8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1d34a:	4798      	blx	r3
   1d34c:	693b      	ldr	r3, [r7, #16]
   1d34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d350:	4b16      	ldr	r3, [pc, #88]	; (1d3ac <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d352:	681b      	ldr	r3, [r3, #0]
   1d354:	429a      	cmp	r2, r3
   1d356:	d903      	bls.n	1d360 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1d358:	693b      	ldr	r3, [r7, #16]
   1d35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d35c:	4b13      	ldr	r3, [pc, #76]	; (1d3ac <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d35e:	601a      	str	r2, [r3, #0]
   1d360:	693b      	ldr	r3, [r7, #16]
   1d362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d364:	0013      	movs	r3, r2
   1d366:	009b      	lsls	r3, r3, #2
   1d368:	189b      	adds	r3, r3, r2
   1d36a:	009b      	lsls	r3, r3, #2
   1d36c:	4a0c      	ldr	r2, [pc, #48]	; (1d3a0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d36e:	189a      	adds	r2, r3, r2
   1d370:	693b      	ldr	r3, [r7, #16]
   1d372:	3304      	adds	r3, #4
   1d374:	0019      	movs	r1, r3
   1d376:	0010      	movs	r0, r2
   1d378:	4b0d      	ldr	r3, [pc, #52]	; (1d3b0 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1d37a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d37c:	46c0      	nop			; (mov r8, r8)
   1d37e:	46bd      	mov	sp, r7
   1d380:	b007      	add	sp, #28
   1d382:	bd90      	pop	{r4, r7, pc}
   1d384:	20003f5c 	.word	0x20003f5c
   1d388:	000181c1 	.word	0x000181c1
   1d38c:	20000104 	.word	0x20000104
   1d390:	000181a1 	.word	0x000181a1
   1d394:	00019179 	.word	0x00019179
   1d398:	00018ce9 	.word	0x00018ce9
   1d39c:	000190d5 	.word	0x000190d5
   1d3a0:	20003f60 	.word	0x20003f60
   1d3a4:	0001a03b 	.word	0x0001a03b
   1d3a8:	00018971 	.word	0x00018971
   1d3ac:	2000403c 	.word	0x2000403c
   1d3b0:	00019f8b 	.word	0x00019f8b

0001d3b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1d3b4:	b580      	push	{r7, lr}
   1d3b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1d3b8:	4b06      	ldr	r3, [pc, #24]	; (1d3d4 <pvTaskIncrementMutexHeldCount+0x20>)
   1d3ba:	681b      	ldr	r3, [r3, #0]
   1d3bc:	2b00      	cmp	r3, #0
   1d3be:	d004      	beq.n	1d3ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1d3c0:	4b04      	ldr	r3, [pc, #16]	; (1d3d4 <pvTaskIncrementMutexHeldCount+0x20>)
   1d3c2:	681b      	ldr	r3, [r3, #0]
   1d3c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d3c6:	3201      	adds	r2, #1
   1d3c8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1d3ca:	4b02      	ldr	r3, [pc, #8]	; (1d3d4 <pvTaskIncrementMutexHeldCount+0x20>)
   1d3cc:	681b      	ldr	r3, [r3, #0]
	}
   1d3ce:	0018      	movs	r0, r3
   1d3d0:	46bd      	mov	sp, r7
   1d3d2:	bd80      	pop	{r7, pc}
   1d3d4:	20003f5c 	.word	0x20003f5c

0001d3d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1d3d8:	b580      	push	{r7, lr}
   1d3da:	b084      	sub	sp, #16
   1d3dc:	af00      	add	r7, sp, #0
   1d3de:	6078      	str	r0, [r7, #4]
   1d3e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1d3e2:	4b21      	ldr	r3, [pc, #132]	; (1d468 <prvAddCurrentTaskToDelayedList+0x90>)
   1d3e4:	681b      	ldr	r3, [r3, #0]
   1d3e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d3e8:	4b20      	ldr	r3, [pc, #128]	; (1d46c <prvAddCurrentTaskToDelayedList+0x94>)
   1d3ea:	681b      	ldr	r3, [r3, #0]
   1d3ec:	3304      	adds	r3, #4
   1d3ee:	0018      	movs	r0, r3
   1d3f0:	4b1f      	ldr	r3, [pc, #124]	; (1d470 <prvAddCurrentTaskToDelayedList+0x98>)
   1d3f2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1d3f4:	687b      	ldr	r3, [r7, #4]
   1d3f6:	3301      	adds	r3, #1
   1d3f8:	d10b      	bne.n	1d412 <prvAddCurrentTaskToDelayedList+0x3a>
   1d3fa:	683b      	ldr	r3, [r7, #0]
   1d3fc:	2b00      	cmp	r3, #0
   1d3fe:	d008      	beq.n	1d412 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d400:	4b1a      	ldr	r3, [pc, #104]	; (1d46c <prvAddCurrentTaskToDelayedList+0x94>)
   1d402:	681b      	ldr	r3, [r3, #0]
   1d404:	1d1a      	adds	r2, r3, #4
   1d406:	4b1b      	ldr	r3, [pc, #108]	; (1d474 <prvAddCurrentTaskToDelayedList+0x9c>)
   1d408:	0011      	movs	r1, r2
   1d40a:	0018      	movs	r0, r3
   1d40c:	4b1a      	ldr	r3, [pc, #104]	; (1d478 <prvAddCurrentTaskToDelayedList+0xa0>)
   1d40e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1d410:	e026      	b.n	1d460 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1d412:	68fa      	ldr	r2, [r7, #12]
   1d414:	687b      	ldr	r3, [r7, #4]
   1d416:	18d3      	adds	r3, r2, r3
   1d418:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1d41a:	4b14      	ldr	r3, [pc, #80]	; (1d46c <prvAddCurrentTaskToDelayedList+0x94>)
   1d41c:	681b      	ldr	r3, [r3, #0]
   1d41e:	68ba      	ldr	r2, [r7, #8]
   1d420:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1d422:	68ba      	ldr	r2, [r7, #8]
   1d424:	68fb      	ldr	r3, [r7, #12]
   1d426:	429a      	cmp	r2, r3
   1d428:	d209      	bcs.n	1d43e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d42a:	4b14      	ldr	r3, [pc, #80]	; (1d47c <prvAddCurrentTaskToDelayedList+0xa4>)
   1d42c:	681a      	ldr	r2, [r3, #0]
   1d42e:	4b0f      	ldr	r3, [pc, #60]	; (1d46c <prvAddCurrentTaskToDelayedList+0x94>)
   1d430:	681b      	ldr	r3, [r3, #0]
   1d432:	3304      	adds	r3, #4
   1d434:	0019      	movs	r1, r3
   1d436:	0010      	movs	r0, r2
   1d438:	4b11      	ldr	r3, [pc, #68]	; (1d480 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d43a:	4798      	blx	r3
}
   1d43c:	e010      	b.n	1d460 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d43e:	4b11      	ldr	r3, [pc, #68]	; (1d484 <prvAddCurrentTaskToDelayedList+0xac>)
   1d440:	681a      	ldr	r2, [r3, #0]
   1d442:	4b0a      	ldr	r3, [pc, #40]	; (1d46c <prvAddCurrentTaskToDelayedList+0x94>)
   1d444:	681b      	ldr	r3, [r3, #0]
   1d446:	3304      	adds	r3, #4
   1d448:	0019      	movs	r1, r3
   1d44a:	0010      	movs	r0, r2
   1d44c:	4b0c      	ldr	r3, [pc, #48]	; (1d480 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d44e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1d450:	4b0d      	ldr	r3, [pc, #52]	; (1d488 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d452:	681b      	ldr	r3, [r3, #0]
   1d454:	68ba      	ldr	r2, [r7, #8]
   1d456:	429a      	cmp	r2, r3
   1d458:	d202      	bcs.n	1d460 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1d45a:	4b0b      	ldr	r3, [pc, #44]	; (1d488 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d45c:	68ba      	ldr	r2, [r7, #8]
   1d45e:	601a      	str	r2, [r3, #0]
}
   1d460:	46c0      	nop			; (mov r8, r8)
   1d462:	46bd      	mov	sp, r7
   1d464:	b004      	add	sp, #16
   1d466:	bd80      	pop	{r7, pc}
   1d468:	20004038 	.word	0x20004038
   1d46c:	20003f5c 	.word	0x20003f5c
   1d470:	0001a03b 	.word	0x0001a03b
   1d474:	20004020 	.word	0x20004020
   1d478:	00019f8b 	.word	0x00019f8b
   1d47c:	20003ff0 	.word	0x20003ff0
   1d480:	00019fcf 	.word	0x00019fcf
   1d484:	20003fec 	.word	0x20003fec
   1d488:	20004054 	.word	0x20004054

0001d48c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1d48c:	b590      	push	{r4, r7, lr}
   1d48e:	b085      	sub	sp, #20
   1d490:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1d492:	2300      	movs	r3, #0
   1d494:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1d496:	4b0e      	ldr	r3, [pc, #56]	; (1d4d0 <xTimerCreateTimerTask+0x44>)
   1d498:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1d49a:	4b0e      	ldr	r3, [pc, #56]	; (1d4d4 <xTimerCreateTimerTask+0x48>)
   1d49c:	681b      	ldr	r3, [r3, #0]
   1d49e:	2b00      	cmp	r3, #0
   1d4a0:	d00b      	beq.n	1d4ba <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1d4a2:	490d      	ldr	r1, [pc, #52]	; (1d4d8 <xTimerCreateTimerTask+0x4c>)
   1d4a4:	480d      	ldr	r0, [pc, #52]	; (1d4dc <xTimerCreateTimerTask+0x50>)
   1d4a6:	4b0e      	ldr	r3, [pc, #56]	; (1d4e0 <xTimerCreateTimerTask+0x54>)
   1d4a8:	9301      	str	r3, [sp, #4]
   1d4aa:	2302      	movs	r3, #2
   1d4ac:	9300      	str	r3, [sp, #0]
   1d4ae:	2300      	movs	r3, #0
   1d4b0:	2280      	movs	r2, #128	; 0x80
   1d4b2:	4c0c      	ldr	r4, [pc, #48]	; (1d4e4 <xTimerCreateTimerTask+0x58>)
   1d4b4:	47a0      	blx	r4
   1d4b6:	0003      	movs	r3, r0
   1d4b8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1d4ba:	687b      	ldr	r3, [r7, #4]
   1d4bc:	2b00      	cmp	r3, #0
   1d4be:	d101      	bne.n	1d4c4 <xTimerCreateTimerTask+0x38>
   1d4c0:	b672      	cpsid	i
   1d4c2:	e7fe      	b.n	1d4c2 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1d4c4:	687b      	ldr	r3, [r7, #4]
}
   1d4c6:	0018      	movs	r0, r3
   1d4c8:	46bd      	mov	sp, r7
   1d4ca:	b003      	add	sp, #12
   1d4cc:	bd90      	pop	{r4, r7, pc}
   1d4ce:	46c0      	nop			; (mov r8, r8)
   1d4d0:	0001d9d5 	.word	0x0001d9d5
   1d4d4:	20004090 	.word	0x20004090
   1d4d8:	0003838c 	.word	0x0003838c
   1d4dc:	0001d60d 	.word	0x0001d60d
   1d4e0:	20004094 	.word	0x20004094
   1d4e4:	0001be25 	.word	0x0001be25

0001d4e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1d4e8:	b590      	push	{r4, r7, lr}
   1d4ea:	b089      	sub	sp, #36	; 0x24
   1d4ec:	af00      	add	r7, sp, #0
   1d4ee:	60f8      	str	r0, [r7, #12]
   1d4f0:	60b9      	str	r1, [r7, #8]
   1d4f2:	607a      	str	r2, [r7, #4]
   1d4f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1d4f6:	2300      	movs	r3, #0
   1d4f8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1d4fa:	68fb      	ldr	r3, [r7, #12]
   1d4fc:	2b00      	cmp	r3, #0
   1d4fe:	d101      	bne.n	1d504 <xTimerGenericCommand+0x1c>
   1d500:	b672      	cpsid	i
   1d502:	e7fe      	b.n	1d502 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1d504:	4b1e      	ldr	r3, [pc, #120]	; (1d580 <xTimerGenericCommand+0x98>)
   1d506:	681b      	ldr	r3, [r3, #0]
   1d508:	2b00      	cmp	r3, #0
   1d50a:	d033      	beq.n	1d574 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1d50c:	2310      	movs	r3, #16
   1d50e:	18fb      	adds	r3, r7, r3
   1d510:	68ba      	ldr	r2, [r7, #8]
   1d512:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1d514:	2310      	movs	r3, #16
   1d516:	18fb      	adds	r3, r7, r3
   1d518:	687a      	ldr	r2, [r7, #4]
   1d51a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1d51c:	2310      	movs	r3, #16
   1d51e:	18fb      	adds	r3, r7, r3
   1d520:	68fa      	ldr	r2, [r7, #12]
   1d522:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1d524:	68bb      	ldr	r3, [r7, #8]
   1d526:	2b05      	cmp	r3, #5
   1d528:	dc1a      	bgt.n	1d560 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1d52a:	4b16      	ldr	r3, [pc, #88]	; (1d584 <xTimerGenericCommand+0x9c>)
   1d52c:	4798      	blx	r3
   1d52e:	0003      	movs	r3, r0
   1d530:	2b02      	cmp	r3, #2
   1d532:	d10a      	bne.n	1d54a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1d534:	4b12      	ldr	r3, [pc, #72]	; (1d580 <xTimerGenericCommand+0x98>)
   1d536:	6818      	ldr	r0, [r3, #0]
   1d538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d53a:	2310      	movs	r3, #16
   1d53c:	18f9      	adds	r1, r7, r3
   1d53e:	2300      	movs	r3, #0
   1d540:	4c11      	ldr	r4, [pc, #68]	; (1d588 <xTimerGenericCommand+0xa0>)
   1d542:	47a0      	blx	r4
   1d544:	0003      	movs	r3, r0
   1d546:	61fb      	str	r3, [r7, #28]
   1d548:	e014      	b.n	1d574 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1d54a:	4b0d      	ldr	r3, [pc, #52]	; (1d580 <xTimerGenericCommand+0x98>)
   1d54c:	6818      	ldr	r0, [r3, #0]
   1d54e:	2310      	movs	r3, #16
   1d550:	18f9      	adds	r1, r7, r3
   1d552:	2300      	movs	r3, #0
   1d554:	2200      	movs	r2, #0
   1d556:	4c0c      	ldr	r4, [pc, #48]	; (1d588 <xTimerGenericCommand+0xa0>)
   1d558:	47a0      	blx	r4
   1d55a:	0003      	movs	r3, r0
   1d55c:	61fb      	str	r3, [r7, #28]
   1d55e:	e009      	b.n	1d574 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1d560:	4b07      	ldr	r3, [pc, #28]	; (1d580 <xTimerGenericCommand+0x98>)
   1d562:	6818      	ldr	r0, [r3, #0]
   1d564:	683a      	ldr	r2, [r7, #0]
   1d566:	2310      	movs	r3, #16
   1d568:	18f9      	adds	r1, r7, r3
   1d56a:	2300      	movs	r3, #0
   1d56c:	4c07      	ldr	r4, [pc, #28]	; (1d58c <xTimerGenericCommand+0xa4>)
   1d56e:	47a0      	blx	r4
   1d570:	0003      	movs	r3, r0
   1d572:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1d574:	69fb      	ldr	r3, [r7, #28]
}
   1d576:	0018      	movs	r0, r3
   1d578:	46bd      	mov	sp, r7
   1d57a:	b009      	add	sp, #36	; 0x24
   1d57c:	bd90      	pop	{r4, r7, pc}
   1d57e:	46c0      	nop			; (mov r8, r8)
   1d580:	20004090 	.word	0x20004090
   1d584:	0001cee9 	.word	0x0001cee9
   1d588:	0001a75d 	.word	0x0001a75d
   1d58c:	0001abbd 	.word	0x0001abbd

0001d590 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1d590:	b590      	push	{r4, r7, lr}
   1d592:	b087      	sub	sp, #28
   1d594:	af02      	add	r7, sp, #8
   1d596:	6078      	str	r0, [r7, #4]
   1d598:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d59a:	4b18      	ldr	r3, [pc, #96]	; (1d5fc <prvProcessExpiredTimer+0x6c>)
   1d59c:	681b      	ldr	r3, [r3, #0]
   1d59e:	68db      	ldr	r3, [r3, #12]
   1d5a0:	68db      	ldr	r3, [r3, #12]
   1d5a2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d5a4:	68fb      	ldr	r3, [r7, #12]
   1d5a6:	3304      	adds	r3, #4
   1d5a8:	0018      	movs	r0, r3
   1d5aa:	4b15      	ldr	r3, [pc, #84]	; (1d600 <prvProcessExpiredTimer+0x70>)
   1d5ac:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d5ae:	68fb      	ldr	r3, [r7, #12]
   1d5b0:	69db      	ldr	r3, [r3, #28]
   1d5b2:	2b01      	cmp	r3, #1
   1d5b4:	d119      	bne.n	1d5ea <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1d5b6:	68fb      	ldr	r3, [r7, #12]
   1d5b8:	699a      	ldr	r2, [r3, #24]
   1d5ba:	687b      	ldr	r3, [r7, #4]
   1d5bc:	18d1      	adds	r1, r2, r3
   1d5be:	687b      	ldr	r3, [r7, #4]
   1d5c0:	683a      	ldr	r2, [r7, #0]
   1d5c2:	68f8      	ldr	r0, [r7, #12]
   1d5c4:	4c0f      	ldr	r4, [pc, #60]	; (1d604 <prvProcessExpiredTimer+0x74>)
   1d5c6:	47a0      	blx	r4
   1d5c8:	1e03      	subs	r3, r0, #0
   1d5ca:	d00e      	beq.n	1d5ea <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d5cc:	687a      	ldr	r2, [r7, #4]
   1d5ce:	68f8      	ldr	r0, [r7, #12]
   1d5d0:	2300      	movs	r3, #0
   1d5d2:	9300      	str	r3, [sp, #0]
   1d5d4:	2300      	movs	r3, #0
   1d5d6:	2100      	movs	r1, #0
   1d5d8:	4c0b      	ldr	r4, [pc, #44]	; (1d608 <prvProcessExpiredTimer+0x78>)
   1d5da:	47a0      	blx	r4
   1d5dc:	0003      	movs	r3, r0
   1d5de:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1d5e0:	68bb      	ldr	r3, [r7, #8]
   1d5e2:	2b00      	cmp	r3, #0
   1d5e4:	d101      	bne.n	1d5ea <prvProcessExpiredTimer+0x5a>
   1d5e6:	b672      	cpsid	i
   1d5e8:	e7fe      	b.n	1d5e8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d5ea:	68fb      	ldr	r3, [r7, #12]
   1d5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d5ee:	68fa      	ldr	r2, [r7, #12]
   1d5f0:	0010      	movs	r0, r2
   1d5f2:	4798      	blx	r3
}
   1d5f4:	46c0      	nop			; (mov r8, r8)
   1d5f6:	46bd      	mov	sp, r7
   1d5f8:	b005      	add	sp, #20
   1d5fa:	bd90      	pop	{r4, r7, pc}
   1d5fc:	20004088 	.word	0x20004088
   1d600:	0001a03b 	.word	0x0001a03b
   1d604:	0001d775 	.word	0x0001d775
   1d608:	0001d4e9 	.word	0x0001d4e9

0001d60c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1d60c:	b580      	push	{r7, lr}
   1d60e:	b084      	sub	sp, #16
   1d610:	af00      	add	r7, sp, #0
   1d612:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1d614:	4b08      	ldr	r3, [pc, #32]	; (1d638 <prvTimerTask+0x2c>)
   1d616:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d618:	2308      	movs	r3, #8
   1d61a:	18fb      	adds	r3, r7, r3
   1d61c:	0018      	movs	r0, r3
   1d61e:	4b07      	ldr	r3, [pc, #28]	; (1d63c <prvTimerTask+0x30>)
   1d620:	4798      	blx	r3
   1d622:	0003      	movs	r3, r0
   1d624:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1d626:	68ba      	ldr	r2, [r7, #8]
   1d628:	68fb      	ldr	r3, [r7, #12]
   1d62a:	0011      	movs	r1, r2
   1d62c:	0018      	movs	r0, r3
   1d62e:	4b04      	ldr	r3, [pc, #16]	; (1d640 <prvTimerTask+0x34>)
   1d630:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1d632:	4b04      	ldr	r3, [pc, #16]	; (1d644 <prvTimerTask+0x38>)
   1d634:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d636:	e7ef      	b.n	1d618 <prvTimerTask+0xc>
   1d638:	000327dd 	.word	0x000327dd
   1d63c:	0001d6ed 	.word	0x0001d6ed
   1d640:	0001d649 	.word	0x0001d649
   1d644:	0001d7fd 	.word	0x0001d7fd

0001d648 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1d648:	b580      	push	{r7, lr}
   1d64a:	b084      	sub	sp, #16
   1d64c:	af00      	add	r7, sp, #0
   1d64e:	6078      	str	r0, [r7, #4]
   1d650:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1d652:	4b1e      	ldr	r3, [pc, #120]	; (1d6cc <prvProcessTimerOrBlockTask+0x84>)
   1d654:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d656:	2308      	movs	r3, #8
   1d658:	18fb      	adds	r3, r7, r3
   1d65a:	0018      	movs	r0, r3
   1d65c:	4b1c      	ldr	r3, [pc, #112]	; (1d6d0 <prvProcessTimerOrBlockTask+0x88>)
   1d65e:	4798      	blx	r3
   1d660:	0003      	movs	r3, r0
   1d662:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1d664:	68bb      	ldr	r3, [r7, #8]
   1d666:	2b00      	cmp	r3, #0
   1d668:	d129      	bne.n	1d6be <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1d66a:	683b      	ldr	r3, [r7, #0]
   1d66c:	2b00      	cmp	r3, #0
   1d66e:	d10c      	bne.n	1d68a <prvProcessTimerOrBlockTask+0x42>
   1d670:	687a      	ldr	r2, [r7, #4]
   1d672:	68fb      	ldr	r3, [r7, #12]
   1d674:	429a      	cmp	r2, r3
   1d676:	d808      	bhi.n	1d68a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1d678:	4b16      	ldr	r3, [pc, #88]	; (1d6d4 <prvProcessTimerOrBlockTask+0x8c>)
   1d67a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1d67c:	68fa      	ldr	r2, [r7, #12]
   1d67e:	687b      	ldr	r3, [r7, #4]
   1d680:	0011      	movs	r1, r2
   1d682:	0018      	movs	r0, r3
   1d684:	4b14      	ldr	r3, [pc, #80]	; (1d6d8 <prvProcessTimerOrBlockTask+0x90>)
   1d686:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1d688:	e01b      	b.n	1d6c2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1d68a:	683b      	ldr	r3, [r7, #0]
   1d68c:	2b00      	cmp	r3, #0
   1d68e:	d006      	beq.n	1d69e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1d690:	4b12      	ldr	r3, [pc, #72]	; (1d6dc <prvProcessTimerOrBlockTask+0x94>)
   1d692:	681b      	ldr	r3, [r3, #0]
   1d694:	681b      	ldr	r3, [r3, #0]
   1d696:	425a      	negs	r2, r3
   1d698:	4153      	adcs	r3, r2
   1d69a:	b2db      	uxtb	r3, r3
   1d69c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1d69e:	4b10      	ldr	r3, [pc, #64]	; (1d6e0 <prvProcessTimerOrBlockTask+0x98>)
   1d6a0:	6818      	ldr	r0, [r3, #0]
   1d6a2:	687a      	ldr	r2, [r7, #4]
   1d6a4:	68fb      	ldr	r3, [r7, #12]
   1d6a6:	1ad3      	subs	r3, r2, r3
   1d6a8:	683a      	ldr	r2, [r7, #0]
   1d6aa:	0019      	movs	r1, r3
   1d6ac:	4b0d      	ldr	r3, [pc, #52]	; (1d6e4 <prvProcessTimerOrBlockTask+0x9c>)
   1d6ae:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1d6b0:	4b08      	ldr	r3, [pc, #32]	; (1d6d4 <prvProcessTimerOrBlockTask+0x8c>)
   1d6b2:	4798      	blx	r3
   1d6b4:	1e03      	subs	r3, r0, #0
   1d6b6:	d104      	bne.n	1d6c2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1d6b8:	4b0b      	ldr	r3, [pc, #44]	; (1d6e8 <prvProcessTimerOrBlockTask+0xa0>)
   1d6ba:	4798      	blx	r3
}
   1d6bc:	e001      	b.n	1d6c2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1d6be:	4b05      	ldr	r3, [pc, #20]	; (1d6d4 <prvProcessTimerOrBlockTask+0x8c>)
   1d6c0:	4798      	blx	r3
}
   1d6c2:	46c0      	nop			; (mov r8, r8)
   1d6c4:	46bd      	mov	sp, r7
   1d6c6:	b004      	add	sp, #16
   1d6c8:	bd80      	pop	{r7, pc}
   1d6ca:	46c0      	nop			; (mov r8, r8)
   1d6cc:	0001c481 	.word	0x0001c481
   1d6d0:	0001d72d 	.word	0x0001d72d
   1d6d4:	0001c499 	.word	0x0001c499
   1d6d8:	0001d591 	.word	0x0001d591
   1d6dc:	2000408c 	.word	0x2000408c
   1d6e0:	20004090 	.word	0x20004090
   1d6e4:	0001bc21 	.word	0x0001bc21
   1d6e8:	0001a1b1 	.word	0x0001a1b1

0001d6ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1d6ec:	b580      	push	{r7, lr}
   1d6ee:	b084      	sub	sp, #16
   1d6f0:	af00      	add	r7, sp, #0
   1d6f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1d6f4:	4b0c      	ldr	r3, [pc, #48]	; (1d728 <prvGetNextExpireTime+0x3c>)
   1d6f6:	681b      	ldr	r3, [r3, #0]
   1d6f8:	681b      	ldr	r3, [r3, #0]
   1d6fa:	425a      	negs	r2, r3
   1d6fc:	4153      	adcs	r3, r2
   1d6fe:	b2db      	uxtb	r3, r3
   1d700:	001a      	movs	r2, r3
   1d702:	687b      	ldr	r3, [r7, #4]
   1d704:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1d706:	687b      	ldr	r3, [r7, #4]
   1d708:	681b      	ldr	r3, [r3, #0]
   1d70a:	2b00      	cmp	r3, #0
   1d70c:	d105      	bne.n	1d71a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d70e:	4b06      	ldr	r3, [pc, #24]	; (1d728 <prvGetNextExpireTime+0x3c>)
   1d710:	681b      	ldr	r3, [r3, #0]
   1d712:	68db      	ldr	r3, [r3, #12]
   1d714:	681b      	ldr	r3, [r3, #0]
   1d716:	60fb      	str	r3, [r7, #12]
   1d718:	e001      	b.n	1d71e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1d71a:	2300      	movs	r3, #0
   1d71c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1d71e:	68fb      	ldr	r3, [r7, #12]
}
   1d720:	0018      	movs	r0, r3
   1d722:	46bd      	mov	sp, r7
   1d724:	b004      	add	sp, #16
   1d726:	bd80      	pop	{r7, pc}
   1d728:	20004088 	.word	0x20004088

0001d72c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1d72c:	b580      	push	{r7, lr}
   1d72e:	b084      	sub	sp, #16
   1d730:	af00      	add	r7, sp, #0
   1d732:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1d734:	4b0c      	ldr	r3, [pc, #48]	; (1d768 <prvSampleTimeNow+0x3c>)
   1d736:	4798      	blx	r3
   1d738:	0003      	movs	r3, r0
   1d73a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1d73c:	4b0b      	ldr	r3, [pc, #44]	; (1d76c <prvSampleTimeNow+0x40>)
   1d73e:	681b      	ldr	r3, [r3, #0]
   1d740:	68fa      	ldr	r2, [r7, #12]
   1d742:	429a      	cmp	r2, r3
   1d744:	d205      	bcs.n	1d752 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1d746:	4b0a      	ldr	r3, [pc, #40]	; (1d770 <prvSampleTimeNow+0x44>)
   1d748:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1d74a:	687b      	ldr	r3, [r7, #4]
   1d74c:	2201      	movs	r2, #1
   1d74e:	601a      	str	r2, [r3, #0]
   1d750:	e002      	b.n	1d758 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1d752:	687b      	ldr	r3, [r7, #4]
   1d754:	2200      	movs	r2, #0
   1d756:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1d758:	4b04      	ldr	r3, [pc, #16]	; (1d76c <prvSampleTimeNow+0x40>)
   1d75a:	68fa      	ldr	r2, [r7, #12]
   1d75c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1d75e:	68fb      	ldr	r3, [r7, #12]
}
   1d760:	0018      	movs	r0, r3
   1d762:	46bd      	mov	sp, r7
   1d764:	b004      	add	sp, #16
   1d766:	bd80      	pop	{r7, pc}
   1d768:	0001c609 	.word	0x0001c609
   1d76c:	20004098 	.word	0x20004098
   1d770:	0001d915 	.word	0x0001d915

0001d774 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1d774:	b580      	push	{r7, lr}
   1d776:	b086      	sub	sp, #24
   1d778:	af00      	add	r7, sp, #0
   1d77a:	60f8      	str	r0, [r7, #12]
   1d77c:	60b9      	str	r1, [r7, #8]
   1d77e:	607a      	str	r2, [r7, #4]
   1d780:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1d782:	2300      	movs	r3, #0
   1d784:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1d786:	68fb      	ldr	r3, [r7, #12]
   1d788:	68ba      	ldr	r2, [r7, #8]
   1d78a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d78c:	68fb      	ldr	r3, [r7, #12]
   1d78e:	68fa      	ldr	r2, [r7, #12]
   1d790:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1d792:	68ba      	ldr	r2, [r7, #8]
   1d794:	687b      	ldr	r3, [r7, #4]
   1d796:	429a      	cmp	r2, r3
   1d798:	d812      	bhi.n	1d7c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d79a:	687a      	ldr	r2, [r7, #4]
   1d79c:	683b      	ldr	r3, [r7, #0]
   1d79e:	1ad2      	subs	r2, r2, r3
   1d7a0:	68fb      	ldr	r3, [r7, #12]
   1d7a2:	699b      	ldr	r3, [r3, #24]
   1d7a4:	429a      	cmp	r2, r3
   1d7a6:	d302      	bcc.n	1d7ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1d7a8:	2301      	movs	r3, #1
   1d7aa:	617b      	str	r3, [r7, #20]
   1d7ac:	e01b      	b.n	1d7e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1d7ae:	4b10      	ldr	r3, [pc, #64]	; (1d7f0 <prvInsertTimerInActiveList+0x7c>)
   1d7b0:	681a      	ldr	r2, [r3, #0]
   1d7b2:	68fb      	ldr	r3, [r7, #12]
   1d7b4:	3304      	adds	r3, #4
   1d7b6:	0019      	movs	r1, r3
   1d7b8:	0010      	movs	r0, r2
   1d7ba:	4b0e      	ldr	r3, [pc, #56]	; (1d7f4 <prvInsertTimerInActiveList+0x80>)
   1d7bc:	4798      	blx	r3
   1d7be:	e012      	b.n	1d7e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1d7c0:	687a      	ldr	r2, [r7, #4]
   1d7c2:	683b      	ldr	r3, [r7, #0]
   1d7c4:	429a      	cmp	r2, r3
   1d7c6:	d206      	bcs.n	1d7d6 <prvInsertTimerInActiveList+0x62>
   1d7c8:	68ba      	ldr	r2, [r7, #8]
   1d7ca:	683b      	ldr	r3, [r7, #0]
   1d7cc:	429a      	cmp	r2, r3
   1d7ce:	d302      	bcc.n	1d7d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1d7d0:	2301      	movs	r3, #1
   1d7d2:	617b      	str	r3, [r7, #20]
   1d7d4:	e007      	b.n	1d7e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d7d6:	4b08      	ldr	r3, [pc, #32]	; (1d7f8 <prvInsertTimerInActiveList+0x84>)
   1d7d8:	681a      	ldr	r2, [r3, #0]
   1d7da:	68fb      	ldr	r3, [r7, #12]
   1d7dc:	3304      	adds	r3, #4
   1d7de:	0019      	movs	r1, r3
   1d7e0:	0010      	movs	r0, r2
   1d7e2:	4b04      	ldr	r3, [pc, #16]	; (1d7f4 <prvInsertTimerInActiveList+0x80>)
   1d7e4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1d7e6:	697b      	ldr	r3, [r7, #20]
}
   1d7e8:	0018      	movs	r0, r3
   1d7ea:	46bd      	mov	sp, r7
   1d7ec:	b006      	add	sp, #24
   1d7ee:	bd80      	pop	{r7, pc}
   1d7f0:	2000408c 	.word	0x2000408c
   1d7f4:	00019fcf 	.word	0x00019fcf
   1d7f8:	20004088 	.word	0x20004088

0001d7fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1d7fc:	b590      	push	{r4, r7, lr}
   1d7fe:	b08b      	sub	sp, #44	; 0x2c
   1d800:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d802:	e068      	b.n	1d8d6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1d804:	2308      	movs	r3, #8
   1d806:	18fb      	adds	r3, r7, r3
   1d808:	681b      	ldr	r3, [r3, #0]
   1d80a:	2b00      	cmp	r3, #0
   1d80c:	db63      	blt.n	1d8d6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1d80e:	2308      	movs	r3, #8
   1d810:	18fb      	adds	r3, r7, r3
   1d812:	689b      	ldr	r3, [r3, #8]
   1d814:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1d816:	69fb      	ldr	r3, [r7, #28]
   1d818:	695b      	ldr	r3, [r3, #20]
   1d81a:	2b00      	cmp	r3, #0
   1d81c:	d004      	beq.n	1d828 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d81e:	69fb      	ldr	r3, [r7, #28]
   1d820:	3304      	adds	r3, #4
   1d822:	0018      	movs	r0, r3
   1d824:	4b33      	ldr	r3, [pc, #204]	; (1d8f4 <prvProcessReceivedCommands+0xf8>)
   1d826:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d828:	1d3b      	adds	r3, r7, #4
   1d82a:	0018      	movs	r0, r3
   1d82c:	4b32      	ldr	r3, [pc, #200]	; (1d8f8 <prvProcessReceivedCommands+0xfc>)
   1d82e:	4798      	blx	r3
   1d830:	0003      	movs	r3, r0
   1d832:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1d834:	2308      	movs	r3, #8
   1d836:	18fb      	adds	r3, r7, r3
   1d838:	681b      	ldr	r3, [r3, #0]
   1d83a:	2b09      	cmp	r3, #9
   1d83c:	d84a      	bhi.n	1d8d4 <prvProcessReceivedCommands+0xd8>
   1d83e:	009a      	lsls	r2, r3, #2
   1d840:	4b2e      	ldr	r3, [pc, #184]	; (1d8fc <prvProcessReceivedCommands+0x100>)
   1d842:	18d3      	adds	r3, r2, r3
   1d844:	681b      	ldr	r3, [r3, #0]
   1d846:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1d848:	2308      	movs	r3, #8
   1d84a:	18fb      	adds	r3, r7, r3
   1d84c:	685a      	ldr	r2, [r3, #4]
   1d84e:	69fb      	ldr	r3, [r7, #28]
   1d850:	699b      	ldr	r3, [r3, #24]
   1d852:	18d1      	adds	r1, r2, r3
   1d854:	2308      	movs	r3, #8
   1d856:	18fb      	adds	r3, r7, r3
   1d858:	685b      	ldr	r3, [r3, #4]
   1d85a:	69ba      	ldr	r2, [r7, #24]
   1d85c:	69f8      	ldr	r0, [r7, #28]
   1d85e:	4c28      	ldr	r4, [pc, #160]	; (1d900 <prvProcessReceivedCommands+0x104>)
   1d860:	47a0      	blx	r4
   1d862:	1e03      	subs	r3, r0, #0
   1d864:	d037      	beq.n	1d8d6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d866:	69fb      	ldr	r3, [r7, #28]
   1d868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d86a:	69fa      	ldr	r2, [r7, #28]
   1d86c:	0010      	movs	r0, r2
   1d86e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d870:	69fb      	ldr	r3, [r7, #28]
   1d872:	69db      	ldr	r3, [r3, #28]
   1d874:	2b01      	cmp	r3, #1
   1d876:	d12e      	bne.n	1d8d6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1d878:	2308      	movs	r3, #8
   1d87a:	18fb      	adds	r3, r7, r3
   1d87c:	685a      	ldr	r2, [r3, #4]
   1d87e:	69fb      	ldr	r3, [r7, #28]
   1d880:	699b      	ldr	r3, [r3, #24]
   1d882:	18d2      	adds	r2, r2, r3
   1d884:	69f8      	ldr	r0, [r7, #28]
   1d886:	2300      	movs	r3, #0
   1d888:	9300      	str	r3, [sp, #0]
   1d88a:	2300      	movs	r3, #0
   1d88c:	2100      	movs	r1, #0
   1d88e:	4c1d      	ldr	r4, [pc, #116]	; (1d904 <prvProcessReceivedCommands+0x108>)
   1d890:	47a0      	blx	r4
   1d892:	0003      	movs	r3, r0
   1d894:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1d896:	697b      	ldr	r3, [r7, #20]
   1d898:	2b00      	cmp	r3, #0
   1d89a:	d11c      	bne.n	1d8d6 <prvProcessReceivedCommands+0xda>
   1d89c:	b672      	cpsid	i
   1d89e:	e7fe      	b.n	1d89e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1d8a0:	2308      	movs	r3, #8
   1d8a2:	18fb      	adds	r3, r7, r3
   1d8a4:	685a      	ldr	r2, [r3, #4]
   1d8a6:	69fb      	ldr	r3, [r7, #28]
   1d8a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1d8aa:	69fb      	ldr	r3, [r7, #28]
   1d8ac:	699b      	ldr	r3, [r3, #24]
   1d8ae:	2b00      	cmp	r3, #0
   1d8b0:	d101      	bne.n	1d8b6 <prvProcessReceivedCommands+0xba>
   1d8b2:	b672      	cpsid	i
   1d8b4:	e7fe      	b.n	1d8b4 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1d8b6:	69fb      	ldr	r3, [r7, #28]
   1d8b8:	699a      	ldr	r2, [r3, #24]
   1d8ba:	69bb      	ldr	r3, [r7, #24]
   1d8bc:	18d1      	adds	r1, r2, r3
   1d8be:	69bb      	ldr	r3, [r7, #24]
   1d8c0:	69ba      	ldr	r2, [r7, #24]
   1d8c2:	69f8      	ldr	r0, [r7, #28]
   1d8c4:	4c0e      	ldr	r4, [pc, #56]	; (1d900 <prvProcessReceivedCommands+0x104>)
   1d8c6:	47a0      	blx	r4
					break;
   1d8c8:	e005      	b.n	1d8d6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1d8ca:	69fb      	ldr	r3, [r7, #28]
   1d8cc:	0018      	movs	r0, r3
   1d8ce:	4b0e      	ldr	r3, [pc, #56]	; (1d908 <prvProcessReceivedCommands+0x10c>)
   1d8d0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1d8d2:	e000      	b.n	1d8d6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1d8d4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d8d6:	4b0d      	ldr	r3, [pc, #52]	; (1d90c <prvProcessReceivedCommands+0x110>)
   1d8d8:	681b      	ldr	r3, [r3, #0]
   1d8da:	2208      	movs	r2, #8
   1d8dc:	18b9      	adds	r1, r7, r2
   1d8de:	2200      	movs	r2, #0
   1d8e0:	0018      	movs	r0, r3
   1d8e2:	4b0b      	ldr	r3, [pc, #44]	; (1d910 <prvProcessReceivedCommands+0x114>)
   1d8e4:	4798      	blx	r3
   1d8e6:	1e03      	subs	r3, r0, #0
   1d8e8:	d18c      	bne.n	1d804 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1d8ea:	46c0      	nop			; (mov r8, r8)
   1d8ec:	46bd      	mov	sp, r7
   1d8ee:	b009      	add	sp, #36	; 0x24
   1d8f0:	bd90      	pop	{r4, r7, pc}
   1d8f2:	46c0      	nop			; (mov r8, r8)
   1d8f4:	0001a03b 	.word	0x0001a03b
   1d8f8:	0001d72d 	.word	0x0001d72d
   1d8fc:	00038394 	.word	0x00038394
   1d900:	0001d775 	.word	0x0001d775
   1d904:	0001d4e9 	.word	0x0001d4e9
   1d908:	0001a3c5 	.word	0x0001a3c5
   1d90c:	20004090 	.word	0x20004090
   1d910:	0001b015 	.word	0x0001b015

0001d914 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1d914:	b590      	push	{r4, r7, lr}
   1d916:	b089      	sub	sp, #36	; 0x24
   1d918:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d91a:	e03e      	b.n	1d99a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d91c:	4b28      	ldr	r3, [pc, #160]	; (1d9c0 <prvSwitchTimerLists+0xac>)
   1d91e:	681b      	ldr	r3, [r3, #0]
   1d920:	68db      	ldr	r3, [r3, #12]
   1d922:	681b      	ldr	r3, [r3, #0]
   1d924:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d926:	4b26      	ldr	r3, [pc, #152]	; (1d9c0 <prvSwitchTimerLists+0xac>)
   1d928:	681b      	ldr	r3, [r3, #0]
   1d92a:	68db      	ldr	r3, [r3, #12]
   1d92c:	68db      	ldr	r3, [r3, #12]
   1d92e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d930:	693b      	ldr	r3, [r7, #16]
   1d932:	3304      	adds	r3, #4
   1d934:	0018      	movs	r0, r3
   1d936:	4b23      	ldr	r3, [pc, #140]	; (1d9c4 <prvSwitchTimerLists+0xb0>)
   1d938:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d93a:	693b      	ldr	r3, [r7, #16]
   1d93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d93e:	693a      	ldr	r2, [r7, #16]
   1d940:	0010      	movs	r0, r2
   1d942:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d944:	693b      	ldr	r3, [r7, #16]
   1d946:	69db      	ldr	r3, [r3, #28]
   1d948:	2b01      	cmp	r3, #1
   1d94a:	d126      	bne.n	1d99a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1d94c:	693b      	ldr	r3, [r7, #16]
   1d94e:	699a      	ldr	r2, [r3, #24]
   1d950:	697b      	ldr	r3, [r7, #20]
   1d952:	18d3      	adds	r3, r2, r3
   1d954:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1d956:	68fa      	ldr	r2, [r7, #12]
   1d958:	697b      	ldr	r3, [r7, #20]
   1d95a:	429a      	cmp	r2, r3
   1d95c:	d90e      	bls.n	1d97c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1d95e:	693b      	ldr	r3, [r7, #16]
   1d960:	68fa      	ldr	r2, [r7, #12]
   1d962:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d964:	693b      	ldr	r3, [r7, #16]
   1d966:	693a      	ldr	r2, [r7, #16]
   1d968:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d96a:	4b15      	ldr	r3, [pc, #84]	; (1d9c0 <prvSwitchTimerLists+0xac>)
   1d96c:	681a      	ldr	r2, [r3, #0]
   1d96e:	693b      	ldr	r3, [r7, #16]
   1d970:	3304      	adds	r3, #4
   1d972:	0019      	movs	r1, r3
   1d974:	0010      	movs	r0, r2
   1d976:	4b14      	ldr	r3, [pc, #80]	; (1d9c8 <prvSwitchTimerLists+0xb4>)
   1d978:	4798      	blx	r3
   1d97a:	e00e      	b.n	1d99a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d97c:	697a      	ldr	r2, [r7, #20]
   1d97e:	6938      	ldr	r0, [r7, #16]
   1d980:	2300      	movs	r3, #0
   1d982:	9300      	str	r3, [sp, #0]
   1d984:	2300      	movs	r3, #0
   1d986:	2100      	movs	r1, #0
   1d988:	4c10      	ldr	r4, [pc, #64]	; (1d9cc <prvSwitchTimerLists+0xb8>)
   1d98a:	47a0      	blx	r4
   1d98c:	0003      	movs	r3, r0
   1d98e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1d990:	68bb      	ldr	r3, [r7, #8]
   1d992:	2b00      	cmp	r3, #0
   1d994:	d101      	bne.n	1d99a <prvSwitchTimerLists+0x86>
   1d996:	b672      	cpsid	i
   1d998:	e7fe      	b.n	1d998 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d99a:	4b09      	ldr	r3, [pc, #36]	; (1d9c0 <prvSwitchTimerLists+0xac>)
   1d99c:	681b      	ldr	r3, [r3, #0]
   1d99e:	681b      	ldr	r3, [r3, #0]
   1d9a0:	2b00      	cmp	r3, #0
   1d9a2:	d1bb      	bne.n	1d91c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1d9a4:	4b06      	ldr	r3, [pc, #24]	; (1d9c0 <prvSwitchTimerLists+0xac>)
   1d9a6:	681b      	ldr	r3, [r3, #0]
   1d9a8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1d9aa:	4b09      	ldr	r3, [pc, #36]	; (1d9d0 <prvSwitchTimerLists+0xbc>)
   1d9ac:	681a      	ldr	r2, [r3, #0]
   1d9ae:	4b04      	ldr	r3, [pc, #16]	; (1d9c0 <prvSwitchTimerLists+0xac>)
   1d9b0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1d9b2:	4b07      	ldr	r3, [pc, #28]	; (1d9d0 <prvSwitchTimerLists+0xbc>)
   1d9b4:	687a      	ldr	r2, [r7, #4]
   1d9b6:	601a      	str	r2, [r3, #0]
}
   1d9b8:	46c0      	nop			; (mov r8, r8)
   1d9ba:	46bd      	mov	sp, r7
   1d9bc:	b007      	add	sp, #28
   1d9be:	bd90      	pop	{r4, r7, pc}
   1d9c0:	20004088 	.word	0x20004088
   1d9c4:	0001a03b 	.word	0x0001a03b
   1d9c8:	00019fcf 	.word	0x00019fcf
   1d9cc:	0001d4e9 	.word	0x0001d4e9
   1d9d0:	2000408c 	.word	0x2000408c

0001d9d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1d9d4:	b580      	push	{r7, lr}
   1d9d6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1d9d8:	4b10      	ldr	r3, [pc, #64]	; (1da1c <prvCheckForValidListAndQueue+0x48>)
   1d9da:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1d9dc:	4b10      	ldr	r3, [pc, #64]	; (1da20 <prvCheckForValidListAndQueue+0x4c>)
   1d9de:	681b      	ldr	r3, [r3, #0]
   1d9e0:	2b00      	cmp	r3, #0
   1d9e2:	d115      	bne.n	1da10 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1d9e4:	4b0f      	ldr	r3, [pc, #60]	; (1da24 <prvCheckForValidListAndQueue+0x50>)
   1d9e6:	0018      	movs	r0, r3
   1d9e8:	4b0f      	ldr	r3, [pc, #60]	; (1da28 <prvCheckForValidListAndQueue+0x54>)
   1d9ea:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1d9ec:	4b0f      	ldr	r3, [pc, #60]	; (1da2c <prvCheckForValidListAndQueue+0x58>)
   1d9ee:	0018      	movs	r0, r3
   1d9f0:	4b0d      	ldr	r3, [pc, #52]	; (1da28 <prvCheckForValidListAndQueue+0x54>)
   1d9f2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1d9f4:	4b0e      	ldr	r3, [pc, #56]	; (1da30 <prvCheckForValidListAndQueue+0x5c>)
   1d9f6:	4a0b      	ldr	r2, [pc, #44]	; (1da24 <prvCheckForValidListAndQueue+0x50>)
   1d9f8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1d9fa:	4b0e      	ldr	r3, [pc, #56]	; (1da34 <prvCheckForValidListAndQueue+0x60>)
   1d9fc:	4a0b      	ldr	r2, [pc, #44]	; (1da2c <prvCheckForValidListAndQueue+0x58>)
   1d9fe:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1da00:	2200      	movs	r2, #0
   1da02:	210c      	movs	r1, #12
   1da04:	2005      	movs	r0, #5
   1da06:	4b0c      	ldr	r3, [pc, #48]	; (1da38 <prvCheckForValidListAndQueue+0x64>)
   1da08:	4798      	blx	r3
   1da0a:	0002      	movs	r2, r0
   1da0c:	4b04      	ldr	r3, [pc, #16]	; (1da20 <prvCheckForValidListAndQueue+0x4c>)
   1da0e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1da10:	4b0a      	ldr	r3, [pc, #40]	; (1da3c <prvCheckForValidListAndQueue+0x68>)
   1da12:	4798      	blx	r3
}
   1da14:	46c0      	nop			; (mov r8, r8)
   1da16:	46bd      	mov	sp, r7
   1da18:	bd80      	pop	{r7, pc}
   1da1a:	46c0      	nop			; (mov r8, r8)
   1da1c:	0001a1c9 	.word	0x0001a1c9
   1da20:	20004090 	.word	0x20004090
   1da24:	20004060 	.word	0x20004060
   1da28:	00019f39 	.word	0x00019f39
   1da2c:	20004074 	.word	0x20004074
   1da30:	20004088 	.word	0x20004088
   1da34:	2000408c 	.word	0x2000408c
   1da38:	0001a4b5 	.word	0x0001a4b5
   1da3c:	0001a1ed 	.word	0x0001a1ed

0001da40 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1da40:	b580      	push	{r7, lr}
   1da42:	b082      	sub	sp, #8
   1da44:	af00      	add	r7, sp, #0
   1da46:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1da48:	687b      	ldr	r3, [r7, #4]
   1da4a:	7c1b      	ldrb	r3, [r3, #16]
   1da4c:	2b00      	cmp	r3, #0
   1da4e:	d00b      	beq.n	1da68 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1da50:	687b      	ldr	r3, [r7, #4]
   1da52:	689b      	ldr	r3, [r3, #8]
   1da54:	1c5a      	adds	r2, r3, #1
   1da56:	687b      	ldr	r3, [r7, #4]
   1da58:	68d9      	ldr	r1, [r3, #12]
   1da5a:	4b10      	ldr	r3, [pc, #64]	; (1da9c <advance_pointer+0x5c>)
   1da5c:	0010      	movs	r0, r2
   1da5e:	4798      	blx	r3
   1da60:	000b      	movs	r3, r1
   1da62:	001a      	movs	r2, r3
   1da64:	687b      	ldr	r3, [r7, #4]
   1da66:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1da68:	687b      	ldr	r3, [r7, #4]
   1da6a:	685b      	ldr	r3, [r3, #4]
   1da6c:	1c5a      	adds	r2, r3, #1
   1da6e:	687b      	ldr	r3, [r7, #4]
   1da70:	68d9      	ldr	r1, [r3, #12]
   1da72:	4b0a      	ldr	r3, [pc, #40]	; (1da9c <advance_pointer+0x5c>)
   1da74:	0010      	movs	r0, r2
   1da76:	4798      	blx	r3
   1da78:	000b      	movs	r3, r1
   1da7a:	001a      	movs	r2, r3
   1da7c:	687b      	ldr	r3, [r7, #4]
   1da7e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1da80:	687b      	ldr	r3, [r7, #4]
   1da82:	685a      	ldr	r2, [r3, #4]
   1da84:	687b      	ldr	r3, [r7, #4]
   1da86:	689b      	ldr	r3, [r3, #8]
   1da88:	1ad3      	subs	r3, r2, r3
   1da8a:	425a      	negs	r2, r3
   1da8c:	4153      	adcs	r3, r2
   1da8e:	b2da      	uxtb	r2, r3
   1da90:	687b      	ldr	r3, [r7, #4]
   1da92:	741a      	strb	r2, [r3, #16]
 }
   1da94:	46c0      	nop			; (mov r8, r8)
   1da96:	46bd      	mov	sp, r7
   1da98:	b002      	add	sp, #8
   1da9a:	bd80      	pop	{r7, pc}
   1da9c:	00032b91 	.word	0x00032b91

0001daa0 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1daa0:	b580      	push	{r7, lr}
   1daa2:	b082      	sub	sp, #8
   1daa4:	af00      	add	r7, sp, #0
   1daa6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1daa8:	687b      	ldr	r3, [r7, #4]
   1daaa:	2200      	movs	r2, #0
   1daac:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1daae:	687b      	ldr	r3, [r7, #4]
   1dab0:	689b      	ldr	r3, [r3, #8]
   1dab2:	1c5a      	adds	r2, r3, #1
   1dab4:	687b      	ldr	r3, [r7, #4]
   1dab6:	68d9      	ldr	r1, [r3, #12]
   1dab8:	4b05      	ldr	r3, [pc, #20]	; (1dad0 <retreat_pointer+0x30>)
   1daba:	0010      	movs	r0, r2
   1dabc:	4798      	blx	r3
   1dabe:	000b      	movs	r3, r1
   1dac0:	001a      	movs	r2, r3
   1dac2:	687b      	ldr	r3, [r7, #4]
   1dac4:	609a      	str	r2, [r3, #8]
 }
   1dac6:	46c0      	nop			; (mov r8, r8)
   1dac8:	46bd      	mov	sp, r7
   1daca:	b002      	add	sp, #8
   1dacc:	bd80      	pop	{r7, pc}
   1dace:	46c0      	nop			; (mov r8, r8)
   1dad0:	00032b91 	.word	0x00032b91

0001dad4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1dad4:	b580      	push	{r7, lr}
   1dad6:	b084      	sub	sp, #16
   1dad8:	af00      	add	r7, sp, #0
   1dada:	6078      	str	r0, [r7, #4]
   1dadc:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1dade:	2014      	movs	r0, #20
   1dae0:	4b09      	ldr	r3, [pc, #36]	; (1db08 <circular_buf_init+0x34>)
   1dae2:	4798      	blx	r3
   1dae4:	0003      	movs	r3, r0
   1dae6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1dae8:	68fb      	ldr	r3, [r7, #12]
   1daea:	687a      	ldr	r2, [r7, #4]
   1daec:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1daee:	68fb      	ldr	r3, [r7, #12]
   1daf0:	683a      	ldr	r2, [r7, #0]
   1daf2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1daf4:	68fb      	ldr	r3, [r7, #12]
   1daf6:	0018      	movs	r0, r3
   1daf8:	4b04      	ldr	r3, [pc, #16]	; (1db0c <circular_buf_init+0x38>)
   1dafa:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1dafc:	68fb      	ldr	r3, [r7, #12]
 }
   1dafe:	0018      	movs	r0, r3
   1db00:	46bd      	mov	sp, r7
   1db02:	b004      	add	sp, #16
   1db04:	bd80      	pop	{r7, pc}
   1db06:	46c0      	nop			; (mov r8, r8)
   1db08:	00034a01 	.word	0x00034a01
   1db0c:	0001db11 	.word	0x0001db11

0001db10 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1db10:	b580      	push	{r7, lr}
   1db12:	b082      	sub	sp, #8
   1db14:	af00      	add	r7, sp, #0
   1db16:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1db18:	687b      	ldr	r3, [r7, #4]
   1db1a:	2200      	movs	r2, #0
   1db1c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1db1e:	687b      	ldr	r3, [r7, #4]
   1db20:	2200      	movs	r2, #0
   1db22:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1db24:	687b      	ldr	r3, [r7, #4]
   1db26:	2200      	movs	r2, #0
   1db28:	741a      	strb	r2, [r3, #16]
 }
   1db2a:	46c0      	nop			; (mov r8, r8)
   1db2c:	46bd      	mov	sp, r7
   1db2e:	b002      	add	sp, #8
   1db30:	bd80      	pop	{r7, pc}
	...

0001db34 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1db34:	b580      	push	{r7, lr}
   1db36:	b082      	sub	sp, #8
   1db38:	af00      	add	r7, sp, #0
   1db3a:	6078      	str	r0, [r7, #4]
   1db3c:	000a      	movs	r2, r1
   1db3e:	1cfb      	adds	r3, r7, #3
   1db40:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1db42:	687b      	ldr	r3, [r7, #4]
   1db44:	681a      	ldr	r2, [r3, #0]
   1db46:	687b      	ldr	r3, [r7, #4]
   1db48:	685b      	ldr	r3, [r3, #4]
   1db4a:	18d3      	adds	r3, r2, r3
   1db4c:	1cfa      	adds	r2, r7, #3
   1db4e:	7812      	ldrb	r2, [r2, #0]
   1db50:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1db52:	687b      	ldr	r3, [r7, #4]
   1db54:	0018      	movs	r0, r3
   1db56:	4b03      	ldr	r3, [pc, #12]	; (1db64 <circular_buf_put+0x30>)
   1db58:	4798      	blx	r3
 }
   1db5a:	46c0      	nop			; (mov r8, r8)
   1db5c:	46bd      	mov	sp, r7
   1db5e:	b002      	add	sp, #8
   1db60:	bd80      	pop	{r7, pc}
   1db62:	46c0      	nop			; (mov r8, r8)
   1db64:	0001da41 	.word	0x0001da41

0001db68 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1db68:	b580      	push	{r7, lr}
   1db6a:	b084      	sub	sp, #16
   1db6c:	af00      	add	r7, sp, #0
   1db6e:	6078      	str	r0, [r7, #4]
   1db70:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1db72:	2301      	movs	r3, #1
   1db74:	425b      	negs	r3, r3
   1db76:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1db78:	687b      	ldr	r3, [r7, #4]
   1db7a:	0018      	movs	r0, r3
   1db7c:	4b0d      	ldr	r3, [pc, #52]	; (1dbb4 <circular_buf_get+0x4c>)
   1db7e:	4798      	blx	r3
   1db80:	0003      	movs	r3, r0
   1db82:	001a      	movs	r2, r3
   1db84:	2301      	movs	r3, #1
   1db86:	4053      	eors	r3, r2
   1db88:	b2db      	uxtb	r3, r3
   1db8a:	2b00      	cmp	r3, #0
   1db8c:	d00d      	beq.n	1dbaa <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1db8e:	687b      	ldr	r3, [r7, #4]
   1db90:	681a      	ldr	r2, [r3, #0]
   1db92:	687b      	ldr	r3, [r7, #4]
   1db94:	689b      	ldr	r3, [r3, #8]
   1db96:	18d3      	adds	r3, r2, r3
   1db98:	781a      	ldrb	r2, [r3, #0]
   1db9a:	683b      	ldr	r3, [r7, #0]
   1db9c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1db9e:	687b      	ldr	r3, [r7, #4]
   1dba0:	0018      	movs	r0, r3
   1dba2:	4b05      	ldr	r3, [pc, #20]	; (1dbb8 <circular_buf_get+0x50>)
   1dba4:	4798      	blx	r3

		 r = 0;
   1dba6:	2300      	movs	r3, #0
   1dba8:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1dbaa:	68fb      	ldr	r3, [r7, #12]
 }
   1dbac:	0018      	movs	r0, r3
   1dbae:	46bd      	mov	sp, r7
   1dbb0:	b004      	add	sp, #16
   1dbb2:	bd80      	pop	{r7, pc}
   1dbb4:	0001dbbd 	.word	0x0001dbbd
   1dbb8:	0001daa1 	.word	0x0001daa1

0001dbbc <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1dbbc:	b580      	push	{r7, lr}
   1dbbe:	b082      	sub	sp, #8
   1dbc0:	af00      	add	r7, sp, #0
   1dbc2:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1dbc4:	687b      	ldr	r3, [r7, #4]
   1dbc6:	7c1b      	ldrb	r3, [r3, #16]
   1dbc8:	2201      	movs	r2, #1
   1dbca:	4053      	eors	r3, r2
   1dbcc:	b2db      	uxtb	r3, r3
   1dbce:	2b00      	cmp	r3, #0
   1dbd0:	d007      	beq.n	1dbe2 <circular_buf_empty+0x26>
   1dbd2:	687b      	ldr	r3, [r7, #4]
   1dbd4:	685a      	ldr	r2, [r3, #4]
   1dbd6:	687b      	ldr	r3, [r7, #4]
   1dbd8:	689b      	ldr	r3, [r3, #8]
   1dbda:	429a      	cmp	r2, r3
   1dbdc:	d101      	bne.n	1dbe2 <circular_buf_empty+0x26>
   1dbde:	2301      	movs	r3, #1
   1dbe0:	e000      	b.n	1dbe4 <circular_buf_empty+0x28>
   1dbe2:	2300      	movs	r3, #0
   1dbe4:	1c1a      	adds	r2, r3, #0
   1dbe6:	2301      	movs	r3, #1
   1dbe8:	4013      	ands	r3, r2
   1dbea:	b2db      	uxtb	r3, r3
 }
   1dbec:	0018      	movs	r0, r3
   1dbee:	46bd      	mov	sp, r7
   1dbf0:	b002      	add	sp, #8
   1dbf2:	bd80      	pop	{r7, pc}

0001dbf4 <system_interrupt_enable>:
{
   1dbf4:	b580      	push	{r7, lr}
   1dbf6:	b082      	sub	sp, #8
   1dbf8:	af00      	add	r7, sp, #0
   1dbfa:	0002      	movs	r2, r0
   1dbfc:	1dfb      	adds	r3, r7, #7
   1dbfe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1dc00:	4b06      	ldr	r3, [pc, #24]	; (1dc1c <system_interrupt_enable+0x28>)
   1dc02:	1dfa      	adds	r2, r7, #7
   1dc04:	7812      	ldrb	r2, [r2, #0]
   1dc06:	0011      	movs	r1, r2
   1dc08:	221f      	movs	r2, #31
   1dc0a:	400a      	ands	r2, r1
   1dc0c:	2101      	movs	r1, #1
   1dc0e:	4091      	lsls	r1, r2
   1dc10:	000a      	movs	r2, r1
   1dc12:	601a      	str	r2, [r3, #0]
}
   1dc14:	46c0      	nop			; (mov r8, r8)
   1dc16:	46bd      	mov	sp, r7
   1dc18:	b002      	add	sp, #8
   1dc1a:	bd80      	pop	{r7, pc}
   1dc1c:	e000e100 	.word	0xe000e100

0001dc20 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1dc20:	b580      	push	{r7, lr}
   1dc22:	b084      	sub	sp, #16
   1dc24:	af00      	add	r7, sp, #0
   1dc26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1dc28:	687b      	ldr	r3, [r7, #4]
   1dc2a:	681b      	ldr	r3, [r3, #0]
   1dc2c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1dc2e:	68fb      	ldr	r3, [r7, #12]
   1dc30:	69db      	ldr	r3, [r3, #28]
   1dc32:	1e5a      	subs	r2, r3, #1
   1dc34:	4193      	sbcs	r3, r2
   1dc36:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1dc38:	0018      	movs	r0, r3
   1dc3a:	46bd      	mov	sp, r7
   1dc3c:	b004      	add	sp, #16
   1dc3e:	bd80      	pop	{r7, pc}

0001dc40 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1dc40:	b580      	push	{r7, lr}
   1dc42:	b082      	sub	sp, #8
   1dc44:	af00      	add	r7, sp, #0
   1dc46:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1dc48:	46c0      	nop			; (mov r8, r8)
   1dc4a:	687b      	ldr	r3, [r7, #4]
   1dc4c:	0018      	movs	r0, r3
   1dc4e:	4b04      	ldr	r3, [pc, #16]	; (1dc60 <_usart_wait_for_sync+0x20>)
   1dc50:	4798      	blx	r3
   1dc52:	1e03      	subs	r3, r0, #0
   1dc54:	d1f9      	bne.n	1dc4a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1dc56:	46c0      	nop			; (mov r8, r8)
   1dc58:	46bd      	mov	sp, r7
   1dc5a:	b002      	add	sp, #8
   1dc5c:	bd80      	pop	{r7, pc}
   1dc5e:	46c0      	nop			; (mov r8, r8)
   1dc60:	0001dc21 	.word	0x0001dc21

0001dc64 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1dc64:	b580      	push	{r7, lr}
   1dc66:	b082      	sub	sp, #8
   1dc68:	af00      	add	r7, sp, #0
   1dc6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1dc6c:	687b      	ldr	r3, [r7, #4]
   1dc6e:	2280      	movs	r2, #128	; 0x80
   1dc70:	05d2      	lsls	r2, r2, #23
   1dc72:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1dc74:	687b      	ldr	r3, [r7, #4]
   1dc76:	2200      	movs	r2, #0
   1dc78:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1dc7a:	687b      	ldr	r3, [r7, #4]
   1dc7c:	22ff      	movs	r2, #255	; 0xff
   1dc7e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1dc80:	687b      	ldr	r3, [r7, #4]
   1dc82:	2200      	movs	r2, #0
   1dc84:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1dc86:	687b      	ldr	r3, [r7, #4]
   1dc88:	2200      	movs	r2, #0
   1dc8a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1dc8c:	687b      	ldr	r3, [r7, #4]
   1dc8e:	2296      	movs	r2, #150	; 0x96
   1dc90:	0192      	lsls	r2, r2, #6
   1dc92:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1dc94:	687b      	ldr	r3, [r7, #4]
   1dc96:	2224      	movs	r2, #36	; 0x24
   1dc98:	2101      	movs	r1, #1
   1dc9a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1dc9c:	687b      	ldr	r3, [r7, #4]
   1dc9e:	2225      	movs	r2, #37	; 0x25
   1dca0:	2101      	movs	r1, #1
   1dca2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1dca4:	687b      	ldr	r3, [r7, #4]
   1dca6:	2226      	movs	r2, #38	; 0x26
   1dca8:	2100      	movs	r1, #0
   1dcaa:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1dcac:	687b      	ldr	r3, [r7, #4]
   1dcae:	2227      	movs	r2, #39	; 0x27
   1dcb0:	2100      	movs	r1, #0
   1dcb2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1dcb4:	687b      	ldr	r3, [r7, #4]
   1dcb6:	2200      	movs	r2, #0
   1dcb8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1dcba:	687b      	ldr	r3, [r7, #4]
   1dcbc:	2288      	movs	r2, #136	; 0x88
   1dcbe:	0352      	lsls	r2, r2, #13
   1dcc0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1dcc2:	687b      	ldr	r3, [r7, #4]
   1dcc4:	222c      	movs	r2, #44	; 0x2c
   1dcc6:	2100      	movs	r1, #0
   1dcc8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1dcca:	687b      	ldr	r3, [r7, #4]
   1dccc:	222d      	movs	r2, #45	; 0x2d
   1dcce:	2100      	movs	r1, #0
   1dcd0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1dcd2:	687b      	ldr	r3, [r7, #4]
   1dcd4:	2200      	movs	r2, #0
   1dcd6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1dcd8:	687b      	ldr	r3, [r7, #4]
   1dcda:	2200      	movs	r2, #0
   1dcdc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1dcde:	687b      	ldr	r3, [r7, #4]
   1dce0:	2200      	movs	r2, #0
   1dce2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1dce4:	687b      	ldr	r3, [r7, #4]
   1dce6:	2200      	movs	r2, #0
   1dce8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1dcea:	687b      	ldr	r3, [r7, #4]
   1dcec:	2200      	movs	r2, #0
   1dcee:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1dcf0:	687b      	ldr	r3, [r7, #4]
   1dcf2:	2200      	movs	r2, #0
   1dcf4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1dcf6:	687b      	ldr	r3, [r7, #4]
   1dcf8:	2200      	movs	r2, #0
   1dcfa:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1dcfc:	687b      	ldr	r3, [r7, #4]
   1dcfe:	2200      	movs	r2, #0
   1dd00:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1dd02:	687b      	ldr	r3, [r7, #4]
   1dd04:	2200      	movs	r2, #0
   1dd06:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1dd08:	687b      	ldr	r3, [r7, #4]
   1dd0a:	2200      	movs	r2, #0
   1dd0c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1dd0e:	687b      	ldr	r3, [r7, #4]
   1dd10:	2213      	movs	r2, #19
   1dd12:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1dd14:	687b      	ldr	r3, [r7, #4]
   1dd16:	2200      	movs	r2, #0
   1dd18:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1dd1a:	46c0      	nop			; (mov r8, r8)
   1dd1c:	46bd      	mov	sp, r7
   1dd1e:	b002      	add	sp, #8
   1dd20:	bd80      	pop	{r7, pc}
	...

0001dd24 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1dd24:	b580      	push	{r7, lr}
   1dd26:	b084      	sub	sp, #16
   1dd28:	af00      	add	r7, sp, #0
   1dd2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1dd2c:	687b      	ldr	r3, [r7, #4]
   1dd2e:	681b      	ldr	r3, [r3, #0]
   1dd30:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1dd32:	687b      	ldr	r3, [r7, #4]
   1dd34:	681b      	ldr	r3, [r3, #0]
   1dd36:	0018      	movs	r0, r3
   1dd38:	4b09      	ldr	r3, [pc, #36]	; (1dd60 <usart_enable+0x3c>)
   1dd3a:	4798      	blx	r3
   1dd3c:	0003      	movs	r3, r0
   1dd3e:	0018      	movs	r0, r3
   1dd40:	4b08      	ldr	r3, [pc, #32]	; (1dd64 <usart_enable+0x40>)
   1dd42:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1dd44:	687b      	ldr	r3, [r7, #4]
   1dd46:	0018      	movs	r0, r3
   1dd48:	4b07      	ldr	r3, [pc, #28]	; (1dd68 <usart_enable+0x44>)
   1dd4a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1dd4c:	68fb      	ldr	r3, [r7, #12]
   1dd4e:	681b      	ldr	r3, [r3, #0]
   1dd50:	2202      	movs	r2, #2
   1dd52:	431a      	orrs	r2, r3
   1dd54:	68fb      	ldr	r3, [r7, #12]
   1dd56:	601a      	str	r2, [r3, #0]
}
   1dd58:	46c0      	nop			; (mov r8, r8)
   1dd5a:	46bd      	mov	sp, r7
   1dd5c:	b004      	add	sp, #16
   1dd5e:	bd80      	pop	{r7, pc}
   1dd60:	00027729 	.word	0x00027729
   1dd64:	0001dbf5 	.word	0x0001dbf5
   1dd68:	0001dc41 	.word	0x0001dc41

0001dd6c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1dd6c:	b580      	push	{r7, lr}
   1dd6e:	b082      	sub	sp, #8
   1dd70:	af00      	add	r7, sp, #0
   1dd72:	6078      	str	r0, [r7, #4]
   1dd74:	000a      	movs	r2, r1
   1dd76:	1cfb      	adds	r3, r7, #3
   1dd78:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1dd7a:	687b      	ldr	r3, [r7, #4]
   1dd7c:	2231      	movs	r2, #49	; 0x31
   1dd7e:	5c9b      	ldrb	r3, [r3, r2]
   1dd80:	b25a      	sxtb	r2, r3
   1dd82:	1cfb      	adds	r3, r7, #3
   1dd84:	781b      	ldrb	r3, [r3, #0]
   1dd86:	2101      	movs	r1, #1
   1dd88:	4099      	lsls	r1, r3
   1dd8a:	000b      	movs	r3, r1
   1dd8c:	b25b      	sxtb	r3, r3
   1dd8e:	4313      	orrs	r3, r2
   1dd90:	b25b      	sxtb	r3, r3
   1dd92:	b2d9      	uxtb	r1, r3
   1dd94:	687b      	ldr	r3, [r7, #4]
   1dd96:	2231      	movs	r2, #49	; 0x31
   1dd98:	5499      	strb	r1, [r3, r2]

}
   1dd9a:	46c0      	nop			; (mov r8, r8)
   1dd9c:	46bd      	mov	sp, r7
   1dd9e:	b002      	add	sp, #8
   1dda0:	bd80      	pop	{r7, pc}
	...

0001dda4 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1dda4:	b580      	push	{r7, lr}
   1dda6:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1dda8:	2380      	movs	r3, #128	; 0x80
   1ddaa:	009a      	lsls	r2, r3, #2
   1ddac:	4b0f      	ldr	r3, [pc, #60]	; (1ddec <InitializeSerialConsole+0x48>)
   1ddae:	0011      	movs	r1, r2
   1ddb0:	0018      	movs	r0, r3
   1ddb2:	4b0f      	ldr	r3, [pc, #60]	; (1ddf0 <InitializeSerialConsole+0x4c>)
   1ddb4:	4798      	blx	r3
   1ddb6:	0002      	movs	r2, r0
   1ddb8:	4b0e      	ldr	r3, [pc, #56]	; (1ddf4 <InitializeSerialConsole+0x50>)
   1ddba:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1ddbc:	2380      	movs	r3, #128	; 0x80
   1ddbe:	009a      	lsls	r2, r3, #2
   1ddc0:	4b0d      	ldr	r3, [pc, #52]	; (1ddf8 <InitializeSerialConsole+0x54>)
   1ddc2:	0011      	movs	r1, r2
   1ddc4:	0018      	movs	r0, r3
   1ddc6:	4b0a      	ldr	r3, [pc, #40]	; (1ddf0 <InitializeSerialConsole+0x4c>)
   1ddc8:	4798      	blx	r3
   1ddca:	0002      	movs	r2, r0
   1ddcc:	4b0b      	ldr	r3, [pc, #44]	; (1ddfc <InitializeSerialConsole+0x58>)
   1ddce:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1ddd0:	4b0b      	ldr	r3, [pc, #44]	; (1de00 <InitializeSerialConsole+0x5c>)
   1ddd2:	4798      	blx	r3
    configure_usart_callbacks();
   1ddd4:	4b0b      	ldr	r3, [pc, #44]	; (1de04 <InitializeSerialConsole+0x60>)
   1ddd6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1ddd8:	490b      	ldr	r1, [pc, #44]	; (1de08 <InitializeSerialConsole+0x64>)
   1ddda:	4b0c      	ldr	r3, [pc, #48]	; (1de0c <InitializeSerialConsole+0x68>)
   1dddc:	2201      	movs	r2, #1
   1ddde:	0018      	movs	r0, r3
   1dde0:	4b0b      	ldr	r3, [pc, #44]	; (1de10 <InitializeSerialConsole+0x6c>)
   1dde2:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1dde4:	46c0      	nop			; (mov r8, r8)
   1dde6:	46bd      	mov	sp, r7
   1dde8:	bd80      	pop	{r7, pc}
   1ddea:	46c0      	nop			; (mov r8, r8)
   1ddec:	2000570c 	.word	0x2000570c
   1ddf0:	0001dad5 	.word	0x0001dad5
   1ddf4:	20005504 	.word	0x20005504
   1ddf8:	2000550c 	.word	0x2000550c
   1ddfc:	20005910 	.word	0x20005910
   1de00:	0001df79 	.word	0x0001df79
   1de04:	0001dff1 	.word	0x0001dff1
   1de08:	20005508 	.word	0x20005508
   1de0c:	200054d0 	.word	0x200054d0
   1de10:	00028fd1 	.word	0x00028fd1

0001de14 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1de14:	b580      	push	{r7, lr}
   1de16:	b084      	sub	sp, #16
   1de18:	af00      	add	r7, sp, #0
   1de1a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1de1c:	4b1a      	ldr	r3, [pc, #104]	; (1de88 <SerialConsoleWriteString+0x74>)
   1de1e:	4798      	blx	r3
    if (string != NULL) {
   1de20:	687b      	ldr	r3, [r7, #4]
   1de22:	2b00      	cmp	r3, #0
   1de24:	d02a      	beq.n	1de7c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1de26:	2300      	movs	r3, #0
   1de28:	60fb      	str	r3, [r7, #12]
   1de2a:	e00b      	b.n	1de44 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1de2c:	4b17      	ldr	r3, [pc, #92]	; (1de8c <SerialConsoleWriteString+0x78>)
   1de2e:	6818      	ldr	r0, [r3, #0]
   1de30:	687a      	ldr	r2, [r7, #4]
   1de32:	68fb      	ldr	r3, [r7, #12]
   1de34:	18d3      	adds	r3, r2, r3
   1de36:	781b      	ldrb	r3, [r3, #0]
   1de38:	0019      	movs	r1, r3
   1de3a:	4b15      	ldr	r3, [pc, #84]	; (1de90 <SerialConsoleWriteString+0x7c>)
   1de3c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1de3e:	68fb      	ldr	r3, [r7, #12]
   1de40:	3301      	adds	r3, #1
   1de42:	60fb      	str	r3, [r7, #12]
   1de44:	687b      	ldr	r3, [r7, #4]
   1de46:	0018      	movs	r0, r3
   1de48:	4b12      	ldr	r3, [pc, #72]	; (1de94 <SerialConsoleWriteString+0x80>)
   1de4a:	4798      	blx	r3
   1de4c:	0002      	movs	r2, r0
   1de4e:	68fb      	ldr	r3, [r7, #12]
   1de50:	429a      	cmp	r2, r3
   1de52:	d8eb      	bhi.n	1de2c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1de54:	4b10      	ldr	r3, [pc, #64]	; (1de98 <SerialConsoleWriteString+0x84>)
   1de56:	2101      	movs	r1, #1
   1de58:	0018      	movs	r0, r3
   1de5a:	4b10      	ldr	r3, [pc, #64]	; (1de9c <SerialConsoleWriteString+0x88>)
   1de5c:	4798      	blx	r3
   1de5e:	1e03      	subs	r3, r0, #0
   1de60:	d10c      	bne.n	1de7c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1de62:	4b0a      	ldr	r3, [pc, #40]	; (1de8c <SerialConsoleWriteString+0x78>)
   1de64:	681b      	ldr	r3, [r3, #0]
   1de66:	4a0e      	ldr	r2, [pc, #56]	; (1dea0 <SerialConsoleWriteString+0x8c>)
   1de68:	0011      	movs	r1, r2
   1de6a:	0018      	movs	r0, r3
   1de6c:	4b0d      	ldr	r3, [pc, #52]	; (1dea4 <SerialConsoleWriteString+0x90>)
   1de6e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1de70:	490b      	ldr	r1, [pc, #44]	; (1dea0 <SerialConsoleWriteString+0x8c>)
   1de72:	4b09      	ldr	r3, [pc, #36]	; (1de98 <SerialConsoleWriteString+0x84>)
   1de74:	2201      	movs	r2, #1
   1de76:	0018      	movs	r0, r3
   1de78:	4b0b      	ldr	r3, [pc, #44]	; (1dea8 <SerialConsoleWriteString+0x94>)
   1de7a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1de7c:	4b0b      	ldr	r3, [pc, #44]	; (1deac <SerialConsoleWriteString+0x98>)
   1de7e:	4798      	blx	r3
}
   1de80:	46c0      	nop			; (mov r8, r8)
   1de82:	46bd      	mov	sp, r7
   1de84:	b004      	add	sp, #16
   1de86:	bd80      	pop	{r7, pc}
   1de88:	0001c481 	.word	0x0001c481
   1de8c:	20005910 	.word	0x20005910
   1de90:	0001db35 	.word	0x0001db35
   1de94:	00034e17 	.word	0x00034e17
   1de98:	200054d0 	.word	0x200054d0
   1de9c:	00029019 	.word	0x00029019
   1dea0:	2000590c 	.word	0x2000590c
   1dea4:	0001db69 	.word	0x0001db69
   1dea8:	00028f89 	.word	0x00028f89
   1deac:	0001c499 	.word	0x0001c499

0001deb0 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1deb0:	b580      	push	{r7, lr}
   1deb2:	b084      	sub	sp, #16
   1deb4:	af00      	add	r7, sp, #0
   1deb6:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1deb8:	4b08      	ldr	r3, [pc, #32]	; (1dedc <SerialConsoleReadCharacter+0x2c>)
   1deba:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1debc:	4b08      	ldr	r3, [pc, #32]	; (1dee0 <SerialConsoleReadCharacter+0x30>)
   1debe:	681b      	ldr	r3, [r3, #0]
   1dec0:	687a      	ldr	r2, [r7, #4]
   1dec2:	0011      	movs	r1, r2
   1dec4:	0018      	movs	r0, r3
   1dec6:	4b07      	ldr	r3, [pc, #28]	; (1dee4 <SerialConsoleReadCharacter+0x34>)
   1dec8:	4798      	blx	r3
   1deca:	0003      	movs	r3, r0
   1decc:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1dece:	4b06      	ldr	r3, [pc, #24]	; (1dee8 <SerialConsoleReadCharacter+0x38>)
   1ded0:	4798      	blx	r3
    return a;
   1ded2:	68fb      	ldr	r3, [r7, #12]
}
   1ded4:	0018      	movs	r0, r3
   1ded6:	46bd      	mov	sp, r7
   1ded8:	b004      	add	sp, #16
   1deda:	bd80      	pop	{r7, pc}
   1dedc:	0001c481 	.word	0x0001c481
   1dee0:	20005504 	.word	0x20005504
   1dee4:	0001db69 	.word	0x0001db69
   1dee8:	0001c499 	.word	0x0001c499

0001deec <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1deec:	b580      	push	{r7, lr}
   1deee:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1def0:	4b02      	ldr	r3, [pc, #8]	; (1defc <getLogLevel+0x10>)
   1def2:	781b      	ldrb	r3, [r3, #0]
}
   1def4:	0018      	movs	r0, r3
   1def6:	46bd      	mov	sp, r7
   1def8:	bd80      	pop	{r7, pc}
   1defa:	46c0      	nop			; (mov r8, r8)
   1defc:	2000409c 	.word	0x2000409c

0001df00 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1df00:	b40e      	push	{r1, r2, r3}
   1df02:	b590      	push	{r4, r7, lr}
   1df04:	b084      	sub	sp, #16
   1df06:	af00      	add	r7, sp, #0
   1df08:	0002      	movs	r2, r0
   1df0a:	1dfb      	adds	r3, r7, #7
   1df0c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1df0e:	4b0e      	ldr	r3, [pc, #56]	; (1df48 <LogMessage+0x48>)
   1df10:	4798      	blx	r3
   1df12:	0003      	movs	r3, r0
   1df14:	001a      	movs	r2, r3
   1df16:	1dfb      	adds	r3, r7, #7
   1df18:	781b      	ldrb	r3, [r3, #0]
   1df1a:	4293      	cmp	r3, r2
   1df1c:	d30c      	bcc.n	1df38 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1df1e:	2320      	movs	r3, #32
   1df20:	18fb      	adds	r3, r7, r3
   1df22:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1df24:	68fb      	ldr	r3, [r7, #12]
   1df26:	69fa      	ldr	r2, [r7, #28]
   1df28:	4808      	ldr	r0, [pc, #32]	; (1df4c <LogMessage+0x4c>)
   1df2a:	217f      	movs	r1, #127	; 0x7f
   1df2c:	4c08      	ldr	r4, [pc, #32]	; (1df50 <LogMessage+0x50>)
   1df2e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1df30:	4b06      	ldr	r3, [pc, #24]	; (1df4c <LogMessage+0x4c>)
   1df32:	0018      	movs	r0, r3
   1df34:	4b07      	ldr	r3, [pc, #28]	; (1df54 <LogMessage+0x54>)
   1df36:	4798      	blx	r3
        va_end(ap);
    }
};
   1df38:	46c0      	nop			; (mov r8, r8)
   1df3a:	46bd      	mov	sp, r7
   1df3c:	b004      	add	sp, #16
   1df3e:	bc90      	pop	{r4, r7}
   1df40:	bc08      	pop	{r3}
   1df42:	b003      	add	sp, #12
   1df44:	4718      	bx	r3
   1df46:	46c0      	nop			; (mov r8, r8)
   1df48:	0001deed 	.word	0x0001deed
   1df4c:	20005450 	.word	0x20005450
   1df50:	00035051 	.word	0x00035051
   1df54:	0001de15 	.word	0x0001de15

0001df58 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1df58:	b40f      	push	{r0, r1, r2, r3}
   1df5a:	b580      	push	{r7, lr}
   1df5c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1df5e:	68bb      	ldr	r3, [r7, #8]
   1df60:	0019      	movs	r1, r3
   1df62:	2001      	movs	r0, #1
   1df64:	4b03      	ldr	r3, [pc, #12]	; (1df74 <LogMessageDebug+0x1c>)
   1df66:	4798      	blx	r3
};
   1df68:	46c0      	nop			; (mov r8, r8)
   1df6a:	46bd      	mov	sp, r7
   1df6c:	bc80      	pop	{r7}
   1df6e:	bc08      	pop	{r3}
   1df70:	b004      	add	sp, #16
   1df72:	4718      	bx	r3
   1df74:	0001df01 	.word	0x0001df01

0001df78 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1df78:	b580      	push	{r7, lr}
   1df7a:	b090      	sub	sp, #64	; 0x40
   1df7c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1df7e:	003b      	movs	r3, r7
   1df80:	0018      	movs	r0, r3
   1df82:	4b14      	ldr	r3, [pc, #80]	; (1dfd4 <configure_usart+0x5c>)
   1df84:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1df86:	003b      	movs	r3, r7
   1df88:	22e1      	movs	r2, #225	; 0xe1
   1df8a:	0252      	lsls	r2, r2, #9
   1df8c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1df8e:	003b      	movs	r3, r7
   1df90:	22c4      	movs	r2, #196	; 0xc4
   1df92:	0392      	lsls	r2, r2, #14
   1df94:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1df96:	003b      	movs	r3, r7
   1df98:	2201      	movs	r2, #1
   1df9a:	4252      	negs	r2, r2
   1df9c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1df9e:	003b      	movs	r3, r7
   1dfa0:	2201      	movs	r2, #1
   1dfa2:	4252      	negs	r2, r2
   1dfa4:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1dfa6:	003b      	movs	r3, r7
   1dfa8:	4a0b      	ldr	r2, [pc, #44]	; (1dfd8 <configure_usart+0x60>)
   1dfaa:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1dfac:	003b      	movs	r3, r7
   1dfae:	4a0b      	ldr	r2, [pc, #44]	; (1dfdc <configure_usart+0x64>)
   1dfb0:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1dfb2:	46c0      	nop			; (mov r8, r8)
   1dfb4:	003a      	movs	r2, r7
   1dfb6:	490a      	ldr	r1, [pc, #40]	; (1dfe0 <configure_usart+0x68>)
   1dfb8:	4b0a      	ldr	r3, [pc, #40]	; (1dfe4 <configure_usart+0x6c>)
   1dfba:	0018      	movs	r0, r3
   1dfbc:	4b0a      	ldr	r3, [pc, #40]	; (1dfe8 <configure_usart+0x70>)
   1dfbe:	4798      	blx	r3
   1dfc0:	1e03      	subs	r3, r0, #0
   1dfc2:	d1f7      	bne.n	1dfb4 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1dfc4:	4b07      	ldr	r3, [pc, #28]	; (1dfe4 <configure_usart+0x6c>)
   1dfc6:	0018      	movs	r0, r3
   1dfc8:	4b08      	ldr	r3, [pc, #32]	; (1dfec <configure_usart+0x74>)
   1dfca:	4798      	blx	r3
}
   1dfcc:	46c0      	nop			; (mov r8, r8)
   1dfce:	46bd      	mov	sp, r7
   1dfd0:	b010      	add	sp, #64	; 0x40
   1dfd2:	bd80      	pop	{r7, pc}
   1dfd4:	0001dc65 	.word	0x0001dc65
   1dfd8:	002a0003 	.word	0x002a0003
   1dfdc:	002b0003 	.word	0x002b0003
   1dfe0:	42001800 	.word	0x42001800
   1dfe4:	200054d0 	.word	0x200054d0
   1dfe8:	00028b8d 	.word	0x00028b8d
   1dfec:	0001dd25 	.word	0x0001dd25

0001dff0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1dff0:	b580      	push	{r7, lr}
   1dff2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1dff4:	490c      	ldr	r1, [pc, #48]	; (1e028 <configure_usart_callbacks+0x38>)
   1dff6:	4b0d      	ldr	r3, [pc, #52]	; (1e02c <configure_usart_callbacks+0x3c>)
   1dff8:	2200      	movs	r2, #0
   1dffa:	0018      	movs	r0, r3
   1dffc:	4b0c      	ldr	r3, [pc, #48]	; (1e030 <configure_usart_callbacks+0x40>)
   1dffe:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1e000:	490c      	ldr	r1, [pc, #48]	; (1e034 <configure_usart_callbacks+0x44>)
   1e002:	4b0a      	ldr	r3, [pc, #40]	; (1e02c <configure_usart_callbacks+0x3c>)
   1e004:	2201      	movs	r2, #1
   1e006:	0018      	movs	r0, r3
   1e008:	4b09      	ldr	r3, [pc, #36]	; (1e030 <configure_usart_callbacks+0x40>)
   1e00a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1e00c:	4b07      	ldr	r3, [pc, #28]	; (1e02c <configure_usart_callbacks+0x3c>)
   1e00e:	2100      	movs	r1, #0
   1e010:	0018      	movs	r0, r3
   1e012:	4b09      	ldr	r3, [pc, #36]	; (1e038 <configure_usart_callbacks+0x48>)
   1e014:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1e016:	4b05      	ldr	r3, [pc, #20]	; (1e02c <configure_usart_callbacks+0x3c>)
   1e018:	2101      	movs	r1, #1
   1e01a:	0018      	movs	r0, r3
   1e01c:	4b06      	ldr	r3, [pc, #24]	; (1e038 <configure_usart_callbacks+0x48>)
   1e01e:	4798      	blx	r3
}
   1e020:	46c0      	nop			; (mov r8, r8)
   1e022:	46bd      	mov	sp, r7
   1e024:	bd80      	pop	{r7, pc}
   1e026:	46c0      	nop			; (mov r8, r8)
   1e028:	0001e085 	.word	0x0001e085
   1e02c:	200054d0 	.word	0x200054d0
   1e030:	00028f41 	.word	0x00028f41
   1e034:	0001e03d 	.word	0x0001e03d
   1e038:	0001dd6d 	.word	0x0001dd6d

0001e03c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1e03c:	b580      	push	{r7, lr}
   1e03e:	b082      	sub	sp, #8
   1e040:	af00      	add	r7, sp, #0
   1e042:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1e044:	4b09      	ldr	r3, [pc, #36]	; (1e06c <usart_read_callback+0x30>)
   1e046:	681a      	ldr	r2, [r3, #0]
   1e048:	4b09      	ldr	r3, [pc, #36]	; (1e070 <usart_read_callback+0x34>)
   1e04a:	781b      	ldrb	r3, [r3, #0]
   1e04c:	0019      	movs	r1, r3
   1e04e:	0010      	movs	r0, r2
   1e050:	4b08      	ldr	r3, [pc, #32]	; (1e074 <usart_read_callback+0x38>)
   1e052:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1e054:	4906      	ldr	r1, [pc, #24]	; (1e070 <usart_read_callback+0x34>)
   1e056:	4b08      	ldr	r3, [pc, #32]	; (1e078 <usart_read_callback+0x3c>)
   1e058:	2201      	movs	r2, #1
   1e05a:	0018      	movs	r0, r3
   1e05c:	4b07      	ldr	r3, [pc, #28]	; (1e07c <usart_read_callback+0x40>)
   1e05e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1e060:	4b07      	ldr	r3, [pc, #28]	; (1e080 <usart_read_callback+0x44>)
   1e062:	4798      	blx	r3
}
   1e064:	46c0      	nop			; (mov r8, r8)
   1e066:	46bd      	mov	sp, r7
   1e068:	b002      	add	sp, #8
   1e06a:	bd80      	pop	{r7, pc}
   1e06c:	20005504 	.word	0x20005504
   1e070:	20005508 	.word	0x20005508
   1e074:	0001db35 	.word	0x0001db35
   1e078:	200054d0 	.word	0x200054d0
   1e07c:	00028fd1 	.word	0x00028fd1
   1e080:	000131c9 	.word	0x000131c9

0001e084 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1e084:	b580      	push	{r7, lr}
   1e086:	b082      	sub	sp, #8
   1e088:	af00      	add	r7, sp, #0
   1e08a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1e08c:	4b09      	ldr	r3, [pc, #36]	; (1e0b4 <usart_write_callback+0x30>)
   1e08e:	681b      	ldr	r3, [r3, #0]
   1e090:	4a09      	ldr	r2, [pc, #36]	; (1e0b8 <usart_write_callback+0x34>)
   1e092:	0011      	movs	r1, r2
   1e094:	0018      	movs	r0, r3
   1e096:	4b09      	ldr	r3, [pc, #36]	; (1e0bc <usart_write_callback+0x38>)
   1e098:	4798      	blx	r3
   1e09a:	0003      	movs	r3, r0
   1e09c:	3301      	adds	r3, #1
   1e09e:	d005      	beq.n	1e0ac <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e0a0:	4905      	ldr	r1, [pc, #20]	; (1e0b8 <usart_write_callback+0x34>)
   1e0a2:	4b07      	ldr	r3, [pc, #28]	; (1e0c0 <usart_write_callback+0x3c>)
   1e0a4:	2201      	movs	r2, #1
   1e0a6:	0018      	movs	r0, r3
   1e0a8:	4b06      	ldr	r3, [pc, #24]	; (1e0c4 <usart_write_callback+0x40>)
   1e0aa:	4798      	blx	r3
    }
}
   1e0ac:	46c0      	nop			; (mov r8, r8)
   1e0ae:	46bd      	mov	sp, r7
   1e0b0:	b002      	add	sp, #8
   1e0b2:	bd80      	pop	{r7, pc}
   1e0b4:	20005910 	.word	0x20005910
   1e0b8:	2000590c 	.word	0x2000590c
   1e0bc:	0001db69 	.word	0x0001db69
   1e0c0:	200054d0 	.word	0x200054d0
   1e0c4:	00028f89 	.word	0x00028f89

0001e0c8 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1e0c8:	b590      	push	{r4, r7, lr}
   1e0ca:	b087      	sub	sp, #28
   1e0cc:	af00      	add	r7, sp, #0
   1e0ce:	60f8      	str	r0, [r7, #12]
   1e0d0:	000c      	movs	r4, r1
   1e0d2:	0010      	movs	r0, r2
   1e0d4:	0019      	movs	r1, r3
   1e0d6:	230a      	movs	r3, #10
   1e0d8:	18fb      	adds	r3, r7, r3
   1e0da:	1c22      	adds	r2, r4, #0
   1e0dc:	801a      	strh	r2, [r3, #0]
   1e0de:	2308      	movs	r3, #8
   1e0e0:	18fb      	adds	r3, r7, r3
   1e0e2:	1c02      	adds	r2, r0, #0
   1e0e4:	801a      	strh	r2, [r3, #0]
   1e0e6:	1dfb      	adds	r3, r7, #7
   1e0e8:	1c0a      	adds	r2, r1, #0
   1e0ea:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1e0ec:	230a      	movs	r3, #10
   1e0ee:	18fb      	adds	r3, r7, r3
   1e0f0:	881a      	ldrh	r2, [r3, #0]
   1e0f2:	2308      	movs	r3, #8
   1e0f4:	18fb      	adds	r3, r7, r3
   1e0f6:	881b      	ldrh	r3, [r3, #0]
   1e0f8:	1ad3      	subs	r3, r2, r3
   1e0fa:	3307      	adds	r3, #7
   1e0fc:	2b00      	cmp	r3, #0
   1e0fe:	da00      	bge.n	1e102 <SDMMC_UNSTUFF_BITS+0x3a>
   1e100:	3307      	adds	r3, #7
   1e102:	10db      	asrs	r3, r3, #3
   1e104:	3b01      	subs	r3, #1
   1e106:	68fa      	ldr	r2, [r7, #12]
   1e108:	18d3      	adds	r3, r2, r3
   1e10a:	781b      	ldrb	r3, [r3, #0]
   1e10c:	0019      	movs	r1, r3
   1e10e:	2308      	movs	r3, #8
   1e110:	18fb      	adds	r3, r7, r3
   1e112:	881b      	ldrh	r3, [r3, #0]
   1e114:	2207      	movs	r2, #7
   1e116:	4013      	ands	r3, r2
   1e118:	4119      	asrs	r1, r3
   1e11a:	000b      	movs	r3, r1
   1e11c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1e11e:	2308      	movs	r3, #8
   1e120:	18fb      	adds	r3, r7, r3
   1e122:	881b      	ldrh	r3, [r3, #0]
   1e124:	2207      	movs	r2, #7
   1e126:	401a      	ands	r2, r3
   1e128:	1dfb      	adds	r3, r7, #7
   1e12a:	781b      	ldrb	r3, [r3, #0]
   1e12c:	18d3      	adds	r3, r2, r3
   1e12e:	2b08      	cmp	r3, #8
   1e130:	dd1c      	ble.n	1e16c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1e132:	230a      	movs	r3, #10
   1e134:	18fb      	adds	r3, r7, r3
   1e136:	881a      	ldrh	r2, [r3, #0]
   1e138:	2308      	movs	r3, #8
   1e13a:	18fb      	adds	r3, r7, r3
   1e13c:	881b      	ldrh	r3, [r3, #0]
   1e13e:	1ad3      	subs	r3, r2, r3
   1e140:	3307      	adds	r3, #7
   1e142:	2b00      	cmp	r3, #0
   1e144:	da00      	bge.n	1e148 <SDMMC_UNSTUFF_BITS+0x80>
   1e146:	3307      	adds	r3, #7
   1e148:	10db      	asrs	r3, r3, #3
   1e14a:	3b02      	subs	r3, #2
   1e14c:	68fa      	ldr	r2, [r7, #12]
   1e14e:	18d3      	adds	r3, r2, r3
   1e150:	781b      	ldrb	r3, [r3, #0]
   1e152:	0019      	movs	r1, r3
   1e154:	2308      	movs	r3, #8
   1e156:	18fb      	adds	r3, r7, r3
   1e158:	881b      	ldrh	r3, [r3, #0]
   1e15a:	2207      	movs	r2, #7
   1e15c:	4013      	ands	r3, r2
   1e15e:	2208      	movs	r2, #8
   1e160:	1ad3      	subs	r3, r2, r3
   1e162:	4099      	lsls	r1, r3
   1e164:	000b      	movs	r3, r1
   1e166:	697a      	ldr	r2, [r7, #20]
   1e168:	4313      	orrs	r3, r2
   1e16a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1e16c:	2308      	movs	r3, #8
   1e16e:	18fb      	adds	r3, r7, r3
   1e170:	881b      	ldrh	r3, [r3, #0]
   1e172:	2207      	movs	r2, #7
   1e174:	401a      	ands	r2, r3
   1e176:	1dfb      	adds	r3, r7, #7
   1e178:	781b      	ldrb	r3, [r3, #0]
   1e17a:	18d3      	adds	r3, r2, r3
   1e17c:	2b10      	cmp	r3, #16
   1e17e:	dd1c      	ble.n	1e1ba <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1e180:	230a      	movs	r3, #10
   1e182:	18fb      	adds	r3, r7, r3
   1e184:	881a      	ldrh	r2, [r3, #0]
   1e186:	2308      	movs	r3, #8
   1e188:	18fb      	adds	r3, r7, r3
   1e18a:	881b      	ldrh	r3, [r3, #0]
   1e18c:	1ad3      	subs	r3, r2, r3
   1e18e:	3307      	adds	r3, #7
   1e190:	2b00      	cmp	r3, #0
   1e192:	da00      	bge.n	1e196 <SDMMC_UNSTUFF_BITS+0xce>
   1e194:	3307      	adds	r3, #7
   1e196:	10db      	asrs	r3, r3, #3
   1e198:	3b03      	subs	r3, #3
   1e19a:	68fa      	ldr	r2, [r7, #12]
   1e19c:	18d3      	adds	r3, r2, r3
   1e19e:	781b      	ldrb	r3, [r3, #0]
   1e1a0:	0019      	movs	r1, r3
   1e1a2:	2308      	movs	r3, #8
   1e1a4:	18fb      	adds	r3, r7, r3
   1e1a6:	881b      	ldrh	r3, [r3, #0]
   1e1a8:	2207      	movs	r2, #7
   1e1aa:	4013      	ands	r3, r2
   1e1ac:	2210      	movs	r2, #16
   1e1ae:	1ad3      	subs	r3, r2, r3
   1e1b0:	4099      	lsls	r1, r3
   1e1b2:	000b      	movs	r3, r1
   1e1b4:	697a      	ldr	r2, [r7, #20]
   1e1b6:	4313      	orrs	r3, r2
   1e1b8:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1e1ba:	2308      	movs	r3, #8
   1e1bc:	18fb      	adds	r3, r7, r3
   1e1be:	881b      	ldrh	r3, [r3, #0]
   1e1c0:	2207      	movs	r2, #7
   1e1c2:	401a      	ands	r2, r3
   1e1c4:	1dfb      	adds	r3, r7, #7
   1e1c6:	781b      	ldrb	r3, [r3, #0]
   1e1c8:	18d3      	adds	r3, r2, r3
   1e1ca:	2b10      	cmp	r3, #16
   1e1cc:	dd1c      	ble.n	1e208 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1e1ce:	230a      	movs	r3, #10
   1e1d0:	18fb      	adds	r3, r7, r3
   1e1d2:	881a      	ldrh	r2, [r3, #0]
   1e1d4:	2308      	movs	r3, #8
   1e1d6:	18fb      	adds	r3, r7, r3
   1e1d8:	881b      	ldrh	r3, [r3, #0]
   1e1da:	1ad3      	subs	r3, r2, r3
   1e1dc:	3307      	adds	r3, #7
   1e1de:	2b00      	cmp	r3, #0
   1e1e0:	da00      	bge.n	1e1e4 <SDMMC_UNSTUFF_BITS+0x11c>
   1e1e2:	3307      	adds	r3, #7
   1e1e4:	10db      	asrs	r3, r3, #3
   1e1e6:	3b03      	subs	r3, #3
   1e1e8:	68fa      	ldr	r2, [r7, #12]
   1e1ea:	18d3      	adds	r3, r2, r3
   1e1ec:	781b      	ldrb	r3, [r3, #0]
   1e1ee:	0019      	movs	r1, r3
   1e1f0:	2308      	movs	r3, #8
   1e1f2:	18fb      	adds	r3, r7, r3
   1e1f4:	881b      	ldrh	r3, [r3, #0]
   1e1f6:	2207      	movs	r2, #7
   1e1f8:	4013      	ands	r3, r2
   1e1fa:	2210      	movs	r2, #16
   1e1fc:	1ad3      	subs	r3, r2, r3
   1e1fe:	4099      	lsls	r1, r3
   1e200:	000b      	movs	r3, r1
   1e202:	697a      	ldr	r2, [r7, #20]
   1e204:	4313      	orrs	r3, r2
   1e206:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1e208:	1dfb      	adds	r3, r7, #7
   1e20a:	781b      	ldrb	r3, [r3, #0]
   1e20c:	2201      	movs	r2, #1
   1e20e:	409a      	lsls	r2, r3
   1e210:	0013      	movs	r3, r2
   1e212:	1e5a      	subs	r2, r3, #1
   1e214:	697b      	ldr	r3, [r7, #20]
   1e216:	4013      	ands	r3, r2
   1e218:	617b      	str	r3, [r7, #20]
	return value;
   1e21a:	697b      	ldr	r3, [r7, #20]
}
   1e21c:	0018      	movs	r0, r3
   1e21e:	46bd      	mov	sp, r7
   1e220:	b007      	add	sp, #28
   1e222:	bd90      	pop	{r4, r7, pc}

0001e224 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1e224:	b580      	push	{r7, lr}
   1e226:	b082      	sub	sp, #8
   1e228:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e22a:	4b23      	ldr	r3, [pc, #140]	; (1e2b8 <mmc_spi_op_cond+0x94>)
   1e22c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1e22e:	4b23      	ldr	r3, [pc, #140]	; (1e2bc <mmc_spi_op_cond+0x98>)
   1e230:	2100      	movs	r1, #0
   1e232:	0018      	movs	r0, r3
   1e234:	4b22      	ldr	r3, [pc, #136]	; (1e2c0 <mmc_spi_op_cond+0x9c>)
   1e236:	4798      	blx	r3
   1e238:	0003      	movs	r3, r0
   1e23a:	001a      	movs	r2, r3
   1e23c:	2301      	movs	r3, #1
   1e23e:	4053      	eors	r3, r2
   1e240:	b2db      	uxtb	r3, r3
   1e242:	2b00      	cmp	r3, #0
   1e244:	d001      	beq.n	1e24a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1e246:	2300      	movs	r3, #0
   1e248:	e031      	b.n	1e2ae <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1e24a:	4b1e      	ldr	r3, [pc, #120]	; (1e2c4 <mmc_spi_op_cond+0xa0>)
   1e24c:	4798      	blx	r3
   1e24e:	0003      	movs	r3, r0
   1e250:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1e252:	683b      	ldr	r3, [r7, #0]
   1e254:	2201      	movs	r2, #1
   1e256:	4013      	ands	r3, r2
   1e258:	d006      	beq.n	1e268 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1e25a:	687b      	ldr	r3, [r7, #4]
   1e25c:	1e5a      	subs	r2, r3, #1
   1e25e:	607a      	str	r2, [r7, #4]
   1e260:	2b00      	cmp	r3, #0
   1e262:	d1e4      	bne.n	1e22e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1e264:	2300      	movs	r3, #0
   1e266:	e022      	b.n	1e2ae <mmc_spi_op_cond+0x8a>
			break;
   1e268:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e26a:	4b17      	ldr	r3, [pc, #92]	; (1e2c8 <mmc_spi_op_cond+0xa4>)
   1e26c:	2100      	movs	r1, #0
   1e26e:	0018      	movs	r0, r3
   1e270:	4b13      	ldr	r3, [pc, #76]	; (1e2c0 <mmc_spi_op_cond+0x9c>)
   1e272:	4798      	blx	r3
   1e274:	0003      	movs	r3, r0
   1e276:	001a      	movs	r2, r3
   1e278:	2301      	movs	r3, #1
   1e27a:	4053      	eors	r3, r2
   1e27c:	b2db      	uxtb	r3, r3
   1e27e:	2b00      	cmp	r3, #0
   1e280:	d001      	beq.n	1e286 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e282:	2300      	movs	r3, #0
   1e284:	e013      	b.n	1e2ae <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1e286:	4b0f      	ldr	r3, [pc, #60]	; (1e2c4 <mmc_spi_op_cond+0xa0>)
   1e288:	4798      	blx	r3
   1e28a:	0002      	movs	r2, r0
   1e28c:	23c0      	movs	r3, #192	; 0xc0
   1e28e:	05db      	lsls	r3, r3, #23
   1e290:	401a      	ands	r2, r3
   1e292:	2380      	movs	r3, #128	; 0x80
   1e294:	05db      	lsls	r3, r3, #23
   1e296:	429a      	cmp	r2, r3
   1e298:	d108      	bne.n	1e2ac <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e29a:	4b0c      	ldr	r3, [pc, #48]	; (1e2cc <mmc_spi_op_cond+0xa8>)
   1e29c:	681a      	ldr	r2, [r3, #0]
   1e29e:	4b0b      	ldr	r3, [pc, #44]	; (1e2cc <mmc_spi_op_cond+0xa8>)
   1e2a0:	681b      	ldr	r3, [r3, #0]
   1e2a2:	7adb      	ldrb	r3, [r3, #11]
   1e2a4:	2108      	movs	r1, #8
   1e2a6:	430b      	orrs	r3, r1
   1e2a8:	b2db      	uxtb	r3, r3
   1e2aa:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e2ac:	2301      	movs	r3, #1
}
   1e2ae:	0018      	movs	r0, r3
   1e2b0:	46bd      	mov	sp, r7
   1e2b2:	b002      	add	sp, #8
   1e2b4:	bd80      	pop	{r7, pc}
   1e2b6:	46c0      	nop			; (mov r8, r8)
   1e2b8:	00001bee 	.word	0x00001bee
   1e2bc:	00001101 	.word	0x00001101
   1e2c0:	0001fca1 	.word	0x0001fca1
   1e2c4:	0001fee1 	.word	0x0001fee1
   1e2c8:	0000053a 	.word	0x0000053a
   1e2cc:	200040c4 	.word	0x200040c4

0001e2d0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1e2d0:	b580      	push	{r7, lr}
   1e2d2:	b086      	sub	sp, #24
   1e2d4:	af00      	add	r7, sp, #0
   1e2d6:	0002      	movs	r2, r0
   1e2d8:	1dfb      	adds	r3, r7, #7
   1e2da:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e2dc:	4b2e      	ldr	r3, [pc, #184]	; (1e398 <sd_spi_op_cond+0xc8>)
   1e2de:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1e2e0:	4b2e      	ldr	r3, [pc, #184]	; (1e39c <sd_spi_op_cond+0xcc>)
   1e2e2:	2100      	movs	r1, #0
   1e2e4:	0018      	movs	r0, r3
   1e2e6:	4b2e      	ldr	r3, [pc, #184]	; (1e3a0 <sd_spi_op_cond+0xd0>)
   1e2e8:	4798      	blx	r3
   1e2ea:	0003      	movs	r3, r0
   1e2ec:	001a      	movs	r2, r3
   1e2ee:	2301      	movs	r3, #1
   1e2f0:	4053      	eors	r3, r2
   1e2f2:	b2db      	uxtb	r3, r3
   1e2f4:	2b00      	cmp	r3, #0
   1e2f6:	d001      	beq.n	1e2fc <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1e2f8:	2300      	movs	r3, #0
   1e2fa:	e048      	b.n	1e38e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1e2fc:	2300      	movs	r3, #0
   1e2fe:	617b      	str	r3, [r7, #20]
		if (v2) {
   1e300:	1dfb      	adds	r3, r7, #7
   1e302:	781b      	ldrb	r3, [r3, #0]
   1e304:	2b00      	cmp	r3, #0
   1e306:	d004      	beq.n	1e312 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1e308:	697b      	ldr	r3, [r7, #20]
   1e30a:	2280      	movs	r2, #128	; 0x80
   1e30c:	05d2      	lsls	r2, r2, #23
   1e30e:	4313      	orrs	r3, r2
   1e310:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1e312:	697b      	ldr	r3, [r7, #20]
   1e314:	4a23      	ldr	r2, [pc, #140]	; (1e3a4 <sd_spi_op_cond+0xd4>)
   1e316:	0019      	movs	r1, r3
   1e318:	0010      	movs	r0, r2
   1e31a:	4b21      	ldr	r3, [pc, #132]	; (1e3a0 <sd_spi_op_cond+0xd0>)
   1e31c:	4798      	blx	r3
   1e31e:	0003      	movs	r3, r0
   1e320:	001a      	movs	r2, r3
   1e322:	2301      	movs	r3, #1
   1e324:	4053      	eors	r3, r2
   1e326:	b2db      	uxtb	r3, r3
   1e328:	2b00      	cmp	r3, #0
   1e32a:	d001      	beq.n	1e330 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1e32c:	2300      	movs	r3, #0
   1e32e:	e02e      	b.n	1e38e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1e330:	4b1d      	ldr	r3, [pc, #116]	; (1e3a8 <sd_spi_op_cond+0xd8>)
   1e332:	4798      	blx	r3
   1e334:	0003      	movs	r3, r0
   1e336:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1e338:	68fb      	ldr	r3, [r7, #12]
   1e33a:	2201      	movs	r2, #1
   1e33c:	4013      	ands	r3, r2
   1e33e:	d006      	beq.n	1e34e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1e340:	693b      	ldr	r3, [r7, #16]
   1e342:	1e5a      	subs	r2, r3, #1
   1e344:	613a      	str	r2, [r7, #16]
   1e346:	2b00      	cmp	r3, #0
   1e348:	d1ca      	bne.n	1e2e0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1e34a:	2300      	movs	r3, #0
   1e34c:	e01f      	b.n	1e38e <sd_spi_op_cond+0xbe>
			break;
   1e34e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e350:	4b16      	ldr	r3, [pc, #88]	; (1e3ac <sd_spi_op_cond+0xdc>)
   1e352:	2100      	movs	r1, #0
   1e354:	0018      	movs	r0, r3
   1e356:	4b12      	ldr	r3, [pc, #72]	; (1e3a0 <sd_spi_op_cond+0xd0>)
   1e358:	4798      	blx	r3
   1e35a:	0003      	movs	r3, r0
   1e35c:	001a      	movs	r2, r3
   1e35e:	2301      	movs	r3, #1
   1e360:	4053      	eors	r3, r2
   1e362:	b2db      	uxtb	r3, r3
   1e364:	2b00      	cmp	r3, #0
   1e366:	d001      	beq.n	1e36c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e368:	2300      	movs	r3, #0
   1e36a:	e010      	b.n	1e38e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1e36c:	4b0e      	ldr	r3, [pc, #56]	; (1e3a8 <sd_spi_op_cond+0xd8>)
   1e36e:	4798      	blx	r3
   1e370:	0002      	movs	r2, r0
   1e372:	2380      	movs	r3, #128	; 0x80
   1e374:	05db      	lsls	r3, r3, #23
   1e376:	4013      	ands	r3, r2
   1e378:	d008      	beq.n	1e38c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e37a:	4b0d      	ldr	r3, [pc, #52]	; (1e3b0 <sd_spi_op_cond+0xe0>)
   1e37c:	681a      	ldr	r2, [r3, #0]
   1e37e:	4b0c      	ldr	r3, [pc, #48]	; (1e3b0 <sd_spi_op_cond+0xe0>)
   1e380:	681b      	ldr	r3, [r3, #0]
   1e382:	7adb      	ldrb	r3, [r3, #11]
   1e384:	2108      	movs	r1, #8
   1e386:	430b      	orrs	r3, r1
   1e388:	b2db      	uxtb	r3, r3
   1e38a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e38c:	2301      	movs	r3, #1
}
   1e38e:	0018      	movs	r0, r3
   1e390:	46bd      	mov	sp, r7
   1e392:	b006      	add	sp, #24
   1e394:	bd80      	pop	{r7, pc}
   1e396:	46c0      	nop			; (mov r8, r8)
   1e398:	00001bee 	.word	0x00001bee
   1e39c:	00001137 	.word	0x00001137
   1e3a0:	0001fca1 	.word	0x0001fca1
   1e3a4:	00001129 	.word	0x00001129
   1e3a8:	0001fee1 	.word	0x0001fee1
   1e3ac:	0000053a 	.word	0x0000053a
   1e3b0:	200040c4 	.word	0x200040c4

0001e3b4 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1e3b4:	b580      	push	{r7, lr}
   1e3b6:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1e3b8:	2301      	movs	r3, #1
}
   1e3ba:	0018      	movs	r0, r3
   1e3bc:	46bd      	mov	sp, r7
   1e3be:	bd80      	pop	{r7, pc}

0001e3c0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1e3c0:	b580      	push	{r7, lr}
   1e3c2:	b084      	sub	sp, #16
   1e3c4:	af00      	add	r7, sp, #0
   1e3c6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1e3c8:	687b      	ldr	r3, [r7, #4]
   1e3ca:	2200      	movs	r2, #0
   1e3cc:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1e3ce:	23d5      	movs	r3, #213	; 0xd5
   1e3d0:	005b      	lsls	r3, r3, #1
   1e3d2:	4a14      	ldr	r2, [pc, #80]	; (1e424 <sd_cmd8+0x64>)
   1e3d4:	0019      	movs	r1, r3
   1e3d6:	0010      	movs	r0, r2
   1e3d8:	4b13      	ldr	r3, [pc, #76]	; (1e428 <sd_cmd8+0x68>)
   1e3da:	4798      	blx	r3
   1e3dc:	0003      	movs	r3, r0
   1e3de:	001a      	movs	r2, r3
   1e3e0:	2301      	movs	r3, #1
   1e3e2:	4053      	eors	r3, r2
   1e3e4:	b2db      	uxtb	r3, r3
   1e3e6:	2b00      	cmp	r3, #0
   1e3e8:	d001      	beq.n	1e3ee <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1e3ea:	2301      	movs	r3, #1
   1e3ec:	e015      	b.n	1e41a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1e3ee:	4b0f      	ldr	r3, [pc, #60]	; (1e42c <sd_cmd8+0x6c>)
   1e3f0:	4798      	blx	r3
   1e3f2:	0003      	movs	r3, r0
   1e3f4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1e3f6:	68fb      	ldr	r3, [r7, #12]
   1e3f8:	3301      	adds	r3, #1
   1e3fa:	d101      	bne.n	1e400 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1e3fc:	2301      	movs	r3, #1
   1e3fe:	e00c      	b.n	1e41a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1e400:	68fb      	ldr	r3, [r7, #12]
   1e402:	051b      	lsls	r3, r3, #20
   1e404:	0d1a      	lsrs	r2, r3, #20
   1e406:	23d5      	movs	r3, #213	; 0xd5
   1e408:	005b      	lsls	r3, r3, #1
   1e40a:	429a      	cmp	r2, r3
   1e40c:	d001      	beq.n	1e412 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1e40e:	2300      	movs	r3, #0
   1e410:	e003      	b.n	1e41a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1e412:	687b      	ldr	r3, [r7, #4]
   1e414:	2201      	movs	r2, #1
   1e416:	701a      	strb	r2, [r3, #0]
	return true;
   1e418:	2301      	movs	r3, #1
}
   1e41a:	0018      	movs	r0, r3
   1e41c:	46bd      	mov	sp, r7
   1e41e:	b004      	add	sp, #16
   1e420:	bd80      	pop	{r7, pc}
   1e422:	46c0      	nop			; (mov r8, r8)
   1e424:	00005508 	.word	0x00005508
   1e428:	0001fca1 	.word	0x0001fca1
   1e42c:	0001fee1 	.word	0x0001fee1

0001e430 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1e430:	b590      	push	{r4, r7, lr}
   1e432:	b089      	sub	sp, #36	; 0x24
   1e434:	af02      	add	r7, sp, #8
   1e436:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1e438:	2380      	movs	r3, #128	; 0x80
   1e43a:	009a      	lsls	r2, r3, #2
   1e43c:	4841      	ldr	r0, [pc, #260]	; (1e544 <mmc_cmd8+0x114>)
   1e43e:	2300      	movs	r3, #0
   1e440:	9300      	str	r3, [sp, #0]
   1e442:	2301      	movs	r3, #1
   1e444:	2100      	movs	r1, #0
   1e446:	4c40      	ldr	r4, [pc, #256]	; (1e548 <mmc_cmd8+0x118>)
   1e448:	47a0      	blx	r4
   1e44a:	0003      	movs	r3, r0
   1e44c:	001a      	movs	r2, r3
   1e44e:	2301      	movs	r3, #1
   1e450:	4053      	eors	r3, r2
   1e452:	b2db      	uxtb	r3, r3
   1e454:	2b00      	cmp	r3, #0
   1e456:	d001      	beq.n	1e45c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1e458:	2300      	movs	r3, #0
   1e45a:	e06e      	b.n	1e53a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e45c:	2316      	movs	r3, #22
   1e45e:	18fb      	adds	r3, r7, r3
   1e460:	2200      	movs	r2, #0
   1e462:	801a      	strh	r2, [r3, #0]
   1e464:	e014      	b.n	1e490 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1e466:	2310      	movs	r3, #16
   1e468:	18fb      	adds	r3, r7, r3
   1e46a:	0018      	movs	r0, r3
   1e46c:	4b37      	ldr	r3, [pc, #220]	; (1e54c <mmc_cmd8+0x11c>)
   1e46e:	4798      	blx	r3
   1e470:	0003      	movs	r3, r0
   1e472:	001a      	movs	r2, r3
   1e474:	2301      	movs	r3, #1
   1e476:	4053      	eors	r3, r2
   1e478:	b2db      	uxtb	r3, r3
   1e47a:	2b00      	cmp	r3, #0
   1e47c:	d001      	beq.n	1e482 <mmc_cmd8+0x52>
			return false;
   1e47e:	2300      	movs	r3, #0
   1e480:	e05b      	b.n	1e53a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e482:	2316      	movs	r3, #22
   1e484:	18fb      	adds	r3, r7, r3
   1e486:	881a      	ldrh	r2, [r3, #0]
   1e488:	2316      	movs	r3, #22
   1e48a:	18fb      	adds	r3, r7, r3
   1e48c:	3201      	adds	r2, #1
   1e48e:	801a      	strh	r2, [r3, #0]
   1e490:	2316      	movs	r3, #22
   1e492:	18fb      	adds	r3, r7, r3
   1e494:	881b      	ldrh	r3, [r3, #0]
   1e496:	2b31      	cmp	r3, #49	; 0x31
   1e498:	d9e5      	bls.n	1e466 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1e49a:	693b      	ldr	r3, [r7, #16]
   1e49c:	b2db      	uxtb	r3, r3
   1e49e:	2202      	movs	r2, #2
   1e4a0:	4013      	ands	r3, r2
   1e4a2:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1e4a4:	687b      	ldr	r3, [r7, #4]
   1e4a6:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1e4a8:	4b29      	ldr	r3, [pc, #164]	; (1e550 <mmc_cmd8+0x120>)
   1e4aa:	681b      	ldr	r3, [r3, #0]
   1e4ac:	330e      	adds	r3, #14
   1e4ae:	0018      	movs	r0, r3
   1e4b0:	230c      	movs	r3, #12
   1e4b2:	223e      	movs	r2, #62	; 0x3e
   1e4b4:	2180      	movs	r1, #128	; 0x80
   1e4b6:	4c27      	ldr	r4, [pc, #156]	; (1e554 <mmc_cmd8+0x124>)
   1e4b8:	47a0      	blx	r4
   1e4ba:	0002      	movs	r2, r0
   1e4bc:	4b26      	ldr	r3, [pc, #152]	; (1e558 <mmc_cmd8+0x128>)
   1e4be:	429a      	cmp	r2, r3
   1e4c0:	d135      	bne.n	1e52e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e4c2:	e014      	b.n	1e4ee <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1e4c4:	230c      	movs	r3, #12
   1e4c6:	18fb      	adds	r3, r7, r3
   1e4c8:	0018      	movs	r0, r3
   1e4ca:	4b20      	ldr	r3, [pc, #128]	; (1e54c <mmc_cmd8+0x11c>)
   1e4cc:	4798      	blx	r3
   1e4ce:	0003      	movs	r3, r0
   1e4d0:	001a      	movs	r2, r3
   1e4d2:	2301      	movs	r3, #1
   1e4d4:	4053      	eors	r3, r2
   1e4d6:	b2db      	uxtb	r3, r3
   1e4d8:	2b00      	cmp	r3, #0
   1e4da:	d001      	beq.n	1e4e0 <mmc_cmd8+0xb0>
				return false;
   1e4dc:	2300      	movs	r3, #0
   1e4de:	e02c      	b.n	1e53a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e4e0:	2316      	movs	r3, #22
   1e4e2:	18fb      	adds	r3, r7, r3
   1e4e4:	881a      	ldrh	r2, [r3, #0]
   1e4e6:	2316      	movs	r3, #22
   1e4e8:	18fb      	adds	r3, r7, r3
   1e4ea:	3201      	adds	r2, #1
   1e4ec:	801a      	strh	r2, [r3, #0]
   1e4ee:	2316      	movs	r3, #22
   1e4f0:	18fb      	adds	r3, r7, r3
   1e4f2:	881b      	ldrh	r3, [r3, #0]
   1e4f4:	2b35      	cmp	r3, #53	; 0x35
   1e4f6:	d9e5      	bls.n	1e4c4 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1e4f8:	4b15      	ldr	r3, [pc, #84]	; (1e550 <mmc_cmd8+0x120>)
   1e4fa:	681b      	ldr	r3, [r3, #0]
   1e4fc:	68fa      	ldr	r2, [r7, #12]
   1e4fe:	0852      	lsrs	r2, r2, #1
   1e500:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e502:	e014      	b.n	1e52e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1e504:	230c      	movs	r3, #12
   1e506:	18fb      	adds	r3, r7, r3
   1e508:	0018      	movs	r0, r3
   1e50a:	4b10      	ldr	r3, [pc, #64]	; (1e54c <mmc_cmd8+0x11c>)
   1e50c:	4798      	blx	r3
   1e50e:	0003      	movs	r3, r0
   1e510:	001a      	movs	r2, r3
   1e512:	2301      	movs	r3, #1
   1e514:	4053      	eors	r3, r2
   1e516:	b2db      	uxtb	r3, r3
   1e518:	2b00      	cmp	r3, #0
   1e51a:	d001      	beq.n	1e520 <mmc_cmd8+0xf0>
			return false;
   1e51c:	2300      	movs	r3, #0
   1e51e:	e00c      	b.n	1e53a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e520:	2316      	movs	r3, #22
   1e522:	18fb      	adds	r3, r7, r3
   1e524:	881a      	ldrh	r2, [r3, #0]
   1e526:	2316      	movs	r3, #22
   1e528:	18fb      	adds	r3, r7, r3
   1e52a:	3201      	adds	r2, #1
   1e52c:	801a      	strh	r2, [r3, #0]
   1e52e:	2316      	movs	r3, #22
   1e530:	18fb      	adds	r3, r7, r3
   1e532:	881b      	ldrh	r3, [r3, #0]
   1e534:	2b7f      	cmp	r3, #127	; 0x7f
   1e536:	d9e5      	bls.n	1e504 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1e538:	2301      	movs	r3, #1
}
   1e53a:	0018      	movs	r0, r3
   1e53c:	46bd      	mov	sp, r7
   1e53e:	b007      	add	sp, #28
   1e540:	bd90      	pop	{r4, r7, pc}
   1e542:	46c0      	nop			; (mov r8, r8)
   1e544:	00081108 	.word	0x00081108
   1e548:	0001fcc9 	.word	0x0001fcc9
   1e54c:	0001fef5 	.word	0x0001fef5
   1e550:	200040c4 	.word	0x200040c4
   1e554:	0001e0c9 	.word	0x0001e0c9
   1e558:	00000fff 	.word	0x00000fff

0001e55c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1e55c:	b590      	push	{r4, r7, lr}
   1e55e:	b083      	sub	sp, #12
   1e560:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1e562:	4b15      	ldr	r3, [pc, #84]	; (1e5b8 <sd_mmc_cmd9_spi+0x5c>)
   1e564:	681b      	ldr	r3, [r3, #0]
   1e566:	891b      	ldrh	r3, [r3, #8]
   1e568:	0419      	lsls	r1, r3, #16
   1e56a:	4814      	ldr	r0, [pc, #80]	; (1e5bc <sd_mmc_cmd9_spi+0x60>)
   1e56c:	2301      	movs	r3, #1
   1e56e:	9300      	str	r3, [sp, #0]
   1e570:	2301      	movs	r3, #1
   1e572:	2210      	movs	r2, #16
   1e574:	4c12      	ldr	r4, [pc, #72]	; (1e5c0 <sd_mmc_cmd9_spi+0x64>)
   1e576:	47a0      	blx	r4
   1e578:	0003      	movs	r3, r0
   1e57a:	001a      	movs	r2, r3
   1e57c:	2301      	movs	r3, #1
   1e57e:	4053      	eors	r3, r2
   1e580:	b2db      	uxtb	r3, r3
   1e582:	2b00      	cmp	r3, #0
   1e584:	d001      	beq.n	1e58a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1e586:	2300      	movs	r3, #0
   1e588:	e012      	b.n	1e5b0 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1e58a:	4b0b      	ldr	r3, [pc, #44]	; (1e5b8 <sd_mmc_cmd9_spi+0x5c>)
   1e58c:	681b      	ldr	r3, [r3, #0]
   1e58e:	330e      	adds	r3, #14
   1e590:	2101      	movs	r1, #1
   1e592:	0018      	movs	r0, r3
   1e594:	4b0b      	ldr	r3, [pc, #44]	; (1e5c4 <sd_mmc_cmd9_spi+0x68>)
   1e596:	4798      	blx	r3
   1e598:	0003      	movs	r3, r0
   1e59a:	001a      	movs	r2, r3
   1e59c:	2301      	movs	r3, #1
   1e59e:	4053      	eors	r3, r2
   1e5a0:	b2db      	uxtb	r3, r3
   1e5a2:	2b00      	cmp	r3, #0
   1e5a4:	d001      	beq.n	1e5aa <sd_mmc_cmd9_spi+0x4e>
		return false;
   1e5a6:	2300      	movs	r3, #0
   1e5a8:	e002      	b.n	1e5b0 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1e5aa:	4b07      	ldr	r3, [pc, #28]	; (1e5c8 <sd_mmc_cmd9_spi+0x6c>)
   1e5ac:	4798      	blx	r3
   1e5ae:	0003      	movs	r3, r0
}
   1e5b0:	0018      	movs	r0, r3
   1e5b2:	46bd      	mov	sp, r7
   1e5b4:	b001      	add	sp, #4
   1e5b6:	bd90      	pop	{r4, r7, pc}
   1e5b8:	200040c4 	.word	0x200040c4
   1e5bc:	00081109 	.word	0x00081109
   1e5c0:	0001fcc9 	.word	0x0001fcc9
   1e5c4:	0001ff99 	.word	0x0001ff99
   1e5c8:	0002003d 	.word	0x0002003d

0001e5cc <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1e5cc:	b5b0      	push	{r4, r5, r7, lr}
   1e5ce:	b084      	sub	sp, #16
   1e5d0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1e5d2:	4b45      	ldr	r3, [pc, #276]	; (1e6e8 <mmc_decode_csd+0x11c>)
   1e5d4:	681b      	ldr	r3, [r3, #0]
   1e5d6:	330e      	adds	r3, #14
   1e5d8:	0018      	movs	r0, r3
   1e5da:	2304      	movs	r3, #4
   1e5dc:	227a      	movs	r2, #122	; 0x7a
   1e5de:	2180      	movs	r1, #128	; 0x80
   1e5e0:	4c42      	ldr	r4, [pc, #264]	; (1e6ec <mmc_decode_csd+0x120>)
   1e5e2:	47a0      	blx	r4
   1e5e4:	0003      	movs	r3, r0
   1e5e6:	2b02      	cmp	r3, #2
   1e5e8:	d011      	beq.n	1e60e <mmc_decode_csd+0x42>
   1e5ea:	d802      	bhi.n	1e5f2 <mmc_decode_csd+0x26>
   1e5ec:	2b01      	cmp	r3, #1
   1e5ee:	d009      	beq.n	1e604 <mmc_decode_csd+0x38>
   1e5f0:	e003      	b.n	1e5fa <mmc_decode_csd+0x2e>
   1e5f2:	2b03      	cmp	r3, #3
   1e5f4:	d010      	beq.n	1e618 <mmc_decode_csd+0x4c>
   1e5f6:	2b04      	cmp	r3, #4
   1e5f8:	d013      	beq.n	1e622 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1e5fa:	4b3b      	ldr	r3, [pc, #236]	; (1e6e8 <mmc_decode_csd+0x11c>)
   1e5fc:	681b      	ldr	r3, [r3, #0]
   1e5fe:	2212      	movs	r2, #18
   1e600:	731a      	strb	r2, [r3, #12]
		break;
   1e602:	e013      	b.n	1e62c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1e604:	4b38      	ldr	r3, [pc, #224]	; (1e6e8 <mmc_decode_csd+0x11c>)
   1e606:	681b      	ldr	r3, [r3, #0]
   1e608:	2214      	movs	r2, #20
   1e60a:	731a      	strb	r2, [r3, #12]
		break;
   1e60c:	e00e      	b.n	1e62c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1e60e:	4b36      	ldr	r3, [pc, #216]	; (1e6e8 <mmc_decode_csd+0x11c>)
   1e610:	681b      	ldr	r3, [r3, #0]
   1e612:	2222      	movs	r2, #34	; 0x22
   1e614:	731a      	strb	r2, [r3, #12]
		break;
   1e616:	e009      	b.n	1e62c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1e618:	4b33      	ldr	r3, [pc, #204]	; (1e6e8 <mmc_decode_csd+0x11c>)
   1e61a:	681b      	ldr	r3, [r3, #0]
   1e61c:	2230      	movs	r2, #48	; 0x30
   1e61e:	731a      	strb	r2, [r3, #12]
		break;
   1e620:	e004      	b.n	1e62c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1e622:	4b31      	ldr	r3, [pc, #196]	; (1e6e8 <mmc_decode_csd+0x11c>)
   1e624:	681b      	ldr	r3, [r3, #0]
   1e626:	2240      	movs	r2, #64	; 0x40
   1e628:	731a      	strb	r2, [r3, #12]
		break;
   1e62a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e62c:	4b2e      	ldr	r3, [pc, #184]	; (1e6e8 <mmc_decode_csd+0x11c>)
   1e62e:	681b      	ldr	r3, [r3, #0]
   1e630:	330e      	adds	r3, #14
   1e632:	0018      	movs	r0, r3
   1e634:	2308      	movs	r3, #8
   1e636:	2260      	movs	r2, #96	; 0x60
   1e638:	2180      	movs	r1, #128	; 0x80
   1e63a:	4c2c      	ldr	r4, [pc, #176]	; (1e6ec <mmc_decode_csd+0x120>)
   1e63c:	47a0      	blx	r4
   1e63e:	0003      	movs	r3, r0
   1e640:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e642:	68fb      	ldr	r3, [r7, #12]
   1e644:	2207      	movs	r2, #7
   1e646:	401a      	ands	r2, r3
   1e648:	4b29      	ldr	r3, [pc, #164]	; (1e6f0 <mmc_decode_csd+0x124>)
   1e64a:	0092      	lsls	r2, r2, #2
   1e64c:	58d3      	ldr	r3, [r2, r3]
   1e64e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e650:	68fb      	ldr	r3, [r7, #12]
   1e652:	08db      	lsrs	r3, r3, #3
   1e654:	220f      	movs	r2, #15
   1e656:	401a      	ands	r2, r3
   1e658:	4b26      	ldr	r3, [pc, #152]	; (1e6f4 <mmc_decode_csd+0x128>)
   1e65a:	0092      	lsls	r2, r2, #2
   1e65c:	58d3      	ldr	r3, [r2, r3]
   1e65e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e660:	4b21      	ldr	r3, [pc, #132]	; (1e6e8 <mmc_decode_csd+0x11c>)
   1e662:	681b      	ldr	r3, [r3, #0]
   1e664:	68ba      	ldr	r2, [r7, #8]
   1e666:	6879      	ldr	r1, [r7, #4]
   1e668:	434a      	muls	r2, r1
   1e66a:	21fa      	movs	r1, #250	; 0xfa
   1e66c:	0089      	lsls	r1, r1, #2
   1e66e:	434a      	muls	r2, r1
   1e670:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1e672:	4b1d      	ldr	r3, [pc, #116]	; (1e6e8 <mmc_decode_csd+0x11c>)
   1e674:	681b      	ldr	r3, [r3, #0]
   1e676:	330e      	adds	r3, #14
   1e678:	0018      	movs	r0, r3
   1e67a:	230c      	movs	r3, #12
   1e67c:	223e      	movs	r2, #62	; 0x3e
   1e67e:	2180      	movs	r1, #128	; 0x80
   1e680:	4c1a      	ldr	r4, [pc, #104]	; (1e6ec <mmc_decode_csd+0x120>)
   1e682:	47a0      	blx	r4
   1e684:	0002      	movs	r2, r0
   1e686:	4b1c      	ldr	r3, [pc, #112]	; (1e6f8 <mmc_decode_csd+0x12c>)
   1e688:	429a      	cmp	r2, r3
   1e68a:	d028      	beq.n	1e6de <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e68c:	4b16      	ldr	r3, [pc, #88]	; (1e6e8 <mmc_decode_csd+0x11c>)
   1e68e:	681b      	ldr	r3, [r3, #0]
   1e690:	330e      	adds	r3, #14
   1e692:	0018      	movs	r0, r3
   1e694:	230c      	movs	r3, #12
   1e696:	223e      	movs	r2, #62	; 0x3e
   1e698:	2180      	movs	r1, #128	; 0x80
   1e69a:	4c14      	ldr	r4, [pc, #80]	; (1e6ec <mmc_decode_csd+0x120>)
   1e69c:	47a0      	blx	r4
   1e69e:	0003      	movs	r3, r0
   1e6a0:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e6a2:	4b11      	ldr	r3, [pc, #68]	; (1e6e8 <mmc_decode_csd+0x11c>)
   1e6a4:	681b      	ldr	r3, [r3, #0]
   1e6a6:	330e      	adds	r3, #14
   1e6a8:	0018      	movs	r0, r3
   1e6aa:	2303      	movs	r3, #3
   1e6ac:	222f      	movs	r2, #47	; 0x2f
   1e6ae:	2180      	movs	r1, #128	; 0x80
   1e6b0:	4d0e      	ldr	r5, [pc, #56]	; (1e6ec <mmc_decode_csd+0x120>)
   1e6b2:	47a8      	blx	r5
   1e6b4:	0003      	movs	r3, r0
   1e6b6:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e6b8:	409c      	lsls	r4, r3
   1e6ba:	0023      	movs	r3, r4
   1e6bc:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e6be:	4b0a      	ldr	r3, [pc, #40]	; (1e6e8 <mmc_decode_csd+0x11c>)
   1e6c0:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e6c2:	4b09      	ldr	r3, [pc, #36]	; (1e6e8 <mmc_decode_csd+0x11c>)
   1e6c4:	681b      	ldr	r3, [r3, #0]
   1e6c6:	330e      	adds	r3, #14
   1e6c8:	0018      	movs	r0, r3
   1e6ca:	2304      	movs	r3, #4
   1e6cc:	2250      	movs	r2, #80	; 0x50
   1e6ce:	2180      	movs	r1, #128	; 0x80
   1e6d0:	4d06      	ldr	r5, [pc, #24]	; (1e6ec <mmc_decode_csd+0x120>)
   1e6d2:	47a8      	blx	r5
   1e6d4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e6d6:	683b      	ldr	r3, [r7, #0]
   1e6d8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e6da:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e6dc:	6063      	str	r3, [r4, #4]
	}
}
   1e6de:	46c0      	nop			; (mov r8, r8)
   1e6e0:	46bd      	mov	sp, r7
   1e6e2:	b004      	add	sp, #16
   1e6e4:	bdb0      	pop	{r4, r5, r7, pc}
   1e6e6:	46c0      	nop			; (mov r8, r8)
   1e6e8:	200040c4 	.word	0x200040c4
   1e6ec:	0001e0c9 	.word	0x0001e0c9
   1e6f0:	000383bc 	.word	0x000383bc
   1e6f4:	00038418 	.word	0x00038418
   1e6f8:	00000fff 	.word	0x00000fff

0001e6fc <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1e6fc:	b5b0      	push	{r4, r5, r7, lr}
   1e6fe:	b084      	sub	sp, #16
   1e700:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e702:	4b35      	ldr	r3, [pc, #212]	; (1e7d8 <sd_decode_csd+0xdc>)
   1e704:	681b      	ldr	r3, [r3, #0]
   1e706:	330e      	adds	r3, #14
   1e708:	0018      	movs	r0, r3
   1e70a:	2308      	movs	r3, #8
   1e70c:	2260      	movs	r2, #96	; 0x60
   1e70e:	2180      	movs	r1, #128	; 0x80
   1e710:	4c32      	ldr	r4, [pc, #200]	; (1e7dc <sd_decode_csd+0xe0>)
   1e712:	47a0      	blx	r4
   1e714:	0003      	movs	r3, r0
   1e716:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e718:	68fb      	ldr	r3, [r7, #12]
   1e71a:	2207      	movs	r2, #7
   1e71c:	401a      	ands	r2, r3
   1e71e:	4b30      	ldr	r3, [pc, #192]	; (1e7e0 <sd_decode_csd+0xe4>)
   1e720:	0092      	lsls	r2, r2, #2
   1e722:	58d3      	ldr	r3, [r2, r3]
   1e724:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e726:	68fb      	ldr	r3, [r7, #12]
   1e728:	08db      	lsrs	r3, r3, #3
   1e72a:	220f      	movs	r2, #15
   1e72c:	401a      	ands	r2, r3
   1e72e:	4b2d      	ldr	r3, [pc, #180]	; (1e7e4 <sd_decode_csd+0xe8>)
   1e730:	0092      	lsls	r2, r2, #2
   1e732:	58d3      	ldr	r3, [r2, r3]
   1e734:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e736:	4b28      	ldr	r3, [pc, #160]	; (1e7d8 <sd_decode_csd+0xdc>)
   1e738:	681b      	ldr	r3, [r3, #0]
   1e73a:	68ba      	ldr	r2, [r7, #8]
   1e73c:	6879      	ldr	r1, [r7, #4]
   1e73e:	434a      	muls	r2, r1
   1e740:	21fa      	movs	r1, #250	; 0xfa
   1e742:	0089      	lsls	r1, r1, #2
   1e744:	434a      	muls	r2, r1
   1e746:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1e748:	4b23      	ldr	r3, [pc, #140]	; (1e7d8 <sd_decode_csd+0xdc>)
   1e74a:	681b      	ldr	r3, [r3, #0]
   1e74c:	330e      	adds	r3, #14
   1e74e:	0018      	movs	r0, r3
   1e750:	2302      	movs	r3, #2
   1e752:	227e      	movs	r2, #126	; 0x7e
   1e754:	2180      	movs	r1, #128	; 0x80
   1e756:	4c21      	ldr	r4, [pc, #132]	; (1e7dc <sd_decode_csd+0xe0>)
   1e758:	47a0      	blx	r4
   1e75a:	1e03      	subs	r3, r0, #0
   1e75c:	d00f      	beq.n	1e77e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1e75e:	4b1e      	ldr	r3, [pc, #120]	; (1e7d8 <sd_decode_csd+0xdc>)
   1e760:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1e762:	4b1d      	ldr	r3, [pc, #116]	; (1e7d8 <sd_decode_csd+0xdc>)
   1e764:	681b      	ldr	r3, [r3, #0]
   1e766:	330e      	adds	r3, #14
   1e768:	0018      	movs	r0, r3
   1e76a:	2316      	movs	r3, #22
   1e76c:	2230      	movs	r2, #48	; 0x30
   1e76e:	2180      	movs	r1, #128	; 0x80
   1e770:	4d1a      	ldr	r5, [pc, #104]	; (1e7dc <sd_decode_csd+0xe0>)
   1e772:	47a8      	blx	r5
   1e774:	0003      	movs	r3, r0
				* 512;
   1e776:	3301      	adds	r3, #1
   1e778:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1e77a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1e77c:	e028      	b.n	1e7d0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e77e:	4b16      	ldr	r3, [pc, #88]	; (1e7d8 <sd_decode_csd+0xdc>)
   1e780:	681b      	ldr	r3, [r3, #0]
   1e782:	330e      	adds	r3, #14
   1e784:	0018      	movs	r0, r3
   1e786:	230c      	movs	r3, #12
   1e788:	223e      	movs	r2, #62	; 0x3e
   1e78a:	2180      	movs	r1, #128	; 0x80
   1e78c:	4c13      	ldr	r4, [pc, #76]	; (1e7dc <sd_decode_csd+0xe0>)
   1e78e:	47a0      	blx	r4
   1e790:	0003      	movs	r3, r0
   1e792:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e794:	4b10      	ldr	r3, [pc, #64]	; (1e7d8 <sd_decode_csd+0xdc>)
   1e796:	681b      	ldr	r3, [r3, #0]
   1e798:	330e      	adds	r3, #14
   1e79a:	0018      	movs	r0, r3
   1e79c:	2303      	movs	r3, #3
   1e79e:	222f      	movs	r2, #47	; 0x2f
   1e7a0:	2180      	movs	r1, #128	; 0x80
   1e7a2:	4d0e      	ldr	r5, [pc, #56]	; (1e7dc <sd_decode_csd+0xe0>)
   1e7a4:	47a8      	blx	r5
   1e7a6:	0003      	movs	r3, r0
   1e7a8:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e7aa:	409c      	lsls	r4, r3
   1e7ac:	0023      	movs	r3, r4
   1e7ae:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e7b0:	4b09      	ldr	r3, [pc, #36]	; (1e7d8 <sd_decode_csd+0xdc>)
   1e7b2:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1e7b4:	4b08      	ldr	r3, [pc, #32]	; (1e7d8 <sd_decode_csd+0xdc>)
   1e7b6:	681b      	ldr	r3, [r3, #0]
   1e7b8:	330e      	adds	r3, #14
   1e7ba:	0018      	movs	r0, r3
   1e7bc:	2304      	movs	r3, #4
   1e7be:	2250      	movs	r2, #80	; 0x50
   1e7c0:	2180      	movs	r1, #128	; 0x80
   1e7c2:	4d06      	ldr	r5, [pc, #24]	; (1e7dc <sd_decode_csd+0xe0>)
   1e7c4:	47a8      	blx	r5
   1e7c6:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e7c8:	683b      	ldr	r3, [r7, #0]
   1e7ca:	4093      	lsls	r3, r2
				/ 1024;
   1e7cc:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e7ce:	6063      	str	r3, [r4, #4]
}
   1e7d0:	46c0      	nop			; (mov r8, r8)
   1e7d2:	46bd      	mov	sp, r7
   1e7d4:	b004      	add	sp, #16
   1e7d6:	bdb0      	pop	{r4, r5, r7, pc}
   1e7d8:	200040c4 	.word	0x200040c4
   1e7dc:	0001e0c9 	.word	0x0001e0c9
   1e7e0:	000383bc 	.word	0x000383bc
   1e7e4:	000383d8 	.word	0x000383d8

0001e7e8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1e7e8:	b580      	push	{r7, lr}
   1e7ea:	b082      	sub	sp, #8
   1e7ec:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1e7ee:	4b11      	ldr	r3, [pc, #68]	; (1e834 <sd_mmc_cmd13+0x4c>)
   1e7f0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1e7f2:	4b11      	ldr	r3, [pc, #68]	; (1e838 <sd_mmc_cmd13+0x50>)
   1e7f4:	2100      	movs	r1, #0
   1e7f6:	0018      	movs	r0, r3
   1e7f8:	4b10      	ldr	r3, [pc, #64]	; (1e83c <sd_mmc_cmd13+0x54>)
   1e7fa:	4798      	blx	r3
   1e7fc:	0003      	movs	r3, r0
   1e7fe:	001a      	movs	r2, r3
   1e800:	2301      	movs	r3, #1
   1e802:	4053      	eors	r3, r2
   1e804:	b2db      	uxtb	r3, r3
   1e806:	2b00      	cmp	r3, #0
   1e808:	d001      	beq.n	1e80e <sd_mmc_cmd13+0x26>
				return false;
   1e80a:	2300      	movs	r3, #0
   1e80c:	e00e      	b.n	1e82c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1e80e:	4b0c      	ldr	r3, [pc, #48]	; (1e840 <sd_mmc_cmd13+0x58>)
   1e810:	4798      	blx	r3
   1e812:	0002      	movs	r2, r0
   1e814:	23ff      	movs	r3, #255	; 0xff
   1e816:	4013      	ands	r3, r2
   1e818:	d006      	beq.n	1e828 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1e81a:	687b      	ldr	r3, [r7, #4]
   1e81c:	1e5a      	subs	r2, r3, #1
   1e81e:	607a      	str	r2, [r7, #4]
   1e820:	2b00      	cmp	r3, #0
   1e822:	d1e6      	bne.n	1e7f2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1e824:	2300      	movs	r3, #0
   1e826:	e001      	b.n	1e82c <sd_mmc_cmd13+0x44>
				break;
   1e828:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1e82a:	2301      	movs	r3, #1
}
   1e82c:	0018      	movs	r0, r3
   1e82e:	46bd      	mov	sp, r7
   1e830:	b002      	add	sp, #8
   1e832:	bd80      	pop	{r7, pc}
   1e834:	00030d40 	.word	0x00030d40
   1e838:	00001b0d 	.word	0x00001b0d
   1e83c:	0001fca1 	.word	0x0001fca1
   1e840:	0001fee1 	.word	0x0001fee1

0001e844 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1e844:	b590      	push	{r4, r7, lr}
   1e846:	b085      	sub	sp, #20
   1e848:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1e84a:	4b38      	ldr	r3, [pc, #224]	; (1e92c <sd_acmd51+0xe8>)
   1e84c:	681b      	ldr	r3, [r3, #0]
   1e84e:	891b      	ldrh	r3, [r3, #8]
   1e850:	041b      	lsls	r3, r3, #16
   1e852:	4a37      	ldr	r2, [pc, #220]	; (1e930 <sd_acmd51+0xec>)
   1e854:	0019      	movs	r1, r3
   1e856:	0010      	movs	r0, r2
   1e858:	4b36      	ldr	r3, [pc, #216]	; (1e934 <sd_acmd51+0xf0>)
   1e85a:	4798      	blx	r3
   1e85c:	0003      	movs	r3, r0
   1e85e:	001a      	movs	r2, r3
   1e860:	2301      	movs	r3, #1
   1e862:	4053      	eors	r3, r2
   1e864:	b2db      	uxtb	r3, r3
   1e866:	2b00      	cmp	r3, #0
   1e868:	d001      	beq.n	1e86e <sd_acmd51+0x2a>
		return false;
   1e86a:	2300      	movs	r3, #0
   1e86c:	e059      	b.n	1e922 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1e86e:	4832      	ldr	r0, [pc, #200]	; (1e938 <sd_acmd51+0xf4>)
   1e870:	2301      	movs	r3, #1
   1e872:	9300      	str	r3, [sp, #0]
   1e874:	2301      	movs	r3, #1
   1e876:	2208      	movs	r2, #8
   1e878:	2100      	movs	r1, #0
   1e87a:	4c30      	ldr	r4, [pc, #192]	; (1e93c <sd_acmd51+0xf8>)
   1e87c:	47a0      	blx	r4
   1e87e:	0003      	movs	r3, r0
   1e880:	001a      	movs	r2, r3
   1e882:	2301      	movs	r3, #1
   1e884:	4053      	eors	r3, r2
   1e886:	b2db      	uxtb	r3, r3
   1e888:	2b00      	cmp	r3, #0
   1e88a:	d001      	beq.n	1e890 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1e88c:	2300      	movs	r3, #0
   1e88e:	e048      	b.n	1e922 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1e890:	003b      	movs	r3, r7
   1e892:	2101      	movs	r1, #1
   1e894:	0018      	movs	r0, r3
   1e896:	4b2a      	ldr	r3, [pc, #168]	; (1e940 <sd_acmd51+0xfc>)
   1e898:	4798      	blx	r3
   1e89a:	0003      	movs	r3, r0
   1e89c:	001a      	movs	r2, r3
   1e89e:	2301      	movs	r3, #1
   1e8a0:	4053      	eors	r3, r2
   1e8a2:	b2db      	uxtb	r3, r3
   1e8a4:	2b00      	cmp	r3, #0
   1e8a6:	d001      	beq.n	1e8ac <sd_acmd51+0x68>
		return false;
   1e8a8:	2300      	movs	r3, #0
   1e8aa:	e03a      	b.n	1e922 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1e8ac:	4b25      	ldr	r3, [pc, #148]	; (1e944 <sd_acmd51+0x100>)
   1e8ae:	4798      	blx	r3
   1e8b0:	0003      	movs	r3, r0
   1e8b2:	001a      	movs	r2, r3
   1e8b4:	2301      	movs	r3, #1
   1e8b6:	4053      	eors	r3, r2
   1e8b8:	b2db      	uxtb	r3, r3
   1e8ba:	2b00      	cmp	r3, #0
   1e8bc:	d001      	beq.n	1e8c2 <sd_acmd51+0x7e>
		return false;
   1e8be:	2300      	movs	r3, #0
   1e8c0:	e02f      	b.n	1e922 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1e8c2:	0038      	movs	r0, r7
   1e8c4:	2304      	movs	r3, #4
   1e8c6:	2238      	movs	r2, #56	; 0x38
   1e8c8:	2140      	movs	r1, #64	; 0x40
   1e8ca:	4c1f      	ldr	r4, [pc, #124]	; (1e948 <sd_acmd51+0x104>)
   1e8cc:	47a0      	blx	r4
   1e8ce:	0003      	movs	r3, r0
   1e8d0:	2b01      	cmp	r3, #1
   1e8d2:	d008      	beq.n	1e8e6 <sd_acmd51+0xa2>
   1e8d4:	d302      	bcc.n	1e8dc <sd_acmd51+0x98>
   1e8d6:	2b02      	cmp	r3, #2
   1e8d8:	d00a      	beq.n	1e8f0 <sd_acmd51+0xac>
   1e8da:	e01c      	b.n	1e916 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e8dc:	4b13      	ldr	r3, [pc, #76]	; (1e92c <sd_acmd51+0xe8>)
   1e8de:	681b      	ldr	r3, [r3, #0]
   1e8e0:	2210      	movs	r2, #16
   1e8e2:	731a      	strb	r2, [r3, #12]
		break;
   1e8e4:	e01c      	b.n	1e920 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1e8e6:	4b11      	ldr	r3, [pc, #68]	; (1e92c <sd_acmd51+0xe8>)
   1e8e8:	681b      	ldr	r3, [r3, #0]
   1e8ea:	221a      	movs	r2, #26
   1e8ec:	731a      	strb	r2, [r3, #12]
		break;
   1e8ee:	e017      	b.n	1e920 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1e8f0:	0038      	movs	r0, r7
   1e8f2:	2301      	movs	r3, #1
   1e8f4:	222f      	movs	r2, #47	; 0x2f
   1e8f6:	2140      	movs	r1, #64	; 0x40
   1e8f8:	4c13      	ldr	r4, [pc, #76]	; (1e948 <sd_acmd51+0x104>)
   1e8fa:	47a0      	blx	r4
   1e8fc:	0003      	movs	r3, r0
   1e8fe:	2b01      	cmp	r3, #1
   1e900:	d104      	bne.n	1e90c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1e902:	4b0a      	ldr	r3, [pc, #40]	; (1e92c <sd_acmd51+0xe8>)
   1e904:	681b      	ldr	r3, [r3, #0]
   1e906:	2230      	movs	r2, #48	; 0x30
   1e908:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1e90a:	e009      	b.n	1e920 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1e90c:	4b07      	ldr	r3, [pc, #28]	; (1e92c <sd_acmd51+0xe8>)
   1e90e:	681b      	ldr	r3, [r3, #0]
   1e910:	2220      	movs	r2, #32
   1e912:	731a      	strb	r2, [r3, #12]
		break;
   1e914:	e004      	b.n	1e920 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e916:	4b05      	ldr	r3, [pc, #20]	; (1e92c <sd_acmd51+0xe8>)
   1e918:	681b      	ldr	r3, [r3, #0]
   1e91a:	2210      	movs	r2, #16
   1e91c:	731a      	strb	r2, [r3, #12]
		break;
   1e91e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1e920:	2301      	movs	r3, #1
}
   1e922:	0018      	movs	r0, r3
   1e924:	46bd      	mov	sp, r7
   1e926:	b003      	add	sp, #12
   1e928:	bd90      	pop	{r4, r7, pc}
   1e92a:	46c0      	nop			; (mov r8, r8)
   1e92c:	200040c4 	.word	0x200040c4
   1e930:	00001137 	.word	0x00001137
   1e934:	0001fca1 	.word	0x0001fca1
   1e938:	00081133 	.word	0x00081133
   1e93c:	0001fcc9 	.word	0x0001fcc9
   1e940:	0001ff99 	.word	0x0001ff99
   1e944:	0002003d 	.word	0x0002003d
   1e948:	0001e0c9 	.word	0x0001e0c9

0001e94c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1e94c:	b580      	push	{r7, lr}
   1e94e:	b082      	sub	sp, #8
   1e950:	af00      	add	r7, sp, #0
   1e952:	0002      	movs	r2, r0
   1e954:	1dfb      	adds	r3, r7, #7
   1e956:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1e958:	1dfb      	adds	r3, r7, #7
   1e95a:	781b      	ldrb	r3, [r3, #0]
   1e95c:	2b00      	cmp	r3, #0
   1e95e:	d001      	beq.n	1e964 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1e960:	2304      	movs	r3, #4
   1e962:	e047      	b.n	1e9f4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1e964:	1dfb      	adds	r3, r7, #7
   1e966:	781b      	ldrb	r3, [r3, #0]
   1e968:	4a24      	ldr	r2, [pc, #144]	; (1e9fc <sd_mmc_select_slot+0xb0>)
   1e96a:	015b      	lsls	r3, r3, #5
   1e96c:	18d3      	adds	r3, r2, r3
   1e96e:	330a      	adds	r3, #10
   1e970:	781b      	ldrb	r3, [r3, #0]
   1e972:	2b04      	cmp	r3, #4
   1e974:	d008      	beq.n	1e988 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1e976:	1dfb      	adds	r3, r7, #7
   1e978:	781b      	ldrb	r3, [r3, #0]
   1e97a:	4a20      	ldr	r2, [pc, #128]	; (1e9fc <sd_mmc_select_slot+0xb0>)
   1e97c:	015b      	lsls	r3, r3, #5
   1e97e:	18d3      	adds	r3, r2, r3
   1e980:	330a      	adds	r3, #10
   1e982:	781b      	ldrb	r3, [r3, #0]
   1e984:	2b03      	cmp	r3, #3
   1e986:	d11d      	bne.n	1e9c4 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1e988:	1dfb      	adds	r3, r7, #7
   1e98a:	781b      	ldrb	r3, [r3, #0]
   1e98c:	4a1b      	ldr	r2, [pc, #108]	; (1e9fc <sd_mmc_select_slot+0xb0>)
   1e98e:	015b      	lsls	r3, r3, #5
   1e990:	18d3      	adds	r3, r2, r3
   1e992:	330a      	adds	r3, #10
   1e994:	2202      	movs	r2, #2
   1e996:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1e998:	1dfb      	adds	r3, r7, #7
   1e99a:	781a      	ldrb	r2, [r3, #0]
   1e99c:	4b17      	ldr	r3, [pc, #92]	; (1e9fc <sd_mmc_select_slot+0xb0>)
   1e99e:	0152      	lsls	r2, r2, #5
   1e9a0:	4917      	ldr	r1, [pc, #92]	; (1ea00 <sd_mmc_select_slot+0xb4>)
   1e9a2:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1e9a4:	1dfb      	adds	r3, r7, #7
   1e9a6:	781b      	ldrb	r3, [r3, #0]
   1e9a8:	4a14      	ldr	r2, [pc, #80]	; (1e9fc <sd_mmc_select_slot+0xb0>)
   1e9aa:	015b      	lsls	r3, r3, #5
   1e9ac:	18d3      	adds	r3, r2, r3
   1e9ae:	330d      	adds	r3, #13
   1e9b0:	2201      	movs	r2, #1
   1e9b2:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1e9b4:	1dfb      	adds	r3, r7, #7
   1e9b6:	781b      	ldrb	r3, [r3, #0]
   1e9b8:	4a10      	ldr	r2, [pc, #64]	; (1e9fc <sd_mmc_select_slot+0xb0>)
   1e9ba:	015b      	lsls	r3, r3, #5
   1e9bc:	18d3      	adds	r3, r2, r3
   1e9be:	331e      	adds	r3, #30
   1e9c0:	2200      	movs	r2, #0
   1e9c2:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1e9c4:	4b0f      	ldr	r3, [pc, #60]	; (1ea04 <sd_mmc_select_slot+0xb8>)
   1e9c6:	1dfa      	adds	r2, r7, #7
   1e9c8:	7812      	ldrb	r2, [r2, #0]
   1e9ca:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1e9cc:	1dfb      	adds	r3, r7, #7
   1e9ce:	781b      	ldrb	r3, [r3, #0]
   1e9d0:	015a      	lsls	r2, r3, #5
   1e9d2:	4b0a      	ldr	r3, [pc, #40]	; (1e9fc <sd_mmc_select_slot+0xb0>)
   1e9d4:	18d2      	adds	r2, r2, r3
   1e9d6:	4b0c      	ldr	r3, [pc, #48]	; (1ea08 <sd_mmc_select_slot+0xbc>)
   1e9d8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1e9da:	4b0c      	ldr	r3, [pc, #48]	; (1ea0c <sd_mmc_select_slot+0xc0>)
   1e9dc:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1e9de:	1dfb      	adds	r3, r7, #7
   1e9e0:	781b      	ldrb	r3, [r3, #0]
   1e9e2:	4a06      	ldr	r2, [pc, #24]	; (1e9fc <sd_mmc_select_slot+0xb0>)
   1e9e4:	015b      	lsls	r3, r3, #5
   1e9e6:	18d3      	adds	r3, r2, r3
   1e9e8:	330a      	adds	r3, #10
   1e9ea:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1e9ec:	3b02      	subs	r3, #2
   1e9ee:	425a      	negs	r2, r3
   1e9f0:	4153      	adcs	r3, r2
   1e9f2:	b2db      	uxtb	r3, r3
}
   1e9f4:	0018      	movs	r0, r3
   1e9f6:	46bd      	mov	sp, r7
   1e9f8:	b002      	add	sp, #8
   1e9fa:	bd80      	pop	{r7, pc}
   1e9fc:	200040a0 	.word	0x200040a0
   1ea00:	00061a80 	.word	0x00061a80
   1ea04:	200040c0 	.word	0x200040c0
   1ea08:	200040c4 	.word	0x200040c4
   1ea0c:	0001ea11 	.word	0x0001ea11

0001ea10 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1ea10:	b5b0      	push	{r4, r5, r7, lr}
   1ea12:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1ea14:	4b09      	ldr	r3, [pc, #36]	; (1ea3c <sd_mmc_configure_slot+0x2c>)
   1ea16:	7818      	ldrb	r0, [r3, #0]
   1ea18:	4b09      	ldr	r3, [pc, #36]	; (1ea40 <sd_mmc_configure_slot+0x30>)
   1ea1a:	681b      	ldr	r3, [r3, #0]
   1ea1c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1ea1e:	4b08      	ldr	r3, [pc, #32]	; (1ea40 <sd_mmc_configure_slot+0x30>)
   1ea20:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1ea22:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1ea24:	4b06      	ldr	r3, [pc, #24]	; (1ea40 <sd_mmc_configure_slot+0x30>)
   1ea26:	681b      	ldr	r3, [r3, #0]
   1ea28:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1ea2a:	1e5c      	subs	r4, r3, #1
   1ea2c:	41a3      	sbcs	r3, r4
   1ea2e:	b2db      	uxtb	r3, r3
   1ea30:	4c04      	ldr	r4, [pc, #16]	; (1ea44 <sd_mmc_configure_slot+0x34>)
   1ea32:	47a0      	blx	r4
}
   1ea34:	46c0      	nop			; (mov r8, r8)
   1ea36:	46bd      	mov	sp, r7
   1ea38:	bdb0      	pop	{r4, r5, r7, pc}
   1ea3a:	46c0      	nop			; (mov r8, r8)
   1ea3c:	200040c0 	.word	0x200040c0
   1ea40:	200040c4 	.word	0x200040c4
   1ea44:	0001fb89 	.word	0x0001fb89

0001ea48 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1ea48:	b580      	push	{r7, lr}
   1ea4a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1ea4c:	4b05      	ldr	r3, [pc, #20]	; (1ea64 <sd_mmc_deselect_slot+0x1c>)
   1ea4e:	781b      	ldrb	r3, [r3, #0]
   1ea50:	2b00      	cmp	r3, #0
   1ea52:	d104      	bne.n	1ea5e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1ea54:	4b03      	ldr	r3, [pc, #12]	; (1ea64 <sd_mmc_deselect_slot+0x1c>)
   1ea56:	781b      	ldrb	r3, [r3, #0]
   1ea58:	0018      	movs	r0, r3
   1ea5a:	4b03      	ldr	r3, [pc, #12]	; (1ea68 <sd_mmc_deselect_slot+0x20>)
   1ea5c:	4798      	blx	r3
	}
}
   1ea5e:	46c0      	nop			; (mov r8, r8)
   1ea60:	46bd      	mov	sp, r7
   1ea62:	bd80      	pop	{r7, pc}
   1ea64:	200040c0 	.word	0x200040c0
   1ea68:	0001fc11 	.word	0x0001fc11

0001ea6c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1ea6c:	b580      	push	{r7, lr}
   1ea6e:	b082      	sub	sp, #8
   1ea70:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1ea72:	1dfb      	adds	r3, r7, #7
   1ea74:	2200      	movs	r2, #0
   1ea76:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1ea78:	4b59      	ldr	r3, [pc, #356]	; (1ebe0 <sd_mmc_spi_card_init+0x174>)
   1ea7a:	681b      	ldr	r3, [r3, #0]
   1ea7c:	2201      	movs	r2, #1
   1ea7e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1ea80:	4b57      	ldr	r3, [pc, #348]	; (1ebe0 <sd_mmc_spi_card_init+0x174>)
   1ea82:	681b      	ldr	r3, [r3, #0]
   1ea84:	2200      	movs	r2, #0
   1ea86:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1ea88:	4b55      	ldr	r3, [pc, #340]	; (1ebe0 <sd_mmc_spi_card_init+0x174>)
   1ea8a:	681b      	ldr	r3, [r3, #0]
   1ea8c:	2200      	movs	r2, #0
   1ea8e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1ea90:	4b54      	ldr	r3, [pc, #336]	; (1ebe4 <sd_mmc_spi_card_init+0x178>)
   1ea92:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1ea94:	2388      	movs	r3, #136	; 0x88
   1ea96:	015b      	lsls	r3, r3, #5
   1ea98:	2100      	movs	r1, #0
   1ea9a:	0018      	movs	r0, r3
   1ea9c:	4b52      	ldr	r3, [pc, #328]	; (1ebe8 <sd_mmc_spi_card_init+0x17c>)
   1ea9e:	4798      	blx	r3
   1eaa0:	0003      	movs	r3, r0
   1eaa2:	001a      	movs	r2, r3
   1eaa4:	2301      	movs	r3, #1
   1eaa6:	4053      	eors	r3, r2
   1eaa8:	b2db      	uxtb	r3, r3
   1eaaa:	2b00      	cmp	r3, #0
   1eaac:	d001      	beq.n	1eab2 <sd_mmc_spi_card_init+0x46>
		return false;
   1eaae:	2300      	movs	r3, #0
   1eab0:	e092      	b.n	1ebd8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1eab2:	1dfb      	adds	r3, r7, #7
   1eab4:	0018      	movs	r0, r3
   1eab6:	4b4d      	ldr	r3, [pc, #308]	; (1ebec <sd_mmc_spi_card_init+0x180>)
   1eab8:	4798      	blx	r3
   1eaba:	0003      	movs	r3, r0
   1eabc:	001a      	movs	r2, r3
   1eabe:	2301      	movs	r3, #1
   1eac0:	4053      	eors	r3, r2
   1eac2:	b2db      	uxtb	r3, r3
   1eac4:	2b00      	cmp	r3, #0
   1eac6:	d001      	beq.n	1eacc <sd_mmc_spi_card_init+0x60>
		return false;
   1eac8:	2300      	movs	r3, #0
   1eaca:	e085      	b.n	1ebd8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1eacc:	4b48      	ldr	r3, [pc, #288]	; (1ebf0 <sd_mmc_spi_card_init+0x184>)
   1eace:	4798      	blx	r3
   1ead0:	0003      	movs	r3, r0
   1ead2:	001a      	movs	r2, r3
   1ead4:	2301      	movs	r3, #1
   1ead6:	4053      	eors	r3, r2
   1ead8:	b2db      	uxtb	r3, r3
   1eada:	2b00      	cmp	r3, #0
   1eadc:	d001      	beq.n	1eae2 <sd_mmc_spi_card_init+0x76>
		return false;
   1eade:	2300      	movs	r3, #0
   1eae0:	e07a      	b.n	1ebd8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1eae2:	4b3f      	ldr	r3, [pc, #252]	; (1ebe0 <sd_mmc_spi_card_init+0x174>)
   1eae4:	681b      	ldr	r3, [r3, #0]
   1eae6:	7adb      	ldrb	r3, [r3, #11]
   1eae8:	001a      	movs	r2, r3
   1eaea:	2301      	movs	r3, #1
   1eaec:	4013      	ands	r3, r2
   1eaee:	d021      	beq.n	1eb34 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1eaf0:	1dfb      	adds	r3, r7, #7
   1eaf2:	781b      	ldrb	r3, [r3, #0]
   1eaf4:	0018      	movs	r0, r3
   1eaf6:	4b3f      	ldr	r3, [pc, #252]	; (1ebf4 <sd_mmc_spi_card_init+0x188>)
   1eaf8:	4798      	blx	r3
   1eafa:	0003      	movs	r3, r0
   1eafc:	001a      	movs	r2, r3
   1eafe:	2301      	movs	r3, #1
   1eb00:	4053      	eors	r3, r2
   1eb02:	b2db      	uxtb	r3, r3
   1eb04:	2b00      	cmp	r3, #0
   1eb06:	d007      	beq.n	1eb18 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1eb08:	4b35      	ldr	r3, [pc, #212]	; (1ebe0 <sd_mmc_spi_card_init+0x174>)
   1eb0a:	681b      	ldr	r3, [r3, #0]
   1eb0c:	2202      	movs	r2, #2
   1eb0e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1eb10:	4b39      	ldr	r3, [pc, #228]	; (1ebf8 <sd_mmc_spi_card_init+0x18c>)
   1eb12:	4798      	blx	r3
   1eb14:	0003      	movs	r3, r0
   1eb16:	e05f      	b.n	1ebd8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1eb18:	4b38      	ldr	r3, [pc, #224]	; (1ebfc <sd_mmc_spi_card_init+0x190>)
   1eb1a:	2100      	movs	r1, #0
   1eb1c:	0018      	movs	r0, r3
   1eb1e:	4b32      	ldr	r3, [pc, #200]	; (1ebe8 <sd_mmc_spi_card_init+0x17c>)
   1eb20:	4798      	blx	r3
   1eb22:	0003      	movs	r3, r0
   1eb24:	001a      	movs	r2, r3
   1eb26:	2301      	movs	r3, #1
   1eb28:	4053      	eors	r3, r2
   1eb2a:	b2db      	uxtb	r3, r3
   1eb2c:	2b00      	cmp	r3, #0
   1eb2e:	d001      	beq.n	1eb34 <sd_mmc_spi_card_init+0xc8>
			return false;
   1eb30:	2300      	movs	r3, #0
   1eb32:	e051      	b.n	1ebd8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1eb34:	4b2a      	ldr	r3, [pc, #168]	; (1ebe0 <sd_mmc_spi_card_init+0x174>)
   1eb36:	681b      	ldr	r3, [r3, #0]
   1eb38:	7adb      	ldrb	r3, [r3, #11]
   1eb3a:	001a      	movs	r2, r3
   1eb3c:	2301      	movs	r3, #1
   1eb3e:	4013      	ands	r3, r2
   1eb40:	d017      	beq.n	1eb72 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1eb42:	4b2f      	ldr	r3, [pc, #188]	; (1ec00 <sd_mmc_spi_card_init+0x194>)
   1eb44:	4798      	blx	r3
   1eb46:	0003      	movs	r3, r0
   1eb48:	001a      	movs	r2, r3
   1eb4a:	2301      	movs	r3, #1
   1eb4c:	4053      	eors	r3, r2
   1eb4e:	b2db      	uxtb	r3, r3
   1eb50:	2b00      	cmp	r3, #0
   1eb52:	d001      	beq.n	1eb58 <sd_mmc_spi_card_init+0xec>
			return false;
   1eb54:	2300      	movs	r3, #0
   1eb56:	e03f      	b.n	1ebd8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1eb58:	4b2a      	ldr	r3, [pc, #168]	; (1ec04 <sd_mmc_spi_card_init+0x198>)
   1eb5a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1eb5c:	4b2a      	ldr	r3, [pc, #168]	; (1ec08 <sd_mmc_spi_card_init+0x19c>)
   1eb5e:	4798      	blx	r3
   1eb60:	0003      	movs	r3, r0
   1eb62:	001a      	movs	r2, r3
   1eb64:	2301      	movs	r3, #1
   1eb66:	4053      	eors	r3, r2
   1eb68:	b2db      	uxtb	r3, r3
   1eb6a:	2b00      	cmp	r3, #0
   1eb6c:	d001      	beq.n	1eb72 <sd_mmc_spi_card_init+0x106>
			return false;
   1eb6e:	2300      	movs	r3, #0
   1eb70:	e032      	b.n	1ebd8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1eb72:	4b1b      	ldr	r3, [pc, #108]	; (1ebe0 <sd_mmc_spi_card_init+0x174>)
   1eb74:	681b      	ldr	r3, [r3, #0]
   1eb76:	7adb      	ldrb	r3, [r3, #11]
   1eb78:	001a      	movs	r2, r3
   1eb7a:	2301      	movs	r3, #1
   1eb7c:	4013      	ands	r3, r2
   1eb7e:	d016      	beq.n	1ebae <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1eb80:	4b17      	ldr	r3, [pc, #92]	; (1ebe0 <sd_mmc_spi_card_init+0x174>)
   1eb82:	681b      	ldr	r3, [r3, #0]
   1eb84:	7adb      	ldrb	r3, [r3, #11]
   1eb86:	001a      	movs	r2, r3
   1eb88:	2308      	movs	r3, #8
   1eb8a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1eb8c:	d10f      	bne.n	1ebae <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1eb8e:	2380      	movs	r3, #128	; 0x80
   1eb90:	009b      	lsls	r3, r3, #2
   1eb92:	4a1e      	ldr	r2, [pc, #120]	; (1ec0c <sd_mmc_spi_card_init+0x1a0>)
   1eb94:	0019      	movs	r1, r3
   1eb96:	0010      	movs	r0, r2
   1eb98:	4b13      	ldr	r3, [pc, #76]	; (1ebe8 <sd_mmc_spi_card_init+0x17c>)
   1eb9a:	4798      	blx	r3
   1eb9c:	0003      	movs	r3, r0
   1eb9e:	001a      	movs	r2, r3
   1eba0:	2301      	movs	r3, #1
   1eba2:	4053      	eors	r3, r2
   1eba4:	b2db      	uxtb	r3, r3
   1eba6:	2b00      	cmp	r3, #0
   1eba8:	d001      	beq.n	1ebae <sd_mmc_spi_card_init+0x142>
			return false;
   1ebaa:	2300      	movs	r3, #0
   1ebac:	e014      	b.n	1ebd8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1ebae:	4b0c      	ldr	r3, [pc, #48]	; (1ebe0 <sd_mmc_spi_card_init+0x174>)
   1ebb0:	681b      	ldr	r3, [r3, #0]
   1ebb2:	7adb      	ldrb	r3, [r3, #11]
   1ebb4:	001a      	movs	r2, r3
   1ebb6:	2301      	movs	r3, #1
   1ebb8:	4013      	ands	r3, r2
   1ebba:	d00a      	beq.n	1ebd2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1ebbc:	4b14      	ldr	r3, [pc, #80]	; (1ec10 <sd_mmc_spi_card_init+0x1a4>)
   1ebbe:	4798      	blx	r3
   1ebc0:	0003      	movs	r3, r0
   1ebc2:	001a      	movs	r2, r3
   1ebc4:	2301      	movs	r3, #1
   1ebc6:	4053      	eors	r3, r2
   1ebc8:	b2db      	uxtb	r3, r3
   1ebca:	2b00      	cmp	r3, #0
   1ebcc:	d001      	beq.n	1ebd2 <sd_mmc_spi_card_init+0x166>
			return false;
   1ebce:	2300      	movs	r3, #0
   1ebd0:	e002      	b.n	1ebd8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1ebd2:	4b10      	ldr	r3, [pc, #64]	; (1ec14 <sd_mmc_spi_card_init+0x1a8>)
   1ebd4:	4798      	blx	r3
	return true;
   1ebd6:	2301      	movs	r3, #1
}
   1ebd8:	0018      	movs	r0, r3
   1ebda:	46bd      	mov	sp, r7
   1ebdc:	b002      	add	sp, #8
   1ebde:	bd80      	pop	{r7, pc}
   1ebe0:	200040c4 	.word	0x200040c4
   1ebe4:	0001fc55 	.word	0x0001fc55
   1ebe8:	0001fca1 	.word	0x0001fca1
   1ebec:	0001e3c1 	.word	0x0001e3c1
   1ebf0:	0001e3b5 	.word	0x0001e3b5
   1ebf4:	0001e2d1 	.word	0x0001e2d1
   1ebf8:	0001ec19 	.word	0x0001ec19
   1ebfc:	0000113b 	.word	0x0000113b
   1ec00:	0001e55d 	.word	0x0001e55d
   1ec04:	0001e6fd 	.word	0x0001e6fd
   1ec08:	0001e845 	.word	0x0001e845
   1ec0c:	00001110 	.word	0x00001110
   1ec10:	0001e7e9 	.word	0x0001e7e9
   1ec14:	0001ea11 	.word	0x0001ea11

0001ec18 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1ec18:	b580      	push	{r7, lr}
   1ec1a:	b082      	sub	sp, #8
   1ec1c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1ec1e:	2388      	movs	r3, #136	; 0x88
   1ec20:	015b      	lsls	r3, r3, #5
   1ec22:	2100      	movs	r1, #0
   1ec24:	0018      	movs	r0, r3
   1ec26:	4b32      	ldr	r3, [pc, #200]	; (1ecf0 <sd_mmc_spi_install_mmc+0xd8>)
   1ec28:	4798      	blx	r3
   1ec2a:	0003      	movs	r3, r0
   1ec2c:	001a      	movs	r2, r3
   1ec2e:	2301      	movs	r3, #1
   1ec30:	4053      	eors	r3, r2
   1ec32:	b2db      	uxtb	r3, r3
   1ec34:	2b00      	cmp	r3, #0
   1ec36:	d001      	beq.n	1ec3c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1ec38:	2300      	movs	r3, #0
   1ec3a:	e055      	b.n	1ece8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1ec3c:	4b2d      	ldr	r3, [pc, #180]	; (1ecf4 <sd_mmc_spi_install_mmc+0xdc>)
   1ec3e:	4798      	blx	r3
   1ec40:	0003      	movs	r3, r0
   1ec42:	001a      	movs	r2, r3
   1ec44:	2301      	movs	r3, #1
   1ec46:	4053      	eors	r3, r2
   1ec48:	b2db      	uxtb	r3, r3
   1ec4a:	2b00      	cmp	r3, #0
   1ec4c:	d001      	beq.n	1ec52 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1ec4e:	2300      	movs	r3, #0
   1ec50:	e04a      	b.n	1ece8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1ec52:	4b29      	ldr	r3, [pc, #164]	; (1ecf8 <sd_mmc_spi_install_mmc+0xe0>)
   1ec54:	2100      	movs	r1, #0
   1ec56:	0018      	movs	r0, r3
   1ec58:	4b25      	ldr	r3, [pc, #148]	; (1ecf0 <sd_mmc_spi_install_mmc+0xd8>)
   1ec5a:	4798      	blx	r3
   1ec5c:	0003      	movs	r3, r0
   1ec5e:	001a      	movs	r2, r3
   1ec60:	2301      	movs	r3, #1
   1ec62:	4053      	eors	r3, r2
   1ec64:	b2db      	uxtb	r3, r3
   1ec66:	2b00      	cmp	r3, #0
   1ec68:	d001      	beq.n	1ec6e <sd_mmc_spi_install_mmc+0x56>
		return false;
   1ec6a:	2300      	movs	r3, #0
   1ec6c:	e03c      	b.n	1ece8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1ec6e:	4b23      	ldr	r3, [pc, #140]	; (1ecfc <sd_mmc_spi_install_mmc+0xe4>)
   1ec70:	4798      	blx	r3
   1ec72:	0003      	movs	r3, r0
   1ec74:	001a      	movs	r2, r3
   1ec76:	2301      	movs	r3, #1
   1ec78:	4053      	eors	r3, r2
   1ec7a:	b2db      	uxtb	r3, r3
   1ec7c:	2b00      	cmp	r3, #0
   1ec7e:	d001      	beq.n	1ec84 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1ec80:	2300      	movs	r3, #0
   1ec82:	e031      	b.n	1ece8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1ec84:	4b1e      	ldr	r3, [pc, #120]	; (1ed00 <sd_mmc_spi_install_mmc+0xe8>)
   1ec86:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1ec88:	4b1e      	ldr	r3, [pc, #120]	; (1ed04 <sd_mmc_spi_install_mmc+0xec>)
   1ec8a:	681b      	ldr	r3, [r3, #0]
   1ec8c:	7b1b      	ldrb	r3, [r3, #12]
   1ec8e:	2b3f      	cmp	r3, #63	; 0x3f
   1ec90:	d90c      	bls.n	1ecac <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1ec92:	1dfb      	adds	r3, r7, #7
   1ec94:	0018      	movs	r0, r3
   1ec96:	4b1c      	ldr	r3, [pc, #112]	; (1ed08 <sd_mmc_spi_install_mmc+0xf0>)
   1ec98:	4798      	blx	r3
   1ec9a:	0003      	movs	r3, r0
   1ec9c:	001a      	movs	r2, r3
   1ec9e:	2301      	movs	r3, #1
   1eca0:	4053      	eors	r3, r2
   1eca2:	b2db      	uxtb	r3, r3
   1eca4:	2b00      	cmp	r3, #0
   1eca6:	d001      	beq.n	1ecac <sd_mmc_spi_install_mmc+0x94>
			return false;
   1eca8:	2300      	movs	r3, #0
   1ecaa:	e01d      	b.n	1ece8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1ecac:	2380      	movs	r3, #128	; 0x80
   1ecae:	009b      	lsls	r3, r3, #2
   1ecb0:	4a16      	ldr	r2, [pc, #88]	; (1ed0c <sd_mmc_spi_install_mmc+0xf4>)
   1ecb2:	0019      	movs	r1, r3
   1ecb4:	0010      	movs	r0, r2
   1ecb6:	4b0e      	ldr	r3, [pc, #56]	; (1ecf0 <sd_mmc_spi_install_mmc+0xd8>)
   1ecb8:	4798      	blx	r3
   1ecba:	0003      	movs	r3, r0
   1ecbc:	001a      	movs	r2, r3
   1ecbe:	2301      	movs	r3, #1
   1ecc0:	4053      	eors	r3, r2
   1ecc2:	b2db      	uxtb	r3, r3
   1ecc4:	2b00      	cmp	r3, #0
   1ecc6:	d001      	beq.n	1eccc <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1ecc8:	2300      	movs	r3, #0
   1ecca:	e00d      	b.n	1ece8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1eccc:	4b10      	ldr	r3, [pc, #64]	; (1ed10 <sd_mmc_spi_install_mmc+0xf8>)
   1ecce:	4798      	blx	r3
   1ecd0:	0003      	movs	r3, r0
   1ecd2:	001a      	movs	r2, r3
   1ecd4:	2301      	movs	r3, #1
   1ecd6:	4053      	eors	r3, r2
   1ecd8:	b2db      	uxtb	r3, r3
   1ecda:	2b00      	cmp	r3, #0
   1ecdc:	d001      	beq.n	1ece2 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1ecde:	2300      	movs	r3, #0
   1ece0:	e002      	b.n	1ece8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1ece2:	4b0c      	ldr	r3, [pc, #48]	; (1ed14 <sd_mmc_spi_install_mmc+0xfc>)
   1ece4:	4798      	blx	r3
	return true;
   1ece6:	2301      	movs	r3, #1
}
   1ece8:	0018      	movs	r0, r3
   1ecea:	46bd      	mov	sp, r7
   1ecec:	b002      	add	sp, #8
   1ecee:	bd80      	pop	{r7, pc}
   1ecf0:	0001fca1 	.word	0x0001fca1
   1ecf4:	0001e225 	.word	0x0001e225
   1ecf8:	0000113b 	.word	0x0000113b
   1ecfc:	0001e55d 	.word	0x0001e55d
   1ed00:	0001e5cd 	.word	0x0001e5cd
   1ed04:	200040c4 	.word	0x200040c4
   1ed08:	0001e431 	.word	0x0001e431
   1ed0c:	00001110 	.word	0x00001110
   1ed10:	0001e7e9 	.word	0x0001e7e9
   1ed14:	0001ea11 	.word	0x0001ea11

0001ed18 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1ed18:	b580      	push	{r7, lr}
   1ed1a:	b082      	sub	sp, #8
   1ed1c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1ed1e:	1dfb      	adds	r3, r7, #7
   1ed20:	2200      	movs	r2, #0
   1ed22:	701a      	strb	r2, [r3, #0]
   1ed24:	e00c      	b.n	1ed40 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1ed26:	1dfb      	adds	r3, r7, #7
   1ed28:	781b      	ldrb	r3, [r3, #0]
   1ed2a:	4a0c      	ldr	r2, [pc, #48]	; (1ed5c <sd_mmc_init+0x44>)
   1ed2c:	015b      	lsls	r3, r3, #5
   1ed2e:	18d3      	adds	r3, r2, r3
   1ed30:	330a      	adds	r3, #10
   1ed32:	2204      	movs	r2, #4
   1ed34:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1ed36:	1dfb      	adds	r3, r7, #7
   1ed38:	781a      	ldrb	r2, [r3, #0]
   1ed3a:	1dfb      	adds	r3, r7, #7
   1ed3c:	3201      	adds	r2, #1
   1ed3e:	701a      	strb	r2, [r3, #0]
   1ed40:	1dfb      	adds	r3, r7, #7
   1ed42:	781b      	ldrb	r3, [r3, #0]
   1ed44:	2b00      	cmp	r3, #0
   1ed46:	d0ee      	beq.n	1ed26 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1ed48:	4b05      	ldr	r3, [pc, #20]	; (1ed60 <sd_mmc_init+0x48>)
   1ed4a:	22ff      	movs	r2, #255	; 0xff
   1ed4c:	701a      	strb	r2, [r3, #0]
	driver_init();
   1ed4e:	4b05      	ldr	r3, [pc, #20]	; (1ed64 <sd_mmc_init+0x4c>)
   1ed50:	4798      	blx	r3
}
   1ed52:	46c0      	nop			; (mov r8, r8)
   1ed54:	46bd      	mov	sp, r7
   1ed56:	b002      	add	sp, #8
   1ed58:	bd80      	pop	{r7, pc}
   1ed5a:	46c0      	nop			; (mov r8, r8)
   1ed5c:	200040a0 	.word	0x200040a0
   1ed60:	200040c0 	.word	0x200040c0
   1ed64:	0001fac1 	.word	0x0001fac1

0001ed68 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1ed68:	b590      	push	{r4, r7, lr}
   1ed6a:	b085      	sub	sp, #20
   1ed6c:	af00      	add	r7, sp, #0
   1ed6e:	0002      	movs	r2, r0
   1ed70:	1dfb      	adds	r3, r7, #7
   1ed72:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ed74:	230f      	movs	r3, #15
   1ed76:	18fc      	adds	r4, r7, r3
   1ed78:	1dfb      	adds	r3, r7, #7
   1ed7a:	781b      	ldrb	r3, [r3, #0]
   1ed7c:	0018      	movs	r0, r3
   1ed7e:	4b13      	ldr	r3, [pc, #76]	; (1edcc <sd_mmc_check+0x64>)
   1ed80:	4798      	blx	r3
   1ed82:	0003      	movs	r3, r0
   1ed84:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1ed86:	230f      	movs	r3, #15
   1ed88:	18fb      	adds	r3, r7, r3
   1ed8a:	781b      	ldrb	r3, [r3, #0]
   1ed8c:	2b01      	cmp	r3, #1
   1ed8e:	d005      	beq.n	1ed9c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1ed90:	4b0f      	ldr	r3, [pc, #60]	; (1edd0 <sd_mmc_check+0x68>)
   1ed92:	4798      	blx	r3
		return sd_mmc_err;
   1ed94:	230f      	movs	r3, #15
   1ed96:	18fb      	adds	r3, r7, r3
   1ed98:	781b      	ldrb	r3, [r3, #0]
   1ed9a:	e012      	b.n	1edc2 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1ed9c:	4b0d      	ldr	r3, [pc, #52]	; (1edd4 <sd_mmc_check+0x6c>)
   1ed9e:	4798      	blx	r3
   1eda0:	1e03      	subs	r3, r0, #0
   1eda2:	d007      	beq.n	1edb4 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1eda4:	4b0c      	ldr	r3, [pc, #48]	; (1edd8 <sd_mmc_check+0x70>)
   1eda6:	681b      	ldr	r3, [r3, #0]
   1eda8:	2200      	movs	r2, #0
   1edaa:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1edac:	4b08      	ldr	r3, [pc, #32]	; (1edd0 <sd_mmc_check+0x68>)
   1edae:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1edb0:	2301      	movs	r3, #1
   1edb2:	e006      	b.n	1edc2 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1edb4:	4b08      	ldr	r3, [pc, #32]	; (1edd8 <sd_mmc_check+0x70>)
   1edb6:	681b      	ldr	r3, [r3, #0]
   1edb8:	2203      	movs	r2, #3
   1edba:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1edbc:	4b04      	ldr	r3, [pc, #16]	; (1edd0 <sd_mmc_check+0x68>)
   1edbe:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1edc0:	2303      	movs	r3, #3
}
   1edc2:	0018      	movs	r0, r3
   1edc4:	46bd      	mov	sp, r7
   1edc6:	b005      	add	sp, #20
   1edc8:	bd90      	pop	{r4, r7, pc}
   1edca:	46c0      	nop			; (mov r8, r8)
   1edcc:	0001e94d 	.word	0x0001e94d
   1edd0:	0001ea49 	.word	0x0001ea49
   1edd4:	0001ea6d 	.word	0x0001ea6d
   1edd8:	200040c4 	.word	0x200040c4

0001eddc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1eddc:	b580      	push	{r7, lr}
   1edde:	b082      	sub	sp, #8
   1ede0:	af00      	add	r7, sp, #0
   1ede2:	0002      	movs	r2, r0
   1ede4:	1dfb      	adds	r3, r7, #7
   1ede6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1ede8:	1dfb      	adds	r3, r7, #7
   1edea:	781b      	ldrb	r3, [r3, #0]
   1edec:	0018      	movs	r0, r3
   1edee:	4b07      	ldr	r3, [pc, #28]	; (1ee0c <sd_mmc_get_type+0x30>)
   1edf0:	4798      	blx	r3
   1edf2:	1e03      	subs	r3, r0, #0
   1edf4:	d001      	beq.n	1edfa <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1edf6:	2300      	movs	r3, #0
   1edf8:	e004      	b.n	1ee04 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1edfa:	4b05      	ldr	r3, [pc, #20]	; (1ee10 <sd_mmc_get_type+0x34>)
   1edfc:	4798      	blx	r3
	return sd_mmc_card->type;
   1edfe:	4b05      	ldr	r3, [pc, #20]	; (1ee14 <sd_mmc_get_type+0x38>)
   1ee00:	681b      	ldr	r3, [r3, #0]
   1ee02:	7adb      	ldrb	r3, [r3, #11]
}
   1ee04:	0018      	movs	r0, r3
   1ee06:	46bd      	mov	sp, r7
   1ee08:	b002      	add	sp, #8
   1ee0a:	bd80      	pop	{r7, pc}
   1ee0c:	0001e94d 	.word	0x0001e94d
   1ee10:	0001ea49 	.word	0x0001ea49
   1ee14:	200040c4 	.word	0x200040c4

0001ee18 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1ee18:	b580      	push	{r7, lr}
   1ee1a:	b082      	sub	sp, #8
   1ee1c:	af00      	add	r7, sp, #0
   1ee1e:	0002      	movs	r2, r0
   1ee20:	1dfb      	adds	r3, r7, #7
   1ee22:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1ee24:	1dfb      	adds	r3, r7, #7
   1ee26:	781b      	ldrb	r3, [r3, #0]
   1ee28:	0018      	movs	r0, r3
   1ee2a:	4b07      	ldr	r3, [pc, #28]	; (1ee48 <sd_mmc_get_capacity+0x30>)
   1ee2c:	4798      	blx	r3
   1ee2e:	1e03      	subs	r3, r0, #0
   1ee30:	d001      	beq.n	1ee36 <sd_mmc_get_capacity+0x1e>
		return 0;
   1ee32:	2300      	movs	r3, #0
   1ee34:	e004      	b.n	1ee40 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1ee36:	4b05      	ldr	r3, [pc, #20]	; (1ee4c <sd_mmc_get_capacity+0x34>)
   1ee38:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1ee3a:	4b05      	ldr	r3, [pc, #20]	; (1ee50 <sd_mmc_get_capacity+0x38>)
   1ee3c:	681b      	ldr	r3, [r3, #0]
   1ee3e:	685b      	ldr	r3, [r3, #4]
}
   1ee40:	0018      	movs	r0, r3
   1ee42:	46bd      	mov	sp, r7
   1ee44:	b002      	add	sp, #8
   1ee46:	bd80      	pop	{r7, pc}
   1ee48:	0001e94d 	.word	0x0001e94d
   1ee4c:	0001ea49 	.word	0x0001ea49
   1ee50:	200040c4 	.word	0x200040c4

0001ee54 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1ee54:	b580      	push	{r7, lr}
   1ee56:	b082      	sub	sp, #8
   1ee58:	af00      	add	r7, sp, #0
   1ee5a:	0002      	movs	r2, r0
   1ee5c:	1dfb      	adds	r3, r7, #7
   1ee5e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1ee60:	2300      	movs	r3, #0
}
   1ee62:	0018      	movs	r0, r3
   1ee64:	46bd      	mov	sp, r7
   1ee66:	b002      	add	sp, #8
   1ee68:	bd80      	pop	{r7, pc}
	...

0001ee6c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1ee6c:	b590      	push	{r4, r7, lr}
   1ee6e:	b089      	sub	sp, #36	; 0x24
   1ee70:	af02      	add	r7, sp, #8
   1ee72:	6039      	str	r1, [r7, #0]
   1ee74:	0011      	movs	r1, r2
   1ee76:	1dfb      	adds	r3, r7, #7
   1ee78:	1c02      	adds	r2, r0, #0
   1ee7a:	701a      	strb	r2, [r3, #0]
   1ee7c:	1d3b      	adds	r3, r7, #4
   1ee7e:	1c0a      	adds	r2, r1, #0
   1ee80:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ee82:	230f      	movs	r3, #15
   1ee84:	18fc      	adds	r4, r7, r3
   1ee86:	1dfb      	adds	r3, r7, #7
   1ee88:	781b      	ldrb	r3, [r3, #0]
   1ee8a:	0018      	movs	r0, r3
   1ee8c:	4b29      	ldr	r3, [pc, #164]	; (1ef34 <sd_mmc_init_read_blocks+0xc8>)
   1ee8e:	4798      	blx	r3
   1ee90:	0003      	movs	r3, r0
   1ee92:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1ee94:	230f      	movs	r3, #15
   1ee96:	18fb      	adds	r3, r7, r3
   1ee98:	781b      	ldrb	r3, [r3, #0]
   1ee9a:	2b00      	cmp	r3, #0
   1ee9c:	d003      	beq.n	1eea6 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1ee9e:	230f      	movs	r3, #15
   1eea0:	18fb      	adds	r3, r7, r3
   1eea2:	781b      	ldrb	r3, [r3, #0]
   1eea4:	e041      	b.n	1ef2a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1eea6:	4b24      	ldr	r3, [pc, #144]	; (1ef38 <sd_mmc_init_read_blocks+0xcc>)
   1eea8:	4798      	blx	r3
   1eeaa:	0003      	movs	r3, r0
   1eeac:	001a      	movs	r2, r3
   1eeae:	2301      	movs	r3, #1
   1eeb0:	4053      	eors	r3, r2
   1eeb2:	b2db      	uxtb	r3, r3
   1eeb4:	2b00      	cmp	r3, #0
   1eeb6:	d003      	beq.n	1eec0 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1eeb8:	4b20      	ldr	r3, [pc, #128]	; (1ef3c <sd_mmc_init_read_blocks+0xd0>)
   1eeba:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1eebc:	2305      	movs	r3, #5
   1eebe:	e034      	b.n	1ef2a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1eec0:	1d3b      	adds	r3, r7, #4
   1eec2:	881b      	ldrh	r3, [r3, #0]
   1eec4:	2b01      	cmp	r3, #1
   1eec6:	d902      	bls.n	1eece <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1eec8:	4b1d      	ldr	r3, [pc, #116]	; (1ef40 <sd_mmc_init_read_blocks+0xd4>)
   1eeca:	617b      	str	r3, [r7, #20]
   1eecc:	e001      	b.n	1eed2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1eece:	4b1d      	ldr	r3, [pc, #116]	; (1ef44 <sd_mmc_init_read_blocks+0xd8>)
   1eed0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1eed2:	4b1d      	ldr	r3, [pc, #116]	; (1ef48 <sd_mmc_init_read_blocks+0xdc>)
   1eed4:	681b      	ldr	r3, [r3, #0]
   1eed6:	7adb      	ldrb	r3, [r3, #11]
   1eed8:	001a      	movs	r2, r3
   1eeda:	2308      	movs	r3, #8
   1eedc:	4013      	ands	r3, r2
   1eede:	d002      	beq.n	1eee6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1eee0:	683b      	ldr	r3, [r7, #0]
   1eee2:	613b      	str	r3, [r7, #16]
   1eee4:	e002      	b.n	1eeec <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1eee6:	683b      	ldr	r3, [r7, #0]
   1eee8:	025b      	lsls	r3, r3, #9
   1eeea:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1eeec:	1d3b      	adds	r3, r7, #4
   1eeee:	881c      	ldrh	r4, [r3, #0]
   1eef0:	2380      	movs	r3, #128	; 0x80
   1eef2:	009a      	lsls	r2, r3, #2
   1eef4:	6939      	ldr	r1, [r7, #16]
   1eef6:	6978      	ldr	r0, [r7, #20]
   1eef8:	2301      	movs	r3, #1
   1eefa:	9300      	str	r3, [sp, #0]
   1eefc:	0023      	movs	r3, r4
   1eefe:	4c13      	ldr	r4, [pc, #76]	; (1ef4c <sd_mmc_init_read_blocks+0xe0>)
   1ef00:	47a0      	blx	r4
   1ef02:	0003      	movs	r3, r0
   1ef04:	001a      	movs	r2, r3
   1ef06:	2301      	movs	r3, #1
   1ef08:	4053      	eors	r3, r2
   1ef0a:	b2db      	uxtb	r3, r3
   1ef0c:	2b00      	cmp	r3, #0
   1ef0e:	d003      	beq.n	1ef18 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1ef10:	4b0a      	ldr	r3, [pc, #40]	; (1ef3c <sd_mmc_init_read_blocks+0xd0>)
   1ef12:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1ef14:	2305      	movs	r3, #5
   1ef16:	e008      	b.n	1ef2a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1ef18:	4b0d      	ldr	r3, [pc, #52]	; (1ef50 <sd_mmc_init_read_blocks+0xe4>)
   1ef1a:	1d3a      	adds	r2, r7, #4
   1ef1c:	8812      	ldrh	r2, [r2, #0]
   1ef1e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1ef20:	4b0c      	ldr	r3, [pc, #48]	; (1ef54 <sd_mmc_init_read_blocks+0xe8>)
   1ef22:	1d3a      	adds	r2, r7, #4
   1ef24:	8812      	ldrh	r2, [r2, #0]
   1ef26:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ef28:	2300      	movs	r3, #0
}
   1ef2a:	0018      	movs	r0, r3
   1ef2c:	46bd      	mov	sp, r7
   1ef2e:	b007      	add	sp, #28
   1ef30:	bd90      	pop	{r4, r7, pc}
   1ef32:	46c0      	nop			; (mov r8, r8)
   1ef34:	0001e94d 	.word	0x0001e94d
   1ef38:	0001e7e9 	.word	0x0001e7e9
   1ef3c:	0001ea49 	.word	0x0001ea49
   1ef40:	00101112 	.word	0x00101112
   1ef44:	00081111 	.word	0x00081111
   1ef48:	200040c4 	.word	0x200040c4
   1ef4c:	0001fcc9 	.word	0x0001fcc9
   1ef50:	200040ca 	.word	0x200040ca
   1ef54:	200040c8 	.word	0x200040c8

0001ef58 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1ef58:	b580      	push	{r7, lr}
   1ef5a:	b082      	sub	sp, #8
   1ef5c:	af00      	add	r7, sp, #0
   1ef5e:	6078      	str	r0, [r7, #4]
   1ef60:	000a      	movs	r2, r1
   1ef62:	1cbb      	adds	r3, r7, #2
   1ef64:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1ef66:	1cbb      	adds	r3, r7, #2
   1ef68:	881a      	ldrh	r2, [r3, #0]
   1ef6a:	687b      	ldr	r3, [r7, #4]
   1ef6c:	0011      	movs	r1, r2
   1ef6e:	0018      	movs	r0, r3
   1ef70:	4b0d      	ldr	r3, [pc, #52]	; (1efa8 <sd_mmc_start_read_blocks+0x50>)
   1ef72:	4798      	blx	r3
   1ef74:	0003      	movs	r3, r0
   1ef76:	001a      	movs	r2, r3
   1ef78:	2301      	movs	r3, #1
   1ef7a:	4053      	eors	r3, r2
   1ef7c:	b2db      	uxtb	r3, r3
   1ef7e:	2b00      	cmp	r3, #0
   1ef80:	d004      	beq.n	1ef8c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1ef82:	4b0a      	ldr	r3, [pc, #40]	; (1efac <sd_mmc_start_read_blocks+0x54>)
   1ef84:	2200      	movs	r2, #0
   1ef86:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1ef88:	2305      	movs	r3, #5
   1ef8a:	e008      	b.n	1ef9e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1ef8c:	4b07      	ldr	r3, [pc, #28]	; (1efac <sd_mmc_start_read_blocks+0x54>)
   1ef8e:	881a      	ldrh	r2, [r3, #0]
   1ef90:	1cbb      	adds	r3, r7, #2
   1ef92:	881b      	ldrh	r3, [r3, #0]
   1ef94:	1ad3      	subs	r3, r2, r3
   1ef96:	b29a      	uxth	r2, r3
   1ef98:	4b04      	ldr	r3, [pc, #16]	; (1efac <sd_mmc_start_read_blocks+0x54>)
   1ef9a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ef9c:	2300      	movs	r3, #0
}
   1ef9e:	0018      	movs	r0, r3
   1efa0:	46bd      	mov	sp, r7
   1efa2:	b002      	add	sp, #8
   1efa4:	bd80      	pop	{r7, pc}
   1efa6:	46c0      	nop			; (mov r8, r8)
   1efa8:	0001ff99 	.word	0x0001ff99
   1efac:	200040ca 	.word	0x200040ca

0001efb0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1efb0:	b580      	push	{r7, lr}
   1efb2:	b082      	sub	sp, #8
   1efb4:	af00      	add	r7, sp, #0
   1efb6:	0002      	movs	r2, r0
   1efb8:	1dfb      	adds	r3, r7, #7
   1efba:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1efbc:	4b1c      	ldr	r3, [pc, #112]	; (1f030 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1efbe:	4798      	blx	r3
   1efc0:	0003      	movs	r3, r0
   1efc2:	001a      	movs	r2, r3
   1efc4:	2301      	movs	r3, #1
   1efc6:	4053      	eors	r3, r2
   1efc8:	b2db      	uxtb	r3, r3
   1efca:	2b00      	cmp	r3, #0
   1efcc:	d001      	beq.n	1efd2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1efce:	2305      	movs	r3, #5
   1efd0:	e029      	b.n	1f026 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1efd2:	1dfb      	adds	r3, r7, #7
   1efd4:	781b      	ldrb	r3, [r3, #0]
   1efd6:	2b00      	cmp	r3, #0
   1efd8:	d003      	beq.n	1efe2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1efda:	4b16      	ldr	r3, [pc, #88]	; (1f034 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1efdc:	2200      	movs	r2, #0
   1efde:	801a      	strh	r2, [r3, #0]
   1efe0:	e005      	b.n	1efee <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1efe2:	4b14      	ldr	r3, [pc, #80]	; (1f034 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1efe4:	881b      	ldrh	r3, [r3, #0]
   1efe6:	2b00      	cmp	r3, #0
   1efe8:	d001      	beq.n	1efee <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1efea:	2300      	movs	r3, #0
   1efec:	e01b      	b.n	1f026 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1efee:	4b12      	ldr	r3, [pc, #72]	; (1f038 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1eff0:	881b      	ldrh	r3, [r3, #0]
   1eff2:	2b01      	cmp	r3, #1
   1eff4:	d103      	bne.n	1effe <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1eff6:	4b11      	ldr	r3, [pc, #68]	; (1f03c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1eff8:	4798      	blx	r3
		return SD_MMC_OK;
   1effa:	2300      	movs	r3, #0
   1effc:	e013      	b.n	1f026 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1effe:	4b10      	ldr	r3, [pc, #64]	; (1f040 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1f000:	2100      	movs	r1, #0
   1f002:	0018      	movs	r0, r3
   1f004:	4b0f      	ldr	r3, [pc, #60]	; (1f044 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1f006:	4798      	blx	r3
   1f008:	0003      	movs	r3, r0
   1f00a:	001a      	movs	r2, r3
   1f00c:	2301      	movs	r3, #1
   1f00e:	4053      	eors	r3, r2
   1f010:	b2db      	uxtb	r3, r3
   1f012:	2b00      	cmp	r3, #0
   1f014:	d004      	beq.n	1f020 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1f016:	4b0a      	ldr	r3, [pc, #40]	; (1f040 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1f018:	2100      	movs	r1, #0
   1f01a:	0018      	movs	r0, r3
   1f01c:	4b09      	ldr	r3, [pc, #36]	; (1f044 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1f01e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1f020:	4b06      	ldr	r3, [pc, #24]	; (1f03c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1f022:	4798      	blx	r3
	return SD_MMC_OK;
   1f024:	2300      	movs	r3, #0
}
   1f026:	0018      	movs	r0, r3
   1f028:	46bd      	mov	sp, r7
   1f02a:	b002      	add	sp, #8
   1f02c:	bd80      	pop	{r7, pc}
   1f02e:	46c0      	nop			; (mov r8, r8)
   1f030:	0002003d 	.word	0x0002003d
   1f034:	200040ca 	.word	0x200040ca
   1f038:	200040c8 	.word	0x200040c8
   1f03c:	0001ea49 	.word	0x0001ea49
   1f040:	0000310c 	.word	0x0000310c
   1f044:	0001fca1 	.word	0x0001fca1

0001f048 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f048:	b590      	push	{r4, r7, lr}
   1f04a:	b089      	sub	sp, #36	; 0x24
   1f04c:	af02      	add	r7, sp, #8
   1f04e:	6039      	str	r1, [r7, #0]
   1f050:	0011      	movs	r1, r2
   1f052:	1dfb      	adds	r3, r7, #7
   1f054:	1c02      	adds	r2, r0, #0
   1f056:	701a      	strb	r2, [r3, #0]
   1f058:	1d3b      	adds	r3, r7, #4
   1f05a:	1c0a      	adds	r2, r1, #0
   1f05c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f05e:	230f      	movs	r3, #15
   1f060:	18fc      	adds	r4, r7, r3
   1f062:	1dfb      	adds	r3, r7, #7
   1f064:	781b      	ldrb	r3, [r3, #0]
   1f066:	0018      	movs	r0, r3
   1f068:	4b28      	ldr	r3, [pc, #160]	; (1f10c <sd_mmc_init_write_blocks+0xc4>)
   1f06a:	4798      	blx	r3
   1f06c:	0003      	movs	r3, r0
   1f06e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f070:	230f      	movs	r3, #15
   1f072:	18fb      	adds	r3, r7, r3
   1f074:	781b      	ldrb	r3, [r3, #0]
   1f076:	2b00      	cmp	r3, #0
   1f078:	d003      	beq.n	1f082 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1f07a:	230f      	movs	r3, #15
   1f07c:	18fb      	adds	r3, r7, r3
   1f07e:	781b      	ldrb	r3, [r3, #0]
   1f080:	e03f      	b.n	1f102 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1f082:	1dfb      	adds	r3, r7, #7
   1f084:	781b      	ldrb	r3, [r3, #0]
   1f086:	0018      	movs	r0, r3
   1f088:	4b21      	ldr	r3, [pc, #132]	; (1f110 <sd_mmc_init_write_blocks+0xc8>)
   1f08a:	4798      	blx	r3
   1f08c:	1e03      	subs	r3, r0, #0
   1f08e:	d003      	beq.n	1f098 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1f090:	4b20      	ldr	r3, [pc, #128]	; (1f114 <sd_mmc_init_write_blocks+0xcc>)
   1f092:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1f094:	2307      	movs	r3, #7
   1f096:	e034      	b.n	1f102 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1f098:	1d3b      	adds	r3, r7, #4
   1f09a:	881b      	ldrh	r3, [r3, #0]
   1f09c:	2b01      	cmp	r3, #1
   1f09e:	d902      	bls.n	1f0a6 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1f0a0:	4b1d      	ldr	r3, [pc, #116]	; (1f118 <sd_mmc_init_write_blocks+0xd0>)
   1f0a2:	617b      	str	r3, [r7, #20]
   1f0a4:	e001      	b.n	1f0aa <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1f0a6:	4b1d      	ldr	r3, [pc, #116]	; (1f11c <sd_mmc_init_write_blocks+0xd4>)
   1f0a8:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f0aa:	4b1d      	ldr	r3, [pc, #116]	; (1f120 <sd_mmc_init_write_blocks+0xd8>)
   1f0ac:	681b      	ldr	r3, [r3, #0]
   1f0ae:	7adb      	ldrb	r3, [r3, #11]
   1f0b0:	001a      	movs	r2, r3
   1f0b2:	2308      	movs	r3, #8
   1f0b4:	4013      	ands	r3, r2
   1f0b6:	d002      	beq.n	1f0be <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1f0b8:	683b      	ldr	r3, [r7, #0]
   1f0ba:	613b      	str	r3, [r7, #16]
   1f0bc:	e002      	b.n	1f0c4 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f0be:	683b      	ldr	r3, [r7, #0]
   1f0c0:	025b      	lsls	r3, r3, #9
   1f0c2:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f0c4:	1d3b      	adds	r3, r7, #4
   1f0c6:	881c      	ldrh	r4, [r3, #0]
   1f0c8:	2380      	movs	r3, #128	; 0x80
   1f0ca:	009a      	lsls	r2, r3, #2
   1f0cc:	6939      	ldr	r1, [r7, #16]
   1f0ce:	6978      	ldr	r0, [r7, #20]
   1f0d0:	2301      	movs	r3, #1
   1f0d2:	9300      	str	r3, [sp, #0]
   1f0d4:	0023      	movs	r3, r4
   1f0d6:	4c13      	ldr	r4, [pc, #76]	; (1f124 <sd_mmc_init_write_blocks+0xdc>)
   1f0d8:	47a0      	blx	r4
   1f0da:	0003      	movs	r3, r0
   1f0dc:	001a      	movs	r2, r3
   1f0de:	2301      	movs	r3, #1
   1f0e0:	4053      	eors	r3, r2
   1f0e2:	b2db      	uxtb	r3, r3
   1f0e4:	2b00      	cmp	r3, #0
   1f0e6:	d003      	beq.n	1f0f0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1f0e8:	4b0a      	ldr	r3, [pc, #40]	; (1f114 <sd_mmc_init_write_blocks+0xcc>)
   1f0ea:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f0ec:	2305      	movs	r3, #5
   1f0ee:	e008      	b.n	1f102 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1f0f0:	4b0d      	ldr	r3, [pc, #52]	; (1f128 <sd_mmc_init_write_blocks+0xe0>)
   1f0f2:	1d3a      	adds	r2, r7, #4
   1f0f4:	8812      	ldrh	r2, [r2, #0]
   1f0f6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1f0f8:	4b0c      	ldr	r3, [pc, #48]	; (1f12c <sd_mmc_init_write_blocks+0xe4>)
   1f0fa:	1d3a      	adds	r2, r7, #4
   1f0fc:	8812      	ldrh	r2, [r2, #0]
   1f0fe:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f100:	2300      	movs	r3, #0
}
   1f102:	0018      	movs	r0, r3
   1f104:	46bd      	mov	sp, r7
   1f106:	b007      	add	sp, #28
   1f108:	bd90      	pop	{r4, r7, pc}
   1f10a:	46c0      	nop			; (mov r8, r8)
   1f10c:	0001e94d 	.word	0x0001e94d
   1f110:	0001ee55 	.word	0x0001ee55
   1f114:	0001ea49 	.word	0x0001ea49
   1f118:	00109119 	.word	0x00109119
   1f11c:	00089118 	.word	0x00089118
   1f120:	200040c4 	.word	0x200040c4
   1f124:	0001fcc9 	.word	0x0001fcc9
   1f128:	200040ca 	.word	0x200040ca
   1f12c:	200040c8 	.word	0x200040c8

0001f130 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f130:	b580      	push	{r7, lr}
   1f132:	b082      	sub	sp, #8
   1f134:	af00      	add	r7, sp, #0
   1f136:	6078      	str	r0, [r7, #4]
   1f138:	000a      	movs	r2, r1
   1f13a:	1cbb      	adds	r3, r7, #2
   1f13c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1f13e:	1cbb      	adds	r3, r7, #2
   1f140:	881a      	ldrh	r2, [r3, #0]
   1f142:	687b      	ldr	r3, [r7, #4]
   1f144:	0011      	movs	r1, r2
   1f146:	0018      	movs	r0, r3
   1f148:	4b0d      	ldr	r3, [pc, #52]	; (1f180 <sd_mmc_start_write_blocks+0x50>)
   1f14a:	4798      	blx	r3
   1f14c:	0003      	movs	r3, r0
   1f14e:	001a      	movs	r2, r3
   1f150:	2301      	movs	r3, #1
   1f152:	4053      	eors	r3, r2
   1f154:	b2db      	uxtb	r3, r3
   1f156:	2b00      	cmp	r3, #0
   1f158:	d004      	beq.n	1f164 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1f15a:	4b0a      	ldr	r3, [pc, #40]	; (1f184 <sd_mmc_start_write_blocks+0x54>)
   1f15c:	2200      	movs	r2, #0
   1f15e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1f160:	2305      	movs	r3, #5
   1f162:	e008      	b.n	1f176 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1f164:	4b07      	ldr	r3, [pc, #28]	; (1f184 <sd_mmc_start_write_blocks+0x54>)
   1f166:	881a      	ldrh	r2, [r3, #0]
   1f168:	1cbb      	adds	r3, r7, #2
   1f16a:	881b      	ldrh	r3, [r3, #0]
   1f16c:	1ad3      	subs	r3, r2, r3
   1f16e:	b29a      	uxth	r2, r3
   1f170:	4b04      	ldr	r3, [pc, #16]	; (1f184 <sd_mmc_start_write_blocks+0x54>)
   1f172:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f174:	2300      	movs	r3, #0
}
   1f176:	0018      	movs	r0, r3
   1f178:	46bd      	mov	sp, r7
   1f17a:	b002      	add	sp, #8
   1f17c:	bd80      	pop	{r7, pc}
   1f17e:	46c0      	nop			; (mov r8, r8)
   1f180:	00020049 	.word	0x00020049
   1f184:	200040ca 	.word	0x200040ca

0001f188 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1f188:	b580      	push	{r7, lr}
   1f18a:	b082      	sub	sp, #8
   1f18c:	af00      	add	r7, sp, #0
   1f18e:	0002      	movs	r2, r0
   1f190:	1dfb      	adds	r3, r7, #7
   1f192:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1f194:	4b13      	ldr	r3, [pc, #76]	; (1f1e4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1f196:	4798      	blx	r3
   1f198:	0003      	movs	r3, r0
   1f19a:	001a      	movs	r2, r3
   1f19c:	2301      	movs	r3, #1
   1f19e:	4053      	eors	r3, r2
   1f1a0:	b2db      	uxtb	r3, r3
   1f1a2:	2b00      	cmp	r3, #0
   1f1a4:	d001      	beq.n	1f1aa <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1f1a6:	2305      	movs	r3, #5
   1f1a8:	e018      	b.n	1f1dc <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1f1aa:	1dfb      	adds	r3, r7, #7
   1f1ac:	781b      	ldrb	r3, [r3, #0]
   1f1ae:	2b00      	cmp	r3, #0
   1f1b0:	d003      	beq.n	1f1ba <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1f1b2:	4b0d      	ldr	r3, [pc, #52]	; (1f1e8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1f1b4:	2200      	movs	r2, #0
   1f1b6:	801a      	strh	r2, [r3, #0]
   1f1b8:	e005      	b.n	1f1c6 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1f1ba:	4b0b      	ldr	r3, [pc, #44]	; (1f1e8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1f1bc:	881b      	ldrh	r3, [r3, #0]
   1f1be:	2b00      	cmp	r3, #0
   1f1c0:	d001      	beq.n	1f1c6 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1f1c2:	2300      	movs	r3, #0
   1f1c4:	e00a      	b.n	1f1dc <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1f1c6:	4b09      	ldr	r3, [pc, #36]	; (1f1ec <sd_mmc_wait_end_of_write_blocks+0x64>)
   1f1c8:	881b      	ldrh	r3, [r3, #0]
   1f1ca:	2b01      	cmp	r3, #1
   1f1cc:	d103      	bne.n	1f1d6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1f1ce:	4b08      	ldr	r3, [pc, #32]	; (1f1f0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1f1d0:	4798      	blx	r3
		return SD_MMC_OK;
   1f1d2:	2300      	movs	r3, #0
   1f1d4:	e002      	b.n	1f1dc <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1f1d6:	4b06      	ldr	r3, [pc, #24]	; (1f1f0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1f1d8:	4798      	blx	r3
	return SD_MMC_OK;
   1f1da:	2300      	movs	r3, #0
}
   1f1dc:	0018      	movs	r0, r3
   1f1de:	46bd      	mov	sp, r7
   1f1e0:	b002      	add	sp, #8
   1f1e2:	bd80      	pop	{r7, pc}
   1f1e4:	00020109 	.word	0x00020109
   1f1e8:	200040ca 	.word	0x200040ca
   1f1ec:	200040c8 	.word	0x200040c8
   1f1f0:	0001ea49 	.word	0x0001ea49

0001f1f4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1f1f4:	b580      	push	{r7, lr}
   1f1f6:	b082      	sub	sp, #8
   1f1f8:	af00      	add	r7, sp, #0
   1f1fa:	0002      	movs	r2, r0
   1f1fc:	1dfb      	adds	r3, r7, #7
   1f1fe:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1f200:	1dfb      	adds	r3, r7, #7
   1f202:	781b      	ldrb	r3, [r3, #0]
   1f204:	0018      	movs	r0, r3
   1f206:	4b16      	ldr	r3, [pc, #88]	; (1f260 <sd_mmc_test_unit_ready+0x6c>)
   1f208:	4798      	blx	r3
   1f20a:	0003      	movs	r3, r0
   1f20c:	2b01      	cmp	r3, #1
   1f20e:	d019      	beq.n	1f244 <sd_mmc_test_unit_ready+0x50>
   1f210:	2b02      	cmp	r3, #2
   1f212:	d019      	beq.n	1f248 <sd_mmc_test_unit_ready+0x54>
   1f214:	2b00      	cmp	r3, #0
   1f216:	d11e      	bne.n	1f256 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1f218:	1dfb      	adds	r3, r7, #7
   1f21a:	781b      	ldrb	r3, [r3, #0]
   1f21c:	4a11      	ldr	r2, [pc, #68]	; (1f264 <sd_mmc_test_unit_ready+0x70>)
   1f21e:	5cd3      	ldrb	r3, [r2, r3]
   1f220:	2b00      	cmp	r3, #0
   1f222:	d001      	beq.n	1f228 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1f224:	2302      	movs	r3, #2
   1f226:	e017      	b.n	1f258 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1f228:	1dfb      	adds	r3, r7, #7
   1f22a:	781b      	ldrb	r3, [r3, #0]
   1f22c:	0018      	movs	r0, r3
   1f22e:	4b0e      	ldr	r3, [pc, #56]	; (1f268 <sd_mmc_test_unit_ready+0x74>)
   1f230:	4798      	blx	r3
   1f232:	0003      	movs	r3, r0
   1f234:	001a      	movs	r2, r3
   1f236:	2303      	movs	r3, #3
   1f238:	4013      	ands	r3, r2
   1f23a:	d001      	beq.n	1f240 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1f23c:	2300      	movs	r3, #0
   1f23e:	e00b      	b.n	1f258 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1f240:	2302      	movs	r3, #2
   1f242:	e009      	b.n	1f258 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1f244:	2303      	movs	r3, #3
   1f246:	e007      	b.n	1f258 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1f248:	1dfb      	adds	r3, r7, #7
   1f24a:	781b      	ldrb	r3, [r3, #0]
   1f24c:	4a05      	ldr	r2, [pc, #20]	; (1f264 <sd_mmc_test_unit_ready+0x70>)
   1f24e:	2100      	movs	r1, #0
   1f250:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1f252:	2302      	movs	r3, #2
   1f254:	e000      	b.n	1f258 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1f256:	2301      	movs	r3, #1
	}
}
   1f258:	0018      	movs	r0, r3
   1f25a:	46bd      	mov	sp, r7
   1f25c:	b002      	add	sp, #8
   1f25e:	bd80      	pop	{r7, pc}
   1f260:	0001ed69 	.word	0x0001ed69
   1f264:	200040cc 	.word	0x200040cc
   1f268:	0001eddd 	.word	0x0001eddd

0001f26c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1f26c:	b580      	push	{r7, lr}
   1f26e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1f270:	2000      	movs	r0, #0
   1f272:	4b03      	ldr	r3, [pc, #12]	; (1f280 <sd_mmc_test_unit_ready_0+0x14>)
   1f274:	4798      	blx	r3
   1f276:	0003      	movs	r3, r0
}
   1f278:	0018      	movs	r0, r3
   1f27a:	46bd      	mov	sp, r7
   1f27c:	bd80      	pop	{r7, pc}
   1f27e:	46c0      	nop			; (mov r8, r8)
   1f280:	0001f1f5 	.word	0x0001f1f5

0001f284 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1f284:	b580      	push	{r7, lr}
   1f286:	b082      	sub	sp, #8
   1f288:	af00      	add	r7, sp, #0
   1f28a:	0002      	movs	r2, r0
   1f28c:	6039      	str	r1, [r7, #0]
   1f28e:	1dfb      	adds	r3, r7, #7
   1f290:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1f292:	1dfb      	adds	r3, r7, #7
   1f294:	781b      	ldrb	r3, [r3, #0]
   1f296:	0018      	movs	r0, r3
   1f298:	4b08      	ldr	r3, [pc, #32]	; (1f2bc <sd_mmc_read_capacity+0x38>)
   1f29a:	4798      	blx	r3
   1f29c:	0003      	movs	r3, r0
   1f29e:	005b      	lsls	r3, r3, #1
   1f2a0:	1e5a      	subs	r2, r3, #1
   1f2a2:	683b      	ldr	r3, [r7, #0]
   1f2a4:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1f2a6:	1dfb      	adds	r3, r7, #7
   1f2a8:	781b      	ldrb	r3, [r3, #0]
   1f2aa:	0018      	movs	r0, r3
   1f2ac:	4b04      	ldr	r3, [pc, #16]	; (1f2c0 <sd_mmc_read_capacity+0x3c>)
   1f2ae:	4798      	blx	r3
   1f2b0:	0003      	movs	r3, r0
}
   1f2b2:	0018      	movs	r0, r3
   1f2b4:	46bd      	mov	sp, r7
   1f2b6:	b002      	add	sp, #8
   1f2b8:	bd80      	pop	{r7, pc}
   1f2ba:	46c0      	nop			; (mov r8, r8)
   1f2bc:	0001ee19 	.word	0x0001ee19
   1f2c0:	0001f1f5 	.word	0x0001f1f5

0001f2c4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1f2c4:	b580      	push	{r7, lr}
   1f2c6:	b082      	sub	sp, #8
   1f2c8:	af00      	add	r7, sp, #0
   1f2ca:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1f2cc:	687b      	ldr	r3, [r7, #4]
   1f2ce:	0019      	movs	r1, r3
   1f2d0:	2000      	movs	r0, #0
   1f2d2:	4b03      	ldr	r3, [pc, #12]	; (1f2e0 <sd_mmc_read_capacity_0+0x1c>)
   1f2d4:	4798      	blx	r3
   1f2d6:	0003      	movs	r3, r0
}
   1f2d8:	0018      	movs	r0, r3
   1f2da:	46bd      	mov	sp, r7
   1f2dc:	b002      	add	sp, #8
   1f2de:	bd80      	pop	{r7, pc}
   1f2e0:	0001f285 	.word	0x0001f285

0001f2e4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1f2e4:	b580      	push	{r7, lr}
   1f2e6:	b082      	sub	sp, #8
   1f2e8:	af00      	add	r7, sp, #0
   1f2ea:	0002      	movs	r2, r0
   1f2ec:	1dfb      	adds	r3, r7, #7
   1f2ee:	701a      	strb	r2, [r3, #0]
   1f2f0:	1dbb      	adds	r3, r7, #6
   1f2f2:	1c0a      	adds	r2, r1, #0
   1f2f4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1f2f6:	1dfb      	adds	r3, r7, #7
   1f2f8:	781b      	ldrb	r3, [r3, #0]
   1f2fa:	4a04      	ldr	r2, [pc, #16]	; (1f30c <sd_mmc_unload+0x28>)
   1f2fc:	1db9      	adds	r1, r7, #6
   1f2fe:	7809      	ldrb	r1, [r1, #0]
   1f300:	54d1      	strb	r1, [r2, r3]
	return true;
   1f302:	2301      	movs	r3, #1
}
   1f304:	0018      	movs	r0, r3
   1f306:	46bd      	mov	sp, r7
   1f308:	b002      	add	sp, #8
   1f30a:	bd80      	pop	{r7, pc}
   1f30c:	200040cc 	.word	0x200040cc

0001f310 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1f310:	b580      	push	{r7, lr}
   1f312:	b082      	sub	sp, #8
   1f314:	af00      	add	r7, sp, #0
   1f316:	0002      	movs	r2, r0
   1f318:	1dfb      	adds	r3, r7, #7
   1f31a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1f31c:	1dfb      	adds	r3, r7, #7
   1f31e:	781b      	ldrb	r3, [r3, #0]
   1f320:	0019      	movs	r1, r3
   1f322:	2000      	movs	r0, #0
   1f324:	4b03      	ldr	r3, [pc, #12]	; (1f334 <sd_mmc_unload_0+0x24>)
   1f326:	4798      	blx	r3
   1f328:	0003      	movs	r3, r0
}
   1f32a:	0018      	movs	r0, r3
   1f32c:	46bd      	mov	sp, r7
   1f32e:	b002      	add	sp, #8
   1f330:	bd80      	pop	{r7, pc}
   1f332:	46c0      	nop			; (mov r8, r8)
   1f334:	0001f2e5 	.word	0x0001f2e5

0001f338 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1f338:	b580      	push	{r7, lr}
   1f33a:	b082      	sub	sp, #8
   1f33c:	af00      	add	r7, sp, #0
   1f33e:	0002      	movs	r2, r0
   1f340:	1dfb      	adds	r3, r7, #7
   1f342:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1f344:	1dfb      	adds	r3, r7, #7
   1f346:	781b      	ldrb	r3, [r3, #0]
   1f348:	0018      	movs	r0, r3
   1f34a:	4b03      	ldr	r3, [pc, #12]	; (1f358 <sd_mmc_wr_protect+0x20>)
   1f34c:	4798      	blx	r3
   1f34e:	0003      	movs	r3, r0
}
   1f350:	0018      	movs	r0, r3
   1f352:	46bd      	mov	sp, r7
   1f354:	b002      	add	sp, #8
   1f356:	bd80      	pop	{r7, pc}
   1f358:	0001ee55 	.word	0x0001ee55

0001f35c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1f35c:	b580      	push	{r7, lr}
   1f35e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1f360:	2000      	movs	r0, #0
   1f362:	4b03      	ldr	r3, [pc, #12]	; (1f370 <sd_mmc_wr_protect_0+0x14>)
   1f364:	4798      	blx	r3
   1f366:	0003      	movs	r3, r0
}
   1f368:	0018      	movs	r0, r3
   1f36a:	46bd      	mov	sp, r7
   1f36c:	bd80      	pop	{r7, pc}
   1f36e:	46c0      	nop			; (mov r8, r8)
   1f370:	0001f339 	.word	0x0001f339

0001f374 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1f374:	b580      	push	{r7, lr}
   1f376:	b082      	sub	sp, #8
   1f378:	af00      	add	r7, sp, #0
   1f37a:	0002      	movs	r2, r0
   1f37c:	1dfb      	adds	r3, r7, #7
   1f37e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1f380:	2301      	movs	r3, #1
}
   1f382:	0018      	movs	r0, r3
   1f384:	46bd      	mov	sp, r7
   1f386:	b002      	add	sp, #8
   1f388:	bd80      	pop	{r7, pc}
	...

0001f38c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1f38c:	b580      	push	{r7, lr}
   1f38e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1f390:	2000      	movs	r0, #0
   1f392:	4b03      	ldr	r3, [pc, #12]	; (1f3a0 <sd_mmc_removal_0+0x14>)
   1f394:	4798      	blx	r3
   1f396:	0003      	movs	r3, r0
}
   1f398:	0018      	movs	r0, r3
   1f39a:	46bd      	mov	sp, r7
   1f39c:	bd80      	pop	{r7, pc}
   1f39e:	46c0      	nop			; (mov r8, r8)
   1f3a0:	0001f375 	.word	0x0001f375

0001f3a4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1f3a4:	b580      	push	{r7, lr}
   1f3a6:	b084      	sub	sp, #16
   1f3a8:	af00      	add	r7, sp, #0
   1f3aa:	60b9      	str	r1, [r7, #8]
   1f3ac:	607a      	str	r2, [r7, #4]
   1f3ae:	230f      	movs	r3, #15
   1f3b0:	18fb      	adds	r3, r7, r3
   1f3b2:	1c02      	adds	r2, r0, #0
   1f3b4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1f3b6:	68b9      	ldr	r1, [r7, #8]
   1f3b8:	230f      	movs	r3, #15
   1f3ba:	18fb      	adds	r3, r7, r3
   1f3bc:	781b      	ldrb	r3, [r3, #0]
   1f3be:	2201      	movs	r2, #1
   1f3c0:	0018      	movs	r0, r3
   1f3c2:	4b10      	ldr	r3, [pc, #64]	; (1f404 <sd_mmc_mem_2_ram+0x60>)
   1f3c4:	4798      	blx	r3
   1f3c6:	1e03      	subs	r3, r0, #0
   1f3c8:	d005      	beq.n	1f3d6 <sd_mmc_mem_2_ram+0x32>
   1f3ca:	2b02      	cmp	r3, #2
   1f3cc:	d101      	bne.n	1f3d2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f3ce:	2302      	movs	r3, #2
   1f3d0:	e013      	b.n	1f3fa <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1f3d2:	2301      	movs	r3, #1
   1f3d4:	e011      	b.n	1f3fa <sd_mmc_mem_2_ram+0x56>
		break;
   1f3d6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1f3d8:	687b      	ldr	r3, [r7, #4]
   1f3da:	2101      	movs	r1, #1
   1f3dc:	0018      	movs	r0, r3
   1f3de:	4b0a      	ldr	r3, [pc, #40]	; (1f408 <sd_mmc_mem_2_ram+0x64>)
   1f3e0:	4798      	blx	r3
   1f3e2:	1e03      	subs	r3, r0, #0
   1f3e4:	d001      	beq.n	1f3ea <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1f3e6:	2301      	movs	r3, #1
   1f3e8:	e007      	b.n	1f3fa <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1f3ea:	2000      	movs	r0, #0
   1f3ec:	4b07      	ldr	r3, [pc, #28]	; (1f40c <sd_mmc_mem_2_ram+0x68>)
   1f3ee:	4798      	blx	r3
   1f3f0:	1e03      	subs	r3, r0, #0
   1f3f2:	d001      	beq.n	1f3f8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1f3f4:	2301      	movs	r3, #1
   1f3f6:	e000      	b.n	1f3fa <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1f3f8:	2300      	movs	r3, #0
}
   1f3fa:	0018      	movs	r0, r3
   1f3fc:	46bd      	mov	sp, r7
   1f3fe:	b004      	add	sp, #16
   1f400:	bd80      	pop	{r7, pc}
   1f402:	46c0      	nop			; (mov r8, r8)
   1f404:	0001ee6d 	.word	0x0001ee6d
   1f408:	0001ef59 	.word	0x0001ef59
   1f40c:	0001efb1 	.word	0x0001efb1

0001f410 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1f410:	b580      	push	{r7, lr}
   1f412:	b082      	sub	sp, #8
   1f414:	af00      	add	r7, sp, #0
   1f416:	6078      	str	r0, [r7, #4]
   1f418:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1f41a:	683a      	ldr	r2, [r7, #0]
   1f41c:	687b      	ldr	r3, [r7, #4]
   1f41e:	0019      	movs	r1, r3
   1f420:	2000      	movs	r0, #0
   1f422:	4b03      	ldr	r3, [pc, #12]	; (1f430 <sd_mmc_mem_2_ram_0+0x20>)
   1f424:	4798      	blx	r3
   1f426:	0003      	movs	r3, r0
}
   1f428:	0018      	movs	r0, r3
   1f42a:	46bd      	mov	sp, r7
   1f42c:	b002      	add	sp, #8
   1f42e:	bd80      	pop	{r7, pc}
   1f430:	0001f3a5 	.word	0x0001f3a5

0001f434 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1f434:	b580      	push	{r7, lr}
   1f436:	b084      	sub	sp, #16
   1f438:	af00      	add	r7, sp, #0
   1f43a:	60b9      	str	r1, [r7, #8]
   1f43c:	607a      	str	r2, [r7, #4]
   1f43e:	230f      	movs	r3, #15
   1f440:	18fb      	adds	r3, r7, r3
   1f442:	1c02      	adds	r2, r0, #0
   1f444:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1f446:	68b9      	ldr	r1, [r7, #8]
   1f448:	230f      	movs	r3, #15
   1f44a:	18fb      	adds	r3, r7, r3
   1f44c:	781b      	ldrb	r3, [r3, #0]
   1f44e:	2201      	movs	r2, #1
   1f450:	0018      	movs	r0, r3
   1f452:	4b10      	ldr	r3, [pc, #64]	; (1f494 <sd_mmc_ram_2_mem+0x60>)
   1f454:	4798      	blx	r3
   1f456:	1e03      	subs	r3, r0, #0
   1f458:	d005      	beq.n	1f466 <sd_mmc_ram_2_mem+0x32>
   1f45a:	2b02      	cmp	r3, #2
   1f45c:	d101      	bne.n	1f462 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f45e:	2302      	movs	r3, #2
   1f460:	e013      	b.n	1f48a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1f462:	2301      	movs	r3, #1
   1f464:	e011      	b.n	1f48a <sd_mmc_ram_2_mem+0x56>
		break;
   1f466:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1f468:	687b      	ldr	r3, [r7, #4]
   1f46a:	2101      	movs	r1, #1
   1f46c:	0018      	movs	r0, r3
   1f46e:	4b0a      	ldr	r3, [pc, #40]	; (1f498 <sd_mmc_ram_2_mem+0x64>)
   1f470:	4798      	blx	r3
   1f472:	1e03      	subs	r3, r0, #0
   1f474:	d001      	beq.n	1f47a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1f476:	2301      	movs	r3, #1
   1f478:	e007      	b.n	1f48a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1f47a:	2000      	movs	r0, #0
   1f47c:	4b07      	ldr	r3, [pc, #28]	; (1f49c <sd_mmc_ram_2_mem+0x68>)
   1f47e:	4798      	blx	r3
   1f480:	1e03      	subs	r3, r0, #0
   1f482:	d001      	beq.n	1f488 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1f484:	2301      	movs	r3, #1
   1f486:	e000      	b.n	1f48a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1f488:	2300      	movs	r3, #0
}
   1f48a:	0018      	movs	r0, r3
   1f48c:	46bd      	mov	sp, r7
   1f48e:	b004      	add	sp, #16
   1f490:	bd80      	pop	{r7, pc}
   1f492:	46c0      	nop			; (mov r8, r8)
   1f494:	0001f049 	.word	0x0001f049
   1f498:	0001f131 	.word	0x0001f131
   1f49c:	0001f189 	.word	0x0001f189

0001f4a0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1f4a0:	b580      	push	{r7, lr}
   1f4a2:	b082      	sub	sp, #8
   1f4a4:	af00      	add	r7, sp, #0
   1f4a6:	6078      	str	r0, [r7, #4]
   1f4a8:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1f4aa:	683a      	ldr	r2, [r7, #0]
   1f4ac:	687b      	ldr	r3, [r7, #4]
   1f4ae:	0019      	movs	r1, r3
   1f4b0:	2000      	movs	r0, #0
   1f4b2:	4b03      	ldr	r3, [pc, #12]	; (1f4c0 <sd_mmc_ram_2_mem_0+0x20>)
   1f4b4:	4798      	blx	r3
   1f4b6:	0003      	movs	r3, r0
}
   1f4b8:	0018      	movs	r0, r3
   1f4ba:	46bd      	mov	sp, r7
   1f4bc:	b002      	add	sp, #8
   1f4be:	bd80      	pop	{r7, pc}
   1f4c0:	0001f435 	.word	0x0001f435

0001f4c4 <system_pinmux_get_group_from_gpio_pin>:
{
   1f4c4:	b580      	push	{r7, lr}
   1f4c6:	b084      	sub	sp, #16
   1f4c8:	af00      	add	r7, sp, #0
   1f4ca:	0002      	movs	r2, r0
   1f4cc:	1dfb      	adds	r3, r7, #7
   1f4ce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f4d0:	230f      	movs	r3, #15
   1f4d2:	18fb      	adds	r3, r7, r3
   1f4d4:	1dfa      	adds	r2, r7, #7
   1f4d6:	7812      	ldrb	r2, [r2, #0]
   1f4d8:	09d2      	lsrs	r2, r2, #7
   1f4da:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f4dc:	230e      	movs	r3, #14
   1f4de:	18fb      	adds	r3, r7, r3
   1f4e0:	1dfa      	adds	r2, r7, #7
   1f4e2:	7812      	ldrb	r2, [r2, #0]
   1f4e4:	0952      	lsrs	r2, r2, #5
   1f4e6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f4e8:	4b0d      	ldr	r3, [pc, #52]	; (1f520 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f4ea:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f4ec:	230f      	movs	r3, #15
   1f4ee:	18fb      	adds	r3, r7, r3
   1f4f0:	781b      	ldrb	r3, [r3, #0]
   1f4f2:	2b00      	cmp	r3, #0
   1f4f4:	d10f      	bne.n	1f516 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f4f6:	230f      	movs	r3, #15
   1f4f8:	18fb      	adds	r3, r7, r3
   1f4fa:	781b      	ldrb	r3, [r3, #0]
   1f4fc:	009b      	lsls	r3, r3, #2
   1f4fe:	2210      	movs	r2, #16
   1f500:	4694      	mov	ip, r2
   1f502:	44bc      	add	ip, r7
   1f504:	4463      	add	r3, ip
   1f506:	3b08      	subs	r3, #8
   1f508:	681a      	ldr	r2, [r3, #0]
   1f50a:	230e      	movs	r3, #14
   1f50c:	18fb      	adds	r3, r7, r3
   1f50e:	781b      	ldrb	r3, [r3, #0]
   1f510:	01db      	lsls	r3, r3, #7
   1f512:	18d3      	adds	r3, r2, r3
   1f514:	e000      	b.n	1f518 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f516:	2300      	movs	r3, #0
}
   1f518:	0018      	movs	r0, r3
   1f51a:	46bd      	mov	sp, r7
   1f51c:	b004      	add	sp, #16
   1f51e:	bd80      	pop	{r7, pc}
   1f520:	41004400 	.word	0x41004400

0001f524 <system_interrupt_enable>:
{
   1f524:	b580      	push	{r7, lr}
   1f526:	b082      	sub	sp, #8
   1f528:	af00      	add	r7, sp, #0
   1f52a:	0002      	movs	r2, r0
   1f52c:	1dfb      	adds	r3, r7, #7
   1f52e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f530:	4b06      	ldr	r3, [pc, #24]	; (1f54c <system_interrupt_enable+0x28>)
   1f532:	1dfa      	adds	r2, r7, #7
   1f534:	7812      	ldrb	r2, [r2, #0]
   1f536:	0011      	movs	r1, r2
   1f538:	221f      	movs	r2, #31
   1f53a:	400a      	ands	r2, r1
   1f53c:	2101      	movs	r1, #1
   1f53e:	4091      	lsls	r1, r2
   1f540:	000a      	movs	r2, r1
   1f542:	601a      	str	r2, [r3, #0]
}
   1f544:	46c0      	nop			; (mov r8, r8)
   1f546:	46bd      	mov	sp, r7
   1f548:	b002      	add	sp, #8
   1f54a:	bd80      	pop	{r7, pc}
   1f54c:	e000e100 	.word	0xe000e100

0001f550 <port_get_group_from_gpio_pin>:
{
   1f550:	b580      	push	{r7, lr}
   1f552:	b082      	sub	sp, #8
   1f554:	af00      	add	r7, sp, #0
   1f556:	0002      	movs	r2, r0
   1f558:	1dfb      	adds	r3, r7, #7
   1f55a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f55c:	1dfb      	adds	r3, r7, #7
   1f55e:	781b      	ldrb	r3, [r3, #0]
   1f560:	0018      	movs	r0, r3
   1f562:	4b03      	ldr	r3, [pc, #12]	; (1f570 <port_get_group_from_gpio_pin+0x20>)
   1f564:	4798      	blx	r3
   1f566:	0003      	movs	r3, r0
}
   1f568:	0018      	movs	r0, r3
   1f56a:	46bd      	mov	sp, r7
   1f56c:	b002      	add	sp, #8
   1f56e:	bd80      	pop	{r7, pc}
   1f570:	0001f4c5 	.word	0x0001f4c5

0001f574 <port_get_config_defaults>:
{
   1f574:	b580      	push	{r7, lr}
   1f576:	b082      	sub	sp, #8
   1f578:	af00      	add	r7, sp, #0
   1f57a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f57c:	687b      	ldr	r3, [r7, #4]
   1f57e:	2200      	movs	r2, #0
   1f580:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f582:	687b      	ldr	r3, [r7, #4]
   1f584:	2201      	movs	r2, #1
   1f586:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f588:	687b      	ldr	r3, [r7, #4]
   1f58a:	2200      	movs	r2, #0
   1f58c:	709a      	strb	r2, [r3, #2]
}
   1f58e:	46c0      	nop			; (mov r8, r8)
   1f590:	46bd      	mov	sp, r7
   1f592:	b002      	add	sp, #8
   1f594:	bd80      	pop	{r7, pc}
	...

0001f598 <port_pin_set_output_level>:
{
   1f598:	b580      	push	{r7, lr}
   1f59a:	b084      	sub	sp, #16
   1f59c:	af00      	add	r7, sp, #0
   1f59e:	0002      	movs	r2, r0
   1f5a0:	1dfb      	adds	r3, r7, #7
   1f5a2:	701a      	strb	r2, [r3, #0]
   1f5a4:	1dbb      	adds	r3, r7, #6
   1f5a6:	1c0a      	adds	r2, r1, #0
   1f5a8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f5aa:	1dfb      	adds	r3, r7, #7
   1f5ac:	781b      	ldrb	r3, [r3, #0]
   1f5ae:	0018      	movs	r0, r3
   1f5b0:	4b0d      	ldr	r3, [pc, #52]	; (1f5e8 <port_pin_set_output_level+0x50>)
   1f5b2:	4798      	blx	r3
   1f5b4:	0003      	movs	r3, r0
   1f5b6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f5b8:	1dfb      	adds	r3, r7, #7
   1f5ba:	781b      	ldrb	r3, [r3, #0]
   1f5bc:	221f      	movs	r2, #31
   1f5be:	4013      	ands	r3, r2
   1f5c0:	2201      	movs	r2, #1
   1f5c2:	409a      	lsls	r2, r3
   1f5c4:	0013      	movs	r3, r2
   1f5c6:	60bb      	str	r3, [r7, #8]
	if (level) {
   1f5c8:	1dbb      	adds	r3, r7, #6
   1f5ca:	781b      	ldrb	r3, [r3, #0]
   1f5cc:	2b00      	cmp	r3, #0
   1f5ce:	d003      	beq.n	1f5d8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1f5d0:	68fb      	ldr	r3, [r7, #12]
   1f5d2:	68ba      	ldr	r2, [r7, #8]
   1f5d4:	619a      	str	r2, [r3, #24]
}
   1f5d6:	e002      	b.n	1f5de <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1f5d8:	68fb      	ldr	r3, [r7, #12]
   1f5da:	68ba      	ldr	r2, [r7, #8]
   1f5dc:	615a      	str	r2, [r3, #20]
}
   1f5de:	46c0      	nop			; (mov r8, r8)
   1f5e0:	46bd      	mov	sp, r7
   1f5e2:	b004      	add	sp, #16
   1f5e4:	bd80      	pop	{r7, pc}
   1f5e6:	46c0      	nop			; (mov r8, r8)
   1f5e8:	0001f551 	.word	0x0001f551

0001f5ec <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1f5ec:	b580      	push	{r7, lr}
   1f5ee:	b084      	sub	sp, #16
   1f5f0:	af00      	add	r7, sp, #0
   1f5f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f5f4:	687b      	ldr	r3, [r7, #4]
   1f5f6:	681b      	ldr	r3, [r3, #0]
   1f5f8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1f5fa:	68fb      	ldr	r3, [r7, #12]
   1f5fc:	69db      	ldr	r3, [r3, #28]
   1f5fe:	1e5a      	subs	r2, r3, #1
   1f600:	4193      	sbcs	r3, r2
   1f602:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1f604:	0018      	movs	r0, r3
   1f606:	46bd      	mov	sp, r7
   1f608:	b004      	add	sp, #16
   1f60a:	bd80      	pop	{r7, pc}

0001f60c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1f60c:	b580      	push	{r7, lr}
   1f60e:	b082      	sub	sp, #8
   1f610:	af00      	add	r7, sp, #0
   1f612:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1f614:	687b      	ldr	r3, [r7, #4]
   1f616:	2201      	movs	r2, #1
   1f618:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1f61a:	687b      	ldr	r3, [r7, #4]
   1f61c:	2200      	movs	r2, #0
   1f61e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1f620:	687b      	ldr	r3, [r7, #4]
   1f622:	2200      	movs	r2, #0
   1f624:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1f626:	687b      	ldr	r3, [r7, #4]
   1f628:	22c0      	movs	r2, #192	; 0xc0
   1f62a:	0392      	lsls	r2, r2, #14
   1f62c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1f62e:	687b      	ldr	r3, [r7, #4]
   1f630:	2200      	movs	r2, #0
   1f632:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1f634:	687b      	ldr	r3, [r7, #4]
   1f636:	2200      	movs	r2, #0
   1f638:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1f63a:	687b      	ldr	r3, [r7, #4]
   1f63c:	2201      	movs	r2, #1
   1f63e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1f640:	687b      	ldr	r3, [r7, #4]
   1f642:	2201      	movs	r2, #1
   1f644:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1f646:	687b      	ldr	r3, [r7, #4]
   1f648:	2200      	movs	r2, #0
   1f64a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1f64c:	687b      	ldr	r3, [r7, #4]
   1f64e:	2224      	movs	r2, #36	; 0x24
   1f650:	2100      	movs	r1, #0
   1f652:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1f654:	687b      	ldr	r3, [r7, #4]
   1f656:	3318      	adds	r3, #24
   1f658:	220c      	movs	r2, #12
   1f65a:	2100      	movs	r1, #0
   1f65c:	0018      	movs	r0, r3
   1f65e:	4b0a      	ldr	r3, [pc, #40]	; (1f688 <spi_get_config_defaults+0x7c>)
   1f660:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1f662:	687b      	ldr	r3, [r7, #4]
   1f664:	4a09      	ldr	r2, [pc, #36]	; (1f68c <spi_get_config_defaults+0x80>)
   1f666:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1f668:	687b      	ldr	r3, [r7, #4]
   1f66a:	2200      	movs	r2, #0
   1f66c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1f66e:	687b      	ldr	r3, [r7, #4]
   1f670:	2200      	movs	r2, #0
   1f672:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1f674:	687b      	ldr	r3, [r7, #4]
   1f676:	2200      	movs	r2, #0
   1f678:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1f67a:	687b      	ldr	r3, [r7, #4]
   1f67c:	2200      	movs	r2, #0
   1f67e:	635a      	str	r2, [r3, #52]	; 0x34

};
   1f680:	46c0      	nop			; (mov r8, r8)
   1f682:	46bd      	mov	sp, r7
   1f684:	b002      	add	sp, #8
   1f686:	bd80      	pop	{r7, pc}
   1f688:	00034a5f 	.word	0x00034a5f
   1f68c:	000186a0 	.word	0x000186a0

0001f690 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1f690:	b580      	push	{r7, lr}
   1f692:	b082      	sub	sp, #8
   1f694:	af00      	add	r7, sp, #0
   1f696:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1f698:	687b      	ldr	r3, [r7, #4]
   1f69a:	220a      	movs	r2, #10
   1f69c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1f69e:	687b      	ldr	r3, [r7, #4]
   1f6a0:	2200      	movs	r2, #0
   1f6a2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1f6a4:	687b      	ldr	r3, [r7, #4]
   1f6a6:	2200      	movs	r2, #0
   1f6a8:	709a      	strb	r2, [r3, #2]
}
   1f6aa:	46c0      	nop			; (mov r8, r8)
   1f6ac:	46bd      	mov	sp, r7
   1f6ae:	b002      	add	sp, #8
   1f6b0:	bd80      	pop	{r7, pc}
	...

0001f6b4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1f6b4:	b580      	push	{r7, lr}
   1f6b6:	b084      	sub	sp, #16
   1f6b8:	af00      	add	r7, sp, #0
   1f6ba:	6078      	str	r0, [r7, #4]
   1f6bc:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1f6be:	683b      	ldr	r3, [r7, #0]
   1f6c0:	781a      	ldrb	r2, [r3, #0]
   1f6c2:	687b      	ldr	r3, [r7, #4]
   1f6c4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1f6c6:	683b      	ldr	r3, [r7, #0]
   1f6c8:	785a      	ldrb	r2, [r3, #1]
   1f6ca:	687b      	ldr	r3, [r7, #4]
   1f6cc:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1f6ce:	683b      	ldr	r3, [r7, #0]
   1f6d0:	789a      	ldrb	r2, [r3, #2]
   1f6d2:	687b      	ldr	r3, [r7, #4]
   1f6d4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1f6d6:	230c      	movs	r3, #12
   1f6d8:	18fb      	adds	r3, r7, r3
   1f6da:	0018      	movs	r0, r3
   1f6dc:	4b0b      	ldr	r3, [pc, #44]	; (1f70c <spi_attach_slave+0x58>)
   1f6de:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1f6e0:	230c      	movs	r3, #12
   1f6e2:	18fb      	adds	r3, r7, r3
   1f6e4:	2201      	movs	r2, #1
   1f6e6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1f6e8:	687b      	ldr	r3, [r7, #4]
   1f6ea:	781b      	ldrb	r3, [r3, #0]
   1f6ec:	220c      	movs	r2, #12
   1f6ee:	18ba      	adds	r2, r7, r2
   1f6f0:	0011      	movs	r1, r2
   1f6f2:	0018      	movs	r0, r3
   1f6f4:	4b06      	ldr	r3, [pc, #24]	; (1f710 <spi_attach_slave+0x5c>)
   1f6f6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1f6f8:	687b      	ldr	r3, [r7, #4]
   1f6fa:	781b      	ldrb	r3, [r3, #0]
   1f6fc:	2101      	movs	r1, #1
   1f6fe:	0018      	movs	r0, r3
   1f700:	4b04      	ldr	r3, [pc, #16]	; (1f714 <spi_attach_slave+0x60>)
   1f702:	4798      	blx	r3
}
   1f704:	46c0      	nop			; (mov r8, r8)
   1f706:	46bd      	mov	sp, r7
   1f708:	b004      	add	sp, #16
   1f70a:	bd80      	pop	{r7, pc}
   1f70c:	0001f575 	.word	0x0001f575
   1f710:	00026a59 	.word	0x00026a59
   1f714:	0001f599 	.word	0x0001f599

0001f718 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1f718:	b580      	push	{r7, lr}
   1f71a:	b084      	sub	sp, #16
   1f71c:	af00      	add	r7, sp, #0
   1f71e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f720:	687b      	ldr	r3, [r7, #4]
   1f722:	681b      	ldr	r3, [r3, #0]
   1f724:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1f726:	687b      	ldr	r3, [r7, #4]
   1f728:	681b      	ldr	r3, [r3, #0]
   1f72a:	0018      	movs	r0, r3
   1f72c:	4b0b      	ldr	r3, [pc, #44]	; (1f75c <spi_enable+0x44>)
   1f72e:	4798      	blx	r3
   1f730:	0003      	movs	r3, r0
   1f732:	0018      	movs	r0, r3
   1f734:	4b0a      	ldr	r3, [pc, #40]	; (1f760 <spi_enable+0x48>)
   1f736:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1f738:	46c0      	nop			; (mov r8, r8)
   1f73a:	687b      	ldr	r3, [r7, #4]
   1f73c:	0018      	movs	r0, r3
   1f73e:	4b09      	ldr	r3, [pc, #36]	; (1f764 <spi_enable+0x4c>)
   1f740:	4798      	blx	r3
   1f742:	1e03      	subs	r3, r0, #0
   1f744:	d1f9      	bne.n	1f73a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1f746:	68fb      	ldr	r3, [r7, #12]
   1f748:	681b      	ldr	r3, [r3, #0]
   1f74a:	2202      	movs	r2, #2
   1f74c:	431a      	orrs	r2, r3
   1f74e:	68fb      	ldr	r3, [r7, #12]
   1f750:	601a      	str	r2, [r3, #0]
}
   1f752:	46c0      	nop			; (mov r8, r8)
   1f754:	46bd      	mov	sp, r7
   1f756:	b004      	add	sp, #16
   1f758:	bd80      	pop	{r7, pc}
   1f75a:	46c0      	nop			; (mov r8, r8)
   1f75c:	00027729 	.word	0x00027729
   1f760:	0001f525 	.word	0x0001f525
   1f764:	0001f5ed 	.word	0x0001f5ed

0001f768 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1f768:	b580      	push	{r7, lr}
   1f76a:	b084      	sub	sp, #16
   1f76c:	af00      	add	r7, sp, #0
   1f76e:	6078      	str	r0, [r7, #4]
   1f770:	000a      	movs	r2, r1
   1f772:	1cfb      	adds	r3, r7, #3
   1f774:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1f776:	230f      	movs	r3, #15
   1f778:	18fb      	adds	r3, r7, r3
   1f77a:	2200      	movs	r2, #0
   1f77c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1f77e:	e038      	b.n	1f7f2 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1f780:	687b      	ldr	r3, [r7, #4]
   1f782:	1c5a      	adds	r2, r3, #1
   1f784:	607a      	str	r2, [r7, #4]
   1f786:	220e      	movs	r2, #14
   1f788:	18ba      	adds	r2, r7, r2
   1f78a:	781b      	ldrb	r3, [r3, #0]
   1f78c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f78e:	230d      	movs	r3, #13
   1f790:	18fb      	adds	r3, r7, r3
   1f792:	2200      	movs	r2, #0
   1f794:	701a      	strb	r2, [r3, #0]
   1f796:	e027      	b.n	1f7e8 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1f798:	230f      	movs	r3, #15
   1f79a:	18fa      	adds	r2, r7, r3
   1f79c:	230f      	movs	r3, #15
   1f79e:	18fb      	adds	r3, r7, r3
   1f7a0:	781b      	ldrb	r3, [r3, #0]
   1f7a2:	18db      	adds	r3, r3, r3
   1f7a4:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1f7a6:	230e      	movs	r3, #14
   1f7a8:	18fa      	adds	r2, r7, r3
   1f7aa:	230f      	movs	r3, #15
   1f7ac:	18fb      	adds	r3, r7, r3
   1f7ae:	7812      	ldrb	r2, [r2, #0]
   1f7b0:	781b      	ldrb	r3, [r3, #0]
   1f7b2:	4053      	eors	r3, r2
   1f7b4:	b2db      	uxtb	r3, r3
   1f7b6:	b25b      	sxtb	r3, r3
   1f7b8:	2b00      	cmp	r3, #0
   1f7ba:	da07      	bge.n	1f7cc <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1f7bc:	230f      	movs	r3, #15
   1f7be:	18fb      	adds	r3, r7, r3
   1f7c0:	220f      	movs	r2, #15
   1f7c2:	18ba      	adds	r2, r7, r2
   1f7c4:	7812      	ldrb	r2, [r2, #0]
   1f7c6:	2109      	movs	r1, #9
   1f7c8:	404a      	eors	r2, r1
   1f7ca:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1f7cc:	230e      	movs	r3, #14
   1f7ce:	18fa      	adds	r2, r7, r3
   1f7d0:	230e      	movs	r3, #14
   1f7d2:	18fb      	adds	r3, r7, r3
   1f7d4:	781b      	ldrb	r3, [r3, #0]
   1f7d6:	18db      	adds	r3, r3, r3
   1f7d8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f7da:	230d      	movs	r3, #13
   1f7dc:	18fb      	adds	r3, r7, r3
   1f7de:	781a      	ldrb	r2, [r3, #0]
   1f7e0:	230d      	movs	r3, #13
   1f7e2:	18fb      	adds	r3, r7, r3
   1f7e4:	3201      	adds	r2, #1
   1f7e6:	701a      	strb	r2, [r3, #0]
   1f7e8:	230d      	movs	r3, #13
   1f7ea:	18fb      	adds	r3, r7, r3
   1f7ec:	781b      	ldrb	r3, [r3, #0]
   1f7ee:	2b07      	cmp	r3, #7
   1f7f0:	d9d2      	bls.n	1f798 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1f7f2:	1cfb      	adds	r3, r7, #3
   1f7f4:	781b      	ldrb	r3, [r3, #0]
   1f7f6:	1cfa      	adds	r2, r7, #3
   1f7f8:	1e59      	subs	r1, r3, #1
   1f7fa:	7011      	strb	r1, [r2, #0]
   1f7fc:	2b00      	cmp	r3, #0
   1f7fe:	d1bf      	bne.n	1f780 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1f800:	230f      	movs	r3, #15
   1f802:	18fb      	adds	r3, r7, r3
   1f804:	781b      	ldrb	r3, [r3, #0]
   1f806:	005b      	lsls	r3, r3, #1
   1f808:	b25b      	sxtb	r3, r3
   1f80a:	2201      	movs	r2, #1
   1f80c:	4313      	orrs	r3, r2
   1f80e:	b25a      	sxtb	r2, r3
   1f810:	230f      	movs	r3, #15
   1f812:	18fb      	adds	r3, r7, r3
   1f814:	701a      	strb	r2, [r3, #0]
	return crc;
   1f816:	230f      	movs	r3, #15
   1f818:	18fb      	adds	r3, r7, r3
   1f81a:	781b      	ldrb	r3, [r3, #0]
}
   1f81c:	0018      	movs	r0, r3
   1f81e:	46bd      	mov	sp, r7
   1f820:	b004      	add	sp, #16
   1f822:	bd80      	pop	{r7, pc}

0001f824 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1f824:	b590      	push	{r4, r7, lr}
   1f826:	b083      	sub	sp, #12
   1f828:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1f82a:	1c7b      	adds	r3, r7, #1
   1f82c:	22ff      	movs	r2, #255	; 0xff
   1f82e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1f830:	1cbb      	adds	r3, r7, #2
   1f832:	22ff      	movs	r2, #255	; 0xff
   1f834:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f836:	1cbb      	adds	r3, r7, #2
   1f838:	881b      	ldrh	r3, [r3, #0]
   1f83a:	1c79      	adds	r1, r7, #1
   1f83c:	4811      	ldr	r0, [pc, #68]	; (1f884 <sd_mmc_spi_wait_busy+0x60>)
   1f83e:	2201      	movs	r2, #1
   1f840:	4c11      	ldr	r4, [pc, #68]	; (1f888 <sd_mmc_spi_wait_busy+0x64>)
   1f842:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1f844:	4b11      	ldr	r3, [pc, #68]	; (1f88c <sd_mmc_spi_wait_busy+0x68>)
   1f846:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f848:	1cbb      	adds	r3, r7, #2
   1f84a:	881b      	ldrh	r3, [r3, #0]
   1f84c:	1c79      	adds	r1, r7, #1
   1f84e:	480d      	ldr	r0, [pc, #52]	; (1f884 <sd_mmc_spi_wait_busy+0x60>)
   1f850:	2201      	movs	r2, #1
   1f852:	4c0d      	ldr	r4, [pc, #52]	; (1f888 <sd_mmc_spi_wait_busy+0x64>)
   1f854:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f856:	1cbb      	adds	r3, r7, #2
   1f858:	881b      	ldrh	r3, [r3, #0]
   1f85a:	1c79      	adds	r1, r7, #1
   1f85c:	4809      	ldr	r0, [pc, #36]	; (1f884 <sd_mmc_spi_wait_busy+0x60>)
   1f85e:	2201      	movs	r2, #1
   1f860:	4c09      	ldr	r4, [pc, #36]	; (1f888 <sd_mmc_spi_wait_busy+0x64>)
   1f862:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1f864:	687b      	ldr	r3, [r7, #4]
   1f866:	1e5a      	subs	r2, r3, #1
   1f868:	607a      	str	r2, [r7, #4]
   1f86a:	2b00      	cmp	r3, #0
   1f86c:	d101      	bne.n	1f872 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1f86e:	2300      	movs	r3, #0
   1f870:	e004      	b.n	1f87c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1f872:	1c7b      	adds	r3, r7, #1
   1f874:	781b      	ldrb	r3, [r3, #0]
   1f876:	2bff      	cmp	r3, #255	; 0xff
   1f878:	d1ed      	bne.n	1f856 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1f87a:	2301      	movs	r3, #1
}
   1f87c:	0018      	movs	r0, r3
   1f87e:	46bd      	mov	sp, r7
   1f880:	b003      	add	sp, #12
   1f882:	bd90      	pop	{r4, r7, pc}
   1f884:	200040d0 	.word	0x200040d0
   1f888:	00028069 	.word	0x00028069
   1f88c:	00030d40 	.word	0x00030d40

0001f890 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1f890:	b590      	push	{r4, r7, lr}
   1f892:	b083      	sub	sp, #12
   1f894:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1f896:	1cbb      	adds	r3, r7, #2
   1f898:	22ff      	movs	r2, #255	; 0xff
   1f89a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1f89c:	1c7b      	adds	r3, r7, #1
   1f89e:	2200      	movs	r2, #0
   1f8a0:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1f8a2:	4b18      	ldr	r3, [pc, #96]	; (1f904 <sd_mmc_spi_start_read_block+0x74>)
   1f8a4:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1f8a6:	687b      	ldr	r3, [r7, #4]
   1f8a8:	1e5a      	subs	r2, r3, #1
   1f8aa:	607a      	str	r2, [r7, #4]
   1f8ac:	2b00      	cmp	r3, #0
   1f8ae:	d104      	bne.n	1f8ba <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1f8b0:	4b15      	ldr	r3, [pc, #84]	; (1f908 <sd_mmc_spi_start_read_block+0x78>)
   1f8b2:	2204      	movs	r2, #4
   1f8b4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1f8b6:	2300      	movs	r3, #0
   1f8b8:	e020      	b.n	1f8fc <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1f8ba:	1cbb      	adds	r3, r7, #2
   1f8bc:	881b      	ldrh	r3, [r3, #0]
   1f8be:	1c79      	adds	r1, r7, #1
   1f8c0:	4812      	ldr	r0, [pc, #72]	; (1f90c <sd_mmc_spi_start_read_block+0x7c>)
   1f8c2:	2201      	movs	r2, #1
   1f8c4:	4c12      	ldr	r4, [pc, #72]	; (1f910 <sd_mmc_spi_start_read_block+0x80>)
   1f8c6:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1f8c8:	1c7b      	adds	r3, r7, #1
   1f8ca:	781b      	ldrb	r3, [r3, #0]
   1f8cc:	001a      	movs	r2, r3
   1f8ce:	23f0      	movs	r3, #240	; 0xf0
   1f8d0:	4013      	ands	r3, r2
   1f8d2:	d10e      	bne.n	1f8f2 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1f8d4:	1c7b      	adds	r3, r7, #1
   1f8d6:	781b      	ldrb	r3, [r3, #0]
   1f8d8:	001a      	movs	r2, r3
   1f8da:	2307      	movs	r3, #7
   1f8dc:	4013      	ands	r3, r2
   1f8de:	d003      	beq.n	1f8e8 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1f8e0:	4b09      	ldr	r3, [pc, #36]	; (1f908 <sd_mmc_spi_start_read_block+0x78>)
   1f8e2:	2207      	movs	r2, #7
   1f8e4:	701a      	strb	r2, [r3, #0]
   1f8e6:	e002      	b.n	1f8ee <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1f8e8:	4b07      	ldr	r3, [pc, #28]	; (1f908 <sd_mmc_spi_start_read_block+0x78>)
   1f8ea:	220b      	movs	r2, #11
   1f8ec:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1f8ee:	2300      	movs	r3, #0
   1f8f0:	e004      	b.n	1f8fc <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1f8f2:	1c7b      	adds	r3, r7, #1
   1f8f4:	781b      	ldrb	r3, [r3, #0]
   1f8f6:	2bfe      	cmp	r3, #254	; 0xfe
   1f8f8:	d1d5      	bne.n	1f8a6 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1f8fa:	2301      	movs	r3, #1
}
   1f8fc:	0018      	movs	r0, r3
   1f8fe:	46bd      	mov	sp, r7
   1f900:	b003      	add	sp, #12
   1f902:	bd90      	pop	{r4, r7, pc}
   1f904:	0007a120 	.word	0x0007a120
   1f908:	20004113 	.word	0x20004113
   1f90c:	200040d0 	.word	0x200040d0
   1f910:	00028069 	.word	0x00028069

0001f914 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1f914:	b590      	push	{r4, r7, lr}
   1f916:	b083      	sub	sp, #12
   1f918:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1f91a:	1dbb      	adds	r3, r7, #6
   1f91c:	22ff      	movs	r2, #255	; 0xff
   1f91e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1f920:	1dbb      	adds	r3, r7, #6
   1f922:	881b      	ldrh	r3, [r3, #0]
   1f924:	1d39      	adds	r1, r7, #4
   1f926:	4804      	ldr	r0, [pc, #16]	; (1f938 <sd_mmc_spi_stop_read_block+0x24>)
   1f928:	2202      	movs	r2, #2
   1f92a:	4c04      	ldr	r4, [pc, #16]	; (1f93c <sd_mmc_spi_stop_read_block+0x28>)
   1f92c:	47a0      	blx	r4
			dummy);
}
   1f92e:	46c0      	nop			; (mov r8, r8)
   1f930:	46bd      	mov	sp, r7
   1f932:	b003      	add	sp, #12
   1f934:	bd90      	pop	{r4, r7, pc}
   1f936:	46c0      	nop			; (mov r8, r8)
   1f938:	200040d0 	.word	0x200040d0
   1f93c:	00028069 	.word	0x00028069

0001f940 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1f940:	b580      	push	{r7, lr}
   1f942:	b082      	sub	sp, #8
   1f944:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1f946:	1dfb      	adds	r3, r7, #7
   1f948:	22ff      	movs	r2, #255	; 0xff
   1f94a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1f94c:	1df9      	adds	r1, r7, #7
   1f94e:	4b0d      	ldr	r3, [pc, #52]	; (1f984 <sd_mmc_spi_start_write_block+0x44>)
   1f950:	2201      	movs	r2, #1
   1f952:	0018      	movs	r0, r3
   1f954:	4b0c      	ldr	r3, [pc, #48]	; (1f988 <sd_mmc_spi_start_write_block+0x48>)
   1f956:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1f958:	4b0c      	ldr	r3, [pc, #48]	; (1f98c <sd_mmc_spi_start_write_block+0x4c>)
   1f95a:	881b      	ldrh	r3, [r3, #0]
   1f95c:	2b01      	cmp	r3, #1
   1f95e:	d103      	bne.n	1f968 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1f960:	1dbb      	adds	r3, r7, #6
   1f962:	22fe      	movs	r2, #254	; 0xfe
   1f964:	701a      	strb	r2, [r3, #0]
   1f966:	e002      	b.n	1f96e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1f968:	1dbb      	adds	r3, r7, #6
   1f96a:	22fc      	movs	r2, #252	; 0xfc
   1f96c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1f96e:	1db9      	adds	r1, r7, #6
   1f970:	4b04      	ldr	r3, [pc, #16]	; (1f984 <sd_mmc_spi_start_write_block+0x44>)
   1f972:	2201      	movs	r2, #1
   1f974:	0018      	movs	r0, r3
   1f976:	4b04      	ldr	r3, [pc, #16]	; (1f988 <sd_mmc_spi_start_write_block+0x48>)
   1f978:	4798      	blx	r3
}
   1f97a:	46c0      	nop			; (mov r8, r8)
   1f97c:	46bd      	mov	sp, r7
   1f97e:	b002      	add	sp, #8
   1f980:	bd80      	pop	{r7, pc}
   1f982:	46c0      	nop			; (mov r8, r8)
   1f984:	200040d0 	.word	0x200040d0
   1f988:	0002828d 	.word	0x0002828d
   1f98c:	2000411e 	.word	0x2000411e

0001f990 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1f990:	b590      	push	{r4, r7, lr}
   1f992:	b083      	sub	sp, #12
   1f994:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1f996:	1dbb      	adds	r3, r7, #6
   1f998:	22ff      	movs	r2, #255	; 0xff
   1f99a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1f99c:	1cbb      	adds	r3, r7, #2
   1f99e:	2201      	movs	r2, #1
   1f9a0:	4252      	negs	r2, r2
   1f9a2:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1f9a4:	1cb9      	adds	r1, r7, #2
   1f9a6:	4b1b      	ldr	r3, [pc, #108]	; (1fa14 <sd_mmc_spi_stop_write_block+0x84>)
   1f9a8:	2202      	movs	r2, #2
   1f9aa:	0018      	movs	r0, r3
   1f9ac:	4b1a      	ldr	r3, [pc, #104]	; (1fa18 <sd_mmc_spi_stop_write_block+0x88>)
   1f9ae:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1f9b0:	1dbb      	adds	r3, r7, #6
   1f9b2:	881b      	ldrh	r3, [r3, #0]
   1f9b4:	1d79      	adds	r1, r7, #5
   1f9b6:	4817      	ldr	r0, [pc, #92]	; (1fa14 <sd_mmc_spi_stop_write_block+0x84>)
   1f9b8:	2201      	movs	r2, #1
   1f9ba:	4c18      	ldr	r4, [pc, #96]	; (1fa1c <sd_mmc_spi_stop_write_block+0x8c>)
   1f9bc:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1f9be:	1d7b      	adds	r3, r7, #5
   1f9c0:	781b      	ldrb	r3, [r3, #0]
   1f9c2:	001a      	movs	r2, r3
   1f9c4:	2310      	movs	r3, #16
   1f9c6:	4013      	ands	r3, r2
   1f9c8:	d105      	bne.n	1f9d6 <sd_mmc_spi_stop_write_block+0x46>
   1f9ca:	1d7b      	adds	r3, r7, #5
   1f9cc:	781b      	ldrb	r3, [r3, #0]
   1f9ce:	001a      	movs	r2, r3
   1f9d0:	2301      	movs	r3, #1
   1f9d2:	4013      	ands	r3, r2
   1f9d4:	d104      	bne.n	1f9e0 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f9d6:	4b12      	ldr	r3, [pc, #72]	; (1fa20 <sd_mmc_spi_stop_write_block+0x90>)
   1f9d8:	2201      	movs	r2, #1
   1f9da:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1f9dc:	2300      	movs	r3, #0
   1f9de:	e014      	b.n	1fa0a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1f9e0:	1d7b      	adds	r3, r7, #5
   1f9e2:	781b      	ldrb	r3, [r3, #0]
   1f9e4:	001a      	movs	r2, r3
   1f9e6:	231e      	movs	r3, #30
   1f9e8:	4013      	ands	r3, r2
   1f9ea:	2b04      	cmp	r3, #4
   1f9ec:	d00b      	beq.n	1fa06 <sd_mmc_spi_stop_write_block+0x76>
   1f9ee:	2b0a      	cmp	r3, #10
   1f9f0:	d104      	bne.n	1f9fc <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1f9f2:	4b0b      	ldr	r3, [pc, #44]	; (1fa20 <sd_mmc_spi_stop_write_block+0x90>)
   1f9f4:	2208      	movs	r2, #8
   1f9f6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f9f8:	2300      	movs	r3, #0
   1f9fa:	e006      	b.n	1fa0a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1f9fc:	4b08      	ldr	r3, [pc, #32]	; (1fa20 <sd_mmc_spi_stop_write_block+0x90>)
   1f9fe:	220a      	movs	r2, #10
   1fa00:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1fa02:	2300      	movs	r3, #0
   1fa04:	e001      	b.n	1fa0a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1fa06:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1fa08:	2301      	movs	r3, #1
}
   1fa0a:	0018      	movs	r0, r3
   1fa0c:	46bd      	mov	sp, r7
   1fa0e:	b003      	add	sp, #12
   1fa10:	bd90      	pop	{r4, r7, pc}
   1fa12:	46c0      	nop			; (mov r8, r8)
   1fa14:	200040d0 	.word	0x200040d0
   1fa18:	0002828d 	.word	0x0002828d
   1fa1c:	00028069 	.word	0x00028069
   1fa20:	20004113 	.word	0x20004113

0001fa24 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1fa24:	b590      	push	{r4, r7, lr}
   1fa26:	b083      	sub	sp, #12
   1fa28:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1fa2a:	4b1d      	ldr	r3, [pc, #116]	; (1faa0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1fa2c:	881b      	ldrh	r3, [r3, #0]
   1fa2e:	2b01      	cmp	r3, #1
   1fa30:	d101      	bne.n	1fa36 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1fa32:	2301      	movs	r3, #1
   1fa34:	e030      	b.n	1fa98 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1fa36:	4b1a      	ldr	r3, [pc, #104]	; (1faa0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1fa38:	881b      	ldrh	r3, [r3, #0]
   1fa3a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1fa3c:	4b19      	ldr	r3, [pc, #100]	; (1faa4 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1fa3e:	681a      	ldr	r2, [r3, #0]
   1fa40:	4b19      	ldr	r3, [pc, #100]	; (1faa8 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1fa42:	881b      	ldrh	r3, [r3, #0]
   1fa44:	0019      	movs	r1, r3
   1fa46:	4b19      	ldr	r3, [pc, #100]	; (1faac <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1fa48:	0010      	movs	r0, r2
   1fa4a:	4798      	blx	r3
   1fa4c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1fa4e:	429c      	cmp	r4, r3
   1fa50:	d901      	bls.n	1fa56 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1fa52:	2301      	movs	r3, #1
   1fa54:	e020      	b.n	1fa98 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1fa56:	1dfb      	adds	r3, r7, #7
   1fa58:	22ff      	movs	r2, #255	; 0xff
   1fa5a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1fa5c:	1df9      	adds	r1, r7, #7
   1fa5e:	4b14      	ldr	r3, [pc, #80]	; (1fab0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1fa60:	2201      	movs	r2, #1
   1fa62:	0018      	movs	r0, r3
   1fa64:	4b13      	ldr	r3, [pc, #76]	; (1fab4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1fa66:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1fa68:	1dfb      	adds	r3, r7, #7
   1fa6a:	22fd      	movs	r2, #253	; 0xfd
   1fa6c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1fa6e:	1df9      	adds	r1, r7, #7
   1fa70:	4b0f      	ldr	r3, [pc, #60]	; (1fab0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1fa72:	2201      	movs	r2, #1
   1fa74:	0018      	movs	r0, r3
   1fa76:	4b0f      	ldr	r3, [pc, #60]	; (1fab4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1fa78:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1fa7a:	4b0f      	ldr	r3, [pc, #60]	; (1fab8 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1fa7c:	4798      	blx	r3
   1fa7e:	0003      	movs	r3, r0
   1fa80:	001a      	movs	r2, r3
   1fa82:	2301      	movs	r3, #1
   1fa84:	4053      	eors	r3, r2
   1fa86:	b2db      	uxtb	r3, r3
   1fa88:	2b00      	cmp	r3, #0
   1fa8a:	d004      	beq.n	1fa96 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1fa8c:	4b0b      	ldr	r3, [pc, #44]	; (1fabc <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1fa8e:	2205      	movs	r2, #5
   1fa90:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1fa92:	2300      	movs	r3, #0
   1fa94:	e000      	b.n	1fa98 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1fa96:	2301      	movs	r3, #1
}
   1fa98:	0018      	movs	r0, r3
   1fa9a:	46bd      	mov	sp, r7
   1fa9c:	b003      	add	sp, #12
   1fa9e:	bd90      	pop	{r4, r7, pc}
   1faa0:	2000411e 	.word	0x2000411e
   1faa4:	20004118 	.word	0x20004118
   1faa8:	2000411c 	.word	0x2000411c
   1faac:	00032a85 	.word	0x00032a85
   1fab0:	200040d0 	.word	0x200040d0
   1fab4:	0002828d 	.word	0x0002828d
   1fab8:	0001f825 	.word	0x0001f825
   1fabc:	20004113 	.word	0x20004113

0001fac0 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1fac0:	b580      	push	{r7, lr}
   1fac2:	b090      	sub	sp, #64	; 0x40
   1fac4:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fac6:	4b1f      	ldr	r3, [pc, #124]	; (1fb44 <sd_mmc_spi_init+0x84>)
   1fac8:	2200      	movs	r2, #0
   1faca:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1facc:	233c      	movs	r3, #60	; 0x3c
   1face:	18fb      	adds	r3, r7, r3
   1fad0:	0018      	movs	r0, r3
   1fad2:	4b1d      	ldr	r3, [pc, #116]	; (1fb48 <sd_mmc_spi_init+0x88>)
   1fad4:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1fad6:	1d3b      	adds	r3, r7, #4
   1fad8:	0018      	movs	r0, r3
   1fada:	4b1c      	ldr	r3, [pc, #112]	; (1fb4c <sd_mmc_spi_init+0x8c>)
   1fadc:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1fade:	1d3b      	adds	r3, r7, #4
   1fae0:	2280      	movs	r2, #128	; 0x80
   1fae2:	0252      	lsls	r2, r2, #9
   1fae4:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1fae6:	1d3b      	adds	r3, r7, #4
   1fae8:	4a19      	ldr	r2, [pc, #100]	; (1fb50 <sd_mmc_spi_init+0x90>)
   1faea:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1faec:	1d3b      	adds	r3, r7, #4
   1faee:	4a19      	ldr	r2, [pc, #100]	; (1fb54 <sd_mmc_spi_init+0x94>)
   1faf0:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1faf2:	1d3b      	adds	r3, r7, #4
   1faf4:	4a18      	ldr	r2, [pc, #96]	; (1fb58 <sd_mmc_spi_init+0x98>)
   1faf6:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1faf8:	1d3b      	adds	r3, r7, #4
   1fafa:	4a18      	ldr	r2, [pc, #96]	; (1fb5c <sd_mmc_spi_init+0x9c>)
   1fafc:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1fafe:	1d3b      	adds	r3, r7, #4
   1fb00:	2224      	movs	r2, #36	; 0x24
   1fb02:	2100      	movs	r1, #0
   1fb04:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1fb06:	1d3b      	adds	r3, r7, #4
   1fb08:	4a15      	ldr	r2, [pc, #84]	; (1fb60 <sd_mmc_spi_init+0xa0>)
   1fb0a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1fb0c:	1d3a      	adds	r2, r7, #4
   1fb0e:	4915      	ldr	r1, [pc, #84]	; (1fb64 <sd_mmc_spi_init+0xa4>)
   1fb10:	4b15      	ldr	r3, [pc, #84]	; (1fb68 <sd_mmc_spi_init+0xa8>)
   1fb12:	0018      	movs	r0, r3
   1fb14:	4b15      	ldr	r3, [pc, #84]	; (1fb6c <sd_mmc_spi_init+0xac>)
   1fb16:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1fb18:	4b13      	ldr	r3, [pc, #76]	; (1fb68 <sd_mmc_spi_init+0xa8>)
   1fb1a:	0018      	movs	r0, r3
   1fb1c:	4b14      	ldr	r3, [pc, #80]	; (1fb70 <sd_mmc_spi_init+0xb0>)
   1fb1e:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1fb20:	4b14      	ldr	r3, [pc, #80]	; (1fb74 <sd_mmc_spi_init+0xb4>)
   1fb22:	0018      	movs	r0, r3
   1fb24:	4b14      	ldr	r3, [pc, #80]	; (1fb78 <sd_mmc_spi_init+0xb8>)
   1fb26:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1fb28:	4b14      	ldr	r3, [pc, #80]	; (1fb7c <sd_mmc_spi_init+0xbc>)
   1fb2a:	781a      	ldrb	r2, [r3, #0]
   1fb2c:	4b11      	ldr	r3, [pc, #68]	; (1fb74 <sd_mmc_spi_init+0xb4>)
   1fb2e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1fb30:	4a10      	ldr	r2, [pc, #64]	; (1fb74 <sd_mmc_spi_init+0xb4>)
   1fb32:	4b13      	ldr	r3, [pc, #76]	; (1fb80 <sd_mmc_spi_init+0xc0>)
   1fb34:	0011      	movs	r1, r2
   1fb36:	0018      	movs	r0, r3
   1fb38:	4b12      	ldr	r3, [pc, #72]	; (1fb84 <sd_mmc_spi_init+0xc4>)
   1fb3a:	4798      	blx	r3
}
   1fb3c:	46c0      	nop			; (mov r8, r8)
   1fb3e:	46bd      	mov	sp, r7
   1fb40:	b010      	add	sp, #64	; 0x40
   1fb42:	bd80      	pop	{r7, pc}
   1fb44:	20004113 	.word	0x20004113
   1fb48:	0001f575 	.word	0x0001f575
   1fb4c:	0001f60d 	.word	0x0001f60d
   1fb50:	00100002 	.word	0x00100002
   1fb54:	00110002 	.word	0x00110002
   1fb58:	00120002 	.word	0x00120002
   1fb5c:	00130002 	.word	0x00130002
   1fb60:	00061a80 	.word	0x00061a80
   1fb64:	42000c00 	.word	0x42000c00
   1fb68:	200040d0 	.word	0x200040d0
   1fb6c:	00027ed9 	.word	0x00027ed9
   1fb70:	0001f719 	.word	0x0001f719
   1fb74:	20004110 	.word	0x20004110
   1fb78:	0001f691 	.word	0x0001f691
   1fb7c:	2000010c 	.word	0x2000010c
   1fb80:	2000410c 	.word	0x2000410c
   1fb84:	0001f6b5 	.word	0x0001f6b5

0001fb88 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1fb88:	b590      	push	{r4, r7, lr}
   1fb8a:	b083      	sub	sp, #12
   1fb8c:	af00      	add	r7, sp, #0
   1fb8e:	0004      	movs	r4, r0
   1fb90:	6039      	str	r1, [r7, #0]
   1fb92:	0010      	movs	r0, r2
   1fb94:	0019      	movs	r1, r3
   1fb96:	1dfb      	adds	r3, r7, #7
   1fb98:	1c22      	adds	r2, r4, #0
   1fb9a:	701a      	strb	r2, [r3, #0]
   1fb9c:	1dbb      	adds	r3, r7, #6
   1fb9e:	1c02      	adds	r2, r0, #0
   1fba0:	701a      	strb	r2, [r3, #0]
   1fba2:	1d7b      	adds	r3, r7, #5
   1fba4:	1c0a      	adds	r2, r1, #0
   1fba6:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fba8:	4b13      	ldr	r3, [pc, #76]	; (1fbf8 <sd_mmc_spi_select_device+0x70>)
   1fbaa:	2200      	movs	r2, #0
   1fbac:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1fbae:	683b      	ldr	r3, [r7, #0]
   1fbb0:	4a12      	ldr	r2, [pc, #72]	; (1fbfc <sd_mmc_spi_select_device+0x74>)
   1fbb2:	4293      	cmp	r3, r2
   1fbb4:	d907      	bls.n	1fbc6 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1fbb6:	4b11      	ldr	r3, [pc, #68]	; (1fbfc <sd_mmc_spi_select_device+0x74>)
   1fbb8:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1fbba:	e004      	b.n	1fbc6 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1fbbc:	683b      	ldr	r3, [r7, #0]
   1fbbe:	08db      	lsrs	r3, r3, #3
   1fbc0:	683a      	ldr	r2, [r7, #0]
   1fbc2:	1ad3      	subs	r3, r2, r3
   1fbc4:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1fbc6:	683a      	ldr	r2, [r7, #0]
   1fbc8:	4b0d      	ldr	r3, [pc, #52]	; (1fc00 <sd_mmc_spi_select_device+0x78>)
   1fbca:	0011      	movs	r1, r2
   1fbcc:	0018      	movs	r0, r3
   1fbce:	4b0d      	ldr	r3, [pc, #52]	; (1fc04 <sd_mmc_spi_select_device+0x7c>)
   1fbd0:	4798      	blx	r3
   1fbd2:	0003      	movs	r3, r0
   1fbd4:	2b17      	cmp	r3, #23
   1fbd6:	d0f1      	beq.n	1fbbc <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1fbd8:	1dfb      	adds	r3, r7, #7
   1fbda:	781a      	ldrb	r2, [r3, #0]
   1fbdc:	0013      	movs	r3, r2
   1fbde:	005b      	lsls	r3, r3, #1
   1fbe0:	189b      	adds	r3, r3, r2
   1fbe2:	4a09      	ldr	r2, [pc, #36]	; (1fc08 <sd_mmc_spi_select_device+0x80>)
   1fbe4:	1899      	adds	r1, r3, r2
   1fbe6:	4b06      	ldr	r3, [pc, #24]	; (1fc00 <sd_mmc_spi_select_device+0x78>)
   1fbe8:	2201      	movs	r2, #1
   1fbea:	0018      	movs	r0, r3
   1fbec:	4b07      	ldr	r3, [pc, #28]	; (1fc0c <sd_mmc_spi_select_device+0x84>)
   1fbee:	4798      	blx	r3
}
   1fbf0:	46c0      	nop			; (mov r8, r8)
   1fbf2:	46bd      	mov	sp, r7
   1fbf4:	b003      	add	sp, #12
   1fbf6:	bd90      	pop	{r4, r7, pc}
   1fbf8:	20004113 	.word	0x20004113
   1fbfc:	00989680 	.word	0x00989680
   1fc00:	200040d0 	.word	0x200040d0
   1fc04:	00027c01 	.word	0x00027c01
   1fc08:	2000410c 	.word	0x2000410c
   1fc0c:	0002819d 	.word	0x0002819d

0001fc10 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1fc10:	b580      	push	{r7, lr}
   1fc12:	b082      	sub	sp, #8
   1fc14:	af00      	add	r7, sp, #0
   1fc16:	0002      	movs	r2, r0
   1fc18:	1dfb      	adds	r3, r7, #7
   1fc1a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fc1c:	4b09      	ldr	r3, [pc, #36]	; (1fc44 <sd_mmc_spi_deselect_device+0x34>)
   1fc1e:	2200      	movs	r2, #0
   1fc20:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1fc22:	1dfb      	adds	r3, r7, #7
   1fc24:	781a      	ldrb	r2, [r3, #0]
   1fc26:	0013      	movs	r3, r2
   1fc28:	005b      	lsls	r3, r3, #1
   1fc2a:	189b      	adds	r3, r3, r2
   1fc2c:	4a06      	ldr	r2, [pc, #24]	; (1fc48 <sd_mmc_spi_deselect_device+0x38>)
   1fc2e:	1899      	adds	r1, r3, r2
   1fc30:	4b06      	ldr	r3, [pc, #24]	; (1fc4c <sd_mmc_spi_deselect_device+0x3c>)
   1fc32:	2200      	movs	r2, #0
   1fc34:	0018      	movs	r0, r3
   1fc36:	4b06      	ldr	r3, [pc, #24]	; (1fc50 <sd_mmc_spi_deselect_device+0x40>)
   1fc38:	4798      	blx	r3
}
   1fc3a:	46c0      	nop			; (mov r8, r8)
   1fc3c:	46bd      	mov	sp, r7
   1fc3e:	b002      	add	sp, #8
   1fc40:	bd80      	pop	{r7, pc}
   1fc42:	46c0      	nop			; (mov r8, r8)
   1fc44:	20004113 	.word	0x20004113
   1fc48:	2000410c 	.word	0x2000410c
   1fc4c:	200040d0 	.word	0x200040d0
   1fc50:	0002819d 	.word	0x0002819d

0001fc54 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1fc54:	b580      	push	{r7, lr}
   1fc56:	b082      	sub	sp, #8
   1fc58:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1fc5a:	1dbb      	adds	r3, r7, #6
   1fc5c:	22ff      	movs	r2, #255	; 0xff
   1fc5e:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fc60:	4b0c      	ldr	r3, [pc, #48]	; (1fc94 <sd_mmc_spi_send_clock+0x40>)
   1fc62:	2200      	movs	r2, #0
   1fc64:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1fc66:	1dfb      	adds	r3, r7, #7
   1fc68:	2200      	movs	r2, #0
   1fc6a:	701a      	strb	r2, [r3, #0]
   1fc6c:	e00a      	b.n	1fc84 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1fc6e:	1db9      	adds	r1, r7, #6
   1fc70:	4b09      	ldr	r3, [pc, #36]	; (1fc98 <sd_mmc_spi_send_clock+0x44>)
   1fc72:	2201      	movs	r2, #1
   1fc74:	0018      	movs	r0, r3
   1fc76:	4b09      	ldr	r3, [pc, #36]	; (1fc9c <sd_mmc_spi_send_clock+0x48>)
   1fc78:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1fc7a:	1dfb      	adds	r3, r7, #7
   1fc7c:	781a      	ldrb	r2, [r3, #0]
   1fc7e:	1dfb      	adds	r3, r7, #7
   1fc80:	3201      	adds	r2, #1
   1fc82:	701a      	strb	r2, [r3, #0]
   1fc84:	1dfb      	adds	r3, r7, #7
   1fc86:	781b      	ldrb	r3, [r3, #0]
   1fc88:	2b09      	cmp	r3, #9
   1fc8a:	d9f0      	bls.n	1fc6e <sd_mmc_spi_send_clock+0x1a>
	}
}
   1fc8c:	46c0      	nop			; (mov r8, r8)
   1fc8e:	46bd      	mov	sp, r7
   1fc90:	b002      	add	sp, #8
   1fc92:	bd80      	pop	{r7, pc}
   1fc94:	20004113 	.word	0x20004113
   1fc98:	200040d0 	.word	0x200040d0
   1fc9c:	0002828d 	.word	0x0002828d

0001fca0 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1fca0:	b590      	push	{r4, r7, lr}
   1fca2:	b085      	sub	sp, #20
   1fca4:	af02      	add	r7, sp, #8
   1fca6:	6078      	str	r0, [r7, #4]
   1fca8:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1fcaa:	6839      	ldr	r1, [r7, #0]
   1fcac:	6878      	ldr	r0, [r7, #4]
   1fcae:	2300      	movs	r3, #0
   1fcb0:	9300      	str	r3, [sp, #0]
   1fcb2:	2300      	movs	r3, #0
   1fcb4:	2200      	movs	r2, #0
   1fcb6:	4c03      	ldr	r4, [pc, #12]	; (1fcc4 <sd_mmc_spi_send_cmd+0x24>)
   1fcb8:	47a0      	blx	r4
   1fcba:	0003      	movs	r3, r0
}
   1fcbc:	0018      	movs	r0, r3
   1fcbe:	46bd      	mov	sp, r7
   1fcc0:	b003      	add	sp, #12
   1fcc2:	bd90      	pop	{r4, r7, pc}
   1fcc4:	0001fcc9 	.word	0x0001fcc9

0001fcc8 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1fcc8:	b590      	push	{r4, r7, lr}
   1fcca:	b089      	sub	sp, #36	; 0x24
   1fccc:	af00      	add	r7, sp, #0
   1fcce:	60f8      	str	r0, [r7, #12]
   1fcd0:	60b9      	str	r1, [r7, #8]
   1fcd2:	0019      	movs	r1, r3
   1fcd4:	1dbb      	adds	r3, r7, #6
   1fcd6:	801a      	strh	r2, [r3, #0]
   1fcd8:	1d3b      	adds	r3, r7, #4
   1fcda:	1c0a      	adds	r2, r1, #0
   1fcdc:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1fcde:	231b      	movs	r3, #27
   1fce0:	18fb      	adds	r3, r7, r3
   1fce2:	22ff      	movs	r2, #255	; 0xff
   1fce4:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1fce6:	231c      	movs	r3, #28
   1fce8:	18fb      	adds	r3, r7, r3
   1fcea:	22ff      	movs	r2, #255	; 0xff
   1fcec:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fcee:	4b72      	ldr	r3, [pc, #456]	; (1feb8 <sd_mmc_spi_adtc_start+0x1f0>)
   1fcf0:	2200      	movs	r2, #0
   1fcf2:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1fcf4:	68fb      	ldr	r3, [r7, #12]
   1fcf6:	b2db      	uxtb	r3, r3
   1fcf8:	223f      	movs	r2, #63	; 0x3f
   1fcfa:	4013      	ands	r3, r2
   1fcfc:	b2db      	uxtb	r3, r3
   1fcfe:	2240      	movs	r2, #64	; 0x40
   1fd00:	4313      	orrs	r3, r2
   1fd02:	b2da      	uxtb	r2, r3
   1fd04:	2314      	movs	r3, #20
   1fd06:	18fb      	adds	r3, r7, r3
   1fd08:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1fd0a:	68bb      	ldr	r3, [r7, #8]
   1fd0c:	0e1b      	lsrs	r3, r3, #24
   1fd0e:	b2da      	uxtb	r2, r3
   1fd10:	2314      	movs	r3, #20
   1fd12:	18fb      	adds	r3, r7, r3
   1fd14:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1fd16:	68bb      	ldr	r3, [r7, #8]
   1fd18:	0c1b      	lsrs	r3, r3, #16
   1fd1a:	b2da      	uxtb	r2, r3
   1fd1c:	2314      	movs	r3, #20
   1fd1e:	18fb      	adds	r3, r7, r3
   1fd20:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1fd22:	68bb      	ldr	r3, [r7, #8]
   1fd24:	0a1b      	lsrs	r3, r3, #8
   1fd26:	b2da      	uxtb	r2, r3
   1fd28:	2314      	movs	r3, #20
   1fd2a:	18fb      	adds	r3, r7, r3
   1fd2c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1fd2e:	68bb      	ldr	r3, [r7, #8]
   1fd30:	b2da      	uxtb	r2, r3
   1fd32:	2314      	movs	r3, #20
   1fd34:	18fb      	adds	r3, r7, r3
   1fd36:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1fd38:	2314      	movs	r3, #20
   1fd3a:	18fb      	adds	r3, r7, r3
   1fd3c:	2105      	movs	r1, #5
   1fd3e:	0018      	movs	r0, r3
   1fd40:	4b5e      	ldr	r3, [pc, #376]	; (1febc <sd_mmc_spi_adtc_start+0x1f4>)
   1fd42:	4798      	blx	r3
   1fd44:	0003      	movs	r3, r0
   1fd46:	001a      	movs	r2, r3
   1fd48:	2314      	movs	r3, #20
   1fd4a:	18fb      	adds	r3, r7, r3
   1fd4c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1fd4e:	231b      	movs	r3, #27
   1fd50:	18f9      	adds	r1, r7, r3
   1fd52:	4b5b      	ldr	r3, [pc, #364]	; (1fec0 <sd_mmc_spi_adtc_start+0x1f8>)
   1fd54:	2201      	movs	r2, #1
   1fd56:	0018      	movs	r0, r3
   1fd58:	4b5a      	ldr	r3, [pc, #360]	; (1fec4 <sd_mmc_spi_adtc_start+0x1fc>)
   1fd5a:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1fd5c:	2314      	movs	r3, #20
   1fd5e:	18f9      	adds	r1, r7, r3
   1fd60:	4b57      	ldr	r3, [pc, #348]	; (1fec0 <sd_mmc_spi_adtc_start+0x1f8>)
   1fd62:	2206      	movs	r2, #6
   1fd64:	0018      	movs	r0, r3
   1fd66:	4b57      	ldr	r3, [pc, #348]	; (1fec4 <sd_mmc_spi_adtc_start+0x1fc>)
   1fd68:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1fd6a:	2313      	movs	r3, #19
   1fd6c:	18fb      	adds	r3, r7, r3
   1fd6e:	22ff      	movs	r2, #255	; 0xff
   1fd70:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1fd72:	231c      	movs	r3, #28
   1fd74:	18fb      	adds	r3, r7, r3
   1fd76:	881b      	ldrh	r3, [r3, #0]
   1fd78:	2213      	movs	r2, #19
   1fd7a:	18b9      	adds	r1, r7, r2
   1fd7c:	4850      	ldr	r0, [pc, #320]	; (1fec0 <sd_mmc_spi_adtc_start+0x1f8>)
   1fd7e:	2201      	movs	r2, #1
   1fd80:	4c51      	ldr	r4, [pc, #324]	; (1fec8 <sd_mmc_spi_adtc_start+0x200>)
   1fd82:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1fd84:	231f      	movs	r3, #31
   1fd86:	18fb      	adds	r3, r7, r3
   1fd88:	2207      	movs	r2, #7
   1fd8a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1fd8c:	231c      	movs	r3, #28
   1fd8e:	18fb      	adds	r3, r7, r3
   1fd90:	881b      	ldrh	r3, [r3, #0]
   1fd92:	2213      	movs	r2, #19
   1fd94:	18b9      	adds	r1, r7, r2
   1fd96:	484a      	ldr	r0, [pc, #296]	; (1fec0 <sd_mmc_spi_adtc_start+0x1f8>)
   1fd98:	2201      	movs	r2, #1
   1fd9a:	4c4b      	ldr	r4, [pc, #300]	; (1fec8 <sd_mmc_spi_adtc_start+0x200>)
   1fd9c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1fd9e:	2313      	movs	r3, #19
   1fda0:	18fb      	adds	r3, r7, r3
   1fda2:	781b      	ldrb	r3, [r3, #0]
   1fda4:	b25b      	sxtb	r3, r3
   1fda6:	2b00      	cmp	r3, #0
   1fda8:	da10      	bge.n	1fdcc <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1fdaa:	231f      	movs	r3, #31
   1fdac:	18fb      	adds	r3, r7, r3
   1fdae:	221f      	movs	r2, #31
   1fdb0:	18ba      	adds	r2, r7, r2
   1fdb2:	7812      	ldrb	r2, [r2, #0]
   1fdb4:	3a01      	subs	r2, #1
   1fdb6:	701a      	strb	r2, [r3, #0]
   1fdb8:	231f      	movs	r3, #31
   1fdba:	18fb      	adds	r3, r7, r3
   1fdbc:	781b      	ldrb	r3, [r3, #0]
   1fdbe:	2b00      	cmp	r3, #0
   1fdc0:	d1e4      	bne.n	1fd8c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1fdc2:	4b3d      	ldr	r3, [pc, #244]	; (1feb8 <sd_mmc_spi_adtc_start+0x1f0>)
   1fdc4:	2202      	movs	r2, #2
   1fdc6:	701a      	strb	r2, [r3, #0]
			return false;
   1fdc8:	2300      	movs	r3, #0
   1fdca:	e070      	b.n	1feae <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1fdcc:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1fdce:	2313      	movs	r3, #19
   1fdd0:	18fb      	adds	r3, r7, r3
   1fdd2:	781b      	ldrb	r3, [r3, #0]
   1fdd4:	001a      	movs	r2, r3
   1fdd6:	4b3d      	ldr	r3, [pc, #244]	; (1fecc <sd_mmc_spi_adtc_start+0x204>)
   1fdd8:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1fdda:	2313      	movs	r3, #19
   1fddc:	18fb      	adds	r3, r7, r3
   1fdde:	781b      	ldrb	r3, [r3, #0]
   1fde0:	001a      	movs	r2, r3
   1fde2:	2308      	movs	r3, #8
   1fde4:	4013      	ands	r3, r2
   1fde6:	d004      	beq.n	1fdf2 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1fde8:	4b33      	ldr	r3, [pc, #204]	; (1feb8 <sd_mmc_spi_adtc_start+0x1f0>)
   1fdea:	2206      	movs	r2, #6
   1fdec:	701a      	strb	r2, [r3, #0]
		return false;
   1fdee:	2300      	movs	r3, #0
   1fdf0:	e05d      	b.n	1feae <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1fdf2:	2313      	movs	r3, #19
   1fdf4:	18fb      	adds	r3, r7, r3
   1fdf6:	781b      	ldrb	r3, [r3, #0]
   1fdf8:	001a      	movs	r2, r3
   1fdfa:	2304      	movs	r3, #4
   1fdfc:	4013      	ands	r3, r2
   1fdfe:	d004      	beq.n	1fe0a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1fe00:	4b2d      	ldr	r3, [pc, #180]	; (1feb8 <sd_mmc_spi_adtc_start+0x1f0>)
   1fe02:	2209      	movs	r2, #9
   1fe04:	701a      	strb	r2, [r3, #0]
		return false;
   1fe06:	2300      	movs	r3, #0
   1fe08:	e051      	b.n	1feae <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1fe0a:	2313      	movs	r3, #19
   1fe0c:	18fb      	adds	r3, r7, r3
   1fe0e:	781b      	ldrb	r3, [r3, #0]
   1fe10:	001a      	movs	r2, r3
   1fe12:	2301      	movs	r3, #1
   1fe14:	439a      	bics	r2, r3
   1fe16:	1e13      	subs	r3, r2, #0
   1fe18:	d004      	beq.n	1fe24 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1fe1a:	4b27      	ldr	r3, [pc, #156]	; (1feb8 <sd_mmc_spi_adtc_start+0x1f0>)
   1fe1c:	2201      	movs	r2, #1
   1fe1e:	701a      	strb	r2, [r3, #0]
		return false;
   1fe20:	2300      	movs	r3, #0
   1fe22:	e044      	b.n	1feae <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1fe24:	68fa      	ldr	r2, [r7, #12]
   1fe26:	2380      	movs	r3, #128	; 0x80
   1fe28:	019b      	lsls	r3, r3, #6
   1fe2a:	4013      	ands	r3, r2
   1fe2c:	d00d      	beq.n	1fe4a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1fe2e:	4b28      	ldr	r3, [pc, #160]	; (1fed0 <sd_mmc_spi_adtc_start+0x208>)
   1fe30:	4798      	blx	r3
   1fe32:	0003      	movs	r3, r0
   1fe34:	001a      	movs	r2, r3
   1fe36:	2301      	movs	r3, #1
   1fe38:	4053      	eors	r3, r2
   1fe3a:	b2db      	uxtb	r3, r3
   1fe3c:	2b00      	cmp	r3, #0
   1fe3e:	d004      	beq.n	1fe4a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1fe40:	4b1d      	ldr	r3, [pc, #116]	; (1feb8 <sd_mmc_spi_adtc_start+0x1f0>)
   1fe42:	2203      	movs	r2, #3
   1fe44:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1fe46:	2300      	movs	r3, #0
   1fe48:	e031      	b.n	1feae <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1fe4a:	68fa      	ldr	r2, [r7, #12]
   1fe4c:	2380      	movs	r3, #128	; 0x80
   1fe4e:	009b      	lsls	r3, r3, #2
   1fe50:	4013      	ands	r3, r2
   1fe52:	d00e      	beq.n	1fe72 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1fe54:	4b1d      	ldr	r3, [pc, #116]	; (1fecc <sd_mmc_spi_adtc_start+0x204>)
   1fe56:	2200      	movs	r2, #0
   1fe58:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1fe5a:	231c      	movs	r3, #28
   1fe5c:	18fb      	adds	r3, r7, r3
   1fe5e:	881b      	ldrh	r3, [r3, #0]
   1fe60:	491a      	ldr	r1, [pc, #104]	; (1fecc <sd_mmc_spi_adtc_start+0x204>)
   1fe62:	4817      	ldr	r0, [pc, #92]	; (1fec0 <sd_mmc_spi_adtc_start+0x1f8>)
   1fe64:	2201      	movs	r2, #1
   1fe66:	4c18      	ldr	r4, [pc, #96]	; (1fec8 <sd_mmc_spi_adtc_start+0x200>)
   1fe68:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1fe6a:	4b18      	ldr	r3, [pc, #96]	; (1fecc <sd_mmc_spi_adtc_start+0x204>)
   1fe6c:	681a      	ldr	r2, [r3, #0]
   1fe6e:	4b17      	ldr	r3, [pc, #92]	; (1fecc <sd_mmc_spi_adtc_start+0x204>)
   1fe70:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1fe72:	68fa      	ldr	r2, [r7, #12]
   1fe74:	2380      	movs	r3, #128	; 0x80
   1fe76:	00db      	lsls	r3, r3, #3
   1fe78:	4013      	ands	r3, r2
   1fe7a:	d00c      	beq.n	1fe96 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1fe7c:	231c      	movs	r3, #28
   1fe7e:	18fb      	adds	r3, r7, r3
   1fe80:	881b      	ldrh	r3, [r3, #0]
   1fe82:	4912      	ldr	r1, [pc, #72]	; (1fecc <sd_mmc_spi_adtc_start+0x204>)
   1fe84:	480e      	ldr	r0, [pc, #56]	; (1fec0 <sd_mmc_spi_adtc_start+0x1f8>)
   1fe86:	2204      	movs	r2, #4
   1fe88:	4c0f      	ldr	r4, [pc, #60]	; (1fec8 <sd_mmc_spi_adtc_start+0x200>)
   1fe8a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1fe8c:	4b0f      	ldr	r3, [pc, #60]	; (1fecc <sd_mmc_spi_adtc_start+0x204>)
   1fe8e:	681b      	ldr	r3, [r3, #0]
   1fe90:	ba1a      	rev	r2, r3
   1fe92:	4b0e      	ldr	r3, [pc, #56]	; (1fecc <sd_mmc_spi_adtc_start+0x204>)
   1fe94:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1fe96:	4b0f      	ldr	r3, [pc, #60]	; (1fed4 <sd_mmc_spi_adtc_start+0x20c>)
   1fe98:	1dba      	adds	r2, r7, #6
   1fe9a:	8812      	ldrh	r2, [r2, #0]
   1fe9c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1fe9e:	4b0e      	ldr	r3, [pc, #56]	; (1fed8 <sd_mmc_spi_adtc_start+0x210>)
   1fea0:	1d3a      	adds	r2, r7, #4
   1fea2:	8812      	ldrh	r2, [r2, #0]
   1fea4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1fea6:	4b0d      	ldr	r3, [pc, #52]	; (1fedc <sd_mmc_spi_adtc_start+0x214>)
   1fea8:	2200      	movs	r2, #0
   1feaa:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1feac:	2301      	movs	r3, #1
}
   1feae:	0018      	movs	r0, r3
   1feb0:	46bd      	mov	sp, r7
   1feb2:	b009      	add	sp, #36	; 0x24
   1feb4:	bd90      	pop	{r4, r7, pc}
   1feb6:	46c0      	nop			; (mov r8, r8)
   1feb8:	20004113 	.word	0x20004113
   1febc:	0001f769 	.word	0x0001f769
   1fec0:	200040d0 	.word	0x200040d0
   1fec4:	0002828d 	.word	0x0002828d
   1fec8:	00028069 	.word	0x00028069
   1fecc:	20004114 	.word	0x20004114
   1fed0:	0001f825 	.word	0x0001f825
   1fed4:	2000411c 	.word	0x2000411c
   1fed8:	2000411e 	.word	0x2000411e
   1fedc:	20004118 	.word	0x20004118

0001fee0 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1fee0:	b580      	push	{r7, lr}
   1fee2:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1fee4:	4b02      	ldr	r3, [pc, #8]	; (1fef0 <sd_mmc_spi_get_response+0x10>)
   1fee6:	681b      	ldr	r3, [r3, #0]
}
   1fee8:	0018      	movs	r0, r3
   1feea:	46bd      	mov	sp, r7
   1feec:	bd80      	pop	{r7, pc}
   1feee:	46c0      	nop			; (mov r8, r8)
   1fef0:	20004114 	.word	0x20004114

0001fef4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1fef4:	b590      	push	{r4, r7, lr}
   1fef6:	b085      	sub	sp, #20
   1fef8:	af00      	add	r7, sp, #0
   1fefa:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1fefc:	230e      	movs	r3, #14
   1fefe:	18fb      	adds	r3, r7, r3
   1ff00:	22ff      	movs	r2, #255	; 0xff
   1ff02:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ff04:	4b1c      	ldr	r3, [pc, #112]	; (1ff78 <sd_mmc_spi_read_word+0x84>)
   1ff06:	2200      	movs	r2, #0
   1ff08:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1ff0a:	4b1c      	ldr	r3, [pc, #112]	; (1ff7c <sd_mmc_spi_read_word+0x88>)
   1ff0c:	681a      	ldr	r2, [r3, #0]
   1ff0e:	4b1c      	ldr	r3, [pc, #112]	; (1ff80 <sd_mmc_spi_read_word+0x8c>)
   1ff10:	881b      	ldrh	r3, [r3, #0]
   1ff12:	0019      	movs	r1, r3
   1ff14:	4b1b      	ldr	r3, [pc, #108]	; (1ff84 <sd_mmc_spi_read_word+0x90>)
   1ff16:	0010      	movs	r0, r2
   1ff18:	4798      	blx	r3
   1ff1a:	1e0b      	subs	r3, r1, #0
   1ff1c:	d10a      	bne.n	1ff34 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1ff1e:	4b1a      	ldr	r3, [pc, #104]	; (1ff88 <sd_mmc_spi_read_word+0x94>)
   1ff20:	4798      	blx	r3
   1ff22:	0003      	movs	r3, r0
   1ff24:	001a      	movs	r2, r3
   1ff26:	2301      	movs	r3, #1
   1ff28:	4053      	eors	r3, r2
   1ff2a:	b2db      	uxtb	r3, r3
   1ff2c:	2b00      	cmp	r3, #0
   1ff2e:	d001      	beq.n	1ff34 <sd_mmc_spi_read_word+0x40>
			return false;
   1ff30:	2300      	movs	r3, #0
   1ff32:	e01d      	b.n	1ff70 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1ff34:	230e      	movs	r3, #14
   1ff36:	18fb      	adds	r3, r7, r3
   1ff38:	881b      	ldrh	r3, [r3, #0]
   1ff3a:	1d39      	adds	r1, r7, #4
   1ff3c:	4813      	ldr	r0, [pc, #76]	; (1ff8c <sd_mmc_spi_read_word+0x98>)
   1ff3e:	2204      	movs	r2, #4
   1ff40:	4c13      	ldr	r4, [pc, #76]	; (1ff90 <sd_mmc_spi_read_word+0x9c>)
   1ff42:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1ff44:	687b      	ldr	r3, [r7, #4]
   1ff46:	687a      	ldr	r2, [r7, #4]
   1ff48:	6812      	ldr	r2, [r2, #0]
   1ff4a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1ff4c:	4b0b      	ldr	r3, [pc, #44]	; (1ff7c <sd_mmc_spi_read_word+0x88>)
   1ff4e:	681b      	ldr	r3, [r3, #0]
   1ff50:	1d1a      	adds	r2, r3, #4
   1ff52:	4b0a      	ldr	r3, [pc, #40]	; (1ff7c <sd_mmc_spi_read_word+0x88>)
   1ff54:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1ff56:	4b09      	ldr	r3, [pc, #36]	; (1ff7c <sd_mmc_spi_read_word+0x88>)
   1ff58:	681a      	ldr	r2, [r3, #0]
   1ff5a:	4b09      	ldr	r3, [pc, #36]	; (1ff80 <sd_mmc_spi_read_word+0x8c>)
   1ff5c:	881b      	ldrh	r3, [r3, #0]
   1ff5e:	0019      	movs	r1, r3
   1ff60:	4b08      	ldr	r3, [pc, #32]	; (1ff84 <sd_mmc_spi_read_word+0x90>)
   1ff62:	0010      	movs	r0, r2
   1ff64:	4798      	blx	r3
   1ff66:	1e0b      	subs	r3, r1, #0
   1ff68:	d101      	bne.n	1ff6e <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1ff6a:	4b0a      	ldr	r3, [pc, #40]	; (1ff94 <sd_mmc_spi_read_word+0xa0>)
   1ff6c:	4798      	blx	r3
	}
	return true;
   1ff6e:	2301      	movs	r3, #1
}
   1ff70:	0018      	movs	r0, r3
   1ff72:	46bd      	mov	sp, r7
   1ff74:	b005      	add	sp, #20
   1ff76:	bd90      	pop	{r4, r7, pc}
   1ff78:	20004113 	.word	0x20004113
   1ff7c:	20004118 	.word	0x20004118
   1ff80:	2000411c 	.word	0x2000411c
   1ff84:	00032b91 	.word	0x00032b91
   1ff88:	0001f891 	.word	0x0001f891
   1ff8c:	200040d0 	.word	0x200040d0
   1ff90:	00028069 	.word	0x00028069
   1ff94:	0001f915 	.word	0x0001f915

0001ff98 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1ff98:	b590      	push	{r4, r7, lr}
   1ff9a:	b085      	sub	sp, #20
   1ff9c:	af00      	add	r7, sp, #0
   1ff9e:	6078      	str	r0, [r7, #4]
   1ffa0:	000a      	movs	r2, r1
   1ffa2:	1cbb      	adds	r3, r7, #2
   1ffa4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1ffa6:	230a      	movs	r3, #10
   1ffa8:	18fb      	adds	r3, r7, r3
   1ffaa:	22ff      	movs	r2, #255	; 0xff
   1ffac:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ffae:	4b1c      	ldr	r3, [pc, #112]	; (20020 <sd_mmc_spi_start_read_blocks+0x88>)
   1ffb0:	2200      	movs	r2, #0
   1ffb2:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1ffb4:	2300      	movs	r3, #0
   1ffb6:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1ffb8:	e025      	b.n	20006 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1ffba:	4b1a      	ldr	r3, [pc, #104]	; (20024 <sd_mmc_spi_start_read_blocks+0x8c>)
   1ffbc:	4798      	blx	r3
   1ffbe:	0003      	movs	r3, r0
   1ffc0:	001a      	movs	r2, r3
   1ffc2:	2301      	movs	r3, #1
   1ffc4:	4053      	eors	r3, r2
   1ffc6:	b2db      	uxtb	r3, r3
   1ffc8:	2b00      	cmp	r3, #0
   1ffca:	d001      	beq.n	1ffd0 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1ffcc:	2300      	movs	r3, #0
   1ffce:	e022      	b.n	20016 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1ffd0:	687a      	ldr	r2, [r7, #4]
   1ffd2:	68fb      	ldr	r3, [r7, #12]
   1ffd4:	18d1      	adds	r1, r2, r3
   1ffd6:	4b14      	ldr	r3, [pc, #80]	; (20028 <sd_mmc_spi_start_read_blocks+0x90>)
   1ffd8:	881a      	ldrh	r2, [r3, #0]
   1ffda:	230a      	movs	r3, #10
   1ffdc:	18fb      	adds	r3, r7, r3
   1ffde:	881b      	ldrh	r3, [r3, #0]
   1ffe0:	4812      	ldr	r0, [pc, #72]	; (2002c <sd_mmc_spi_start_read_blocks+0x94>)
   1ffe2:	4c13      	ldr	r4, [pc, #76]	; (20030 <sd_mmc_spi_start_read_blocks+0x98>)
   1ffe4:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1ffe6:	4b10      	ldr	r3, [pc, #64]	; (20028 <sd_mmc_spi_start_read_blocks+0x90>)
   1ffe8:	881b      	ldrh	r3, [r3, #0]
   1ffea:	001a      	movs	r2, r3
   1ffec:	68fb      	ldr	r3, [r7, #12]
   1ffee:	189b      	adds	r3, r3, r2
   1fff0:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1fff2:	4b0d      	ldr	r3, [pc, #52]	; (20028 <sd_mmc_spi_start_read_blocks+0x90>)
   1fff4:	881b      	ldrh	r3, [r3, #0]
   1fff6:	001a      	movs	r2, r3
   1fff8:	4b0e      	ldr	r3, [pc, #56]	; (20034 <sd_mmc_spi_start_read_blocks+0x9c>)
   1fffa:	681b      	ldr	r3, [r3, #0]
   1fffc:	18d2      	adds	r2, r2, r3
   1fffe:	4b0d      	ldr	r3, [pc, #52]	; (20034 <sd_mmc_spi_start_read_blocks+0x9c>)
   20000:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   20002:	4b0d      	ldr	r3, [pc, #52]	; (20038 <sd_mmc_spi_start_read_blocks+0xa0>)
   20004:	4798      	blx	r3
	while (nb_block--) {
   20006:	1cbb      	adds	r3, r7, #2
   20008:	881b      	ldrh	r3, [r3, #0]
   2000a:	1cba      	adds	r2, r7, #2
   2000c:	1e59      	subs	r1, r3, #1
   2000e:	8011      	strh	r1, [r2, #0]
   20010:	2b00      	cmp	r3, #0
   20012:	d1d2      	bne.n	1ffba <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   20014:	2301      	movs	r3, #1
}
   20016:	0018      	movs	r0, r3
   20018:	46bd      	mov	sp, r7
   2001a:	b005      	add	sp, #20
   2001c:	bd90      	pop	{r4, r7, pc}
   2001e:	46c0      	nop			; (mov r8, r8)
   20020:	20004113 	.word	0x20004113
   20024:	0001f891 	.word	0x0001f891
   20028:	2000411c 	.word	0x2000411c
   2002c:	200040d0 	.word	0x200040d0
   20030:	00028069 	.word	0x00028069
   20034:	20004118 	.word	0x20004118
   20038:	0001f915 	.word	0x0001f915

0002003c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   2003c:	b580      	push	{r7, lr}
   2003e:	af00      	add	r7, sp, #0
	return true;
   20040:	2301      	movs	r3, #1
}
   20042:	0018      	movs	r0, r3
   20044:	46bd      	mov	sp, r7
   20046:	bd80      	pop	{r7, pc}

00020048 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   20048:	b580      	push	{r7, lr}
   2004a:	b084      	sub	sp, #16
   2004c:	af00      	add	r7, sp, #0
   2004e:	6078      	str	r0, [r7, #4]
   20050:	000a      	movs	r2, r1
   20052:	1cbb      	adds	r3, r7, #2
   20054:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20056:	4b24      	ldr	r3, [pc, #144]	; (200e8 <sd_mmc_spi_start_write_blocks+0xa0>)
   20058:	2200      	movs	r2, #0
   2005a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   2005c:	2300      	movs	r3, #0
   2005e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20060:	e035      	b.n	200ce <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   20062:	4b22      	ldr	r3, [pc, #136]	; (200ec <sd_mmc_spi_start_write_blocks+0xa4>)
   20064:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   20066:	687a      	ldr	r2, [r7, #4]
   20068:	68fb      	ldr	r3, [r7, #12]
   2006a:	18d1      	adds	r1, r2, r3
   2006c:	4b20      	ldr	r3, [pc, #128]	; (200f0 <sd_mmc_spi_start_write_blocks+0xa8>)
   2006e:	881a      	ldrh	r2, [r3, #0]
   20070:	4b20      	ldr	r3, [pc, #128]	; (200f4 <sd_mmc_spi_start_write_blocks+0xac>)
   20072:	0018      	movs	r0, r3
   20074:	4b20      	ldr	r3, [pc, #128]	; (200f8 <sd_mmc_spi_start_write_blocks+0xb0>)
   20076:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   20078:	4b1d      	ldr	r3, [pc, #116]	; (200f0 <sd_mmc_spi_start_write_blocks+0xa8>)
   2007a:	881b      	ldrh	r3, [r3, #0]
   2007c:	001a      	movs	r2, r3
   2007e:	68fb      	ldr	r3, [r7, #12]
   20080:	189b      	adds	r3, r3, r2
   20082:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20084:	4b1a      	ldr	r3, [pc, #104]	; (200f0 <sd_mmc_spi_start_write_blocks+0xa8>)
   20086:	881b      	ldrh	r3, [r3, #0]
   20088:	001a      	movs	r2, r3
   2008a:	4b1c      	ldr	r3, [pc, #112]	; (200fc <sd_mmc_spi_start_write_blocks+0xb4>)
   2008c:	681b      	ldr	r3, [r3, #0]
   2008e:	18d2      	adds	r2, r2, r3
   20090:	4b1a      	ldr	r3, [pc, #104]	; (200fc <sd_mmc_spi_start_write_blocks+0xb4>)
   20092:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   20094:	4b1a      	ldr	r3, [pc, #104]	; (20100 <sd_mmc_spi_start_write_blocks+0xb8>)
   20096:	4798      	blx	r3
   20098:	0003      	movs	r3, r0
   2009a:	001a      	movs	r2, r3
   2009c:	2301      	movs	r3, #1
   2009e:	4053      	eors	r3, r2
   200a0:	b2db      	uxtb	r3, r3
   200a2:	2b00      	cmp	r3, #0
   200a4:	d001      	beq.n	200aa <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   200a6:	2300      	movs	r3, #0
   200a8:	e019      	b.n	200de <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   200aa:	1cbb      	adds	r3, r7, #2
   200ac:	881b      	ldrh	r3, [r3, #0]
   200ae:	2b00      	cmp	r3, #0
   200b0:	d00d      	beq.n	200ce <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   200b2:	4b14      	ldr	r3, [pc, #80]	; (20104 <sd_mmc_spi_start_write_blocks+0xbc>)
   200b4:	4798      	blx	r3
   200b6:	0003      	movs	r3, r0
   200b8:	001a      	movs	r2, r3
   200ba:	2301      	movs	r3, #1
   200bc:	4053      	eors	r3, r2
   200be:	b2db      	uxtb	r3, r3
   200c0:	2b00      	cmp	r3, #0
   200c2:	d004      	beq.n	200ce <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   200c4:	4b08      	ldr	r3, [pc, #32]	; (200e8 <sd_mmc_spi_start_write_blocks+0xa0>)
   200c6:	2205      	movs	r2, #5
   200c8:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   200ca:	2300      	movs	r3, #0
   200cc:	e007      	b.n	200de <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   200ce:	1cbb      	adds	r3, r7, #2
   200d0:	881b      	ldrh	r3, [r3, #0]
   200d2:	1cba      	adds	r2, r7, #2
   200d4:	1e59      	subs	r1, r3, #1
   200d6:	8011      	strh	r1, [r2, #0]
   200d8:	2b00      	cmp	r3, #0
   200da:	d1c2      	bne.n	20062 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   200dc:	2301      	movs	r3, #1
}
   200de:	0018      	movs	r0, r3
   200e0:	46bd      	mov	sp, r7
   200e2:	b004      	add	sp, #16
   200e4:	bd80      	pop	{r7, pc}
   200e6:	46c0      	nop			; (mov r8, r8)
   200e8:	20004113 	.word	0x20004113
   200ec:	0001f941 	.word	0x0001f941
   200f0:	2000411c 	.word	0x2000411c
   200f4:	200040d0 	.word	0x200040d0
   200f8:	0002828d 	.word	0x0002828d
   200fc:	20004118 	.word	0x20004118
   20100:	0001f991 	.word	0x0001f991
   20104:	0001f825 	.word	0x0001f825

00020108 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   20108:	b580      	push	{r7, lr}
   2010a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   2010c:	4b09      	ldr	r3, [pc, #36]	; (20134 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   2010e:	4798      	blx	r3
   20110:	0003      	movs	r3, r0
   20112:	001a      	movs	r2, r3
   20114:	2301      	movs	r3, #1
   20116:	4053      	eors	r3, r2
   20118:	b2db      	uxtb	r3, r3
   2011a:	2b00      	cmp	r3, #0
   2011c:	d004      	beq.n	20128 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   2011e:	4b06      	ldr	r3, [pc, #24]	; (20138 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   20120:	2205      	movs	r2, #5
   20122:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   20124:	2300      	movs	r3, #0
   20126:	e002      	b.n	2012e <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   20128:	4b04      	ldr	r3, [pc, #16]	; (2013c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   2012a:	4798      	blx	r3
   2012c:	0003      	movs	r3, r0
}
   2012e:	0018      	movs	r0, r3
   20130:	46bd      	mov	sp, r7
   20132:	bd80      	pop	{r7, pc}
   20134:	0001f825 	.word	0x0001f825
   20138:	20004113 	.word	0x20004113
   2013c:	0001fa25 	.word	0x0001fa25

00020140 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   20140:	b580      	push	{r7, lr}
   20142:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   20144:	2000      	movs	r0, #0
   20146:	4b0f      	ldr	r3, [pc, #60]	; (20184 <delay_init+0x44>)
   20148:	4798      	blx	r3
   2014a:	0002      	movs	r2, r0
   2014c:	4b0e      	ldr	r3, [pc, #56]	; (20188 <delay_init+0x48>)
   2014e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   20150:	4b0d      	ldr	r3, [pc, #52]	; (20188 <delay_init+0x48>)
   20152:	6818      	ldr	r0, [r3, #0]
   20154:	4b0d      	ldr	r3, [pc, #52]	; (2018c <delay_init+0x4c>)
   20156:	22fa      	movs	r2, #250	; 0xfa
   20158:	0091      	lsls	r1, r2, #2
   2015a:	4798      	blx	r3
   2015c:	0003      	movs	r3, r0
   2015e:	001a      	movs	r2, r3
   20160:	4b09      	ldr	r3, [pc, #36]	; (20188 <delay_init+0x48>)
   20162:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   20164:	4b08      	ldr	r3, [pc, #32]	; (20188 <delay_init+0x48>)
   20166:	6818      	ldr	r0, [r3, #0]
   20168:	4b08      	ldr	r3, [pc, #32]	; (2018c <delay_init+0x4c>)
   2016a:	22fa      	movs	r2, #250	; 0xfa
   2016c:	0091      	lsls	r1, r2, #2
   2016e:	4798      	blx	r3
   20170:	0003      	movs	r3, r0
   20172:	001a      	movs	r2, r3
   20174:	4b06      	ldr	r3, [pc, #24]	; (20190 <delay_init+0x50>)
   20176:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   20178:	4b06      	ldr	r3, [pc, #24]	; (20194 <delay_init+0x54>)
   2017a:	2205      	movs	r2, #5
   2017c:	601a      	str	r2, [r3, #0]
}
   2017e:	46c0      	nop			; (mov r8, r8)
   20180:	46bd      	mov	sp, r7
   20182:	bd80      	pop	{r7, pc}
   20184:	00029e11 	.word	0x00029e11
   20188:	20000110 	.word	0x20000110
   2018c:	00032a85 	.word	0x00032a85
   20190:	20000114 	.word	0x20000114
   20194:	e000e010 	.word	0xe000e010

00020198 <system_pinmux_get_group_from_gpio_pin>:
{
   20198:	b580      	push	{r7, lr}
   2019a:	b084      	sub	sp, #16
   2019c:	af00      	add	r7, sp, #0
   2019e:	0002      	movs	r2, r0
   201a0:	1dfb      	adds	r3, r7, #7
   201a2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   201a4:	230f      	movs	r3, #15
   201a6:	18fb      	adds	r3, r7, r3
   201a8:	1dfa      	adds	r2, r7, #7
   201aa:	7812      	ldrb	r2, [r2, #0]
   201ac:	09d2      	lsrs	r2, r2, #7
   201ae:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   201b0:	230e      	movs	r3, #14
   201b2:	18fb      	adds	r3, r7, r3
   201b4:	1dfa      	adds	r2, r7, #7
   201b6:	7812      	ldrb	r2, [r2, #0]
   201b8:	0952      	lsrs	r2, r2, #5
   201ba:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   201bc:	4b0d      	ldr	r3, [pc, #52]	; (201f4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   201be:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   201c0:	230f      	movs	r3, #15
   201c2:	18fb      	adds	r3, r7, r3
   201c4:	781b      	ldrb	r3, [r3, #0]
   201c6:	2b00      	cmp	r3, #0
   201c8:	d10f      	bne.n	201ea <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   201ca:	230f      	movs	r3, #15
   201cc:	18fb      	adds	r3, r7, r3
   201ce:	781b      	ldrb	r3, [r3, #0]
   201d0:	009b      	lsls	r3, r3, #2
   201d2:	2210      	movs	r2, #16
   201d4:	4694      	mov	ip, r2
   201d6:	44bc      	add	ip, r7
   201d8:	4463      	add	r3, ip
   201da:	3b08      	subs	r3, #8
   201dc:	681a      	ldr	r2, [r3, #0]
   201de:	230e      	movs	r3, #14
   201e0:	18fb      	adds	r3, r7, r3
   201e2:	781b      	ldrb	r3, [r3, #0]
   201e4:	01db      	lsls	r3, r3, #7
   201e6:	18d3      	adds	r3, r2, r3
   201e8:	e000      	b.n	201ec <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   201ea:	2300      	movs	r3, #0
}
   201ec:	0018      	movs	r0, r3
   201ee:	46bd      	mov	sp, r7
   201f0:	b004      	add	sp, #16
   201f2:	bd80      	pop	{r7, pc}
   201f4:	41004400 	.word	0x41004400

000201f8 <system_interrupt_enable_global>:
{
   201f8:	b580      	push	{r7, lr}
   201fa:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   201fc:	4b04      	ldr	r3, [pc, #16]	; (20210 <system_interrupt_enable_global+0x18>)
   201fe:	2201      	movs	r2, #1
   20200:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   20202:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   20206:	b662      	cpsie	i
}
   20208:	46c0      	nop			; (mov r8, r8)
   2020a:	46bd      	mov	sp, r7
   2020c:	bd80      	pop	{r7, pc}
   2020e:	46c0      	nop			; (mov r8, r8)
   20210:	2000011a 	.word	0x2000011a

00020214 <port_get_group_from_gpio_pin>:
{
   20214:	b580      	push	{r7, lr}
   20216:	b082      	sub	sp, #8
   20218:	af00      	add	r7, sp, #0
   2021a:	0002      	movs	r2, r0
   2021c:	1dfb      	adds	r3, r7, #7
   2021e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20220:	1dfb      	adds	r3, r7, #7
   20222:	781b      	ldrb	r3, [r3, #0]
   20224:	0018      	movs	r0, r3
   20226:	4b03      	ldr	r3, [pc, #12]	; (20234 <port_get_group_from_gpio_pin+0x20>)
   20228:	4798      	blx	r3
   2022a:	0003      	movs	r3, r0
}
   2022c:	0018      	movs	r0, r3
   2022e:	46bd      	mov	sp, r7
   20230:	b002      	add	sp, #8
   20232:	bd80      	pop	{r7, pc}
   20234:	00020199 	.word	0x00020199

00020238 <port_get_config_defaults>:
{
   20238:	b580      	push	{r7, lr}
   2023a:	b082      	sub	sp, #8
   2023c:	af00      	add	r7, sp, #0
   2023e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20240:	687b      	ldr	r3, [r7, #4]
   20242:	2200      	movs	r2, #0
   20244:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20246:	687b      	ldr	r3, [r7, #4]
   20248:	2201      	movs	r2, #1
   2024a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2024c:	687b      	ldr	r3, [r7, #4]
   2024e:	2200      	movs	r2, #0
   20250:	709a      	strb	r2, [r3, #2]
}
   20252:	46c0      	nop			; (mov r8, r8)
   20254:	46bd      	mov	sp, r7
   20256:	b002      	add	sp, #8
   20258:	bd80      	pop	{r7, pc}
	...

0002025c <port_pin_set_output_level>:
{
   2025c:	b580      	push	{r7, lr}
   2025e:	b084      	sub	sp, #16
   20260:	af00      	add	r7, sp, #0
   20262:	0002      	movs	r2, r0
   20264:	1dfb      	adds	r3, r7, #7
   20266:	701a      	strb	r2, [r3, #0]
   20268:	1dbb      	adds	r3, r7, #6
   2026a:	1c0a      	adds	r2, r1, #0
   2026c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2026e:	1dfb      	adds	r3, r7, #7
   20270:	781b      	ldrb	r3, [r3, #0]
   20272:	0018      	movs	r0, r3
   20274:	4b0d      	ldr	r3, [pc, #52]	; (202ac <port_pin_set_output_level+0x50>)
   20276:	4798      	blx	r3
   20278:	0003      	movs	r3, r0
   2027a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2027c:	1dfb      	adds	r3, r7, #7
   2027e:	781b      	ldrb	r3, [r3, #0]
   20280:	221f      	movs	r2, #31
   20282:	4013      	ands	r3, r2
   20284:	2201      	movs	r2, #1
   20286:	409a      	lsls	r2, r3
   20288:	0013      	movs	r3, r2
   2028a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2028c:	1dbb      	adds	r3, r7, #6
   2028e:	781b      	ldrb	r3, [r3, #0]
   20290:	2b00      	cmp	r3, #0
   20292:	d003      	beq.n	2029c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20294:	68fb      	ldr	r3, [r7, #12]
   20296:	68ba      	ldr	r2, [r7, #8]
   20298:	619a      	str	r2, [r3, #24]
}
   2029a:	e002      	b.n	202a2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2029c:	68fb      	ldr	r3, [r7, #12]
   2029e:	68ba      	ldr	r2, [r7, #8]
   202a0:	615a      	str	r2, [r3, #20]
}
   202a2:	46c0      	nop			; (mov r8, r8)
   202a4:	46bd      	mov	sp, r7
   202a6:	b004      	add	sp, #16
   202a8:	bd80      	pop	{r7, pc}
   202aa:	46c0      	nop			; (mov r8, r8)
   202ac:	00020215 	.word	0x00020215

000202b0 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   202b0:	b580      	push	{r7, lr}
   202b2:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   202b4:	4b04      	ldr	r3, [pc, #16]	; (202c8 <chip_isr+0x18>)
   202b6:	681b      	ldr	r3, [r3, #0]
   202b8:	2b00      	cmp	r3, #0
   202ba:	d002      	beq.n	202c2 <chip_isr+0x12>
		gpfIsr();
   202bc:	4b02      	ldr	r3, [pc, #8]	; (202c8 <chip_isr+0x18>)
   202be:	681b      	ldr	r3, [r3, #0]
   202c0:	4798      	blx	r3
	}
}
   202c2:	46c0      	nop			; (mov r8, r8)
   202c4:	46bd      	mov	sp, r7
   202c6:	bd80      	pop	{r7, pc}
   202c8:	20004120 	.word	0x20004120

000202cc <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   202cc:	b580      	push	{r7, lr}
   202ce:	b082      	sub	sp, #8
   202d0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   202d2:	1d3b      	adds	r3, r7, #4
   202d4:	0018      	movs	r0, r3
   202d6:	4b10      	ldr	r3, [pc, #64]	; (20318 <init_chip_pins+0x4c>)
   202d8:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   202da:	1d3b      	adds	r3, r7, #4
   202dc:	2201      	movs	r2, #1
   202de:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   202e0:	1d3b      	adds	r3, r7, #4
   202e2:	0019      	movs	r1, r3
   202e4:	201b      	movs	r0, #27
   202e6:	4b0d      	ldr	r3, [pc, #52]	; (2031c <init_chip_pins+0x50>)
   202e8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   202ea:	1d3b      	adds	r3, r7, #4
   202ec:	0019      	movs	r1, r3
   202ee:	201c      	movs	r0, #28
   202f0:	4b0a      	ldr	r3, [pc, #40]	; (2031c <init_chip_pins+0x50>)
   202f2:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   202f4:	1d3b      	adds	r3, r7, #4
   202f6:	0019      	movs	r1, r3
   202f8:	2028      	movs	r0, #40	; 0x28
   202fa:	4b08      	ldr	r3, [pc, #32]	; (2031c <init_chip_pins+0x50>)
   202fc:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   202fe:	2100      	movs	r1, #0
   20300:	201c      	movs	r0, #28
   20302:	4b07      	ldr	r3, [pc, #28]	; (20320 <init_chip_pins+0x54>)
   20304:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20306:	2100      	movs	r1, #0
   20308:	201b      	movs	r0, #27
   2030a:	4b05      	ldr	r3, [pc, #20]	; (20320 <init_chip_pins+0x54>)
   2030c:	4798      	blx	r3
}
   2030e:	46c0      	nop			; (mov r8, r8)
   20310:	46bd      	mov	sp, r7
   20312:	b002      	add	sp, #8
   20314:	bd80      	pop	{r7, pc}
   20316:	46c0      	nop			; (mov r8, r8)
   20318:	00020239 	.word	0x00020239
   2031c:	00026a59 	.word	0x00026a59
   20320:	0002025d 	.word	0x0002025d

00020324 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   20324:	b580      	push	{r7, lr}
   20326:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   20328:	4b0b      	ldr	r3, [pc, #44]	; (20358 <nm_bsp_init+0x34>)
   2032a:	2200      	movs	r2, #0
   2032c:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   2032e:	4b0b      	ldr	r3, [pc, #44]	; (2035c <nm_bsp_init+0x38>)
   20330:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   20332:	4b0b      	ldr	r3, [pc, #44]	; (20360 <nm_bsp_init+0x3c>)
   20334:	681b      	ldr	r3, [r3, #0]
   20336:	2201      	movs	r2, #1
   20338:	4013      	ands	r3, r2
   2033a:	d004      	beq.n	20346 <nm_bsp_init+0x22>
   2033c:	4b08      	ldr	r3, [pc, #32]	; (20360 <nm_bsp_init+0x3c>)
   2033e:	681b      	ldr	r3, [r3, #0]
   20340:	2202      	movs	r2, #2
   20342:	4013      	ands	r3, r2
   20344:	d101      	bne.n	2034a <nm_bsp_init+0x26>
	    delay_init();
   20346:	4b07      	ldr	r3, [pc, #28]	; (20364 <nm_bsp_init+0x40>)
   20348:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   2034a:	4b07      	ldr	r3, [pc, #28]	; (20368 <nm_bsp_init+0x44>)
   2034c:	4798      	blx	r3

	return M2M_SUCCESS;
   2034e:	2300      	movs	r3, #0
}
   20350:	0018      	movs	r0, r3
   20352:	46bd      	mov	sp, r7
   20354:	bd80      	pop	{r7, pc}
   20356:	46c0      	nop			; (mov r8, r8)
   20358:	20004120 	.word	0x20004120
   2035c:	000202cd 	.word	0x000202cd
   20360:	e000e010 	.word	0xe000e010
   20364:	00020141 	.word	0x00020141
   20368:	000201f9 	.word	0x000201f9

0002036c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   2036c:	b580      	push	{r7, lr}
   2036e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20370:	2100      	movs	r1, #0
   20372:	201c      	movs	r0, #28
   20374:	4b0b      	ldr	r3, [pc, #44]	; (203a4 <nm_bsp_reset+0x38>)
   20376:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20378:	2100      	movs	r1, #0
   2037a:	201b      	movs	r0, #27
   2037c:	4b09      	ldr	r3, [pc, #36]	; (203a4 <nm_bsp_reset+0x38>)
   2037e:	4798      	blx	r3
	nm_bsp_sleep(1);
   20380:	2001      	movs	r0, #1
   20382:	4b09      	ldr	r3, [pc, #36]	; (203a8 <nm_bsp_reset+0x3c>)
   20384:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   20386:	2101      	movs	r1, #1
   20388:	201c      	movs	r0, #28
   2038a:	4b06      	ldr	r3, [pc, #24]	; (203a4 <nm_bsp_reset+0x38>)
   2038c:	4798      	blx	r3
	nm_bsp_sleep(10);
   2038e:	200a      	movs	r0, #10
   20390:	4b05      	ldr	r3, [pc, #20]	; (203a8 <nm_bsp_reset+0x3c>)
   20392:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   20394:	2101      	movs	r1, #1
   20396:	201b      	movs	r0, #27
   20398:	4b02      	ldr	r3, [pc, #8]	; (203a4 <nm_bsp_reset+0x38>)
   2039a:	4798      	blx	r3
}
   2039c:	46c0      	nop			; (mov r8, r8)
   2039e:	46bd      	mov	sp, r7
   203a0:	bd80      	pop	{r7, pc}
   203a2:	46c0      	nop			; (mov r8, r8)
   203a4:	0002025d 	.word	0x0002025d
   203a8:	000203ad 	.word	0x000203ad

000203ac <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   203ac:	b580      	push	{r7, lr}
   203ae:	b082      	sub	sp, #8
   203b0:	af00      	add	r7, sp, #0
   203b2:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   203b4:	687b      	ldr	r3, [r7, #4]
   203b6:	0018      	movs	r0, r3
   203b8:	4b02      	ldr	r3, [pc, #8]	; (203c4 <nm_bsp_sleep+0x18>)
   203ba:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   203bc:	46c0      	nop			; (mov r8, r8)
   203be:	46bd      	mov	sp, r7
   203c0:	b002      	add	sp, #8
   203c2:	bd80      	pop	{r7, pc}
   203c4:	0001c1c1 	.word	0x0001c1c1

000203c8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   203c8:	b580      	push	{r7, lr}
   203ca:	b086      	sub	sp, #24
   203cc:	af00      	add	r7, sp, #0
   203ce:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   203d0:	4b15      	ldr	r3, [pc, #84]	; (20428 <nm_bsp_register_isr+0x60>)
   203d2:	687a      	ldr	r2, [r7, #4]
   203d4:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   203d6:	230c      	movs	r3, #12
   203d8:	18fb      	adds	r3, r7, r3
   203da:	0018      	movs	r0, r3
   203dc:	4b13      	ldr	r3, [pc, #76]	; (2042c <nm_bsp_register_isr+0x64>)
   203de:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   203e0:	230c      	movs	r3, #12
   203e2:	18fb      	adds	r3, r7, r3
   203e4:	2229      	movs	r2, #41	; 0x29
   203e6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   203e8:	230c      	movs	r3, #12
   203ea:	18fb      	adds	r3, r7, r3
   203ec:	2200      	movs	r2, #0
   203ee:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   203f0:	230c      	movs	r3, #12
   203f2:	18fb      	adds	r3, r7, r3
   203f4:	2201      	movs	r2, #1
   203f6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   203f8:	230c      	movs	r3, #12
   203fa:	18fb      	adds	r3, r7, r3
   203fc:	2202      	movs	r2, #2
   203fe:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   20400:	230c      	movs	r3, #12
   20402:	18fb      	adds	r3, r7, r3
   20404:	0019      	movs	r1, r3
   20406:	2009      	movs	r0, #9
   20408:	4b09      	ldr	r3, [pc, #36]	; (20430 <nm_bsp_register_isr+0x68>)
   2040a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   2040c:	4b09      	ldr	r3, [pc, #36]	; (20434 <nm_bsp_register_isr+0x6c>)
   2040e:	2200      	movs	r2, #0
   20410:	2109      	movs	r1, #9
   20412:	0018      	movs	r0, r3
   20414:	4b08      	ldr	r3, [pc, #32]	; (20438 <nm_bsp_register_isr+0x70>)
   20416:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20418:	2100      	movs	r1, #0
   2041a:	2009      	movs	r0, #9
   2041c:	4b07      	ldr	r3, [pc, #28]	; (2043c <nm_bsp_register_isr+0x74>)
   2041e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   20420:	46c0      	nop			; (mov r8, r8)
   20422:	46bd      	mov	sp, r7
   20424:	b006      	add	sp, #24
   20426:	bd80      	pop	{r7, pc}
   20428:	20004120 	.word	0x20004120
   2042c:	00026901 	.word	0x00026901
   20430:	00026935 	.word	0x00026935
   20434:	000202b1 	.word	0x000202b1
   20438:	00026501 	.word	0x00026501
   2043c:	00026565 	.word	0x00026565

00020440 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   20440:	b580      	push	{r7, lr}
   20442:	b082      	sub	sp, #8
   20444:	af00      	add	r7, sp, #0
   20446:	0002      	movs	r2, r0
   20448:	1dfb      	adds	r3, r7, #7
   2044a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   2044c:	1dfb      	adds	r3, r7, #7
   2044e:	781b      	ldrb	r3, [r3, #0]
   20450:	2b00      	cmp	r3, #0
   20452:	d004      	beq.n	2045e <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20454:	2100      	movs	r1, #0
   20456:	2009      	movs	r0, #9
   20458:	4b05      	ldr	r3, [pc, #20]	; (20470 <nm_bsp_interrupt_ctrl+0x30>)
   2045a:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   2045c:	e003      	b.n	20466 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   2045e:	2100      	movs	r1, #0
   20460:	2009      	movs	r0, #9
   20462:	4b04      	ldr	r3, [pc, #16]	; (20474 <nm_bsp_interrupt_ctrl+0x34>)
   20464:	4798      	blx	r3
}
   20466:	46c0      	nop			; (mov r8, r8)
   20468:	46bd      	mov	sp, r7
   2046a:	b002      	add	sp, #8
   2046c:	bd80      	pop	{r7, pc}
   2046e:	46c0      	nop			; (mov r8, r8)
   20470:	00026565 	.word	0x00026565
   20474:	000265ad 	.word	0x000265ad

00020478 <system_pinmux_get_group_from_gpio_pin>:
{
   20478:	b580      	push	{r7, lr}
   2047a:	b084      	sub	sp, #16
   2047c:	af00      	add	r7, sp, #0
   2047e:	0002      	movs	r2, r0
   20480:	1dfb      	adds	r3, r7, #7
   20482:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20484:	230f      	movs	r3, #15
   20486:	18fb      	adds	r3, r7, r3
   20488:	1dfa      	adds	r2, r7, #7
   2048a:	7812      	ldrb	r2, [r2, #0]
   2048c:	09d2      	lsrs	r2, r2, #7
   2048e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20490:	230e      	movs	r3, #14
   20492:	18fb      	adds	r3, r7, r3
   20494:	1dfa      	adds	r2, r7, #7
   20496:	7812      	ldrb	r2, [r2, #0]
   20498:	0952      	lsrs	r2, r2, #5
   2049a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2049c:	4b0d      	ldr	r3, [pc, #52]	; (204d4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2049e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   204a0:	230f      	movs	r3, #15
   204a2:	18fb      	adds	r3, r7, r3
   204a4:	781b      	ldrb	r3, [r3, #0]
   204a6:	2b00      	cmp	r3, #0
   204a8:	d10f      	bne.n	204ca <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   204aa:	230f      	movs	r3, #15
   204ac:	18fb      	adds	r3, r7, r3
   204ae:	781b      	ldrb	r3, [r3, #0]
   204b0:	009b      	lsls	r3, r3, #2
   204b2:	2210      	movs	r2, #16
   204b4:	4694      	mov	ip, r2
   204b6:	44bc      	add	ip, r7
   204b8:	4463      	add	r3, ip
   204ba:	3b08      	subs	r3, #8
   204bc:	681a      	ldr	r2, [r3, #0]
   204be:	230e      	movs	r3, #14
   204c0:	18fb      	adds	r3, r7, r3
   204c2:	781b      	ldrb	r3, [r3, #0]
   204c4:	01db      	lsls	r3, r3, #7
   204c6:	18d3      	adds	r3, r2, r3
   204c8:	e000      	b.n	204cc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   204ca:	2300      	movs	r3, #0
}
   204cc:	0018      	movs	r0, r3
   204ce:	46bd      	mov	sp, r7
   204d0:	b004      	add	sp, #16
   204d2:	bd80      	pop	{r7, pc}
   204d4:	41004400 	.word	0x41004400

000204d8 <system_interrupt_enable>:
{
   204d8:	b580      	push	{r7, lr}
   204da:	b082      	sub	sp, #8
   204dc:	af00      	add	r7, sp, #0
   204de:	0002      	movs	r2, r0
   204e0:	1dfb      	adds	r3, r7, #7
   204e2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   204e4:	4b06      	ldr	r3, [pc, #24]	; (20500 <system_interrupt_enable+0x28>)
   204e6:	1dfa      	adds	r2, r7, #7
   204e8:	7812      	ldrb	r2, [r2, #0]
   204ea:	0011      	movs	r1, r2
   204ec:	221f      	movs	r2, #31
   204ee:	400a      	ands	r2, r1
   204f0:	2101      	movs	r1, #1
   204f2:	4091      	lsls	r1, r2
   204f4:	000a      	movs	r2, r1
   204f6:	601a      	str	r2, [r3, #0]
}
   204f8:	46c0      	nop			; (mov r8, r8)
   204fa:	46bd      	mov	sp, r7
   204fc:	b002      	add	sp, #8
   204fe:	bd80      	pop	{r7, pc}
   20500:	e000e100 	.word	0xe000e100

00020504 <system_interrupt_disable>:
{
   20504:	b580      	push	{r7, lr}
   20506:	b082      	sub	sp, #8
   20508:	af00      	add	r7, sp, #0
   2050a:	0002      	movs	r2, r0
   2050c:	1dfb      	adds	r3, r7, #7
   2050e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20510:	4a07      	ldr	r2, [pc, #28]	; (20530 <system_interrupt_disable+0x2c>)
   20512:	1dfb      	adds	r3, r7, #7
   20514:	781b      	ldrb	r3, [r3, #0]
   20516:	0019      	movs	r1, r3
   20518:	231f      	movs	r3, #31
   2051a:	400b      	ands	r3, r1
   2051c:	2101      	movs	r1, #1
   2051e:	4099      	lsls	r1, r3
   20520:	000b      	movs	r3, r1
   20522:	0019      	movs	r1, r3
   20524:	2380      	movs	r3, #128	; 0x80
   20526:	50d1      	str	r1, [r2, r3]
}
   20528:	46c0      	nop			; (mov r8, r8)
   2052a:	46bd      	mov	sp, r7
   2052c:	b002      	add	sp, #8
   2052e:	bd80      	pop	{r7, pc}
   20530:	e000e100 	.word	0xe000e100

00020534 <port_get_group_from_gpio_pin>:
{
   20534:	b580      	push	{r7, lr}
   20536:	b082      	sub	sp, #8
   20538:	af00      	add	r7, sp, #0
   2053a:	0002      	movs	r2, r0
   2053c:	1dfb      	adds	r3, r7, #7
   2053e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20540:	1dfb      	adds	r3, r7, #7
   20542:	781b      	ldrb	r3, [r3, #0]
   20544:	0018      	movs	r0, r3
   20546:	4b03      	ldr	r3, [pc, #12]	; (20554 <port_get_group_from_gpio_pin+0x20>)
   20548:	4798      	blx	r3
   2054a:	0003      	movs	r3, r0
}
   2054c:	0018      	movs	r0, r3
   2054e:	46bd      	mov	sp, r7
   20550:	b002      	add	sp, #8
   20552:	bd80      	pop	{r7, pc}
   20554:	00020479 	.word	0x00020479

00020558 <port_get_config_defaults>:
{
   20558:	b580      	push	{r7, lr}
   2055a:	b082      	sub	sp, #8
   2055c:	af00      	add	r7, sp, #0
   2055e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20560:	687b      	ldr	r3, [r7, #4]
   20562:	2200      	movs	r2, #0
   20564:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20566:	687b      	ldr	r3, [r7, #4]
   20568:	2201      	movs	r2, #1
   2056a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2056c:	687b      	ldr	r3, [r7, #4]
   2056e:	2200      	movs	r2, #0
   20570:	709a      	strb	r2, [r3, #2]
}
   20572:	46c0      	nop			; (mov r8, r8)
   20574:	46bd      	mov	sp, r7
   20576:	b002      	add	sp, #8
   20578:	bd80      	pop	{r7, pc}
	...

0002057c <port_pin_set_output_level>:
{
   2057c:	b580      	push	{r7, lr}
   2057e:	b084      	sub	sp, #16
   20580:	af00      	add	r7, sp, #0
   20582:	0002      	movs	r2, r0
   20584:	1dfb      	adds	r3, r7, #7
   20586:	701a      	strb	r2, [r3, #0]
   20588:	1dbb      	adds	r3, r7, #6
   2058a:	1c0a      	adds	r2, r1, #0
   2058c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2058e:	1dfb      	adds	r3, r7, #7
   20590:	781b      	ldrb	r3, [r3, #0]
   20592:	0018      	movs	r0, r3
   20594:	4b0d      	ldr	r3, [pc, #52]	; (205cc <port_pin_set_output_level+0x50>)
   20596:	4798      	blx	r3
   20598:	0003      	movs	r3, r0
   2059a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2059c:	1dfb      	adds	r3, r7, #7
   2059e:	781b      	ldrb	r3, [r3, #0]
   205a0:	221f      	movs	r2, #31
   205a2:	4013      	ands	r3, r2
   205a4:	2201      	movs	r2, #1
   205a6:	409a      	lsls	r2, r3
   205a8:	0013      	movs	r3, r2
   205aa:	60bb      	str	r3, [r7, #8]
	if (level) {
   205ac:	1dbb      	adds	r3, r7, #6
   205ae:	781b      	ldrb	r3, [r3, #0]
   205b0:	2b00      	cmp	r3, #0
   205b2:	d003      	beq.n	205bc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   205b4:	68fb      	ldr	r3, [r7, #12]
   205b6:	68ba      	ldr	r2, [r7, #8]
   205b8:	619a      	str	r2, [r3, #24]
}
   205ba:	e002      	b.n	205c2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   205bc:	68fb      	ldr	r3, [r7, #12]
   205be:	68ba      	ldr	r2, [r7, #8]
   205c0:	615a      	str	r2, [r3, #20]
}
   205c2:	46c0      	nop			; (mov r8, r8)
   205c4:	46bd      	mov	sp, r7
   205c6:	b004      	add	sp, #16
   205c8:	bd80      	pop	{r7, pc}
   205ca:	46c0      	nop			; (mov r8, r8)
   205cc:	00020535 	.word	0x00020535

000205d0 <spi_is_syncing>:
{
   205d0:	b580      	push	{r7, lr}
   205d2:	b084      	sub	sp, #16
   205d4:	af00      	add	r7, sp, #0
   205d6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   205d8:	687b      	ldr	r3, [r7, #4]
   205da:	681b      	ldr	r3, [r3, #0]
   205dc:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   205de:	68fb      	ldr	r3, [r7, #12]
   205e0:	69db      	ldr	r3, [r3, #28]
   205e2:	1e5a      	subs	r2, r3, #1
   205e4:	4193      	sbcs	r3, r2
   205e6:	b2db      	uxtb	r3, r3
}
   205e8:	0018      	movs	r0, r3
   205ea:	46bd      	mov	sp, r7
   205ec:	b004      	add	sp, #16
   205ee:	bd80      	pop	{r7, pc}

000205f0 <spi_get_config_defaults>:
{
   205f0:	b580      	push	{r7, lr}
   205f2:	b082      	sub	sp, #8
   205f4:	af00      	add	r7, sp, #0
   205f6:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   205f8:	687b      	ldr	r3, [r7, #4]
   205fa:	2201      	movs	r2, #1
   205fc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   205fe:	687b      	ldr	r3, [r7, #4]
   20600:	2200      	movs	r2, #0
   20602:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   20604:	687b      	ldr	r3, [r7, #4]
   20606:	2200      	movs	r2, #0
   20608:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   2060a:	687b      	ldr	r3, [r7, #4]
   2060c:	22c0      	movs	r2, #192	; 0xc0
   2060e:	0392      	lsls	r2, r2, #14
   20610:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   20612:	687b      	ldr	r3, [r7, #4]
   20614:	2200      	movs	r2, #0
   20616:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   20618:	687b      	ldr	r3, [r7, #4]
   2061a:	2200      	movs	r2, #0
   2061c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   2061e:	687b      	ldr	r3, [r7, #4]
   20620:	2201      	movs	r2, #1
   20622:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   20624:	687b      	ldr	r3, [r7, #4]
   20626:	2201      	movs	r2, #1
   20628:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   2062a:	687b      	ldr	r3, [r7, #4]
   2062c:	2200      	movs	r2, #0
   2062e:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   20630:	687b      	ldr	r3, [r7, #4]
   20632:	2224      	movs	r2, #36	; 0x24
   20634:	2100      	movs	r1, #0
   20636:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   20638:	687b      	ldr	r3, [r7, #4]
   2063a:	3318      	adds	r3, #24
   2063c:	220c      	movs	r2, #12
   2063e:	2100      	movs	r1, #0
   20640:	0018      	movs	r0, r3
   20642:	4b0a      	ldr	r3, [pc, #40]	; (2066c <spi_get_config_defaults+0x7c>)
   20644:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   20646:	687b      	ldr	r3, [r7, #4]
   20648:	4a09      	ldr	r2, [pc, #36]	; (20670 <spi_get_config_defaults+0x80>)
   2064a:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   2064c:	687b      	ldr	r3, [r7, #4]
   2064e:	2200      	movs	r2, #0
   20650:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   20652:	687b      	ldr	r3, [r7, #4]
   20654:	2200      	movs	r2, #0
   20656:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   20658:	687b      	ldr	r3, [r7, #4]
   2065a:	2200      	movs	r2, #0
   2065c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2065e:	687b      	ldr	r3, [r7, #4]
   20660:	2200      	movs	r2, #0
   20662:	635a      	str	r2, [r3, #52]	; 0x34
};
   20664:	46c0      	nop			; (mov r8, r8)
   20666:	46bd      	mov	sp, r7
   20668:	b002      	add	sp, #8
   2066a:	bd80      	pop	{r7, pc}
   2066c:	00034a5f 	.word	0x00034a5f
   20670:	000186a0 	.word	0x000186a0

00020674 <spi_slave_inst_get_config_defaults>:
{
   20674:	b580      	push	{r7, lr}
   20676:	b082      	sub	sp, #8
   20678:	af00      	add	r7, sp, #0
   2067a:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   2067c:	687b      	ldr	r3, [r7, #4]
   2067e:	220a      	movs	r2, #10
   20680:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   20682:	687b      	ldr	r3, [r7, #4]
   20684:	2200      	movs	r2, #0
   20686:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   20688:	687b      	ldr	r3, [r7, #4]
   2068a:	2200      	movs	r2, #0
   2068c:	709a      	strb	r2, [r3, #2]
}
   2068e:	46c0      	nop			; (mov r8, r8)
   20690:	46bd      	mov	sp, r7
   20692:	b002      	add	sp, #8
   20694:	bd80      	pop	{r7, pc}
	...

00020698 <spi_attach_slave>:
{
   20698:	b580      	push	{r7, lr}
   2069a:	b084      	sub	sp, #16
   2069c:	af00      	add	r7, sp, #0
   2069e:	6078      	str	r0, [r7, #4]
   206a0:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   206a2:	683b      	ldr	r3, [r7, #0]
   206a4:	781a      	ldrb	r2, [r3, #0]
   206a6:	687b      	ldr	r3, [r7, #4]
   206a8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   206aa:	683b      	ldr	r3, [r7, #0]
   206ac:	785a      	ldrb	r2, [r3, #1]
   206ae:	687b      	ldr	r3, [r7, #4]
   206b0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   206b2:	683b      	ldr	r3, [r7, #0]
   206b4:	789a      	ldrb	r2, [r3, #2]
   206b6:	687b      	ldr	r3, [r7, #4]
   206b8:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   206ba:	230c      	movs	r3, #12
   206bc:	18fb      	adds	r3, r7, r3
   206be:	0018      	movs	r0, r3
   206c0:	4b0b      	ldr	r3, [pc, #44]	; (206f0 <spi_attach_slave+0x58>)
   206c2:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   206c4:	230c      	movs	r3, #12
   206c6:	18fb      	adds	r3, r7, r3
   206c8:	2201      	movs	r2, #1
   206ca:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   206cc:	687b      	ldr	r3, [r7, #4]
   206ce:	781b      	ldrb	r3, [r3, #0]
   206d0:	220c      	movs	r2, #12
   206d2:	18ba      	adds	r2, r7, r2
   206d4:	0011      	movs	r1, r2
   206d6:	0018      	movs	r0, r3
   206d8:	4b06      	ldr	r3, [pc, #24]	; (206f4 <spi_attach_slave+0x5c>)
   206da:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   206dc:	687b      	ldr	r3, [r7, #4]
   206de:	781b      	ldrb	r3, [r3, #0]
   206e0:	2101      	movs	r1, #1
   206e2:	0018      	movs	r0, r3
   206e4:	4b04      	ldr	r3, [pc, #16]	; (206f8 <spi_attach_slave+0x60>)
   206e6:	4798      	blx	r3
}
   206e8:	46c0      	nop			; (mov r8, r8)
   206ea:	46bd      	mov	sp, r7
   206ec:	b004      	add	sp, #16
   206ee:	bd80      	pop	{r7, pc}
   206f0:	00020559 	.word	0x00020559
   206f4:	00026a59 	.word	0x00026a59
   206f8:	0002057d 	.word	0x0002057d

000206fc <spi_enable>:
{
   206fc:	b580      	push	{r7, lr}
   206fe:	b084      	sub	sp, #16
   20700:	af00      	add	r7, sp, #0
   20702:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   20704:	687b      	ldr	r3, [r7, #4]
   20706:	681b      	ldr	r3, [r3, #0]
   20708:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2070a:	687b      	ldr	r3, [r7, #4]
   2070c:	681b      	ldr	r3, [r3, #0]
   2070e:	0018      	movs	r0, r3
   20710:	4b0b      	ldr	r3, [pc, #44]	; (20740 <spi_enable+0x44>)
   20712:	4798      	blx	r3
   20714:	0003      	movs	r3, r0
   20716:	0018      	movs	r0, r3
   20718:	4b0a      	ldr	r3, [pc, #40]	; (20744 <spi_enable+0x48>)
   2071a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   2071c:	46c0      	nop			; (mov r8, r8)
   2071e:	687b      	ldr	r3, [r7, #4]
   20720:	0018      	movs	r0, r3
   20722:	4b09      	ldr	r3, [pc, #36]	; (20748 <spi_enable+0x4c>)
   20724:	4798      	blx	r3
   20726:	1e03      	subs	r3, r0, #0
   20728:	d1f9      	bne.n	2071e <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2072a:	68fb      	ldr	r3, [r7, #12]
   2072c:	681b      	ldr	r3, [r3, #0]
   2072e:	2202      	movs	r2, #2
   20730:	431a      	orrs	r2, r3
   20732:	68fb      	ldr	r3, [r7, #12]
   20734:	601a      	str	r2, [r3, #0]
}
   20736:	46c0      	nop			; (mov r8, r8)
   20738:	46bd      	mov	sp, r7
   2073a:	b004      	add	sp, #16
   2073c:	bd80      	pop	{r7, pc}
   2073e:	46c0      	nop			; (mov r8, r8)
   20740:	00027729 	.word	0x00027729
   20744:	000204d9 	.word	0x000204d9
   20748:	000205d1 	.word	0x000205d1

0002074c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   2074c:	b580      	push	{r7, lr}
   2074e:	b084      	sub	sp, #16
   20750:	af00      	add	r7, sp, #0
   20752:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20754:	687b      	ldr	r3, [r7, #4]
   20756:	681b      	ldr	r3, [r3, #0]
   20758:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2075a:	687b      	ldr	r3, [r7, #4]
   2075c:	681b      	ldr	r3, [r3, #0]
   2075e:	0018      	movs	r0, r3
   20760:	4b0e      	ldr	r3, [pc, #56]	; (2079c <spi_disable+0x50>)
   20762:	4798      	blx	r3
   20764:	0003      	movs	r3, r0
   20766:	0018      	movs	r0, r3
   20768:	4b0d      	ldr	r3, [pc, #52]	; (207a0 <spi_disable+0x54>)
   2076a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   2076c:	46c0      	nop			; (mov r8, r8)
   2076e:	687b      	ldr	r3, [r7, #4]
   20770:	0018      	movs	r0, r3
   20772:	4b0c      	ldr	r3, [pc, #48]	; (207a4 <spi_disable+0x58>)
   20774:	4798      	blx	r3
   20776:	1e03      	subs	r3, r0, #0
   20778:	d1f9      	bne.n	2076e <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2077a:	68fb      	ldr	r3, [r7, #12]
   2077c:	228f      	movs	r2, #143	; 0x8f
   2077e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   20780:	68fb      	ldr	r3, [r7, #12]
   20782:	228f      	movs	r2, #143	; 0x8f
   20784:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   20786:	68fb      	ldr	r3, [r7, #12]
   20788:	681b      	ldr	r3, [r3, #0]
   2078a:	2202      	movs	r2, #2
   2078c:	4393      	bics	r3, r2
   2078e:	001a      	movs	r2, r3
   20790:	68fb      	ldr	r3, [r7, #12]
   20792:	601a      	str	r2, [r3, #0]
}
   20794:	46c0      	nop			; (mov r8, r8)
   20796:	46bd      	mov	sp, r7
   20798:	b004      	add	sp, #16
   2079a:	bd80      	pop	{r7, pc}
   2079c:	00027729 	.word	0x00027729
   207a0:	00020505 	.word	0x00020505
   207a4:	000205d1 	.word	0x000205d1

000207a8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   207a8:	b580      	push	{r7, lr}
   207aa:	b084      	sub	sp, #16
   207ac:	af00      	add	r7, sp, #0
   207ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   207b0:	687b      	ldr	r3, [r7, #4]
   207b2:	681b      	ldr	r3, [r3, #0]
   207b4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   207b6:	68fb      	ldr	r3, [r7, #12]
   207b8:	7e1b      	ldrb	r3, [r3, #24]
   207ba:	b2db      	uxtb	r3, r3
   207bc:	001a      	movs	r2, r3
   207be:	2302      	movs	r3, #2
   207c0:	4013      	ands	r3, r2
   207c2:	1e5a      	subs	r2, r3, #1
   207c4:	4193      	sbcs	r3, r2
   207c6:	b2db      	uxtb	r3, r3
}
   207c8:	0018      	movs	r0, r3
   207ca:	46bd      	mov	sp, r7
   207cc:	b004      	add	sp, #16
   207ce:	bd80      	pop	{r7, pc}

000207d0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   207d0:	b580      	push	{r7, lr}
   207d2:	b084      	sub	sp, #16
   207d4:	af00      	add	r7, sp, #0
   207d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   207d8:	687b      	ldr	r3, [r7, #4]
   207da:	681b      	ldr	r3, [r3, #0]
   207dc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   207de:	68fb      	ldr	r3, [r7, #12]
   207e0:	7e1b      	ldrb	r3, [r3, #24]
   207e2:	b2db      	uxtb	r3, r3
   207e4:	001a      	movs	r2, r3
   207e6:	2301      	movs	r3, #1
   207e8:	4013      	ands	r3, r2
   207ea:	1e5a      	subs	r2, r3, #1
   207ec:	4193      	sbcs	r3, r2
   207ee:	b2db      	uxtb	r3, r3
}
   207f0:	0018      	movs	r0, r3
   207f2:	46bd      	mov	sp, r7
   207f4:	b004      	add	sp, #16
   207f6:	bd80      	pop	{r7, pc}

000207f8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   207f8:	b580      	push	{r7, lr}
   207fa:	b084      	sub	sp, #16
   207fc:	af00      	add	r7, sp, #0
   207fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20800:	687b      	ldr	r3, [r7, #4]
   20802:	681b      	ldr	r3, [r3, #0]
   20804:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   20806:	68fb      	ldr	r3, [r7, #12]
   20808:	7e1b      	ldrb	r3, [r3, #24]
   2080a:	b2db      	uxtb	r3, r3
   2080c:	001a      	movs	r2, r3
   2080e:	2304      	movs	r3, #4
   20810:	4013      	ands	r3, r2
   20812:	1e5a      	subs	r2, r3, #1
   20814:	4193      	sbcs	r3, r2
   20816:	b2db      	uxtb	r3, r3
}
   20818:	0018      	movs	r0, r3
   2081a:	46bd      	mov	sp, r7
   2081c:	b004      	add	sp, #16
   2081e:	bd80      	pop	{r7, pc}

00020820 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   20820:	b580      	push	{r7, lr}
   20822:	b084      	sub	sp, #16
   20824:	af00      	add	r7, sp, #0
   20826:	6078      	str	r0, [r7, #4]
   20828:	000a      	movs	r2, r1
   2082a:	1cbb      	adds	r3, r7, #2
   2082c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2082e:	687b      	ldr	r3, [r7, #4]
   20830:	681b      	ldr	r3, [r3, #0]
   20832:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   20834:	687b      	ldr	r3, [r7, #4]
   20836:	0018      	movs	r0, r3
   20838:	4b0a      	ldr	r3, [pc, #40]	; (20864 <spi_write+0x44>)
   2083a:	4798      	blx	r3
   2083c:	0003      	movs	r3, r0
   2083e:	001a      	movs	r2, r3
   20840:	2301      	movs	r3, #1
   20842:	4053      	eors	r3, r2
   20844:	b2db      	uxtb	r3, r3
   20846:	2b00      	cmp	r3, #0
   20848:	d001      	beq.n	2084e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   2084a:	2305      	movs	r3, #5
   2084c:	e006      	b.n	2085c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   2084e:	1cbb      	adds	r3, r7, #2
   20850:	881b      	ldrh	r3, [r3, #0]
   20852:	05db      	lsls	r3, r3, #23
   20854:	0dda      	lsrs	r2, r3, #23
   20856:	68fb      	ldr	r3, [r7, #12]
   20858:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   2085a:	2300      	movs	r3, #0
}
   2085c:	0018      	movs	r0, r3
   2085e:	46bd      	mov	sp, r7
   20860:	b004      	add	sp, #16
   20862:	bd80      	pop	{r7, pc}
   20864:	000207d1 	.word	0x000207d1

00020868 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   20868:	b580      	push	{r7, lr}
   2086a:	b084      	sub	sp, #16
   2086c:	af00      	add	r7, sp, #0
   2086e:	6078      	str	r0, [r7, #4]
   20870:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20872:	687b      	ldr	r3, [r7, #4]
   20874:	681b      	ldr	r3, [r3, #0]
   20876:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   20878:	687b      	ldr	r3, [r7, #4]
   2087a:	0018      	movs	r0, r3
   2087c:	4b1b      	ldr	r3, [pc, #108]	; (208ec <spi_read+0x84>)
   2087e:	4798      	blx	r3
   20880:	0003      	movs	r3, r0
   20882:	001a      	movs	r2, r3
   20884:	2301      	movs	r3, #1
   20886:	4053      	eors	r3, r2
   20888:	b2db      	uxtb	r3, r3
   2088a:	2b00      	cmp	r3, #0
   2088c:	d001      	beq.n	20892 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   2088e:	2310      	movs	r3, #16
   20890:	e027      	b.n	208e2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   20892:	230f      	movs	r3, #15
   20894:	18fb      	adds	r3, r7, r3
   20896:	2200      	movs	r2, #0
   20898:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2089a:	68bb      	ldr	r3, [r7, #8]
   2089c:	8b5b      	ldrh	r3, [r3, #26]
   2089e:	b29b      	uxth	r3, r3
   208a0:	001a      	movs	r2, r3
   208a2:	2304      	movs	r3, #4
   208a4:	4013      	ands	r3, r2
   208a6:	d006      	beq.n	208b6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   208a8:	230f      	movs	r3, #15
   208aa:	18fb      	adds	r3, r7, r3
   208ac:	221e      	movs	r2, #30
   208ae:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   208b0:	68bb      	ldr	r3, [r7, #8]
   208b2:	2204      	movs	r2, #4
   208b4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   208b6:	687b      	ldr	r3, [r7, #4]
   208b8:	799b      	ldrb	r3, [r3, #6]
   208ba:	2b01      	cmp	r3, #1
   208bc:	d108      	bne.n	208d0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   208be:	68bb      	ldr	r3, [r7, #8]
   208c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   208c2:	b29b      	uxth	r3, r3
   208c4:	05db      	lsls	r3, r3, #23
   208c6:	0ddb      	lsrs	r3, r3, #23
   208c8:	b29a      	uxth	r2, r3
   208ca:	683b      	ldr	r3, [r7, #0]
   208cc:	801a      	strh	r2, [r3, #0]
   208ce:	e005      	b.n	208dc <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   208d0:	68bb      	ldr	r3, [r7, #8]
   208d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   208d4:	b2db      	uxtb	r3, r3
   208d6:	b29a      	uxth	r2, r3
   208d8:	683b      	ldr	r3, [r7, #0]
   208da:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   208dc:	230f      	movs	r3, #15
   208de:	18fb      	adds	r3, r7, r3
   208e0:	781b      	ldrb	r3, [r3, #0]
}
   208e2:	0018      	movs	r0, r3
   208e4:	46bd      	mov	sp, r7
   208e6:	b004      	add	sp, #16
   208e8:	bd80      	pop	{r7, pc}
   208ea:	46c0      	nop			; (mov r8, r8)
   208ec:	000207f9 	.word	0x000207f9

000208f0 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   208f0:	b580      	push	{r7, lr}
   208f2:	b086      	sub	sp, #24
   208f4:	af00      	add	r7, sp, #0
   208f6:	60f8      	str	r0, [r7, #12]
   208f8:	60b9      	str	r1, [r7, #8]
   208fa:	1dbb      	adds	r3, r7, #6
   208fc:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   208fe:	2313      	movs	r3, #19
   20900:	18fb      	adds	r3, r7, r3
   20902:	22ff      	movs	r2, #255	; 0xff
   20904:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   20906:	2317      	movs	r3, #23
   20908:	18fb      	adds	r3, r7, r3
   2090a:	2200      	movs	r2, #0
   2090c:	701a      	strb	r2, [r3, #0]
   2090e:	2316      	movs	r3, #22
   20910:	18fb      	adds	r3, r7, r3
   20912:	2200      	movs	r2, #0
   20914:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   20916:	2314      	movs	r3, #20
   20918:	18fb      	adds	r3, r7, r3
   2091a:	2200      	movs	r2, #0
   2091c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   2091e:	2310      	movs	r3, #16
   20920:	18fb      	adds	r3, r7, r3
   20922:	2200      	movs	r2, #0
   20924:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   20926:	68bb      	ldr	r3, [r7, #8]
   20928:	2b00      	cmp	r3, #0
   2092a:	d102      	bne.n	20932 <spi_rw+0x42>
   2092c:	68fb      	ldr	r3, [r7, #12]
   2092e:	2b00      	cmp	r3, #0
   20930:	d003      	beq.n	2093a <spi_rw+0x4a>
   20932:	1dbb      	adds	r3, r7, #6
   20934:	881b      	ldrh	r3, [r3, #0]
   20936:	2b00      	cmp	r3, #0
   20938:	d102      	bne.n	20940 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   2093a:	230f      	movs	r3, #15
   2093c:	425b      	negs	r3, r3
   2093e:	e07e      	b.n	20a3e <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   20940:	68fb      	ldr	r3, [r7, #12]
   20942:	2b00      	cmp	r3, #0
   20944:	d106      	bne.n	20954 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   20946:	2313      	movs	r3, #19
   20948:	18fb      	adds	r3, r7, r3
   2094a:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   2094c:	2317      	movs	r3, #23
   2094e:	18fb      	adds	r3, r7, r3
   20950:	2201      	movs	r2, #1
   20952:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   20954:	68bb      	ldr	r3, [r7, #8]
   20956:	2b00      	cmp	r3, #0
   20958:	d106      	bne.n	20968 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   2095a:	2313      	movs	r3, #19
   2095c:	18fb      	adds	r3, r7, r3
   2095e:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   20960:	2316      	movs	r3, #22
   20962:	18fb      	adds	r3, r7, r3
   20964:	2201      	movs	r2, #1
   20966:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   20968:	4937      	ldr	r1, [pc, #220]	; (20a48 <spi_rw+0x158>)
   2096a:	4b38      	ldr	r3, [pc, #224]	; (20a4c <spi_rw+0x15c>)
   2096c:	2201      	movs	r2, #1
   2096e:	0018      	movs	r0, r3
   20970:	4b37      	ldr	r3, [pc, #220]	; (20a50 <spi_rw+0x160>)
   20972:	4798      	blx	r3

	while (u16Sz) {
   20974:	e04c      	b.n	20a10 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   20976:	68fb      	ldr	r3, [r7, #12]
   20978:	781a      	ldrb	r2, [r3, #0]
   2097a:	2314      	movs	r3, #20
   2097c:	18fb      	adds	r3, r7, r3
   2097e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   20980:	46c0      	nop			; (mov r8, r8)
   20982:	4b32      	ldr	r3, [pc, #200]	; (20a4c <spi_rw+0x15c>)
   20984:	0018      	movs	r0, r3
   20986:	4b33      	ldr	r3, [pc, #204]	; (20a54 <spi_rw+0x164>)
   20988:	4798      	blx	r3
   2098a:	0003      	movs	r3, r0
   2098c:	001a      	movs	r2, r3
   2098e:	2301      	movs	r3, #1
   20990:	4053      	eors	r3, r2
   20992:	b2db      	uxtb	r3, r3
   20994:	2b00      	cmp	r3, #0
   20996:	d1f4      	bne.n	20982 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   20998:	46c0      	nop			; (mov r8, r8)
   2099a:	2314      	movs	r3, #20
   2099c:	18fb      	adds	r3, r7, r3
   2099e:	881a      	ldrh	r2, [r3, #0]
   209a0:	4b2a      	ldr	r3, [pc, #168]	; (20a4c <spi_rw+0x15c>)
   209a2:	0011      	movs	r1, r2
   209a4:	0018      	movs	r0, r3
   209a6:	4b2c      	ldr	r3, [pc, #176]	; (20a58 <spi_rw+0x168>)
   209a8:	4798      	blx	r3
   209aa:	1e03      	subs	r3, r0, #0
   209ac:	d1f5      	bne.n	2099a <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   209ae:	46c0      	nop			; (mov r8, r8)
   209b0:	4b26      	ldr	r3, [pc, #152]	; (20a4c <spi_rw+0x15c>)
   209b2:	0018      	movs	r0, r3
   209b4:	4b29      	ldr	r3, [pc, #164]	; (20a5c <spi_rw+0x16c>)
   209b6:	4798      	blx	r3
   209b8:	0003      	movs	r3, r0
   209ba:	001a      	movs	r2, r3
   209bc:	2301      	movs	r3, #1
   209be:	4053      	eors	r3, r2
   209c0:	b2db      	uxtb	r3, r3
   209c2:	2b00      	cmp	r3, #0
   209c4:	d1f4      	bne.n	209b0 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   209c6:	46c0      	nop			; (mov r8, r8)
   209c8:	2310      	movs	r3, #16
   209ca:	18fa      	adds	r2, r7, r3
   209cc:	4b1f      	ldr	r3, [pc, #124]	; (20a4c <spi_rw+0x15c>)
   209ce:	0011      	movs	r1, r2
   209d0:	0018      	movs	r0, r3
   209d2:	4b23      	ldr	r3, [pc, #140]	; (20a60 <spi_rw+0x170>)
   209d4:	4798      	blx	r3
   209d6:	1e03      	subs	r3, r0, #0
   209d8:	d1f6      	bne.n	209c8 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   209da:	2310      	movs	r3, #16
   209dc:	18fb      	adds	r3, r7, r3
   209de:	881b      	ldrh	r3, [r3, #0]
   209e0:	b2da      	uxtb	r2, r3
   209e2:	68bb      	ldr	r3, [r7, #8]
   209e4:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   209e6:	1dbb      	adds	r3, r7, #6
   209e8:	881a      	ldrh	r2, [r3, #0]
   209ea:	1dbb      	adds	r3, r7, #6
   209ec:	3a01      	subs	r2, #1
   209ee:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   209f0:	2316      	movs	r3, #22
   209f2:	18fb      	adds	r3, r7, r3
   209f4:	781b      	ldrb	r3, [r3, #0]
   209f6:	2b00      	cmp	r3, #0
   209f8:	d102      	bne.n	20a00 <spi_rw+0x110>
			pu8Miso++;
   209fa:	68bb      	ldr	r3, [r7, #8]
   209fc:	3301      	adds	r3, #1
   209fe:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   20a00:	2317      	movs	r3, #23
   20a02:	18fb      	adds	r3, r7, r3
   20a04:	781b      	ldrb	r3, [r3, #0]
   20a06:	2b00      	cmp	r3, #0
   20a08:	d102      	bne.n	20a10 <spi_rw+0x120>
			pu8Mosi++;
   20a0a:	68fb      	ldr	r3, [r7, #12]
   20a0c:	3301      	adds	r3, #1
   20a0e:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   20a10:	1dbb      	adds	r3, r7, #6
   20a12:	881b      	ldrh	r3, [r3, #0]
   20a14:	2b00      	cmp	r3, #0
   20a16:	d1ae      	bne.n	20976 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   20a18:	46c0      	nop			; (mov r8, r8)
   20a1a:	4b0c      	ldr	r3, [pc, #48]	; (20a4c <spi_rw+0x15c>)
   20a1c:	0018      	movs	r0, r3
   20a1e:	4b11      	ldr	r3, [pc, #68]	; (20a64 <spi_rw+0x174>)
   20a20:	4798      	blx	r3
   20a22:	0003      	movs	r3, r0
   20a24:	001a      	movs	r2, r3
   20a26:	2301      	movs	r3, #1
   20a28:	4053      	eors	r3, r2
   20a2a:	b2db      	uxtb	r3, r3
   20a2c:	2b00      	cmp	r3, #0
   20a2e:	d1f4      	bne.n	20a1a <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   20a30:	4905      	ldr	r1, [pc, #20]	; (20a48 <spi_rw+0x158>)
   20a32:	4b06      	ldr	r3, [pc, #24]	; (20a4c <spi_rw+0x15c>)
   20a34:	2200      	movs	r2, #0
   20a36:	0018      	movs	r0, r3
   20a38:	4b05      	ldr	r3, [pc, #20]	; (20a50 <spi_rw+0x160>)
   20a3a:	4798      	blx	r3

	return M2M_SUCCESS;
   20a3c:	2300      	movs	r3, #0
}
   20a3e:	0018      	movs	r0, r3
   20a40:	46bd      	mov	sp, r7
   20a42:	b006      	add	sp, #24
   20a44:	bd80      	pop	{r7, pc}
   20a46:	46c0      	nop			; (mov r8, r8)
   20a48:	20005914 	.word	0x20005914
   20a4c:	20005918 	.word	0x20005918
   20a50:	0002819d 	.word	0x0002819d
   20a54:	000207d1 	.word	0x000207d1
   20a58:	00020821 	.word	0x00020821
   20a5c:	000207f9 	.word	0x000207f9
   20a60:	00020869 	.word	0x00020869
   20a64:	000207a9 	.word	0x000207a9

00020a68 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   20a68:	b580      	push	{r7, lr}
   20a6a:	b092      	sub	sp, #72	; 0x48
   20a6c:	af00      	add	r7, sp, #0
   20a6e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   20a70:	2347      	movs	r3, #71	; 0x47
   20a72:	18fb      	adds	r3, r7, r3
   20a74:	2200      	movs	r2, #0
   20a76:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   20a78:	2308      	movs	r3, #8
   20a7a:	18fb      	adds	r3, r7, r3
   20a7c:	0018      	movs	r0, r3
   20a7e:	4b26      	ldr	r3, [pc, #152]	; (20b18 <nm_bus_init+0xb0>)
   20a80:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   20a82:	2308      	movs	r3, #8
   20a84:	18fb      	adds	r3, r7, r3
   20a86:	220e      	movs	r2, #14
   20a88:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   20a8a:	2308      	movs	r3, #8
   20a8c:	18fa      	adds	r2, r7, r3
   20a8e:	4b23      	ldr	r3, [pc, #140]	; (20b1c <nm_bus_init+0xb4>)
   20a90:	0011      	movs	r1, r2
   20a92:	0018      	movs	r0, r3
   20a94:	4b22      	ldr	r3, [pc, #136]	; (20b20 <nm_bus_init+0xb8>)
   20a96:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   20a98:	230c      	movs	r3, #12
   20a9a:	18fb      	adds	r3, r7, r3
   20a9c:	0018      	movs	r0, r3
   20a9e:	4b21      	ldr	r3, [pc, #132]	; (20b24 <nm_bus_init+0xbc>)
   20aa0:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   20aa2:	230c      	movs	r3, #12
   20aa4:	18fb      	adds	r3, r7, r3
   20aa6:	22c0      	movs	r2, #192	; 0xc0
   20aa8:	0392      	lsls	r2, r2, #14
   20aaa:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   20aac:	230c      	movs	r3, #12
   20aae:	18fb      	adds	r3, r7, r3
   20ab0:	4a1d      	ldr	r2, [pc, #116]	; (20b28 <nm_bus_init+0xc0>)
   20ab2:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   20ab4:	230c      	movs	r3, #12
   20ab6:	18fb      	adds	r3, r7, r3
   20ab8:	4a1c      	ldr	r2, [pc, #112]	; (20b2c <nm_bus_init+0xc4>)
   20aba:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   20abc:	230c      	movs	r3, #12
   20abe:	18fb      	adds	r3, r7, r3
   20ac0:	2201      	movs	r2, #1
   20ac2:	4252      	negs	r2, r2
   20ac4:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   20ac6:	230c      	movs	r3, #12
   20ac8:	18fb      	adds	r3, r7, r3
   20aca:	4a19      	ldr	r2, [pc, #100]	; (20b30 <nm_bus_init+0xc8>)
   20acc:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   20ace:	230c      	movs	r3, #12
   20ad0:	18fb      	adds	r3, r7, r3
   20ad2:	2200      	movs	r2, #0
   20ad4:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   20ad6:	230c      	movs	r3, #12
   20ad8:	18fb      	adds	r3, r7, r3
   20ada:	4a16      	ldr	r2, [pc, #88]	; (20b34 <nm_bus_init+0xcc>)
   20adc:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   20ade:	230c      	movs	r3, #12
   20ae0:	18fa      	adds	r2, r7, r3
   20ae2:	4915      	ldr	r1, [pc, #84]	; (20b38 <nm_bus_init+0xd0>)
   20ae4:	4b15      	ldr	r3, [pc, #84]	; (20b3c <nm_bus_init+0xd4>)
   20ae6:	0018      	movs	r0, r3
   20ae8:	4b15      	ldr	r3, [pc, #84]	; (20b40 <nm_bus_init+0xd8>)
   20aea:	4798      	blx	r3
   20aec:	1e03      	subs	r3, r0, #0
   20aee:	d002      	beq.n	20af6 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   20af0:	2306      	movs	r3, #6
   20af2:	425b      	negs	r3, r3
   20af4:	e00c      	b.n	20b10 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   20af6:	4b11      	ldr	r3, [pc, #68]	; (20b3c <nm_bus_init+0xd4>)
   20af8:	0018      	movs	r0, r3
   20afa:	4b12      	ldr	r3, [pc, #72]	; (20b44 <nm_bus_init+0xdc>)
   20afc:	4798      	blx	r3

	nm_bsp_reset();
   20afe:	4b12      	ldr	r3, [pc, #72]	; (20b48 <nm_bus_init+0xe0>)
   20b00:	4798      	blx	r3
	nm_bsp_sleep(1);
   20b02:	2001      	movs	r0, #1
   20b04:	4b11      	ldr	r3, [pc, #68]	; (20b4c <nm_bus_init+0xe4>)
   20b06:	4798      	blx	r3
#endif
	return result;
   20b08:	2347      	movs	r3, #71	; 0x47
   20b0a:	18fb      	adds	r3, r7, r3
   20b0c:	781b      	ldrb	r3, [r3, #0]
   20b0e:	b25b      	sxtb	r3, r3
}
   20b10:	0018      	movs	r0, r3
   20b12:	46bd      	mov	sp, r7
   20b14:	b012      	add	sp, #72	; 0x48
   20b16:	bd80      	pop	{r7, pc}
   20b18:	00020675 	.word	0x00020675
   20b1c:	20005914 	.word	0x20005914
   20b20:	00020699 	.word	0x00020699
   20b24:	000205f1 	.word	0x000205f1
   20b28:	000c0002 	.word	0x000c0002
   20b2c:	000d0002 	.word	0x000d0002
   20b30:	000f0002 	.word	0x000f0002
   20b34:	00124f80 	.word	0x00124f80
   20b38:	42001000 	.word	0x42001000
   20b3c:	20005918 	.word	0x20005918
   20b40:	00027ed9 	.word	0x00027ed9
   20b44:	000206fd 	.word	0x000206fd
   20b48:	0002036d 	.word	0x0002036d
   20b4c:	000203ad 	.word	0x000203ad

00020b50 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   20b50:	b590      	push	{r4, r7, lr}
   20b52:	b085      	sub	sp, #20
   20b54:	af00      	add	r7, sp, #0
   20b56:	0002      	movs	r2, r0
   20b58:	6039      	str	r1, [r7, #0]
   20b5a:	1dfb      	adds	r3, r7, #7
   20b5c:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   20b5e:	230f      	movs	r3, #15
   20b60:	18fb      	adds	r3, r7, r3
   20b62:	2200      	movs	r2, #0
   20b64:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   20b66:	1dfb      	adds	r3, r7, #7
   20b68:	781b      	ldrb	r3, [r3, #0]
   20b6a:	2b03      	cmp	r3, #3
   20b6c:	d10f      	bne.n	20b8e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   20b6e:	683b      	ldr	r3, [r7, #0]
   20b70:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   20b72:	68bb      	ldr	r3, [r7, #8]
   20b74:	6818      	ldr	r0, [r3, #0]
   20b76:	68bb      	ldr	r3, [r7, #8]
   20b78:	6859      	ldr	r1, [r3, #4]
   20b7a:	68bb      	ldr	r3, [r7, #8]
   20b7c:	891b      	ldrh	r3, [r3, #8]
   20b7e:	220f      	movs	r2, #15
   20b80:	18bc      	adds	r4, r7, r2
   20b82:	001a      	movs	r2, r3
   20b84:	4b10      	ldr	r3, [pc, #64]	; (20bc8 <nm_bus_ioctl+0x78>)
   20b86:	4798      	blx	r3
   20b88:	0003      	movs	r3, r0
   20b8a:	7023      	strb	r3, [r4, #0]
		}
		break;
   20b8c:	e013      	b.n	20bb6 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   20b8e:	230f      	movs	r3, #15
   20b90:	18fb      	adds	r3, r7, r3
   20b92:	22ff      	movs	r2, #255	; 0xff
   20b94:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   20b96:	2383      	movs	r3, #131	; 0x83
   20b98:	005a      	lsls	r2, r3, #1
   20b9a:	490c      	ldr	r1, [pc, #48]	; (20bcc <nm_bus_ioctl+0x7c>)
   20b9c:	4b0c      	ldr	r3, [pc, #48]	; (20bd0 <nm_bus_ioctl+0x80>)
   20b9e:	0018      	movs	r0, r3
   20ba0:	4b0c      	ldr	r3, [pc, #48]	; (20bd4 <nm_bus_ioctl+0x84>)
   20ba2:	4798      	blx	r3
   20ba4:	4b0c      	ldr	r3, [pc, #48]	; (20bd8 <nm_bus_ioctl+0x88>)
   20ba6:	0018      	movs	r0, r3
   20ba8:	4b0a      	ldr	r3, [pc, #40]	; (20bd4 <nm_bus_ioctl+0x84>)
   20baa:	4798      	blx	r3
   20bac:	4b0b      	ldr	r3, [pc, #44]	; (20bdc <nm_bus_ioctl+0x8c>)
   20bae:	0018      	movs	r0, r3
   20bb0:	4b08      	ldr	r3, [pc, #32]	; (20bd4 <nm_bus_ioctl+0x84>)
   20bb2:	4798      	blx	r3
			break;
   20bb4:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   20bb6:	230f      	movs	r3, #15
   20bb8:	18fb      	adds	r3, r7, r3
   20bba:	781b      	ldrb	r3, [r3, #0]
   20bbc:	b25b      	sxtb	r3, r3
}
   20bbe:	0018      	movs	r0, r3
   20bc0:	46bd      	mov	sp, r7
   20bc2:	b005      	add	sp, #20
   20bc4:	bd90      	pop	{r4, r7, pc}
   20bc6:	46c0      	nop			; (mov r8, r8)
   20bc8:	000208f1 	.word	0x000208f1
   20bcc:	00038484 	.word	0x00038484
   20bd0:	00038458 	.word	0x00038458
   20bd4:	0001df59 	.word	0x0001df59
   20bd8:	0003846c 	.word	0x0003846c
   20bdc:	00038480 	.word	0x00038480

00020be0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   20be0:	b580      	push	{r7, lr}
   20be2:	b082      	sub	sp, #8
   20be4:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   20be6:	1dfb      	adds	r3, r7, #7
   20be8:	2200      	movs	r2, #0
   20bea:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   20bec:	1d3b      	adds	r3, r7, #4
   20bee:	0018      	movs	r0, r3
   20bf0:	4b13      	ldr	r3, [pc, #76]	; (20c40 <nm_bus_deinit+0x60>)
   20bf2:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   20bf4:	1d3b      	adds	r3, r7, #4
   20bf6:	2200      	movs	r2, #0
   20bf8:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   20bfa:	1d3b      	adds	r3, r7, #4
   20bfc:	2200      	movs	r2, #0
   20bfe:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   20c00:	4b10      	ldr	r3, [pc, #64]	; (20c44 <nm_bus_deinit+0x64>)
   20c02:	0018      	movs	r0, r3
   20c04:	4b10      	ldr	r3, [pc, #64]	; (20c48 <nm_bus_deinit+0x68>)
   20c06:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   20c08:	1d3b      	adds	r3, r7, #4
   20c0a:	0019      	movs	r1, r3
   20c0c:	200c      	movs	r0, #12
   20c0e:	4b0f      	ldr	r3, [pc, #60]	; (20c4c <nm_bus_deinit+0x6c>)
   20c10:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   20c12:	1d3b      	adds	r3, r7, #4
   20c14:	0019      	movs	r1, r3
   20c16:	200f      	movs	r0, #15
   20c18:	4b0c      	ldr	r3, [pc, #48]	; (20c4c <nm_bus_deinit+0x6c>)
   20c1a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   20c1c:	1d3b      	adds	r3, r7, #4
   20c1e:	0019      	movs	r1, r3
   20c20:	200d      	movs	r0, #13
   20c22:	4b0a      	ldr	r3, [pc, #40]	; (20c4c <nm_bus_deinit+0x6c>)
   20c24:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   20c26:	1d3b      	adds	r3, r7, #4
   20c28:	0019      	movs	r1, r3
   20c2a:	200e      	movs	r0, #14
   20c2c:	4b07      	ldr	r3, [pc, #28]	; (20c4c <nm_bus_deinit+0x6c>)
   20c2e:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   20c30:	1dfb      	adds	r3, r7, #7
   20c32:	781b      	ldrb	r3, [r3, #0]
   20c34:	b25b      	sxtb	r3, r3
}
   20c36:	0018      	movs	r0, r3
   20c38:	46bd      	mov	sp, r7
   20c3a:	b002      	add	sp, #8
   20c3c:	bd80      	pop	{r7, pc}
   20c3e:	46c0      	nop			; (mov r8, r8)
   20c40:	00020559 	.word	0x00020559
   20c44:	20005918 	.word	0x20005918
   20c48:	0002074d 	.word	0x0002074d
   20c4c:	00026a59 	.word	0x00026a59

00020c50 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   20c50:	b580      	push	{r7, lr}
   20c52:	b084      	sub	sp, #16
   20c54:	af00      	add	r7, sp, #0
   20c56:	60f8      	str	r0, [r7, #12]
   20c58:	60b9      	str	r1, [r7, #8]
   20c5a:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   20c5c:	687b      	ldr	r3, [r7, #4]
   20c5e:	2b00      	cmp	r3, #0
   20c60:	d010      	beq.n	20c84 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   20c62:	68bb      	ldr	r3, [r7, #8]
   20c64:	781a      	ldrb	r2, [r3, #0]
   20c66:	68fb      	ldr	r3, [r7, #12]
   20c68:	701a      	strb	r2, [r3, #0]
		pDst++;
   20c6a:	68fb      	ldr	r3, [r7, #12]
   20c6c:	3301      	adds	r3, #1
   20c6e:	60fb      	str	r3, [r7, #12]
		pSrc++;
   20c70:	68bb      	ldr	r3, [r7, #8]
   20c72:	3301      	adds	r3, #1
   20c74:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   20c76:	687b      	ldr	r3, [r7, #4]
   20c78:	3b01      	subs	r3, #1
   20c7a:	607b      	str	r3, [r7, #4]
   20c7c:	687b      	ldr	r3, [r7, #4]
   20c7e:	2b00      	cmp	r3, #0
   20c80:	d1ef      	bne.n	20c62 <m2m_memcpy+0x12>
   20c82:	e000      	b.n	20c86 <m2m_memcpy+0x36>
	if(sz == 0) return;
   20c84:	46c0      	nop			; (mov r8, r8)
}
   20c86:	46bd      	mov	sp, r7
   20c88:	b004      	add	sp, #16
   20c8a:	bd80      	pop	{r7, pc}

00020c8c <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   20c8c:	b580      	push	{r7, lr}
   20c8e:	b084      	sub	sp, #16
   20c90:	af00      	add	r7, sp, #0
   20c92:	60f8      	str	r0, [r7, #12]
   20c94:	607a      	str	r2, [r7, #4]
   20c96:	230b      	movs	r3, #11
   20c98:	18fb      	adds	r3, r7, r3
   20c9a:	1c0a      	adds	r2, r1, #0
   20c9c:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   20c9e:	687b      	ldr	r3, [r7, #4]
   20ca0:	2b00      	cmp	r3, #0
   20ca2:	d00e      	beq.n	20cc2 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   20ca4:	68fb      	ldr	r3, [r7, #12]
   20ca6:	220b      	movs	r2, #11
   20ca8:	18ba      	adds	r2, r7, r2
   20caa:	7812      	ldrb	r2, [r2, #0]
   20cac:	701a      	strb	r2, [r3, #0]
		pBuf++;
   20cae:	68fb      	ldr	r3, [r7, #12]
   20cb0:	3301      	adds	r3, #1
   20cb2:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   20cb4:	687b      	ldr	r3, [r7, #4]
   20cb6:	3b01      	subs	r3, #1
   20cb8:	607b      	str	r3, [r7, #4]
   20cba:	687b      	ldr	r3, [r7, #4]
   20cbc:	2b00      	cmp	r3, #0
   20cbe:	d1f1      	bne.n	20ca4 <m2m_memset+0x18>
   20cc0:	e000      	b.n	20cc4 <m2m_memset+0x38>
	if(sz == 0) return;
   20cc2:	46c0      	nop			; (mov r8, r8)
}
   20cc4:	46bd      	mov	sp, r7
   20cc6:	b004      	add	sp, #16
   20cc8:	bd80      	pop	{r7, pc}

00020cca <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   20cca:	b580      	push	{r7, lr}
   20ccc:	b084      	sub	sp, #16
   20cce:	af00      	add	r7, sp, #0
   20cd0:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   20cd2:	230e      	movs	r3, #14
   20cd4:	18fb      	adds	r3, r7, r3
   20cd6:	2200      	movs	r2, #0
   20cd8:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   20cda:	e009      	b.n	20cf0 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   20cdc:	230e      	movs	r3, #14
   20cde:	18fb      	adds	r3, r7, r3
   20ce0:	881a      	ldrh	r2, [r3, #0]
   20ce2:	230e      	movs	r3, #14
   20ce4:	18fb      	adds	r3, r7, r3
   20ce6:	3201      	adds	r2, #1
   20ce8:	801a      	strh	r2, [r3, #0]
		pcStr++;
   20cea:	687b      	ldr	r3, [r7, #4]
   20cec:	3301      	adds	r3, #1
   20cee:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   20cf0:	687b      	ldr	r3, [r7, #4]
   20cf2:	781b      	ldrb	r3, [r3, #0]
   20cf4:	2b00      	cmp	r3, #0
   20cf6:	d1f1      	bne.n	20cdc <m2m_strlen+0x12>
	}
	return u16StrLen;
   20cf8:	230e      	movs	r3, #14
   20cfa:	18fb      	adds	r3, r7, r3
   20cfc:	881b      	ldrh	r3, [r3, #0]
}
   20cfe:	0018      	movs	r0, r3
   20d00:	46bd      	mov	sp, r7
   20d02:	b004      	add	sp, #16
   20d04:	bd80      	pop	{r7, pc}
	...

00020d08 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   20d08:	b580      	push	{r7, lr}
   20d0a:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   20d0c:	4b04      	ldr	r3, [pc, #16]	; (20d20 <isr+0x18>)
   20d0e:	78db      	ldrb	r3, [r3, #3]
   20d10:	b2db      	uxtb	r3, r3
   20d12:	3301      	adds	r3, #1
   20d14:	b2da      	uxtb	r2, r3
   20d16:	4b02      	ldr	r3, [pc, #8]	; (20d20 <isr+0x18>)
   20d18:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   20d1a:	46c0      	nop			; (mov r8, r8)
   20d1c:	46bd      	mov	sp, r7
   20d1e:	bd80      	pop	{r7, pc}
   20d20:	20005954 	.word	0x20005954

00020d24 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   20d24:	b590      	push	{r4, r7, lr}
   20d26:	b083      	sub	sp, #12
   20d28:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   20d2a:	1dfb      	adds	r3, r7, #7
   20d2c:	2200      	movs	r2, #0
   20d2e:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   20d30:	4b14      	ldr	r3, [pc, #80]	; (20d84 <hif_set_rx_done+0x60>)
   20d32:	2200      	movs	r2, #0
   20d34:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   20d36:	2001      	movs	r0, #1
   20d38:	4b13      	ldr	r3, [pc, #76]	; (20d88 <hif_set_rx_done+0x64>)
   20d3a:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   20d3c:	1dfc      	adds	r4, r7, #7
   20d3e:	003b      	movs	r3, r7
   20d40:	4a12      	ldr	r2, [pc, #72]	; (20d8c <hif_set_rx_done+0x68>)
   20d42:	0019      	movs	r1, r3
   20d44:	0010      	movs	r0, r2
   20d46:	4b12      	ldr	r3, [pc, #72]	; (20d90 <hif_set_rx_done+0x6c>)
   20d48:	4798      	blx	r3
   20d4a:	0003      	movs	r3, r0
   20d4c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   20d4e:	1dfb      	adds	r3, r7, #7
   20d50:	781b      	ldrb	r3, [r3, #0]
   20d52:	b25b      	sxtb	r3, r3
   20d54:	2b00      	cmp	r3, #0
   20d56:	d10d      	bne.n	20d74 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   20d58:	683b      	ldr	r3, [r7, #0]
   20d5a:	2202      	movs	r2, #2
   20d5c:	4313      	orrs	r3, r2
   20d5e:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   20d60:	683b      	ldr	r3, [r7, #0]
   20d62:	1dfc      	adds	r4, r7, #7
   20d64:	4a09      	ldr	r2, [pc, #36]	; (20d8c <hif_set_rx_done+0x68>)
   20d66:	0019      	movs	r1, r3
   20d68:	0010      	movs	r0, r2
   20d6a:	4b0a      	ldr	r3, [pc, #40]	; (20d94 <hif_set_rx_done+0x70>)
   20d6c:	4798      	blx	r3
   20d6e:	0003      	movs	r3, r0
   20d70:	7023      	strb	r3, [r4, #0]
   20d72:	e000      	b.n	20d76 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   20d74:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   20d76:	1dfb      	adds	r3, r7, #7
   20d78:	781b      	ldrb	r3, [r3, #0]
   20d7a:	b25b      	sxtb	r3, r3

}
   20d7c:	0018      	movs	r0, r3
   20d7e:	46bd      	mov	sp, r7
   20d80:	b003      	add	sp, #12
   20d82:	bd90      	pop	{r4, r7, pc}
   20d84:	20005954 	.word	0x20005954
   20d88:	00020441 	.word	0x00020441
   20d8c:	00001070 	.word	0x00001070
   20d90:	00022d1d 	.word	0x00022d1d
   20d94:	00022d41 	.word	0x00022d41

00020d98 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   20d98:	b580      	push	{r7, lr}
   20d9a:	b082      	sub	sp, #8
   20d9c:	af00      	add	r7, sp, #0
   20d9e:	603a      	str	r2, [r7, #0]
   20da0:	1dfb      	adds	r3, r7, #7
   20da2:	1c02      	adds	r2, r0, #0
   20da4:	701a      	strb	r2, [r3, #0]
   20da6:	1d3b      	adds	r3, r7, #4
   20da8:	1c0a      	adds	r2, r1, #0
   20daa:	801a      	strh	r2, [r3, #0]


}
   20dac:	46c0      	nop			; (mov r8, r8)
   20dae:	46bd      	mov	sp, r7
   20db0:	b002      	add	sp, #8
   20db2:	bd80      	pop	{r7, pc}

00020db4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   20db4:	b590      	push	{r4, r7, lr}
   20db6:	b083      	sub	sp, #12
   20db8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20dba:	1dfb      	adds	r3, r7, #7
   20dbc:	2200      	movs	r2, #0
   20dbe:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   20dc0:	4b16      	ldr	r3, [pc, #88]	; (20e1c <hif_chip_wake+0x68>)
   20dc2:	789b      	ldrb	r3, [r3, #2]
   20dc4:	b2db      	uxtb	r3, r3
   20dc6:	2b00      	cmp	r3, #0
   20dc8:	d003      	beq.n	20dd2 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   20dca:	1dfb      	adds	r3, r7, #7
   20dcc:	781b      	ldrb	r3, [r3, #0]
   20dce:	b25b      	sxtb	r3, r3
   20dd0:	e01f      	b.n	20e12 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   20dd2:	4b12      	ldr	r3, [pc, #72]	; (20e1c <hif_chip_wake+0x68>)
   20dd4:	785b      	ldrb	r3, [r3, #1]
   20dd6:	b2db      	uxtb	r3, r3
   20dd8:	2b00      	cmp	r3, #0
   20dda:	d10e      	bne.n	20dfa <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   20ddc:	4b0f      	ldr	r3, [pc, #60]	; (20e1c <hif_chip_wake+0x68>)
   20dde:	781b      	ldrb	r3, [r3, #0]
   20de0:	b2db      	uxtb	r3, r3
   20de2:	2b00      	cmp	r3, #0
   20de4:	d009      	beq.n	20dfa <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   20de6:	1dfc      	adds	r4, r7, #7
   20de8:	4b0d      	ldr	r3, [pc, #52]	; (20e20 <hif_chip_wake+0x6c>)
   20dea:	4798      	blx	r3
   20dec:	0003      	movs	r3, r0
   20dee:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20df0:	1dfb      	adds	r3, r7, #7
   20df2:	781b      	ldrb	r3, [r3, #0]
   20df4:	b25b      	sxtb	r3, r3
   20df6:	2b00      	cmp	r3, #0
   20df8:	d107      	bne.n	20e0a <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   20dfa:	4b08      	ldr	r3, [pc, #32]	; (20e1c <hif_chip_wake+0x68>)
   20dfc:	785b      	ldrb	r3, [r3, #1]
   20dfe:	b2db      	uxtb	r3, r3
   20e00:	3301      	adds	r3, #1
   20e02:	b2da      	uxtb	r2, r3
   20e04:	4b05      	ldr	r3, [pc, #20]	; (20e1c <hif_chip_wake+0x68>)
   20e06:	705a      	strb	r2, [r3, #1]
   20e08:	e000      	b.n	20e0c <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   20e0a:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   20e0c:	1dfb      	adds	r3, r7, #7
   20e0e:	781b      	ldrb	r3, [r3, #0]
   20e10:	b25b      	sxtb	r3, r3
}
   20e12:	0018      	movs	r0, r3
   20e14:	46bd      	mov	sp, r7
   20e16:	b003      	add	sp, #12
   20e18:	bd90      	pop	{r4, r7, pc}
   20e1a:	46c0      	nop			; (mov r8, r8)
   20e1c:	20005954 	.word	0x20005954
   20e20:	000227ed 	.word	0x000227ed

00020e24 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   20e24:	b580      	push	{r7, lr}
   20e26:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   20e28:	4b07      	ldr	r3, [pc, #28]	; (20e48 <hif_chip_sleep_sc+0x24>)
   20e2a:	785b      	ldrb	r3, [r3, #1]
   20e2c:	b2db      	uxtb	r3, r3
   20e2e:	2b00      	cmp	r3, #0
   20e30:	d006      	beq.n	20e40 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   20e32:	4b05      	ldr	r3, [pc, #20]	; (20e48 <hif_chip_sleep_sc+0x24>)
   20e34:	785b      	ldrb	r3, [r3, #1]
   20e36:	b2db      	uxtb	r3, r3
   20e38:	3b01      	subs	r3, #1
   20e3a:	b2da      	uxtb	r2, r3
   20e3c:	4b02      	ldr	r3, [pc, #8]	; (20e48 <hif_chip_sleep_sc+0x24>)
   20e3e:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   20e40:	2300      	movs	r3, #0
}
   20e42:	0018      	movs	r0, r3
   20e44:	46bd      	mov	sp, r7
   20e46:	bd80      	pop	{r7, pc}
   20e48:	20005954 	.word	0x20005954

00020e4c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   20e4c:	b590      	push	{r4, r7, lr}
   20e4e:	b083      	sub	sp, #12
   20e50:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20e52:	1dfb      	adds	r3, r7, #7
   20e54:	2200      	movs	r2, #0
   20e56:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   20e58:	4b10      	ldr	r3, [pc, #64]	; (20e9c <hif_chip_sleep+0x50>)
   20e5a:	785b      	ldrb	r3, [r3, #1]
   20e5c:	b2db      	uxtb	r3, r3
   20e5e:	2b00      	cmp	r3, #0
   20e60:	d006      	beq.n	20e70 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   20e62:	4b0e      	ldr	r3, [pc, #56]	; (20e9c <hif_chip_sleep+0x50>)
   20e64:	785b      	ldrb	r3, [r3, #1]
   20e66:	b2db      	uxtb	r3, r3
   20e68:	3b01      	subs	r3, #1
   20e6a:	b2da      	uxtb	r2, r3
   20e6c:	4b0b      	ldr	r3, [pc, #44]	; (20e9c <hif_chip_sleep+0x50>)
   20e6e:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   20e70:	4b0a      	ldr	r3, [pc, #40]	; (20e9c <hif_chip_sleep+0x50>)
   20e72:	785b      	ldrb	r3, [r3, #1]
   20e74:	b2db      	uxtb	r3, r3
   20e76:	2b00      	cmp	r3, #0
   20e78:	d109      	bne.n	20e8e <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   20e7a:	4b08      	ldr	r3, [pc, #32]	; (20e9c <hif_chip_sleep+0x50>)
   20e7c:	781b      	ldrb	r3, [r3, #0]
   20e7e:	b2db      	uxtb	r3, r3
   20e80:	2b00      	cmp	r3, #0
   20e82:	d004      	beq.n	20e8e <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   20e84:	1dfc      	adds	r4, r7, #7
   20e86:	4b06      	ldr	r3, [pc, #24]	; (20ea0 <hif_chip_sleep+0x54>)
   20e88:	4798      	blx	r3
   20e8a:	0003      	movs	r3, r0
   20e8c:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   20e8e:	1dfb      	adds	r3, r7, #7
   20e90:	781b      	ldrb	r3, [r3, #0]
   20e92:	b25b      	sxtb	r3, r3
}
   20e94:	0018      	movs	r0, r3
   20e96:	46bd      	mov	sp, r7
   20e98:	b003      	add	sp, #12
   20e9a:	bd90      	pop	{r4, r7, pc}
   20e9c:	20005954 	.word	0x20005954
   20ea0:	00022715 	.word	0x00022715

00020ea4 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   20ea4:	b580      	push	{r7, lr}
   20ea6:	b082      	sub	sp, #8
   20ea8:	af00      	add	r7, sp, #0
   20eaa:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   20eac:	4b09      	ldr	r3, [pc, #36]	; (20ed4 <hif_init+0x30>)
   20eae:	222c      	movs	r2, #44	; 0x2c
   20eb0:	2100      	movs	r1, #0
   20eb2:	0018      	movs	r0, r3
   20eb4:	4b08      	ldr	r3, [pc, #32]	; (20ed8 <hif_init+0x34>)
   20eb6:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   20eb8:	4b08      	ldr	r3, [pc, #32]	; (20edc <hif_init+0x38>)
   20eba:	0018      	movs	r0, r3
   20ebc:	4b08      	ldr	r3, [pc, #32]	; (20ee0 <hif_init+0x3c>)
   20ebe:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   20ec0:	4b08      	ldr	r3, [pc, #32]	; (20ee4 <hif_init+0x40>)
   20ec2:	0019      	movs	r1, r3
   20ec4:	2003      	movs	r0, #3
   20ec6:	4b08      	ldr	r3, [pc, #32]	; (20ee8 <hif_init+0x44>)
   20ec8:	4798      	blx	r3
	return M2M_SUCCESS;
   20eca:	2300      	movs	r3, #0
}
   20ecc:	0018      	movs	r0, r3
   20ece:	46bd      	mov	sp, r7
   20ed0:	b002      	add	sp, #8
   20ed2:	bd80      	pop	{r7, pc}
   20ed4:	20005954 	.word	0x20005954
   20ed8:	00020c8d 	.word	0x00020c8d
   20edc:	00020d09 	.word	0x00020d09
   20ee0:	000203c9 	.word	0x000203c9
   20ee4:	00020d99 	.word	0x00020d99
   20ee8:	00021989 	.word	0x00021989

00020eec <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   20eec:	b590      	push	{r4, r7, lr}
   20eee:	b089      	sub	sp, #36	; 0x24
   20ef0:	af00      	add	r7, sp, #0
   20ef2:	0004      	movs	r4, r0
   20ef4:	0008      	movs	r0, r1
   20ef6:	603a      	str	r2, [r7, #0]
   20ef8:	0019      	movs	r1, r3
   20efa:	1dfb      	adds	r3, r7, #7
   20efc:	1c22      	adds	r2, r4, #0
   20efe:	701a      	strb	r2, [r3, #0]
   20f00:	1dbb      	adds	r3, r7, #6
   20f02:	1c02      	adds	r2, r0, #0
   20f04:	701a      	strb	r2, [r3, #0]
   20f06:	1d3b      	adds	r3, r7, #4
   20f08:	1c0a      	adds	r2, r1, #0
   20f0a:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   20f0c:	231f      	movs	r3, #31
   20f0e:	18fb      	adds	r3, r7, r3
   20f10:	22ff      	movs	r2, #255	; 0xff
   20f12:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   20f14:	1dbb      	adds	r3, r7, #6
   20f16:	781b      	ldrb	r3, [r3, #0]
   20f18:	227f      	movs	r2, #127	; 0x7f
   20f1a:	4013      	ands	r3, r2
   20f1c:	b2da      	uxtb	r2, r3
   20f1e:	2318      	movs	r3, #24
   20f20:	18fb      	adds	r3, r7, r3
   20f22:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   20f24:	2318      	movs	r3, #24
   20f26:	18fb      	adds	r3, r7, r3
   20f28:	1dfa      	adds	r2, r7, #7
   20f2a:	7812      	ldrb	r2, [r2, #0]
   20f2c:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   20f2e:	2318      	movs	r3, #24
   20f30:	18fb      	adds	r3, r7, r3
   20f32:	2208      	movs	r2, #8
   20f34:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   20f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20f38:	2b00      	cmp	r3, #0
   20f3a:	d011      	beq.n	20f60 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   20f3c:	2318      	movs	r3, #24
   20f3e:	18fb      	adds	r3, r7, r3
   20f40:	885b      	ldrh	r3, [r3, #2]
   20f42:	b29a      	uxth	r2, r3
   20f44:	2338      	movs	r3, #56	; 0x38
   20f46:	18f9      	adds	r1, r7, r3
   20f48:	2334      	movs	r3, #52	; 0x34
   20f4a:	18fb      	adds	r3, r7, r3
   20f4c:	8809      	ldrh	r1, [r1, #0]
   20f4e:	881b      	ldrh	r3, [r3, #0]
   20f50:	18cb      	adds	r3, r1, r3
   20f52:	b29b      	uxth	r3, r3
   20f54:	18d3      	adds	r3, r2, r3
   20f56:	b29a      	uxth	r2, r3
   20f58:	2318      	movs	r3, #24
   20f5a:	18fb      	adds	r3, r7, r3
   20f5c:	805a      	strh	r2, [r3, #2]
   20f5e:	e00a      	b.n	20f76 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   20f60:	2318      	movs	r3, #24
   20f62:	18fb      	adds	r3, r7, r3
   20f64:	885b      	ldrh	r3, [r3, #2]
   20f66:	b29a      	uxth	r2, r3
   20f68:	1d3b      	adds	r3, r7, #4
   20f6a:	881b      	ldrh	r3, [r3, #0]
   20f6c:	18d3      	adds	r3, r2, r3
   20f6e:	b29a      	uxth	r2, r3
   20f70:	2318      	movs	r3, #24
   20f72:	18fb      	adds	r3, r7, r3
   20f74:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   20f76:	231f      	movs	r3, #31
   20f78:	18fc      	adds	r4, r7, r3
   20f7a:	4bb2      	ldr	r3, [pc, #712]	; (21244 <hif_send+0x358>)
   20f7c:	4798      	blx	r3
   20f7e:	0003      	movs	r3, r0
   20f80:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   20f82:	231f      	movs	r3, #31
   20f84:	18fb      	adds	r3, r7, r3
   20f86:	781b      	ldrb	r3, [r3, #0]
   20f88:	b25b      	sxtb	r3, r3
   20f8a:	2b00      	cmp	r3, #0
   20f8c:	d000      	beq.n	20f90 <hif_send+0xa4>
   20f8e:	e129      	b.n	211e4 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   20f90:	2300      	movs	r3, #0
   20f92:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   20f94:	230e      	movs	r3, #14
   20f96:	18fb      	adds	r3, r7, r3
   20f98:	2200      	movs	r2, #0
   20f9a:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   20f9c:	2300      	movs	r3, #0
   20f9e:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   20fa0:	1dfb      	adds	r3, r7, #7
   20fa2:	781a      	ldrb	r2, [r3, #0]
   20fa4:	697b      	ldr	r3, [r7, #20]
   20fa6:	4313      	orrs	r3, r2
   20fa8:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   20faa:	1dbb      	adds	r3, r7, #6
   20fac:	781b      	ldrb	r3, [r3, #0]
   20fae:	021a      	lsls	r2, r3, #8
   20fb0:	697b      	ldr	r3, [r7, #20]
   20fb2:	4313      	orrs	r3, r2
   20fb4:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   20fb6:	2318      	movs	r3, #24
   20fb8:	18fb      	adds	r3, r7, r3
   20fba:	885b      	ldrh	r3, [r3, #2]
   20fbc:	b29b      	uxth	r3, r3
   20fbe:	041a      	lsls	r2, r3, #16
   20fc0:	697b      	ldr	r3, [r7, #20]
   20fc2:	4313      	orrs	r3, r2
   20fc4:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   20fc6:	697b      	ldr	r3, [r7, #20]
   20fc8:	221f      	movs	r2, #31
   20fca:	18bc      	adds	r4, r7, r2
   20fcc:	4a9e      	ldr	r2, [pc, #632]	; (21248 <hif_send+0x35c>)
   20fce:	0019      	movs	r1, r3
   20fd0:	0010      	movs	r0, r2
   20fd2:	4b9e      	ldr	r3, [pc, #632]	; (2124c <hif_send+0x360>)
   20fd4:	4798      	blx	r3
   20fd6:	0003      	movs	r3, r0
   20fd8:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   20fda:	231f      	movs	r3, #31
   20fdc:	18fb      	adds	r3, r7, r3
   20fde:	781b      	ldrb	r3, [r3, #0]
   20fe0:	b25b      	sxtb	r3, r3
   20fe2:	2b00      	cmp	r3, #0
   20fe4:	d000      	beq.n	20fe8 <hif_send+0xfc>
   20fe6:	e119      	b.n	2121c <hif_send+0x330>

		reg = 0UL;
   20fe8:	2300      	movs	r3, #0
   20fea:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   20fec:	697b      	ldr	r3, [r7, #20]
   20fee:	2202      	movs	r2, #2
   20ff0:	4313      	orrs	r3, r2
   20ff2:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   20ff4:	697b      	ldr	r3, [r7, #20]
   20ff6:	221f      	movs	r2, #31
   20ff8:	18bc      	adds	r4, r7, r2
   20ffa:	4a95      	ldr	r2, [pc, #596]	; (21250 <hif_send+0x364>)
   20ffc:	0019      	movs	r1, r3
   20ffe:	0010      	movs	r0, r2
   21000:	4b92      	ldr	r3, [pc, #584]	; (2124c <hif_send+0x360>)
   21002:	4798      	blx	r3
   21004:	0003      	movs	r3, r0
   21006:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21008:	231f      	movs	r3, #31
   2100a:	18fb      	adds	r3, r7, r3
   2100c:	781b      	ldrb	r3, [r3, #0]
   2100e:	b25b      	sxtb	r3, r3
   21010:	2b00      	cmp	r3, #0
   21012:	d000      	beq.n	21016 <hif_send+0x12a>
   21014:	e104      	b.n	21220 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   21016:	2300      	movs	r3, #0
   21018:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   2101a:	230e      	movs	r3, #14
   2101c:	18fb      	adds	r3, r7, r3
   2101e:	2200      	movs	r2, #0
   21020:	801a      	strh	r2, [r3, #0]
   21022:	e050      	b.n	210c6 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   21024:	231f      	movs	r3, #31
   21026:	18fc      	adds	r4, r7, r3
   21028:	2314      	movs	r3, #20
   2102a:	18fb      	adds	r3, r7, r3
   2102c:	4a88      	ldr	r2, [pc, #544]	; (21250 <hif_send+0x364>)
   2102e:	0019      	movs	r1, r3
   21030:	0010      	movs	r0, r2
   21032:	4b88      	ldr	r3, [pc, #544]	; (21254 <hif_send+0x368>)
   21034:	4798      	blx	r3
   21036:	0003      	movs	r3, r0
   21038:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   2103a:	231f      	movs	r3, #31
   2103c:	18fb      	adds	r3, r7, r3
   2103e:	781b      	ldrb	r3, [r3, #0]
   21040:	b25b      	sxtb	r3, r3
   21042:	2b00      	cmp	r3, #0
   21044:	d147      	bne.n	210d6 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   21046:	230e      	movs	r3, #14
   21048:	18fb      	adds	r3, r7, r3
   2104a:	881b      	ldrh	r3, [r3, #0]
   2104c:	b29a      	uxth	r2, r3
   2104e:	23f4      	movs	r3, #244	; 0xf4
   21050:	33ff      	adds	r3, #255	; 0xff
   21052:	429a      	cmp	r2, r3
   21054:	d916      	bls.n	21084 <hif_send+0x198>
				if(cnt < 501) {
   21056:	230e      	movs	r3, #14
   21058:	18fb      	adds	r3, r7, r3
   2105a:	881b      	ldrh	r3, [r3, #0]
   2105c:	b29a      	uxth	r2, r3
   2105e:	23fa      	movs	r3, #250	; 0xfa
   21060:	005b      	lsls	r3, r3, #1
   21062:	429a      	cmp	r2, r3
   21064:	d80b      	bhi.n	2107e <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   21066:	4b7c      	ldr	r3, [pc, #496]	; (21258 <hif_send+0x36c>)
   21068:	0018      	movs	r0, r3
   2106a:	4b7c      	ldr	r3, [pc, #496]	; (2125c <hif_send+0x370>)
   2106c:	4798      	blx	r3
   2106e:	4b7c      	ldr	r3, [pc, #496]	; (21260 <hif_send+0x374>)
   21070:	0018      	movs	r0, r3
   21072:	4b7a      	ldr	r3, [pc, #488]	; (2125c <hif_send+0x370>)
   21074:	4798      	blx	r3
   21076:	4b7b      	ldr	r3, [pc, #492]	; (21264 <hif_send+0x378>)
   21078:	0018      	movs	r0, r3
   2107a:	4b78      	ldr	r3, [pc, #480]	; (2125c <hif_send+0x370>)
   2107c:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   2107e:	2001      	movs	r0, #1
   21080:	4b79      	ldr	r3, [pc, #484]	; (21268 <hif_send+0x37c>)
   21082:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   21084:	697b      	ldr	r3, [r7, #20]
   21086:	2202      	movs	r2, #2
   21088:	4013      	ands	r3, r2
   2108a:	d113      	bne.n	210b4 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   2108c:	231f      	movs	r3, #31
   2108e:	18fc      	adds	r4, r7, r3
   21090:	2310      	movs	r3, #16
   21092:	18fb      	adds	r3, r7, r3
   21094:	4a75      	ldr	r2, [pc, #468]	; (2126c <hif_send+0x380>)
   21096:	0019      	movs	r1, r3
   21098:	0010      	movs	r0, r2
   2109a:	4b6e      	ldr	r3, [pc, #440]	; (21254 <hif_send+0x368>)
   2109c:	4798      	blx	r3
   2109e:	0003      	movs	r3, r0
   210a0:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   210a2:	231f      	movs	r3, #31
   210a4:	18fb      	adds	r3, r7, r3
   210a6:	781b      	ldrb	r3, [r3, #0]
   210a8:	b25b      	sxtb	r3, r3
   210aa:	2b00      	cmp	r3, #0
   210ac:	d015      	beq.n	210da <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   210ae:	2300      	movs	r3, #0
   210b0:	613b      	str	r3, [r7, #16]
					goto ERR1;
   210b2:	e0bc      	b.n	2122e <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   210b4:	230e      	movs	r3, #14
   210b6:	18fb      	adds	r3, r7, r3
   210b8:	881b      	ldrh	r3, [r3, #0]
   210ba:	b29b      	uxth	r3, r3
   210bc:	3301      	adds	r3, #1
   210be:	b29a      	uxth	r2, r3
   210c0:	230e      	movs	r3, #14
   210c2:	18fb      	adds	r3, r7, r3
   210c4:	801a      	strh	r2, [r3, #0]
   210c6:	230e      	movs	r3, #14
   210c8:	18fb      	adds	r3, r7, r3
   210ca:	881b      	ldrh	r3, [r3, #0]
   210cc:	b29b      	uxth	r3, r3
   210ce:	4a68      	ldr	r2, [pc, #416]	; (21270 <hif_send+0x384>)
   210d0:	4293      	cmp	r3, r2
   210d2:	d9a7      	bls.n	21024 <hif_send+0x138>
   210d4:	e002      	b.n	210dc <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   210d6:	46c0      	nop			; (mov r8, r8)
   210d8:	e000      	b.n	210dc <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   210da:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   210dc:	693b      	ldr	r3, [r7, #16]
   210de:	2b00      	cmp	r3, #0
   210e0:	d100      	bne.n	210e4 <hif_send+0x1f8>
   210e2:	e074      	b.n	211ce <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   210e4:	693b      	ldr	r3, [r7, #16]
   210e6:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   210e8:	2318      	movs	r3, #24
   210ea:	18fb      	adds	r3, r7, r3
   210ec:	885b      	ldrh	r3, [r3, #2]
   210ee:	b29a      	uxth	r2, r3
   210f0:	2318      	movs	r3, #24
   210f2:	18fb      	adds	r3, r7, r3
   210f4:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   210f6:	68bb      	ldr	r3, [r7, #8]
   210f8:	221f      	movs	r2, #31
   210fa:	18bc      	adds	r4, r7, r2
   210fc:	2218      	movs	r2, #24
   210fe:	18b9      	adds	r1, r7, r2
   21100:	2208      	movs	r2, #8
   21102:	0018      	movs	r0, r3
   21104:	4b5b      	ldr	r3, [pc, #364]	; (21274 <hif_send+0x388>)
   21106:	4798      	blx	r3
   21108:	0003      	movs	r3, r0
   2110a:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   2110c:	231f      	movs	r3, #31
   2110e:	18fb      	adds	r3, r7, r3
   21110:	781b      	ldrb	r3, [r3, #0]
   21112:	b25b      	sxtb	r3, r3
   21114:	2b00      	cmp	r3, #0
   21116:	d000      	beq.n	2111a <hif_send+0x22e>
   21118:	e084      	b.n	21224 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   2111a:	68bb      	ldr	r3, [r7, #8]
   2111c:	3308      	adds	r3, #8
   2111e:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   21120:	683b      	ldr	r3, [r7, #0]
   21122:	2b00      	cmp	r3, #0
   21124:	d016      	beq.n	21154 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   21126:	68b8      	ldr	r0, [r7, #8]
   21128:	1d3b      	adds	r3, r7, #4
   2112a:	881a      	ldrh	r2, [r3, #0]
   2112c:	231f      	movs	r3, #31
   2112e:	18fc      	adds	r4, r7, r3
   21130:	683b      	ldr	r3, [r7, #0]
   21132:	0019      	movs	r1, r3
   21134:	4b4f      	ldr	r3, [pc, #316]	; (21274 <hif_send+0x388>)
   21136:	4798      	blx	r3
   21138:	0003      	movs	r3, r0
   2113a:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   2113c:	231f      	movs	r3, #31
   2113e:	18fb      	adds	r3, r7, r3
   21140:	781b      	ldrb	r3, [r3, #0]
   21142:	b25b      	sxtb	r3, r3
   21144:	2b00      	cmp	r3, #0
   21146:	d000      	beq.n	2114a <hif_send+0x25e>
   21148:	e06e      	b.n	21228 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   2114a:	1d3b      	adds	r3, r7, #4
   2114c:	881a      	ldrh	r2, [r3, #0]
   2114e:	68bb      	ldr	r3, [r7, #8]
   21150:	18d3      	adds	r3, r2, r3
   21152:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   21154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21156:	2b00      	cmp	r3, #0
   21158:	d021      	beq.n	2119e <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   2115a:	2338      	movs	r3, #56	; 0x38
   2115c:	18fb      	adds	r3, r7, r3
   2115e:	881a      	ldrh	r2, [r3, #0]
   21160:	1d3b      	adds	r3, r7, #4
   21162:	881b      	ldrh	r3, [r3, #0]
   21164:	1ad3      	subs	r3, r2, r3
   21166:	001a      	movs	r2, r3
   21168:	68bb      	ldr	r3, [r7, #8]
   2116a:	18d3      	adds	r3, r2, r3
   2116c:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   2116e:	68b8      	ldr	r0, [r7, #8]
   21170:	2334      	movs	r3, #52	; 0x34
   21172:	18fb      	adds	r3, r7, r3
   21174:	881a      	ldrh	r2, [r3, #0]
   21176:	231f      	movs	r3, #31
   21178:	18fc      	adds	r4, r7, r3
   2117a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2117c:	0019      	movs	r1, r3
   2117e:	4b3d      	ldr	r3, [pc, #244]	; (21274 <hif_send+0x388>)
   21180:	4798      	blx	r3
   21182:	0003      	movs	r3, r0
   21184:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21186:	231f      	movs	r3, #31
   21188:	18fb      	adds	r3, r7, r3
   2118a:	781b      	ldrb	r3, [r3, #0]
   2118c:	b25b      	sxtb	r3, r3
   2118e:	2b00      	cmp	r3, #0
   21190:	d14c      	bne.n	2122c <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   21192:	2334      	movs	r3, #52	; 0x34
   21194:	18fb      	adds	r3, r7, r3
   21196:	881a      	ldrh	r2, [r3, #0]
   21198:	68bb      	ldr	r3, [r7, #8]
   2119a:	18d3      	adds	r3, r2, r3
   2119c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   2119e:	693b      	ldr	r3, [r7, #16]
   211a0:	009b      	lsls	r3, r3, #2
   211a2:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   211a4:	697b      	ldr	r3, [r7, #20]
   211a6:	2202      	movs	r2, #2
   211a8:	4313      	orrs	r3, r2
   211aa:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   211ac:	697b      	ldr	r3, [r7, #20]
   211ae:	221f      	movs	r2, #31
   211b0:	18bc      	adds	r4, r7, r2
   211b2:	4a31      	ldr	r2, [pc, #196]	; (21278 <hif_send+0x38c>)
   211b4:	0019      	movs	r1, r3
   211b6:	0010      	movs	r0, r2
   211b8:	4b24      	ldr	r3, [pc, #144]	; (2124c <hif_send+0x360>)
   211ba:	4798      	blx	r3
   211bc:	0003      	movs	r3, r0
   211be:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   211c0:	231f      	movs	r3, #31
   211c2:	18fb      	adds	r3, r7, r3
   211c4:	781b      	ldrb	r3, [r3, #0]
   211c6:	b25b      	sxtb	r3, r3
   211c8:	2b00      	cmp	r3, #0
   211ca:	d01c      	beq.n	21206 <hif_send+0x31a>
   211cc:	e02f      	b.n	2122e <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   211ce:	231f      	movs	r3, #31
   211d0:	18fc      	adds	r4, r7, r3
   211d2:	4b2a      	ldr	r3, [pc, #168]	; (2127c <hif_send+0x390>)
   211d4:	4798      	blx	r3
   211d6:	0003      	movs	r3, r0
   211d8:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   211da:	231f      	movs	r3, #31
   211dc:	18fb      	adds	r3, r7, r3
   211de:	22fd      	movs	r2, #253	; 0xfd
   211e0:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   211e2:	e026      	b.n	21232 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   211e4:	2398      	movs	r3, #152	; 0x98
   211e6:	33ff      	adds	r3, #255	; 0xff
   211e8:	001a      	movs	r2, r3
   211ea:	4925      	ldr	r1, [pc, #148]	; (21280 <hif_send+0x394>)
   211ec:	4b25      	ldr	r3, [pc, #148]	; (21284 <hif_send+0x398>)
   211ee:	0018      	movs	r0, r3
   211f0:	4b1a      	ldr	r3, [pc, #104]	; (2125c <hif_send+0x370>)
   211f2:	4798      	blx	r3
   211f4:	4b24      	ldr	r3, [pc, #144]	; (21288 <hif_send+0x39c>)
   211f6:	0018      	movs	r0, r3
   211f8:	4b18      	ldr	r3, [pc, #96]	; (2125c <hif_send+0x370>)
   211fa:	4798      	blx	r3
   211fc:	4b19      	ldr	r3, [pc, #100]	; (21264 <hif_send+0x378>)
   211fe:	0018      	movs	r0, r3
   21200:	4b16      	ldr	r3, [pc, #88]	; (2125c <hif_send+0x370>)
   21202:	4798      	blx	r3
		goto ERR2;
   21204:	e015      	b.n	21232 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   21206:	231f      	movs	r3, #31
   21208:	18fc      	adds	r4, r7, r3
   2120a:	4b1c      	ldr	r3, [pc, #112]	; (2127c <hif_send+0x390>)
   2120c:	4798      	blx	r3
   2120e:	0003      	movs	r3, r0
   21210:	7023      	strb	r3, [r4, #0]
	return ret;
   21212:	231f      	movs	r3, #31
   21214:	18fb      	adds	r3, r7, r3
   21216:	781b      	ldrb	r3, [r3, #0]
   21218:	b25b      	sxtb	r3, r3
   2121a:	e00e      	b.n	2123a <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   2121c:	46c0      	nop			; (mov r8, r8)
   2121e:	e006      	b.n	2122e <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   21220:	46c0      	nop			; (mov r8, r8)
   21222:	e004      	b.n	2122e <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   21224:	46c0      	nop			; (mov r8, r8)
   21226:	e002      	b.n	2122e <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21228:	46c0      	nop			; (mov r8, r8)
   2122a:	e000      	b.n	2122e <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   2122c:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   2122e:	4b17      	ldr	r3, [pc, #92]	; (2128c <hif_send+0x3a0>)
   21230:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   21232:	231f      	movs	r3, #31
   21234:	18fb      	adds	r3, r7, r3
   21236:	781b      	ldrb	r3, [r3, #0]
   21238:	b25b      	sxtb	r3, r3
}
   2123a:	0018      	movs	r0, r3
   2123c:	46bd      	mov	sp, r7
   2123e:	b009      	add	sp, #36	; 0x24
   21240:	bd90      	pop	{r4, r7, pc}
   21242:	46c0      	nop			; (mov r8, r8)
   21244:	00020db5 	.word	0x00020db5
   21248:	0000108c 	.word	0x0000108c
   2124c:	00022d41 	.word	0x00022d41
   21250:	00001078 	.word	0x00001078
   21254:	00022d1d 	.word	0x00022d1d
   21258:	00038494 	.word	0x00038494
   2125c:	0001df59 	.word	0x0001df59
   21260:	000384a0 	.word	0x000384a0
   21264:	000384b4 	.word	0x000384b4
   21268:	000203ad 	.word	0x000203ad
   2126c:	00150400 	.word	0x00150400
   21270:	000003e7 	.word	0x000003e7
   21274:	00022e89 	.word	0x00022e89
   21278:	0000106c 	.word	0x0000106c
   2127c:	00020e4d 	.word	0x00020e4d
   21280:	000387bc 	.word	0x000387bc
   21284:	000384b8 	.word	0x000384b8
   21288:	000384cc 	.word	0x000384cc
   2128c:	00020e25 	.word	0x00020e25

00021290 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   21290:	b590      	push	{r4, r7, lr}
   21292:	b087      	sub	sp, #28
   21294:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   21296:	230f      	movs	r3, #15
   21298:	18fb      	adds	r3, r7, r3
   2129a:	2200      	movs	r2, #0
   2129c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   2129e:	230f      	movs	r3, #15
   212a0:	18fc      	adds	r4, r7, r3
   212a2:	2308      	movs	r3, #8
   212a4:	18fb      	adds	r3, r7, r3
   212a6:	4adc      	ldr	r2, [pc, #880]	; (21618 <hif_isr+0x388>)
   212a8:	0019      	movs	r1, r3
   212aa:	0010      	movs	r0, r2
   212ac:	4bdb      	ldr	r3, [pc, #876]	; (2161c <hif_isr+0x38c>)
   212ae:	4798      	blx	r3
   212b0:	0003      	movs	r3, r0
   212b2:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   212b4:	230f      	movs	r3, #15
   212b6:	18fb      	adds	r3, r7, r3
   212b8:	781b      	ldrb	r3, [r3, #0]
   212ba:	b25b      	sxtb	r3, r3
   212bc:	2b00      	cmp	r3, #0
   212be:	d000      	beq.n	212c2 <hif_isr+0x32>
   212c0:	e21e      	b.n	21700 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   212c2:	68bb      	ldr	r3, [r7, #8]
   212c4:	2201      	movs	r2, #1
   212c6:	4013      	ands	r3, r2
   212c8:	d100      	bne.n	212cc <hif_isr+0x3c>
   212ca:	e204      	b.n	216d6 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   212cc:	2000      	movs	r0, #0
   212ce:	4bd4      	ldr	r3, [pc, #848]	; (21620 <hif_isr+0x390>)
   212d0:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   212d2:	68bb      	ldr	r3, [r7, #8]
   212d4:	2201      	movs	r2, #1
   212d6:	4393      	bics	r3, r2
   212d8:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   212da:	68bb      	ldr	r3, [r7, #8]
   212dc:	220f      	movs	r2, #15
   212de:	18bc      	adds	r4, r7, r2
   212e0:	4acd      	ldr	r2, [pc, #820]	; (21618 <hif_isr+0x388>)
   212e2:	0019      	movs	r1, r3
   212e4:	0010      	movs	r0, r2
   212e6:	4bcf      	ldr	r3, [pc, #828]	; (21624 <hif_isr+0x394>)
   212e8:	4798      	blx	r3
   212ea:	0003      	movs	r3, r0
   212ec:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   212ee:	230f      	movs	r3, #15
   212f0:	18fb      	adds	r3, r7, r3
   212f2:	781b      	ldrb	r3, [r3, #0]
   212f4:	b25b      	sxtb	r3, r3
   212f6:	2b00      	cmp	r3, #0
   212f8:	d000      	beq.n	212fc <hif_isr+0x6c>
   212fa:	e210      	b.n	2171e <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   212fc:	4bca      	ldr	r3, [pc, #808]	; (21628 <hif_isr+0x398>)
   212fe:	2201      	movs	r2, #1
   21300:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   21302:	68bb      	ldr	r3, [r7, #8]
   21304:	089b      	lsrs	r3, r3, #2
   21306:	b29a      	uxth	r2, r3
   21308:	230c      	movs	r3, #12
   2130a:	18fb      	adds	r3, r7, r3
   2130c:	0512      	lsls	r2, r2, #20
   2130e:	0d12      	lsrs	r2, r2, #20
   21310:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   21312:	230c      	movs	r3, #12
   21314:	18fb      	adds	r3, r7, r3
   21316:	881b      	ldrh	r3, [r3, #0]
   21318:	2b00      	cmp	r3, #0
   2131a:	d100      	bne.n	2131e <hif_isr+0x8e>
   2131c:	e1c8      	b.n	216b0 <hif_isr+0x420>
				uint32 address = 0;
   2131e:	2300      	movs	r3, #0
   21320:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   21322:	230f      	movs	r3, #15
   21324:	18fc      	adds	r4, r7, r3
   21326:	003b      	movs	r3, r7
   21328:	4ac0      	ldr	r2, [pc, #768]	; (2162c <hif_isr+0x39c>)
   2132a:	0019      	movs	r1, r3
   2132c:	0010      	movs	r0, r2
   2132e:	4bbb      	ldr	r3, [pc, #748]	; (2161c <hif_isr+0x38c>)
   21330:	4798      	blx	r3
   21332:	0003      	movs	r3, r0
   21334:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   21336:	230f      	movs	r3, #15
   21338:	18fb      	adds	r3, r7, r3
   2133a:	781b      	ldrb	r3, [r3, #0]
   2133c:	b25b      	sxtb	r3, r3
   2133e:	2b00      	cmp	r3, #0
   21340:	d012      	beq.n	21368 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   21342:	23e4      	movs	r3, #228	; 0xe4
   21344:	005a      	lsls	r2, r3, #1
   21346:	49ba      	ldr	r1, [pc, #744]	; (21630 <hif_isr+0x3a0>)
   21348:	4bba      	ldr	r3, [pc, #744]	; (21634 <hif_isr+0x3a4>)
   2134a:	0018      	movs	r0, r3
   2134c:	4bba      	ldr	r3, [pc, #744]	; (21638 <hif_isr+0x3a8>)
   2134e:	4798      	blx	r3
   21350:	4bba      	ldr	r3, [pc, #744]	; (2163c <hif_isr+0x3ac>)
   21352:	0018      	movs	r0, r3
   21354:	4bb8      	ldr	r3, [pc, #736]	; (21638 <hif_isr+0x3a8>)
   21356:	4798      	blx	r3
   21358:	4bb9      	ldr	r3, [pc, #740]	; (21640 <hif_isr+0x3b0>)
   2135a:	0018      	movs	r0, r3
   2135c:	4bb6      	ldr	r3, [pc, #728]	; (21638 <hif_isr+0x3a8>)
   2135e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21360:	2001      	movs	r0, #1
   21362:	4baf      	ldr	r3, [pc, #700]	; (21620 <hif_isr+0x390>)
   21364:	4798      	blx	r3
					goto ERR1;
   21366:	e1db      	b.n	21720 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   21368:	683a      	ldr	r2, [r7, #0]
   2136a:	4baf      	ldr	r3, [pc, #700]	; (21628 <hif_isr+0x398>)
   2136c:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   2136e:	230c      	movs	r3, #12
   21370:	18fb      	adds	r3, r7, r3
   21372:	881a      	ldrh	r2, [r3, #0]
   21374:	4bac      	ldr	r3, [pc, #688]	; (21628 <hif_isr+0x398>)
   21376:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   21378:	683b      	ldr	r3, [r7, #0]
   2137a:	220f      	movs	r2, #15
   2137c:	18bc      	adds	r4, r7, r2
   2137e:	1d39      	adds	r1, r7, #4
   21380:	2204      	movs	r2, #4
   21382:	0018      	movs	r0, r3
   21384:	4baf      	ldr	r3, [pc, #700]	; (21644 <hif_isr+0x3b4>)
   21386:	4798      	blx	r3
   21388:	0003      	movs	r3, r0
   2138a:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   2138c:	1d3b      	adds	r3, r7, #4
   2138e:	885b      	ldrh	r3, [r3, #2]
   21390:	b29a      	uxth	r2, r3
   21392:	1d3b      	adds	r3, r7, #4
   21394:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   21396:	230f      	movs	r3, #15
   21398:	18fb      	adds	r3, r7, r3
   2139a:	781b      	ldrb	r3, [r3, #0]
   2139c:	b25b      	sxtb	r3, r3
   2139e:	2b00      	cmp	r3, #0
   213a0:	d012      	beq.n	213c8 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   213a2:	23e9      	movs	r3, #233	; 0xe9
   213a4:	005a      	lsls	r2, r3, #1
   213a6:	49a2      	ldr	r1, [pc, #648]	; (21630 <hif_isr+0x3a0>)
   213a8:	4ba2      	ldr	r3, [pc, #648]	; (21634 <hif_isr+0x3a4>)
   213aa:	0018      	movs	r0, r3
   213ac:	4ba2      	ldr	r3, [pc, #648]	; (21638 <hif_isr+0x3a8>)
   213ae:	4798      	blx	r3
   213b0:	4ba5      	ldr	r3, [pc, #660]	; (21648 <hif_isr+0x3b8>)
   213b2:	0018      	movs	r0, r3
   213b4:	4ba0      	ldr	r3, [pc, #640]	; (21638 <hif_isr+0x3a8>)
   213b6:	4798      	blx	r3
   213b8:	4ba1      	ldr	r3, [pc, #644]	; (21640 <hif_isr+0x3b0>)
   213ba:	0018      	movs	r0, r3
   213bc:	4b9e      	ldr	r3, [pc, #632]	; (21638 <hif_isr+0x3a8>)
   213be:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   213c0:	2001      	movs	r0, #1
   213c2:	4b97      	ldr	r3, [pc, #604]	; (21620 <hif_isr+0x390>)
   213c4:	4798      	blx	r3
					goto ERR1;
   213c6:	e1ab      	b.n	21720 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   213c8:	1d3b      	adds	r3, r7, #4
   213ca:	885b      	ldrh	r3, [r3, #2]
   213cc:	b29b      	uxth	r3, r3
   213ce:	220c      	movs	r2, #12
   213d0:	18ba      	adds	r2, r7, r2
   213d2:	8812      	ldrh	r2, [r2, #0]
   213d4:	429a      	cmp	r2, r3
   213d6:	d02f      	beq.n	21438 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   213d8:	230c      	movs	r3, #12
   213da:	18fb      	adds	r3, r7, r3
   213dc:	881b      	ldrh	r3, [r3, #0]
   213de:	1d3a      	adds	r2, r7, #4
   213e0:	8852      	ldrh	r2, [r2, #2]
   213e2:	b292      	uxth	r2, r2
   213e4:	1a9b      	subs	r3, r3, r2
   213e6:	2b04      	cmp	r3, #4
   213e8:	dd26      	ble.n	21438 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   213ea:	23dc      	movs	r3, #220	; 0xdc
   213ec:	33ff      	adds	r3, #255	; 0xff
   213ee:	001a      	movs	r2, r3
   213f0:	498f      	ldr	r1, [pc, #572]	; (21630 <hif_isr+0x3a0>)
   213f2:	4b90      	ldr	r3, [pc, #576]	; (21634 <hif_isr+0x3a4>)
   213f4:	0018      	movs	r0, r3
   213f6:	4b90      	ldr	r3, [pc, #576]	; (21638 <hif_isr+0x3a8>)
   213f8:	4798      	blx	r3
   213fa:	230c      	movs	r3, #12
   213fc:	18fb      	adds	r3, r7, r3
   213fe:	8819      	ldrh	r1, [r3, #0]
   21400:	1d3b      	adds	r3, r7, #4
   21402:	885b      	ldrh	r3, [r3, #2]
   21404:	b29b      	uxth	r3, r3
   21406:	001a      	movs	r2, r3
   21408:	1d3b      	adds	r3, r7, #4
   2140a:	781b      	ldrb	r3, [r3, #0]
   2140c:	b2db      	uxtb	r3, r3
   2140e:	001c      	movs	r4, r3
   21410:	1d3b      	adds	r3, r7, #4
   21412:	785b      	ldrb	r3, [r3, #1]
   21414:	b2db      	uxtb	r3, r3
   21416:	488d      	ldr	r0, [pc, #564]	; (2164c <hif_isr+0x3bc>)
   21418:	9300      	str	r3, [sp, #0]
   2141a:	0023      	movs	r3, r4
   2141c:	4c86      	ldr	r4, [pc, #536]	; (21638 <hif_isr+0x3a8>)
   2141e:	47a0      	blx	r4
   21420:	4b87      	ldr	r3, [pc, #540]	; (21640 <hif_isr+0x3b0>)
   21422:	0018      	movs	r0, r3
   21424:	4b84      	ldr	r3, [pc, #528]	; (21638 <hif_isr+0x3a8>)
   21426:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   21428:	2001      	movs	r0, #1
   2142a:	4b7d      	ldr	r3, [pc, #500]	; (21620 <hif_isr+0x390>)
   2142c:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   2142e:	230f      	movs	r3, #15
   21430:	18fb      	adds	r3, r7, r3
   21432:	22fa      	movs	r2, #250	; 0xfa
   21434:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   21436:	e173      	b.n	21720 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   21438:	1d3b      	adds	r3, r7, #4
   2143a:	781b      	ldrb	r3, [r3, #0]
   2143c:	b2db      	uxtb	r3, r3
   2143e:	2b01      	cmp	r3, #1
   21440:	d122      	bne.n	21488 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   21442:	4b79      	ldr	r3, [pc, #484]	; (21628 <hif_isr+0x398>)
   21444:	691b      	ldr	r3, [r3, #16]
   21446:	2b00      	cmp	r3, #0
   21448:	d00d      	beq.n	21466 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2144a:	4b77      	ldr	r3, [pc, #476]	; (21628 <hif_isr+0x398>)
   2144c:	691b      	ldr	r3, [r3, #16]
   2144e:	1d3a      	adds	r2, r7, #4
   21450:	7852      	ldrb	r2, [r2, #1]
   21452:	b2d0      	uxtb	r0, r2
   21454:	1d3a      	adds	r2, r7, #4
   21456:	8852      	ldrh	r2, [r2, #2]
   21458:	b292      	uxth	r2, r2
   2145a:	3a08      	subs	r2, #8
   2145c:	b291      	uxth	r1, r2
   2145e:	683a      	ldr	r2, [r7, #0]
   21460:	3208      	adds	r2, #8
   21462:	4798      	blx	r3
   21464:	e102      	b.n	2166c <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   21466:	23e8      	movs	r3, #232	; 0xe8
   21468:	33ff      	adds	r3, #255	; 0xff
   2146a:	001a      	movs	r2, r3
   2146c:	4970      	ldr	r1, [pc, #448]	; (21630 <hif_isr+0x3a0>)
   2146e:	4b71      	ldr	r3, [pc, #452]	; (21634 <hif_isr+0x3a4>)
   21470:	0018      	movs	r0, r3
   21472:	4b71      	ldr	r3, [pc, #452]	; (21638 <hif_isr+0x3a8>)
   21474:	4798      	blx	r3
   21476:	4b76      	ldr	r3, [pc, #472]	; (21650 <hif_isr+0x3c0>)
   21478:	0018      	movs	r0, r3
   2147a:	4b6f      	ldr	r3, [pc, #444]	; (21638 <hif_isr+0x3a8>)
   2147c:	4798      	blx	r3
   2147e:	4b70      	ldr	r3, [pc, #448]	; (21640 <hif_isr+0x3b0>)
   21480:	0018      	movs	r0, r3
   21482:	4b6d      	ldr	r3, [pc, #436]	; (21638 <hif_isr+0x3a8>)
   21484:	4798      	blx	r3
   21486:	e0f1      	b.n	2166c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   21488:	1d3b      	adds	r3, r7, #4
   2148a:	781b      	ldrb	r3, [r3, #0]
   2148c:	b2db      	uxtb	r3, r3
   2148e:	2b02      	cmp	r3, #2
   21490:	d122      	bne.n	214d8 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   21492:	4b65      	ldr	r3, [pc, #404]	; (21628 <hif_isr+0x398>)
   21494:	695b      	ldr	r3, [r3, #20]
   21496:	2b00      	cmp	r3, #0
   21498:	d00d      	beq.n	214b6 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2149a:	4b63      	ldr	r3, [pc, #396]	; (21628 <hif_isr+0x398>)
   2149c:	695b      	ldr	r3, [r3, #20]
   2149e:	1d3a      	adds	r2, r7, #4
   214a0:	7852      	ldrb	r2, [r2, #1]
   214a2:	b2d0      	uxtb	r0, r2
   214a4:	1d3a      	adds	r2, r7, #4
   214a6:	8852      	ldrh	r2, [r2, #2]
   214a8:	b292      	uxth	r2, r2
   214aa:	3a08      	subs	r2, #8
   214ac:	b291      	uxth	r1, r2
   214ae:	683a      	ldr	r2, [r7, #0]
   214b0:	3208      	adds	r2, #8
   214b2:	4798      	blx	r3
   214b4:	e0da      	b.n	2166c <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   214b6:	23f0      	movs	r3, #240	; 0xf0
   214b8:	33ff      	adds	r3, #255	; 0xff
   214ba:	001a      	movs	r2, r3
   214bc:	495c      	ldr	r1, [pc, #368]	; (21630 <hif_isr+0x3a0>)
   214be:	4b5d      	ldr	r3, [pc, #372]	; (21634 <hif_isr+0x3a4>)
   214c0:	0018      	movs	r0, r3
   214c2:	4b5d      	ldr	r3, [pc, #372]	; (21638 <hif_isr+0x3a8>)
   214c4:	4798      	blx	r3
   214c6:	4b63      	ldr	r3, [pc, #396]	; (21654 <hif_isr+0x3c4>)
   214c8:	0018      	movs	r0, r3
   214ca:	4b5b      	ldr	r3, [pc, #364]	; (21638 <hif_isr+0x3a8>)
   214cc:	4798      	blx	r3
   214ce:	4b5c      	ldr	r3, [pc, #368]	; (21640 <hif_isr+0x3b0>)
   214d0:	0018      	movs	r0, r3
   214d2:	4b59      	ldr	r3, [pc, #356]	; (21638 <hif_isr+0x3a8>)
   214d4:	4798      	blx	r3
   214d6:	e0c9      	b.n	2166c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   214d8:	1d3b      	adds	r3, r7, #4
   214da:	781b      	ldrb	r3, [r3, #0]
   214dc:	b2db      	uxtb	r3, r3
   214de:	2b04      	cmp	r3, #4
   214e0:	d122      	bne.n	21528 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   214e2:	4b51      	ldr	r3, [pc, #324]	; (21628 <hif_isr+0x398>)
   214e4:	699b      	ldr	r3, [r3, #24]
   214e6:	2b00      	cmp	r3, #0
   214e8:	d00d      	beq.n	21506 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   214ea:	4b4f      	ldr	r3, [pc, #316]	; (21628 <hif_isr+0x398>)
   214ec:	699b      	ldr	r3, [r3, #24]
   214ee:	1d3a      	adds	r2, r7, #4
   214f0:	7852      	ldrb	r2, [r2, #1]
   214f2:	b2d0      	uxtb	r0, r2
   214f4:	1d3a      	adds	r2, r7, #4
   214f6:	8852      	ldrh	r2, [r2, #2]
   214f8:	b292      	uxth	r2, r2
   214fa:	3a08      	subs	r2, #8
   214fc:	b291      	uxth	r1, r2
   214fe:	683a      	ldr	r2, [r7, #0]
   21500:	3208      	adds	r2, #8
   21502:	4798      	blx	r3
   21504:	e0b2      	b.n	2166c <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   21506:	23f8      	movs	r3, #248	; 0xf8
   21508:	33ff      	adds	r3, #255	; 0xff
   2150a:	001a      	movs	r2, r3
   2150c:	4948      	ldr	r1, [pc, #288]	; (21630 <hif_isr+0x3a0>)
   2150e:	4b49      	ldr	r3, [pc, #292]	; (21634 <hif_isr+0x3a4>)
   21510:	0018      	movs	r0, r3
   21512:	4b49      	ldr	r3, [pc, #292]	; (21638 <hif_isr+0x3a8>)
   21514:	4798      	blx	r3
   21516:	4b50      	ldr	r3, [pc, #320]	; (21658 <hif_isr+0x3c8>)
   21518:	0018      	movs	r0, r3
   2151a:	4b47      	ldr	r3, [pc, #284]	; (21638 <hif_isr+0x3a8>)
   2151c:	4798      	blx	r3
   2151e:	4b48      	ldr	r3, [pc, #288]	; (21640 <hif_isr+0x3b0>)
   21520:	0018      	movs	r0, r3
   21522:	4b45      	ldr	r3, [pc, #276]	; (21638 <hif_isr+0x3a8>)
   21524:	4798      	blx	r3
   21526:	e0a1      	b.n	2166c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   21528:	1d3b      	adds	r3, r7, #4
   2152a:	781b      	ldrb	r3, [r3, #0]
   2152c:	b2db      	uxtb	r3, r3
   2152e:	2b06      	cmp	r3, #6
   21530:	d121      	bne.n	21576 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   21532:	4b3d      	ldr	r3, [pc, #244]	; (21628 <hif_isr+0x398>)
   21534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21536:	2b00      	cmp	r3, #0
   21538:	d00d      	beq.n	21556 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2153a:	4b3b      	ldr	r3, [pc, #236]	; (21628 <hif_isr+0x398>)
   2153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2153e:	1d3a      	adds	r2, r7, #4
   21540:	7852      	ldrb	r2, [r2, #1]
   21542:	b2d0      	uxtb	r0, r2
   21544:	1d3a      	adds	r2, r7, #4
   21546:	8852      	ldrh	r2, [r2, #2]
   21548:	b292      	uxth	r2, r2
   2154a:	3a08      	subs	r2, #8
   2154c:	b291      	uxth	r1, r2
   2154e:	683a      	ldr	r2, [r7, #0]
   21550:	3208      	adds	r2, #8
   21552:	4798      	blx	r3
   21554:	e08a      	b.n	2166c <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   21556:	2380      	movs	r3, #128	; 0x80
   21558:	009a      	lsls	r2, r3, #2
   2155a:	4935      	ldr	r1, [pc, #212]	; (21630 <hif_isr+0x3a0>)
   2155c:	4b35      	ldr	r3, [pc, #212]	; (21634 <hif_isr+0x3a4>)
   2155e:	0018      	movs	r0, r3
   21560:	4b35      	ldr	r3, [pc, #212]	; (21638 <hif_isr+0x3a8>)
   21562:	4798      	blx	r3
   21564:	4b3d      	ldr	r3, [pc, #244]	; (2165c <hif_isr+0x3cc>)
   21566:	0018      	movs	r0, r3
   21568:	4b33      	ldr	r3, [pc, #204]	; (21638 <hif_isr+0x3a8>)
   2156a:	4798      	blx	r3
   2156c:	4b34      	ldr	r3, [pc, #208]	; (21640 <hif_isr+0x3b0>)
   2156e:	0018      	movs	r0, r3
   21570:	4b31      	ldr	r3, [pc, #196]	; (21638 <hif_isr+0x3a8>)
   21572:	4798      	blx	r3
   21574:	e07a      	b.n	2166c <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   21576:	1d3b      	adds	r3, r7, #4
   21578:	781b      	ldrb	r3, [r3, #0]
   2157a:	b2db      	uxtb	r3, r3
   2157c:	2b07      	cmp	r3, #7
   2157e:	d120      	bne.n	215c2 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   21580:	4b29      	ldr	r3, [pc, #164]	; (21628 <hif_isr+0x398>)
   21582:	69db      	ldr	r3, [r3, #28]
   21584:	2b00      	cmp	r3, #0
   21586:	d00d      	beq.n	215a4 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21588:	4b27      	ldr	r3, [pc, #156]	; (21628 <hif_isr+0x398>)
   2158a:	69db      	ldr	r3, [r3, #28]
   2158c:	1d3a      	adds	r2, r7, #4
   2158e:	7852      	ldrb	r2, [r2, #1]
   21590:	b2d0      	uxtb	r0, r2
   21592:	1d3a      	adds	r2, r7, #4
   21594:	8852      	ldrh	r2, [r2, #2]
   21596:	b292      	uxth	r2, r2
   21598:	3a08      	subs	r2, #8
   2159a:	b291      	uxth	r1, r2
   2159c:	683a      	ldr	r2, [r7, #0]
   2159e:	3208      	adds	r2, #8
   215a0:	4798      	blx	r3
   215a2:	e063      	b.n	2166c <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   215a4:	4a2e      	ldr	r2, [pc, #184]	; (21660 <hif_isr+0x3d0>)
   215a6:	4922      	ldr	r1, [pc, #136]	; (21630 <hif_isr+0x3a0>)
   215a8:	4b22      	ldr	r3, [pc, #136]	; (21634 <hif_isr+0x3a4>)
   215aa:	0018      	movs	r0, r3
   215ac:	4b22      	ldr	r3, [pc, #136]	; (21638 <hif_isr+0x3a8>)
   215ae:	4798      	blx	r3
   215b0:	4b2c      	ldr	r3, [pc, #176]	; (21664 <hif_isr+0x3d4>)
   215b2:	0018      	movs	r0, r3
   215b4:	4b20      	ldr	r3, [pc, #128]	; (21638 <hif_isr+0x3a8>)
   215b6:	4798      	blx	r3
   215b8:	4b21      	ldr	r3, [pc, #132]	; (21640 <hif_isr+0x3b0>)
   215ba:	0018      	movs	r0, r3
   215bc:	4b1e      	ldr	r3, [pc, #120]	; (21638 <hif_isr+0x3a8>)
   215be:	4798      	blx	r3
   215c0:	e054      	b.n	2166c <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   215c2:	1d3b      	adds	r3, r7, #4
   215c4:	781b      	ldrb	r3, [r3, #0]
   215c6:	b2db      	uxtb	r3, r3
   215c8:	2b05      	cmp	r3, #5
   215ca:	d111      	bne.n	215f0 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   215cc:	4b16      	ldr	r3, [pc, #88]	; (21628 <hif_isr+0x398>)
   215ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   215d0:	2b00      	cmp	r3, #0
   215d2:	d04b      	beq.n	2166c <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   215d4:	4b14      	ldr	r3, [pc, #80]	; (21628 <hif_isr+0x398>)
   215d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   215d8:	1d3a      	adds	r2, r7, #4
   215da:	7852      	ldrb	r2, [r2, #1]
   215dc:	b2d0      	uxtb	r0, r2
   215de:	1d3a      	adds	r2, r7, #4
   215e0:	8852      	ldrh	r2, [r2, #2]
   215e2:	b292      	uxth	r2, r2
   215e4:	3a08      	subs	r2, #8
   215e6:	b291      	uxth	r1, r2
   215e8:	683a      	ldr	r2, [r7, #0]
   215ea:	3208      	adds	r2, #8
   215ec:	4798      	blx	r3
   215ee:	e03d      	b.n	2166c <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   215f0:	2384      	movs	r3, #132	; 0x84
   215f2:	009a      	lsls	r2, r3, #2
   215f4:	490e      	ldr	r1, [pc, #56]	; (21630 <hif_isr+0x3a0>)
   215f6:	4b0f      	ldr	r3, [pc, #60]	; (21634 <hif_isr+0x3a4>)
   215f8:	0018      	movs	r0, r3
   215fa:	4b0f      	ldr	r3, [pc, #60]	; (21638 <hif_isr+0x3a8>)
   215fc:	4798      	blx	r3
   215fe:	4b1a      	ldr	r3, [pc, #104]	; (21668 <hif_isr+0x3d8>)
   21600:	0018      	movs	r0, r3
   21602:	4b0d      	ldr	r3, [pc, #52]	; (21638 <hif_isr+0x3a8>)
   21604:	4798      	blx	r3
   21606:	4b0e      	ldr	r3, [pc, #56]	; (21640 <hif_isr+0x3b0>)
   21608:	0018      	movs	r0, r3
   2160a:	4b0b      	ldr	r3, [pc, #44]	; (21638 <hif_isr+0x3a8>)
   2160c:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   2160e:	230f      	movs	r3, #15
   21610:	18fb      	adds	r3, r7, r3
   21612:	22fa      	movs	r2, #250	; 0xfa
   21614:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21616:	e083      	b.n	21720 <hif_isr+0x490>
   21618:	00001070 	.word	0x00001070
   2161c:	00022d1d 	.word	0x00022d1d
   21620:	00020441 	.word	0x00020441
   21624:	00022d41 	.word	0x00022d41
   21628:	20005954 	.word	0x20005954
   2162c:	00001084 	.word	0x00001084
   21630:	000387c8 	.word	0x000387c8
   21634:	000384b8 	.word	0x000384b8
   21638:	0001df59 	.word	0x0001df59
   2163c:	000384ec 	.word	0x000384ec
   21640:	000384b4 	.word	0x000384b4
   21644:	00022d91 	.word	0x00022d91
   21648:	00038514 	.word	0x00038514
   2164c:	0003852c 	.word	0x0003852c
   21650:	0003856c 	.word	0x0003856c
   21654:	00038590 	.word	0x00038590
   21658:	000385b4 	.word	0x000385b4
   2165c:	000385d4 	.word	0x000385d4
   21660:	00000207 	.word	0x00000207
   21664:	000385f8 	.word	0x000385f8
   21668:	0003861c 	.word	0x0003861c
				}
				if(gstrHifCxt.u8HifRXDone)
   2166c:	4b30      	ldr	r3, [pc, #192]	; (21730 <hif_isr+0x4a0>)
   2166e:	789b      	ldrb	r3, [r3, #2]
   21670:	b2db      	uxtb	r3, r3
   21672:	2b00      	cmp	r3, #0
   21674:	d054      	beq.n	21720 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   21676:	4a2f      	ldr	r2, [pc, #188]	; (21734 <hif_isr+0x4a4>)
   21678:	492f      	ldr	r1, [pc, #188]	; (21738 <hif_isr+0x4a8>)
   2167a:	4b30      	ldr	r3, [pc, #192]	; (2173c <hif_isr+0x4ac>)
   2167c:	0018      	movs	r0, r3
   2167e:	4b30      	ldr	r3, [pc, #192]	; (21740 <hif_isr+0x4b0>)
   21680:	4798      	blx	r3
   21682:	1d3b      	adds	r3, r7, #4
   21684:	781b      	ldrb	r3, [r3, #0]
   21686:	b2db      	uxtb	r3, r3
   21688:	0019      	movs	r1, r3
   2168a:	1d3b      	adds	r3, r7, #4
   2168c:	785b      	ldrb	r3, [r3, #1]
   2168e:	b2db      	uxtb	r3, r3
   21690:	001a      	movs	r2, r3
   21692:	4b2c      	ldr	r3, [pc, #176]	; (21744 <hif_isr+0x4b4>)
   21694:	0018      	movs	r0, r3
   21696:	4b2a      	ldr	r3, [pc, #168]	; (21740 <hif_isr+0x4b0>)
   21698:	4798      	blx	r3
   2169a:	4b2b      	ldr	r3, [pc, #172]	; (21748 <hif_isr+0x4b8>)
   2169c:	0018      	movs	r0, r3
   2169e:	4b28      	ldr	r3, [pc, #160]	; (21740 <hif_isr+0x4b0>)
   216a0:	4798      	blx	r3
					ret = hif_set_rx_done();
   216a2:	230f      	movs	r3, #15
   216a4:	18fc      	adds	r4, r7, r3
   216a6:	4b29      	ldr	r3, [pc, #164]	; (2174c <hif_isr+0x4bc>)
   216a8:	4798      	blx	r3
   216aa:	0003      	movs	r3, r0
   216ac:	7023      	strb	r3, [r4, #0]
   216ae:	e037      	b.n	21720 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   216b0:	4a27      	ldr	r2, [pc, #156]	; (21750 <hif_isr+0x4c0>)
   216b2:	4921      	ldr	r1, [pc, #132]	; (21738 <hif_isr+0x4a8>)
   216b4:	4b21      	ldr	r3, [pc, #132]	; (2173c <hif_isr+0x4ac>)
   216b6:	0018      	movs	r0, r3
   216b8:	4b21      	ldr	r3, [pc, #132]	; (21740 <hif_isr+0x4b0>)
   216ba:	4798      	blx	r3
   216bc:	4b25      	ldr	r3, [pc, #148]	; (21754 <hif_isr+0x4c4>)
   216be:	0018      	movs	r0, r3
   216c0:	4b1f      	ldr	r3, [pc, #124]	; (21740 <hif_isr+0x4b0>)
   216c2:	4798      	blx	r3
   216c4:	4b20      	ldr	r3, [pc, #128]	; (21748 <hif_isr+0x4b8>)
   216c6:	0018      	movs	r0, r3
   216c8:	4b1d      	ldr	r3, [pc, #116]	; (21740 <hif_isr+0x4b0>)
   216ca:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   216cc:	230f      	movs	r3, #15
   216ce:	18fb      	adds	r3, r7, r3
   216d0:	22fe      	movs	r2, #254	; 0xfe
   216d2:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   216d4:	e024      	b.n	21720 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   216d6:	4a20      	ldr	r2, [pc, #128]	; (21758 <hif_isr+0x4c8>)
   216d8:	4917      	ldr	r1, [pc, #92]	; (21738 <hif_isr+0x4a8>)
   216da:	4b18      	ldr	r3, [pc, #96]	; (2173c <hif_isr+0x4ac>)
   216dc:	0018      	movs	r0, r3
   216de:	4b18      	ldr	r3, [pc, #96]	; (21740 <hif_isr+0x4b0>)
   216e0:	4798      	blx	r3
   216e2:	68ba      	ldr	r2, [r7, #8]
   216e4:	4b1d      	ldr	r3, [pc, #116]	; (2175c <hif_isr+0x4cc>)
   216e6:	0011      	movs	r1, r2
   216e8:	0018      	movs	r0, r3
   216ea:	4b15      	ldr	r3, [pc, #84]	; (21740 <hif_isr+0x4b0>)
   216ec:	4798      	blx	r3
   216ee:	4b16      	ldr	r3, [pc, #88]	; (21748 <hif_isr+0x4b8>)
   216f0:	0018      	movs	r0, r3
   216f2:	4b13      	ldr	r3, [pc, #76]	; (21740 <hif_isr+0x4b0>)
   216f4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   216f6:	230f      	movs	r3, #15
   216f8:	18fb      	adds	r3, r7, r3
   216fa:	22f4      	movs	r2, #244	; 0xf4
   216fc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   216fe:	e00f      	b.n	21720 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   21700:	4a17      	ldr	r2, [pc, #92]	; (21760 <hif_isr+0x4d0>)
   21702:	490d      	ldr	r1, [pc, #52]	; (21738 <hif_isr+0x4a8>)
   21704:	4b0d      	ldr	r3, [pc, #52]	; (2173c <hif_isr+0x4ac>)
   21706:	0018      	movs	r0, r3
   21708:	4b0d      	ldr	r3, [pc, #52]	; (21740 <hif_isr+0x4b0>)
   2170a:	4798      	blx	r3
   2170c:	4b15      	ldr	r3, [pc, #84]	; (21764 <hif_isr+0x4d4>)
   2170e:	0018      	movs	r0, r3
   21710:	4b0b      	ldr	r3, [pc, #44]	; (21740 <hif_isr+0x4b0>)
   21712:	4798      	blx	r3
   21714:	4b0c      	ldr	r3, [pc, #48]	; (21748 <hif_isr+0x4b8>)
   21716:	0018      	movs	r0, r3
   21718:	4b09      	ldr	r3, [pc, #36]	; (21740 <hif_isr+0x4b0>)
   2171a:	4798      	blx	r3
		goto ERR1;
   2171c:	e000      	b.n	21720 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   2171e:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21720:	230f      	movs	r3, #15
   21722:	18fb      	adds	r3, r7, r3
   21724:	781b      	ldrb	r3, [r3, #0]
   21726:	b25b      	sxtb	r3, r3
}
   21728:	0018      	movs	r0, r3
   2172a:	46bd      	mov	sp, r7
   2172c:	b005      	add	sp, #20
   2172e:	bd90      	pop	{r4, r7, pc}
   21730:	20005954 	.word	0x20005954
   21734:	00000216 	.word	0x00000216
   21738:	000387c8 	.word	0x000387c8
   2173c:	000384b8 	.word	0x000384b8
   21740:	0001df59 	.word	0x0001df59
   21744:	00038634 	.word	0x00038634
   21748:	000384b4 	.word	0x000384b4
   2174c:	00020d25 	.word	0x00020d25
   21750:	0000021d 	.word	0x0000021d
   21754:	00038660 	.word	0x00038660
   21758:	00000225 	.word	0x00000225
   2175c:	00038674 	.word	0x00038674
   21760:	0000022e 	.word	0x0000022e
   21764:	00038690 	.word	0x00038690

00021768 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   21768:	b590      	push	{r4, r7, lr}
   2176a:	b083      	sub	sp, #12
   2176c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   2176e:	1dfb      	adds	r3, r7, #7
   21770:	2200      	movs	r2, #0
   21772:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   21774:	4b1c      	ldr	r3, [pc, #112]	; (217e8 <hif_handle_isr+0x80>)
   21776:	2200      	movs	r2, #0
   21778:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2177a:	e024      	b.n	217c6 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   2177c:	4b1a      	ldr	r3, [pc, #104]	; (217e8 <hif_handle_isr+0x80>)
   2177e:	78db      	ldrb	r3, [r3, #3]
   21780:	b2db      	uxtb	r3, r3
   21782:	3b01      	subs	r3, #1
   21784:	b2da      	uxtb	r2, r3
   21786:	4b18      	ldr	r3, [pc, #96]	; (217e8 <hif_handle_isr+0x80>)
   21788:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2178a:	1dfc      	adds	r4, r7, #7
   2178c:	4b17      	ldr	r3, [pc, #92]	; (217ec <hif_handle_isr+0x84>)
   2178e:	4798      	blx	r3
   21790:	0003      	movs	r3, r0
   21792:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21794:	1dfb      	adds	r3, r7, #7
   21796:	781b      	ldrb	r3, [r3, #0]
   21798:	b25b      	sxtb	r3, r3
   2179a:	2b00      	cmp	r3, #0
   2179c:	d100      	bne.n	217a0 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   2179e:	e012      	b.n	217c6 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   217a0:	4a13      	ldr	r2, [pc, #76]	; (217f0 <hif_handle_isr+0x88>)
   217a2:	4914      	ldr	r1, [pc, #80]	; (217f4 <hif_handle_isr+0x8c>)
   217a4:	4b14      	ldr	r3, [pc, #80]	; (217f8 <hif_handle_isr+0x90>)
   217a6:	0018      	movs	r0, r3
   217a8:	4b14      	ldr	r3, [pc, #80]	; (217fc <hif_handle_isr+0x94>)
   217aa:	4798      	blx	r3
   217ac:	1dfb      	adds	r3, r7, #7
   217ae:	2200      	movs	r2, #0
   217b0:	569a      	ldrsb	r2, [r3, r2]
   217b2:	4b13      	ldr	r3, [pc, #76]	; (21800 <hif_handle_isr+0x98>)
   217b4:	0011      	movs	r1, r2
   217b6:	0018      	movs	r0, r3
   217b8:	4b10      	ldr	r3, [pc, #64]	; (217fc <hif_handle_isr+0x94>)
   217ba:	4798      	blx	r3
   217bc:	4b11      	ldr	r3, [pc, #68]	; (21804 <hif_handle_isr+0x9c>)
   217be:	0018      	movs	r0, r3
   217c0:	4b0e      	ldr	r3, [pc, #56]	; (217fc <hif_handle_isr+0x94>)
   217c2:	4798      	blx	r3
			ret = hif_isr();
   217c4:	e7e1      	b.n	2178a <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   217c6:	4b08      	ldr	r3, [pc, #32]	; (217e8 <hif_handle_isr+0x80>)
   217c8:	78db      	ldrb	r3, [r3, #3]
   217ca:	b2db      	uxtb	r3, r3
   217cc:	2b00      	cmp	r3, #0
   217ce:	d004      	beq.n	217da <hif_handle_isr+0x72>
   217d0:	4b05      	ldr	r3, [pc, #20]	; (217e8 <hif_handle_isr+0x80>)
   217d2:	791b      	ldrb	r3, [r3, #4]
   217d4:	b2db      	uxtb	r3, r3
   217d6:	2b00      	cmp	r3, #0
   217d8:	d0d0      	beq.n	2177c <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   217da:	1dfb      	adds	r3, r7, #7
   217dc:	781b      	ldrb	r3, [r3, #0]
   217de:	b25b      	sxtb	r3, r3
}
   217e0:	0018      	movs	r0, r3
   217e2:	46bd      	mov	sp, r7
   217e4:	b003      	add	sp, #12
   217e6:	bd90      	pop	{r4, r7, pc}
   217e8:	20005954 	.word	0x20005954
   217ec:	00021291 	.word	0x00021291
   217f0:	00000257 	.word	0x00000257
   217f4:	000387d0 	.word	0x000387d0
   217f8:	000384b8 	.word	0x000384b8
   217fc:	0001df59 	.word	0x0001df59
   21800:	000386b4 	.word	0x000386b4
   21804:	000384b4 	.word	0x000384b4

00021808 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   21808:	b590      	push	{r4, r7, lr}
   2180a:	b087      	sub	sp, #28
   2180c:	af00      	add	r7, sp, #0
   2180e:	60f8      	str	r0, [r7, #12]
   21810:	60b9      	str	r1, [r7, #8]
   21812:	0019      	movs	r1, r3
   21814:	1dbb      	adds	r3, r7, #6
   21816:	801a      	strh	r2, [r3, #0]
   21818:	1d7b      	adds	r3, r7, #5
   2181a:	1c0a      	adds	r2, r1, #0
   2181c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2181e:	2317      	movs	r3, #23
   21820:	18fb      	adds	r3, r7, r3
   21822:	2200      	movs	r2, #0
   21824:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   21826:	68fb      	ldr	r3, [r7, #12]
   21828:	2b00      	cmp	r3, #0
   2182a:	d006      	beq.n	2183a <hif_receive+0x32>
   2182c:	68bb      	ldr	r3, [r7, #8]
   2182e:	2b00      	cmp	r3, #0
   21830:	d003      	beq.n	2183a <hif_receive+0x32>
   21832:	1dbb      	adds	r3, r7, #6
   21834:	881b      	ldrh	r3, [r3, #0]
   21836:	2b00      	cmp	r3, #0
   21838:	d11e      	bne.n	21878 <hif_receive+0x70>
	{
		if(isDone)
   2183a:	1d7b      	adds	r3, r7, #5
   2183c:	781b      	ldrb	r3, [r3, #0]
   2183e:	2b00      	cmp	r3, #0
   21840:	d006      	beq.n	21850 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   21842:	2317      	movs	r3, #23
   21844:	18fc      	adds	r4, r7, r3
   21846:	4b45      	ldr	r3, [pc, #276]	; (2195c <hif_receive+0x154>)
   21848:	4798      	blx	r3
   2184a:	0003      	movs	r3, r0
   2184c:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   2184e:	e07c      	b.n	2194a <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   21850:	2317      	movs	r3, #23
   21852:	18fb      	adds	r3, r7, r3
   21854:	22f4      	movs	r2, #244	; 0xf4
   21856:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   21858:	239e      	movs	r3, #158	; 0x9e
   2185a:	009a      	lsls	r2, r3, #2
   2185c:	4940      	ldr	r1, [pc, #256]	; (21960 <hif_receive+0x158>)
   2185e:	4b41      	ldr	r3, [pc, #260]	; (21964 <hif_receive+0x15c>)
   21860:	0018      	movs	r0, r3
   21862:	4b41      	ldr	r3, [pc, #260]	; (21968 <hif_receive+0x160>)
   21864:	4798      	blx	r3
   21866:	4b41      	ldr	r3, [pc, #260]	; (2196c <hif_receive+0x164>)
   21868:	0018      	movs	r0, r3
   2186a:	4b3f      	ldr	r3, [pc, #252]	; (21968 <hif_receive+0x160>)
   2186c:	4798      	blx	r3
   2186e:	4b40      	ldr	r3, [pc, #256]	; (21970 <hif_receive+0x168>)
   21870:	0018      	movs	r0, r3
   21872:	4b3d      	ldr	r3, [pc, #244]	; (21968 <hif_receive+0x160>)
   21874:	4798      	blx	r3
		goto ERR1;
   21876:	e068      	b.n	2194a <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   21878:	1dbb      	adds	r3, r7, #6
   2187a:	881a      	ldrh	r2, [r3, #0]
   2187c:	4b3d      	ldr	r3, [pc, #244]	; (21974 <hif_receive+0x16c>)
   2187e:	68db      	ldr	r3, [r3, #12]
   21880:	429a      	cmp	r2, r3
   21882:	d917      	bls.n	218b4 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   21884:	2317      	movs	r3, #23
   21886:	18fb      	adds	r3, r7, r3
   21888:	22f4      	movs	r2, #244	; 0xf4
   2188a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   2188c:	23a0      	movs	r3, #160	; 0xa0
   2188e:	009a      	lsls	r2, r3, #2
   21890:	4933      	ldr	r1, [pc, #204]	; (21960 <hif_receive+0x158>)
   21892:	4b34      	ldr	r3, [pc, #208]	; (21964 <hif_receive+0x15c>)
   21894:	0018      	movs	r0, r3
   21896:	4b34      	ldr	r3, [pc, #208]	; (21968 <hif_receive+0x160>)
   21898:	4798      	blx	r3
   2189a:	1dbb      	adds	r3, r7, #6
   2189c:	8819      	ldrh	r1, [r3, #0]
   2189e:	4b35      	ldr	r3, [pc, #212]	; (21974 <hif_receive+0x16c>)
   218a0:	68da      	ldr	r2, [r3, #12]
   218a2:	4b35      	ldr	r3, [pc, #212]	; (21978 <hif_receive+0x170>)
   218a4:	0018      	movs	r0, r3
   218a6:	4b30      	ldr	r3, [pc, #192]	; (21968 <hif_receive+0x160>)
   218a8:	4798      	blx	r3
   218aa:	4b31      	ldr	r3, [pc, #196]	; (21970 <hif_receive+0x168>)
   218ac:	0018      	movs	r0, r3
   218ae:	4b2e      	ldr	r3, [pc, #184]	; (21968 <hif_receive+0x160>)
   218b0:	4798      	blx	r3
		goto ERR1;
   218b2:	e04a      	b.n	2194a <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   218b4:	4b2f      	ldr	r3, [pc, #188]	; (21974 <hif_receive+0x16c>)
   218b6:	689a      	ldr	r2, [r3, #8]
   218b8:	68fb      	ldr	r3, [r7, #12]
   218ba:	429a      	cmp	r2, r3
   218bc:	d80a      	bhi.n	218d4 <hif_receive+0xcc>
   218be:	1dbb      	adds	r3, r7, #6
   218c0:	881a      	ldrh	r2, [r3, #0]
   218c2:	68fb      	ldr	r3, [r7, #12]
   218c4:	18d2      	adds	r2, r2, r3
   218c6:	4b2b      	ldr	r3, [pc, #172]	; (21974 <hif_receive+0x16c>)
   218c8:	6899      	ldr	r1, [r3, #8]
   218ca:	4b2a      	ldr	r3, [pc, #168]	; (21974 <hif_receive+0x16c>)
   218cc:	68db      	ldr	r3, [r3, #12]
   218ce:	18cb      	adds	r3, r1, r3
   218d0:	429a      	cmp	r2, r3
   218d2:	d912      	bls.n	218fa <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   218d4:	2317      	movs	r3, #23
   218d6:	18fb      	adds	r3, r7, r3
   218d8:	22f4      	movs	r2, #244	; 0xf4
   218da:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   218dc:	4a27      	ldr	r2, [pc, #156]	; (2197c <hif_receive+0x174>)
   218de:	4920      	ldr	r1, [pc, #128]	; (21960 <hif_receive+0x158>)
   218e0:	4b20      	ldr	r3, [pc, #128]	; (21964 <hif_receive+0x15c>)
   218e2:	0018      	movs	r0, r3
   218e4:	4b20      	ldr	r3, [pc, #128]	; (21968 <hif_receive+0x160>)
   218e6:	4798      	blx	r3
   218e8:	4b25      	ldr	r3, [pc, #148]	; (21980 <hif_receive+0x178>)
   218ea:	0018      	movs	r0, r3
   218ec:	4b1e      	ldr	r3, [pc, #120]	; (21968 <hif_receive+0x160>)
   218ee:	4798      	blx	r3
   218f0:	4b1f      	ldr	r3, [pc, #124]	; (21970 <hif_receive+0x168>)
   218f2:	0018      	movs	r0, r3
   218f4:	4b1c      	ldr	r3, [pc, #112]	; (21968 <hif_receive+0x160>)
   218f6:	4798      	blx	r3
		goto ERR1;
   218f8:	e027      	b.n	2194a <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   218fa:	1dbb      	adds	r3, r7, #6
   218fc:	881a      	ldrh	r2, [r3, #0]
   218fe:	2317      	movs	r3, #23
   21900:	18fc      	adds	r4, r7, r3
   21902:	68b9      	ldr	r1, [r7, #8]
   21904:	68fb      	ldr	r3, [r7, #12]
   21906:	0018      	movs	r0, r3
   21908:	4b1e      	ldr	r3, [pc, #120]	; (21984 <hif_receive+0x17c>)
   2190a:	4798      	blx	r3
   2190c:	0003      	movs	r3, r0
   2190e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21910:	2317      	movs	r3, #23
   21912:	18fb      	adds	r3, r7, r3
   21914:	781b      	ldrb	r3, [r3, #0]
   21916:	b25b      	sxtb	r3, r3
   21918:	2b00      	cmp	r3, #0
   2191a:	d115      	bne.n	21948 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   2191c:	4b15      	ldr	r3, [pc, #84]	; (21974 <hif_receive+0x16c>)
   2191e:	689a      	ldr	r2, [r3, #8]
   21920:	4b14      	ldr	r3, [pc, #80]	; (21974 <hif_receive+0x16c>)
   21922:	68db      	ldr	r3, [r3, #12]
   21924:	18d2      	adds	r2, r2, r3
   21926:	1dbb      	adds	r3, r7, #6
   21928:	8819      	ldrh	r1, [r3, #0]
   2192a:	68fb      	ldr	r3, [r7, #12]
   2192c:	18cb      	adds	r3, r1, r3
   2192e:	429a      	cmp	r2, r3
   21930:	d003      	beq.n	2193a <hif_receive+0x132>
   21932:	1d7b      	adds	r3, r7, #5
   21934:	781b      	ldrb	r3, [r3, #0]
   21936:	2b00      	cmp	r3, #0
   21938:	d007      	beq.n	2194a <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   2193a:	2317      	movs	r3, #23
   2193c:	18fc      	adds	r4, r7, r3
   2193e:	4b07      	ldr	r3, [pc, #28]	; (2195c <hif_receive+0x154>)
   21940:	4798      	blx	r3
   21942:	0003      	movs	r3, r0
   21944:	7023      	strb	r3, [r4, #0]
   21946:	e000      	b.n	2194a <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   21948:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2194a:	2317      	movs	r3, #23
   2194c:	18fb      	adds	r3, r7, r3
   2194e:	781b      	ldrb	r3, [r3, #0]
   21950:	b25b      	sxtb	r3, r3
}
   21952:	0018      	movs	r0, r3
   21954:	46bd      	mov	sp, r7
   21956:	b007      	add	sp, #28
   21958:	bd90      	pop	{r4, r7, pc}
   2195a:	46c0      	nop			; (mov r8, r8)
   2195c:	00020d25 	.word	0x00020d25
   21960:	000387e0 	.word	0x000387e0
   21964:	000384b8 	.word	0x000384b8
   21968:	0001df59 	.word	0x0001df59
   2196c:	000386e4 	.word	0x000386e4
   21970:	000384b4 	.word	0x000384b4
   21974:	20005954 	.word	0x20005954
   21978:	00038704 	.word	0x00038704
   2197c:	00000286 	.word	0x00000286
   21980:	0003874c 	.word	0x0003874c
   21984:	00022d91 	.word	0x00022d91

00021988 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   21988:	b580      	push	{r7, lr}
   2198a:	b084      	sub	sp, #16
   2198c:	af00      	add	r7, sp, #0
   2198e:	0002      	movs	r2, r0
   21990:	6039      	str	r1, [r7, #0]
   21992:	1dfb      	adds	r3, r7, #7
   21994:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21996:	230f      	movs	r3, #15
   21998:	18fb      	adds	r3, r7, r3
   2199a:	2200      	movs	r2, #0
   2199c:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   2199e:	1dfb      	adds	r3, r7, #7
   219a0:	781b      	ldrb	r3, [r3, #0]
   219a2:	2b07      	cmp	r3, #7
   219a4:	d820      	bhi.n	219e8 <hif_register_cb+0x60>
   219a6:	009a      	lsls	r2, r3, #2
   219a8:	4b1e      	ldr	r3, [pc, #120]	; (21a24 <hif_register_cb+0x9c>)
   219aa:	18d3      	adds	r3, r2, r3
   219ac:	681b      	ldr	r3, [r3, #0]
   219ae:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   219b0:	4b1d      	ldr	r3, [pc, #116]	; (21a28 <hif_register_cb+0xa0>)
   219b2:	683a      	ldr	r2, [r7, #0]
   219b4:	615a      	str	r2, [r3, #20]
			break;
   219b6:	e02d      	b.n	21a14 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   219b8:	4b1b      	ldr	r3, [pc, #108]	; (21a28 <hif_register_cb+0xa0>)
   219ba:	683a      	ldr	r2, [r7, #0]
   219bc:	611a      	str	r2, [r3, #16]
			break;
   219be:	e029      	b.n	21a14 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   219c0:	4b19      	ldr	r3, [pc, #100]	; (21a28 <hif_register_cb+0xa0>)
   219c2:	683a      	ldr	r2, [r7, #0]
   219c4:	619a      	str	r2, [r3, #24]
			break;
   219c6:	e025      	b.n	21a14 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   219c8:	4b17      	ldr	r3, [pc, #92]	; (21a28 <hif_register_cb+0xa0>)
   219ca:	683a      	ldr	r2, [r7, #0]
   219cc:	621a      	str	r2, [r3, #32]
			break;
   219ce:	e021      	b.n	21a14 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   219d0:	4b15      	ldr	r3, [pc, #84]	; (21a28 <hif_register_cb+0xa0>)
   219d2:	683a      	ldr	r2, [r7, #0]
   219d4:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   219d6:	e01d      	b.n	21a14 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   219d8:	4b13      	ldr	r3, [pc, #76]	; (21a28 <hif_register_cb+0xa0>)
   219da:	683a      	ldr	r2, [r7, #0]
   219dc:	61da      	str	r2, [r3, #28]
			break;
   219de:	e019      	b.n	21a14 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   219e0:	4b11      	ldr	r3, [pc, #68]	; (21a28 <hif_register_cb+0xa0>)
   219e2:	683a      	ldr	r2, [r7, #0]
   219e4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   219e6:	e015      	b.n	21a14 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   219e8:	4a10      	ldr	r2, [pc, #64]	; (21a2c <hif_register_cb+0xa4>)
   219ea:	4911      	ldr	r1, [pc, #68]	; (21a30 <hif_register_cb+0xa8>)
   219ec:	4b11      	ldr	r3, [pc, #68]	; (21a34 <hif_register_cb+0xac>)
   219ee:	0018      	movs	r0, r3
   219f0:	4b11      	ldr	r3, [pc, #68]	; (21a38 <hif_register_cb+0xb0>)
   219f2:	4798      	blx	r3
   219f4:	1dfb      	adds	r3, r7, #7
   219f6:	781a      	ldrb	r2, [r3, #0]
   219f8:	4b10      	ldr	r3, [pc, #64]	; (21a3c <hif_register_cb+0xb4>)
   219fa:	0011      	movs	r1, r2
   219fc:	0018      	movs	r0, r3
   219fe:	4b0e      	ldr	r3, [pc, #56]	; (21a38 <hif_register_cb+0xb0>)
   21a00:	4798      	blx	r3
   21a02:	4b0f      	ldr	r3, [pc, #60]	; (21a40 <hif_register_cb+0xb8>)
   21a04:	0018      	movs	r0, r3
   21a06:	4b0c      	ldr	r3, [pc, #48]	; (21a38 <hif_register_cb+0xb0>)
   21a08:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21a0a:	230f      	movs	r3, #15
   21a0c:	18fb      	adds	r3, r7, r3
   21a0e:	22f4      	movs	r2, #244	; 0xf4
   21a10:	701a      	strb	r2, [r3, #0]
			break;
   21a12:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   21a14:	230f      	movs	r3, #15
   21a16:	18fb      	adds	r3, r7, r3
   21a18:	781b      	ldrb	r3, [r3, #0]
   21a1a:	b25b      	sxtb	r3, r3
}
   21a1c:	0018      	movs	r0, r3
   21a1e:	46bd      	mov	sp, r7
   21a20:	b004      	add	sp, #16
   21a22:	bd80      	pop	{r7, pc}
   21a24:	0003879c 	.word	0x0003879c
   21a28:	20005954 	.word	0x20005954
   21a2c:	000002be 	.word	0x000002be
   21a30:	000387ec 	.word	0x000387ec
   21a34:	000384b8 	.word	0x000384b8
   21a38:	0001df59 	.word	0x0001df59
   21a3c:	00038790 	.word	0x00038790
   21a40:	000384b4 	.word	0x000384b4

00021a44 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   21a44:	b590      	push	{r4, r7, lr}
   21a46:	b0af      	sub	sp, #188	; 0xbc
   21a48:	af02      	add	r7, sp, #8
   21a4a:	603a      	str	r2, [r7, #0]
   21a4c:	1dfb      	adds	r3, r7, #7
   21a4e:	1c02      	adds	r2, r0, #0
   21a50:	701a      	strb	r2, [r3, #0]
   21a52:	1d3b      	adds	r3, r7, #4
   21a54:	1c0a      	adds	r2, r1, #0
   21a56:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   21a58:	1dfb      	adds	r3, r7, #7
   21a5a:	781b      	ldrb	r3, [r3, #0]
   21a5c:	2b2c      	cmp	r3, #44	; 0x2c
   21a5e:	d116      	bne.n	21a8e <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   21a60:	23a4      	movs	r3, #164	; 0xa4
   21a62:	18f9      	adds	r1, r7, r3
   21a64:	6838      	ldr	r0, [r7, #0]
   21a66:	2300      	movs	r3, #0
   21a68:	2204      	movs	r2, #4
   21a6a:	4cca      	ldr	r4, [pc, #808]	; (21d94 <m2m_wifi_cb+0x350>)
   21a6c:	47a0      	blx	r4
   21a6e:	1e03      	subs	r3, r0, #0
   21a70:	d000      	beq.n	21a74 <m2m_wifi_cb+0x30>
   21a72:	e1b4      	b.n	21dde <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   21a74:	4bc8      	ldr	r3, [pc, #800]	; (21d98 <m2m_wifi_cb+0x354>)
   21a76:	681b      	ldr	r3, [r3, #0]
   21a78:	2b00      	cmp	r3, #0
   21a7a:	d100      	bne.n	21a7e <m2m_wifi_cb+0x3a>
   21a7c:	e1af      	b.n	21dde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   21a7e:	4bc6      	ldr	r3, [pc, #792]	; (21d98 <m2m_wifi_cb+0x354>)
   21a80:	681b      	ldr	r3, [r3, #0]
   21a82:	22a4      	movs	r2, #164	; 0xa4
   21a84:	18ba      	adds	r2, r7, r2
   21a86:	0011      	movs	r1, r2
   21a88:	202c      	movs	r0, #44	; 0x2c
   21a8a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   21a8c:	e1a7      	b.n	21dde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   21a8e:	1dfb      	adds	r3, r7, #7
   21a90:	781b      	ldrb	r3, [r3, #0]
   21a92:	2b1b      	cmp	r3, #27
   21a94:	d116      	bne.n	21ac4 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   21a96:	239c      	movs	r3, #156	; 0x9c
   21a98:	18f9      	adds	r1, r7, r3
   21a9a:	6838      	ldr	r0, [r7, #0]
   21a9c:	2300      	movs	r3, #0
   21a9e:	2208      	movs	r2, #8
   21aa0:	4cbc      	ldr	r4, [pc, #752]	; (21d94 <m2m_wifi_cb+0x350>)
   21aa2:	47a0      	blx	r4
   21aa4:	1e03      	subs	r3, r0, #0
   21aa6:	d000      	beq.n	21aaa <m2m_wifi_cb+0x66>
   21aa8:	e199      	b.n	21dde <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21aaa:	4bbb      	ldr	r3, [pc, #748]	; (21d98 <m2m_wifi_cb+0x354>)
   21aac:	681b      	ldr	r3, [r3, #0]
   21aae:	2b00      	cmp	r3, #0
   21ab0:	d100      	bne.n	21ab4 <m2m_wifi_cb+0x70>
   21ab2:	e194      	b.n	21dde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   21ab4:	4bb8      	ldr	r3, [pc, #736]	; (21d98 <m2m_wifi_cb+0x354>)
   21ab6:	681b      	ldr	r3, [r3, #0]
   21ab8:	229c      	movs	r2, #156	; 0x9c
   21aba:	18ba      	adds	r2, r7, r2
   21abc:	0011      	movs	r1, r2
   21abe:	201b      	movs	r0, #27
   21ac0:	4798      	blx	r3
}
   21ac2:	e18c      	b.n	21dde <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   21ac4:	1dfb      	adds	r3, r7, #7
   21ac6:	781b      	ldrb	r3, [r3, #0]
   21ac8:	2b06      	cmp	r3, #6
   21aca:	d116      	bne.n	21afa <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   21acc:	230c      	movs	r3, #12
   21ace:	18f9      	adds	r1, r7, r3
   21ad0:	6838      	ldr	r0, [r7, #0]
   21ad2:	2301      	movs	r3, #1
   21ad4:	2230      	movs	r2, #48	; 0x30
   21ad6:	4caf      	ldr	r4, [pc, #700]	; (21d94 <m2m_wifi_cb+0x350>)
   21ad8:	47a0      	blx	r4
   21ada:	1e03      	subs	r3, r0, #0
   21adc:	d000      	beq.n	21ae0 <m2m_wifi_cb+0x9c>
   21ade:	e17e      	b.n	21dde <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21ae0:	4bad      	ldr	r3, [pc, #692]	; (21d98 <m2m_wifi_cb+0x354>)
   21ae2:	681b      	ldr	r3, [r3, #0]
   21ae4:	2b00      	cmp	r3, #0
   21ae6:	d100      	bne.n	21aea <m2m_wifi_cb+0xa6>
   21ae8:	e179      	b.n	21dde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   21aea:	4bab      	ldr	r3, [pc, #684]	; (21d98 <m2m_wifi_cb+0x354>)
   21aec:	681b      	ldr	r3, [r3, #0]
   21aee:	220c      	movs	r2, #12
   21af0:	18ba      	adds	r2, r7, r2
   21af2:	0011      	movs	r1, r2
   21af4:	2006      	movs	r0, #6
   21af6:	4798      	blx	r3
}
   21af8:	e171      	b.n	21dde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   21afa:	1dfb      	adds	r3, r7, #7
   21afc:	781b      	ldrb	r3, [r3, #0]
   21afe:	2b0e      	cmp	r3, #14
   21b00:	d100      	bne.n	21b04 <m2m_wifi_cb+0xc0>
   21b02:	e16c      	b.n	21dde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   21b04:	1dfb      	adds	r3, r7, #7
   21b06:	781b      	ldrb	r3, [r3, #0]
   21b08:	2b32      	cmp	r3, #50	; 0x32
   21b0a:	d116      	bne.n	21b3a <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   21b0c:	2384      	movs	r3, #132	; 0x84
   21b0e:	18f9      	adds	r1, r7, r3
   21b10:	6838      	ldr	r0, [r7, #0]
   21b12:	2300      	movs	r3, #0
   21b14:	2218      	movs	r2, #24
   21b16:	4c9f      	ldr	r4, [pc, #636]	; (21d94 <m2m_wifi_cb+0x350>)
   21b18:	47a0      	blx	r4
   21b1a:	1e03      	subs	r3, r0, #0
   21b1c:	d000      	beq.n	21b20 <m2m_wifi_cb+0xdc>
   21b1e:	e15e      	b.n	21dde <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21b20:	4b9d      	ldr	r3, [pc, #628]	; (21d98 <m2m_wifi_cb+0x354>)
   21b22:	681b      	ldr	r3, [r3, #0]
   21b24:	2b00      	cmp	r3, #0
   21b26:	d100      	bne.n	21b2a <m2m_wifi_cb+0xe6>
   21b28:	e159      	b.n	21dde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   21b2a:	4b9b      	ldr	r3, [pc, #620]	; (21d98 <m2m_wifi_cb+0x354>)
   21b2c:	681b      	ldr	r3, [r3, #0]
   21b2e:	2284      	movs	r2, #132	; 0x84
   21b30:	18ba      	adds	r2, r7, r2
   21b32:	0011      	movs	r1, r2
   21b34:	2032      	movs	r0, #50	; 0x32
   21b36:	4798      	blx	r3
}
   21b38:	e151      	b.n	21dde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   21b3a:	1dfb      	adds	r3, r7, #7
   21b3c:	781b      	ldrb	r3, [r3, #0]
   21b3e:	2b2f      	cmp	r3, #47	; 0x2f
   21b40:	d11d      	bne.n	21b7e <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   21b42:	230c      	movs	r3, #12
   21b44:	18fb      	adds	r3, r7, r3
   21b46:	2264      	movs	r2, #100	; 0x64
   21b48:	2100      	movs	r1, #0
   21b4a:	0018      	movs	r0, r3
   21b4c:	4b93      	ldr	r3, [pc, #588]	; (21d9c <m2m_wifi_cb+0x358>)
   21b4e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   21b50:	230c      	movs	r3, #12
   21b52:	18f9      	adds	r1, r7, r3
   21b54:	6838      	ldr	r0, [r7, #0]
   21b56:	2300      	movs	r3, #0
   21b58:	2264      	movs	r2, #100	; 0x64
   21b5a:	4c8e      	ldr	r4, [pc, #568]	; (21d94 <m2m_wifi_cb+0x350>)
   21b5c:	47a0      	blx	r4
   21b5e:	1e03      	subs	r3, r0, #0
   21b60:	d000      	beq.n	21b64 <m2m_wifi_cb+0x120>
   21b62:	e13c      	b.n	21dde <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21b64:	4b8c      	ldr	r3, [pc, #560]	; (21d98 <m2m_wifi_cb+0x354>)
   21b66:	681b      	ldr	r3, [r3, #0]
   21b68:	2b00      	cmp	r3, #0
   21b6a:	d100      	bne.n	21b6e <m2m_wifi_cb+0x12a>
   21b6c:	e137      	b.n	21dde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   21b6e:	4b8a      	ldr	r3, [pc, #552]	; (21d98 <m2m_wifi_cb+0x354>)
   21b70:	681b      	ldr	r3, [r3, #0]
   21b72:	220c      	movs	r2, #12
   21b74:	18ba      	adds	r2, r7, r2
   21b76:	0011      	movs	r1, r2
   21b78:	202f      	movs	r0, #47	; 0x2f
   21b7a:	4798      	blx	r3
}
   21b7c:	e12f      	b.n	21dde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   21b7e:	1dfb      	adds	r3, r7, #7
   21b80:	781b      	ldrb	r3, [r3, #0]
   21b82:	2b34      	cmp	r3, #52	; 0x34
   21b84:	d137      	bne.n	21bf6 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   21b86:	2380      	movs	r3, #128	; 0x80
   21b88:	18f9      	adds	r1, r7, r3
   21b8a:	6838      	ldr	r0, [r7, #0]
   21b8c:	2300      	movs	r3, #0
   21b8e:	2204      	movs	r2, #4
   21b90:	4c80      	ldr	r4, [pc, #512]	; (21d94 <m2m_wifi_cb+0x350>)
   21b92:	47a0      	blx	r4
   21b94:	1e03      	subs	r3, r0, #0
   21b96:	d000      	beq.n	21b9a <m2m_wifi_cb+0x156>
   21b98:	e121      	b.n	21dde <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   21b9a:	4b81      	ldr	r3, [pc, #516]	; (21da0 <m2m_wifi_cb+0x35c>)
   21b9c:	0018      	movs	r0, r3
   21b9e:	4b81      	ldr	r3, [pc, #516]	; (21da4 <m2m_wifi_cb+0x360>)
   21ba0:	4798      	blx	r3
   21ba2:	2380      	movs	r3, #128	; 0x80
   21ba4:	18fb      	adds	r3, r7, r3
   21ba6:	681b      	ldr	r3, [r3, #0]
   21ba8:	0e1b      	lsrs	r3, r3, #24
   21baa:	b2db      	uxtb	r3, r3
   21bac:	0019      	movs	r1, r3
   21bae:	2380      	movs	r3, #128	; 0x80
   21bb0:	18fb      	adds	r3, r7, r3
   21bb2:	681b      	ldr	r3, [r3, #0]
   21bb4:	0c1b      	lsrs	r3, r3, #16
   21bb6:	b2db      	uxtb	r3, r3
   21bb8:	001a      	movs	r2, r3
   21bba:	2380      	movs	r3, #128	; 0x80
   21bbc:	18fb      	adds	r3, r7, r3
   21bbe:	681b      	ldr	r3, [r3, #0]
   21bc0:	0a1b      	lsrs	r3, r3, #8
   21bc2:	b2db      	uxtb	r3, r3
   21bc4:	001c      	movs	r4, r3
   21bc6:	2380      	movs	r3, #128	; 0x80
   21bc8:	18fb      	adds	r3, r7, r3
   21bca:	681b      	ldr	r3, [r3, #0]
   21bcc:	b2db      	uxtb	r3, r3
   21bce:	4876      	ldr	r0, [pc, #472]	; (21da8 <m2m_wifi_cb+0x364>)
   21bd0:	9300      	str	r3, [sp, #0]
   21bd2:	0023      	movs	r3, r4
   21bd4:	4c73      	ldr	r4, [pc, #460]	; (21da4 <m2m_wifi_cb+0x360>)
   21bd6:	47a0      	blx	r4
   21bd8:	4b74      	ldr	r3, [pc, #464]	; (21dac <m2m_wifi_cb+0x368>)
   21bda:	0018      	movs	r0, r3
   21bdc:	4b71      	ldr	r3, [pc, #452]	; (21da4 <m2m_wifi_cb+0x360>)
   21bde:	4798      	blx	r3
			if (gpfAppWifiCb)
   21be0:	4b6d      	ldr	r3, [pc, #436]	; (21d98 <m2m_wifi_cb+0x354>)
   21be2:	681b      	ldr	r3, [r3, #0]
   21be4:	2b00      	cmp	r3, #0
   21be6:	d100      	bne.n	21bea <m2m_wifi_cb+0x1a6>
   21be8:	e0f9      	b.n	21dde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   21bea:	4b6b      	ldr	r3, [pc, #428]	; (21d98 <m2m_wifi_cb+0x354>)
   21bec:	681b      	ldr	r3, [r3, #0]
   21bee:	2100      	movs	r1, #0
   21bf0:	2034      	movs	r0, #52	; 0x34
   21bf2:	4798      	blx	r3
}
   21bf4:	e0f3      	b.n	21dde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   21bf6:	1dfb      	adds	r3, r7, #7
   21bf8:	781b      	ldrb	r3, [r3, #0]
   21bfa:	2b11      	cmp	r3, #17
   21bfc:	d11e      	bne.n	21c3c <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   21bfe:	4b6c      	ldr	r3, [pc, #432]	; (21db0 <m2m_wifi_cb+0x36c>)
   21c00:	2200      	movs	r2, #0
   21c02:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   21c04:	237c      	movs	r3, #124	; 0x7c
   21c06:	18f9      	adds	r1, r7, r3
   21c08:	6838      	ldr	r0, [r7, #0]
   21c0a:	2300      	movs	r3, #0
   21c0c:	2204      	movs	r2, #4
   21c0e:	4c61      	ldr	r4, [pc, #388]	; (21d94 <m2m_wifi_cb+0x350>)
   21c10:	47a0      	blx	r4
   21c12:	1e03      	subs	r3, r0, #0
   21c14:	d000      	beq.n	21c18 <m2m_wifi_cb+0x1d4>
   21c16:	e0e2      	b.n	21dde <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   21c18:	237c      	movs	r3, #124	; 0x7c
   21c1a:	18fb      	adds	r3, r7, r3
   21c1c:	781a      	ldrb	r2, [r3, #0]
   21c1e:	4b65      	ldr	r3, [pc, #404]	; (21db4 <m2m_wifi_cb+0x370>)
   21c20:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   21c22:	4b5d      	ldr	r3, [pc, #372]	; (21d98 <m2m_wifi_cb+0x354>)
   21c24:	681b      	ldr	r3, [r3, #0]
   21c26:	2b00      	cmp	r3, #0
   21c28:	d100      	bne.n	21c2c <m2m_wifi_cb+0x1e8>
   21c2a:	e0d8      	b.n	21dde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   21c2c:	4b5a      	ldr	r3, [pc, #360]	; (21d98 <m2m_wifi_cb+0x354>)
   21c2e:	681b      	ldr	r3, [r3, #0]
   21c30:	227c      	movs	r2, #124	; 0x7c
   21c32:	18ba      	adds	r2, r7, r2
   21c34:	0011      	movs	r1, r2
   21c36:	2011      	movs	r0, #17
   21c38:	4798      	blx	r3
}
   21c3a:	e0d0      	b.n	21dde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   21c3c:	1dfb      	adds	r3, r7, #7
   21c3e:	781b      	ldrb	r3, [r3, #0]
   21c40:	2b13      	cmp	r3, #19
   21c42:	d116      	bne.n	21c72 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   21c44:	230c      	movs	r3, #12
   21c46:	18f9      	adds	r1, r7, r3
   21c48:	6838      	ldr	r0, [r7, #0]
   21c4a:	2300      	movs	r3, #0
   21c4c:	222c      	movs	r2, #44	; 0x2c
   21c4e:	4c51      	ldr	r4, [pc, #324]	; (21d94 <m2m_wifi_cb+0x350>)
   21c50:	47a0      	blx	r4
   21c52:	1e03      	subs	r3, r0, #0
   21c54:	d000      	beq.n	21c58 <m2m_wifi_cb+0x214>
   21c56:	e0c2      	b.n	21dde <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21c58:	4b4f      	ldr	r3, [pc, #316]	; (21d98 <m2m_wifi_cb+0x354>)
   21c5a:	681b      	ldr	r3, [r3, #0]
   21c5c:	2b00      	cmp	r3, #0
   21c5e:	d100      	bne.n	21c62 <m2m_wifi_cb+0x21e>
   21c60:	e0bd      	b.n	21dde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   21c62:	4b4d      	ldr	r3, [pc, #308]	; (21d98 <m2m_wifi_cb+0x354>)
   21c64:	681b      	ldr	r3, [r3, #0]
   21c66:	220c      	movs	r2, #12
   21c68:	18ba      	adds	r2, r7, r2
   21c6a:	0011      	movs	r1, r2
   21c6c:	2013      	movs	r0, #19
   21c6e:	4798      	blx	r3
}
   21c70:	e0b5      	b.n	21dde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   21c72:	1dfb      	adds	r3, r7, #7
   21c74:	781b      	ldrb	r3, [r3, #0]
   21c76:	2b04      	cmp	r3, #4
   21c78:	d116      	bne.n	21ca8 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21c7a:	23a8      	movs	r3, #168	; 0xa8
   21c7c:	18f9      	adds	r1, r7, r3
   21c7e:	6838      	ldr	r0, [r7, #0]
   21c80:	2300      	movs	r3, #0
   21c82:	2204      	movs	r2, #4
   21c84:	4c43      	ldr	r4, [pc, #268]	; (21d94 <m2m_wifi_cb+0x350>)
   21c86:	47a0      	blx	r4
   21c88:	1e03      	subs	r3, r0, #0
   21c8a:	d000      	beq.n	21c8e <m2m_wifi_cb+0x24a>
   21c8c:	e0a7      	b.n	21dde <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21c8e:	4b42      	ldr	r3, [pc, #264]	; (21d98 <m2m_wifi_cb+0x354>)
   21c90:	681b      	ldr	r3, [r3, #0]
   21c92:	2b00      	cmp	r3, #0
   21c94:	d100      	bne.n	21c98 <m2m_wifi_cb+0x254>
   21c96:	e0a2      	b.n	21dde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   21c98:	4b3f      	ldr	r3, [pc, #252]	; (21d98 <m2m_wifi_cb+0x354>)
   21c9a:	681b      	ldr	r3, [r3, #0]
   21c9c:	22a8      	movs	r2, #168	; 0xa8
   21c9e:	18ba      	adds	r2, r7, r2
   21ca0:	0011      	movs	r1, r2
   21ca2:	2004      	movs	r0, #4
   21ca4:	4798      	blx	r3
}
   21ca6:	e09a      	b.n	21dde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   21ca8:	1dfb      	adds	r3, r7, #7
   21caa:	781b      	ldrb	r3, [r3, #0]
   21cac:	2b65      	cmp	r3, #101	; 0x65
   21cae:	d116      	bne.n	21cde <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21cb0:	23a8      	movs	r3, #168	; 0xa8
   21cb2:	18f9      	adds	r1, r7, r3
   21cb4:	6838      	ldr	r0, [r7, #0]
   21cb6:	2300      	movs	r3, #0
   21cb8:	2204      	movs	r2, #4
   21cba:	4c36      	ldr	r4, [pc, #216]	; (21d94 <m2m_wifi_cb+0x350>)
   21cbc:	47a0      	blx	r4
   21cbe:	1e03      	subs	r3, r0, #0
   21cc0:	d000      	beq.n	21cc4 <m2m_wifi_cb+0x280>
   21cc2:	e08c      	b.n	21dde <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21cc4:	4b34      	ldr	r3, [pc, #208]	; (21d98 <m2m_wifi_cb+0x354>)
   21cc6:	681b      	ldr	r3, [r3, #0]
   21cc8:	2b00      	cmp	r3, #0
   21cca:	d100      	bne.n	21cce <m2m_wifi_cb+0x28a>
   21ccc:	e087      	b.n	21dde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   21cce:	4b32      	ldr	r3, [pc, #200]	; (21d98 <m2m_wifi_cb+0x354>)
   21cd0:	681b      	ldr	r3, [r3, #0]
   21cd2:	22a8      	movs	r2, #168	; 0xa8
   21cd4:	18ba      	adds	r2, r7, r2
   21cd6:	0011      	movs	r1, r2
   21cd8:	2065      	movs	r0, #101	; 0x65
   21cda:	4798      	blx	r3
}
   21cdc:	e07f      	b.n	21dde <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   21cde:	1dfb      	adds	r3, r7, #7
   21ce0:	781b      	ldrb	r3, [r3, #0]
   21ce2:	2b09      	cmp	r3, #9
   21ce4:	d116      	bne.n	21d14 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   21ce6:	230c      	movs	r3, #12
   21ce8:	18f9      	adds	r1, r7, r3
   21cea:	6838      	ldr	r0, [r7, #0]
   21cec:	2301      	movs	r3, #1
   21cee:	2264      	movs	r2, #100	; 0x64
   21cf0:	4c28      	ldr	r4, [pc, #160]	; (21d94 <m2m_wifi_cb+0x350>)
   21cf2:	47a0      	blx	r4
   21cf4:	1e03      	subs	r3, r0, #0
   21cf6:	d000      	beq.n	21cfa <m2m_wifi_cb+0x2b6>
   21cf8:	e071      	b.n	21dde <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21cfa:	4b27      	ldr	r3, [pc, #156]	; (21d98 <m2m_wifi_cb+0x354>)
   21cfc:	681b      	ldr	r3, [r3, #0]
   21cfe:	2b00      	cmp	r3, #0
   21d00:	d100      	bne.n	21d04 <m2m_wifi_cb+0x2c0>
   21d02:	e06c      	b.n	21dde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   21d04:	4b24      	ldr	r3, [pc, #144]	; (21d98 <m2m_wifi_cb+0x354>)
   21d06:	681b      	ldr	r3, [r3, #0]
   21d08:	220c      	movs	r2, #12
   21d0a:	18ba      	adds	r2, r7, r2
   21d0c:	0011      	movs	r1, r2
   21d0e:	2009      	movs	r0, #9
   21d10:	4798      	blx	r3
}
   21d12:	e064      	b.n	21dde <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   21d14:	1dfb      	adds	r3, r7, #7
   21d16:	781b      	ldrb	r3, [r3, #0]
   21d18:	2b2a      	cmp	r3, #42	; 0x2a
   21d1a:	d114      	bne.n	21d46 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   21d1c:	2378      	movs	r3, #120	; 0x78
   21d1e:	18f9      	adds	r1, r7, r3
   21d20:	6838      	ldr	r0, [r7, #0]
   21d22:	2301      	movs	r3, #1
   21d24:	2204      	movs	r2, #4
   21d26:	4c1b      	ldr	r4, [pc, #108]	; (21d94 <m2m_wifi_cb+0x350>)
   21d28:	47a0      	blx	r4
   21d2a:	1e03      	subs	r3, r0, #0
   21d2c:	d157      	bne.n	21dde <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21d2e:	4b1a      	ldr	r3, [pc, #104]	; (21d98 <m2m_wifi_cb+0x354>)
   21d30:	681b      	ldr	r3, [r3, #0]
   21d32:	2b00      	cmp	r3, #0
   21d34:	d053      	beq.n	21dde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   21d36:	4b18      	ldr	r3, [pc, #96]	; (21d98 <m2m_wifi_cb+0x354>)
   21d38:	681b      	ldr	r3, [r3, #0]
   21d3a:	2278      	movs	r2, #120	; 0x78
   21d3c:	18ba      	adds	r2, r7, r2
   21d3e:	0011      	movs	r1, r2
   21d40:	202a      	movs	r0, #42	; 0x2a
   21d42:	4798      	blx	r3
}
   21d44:	e04b      	b.n	21dde <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   21d46:	1dfb      	adds	r3, r7, #7
   21d48:	781b      	ldrb	r3, [r3, #0]
   21d4a:	2b20      	cmp	r3, #32
   21d4c:	d134      	bne.n	21db8 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   21d4e:	2370      	movs	r3, #112	; 0x70
   21d50:	18f9      	adds	r1, r7, r3
   21d52:	6838      	ldr	r0, [r7, #0]
   21d54:	2300      	movs	r3, #0
   21d56:	2208      	movs	r2, #8
   21d58:	4c0e      	ldr	r4, [pc, #56]	; (21d94 <m2m_wifi_cb+0x350>)
   21d5a:	47a0      	blx	r4
   21d5c:	1e03      	subs	r3, r0, #0
   21d5e:	d13e      	bne.n	21dde <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   21d60:	683b      	ldr	r3, [r7, #0]
   21d62:	3308      	adds	r3, #8
   21d64:	0018      	movs	r0, r3
   21d66:	2370      	movs	r3, #112	; 0x70
   21d68:	18fb      	adds	r3, r7, r3
   21d6a:	6819      	ldr	r1, [r3, #0]
   21d6c:	2370      	movs	r3, #112	; 0x70
   21d6e:	18fb      	adds	r3, r7, r3
   21d70:	889a      	ldrh	r2, [r3, #4]
   21d72:	2301      	movs	r3, #1
   21d74:	4c07      	ldr	r4, [pc, #28]	; (21d94 <m2m_wifi_cb+0x350>)
   21d76:	47a0      	blx	r4
   21d78:	1e03      	subs	r3, r0, #0
   21d7a:	d130      	bne.n	21dde <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   21d7c:	4b06      	ldr	r3, [pc, #24]	; (21d98 <m2m_wifi_cb+0x354>)
   21d7e:	681b      	ldr	r3, [r3, #0]
   21d80:	2b00      	cmp	r3, #0
   21d82:	d02c      	beq.n	21dde <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   21d84:	4b04      	ldr	r3, [pc, #16]	; (21d98 <m2m_wifi_cb+0x354>)
   21d86:	681b      	ldr	r3, [r3, #0]
   21d88:	2270      	movs	r2, #112	; 0x70
   21d8a:	18ba      	adds	r2, r7, r2
   21d8c:	0011      	movs	r1, r2
   21d8e:	2020      	movs	r0, #32
   21d90:	4798      	blx	r3
}
   21d92:	e024      	b.n	21dde <m2m_wifi_cb+0x39a>
   21d94:	00021809 	.word	0x00021809
   21d98:	20004128 	.word	0x20004128
   21d9c:	00020c8d 	.word	0x00020c8d
   21da0:	000387fc 	.word	0x000387fc
   21da4:	0001df59 	.word	0x0001df59
   21da8:	00038808 	.word	0x00038808
   21dac:	00038828 	.word	0x00038828
   21db0:	20004125 	.word	0x20004125
   21db4:	20004124 	.word	0x20004124
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   21db8:	2324      	movs	r3, #36	; 0x24
   21dba:	33ff      	adds	r3, #255	; 0xff
   21dbc:	001a      	movs	r2, r3
   21dbe:	490a      	ldr	r1, [pc, #40]	; (21de8 <m2m_wifi_cb+0x3a4>)
   21dc0:	4b0a      	ldr	r3, [pc, #40]	; (21dec <m2m_wifi_cb+0x3a8>)
   21dc2:	0018      	movs	r0, r3
   21dc4:	4b0a      	ldr	r3, [pc, #40]	; (21df0 <m2m_wifi_cb+0x3ac>)
   21dc6:	4798      	blx	r3
   21dc8:	1dfb      	adds	r3, r7, #7
   21dca:	781a      	ldrb	r2, [r3, #0]
   21dcc:	4b09      	ldr	r3, [pc, #36]	; (21df4 <m2m_wifi_cb+0x3b0>)
   21dce:	0011      	movs	r1, r2
   21dd0:	0018      	movs	r0, r3
   21dd2:	4b07      	ldr	r3, [pc, #28]	; (21df0 <m2m_wifi_cb+0x3ac>)
   21dd4:	4798      	blx	r3
   21dd6:	4b08      	ldr	r3, [pc, #32]	; (21df8 <m2m_wifi_cb+0x3b4>)
   21dd8:	0018      	movs	r0, r3
   21dda:	4b05      	ldr	r3, [pc, #20]	; (21df0 <m2m_wifi_cb+0x3ac>)
   21ddc:	4798      	blx	r3
}
   21dde:	46c0      	nop			; (mov r8, r8)
   21de0:	46bd      	mov	sp, r7
   21de2:	b02d      	add	sp, #180	; 0xb4
   21de4:	bd90      	pop	{r4, r7, pc}
   21de6:	46c0      	nop			; (mov r8, r8)
   21de8:	00038bc8 	.word	0x00038bc8
   21dec:	0003882c 	.word	0x0003882c
   21df0:	0001df59 	.word	0x0001df59
   21df4:	00038840 	.word	0x00038840
   21df8:	00038828 	.word	0x00038828

00021dfc <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   21dfc:	b590      	push	{r4, r7, lr}
   21dfe:	b091      	sub	sp, #68	; 0x44
   21e00:	af02      	add	r7, sp, #8
   21e02:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   21e04:	2337      	movs	r3, #55	; 0x37
   21e06:	18fb      	adds	r3, r7, r3
   21e08:	2200      	movs	r2, #0
   21e0a:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   21e0c:	230b      	movs	r3, #11
   21e0e:	18fb      	adds	r3, r7, r3
   21e10:	2201      	movs	r2, #1
   21e12:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   21e14:	687b      	ldr	r3, [r7, #4]
   21e16:	2b00      	cmp	r3, #0
   21e18:	d104      	bne.n	21e24 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   21e1a:	2337      	movs	r3, #55	; 0x37
   21e1c:	18fb      	adds	r3, r7, r3
   21e1e:	22f4      	movs	r2, #244	; 0xf4
   21e20:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   21e22:	e0b3      	b.n	21f8c <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   21e24:	687b      	ldr	r3, [r7, #4]
   21e26:	681a      	ldr	r2, [r3, #0]
   21e28:	4b5c      	ldr	r3, [pc, #368]	; (21f9c <m2m_wifi_init+0x1a0>)
   21e2a:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   21e2c:	4b5c      	ldr	r3, [pc, #368]	; (21fa0 <m2m_wifi_init+0x1a4>)
   21e2e:	2200      	movs	r2, #0
   21e30:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   21e32:	2337      	movs	r3, #55	; 0x37
   21e34:	18fc      	adds	r4, r7, r3
   21e36:	230b      	movs	r3, #11
   21e38:	18fb      	adds	r3, r7, r3
   21e3a:	0018      	movs	r0, r3
   21e3c:	4b59      	ldr	r3, [pc, #356]	; (21fa4 <m2m_wifi_init+0x1a8>)
   21e3e:	4798      	blx	r3
   21e40:	0003      	movs	r3, r0
   21e42:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   21e44:	2337      	movs	r3, #55	; 0x37
   21e46:	18fb      	adds	r3, r7, r3
   21e48:	781b      	ldrb	r3, [r3, #0]
   21e4a:	b25b      	sxtb	r3, r3
   21e4c:	2b00      	cmp	r3, #0
   21e4e:	d000      	beq.n	21e52 <m2m_wifi_init+0x56>
   21e50:	e099      	b.n	21f86 <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   21e52:	2337      	movs	r3, #55	; 0x37
   21e54:	18fc      	adds	r4, r7, r3
   21e56:	2000      	movs	r0, #0
   21e58:	4b53      	ldr	r3, [pc, #332]	; (21fa8 <m2m_wifi_init+0x1ac>)
   21e5a:	4798      	blx	r3
   21e5c:	0003      	movs	r3, r0
   21e5e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   21e60:	2337      	movs	r3, #55	; 0x37
   21e62:	18fb      	adds	r3, r7, r3
   21e64:	781b      	ldrb	r3, [r3, #0]
   21e66:	b25b      	sxtb	r3, r3
   21e68:	2b00      	cmp	r3, #0
   21e6a:	d000      	beq.n	21e6e <m2m_wifi_init+0x72>
   21e6c:	e086      	b.n	21f7c <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   21e6e:	4b4f      	ldr	r3, [pc, #316]	; (21fac <m2m_wifi_init+0x1b0>)
   21e70:	0019      	movs	r1, r3
   21e72:	2001      	movs	r0, #1
   21e74:	4b4e      	ldr	r3, [pc, #312]	; (21fb0 <m2m_wifi_init+0x1b4>)
   21e76:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   21e78:	2337      	movs	r3, #55	; 0x37
   21e7a:	18fc      	adds	r4, r7, r3
   21e7c:	230c      	movs	r3, #12
   21e7e:	18fb      	adds	r3, r7, r3
   21e80:	0018      	movs	r0, r3
   21e82:	4b4c      	ldr	r3, [pc, #304]	; (21fb4 <m2m_wifi_init+0x1b8>)
   21e84:	4798      	blx	r3
   21e86:	0003      	movs	r3, r0
   21e88:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   21e8a:	4b4b      	ldr	r3, [pc, #300]	; (21fb8 <m2m_wifi_init+0x1bc>)
   21e8c:	0018      	movs	r0, r3
   21e8e:	4b4b      	ldr	r3, [pc, #300]	; (21fbc <m2m_wifi_init+0x1c0>)
   21e90:	4798      	blx	r3
   21e92:	230c      	movs	r3, #12
   21e94:	18fb      	adds	r3, r7, r3
   21e96:	791b      	ldrb	r3, [r3, #4]
   21e98:	0019      	movs	r1, r3
   21e9a:	230c      	movs	r3, #12
   21e9c:	18fb      	adds	r3, r7, r3
   21e9e:	795b      	ldrb	r3, [r3, #5]
   21ea0:	001a      	movs	r2, r3
   21ea2:	230c      	movs	r3, #12
   21ea4:	18fb      	adds	r3, r7, r3
   21ea6:	799b      	ldrb	r3, [r3, #6]
   21ea8:	001c      	movs	r4, r3
   21eaa:	230c      	movs	r3, #12
   21eac:	18fb      	adds	r3, r7, r3
   21eae:	8c1b      	ldrh	r3, [r3, #32]
   21eb0:	4843      	ldr	r0, [pc, #268]	; (21fc0 <m2m_wifi_init+0x1c4>)
   21eb2:	9300      	str	r3, [sp, #0]
   21eb4:	0023      	movs	r3, r4
   21eb6:	4c41      	ldr	r4, [pc, #260]	; (21fbc <m2m_wifi_init+0x1c0>)
   21eb8:	47a0      	blx	r4
   21eba:	4b42      	ldr	r3, [pc, #264]	; (21fc4 <m2m_wifi_init+0x1c8>)
   21ebc:	0018      	movs	r0, r3
   21ebe:	4b3f      	ldr	r3, [pc, #252]	; (21fbc <m2m_wifi_init+0x1c0>)
   21ec0:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   21ec2:	4b3d      	ldr	r3, [pc, #244]	; (21fb8 <m2m_wifi_init+0x1bc>)
   21ec4:	0018      	movs	r0, r3
   21ec6:	4b3d      	ldr	r3, [pc, #244]	; (21fbc <m2m_wifi_init+0x1c0>)
   21ec8:	4798      	blx	r3
   21eca:	230c      	movs	r3, #12
   21ecc:	18fb      	adds	r3, r7, r3
   21ece:	3316      	adds	r3, #22
   21ed0:	001a      	movs	r2, r3
   21ed2:	230c      	movs	r3, #12
   21ed4:	18fb      	adds	r3, r7, r3
   21ed6:	330a      	adds	r3, #10
   21ed8:	0019      	movs	r1, r3
   21eda:	4b3b      	ldr	r3, [pc, #236]	; (21fc8 <m2m_wifi_init+0x1cc>)
   21edc:	0018      	movs	r0, r3
   21ede:	4b37      	ldr	r3, [pc, #220]	; (21fbc <m2m_wifi_init+0x1c0>)
   21ee0:	4798      	blx	r3
   21ee2:	4b38      	ldr	r3, [pc, #224]	; (21fc4 <m2m_wifi_init+0x1c8>)
   21ee4:	0018      	movs	r0, r3
   21ee6:	4b35      	ldr	r3, [pc, #212]	; (21fbc <m2m_wifi_init+0x1c0>)
   21ee8:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   21eea:	4b33      	ldr	r3, [pc, #204]	; (21fb8 <m2m_wifi_init+0x1bc>)
   21eec:	0018      	movs	r0, r3
   21eee:	4b33      	ldr	r3, [pc, #204]	; (21fbc <m2m_wifi_init+0x1c0>)
   21ef0:	4798      	blx	r3
   21ef2:	230c      	movs	r3, #12
   21ef4:	18fb      	adds	r3, r7, r3
   21ef6:	79db      	ldrb	r3, [r3, #7]
   21ef8:	0019      	movs	r1, r3
   21efa:	230c      	movs	r3, #12
   21efc:	18fb      	adds	r3, r7, r3
   21efe:	7a1b      	ldrb	r3, [r3, #8]
   21f00:	001a      	movs	r2, r3
   21f02:	230c      	movs	r3, #12
   21f04:	18fb      	adds	r3, r7, r3
   21f06:	7a5b      	ldrb	r3, [r3, #9]
   21f08:	4830      	ldr	r0, [pc, #192]	; (21fcc <m2m_wifi_init+0x1d0>)
   21f0a:	4c2c      	ldr	r4, [pc, #176]	; (21fbc <m2m_wifi_init+0x1c0>)
   21f0c:	47a0      	blx	r4
   21f0e:	4b2d      	ldr	r3, [pc, #180]	; (21fc4 <m2m_wifi_init+0x1c8>)
   21f10:	0018      	movs	r0, r3
   21f12:	4b2a      	ldr	r3, [pc, #168]	; (21fbc <m2m_wifi_init+0x1c0>)
   21f14:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   21f16:	4b28      	ldr	r3, [pc, #160]	; (21fb8 <m2m_wifi_init+0x1bc>)
   21f18:	0018      	movs	r0, r3
   21f1a:	4b28      	ldr	r3, [pc, #160]	; (21fbc <m2m_wifi_init+0x1c0>)
   21f1c:	4798      	blx	r3
   21f1e:	482c      	ldr	r0, [pc, #176]	; (21fd0 <m2m_wifi_init+0x1d4>)
   21f20:	2304      	movs	r3, #4
   21f22:	2205      	movs	r2, #5
   21f24:	2113      	movs	r1, #19
   21f26:	4c25      	ldr	r4, [pc, #148]	; (21fbc <m2m_wifi_init+0x1c0>)
   21f28:	47a0      	blx	r4
   21f2a:	4b26      	ldr	r3, [pc, #152]	; (21fc4 <m2m_wifi_init+0x1c8>)
   21f2c:	0018      	movs	r0, r3
   21f2e:	4b23      	ldr	r3, [pc, #140]	; (21fbc <m2m_wifi_init+0x1c0>)
   21f30:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   21f32:	4b21      	ldr	r3, [pc, #132]	; (21fb8 <m2m_wifi_init+0x1bc>)
   21f34:	0018      	movs	r0, r3
   21f36:	4b21      	ldr	r3, [pc, #132]	; (21fbc <m2m_wifi_init+0x1c0>)
   21f38:	4798      	blx	r3
   21f3a:	4a26      	ldr	r2, [pc, #152]	; (21fd4 <m2m_wifi_init+0x1d8>)
   21f3c:	4926      	ldr	r1, [pc, #152]	; (21fd8 <m2m_wifi_init+0x1dc>)
   21f3e:	4b27      	ldr	r3, [pc, #156]	; (21fdc <m2m_wifi_init+0x1e0>)
   21f40:	0018      	movs	r0, r3
   21f42:	4b1e      	ldr	r3, [pc, #120]	; (21fbc <m2m_wifi_init+0x1c0>)
   21f44:	4798      	blx	r3
   21f46:	4b1f      	ldr	r3, [pc, #124]	; (21fc4 <m2m_wifi_init+0x1c8>)
   21f48:	0018      	movs	r0, r3
   21f4a:	4b1c      	ldr	r3, [pc, #112]	; (21fbc <m2m_wifi_init+0x1c0>)
   21f4c:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   21f4e:	2337      	movs	r3, #55	; 0x37
   21f50:	18fb      	adds	r3, r7, r3
   21f52:	781b      	ldrb	r3, [r3, #0]
   21f54:	b25b      	sxtb	r3, r3
   21f56:	330d      	adds	r3, #13
   21f58:	d117      	bne.n	21f8a <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   21f5a:	23e8      	movs	r3, #232	; 0xe8
   21f5c:	33ff      	adds	r3, #255	; 0xff
   21f5e:	001a      	movs	r2, r3
   21f60:	491f      	ldr	r1, [pc, #124]	; (21fe0 <m2m_wifi_init+0x1e4>)
   21f62:	4b20      	ldr	r3, [pc, #128]	; (21fe4 <m2m_wifi_init+0x1e8>)
   21f64:	0018      	movs	r0, r3
   21f66:	4b15      	ldr	r3, [pc, #84]	; (21fbc <m2m_wifi_init+0x1c0>)
   21f68:	4798      	blx	r3
   21f6a:	4b1f      	ldr	r3, [pc, #124]	; (21fe8 <m2m_wifi_init+0x1ec>)
   21f6c:	0018      	movs	r0, r3
   21f6e:	4b13      	ldr	r3, [pc, #76]	; (21fbc <m2m_wifi_init+0x1c0>)
   21f70:	4798      	blx	r3
   21f72:	4b14      	ldr	r3, [pc, #80]	; (21fc4 <m2m_wifi_init+0x1c8>)
   21f74:	0018      	movs	r0, r3
   21f76:	4b11      	ldr	r3, [pc, #68]	; (21fbc <m2m_wifi_init+0x1c0>)
   21f78:	4798      	blx	r3
	}

	goto _EXIT0;
   21f7a:	e006      	b.n	21f8a <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   21f7c:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   21f7e:	2000      	movs	r0, #0
   21f80:	4b1a      	ldr	r3, [pc, #104]	; (21fec <m2m_wifi_init+0x1f0>)
   21f82:	4798      	blx	r3
   21f84:	e002      	b.n	21f8c <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   21f86:	46c0      	nop			; (mov r8, r8)
   21f88:	e000      	b.n	21f8c <m2m_wifi_init+0x190>
	goto _EXIT0;
   21f8a:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   21f8c:	2337      	movs	r3, #55	; 0x37
   21f8e:	18fb      	adds	r3, r7, r3
   21f90:	781b      	ldrb	r3, [r3, #0]
   21f92:	b25b      	sxtb	r3, r3
}
   21f94:	0018      	movs	r0, r3
   21f96:	46bd      	mov	sp, r7
   21f98:	b00f      	add	sp, #60	; 0x3c
   21f9a:	bd90      	pop	{r4, r7, pc}
   21f9c:	20004128 	.word	0x20004128
   21fa0:	20004125 	.word	0x20004125
   21fa4:	00023121 	.word	0x00023121
   21fa8:	00020ea5 	.word	0x00020ea5
   21fac:	00021a45 	.word	0x00021a45
   21fb0:	00021989 	.word	0x00021989
   21fb4:	00022f55 	.word	0x00022f55
   21fb8:	000387fc 	.word	0x000387fc
   21fbc:	0001df59 	.word	0x0001df59
   21fc0:	000389a0 	.word	0x000389a0
   21fc4:	00038828 	.word	0x00038828
   21fc8:	000389c8 	.word	0x000389c8
   21fcc:	000389e4 	.word	0x000389e4
   21fd0:	00038a08 	.word	0x00038a08
   21fd4:	00038a20 	.word	0x00038a20
   21fd8:	00038a2c 	.word	0x00038a2c
   21fdc:	00038a38 	.word	0x00038a38
   21fe0:	00038bd4 	.word	0x00038bd4
   21fe4:	0003882c 	.word	0x0003882c
   21fe8:	00038a50 	.word	0x00038a50
   21fec:	000232b1 	.word	0x000232b1

00021ff0 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   21ff0:	b580      	push	{r7, lr}
   21ff2:	b082      	sub	sp, #8
   21ff4:	af00      	add	r7, sp, #0
   21ff6:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   21ff8:	4b03      	ldr	r3, [pc, #12]	; (22008 <m2m_wifi_handle_events+0x18>)
   21ffa:	4798      	blx	r3
   21ffc:	0003      	movs	r3, r0
}
   21ffe:	0018      	movs	r0, r3
   22000:	46bd      	mov	sp, r7
   22002:	b002      	add	sp, #8
   22004:	bd80      	pop	{r7, pc}
   22006:	46c0      	nop			; (mov r8, r8)
   22008:	00021769 	.word	0x00021769

0002200c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   2200c:	b590      	push	{r4, r7, lr}
   2200e:	b087      	sub	sp, #28
   22010:	af02      	add	r7, sp, #8
   22012:	60f8      	str	r0, [r7, #12]
   22014:	0008      	movs	r0, r1
   22016:	0011      	movs	r1, r2
   22018:	607b      	str	r3, [r7, #4]
   2201a:	230b      	movs	r3, #11
   2201c:	18fb      	adds	r3, r7, r3
   2201e:	1c02      	adds	r2, r0, #0
   22020:	701a      	strb	r2, [r3, #0]
   22022:	230a      	movs	r3, #10
   22024:	18fb      	adds	r3, r7, r3
   22026:	1c0a      	adds	r2, r1, #0
   22028:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   2202a:	687c      	ldr	r4, [r7, #4]
   2202c:	230a      	movs	r3, #10
   2202e:	18fb      	adds	r3, r7, r3
   22030:	781a      	ldrb	r2, [r3, #0]
   22032:	230b      	movs	r3, #11
   22034:	18fb      	adds	r3, r7, r3
   22036:	7819      	ldrb	r1, [r3, #0]
   22038:	68f8      	ldr	r0, [r7, #12]
   2203a:	2300      	movs	r3, #0
   2203c:	9301      	str	r3, [sp, #4]
   2203e:	2320      	movs	r3, #32
   22040:	18fb      	adds	r3, r7, r3
   22042:	881b      	ldrh	r3, [r3, #0]
   22044:	9300      	str	r3, [sp, #0]
   22046:	0023      	movs	r3, r4
   22048:	4c03      	ldr	r4, [pc, #12]	; (22058 <m2m_wifi_connect+0x4c>)
   2204a:	47a0      	blx	r4
   2204c:	0003      	movs	r3, r0
}
   2204e:	0018      	movs	r0, r3
   22050:	46bd      	mov	sp, r7
   22052:	b005      	add	sp, #20
   22054:	bd90      	pop	{r4, r7, pc}
   22056:	46c0      	nop			; (mov r8, r8)
   22058:	0002205d 	.word	0x0002205d

0002205c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   2205c:	b5b0      	push	{r4, r5, r7, lr}
   2205e:	b0aa      	sub	sp, #168	; 0xa8
   22060:	af04      	add	r7, sp, #16
   22062:	60f8      	str	r0, [r7, #12]
   22064:	0008      	movs	r0, r1
   22066:	0011      	movs	r1, r2
   22068:	607b      	str	r3, [r7, #4]
   2206a:	230b      	movs	r3, #11
   2206c:	18fb      	adds	r3, r7, r3
   2206e:	1c02      	adds	r2, r0, #0
   22070:	701a      	strb	r2, [r3, #0]
   22072:	230a      	movs	r3, #10
   22074:	18fb      	adds	r3, r7, r3
   22076:	1c0a      	adds	r2, r1, #0
   22078:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   2207a:	2397      	movs	r3, #151	; 0x97
   2207c:	18fb      	adds	r3, r7, r3
   2207e:	2200      	movs	r2, #0
   22080:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   22082:	230a      	movs	r3, #10
   22084:	18fb      	adds	r3, r7, r3
   22086:	781b      	ldrb	r3, [r3, #0]
   22088:	2b01      	cmp	r3, #1
   2208a:	d100      	bne.n	2208e <m2m_wifi_connect_sc+0x32>
   2208c:	e085      	b.n	2219a <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   2208e:	687b      	ldr	r3, [r7, #4]
   22090:	2b00      	cmp	r3, #0
   22092:	d112      	bne.n	220ba <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   22094:	4ad8      	ldr	r2, [pc, #864]	; (223f8 <m2m_wifi_connect_sc+0x39c>)
   22096:	49d9      	ldr	r1, [pc, #868]	; (223fc <m2m_wifi_connect_sc+0x3a0>)
   22098:	4bd9      	ldr	r3, [pc, #868]	; (22400 <m2m_wifi_connect_sc+0x3a4>)
   2209a:	0018      	movs	r0, r3
   2209c:	4bd9      	ldr	r3, [pc, #868]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   2209e:	4798      	blx	r3
   220a0:	4bd9      	ldr	r3, [pc, #868]	; (22408 <m2m_wifi_connect_sc+0x3ac>)
   220a2:	0018      	movs	r0, r3
   220a4:	4bd7      	ldr	r3, [pc, #860]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   220a6:	4798      	blx	r3
   220a8:	4bd8      	ldr	r3, [pc, #864]	; (2240c <m2m_wifi_connect_sc+0x3b0>)
   220aa:	0018      	movs	r0, r3
   220ac:	4bd5      	ldr	r3, [pc, #852]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   220ae:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   220b0:	2397      	movs	r3, #151	; 0x97
   220b2:	18fb      	adds	r3, r7, r3
   220b4:	22f4      	movs	r2, #244	; 0xf4
   220b6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   220b8:	e1f9      	b.n	224ae <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   220ba:	230a      	movs	r3, #10
   220bc:	18fb      	adds	r3, r7, r3
   220be:	781b      	ldrb	r3, [r3, #0]
   220c0:	2b02      	cmp	r3, #2
   220c2:	d16a      	bne.n	2219a <m2m_wifi_connect_sc+0x13e>
   220c4:	687b      	ldr	r3, [r7, #4]
   220c6:	0018      	movs	r0, r3
   220c8:	4bd1      	ldr	r3, [pc, #836]	; (22410 <m2m_wifi_connect_sc+0x3b4>)
   220ca:	4798      	blx	r3
   220cc:	0003      	movs	r3, r0
   220ce:	2b40      	cmp	r3, #64	; 0x40
   220d0:	d163      	bne.n	2219a <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   220d2:	2396      	movs	r3, #150	; 0x96
   220d4:	18fb      	adds	r3, r7, r3
   220d6:	2200      	movs	r2, #0
   220d8:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   220da:	687b      	ldr	r3, [r7, #4]
   220dc:	2290      	movs	r2, #144	; 0x90
   220de:	18ba      	adds	r2, r7, r2
   220e0:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   220e2:	e055      	b.n	22190 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   220e4:	2396      	movs	r3, #150	; 0x96
   220e6:	18fb      	adds	r3, r7, r3
   220e8:	781b      	ldrb	r3, [r3, #0]
   220ea:	2290      	movs	r2, #144	; 0x90
   220ec:	18ba      	adds	r2, r7, r2
   220ee:	6812      	ldr	r2, [r2, #0]
   220f0:	18d3      	adds	r3, r2, r3
   220f2:	781b      	ldrb	r3, [r3, #0]
   220f4:	2b2f      	cmp	r3, #47	; 0x2f
   220f6:	d931      	bls.n	2215c <m2m_wifi_connect_sc+0x100>
   220f8:	2396      	movs	r3, #150	; 0x96
   220fa:	18fb      	adds	r3, r7, r3
   220fc:	781b      	ldrb	r3, [r3, #0]
   220fe:	2290      	movs	r2, #144	; 0x90
   22100:	18ba      	adds	r2, r7, r2
   22102:	6812      	ldr	r2, [r2, #0]
   22104:	18d3      	adds	r3, r2, r3
   22106:	781b      	ldrb	r3, [r3, #0]
   22108:	2b39      	cmp	r3, #57	; 0x39
   2210a:	d909      	bls.n	22120 <m2m_wifi_connect_sc+0xc4>
   2210c:	2396      	movs	r3, #150	; 0x96
   2210e:	18fb      	adds	r3, r7, r3
   22110:	781b      	ldrb	r3, [r3, #0]
   22112:	2290      	movs	r2, #144	; 0x90
   22114:	18ba      	adds	r2, r7, r2
   22116:	6812      	ldr	r2, [r2, #0]
   22118:	18d3      	adds	r3, r2, r3
   2211a:	781b      	ldrb	r3, [r3, #0]
   2211c:	2b40      	cmp	r3, #64	; 0x40
   2211e:	d91d      	bls.n	2215c <m2m_wifi_connect_sc+0x100>
   22120:	2396      	movs	r3, #150	; 0x96
   22122:	18fb      	adds	r3, r7, r3
   22124:	781b      	ldrb	r3, [r3, #0]
   22126:	2290      	movs	r2, #144	; 0x90
   22128:	18ba      	adds	r2, r7, r2
   2212a:	6812      	ldr	r2, [r2, #0]
   2212c:	18d3      	adds	r3, r2, r3
   2212e:	781b      	ldrb	r3, [r3, #0]
   22130:	2b46      	cmp	r3, #70	; 0x46
   22132:	d909      	bls.n	22148 <m2m_wifi_connect_sc+0xec>
   22134:	2396      	movs	r3, #150	; 0x96
   22136:	18fb      	adds	r3, r7, r3
   22138:	781b      	ldrb	r3, [r3, #0]
   2213a:	2290      	movs	r2, #144	; 0x90
   2213c:	18ba      	adds	r2, r7, r2
   2213e:	6812      	ldr	r2, [r2, #0]
   22140:	18d3      	adds	r3, r2, r3
   22142:	781b      	ldrb	r3, [r3, #0]
   22144:	2b60      	cmp	r3, #96	; 0x60
   22146:	d909      	bls.n	2215c <m2m_wifi_connect_sc+0x100>
   22148:	2396      	movs	r3, #150	; 0x96
   2214a:	18fb      	adds	r3, r7, r3
   2214c:	781b      	ldrb	r3, [r3, #0]
   2214e:	2290      	movs	r2, #144	; 0x90
   22150:	18ba      	adds	r2, r7, r2
   22152:	6812      	ldr	r2, [r2, #0]
   22154:	18d3      	adds	r3, r2, r3
   22156:	781b      	ldrb	r3, [r3, #0]
   22158:	2b66      	cmp	r3, #102	; 0x66
   2215a:	d912      	bls.n	22182 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   2215c:	4aad      	ldr	r2, [pc, #692]	; (22414 <m2m_wifi_connect_sc+0x3b8>)
   2215e:	49a7      	ldr	r1, [pc, #668]	; (223fc <m2m_wifi_connect_sc+0x3a0>)
   22160:	4ba7      	ldr	r3, [pc, #668]	; (22400 <m2m_wifi_connect_sc+0x3a4>)
   22162:	0018      	movs	r0, r3
   22164:	4ba7      	ldr	r3, [pc, #668]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   22166:	4798      	blx	r3
   22168:	4bab      	ldr	r3, [pc, #684]	; (22418 <m2m_wifi_connect_sc+0x3bc>)
   2216a:	0018      	movs	r0, r3
   2216c:	4ba5      	ldr	r3, [pc, #660]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   2216e:	4798      	blx	r3
   22170:	4ba6      	ldr	r3, [pc, #664]	; (2240c <m2m_wifi_connect_sc+0x3b0>)
   22172:	0018      	movs	r0, r3
   22174:	4ba3      	ldr	r3, [pc, #652]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   22176:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   22178:	2397      	movs	r3, #151	; 0x97
   2217a:	18fb      	adds	r3, r7, r3
   2217c:	22f4      	movs	r2, #244	; 0xf4
   2217e:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   22180:	e195      	b.n	224ae <m2m_wifi_connect_sc+0x452>
				}
				i++;
   22182:	2396      	movs	r3, #150	; 0x96
   22184:	18fb      	adds	r3, r7, r3
   22186:	781a      	ldrb	r2, [r3, #0]
   22188:	2396      	movs	r3, #150	; 0x96
   2218a:	18fb      	adds	r3, r7, r3
   2218c:	3201      	adds	r2, #1
   2218e:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22190:	2396      	movs	r3, #150	; 0x96
   22192:	18fb      	adds	r3, r7, r3
   22194:	781b      	ldrb	r3, [r3, #0]
   22196:	2b3f      	cmp	r3, #63	; 0x3f
   22198:	d9a4      	bls.n	220e4 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   2219a:	230b      	movs	r3, #11
   2219c:	18fb      	adds	r3, r7, r3
   2219e:	781b      	ldrb	r3, [r3, #0]
   221a0:	2b00      	cmp	r3, #0
   221a2:	d004      	beq.n	221ae <m2m_wifi_connect_sc+0x152>
   221a4:	230b      	movs	r3, #11
   221a6:	18fb      	adds	r3, r7, r3
   221a8:	781b      	ldrb	r3, [r3, #0]
   221aa:	2b20      	cmp	r3, #32
   221ac:	d913      	bls.n	221d6 <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   221ae:	238c      	movs	r3, #140	; 0x8c
   221b0:	009a      	lsls	r2, r3, #2
   221b2:	4992      	ldr	r1, [pc, #584]	; (223fc <m2m_wifi_connect_sc+0x3a0>)
   221b4:	4b92      	ldr	r3, [pc, #584]	; (22400 <m2m_wifi_connect_sc+0x3a4>)
   221b6:	0018      	movs	r0, r3
   221b8:	4b92      	ldr	r3, [pc, #584]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   221ba:	4798      	blx	r3
   221bc:	4b97      	ldr	r3, [pc, #604]	; (2241c <m2m_wifi_connect_sc+0x3c0>)
   221be:	0018      	movs	r0, r3
   221c0:	4b90      	ldr	r3, [pc, #576]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   221c2:	4798      	blx	r3
   221c4:	4b91      	ldr	r3, [pc, #580]	; (2240c <m2m_wifi_connect_sc+0x3b0>)
   221c6:	0018      	movs	r0, r3
   221c8:	4b8e      	ldr	r3, [pc, #568]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   221ca:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   221cc:	2397      	movs	r3, #151	; 0x97
   221ce:	18fb      	adds	r3, r7, r3
   221d0:	22f4      	movs	r2, #244	; 0xf4
   221d2:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   221d4:	e16b      	b.n	224ae <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   221d6:	23a8      	movs	r3, #168	; 0xa8
   221d8:	18fb      	adds	r3, r7, r3
   221da:	881b      	ldrh	r3, [r3, #0]
   221dc:	2b00      	cmp	r3, #0
   221de:	d004      	beq.n	221ea <m2m_wifi_connect_sc+0x18e>
   221e0:	23a8      	movs	r3, #168	; 0xa8
   221e2:	18fb      	adds	r3, r7, r3
   221e4:	881b      	ldrh	r3, [r3, #0]
   221e6:	2b0e      	cmp	r3, #14
   221e8:	d917      	bls.n	2221a <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   221ea:	23a8      	movs	r3, #168	; 0xa8
   221ec:	18fb      	adds	r3, r7, r3
   221ee:	881b      	ldrh	r3, [r3, #0]
   221f0:	2bff      	cmp	r3, #255	; 0xff
   221f2:	d012      	beq.n	2221a <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   221f4:	4a8a      	ldr	r2, [pc, #552]	; (22420 <m2m_wifi_connect_sc+0x3c4>)
   221f6:	4981      	ldr	r1, [pc, #516]	; (223fc <m2m_wifi_connect_sc+0x3a0>)
   221f8:	4b81      	ldr	r3, [pc, #516]	; (22400 <m2m_wifi_connect_sc+0x3a4>)
   221fa:	0018      	movs	r0, r3
   221fc:	4b81      	ldr	r3, [pc, #516]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   221fe:	4798      	blx	r3
   22200:	4b88      	ldr	r3, [pc, #544]	; (22424 <m2m_wifi_connect_sc+0x3c8>)
   22202:	0018      	movs	r0, r3
   22204:	4b7f      	ldr	r3, [pc, #508]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   22206:	4798      	blx	r3
   22208:	4b80      	ldr	r3, [pc, #512]	; (2240c <m2m_wifi_connect_sc+0x3b0>)
   2220a:	0018      	movs	r0, r3
   2220c:	4b7d      	ldr	r3, [pc, #500]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   2220e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22210:	2397      	movs	r3, #151	; 0x97
   22212:	18fb      	adds	r3, r7, r3
   22214:	22f4      	movs	r2, #244	; 0xf4
   22216:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22218:	e149      	b.n	224ae <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   2221a:	230b      	movs	r3, #11
   2221c:	18fb      	adds	r3, r7, r3
   2221e:	781a      	ldrb	r2, [r3, #0]
   22220:	68f9      	ldr	r1, [r7, #12]
   22222:	2314      	movs	r3, #20
   22224:	18fb      	adds	r3, r7, r3
   22226:	3346      	adds	r3, #70	; 0x46
   22228:	0018      	movs	r0, r3
   2222a:	4b7f      	ldr	r3, [pc, #508]	; (22428 <m2m_wifi_connect_sc+0x3cc>)
   2222c:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   2222e:	230b      	movs	r3, #11
   22230:	18fb      	adds	r3, r7, r3
   22232:	781b      	ldrb	r3, [r3, #0]
   22234:	2214      	movs	r2, #20
   22236:	18ba      	adds	r2, r7, r2
   22238:	2146      	movs	r1, #70	; 0x46
   2223a:	18d3      	adds	r3, r2, r3
   2223c:	185b      	adds	r3, r3, r1
   2223e:	2200      	movs	r2, #0
   22240:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   22242:	2314      	movs	r3, #20
   22244:	18fb      	adds	r3, r7, r3
   22246:	22a8      	movs	r2, #168	; 0xa8
   22248:	18ba      	adds	r2, r7, r2
   2224a:	2144      	movs	r1, #68	; 0x44
   2224c:	8812      	ldrh	r2, [r2, #0]
   2224e:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   22250:	23ac      	movs	r3, #172	; 0xac
   22252:	18fb      	adds	r3, r7, r3
   22254:	781b      	ldrb	r3, [r3, #0]
   22256:	1e5a      	subs	r2, r3, #1
   22258:	4193      	sbcs	r3, r2
   2225a:	b2db      	uxtb	r3, r3
   2225c:	0019      	movs	r1, r3
   2225e:	2314      	movs	r3, #20
   22260:	18fb      	adds	r3, r7, r3
   22262:	2267      	movs	r2, #103	; 0x67
   22264:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   22266:	2314      	movs	r3, #20
   22268:	18fb      	adds	r3, r7, r3
   2226a:	228c      	movs	r2, #140	; 0x8c
   2226c:	18ba      	adds	r2, r7, r2
   2226e:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   22270:	238c      	movs	r3, #140	; 0x8c
   22272:	18fb      	adds	r3, r7, r3
   22274:	681b      	ldr	r3, [r3, #0]
   22276:	220a      	movs	r2, #10
   22278:	18ba      	adds	r2, r7, r2
   2227a:	2141      	movs	r1, #65	; 0x41
   2227c:	7812      	ldrb	r2, [r2, #0]
   2227e:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   22280:	230a      	movs	r3, #10
   22282:	18fb      	adds	r3, r7, r3
   22284:	781b      	ldrb	r3, [r3, #0]
   22286:	2b03      	cmp	r3, #3
   22288:	d000      	beq.n	2228c <m2m_wifi_connect_sc+0x230>
   2228a:	e07d      	b.n	22388 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   2228c:	687b      	ldr	r3, [r7, #4]
   2228e:	2288      	movs	r2, #136	; 0x88
   22290:	18ba      	adds	r2, r7, r2
   22292:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   22294:	238c      	movs	r3, #140	; 0x8c
   22296:	18fb      	adds	r3, r7, r3
   22298:	681b      	ldr	r3, [r3, #0]
   2229a:	2284      	movs	r2, #132	; 0x84
   2229c:	18ba      	adds	r2, r7, r2
   2229e:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   222a0:	2388      	movs	r3, #136	; 0x88
   222a2:	18fb      	adds	r3, r7, r3
   222a4:	681b      	ldr	r3, [r3, #0]
   222a6:	781b      	ldrb	r3, [r3, #0]
   222a8:	3b01      	subs	r3, #1
   222aa:	b2da      	uxtb	r2, r3
   222ac:	2384      	movs	r3, #132	; 0x84
   222ae:	18fb      	adds	r3, r7, r3
   222b0:	681b      	ldr	r3, [r3, #0]
   222b2:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   222b4:	2384      	movs	r3, #132	; 0x84
   222b6:	18fb      	adds	r3, r7, r3
   222b8:	681b      	ldr	r3, [r3, #0]
   222ba:	781b      	ldrb	r3, [r3, #0]
   222bc:	2b03      	cmp	r3, #3
   222be:	d919      	bls.n	222f4 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   222c0:	2394      	movs	r3, #148	; 0x94
   222c2:	009a      	lsls	r2, r3, #2
   222c4:	494d      	ldr	r1, [pc, #308]	; (223fc <m2m_wifi_connect_sc+0x3a0>)
   222c6:	4b4e      	ldr	r3, [pc, #312]	; (22400 <m2m_wifi_connect_sc+0x3a4>)
   222c8:	0018      	movs	r0, r3
   222ca:	4b4e      	ldr	r3, [pc, #312]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   222cc:	4798      	blx	r3
   222ce:	2384      	movs	r3, #132	; 0x84
   222d0:	18fb      	adds	r3, r7, r3
   222d2:	681b      	ldr	r3, [r3, #0]
   222d4:	781b      	ldrb	r3, [r3, #0]
   222d6:	001a      	movs	r2, r3
   222d8:	4b54      	ldr	r3, [pc, #336]	; (2242c <m2m_wifi_connect_sc+0x3d0>)
   222da:	0011      	movs	r1, r2
   222dc:	0018      	movs	r0, r3
   222de:	4b49      	ldr	r3, [pc, #292]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   222e0:	4798      	blx	r3
   222e2:	4b4a      	ldr	r3, [pc, #296]	; (2240c <m2m_wifi_connect_sc+0x3b0>)
   222e4:	0018      	movs	r0, r3
   222e6:	4b47      	ldr	r3, [pc, #284]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   222e8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   222ea:	2397      	movs	r3, #151	; 0x97
   222ec:	18fb      	adds	r3, r7, r3
   222ee:	22f4      	movs	r2, #244	; 0xf4
   222f0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   222f2:	e0dc      	b.n	224ae <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   222f4:	2388      	movs	r3, #136	; 0x88
   222f6:	18fb      	adds	r3, r7, r3
   222f8:	681b      	ldr	r3, [r3, #0]
   222fa:	785b      	ldrb	r3, [r3, #1]
   222fc:	3b01      	subs	r3, #1
   222fe:	b2da      	uxtb	r2, r3
   22300:	2384      	movs	r3, #132	; 0x84
   22302:	18fb      	adds	r3, r7, r3
   22304:	681b      	ldr	r3, [r3, #0]
   22306:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   22308:	2384      	movs	r3, #132	; 0x84
   2230a:	18fb      	adds	r3, r7, r3
   2230c:	681b      	ldr	r3, [r3, #0]
   2230e:	785b      	ldrb	r3, [r3, #1]
   22310:	2b0a      	cmp	r3, #10
   22312:	d01e      	beq.n	22352 <m2m_wifi_connect_sc+0x2f6>
   22314:	2384      	movs	r3, #132	; 0x84
   22316:	18fb      	adds	r3, r7, r3
   22318:	681b      	ldr	r3, [r3, #0]
   2231a:	785b      	ldrb	r3, [r3, #1]
   2231c:	2b1a      	cmp	r3, #26
   2231e:	d018      	beq.n	22352 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   22320:	4a43      	ldr	r2, [pc, #268]	; (22430 <m2m_wifi_connect_sc+0x3d4>)
   22322:	4936      	ldr	r1, [pc, #216]	; (223fc <m2m_wifi_connect_sc+0x3a0>)
   22324:	4b36      	ldr	r3, [pc, #216]	; (22400 <m2m_wifi_connect_sc+0x3a4>)
   22326:	0018      	movs	r0, r3
   22328:	4b36      	ldr	r3, [pc, #216]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   2232a:	4798      	blx	r3
   2232c:	2384      	movs	r3, #132	; 0x84
   2232e:	18fb      	adds	r3, r7, r3
   22330:	681b      	ldr	r3, [r3, #0]
   22332:	785b      	ldrb	r3, [r3, #1]
   22334:	001a      	movs	r2, r3
   22336:	4b3f      	ldr	r3, [pc, #252]	; (22434 <m2m_wifi_connect_sc+0x3d8>)
   22338:	0011      	movs	r1, r2
   2233a:	0018      	movs	r0, r3
   2233c:	4b31      	ldr	r3, [pc, #196]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   2233e:	4798      	blx	r3
   22340:	4b32      	ldr	r3, [pc, #200]	; (2240c <m2m_wifi_connect_sc+0x3b0>)
   22342:	0018      	movs	r0, r3
   22344:	4b2f      	ldr	r3, [pc, #188]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   22346:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22348:	2397      	movs	r3, #151	; 0x97
   2234a:	18fb      	adds	r3, r7, r3
   2234c:	22f4      	movs	r2, #244	; 0xf4
   2234e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22350:	e0ad      	b.n	224ae <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   22352:	2384      	movs	r3, #132	; 0x84
   22354:	18fb      	adds	r3, r7, r3
   22356:	681b      	ldr	r3, [r3, #0]
   22358:	1c98      	adds	r0, r3, #2
   2235a:	2388      	movs	r3, #136	; 0x88
   2235c:	18fb      	adds	r3, r7, r3
   2235e:	681b      	ldr	r3, [r3, #0]
   22360:	1c99      	adds	r1, r3, #2
   22362:	2388      	movs	r3, #136	; 0x88
   22364:	18fb      	adds	r3, r7, r3
   22366:	681b      	ldr	r3, [r3, #0]
   22368:	785b      	ldrb	r3, [r3, #1]
   2236a:	001a      	movs	r2, r3
   2236c:	4b2e      	ldr	r3, [pc, #184]	; (22428 <m2m_wifi_connect_sc+0x3cc>)
   2236e:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   22370:	2388      	movs	r3, #136	; 0x88
   22372:	18fb      	adds	r3, r7, r3
   22374:	681b      	ldr	r3, [r3, #0]
   22376:	785b      	ldrb	r3, [r3, #1]
   22378:	001a      	movs	r2, r3
   2237a:	2384      	movs	r3, #132	; 0x84
   2237c:	18fb      	adds	r3, r7, r3
   2237e:	681b      	ldr	r3, [r3, #0]
   22380:	189b      	adds	r3, r3, r2
   22382:	2200      	movs	r2, #0
   22384:	709a      	strb	r2, [r3, #2]
   22386:	e081      	b.n	2248c <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   22388:	230a      	movs	r3, #10
   2238a:	18fb      	adds	r3, r7, r3
   2238c:	781b      	ldrb	r3, [r3, #0]
   2238e:	2b02      	cmp	r3, #2
   22390:	d156      	bne.n	22440 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   22392:	2382      	movs	r3, #130	; 0x82
   22394:	18fc      	adds	r4, r7, r3
   22396:	687b      	ldr	r3, [r7, #4]
   22398:	0018      	movs	r0, r3
   2239a:	4b1d      	ldr	r3, [pc, #116]	; (22410 <m2m_wifi_connect_sc+0x3b4>)
   2239c:	4798      	blx	r3
   2239e:	0003      	movs	r3, r0
   223a0:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   223a2:	2382      	movs	r3, #130	; 0x82
   223a4:	18fb      	adds	r3, r7, r3
   223a6:	881b      	ldrh	r3, [r3, #0]
   223a8:	2b00      	cmp	r3, #0
   223aa:	d004      	beq.n	223b6 <m2m_wifi_connect_sc+0x35a>
   223ac:	2382      	movs	r3, #130	; 0x82
   223ae:	18fb      	adds	r3, r7, r3
   223b0:	881b      	ldrh	r3, [r3, #0]
   223b2:	2b40      	cmp	r3, #64	; 0x40
   223b4:	d912      	bls.n	223dc <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   223b6:	4a20      	ldr	r2, [pc, #128]	; (22438 <m2m_wifi_connect_sc+0x3dc>)
   223b8:	4910      	ldr	r1, [pc, #64]	; (223fc <m2m_wifi_connect_sc+0x3a0>)
   223ba:	4b11      	ldr	r3, [pc, #68]	; (22400 <m2m_wifi_connect_sc+0x3a4>)
   223bc:	0018      	movs	r0, r3
   223be:	4b11      	ldr	r3, [pc, #68]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   223c0:	4798      	blx	r3
   223c2:	4b1e      	ldr	r3, [pc, #120]	; (2243c <m2m_wifi_connect_sc+0x3e0>)
   223c4:	0018      	movs	r0, r3
   223c6:	4b0f      	ldr	r3, [pc, #60]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   223c8:	4798      	blx	r3
   223ca:	4b10      	ldr	r3, [pc, #64]	; (2240c <m2m_wifi_connect_sc+0x3b0>)
   223cc:	0018      	movs	r0, r3
   223ce:	4b0d      	ldr	r3, [pc, #52]	; (22404 <m2m_wifi_connect_sc+0x3a8>)
   223d0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   223d2:	2397      	movs	r3, #151	; 0x97
   223d4:	18fb      	adds	r3, r7, r3
   223d6:	22f4      	movs	r2, #244	; 0xf4
   223d8:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   223da:	e068      	b.n	224ae <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   223dc:	238c      	movs	r3, #140	; 0x8c
   223de:	18fb      	adds	r3, r7, r3
   223e0:	6818      	ldr	r0, [r3, #0]
   223e2:	2382      	movs	r3, #130	; 0x82
   223e4:	18fb      	adds	r3, r7, r3
   223e6:	881b      	ldrh	r3, [r3, #0]
   223e8:	3301      	adds	r3, #1
   223ea:	001a      	movs	r2, r3
   223ec:	687b      	ldr	r3, [r7, #4]
   223ee:	0019      	movs	r1, r3
   223f0:	4b0d      	ldr	r3, [pc, #52]	; (22428 <m2m_wifi_connect_sc+0x3cc>)
   223f2:	4798      	blx	r3
   223f4:	e04a      	b.n	2248c <m2m_wifi_connect_sc+0x430>
   223f6:	46c0      	nop			; (mov r8, r8)
   223f8:	0000021a 	.word	0x0000021a
   223fc:	00038be4 	.word	0x00038be4
   22400:	0003882c 	.word	0x0003882c
   22404:	0001df59 	.word	0x0001df59
   22408:	00038a6c 	.word	0x00038a6c
   2240c:	00038828 	.word	0x00038828
   22410:	00020ccb 	.word	0x00020ccb
   22414:	00000226 	.word	0x00000226
   22418:	00038a80 	.word	0x00038a80
   2241c:	00038a90 	.word	0x00038a90
   22420:	00000239 	.word	0x00000239
   22424:	00038aa4 	.word	0x00038aa4
   22428:	00020c51 	.word	0x00020c51
   2242c:	00038ab0 	.word	0x00038ab0
   22430:	00000257 	.word	0x00000257
   22434:	00038acc 	.word	0x00038acc
   22438:	00000266 	.word	0x00000266
   2243c:	00038ae8 	.word	0x00038ae8
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   22440:	230a      	movs	r3, #10
   22442:	18fb      	adds	r3, r7, r3
   22444:	781b      	ldrb	r3, [r3, #0]
   22446:	2b04      	cmp	r3, #4
   22448:	d108      	bne.n	2245c <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   2244a:	238c      	movs	r3, #140	; 0x8c
   2244c:	18fb      	adds	r3, r7, r3
   2244e:	681b      	ldr	r3, [r3, #0]
   22450:	6879      	ldr	r1, [r7, #4]
   22452:	223e      	movs	r2, #62	; 0x3e
   22454:	0018      	movs	r0, r3
   22456:	4b1a      	ldr	r3, [pc, #104]	; (224c0 <m2m_wifi_connect_sc+0x464>)
   22458:	4798      	blx	r3
   2245a:	e017      	b.n	2248c <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   2245c:	230a      	movs	r3, #10
   2245e:	18fb      	adds	r3, r7, r3
   22460:	781b      	ldrb	r3, [r3, #0]
   22462:	2b01      	cmp	r3, #1
   22464:	d012      	beq.n	2248c <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   22466:	4a17      	ldr	r2, [pc, #92]	; (224c4 <m2m_wifi_connect_sc+0x468>)
   22468:	4917      	ldr	r1, [pc, #92]	; (224c8 <m2m_wifi_connect_sc+0x46c>)
   2246a:	4b18      	ldr	r3, [pc, #96]	; (224cc <m2m_wifi_connect_sc+0x470>)
   2246c:	0018      	movs	r0, r3
   2246e:	4b18      	ldr	r3, [pc, #96]	; (224d0 <m2m_wifi_connect_sc+0x474>)
   22470:	4798      	blx	r3
   22472:	4b18      	ldr	r3, [pc, #96]	; (224d4 <m2m_wifi_connect_sc+0x478>)
   22474:	0018      	movs	r0, r3
   22476:	4b16      	ldr	r3, [pc, #88]	; (224d0 <m2m_wifi_connect_sc+0x474>)
   22478:	4798      	blx	r3
   2247a:	4b17      	ldr	r3, [pc, #92]	; (224d8 <m2m_wifi_connect_sc+0x47c>)
   2247c:	0018      	movs	r0, r3
   2247e:	4b14      	ldr	r3, [pc, #80]	; (224d0 <m2m_wifi_connect_sc+0x474>)
   22480:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22482:	2397      	movs	r3, #151	; 0x97
   22484:	18fb      	adds	r3, r7, r3
   22486:	22f4      	movs	r2, #244	; 0xf4
   22488:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   2248a:	e010      	b.n	224ae <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   2248c:	2397      	movs	r3, #151	; 0x97
   2248e:	18fc      	adds	r4, r7, r3
   22490:	2314      	movs	r3, #20
   22492:	18fa      	adds	r2, r7, r3
   22494:	2300      	movs	r3, #0
   22496:	9302      	str	r3, [sp, #8]
   22498:	2300      	movs	r3, #0
   2249a:	9301      	str	r3, [sp, #4]
   2249c:	2300      	movs	r3, #0
   2249e:	9300      	str	r3, [sp, #0]
   224a0:	236c      	movs	r3, #108	; 0x6c
   224a2:	2128      	movs	r1, #40	; 0x28
   224a4:	2001      	movs	r0, #1
   224a6:	4d0d      	ldr	r5, [pc, #52]	; (224dc <m2m_wifi_connect_sc+0x480>)
   224a8:	47a8      	blx	r5
   224aa:	0003      	movs	r3, r0
   224ac:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   224ae:	2397      	movs	r3, #151	; 0x97
   224b0:	18fb      	adds	r3, r7, r3
   224b2:	781b      	ldrb	r3, [r3, #0]
   224b4:	b25b      	sxtb	r3, r3
}
   224b6:	0018      	movs	r0, r3
   224b8:	46bd      	mov	sp, r7
   224ba:	b026      	add	sp, #152	; 0x98
   224bc:	bdb0      	pop	{r4, r5, r7, pc}
   224be:	46c0      	nop			; (mov r8, r8)
   224c0:	00020c51 	.word	0x00020c51
   224c4:	00000276 	.word	0x00000276
   224c8:	00038be4 	.word	0x00038be4
   224cc:	0003882c 	.word	0x0003882c
   224d0:	0001df59 	.word	0x0001df59
   224d4:	00038b04 	.word	0x00038b04
   224d8:	00038828 	.word	0x00038828
   224dc:	00020eed 	.word	0x00020eed

000224e0 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   224e0:	b580      	push	{r7, lr}
   224e2:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   224e4:	2300      	movs	r3, #0
}
   224e6:	0018      	movs	r0, r3
   224e8:	46bd      	mov	sp, r7
   224ea:	bd80      	pop	{r7, pc}

000224ec <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   224ec:	b590      	push	{r4, r7, lr}
   224ee:	b087      	sub	sp, #28
   224f0:	af00      	add	r7, sp, #0
   224f2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   224f4:	2317      	movs	r3, #23
   224f6:	18fb      	adds	r3, r7, r3
   224f8:	2200      	movs	r2, #0
   224fa:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   224fc:	687b      	ldr	r3, [r7, #4]
   224fe:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   22500:	693b      	ldr	r3, [r7, #16]
   22502:	2280      	movs	r2, #128	; 0x80
   22504:	0052      	lsls	r2, r2, #1
   22506:	4313      	orrs	r3, r2
   22508:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   2250a:	693a      	ldr	r2, [r7, #16]
   2250c:	23a5      	movs	r3, #165	; 0xa5
   2250e:	015b      	lsls	r3, r3, #5
   22510:	0011      	movs	r1, r2
   22512:	0018      	movs	r0, r3
   22514:	4b12      	ldr	r3, [pc, #72]	; (22560 <chip_apply_conf+0x74>)
   22516:	4798      	blx	r3
		if(val32 != 0) {		
   22518:	693b      	ldr	r3, [r7, #16]
   2251a:	2b00      	cmp	r3, #0
   2251c:	d018      	beq.n	22550 <chip_apply_conf+0x64>
			uint32 reg = 0;
   2251e:	2300      	movs	r3, #0
   22520:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   22522:	2317      	movs	r3, #23
   22524:	18fc      	adds	r4, r7, r3
   22526:	230c      	movs	r3, #12
   22528:	18fa      	adds	r2, r7, r3
   2252a:	23a5      	movs	r3, #165	; 0xa5
   2252c:	015b      	lsls	r3, r3, #5
   2252e:	0011      	movs	r1, r2
   22530:	0018      	movs	r0, r3
   22532:	4b0c      	ldr	r3, [pc, #48]	; (22564 <chip_apply_conf+0x78>)
   22534:	4798      	blx	r3
   22536:	0003      	movs	r3, r0
   22538:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   2253a:	2317      	movs	r3, #23
   2253c:	18fb      	adds	r3, r7, r3
   2253e:	781b      	ldrb	r3, [r3, #0]
   22540:	b25b      	sxtb	r3, r3
   22542:	2b00      	cmp	r3, #0
   22544:	d1e1      	bne.n	2250a <chip_apply_conf+0x1e>
				if(reg == val32)
   22546:	68fa      	ldr	r2, [r7, #12]
   22548:	693b      	ldr	r3, [r7, #16]
   2254a:	429a      	cmp	r2, r3
   2254c:	d002      	beq.n	22554 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   2254e:	e7dc      	b.n	2250a <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   22550:	46c0      	nop			; (mov r8, r8)
   22552:	e000      	b.n	22556 <chip_apply_conf+0x6a>
					break;
   22554:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   22556:	2300      	movs	r3, #0
}
   22558:	0018      	movs	r0, r3
   2255a:	46bd      	mov	sp, r7
   2255c:	b007      	add	sp, #28
   2255e:	bd90      	pop	{r4, r7, pc}
   22560:	00022d41 	.word	0x00022d41
   22564:	00022d1d 	.word	0x00022d1d

00022568 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   22568:	b590      	push	{r4, r7, lr}
   2256a:	b083      	sub	sp, #12
   2256c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2256e:	2300      	movs	r3, #0
   22570:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   22572:	1dfb      	adds	r3, r7, #7
   22574:	2200      	movs	r2, #0
   22576:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   22578:	1dfc      	adds	r4, r7, #7
   2257a:	003b      	movs	r3, r7
   2257c:	4a24      	ldr	r2, [pc, #144]	; (22610 <enable_interrupts+0xa8>)
   2257e:	0019      	movs	r1, r3
   22580:	0010      	movs	r0, r2
   22582:	4b24      	ldr	r3, [pc, #144]	; (22614 <enable_interrupts+0xac>)
   22584:	4798      	blx	r3
   22586:	0003      	movs	r3, r0
   22588:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2258a:	1dfb      	adds	r3, r7, #7
   2258c:	781b      	ldrb	r3, [r3, #0]
   2258e:	b25b      	sxtb	r3, r3
   22590:	2b00      	cmp	r3, #0
   22592:	d131      	bne.n	225f8 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   22594:	683b      	ldr	r3, [r7, #0]
   22596:	2280      	movs	r2, #128	; 0x80
   22598:	0052      	lsls	r2, r2, #1
   2259a:	4313      	orrs	r3, r2
   2259c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   2259e:	683b      	ldr	r3, [r7, #0]
   225a0:	1dfc      	adds	r4, r7, #7
   225a2:	4a1b      	ldr	r2, [pc, #108]	; (22610 <enable_interrupts+0xa8>)
   225a4:	0019      	movs	r1, r3
   225a6:	0010      	movs	r0, r2
   225a8:	4b1b      	ldr	r3, [pc, #108]	; (22618 <enable_interrupts+0xb0>)
   225aa:	4798      	blx	r3
   225ac:	0003      	movs	r3, r0
   225ae:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   225b0:	1dfb      	adds	r3, r7, #7
   225b2:	781b      	ldrb	r3, [r3, #0]
   225b4:	b25b      	sxtb	r3, r3
   225b6:	2b00      	cmp	r3, #0
   225b8:	d120      	bne.n	225fc <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   225ba:	1dfc      	adds	r4, r7, #7
   225bc:	003a      	movs	r2, r7
   225be:	23d0      	movs	r3, #208	; 0xd0
   225c0:	015b      	lsls	r3, r3, #5
   225c2:	0011      	movs	r1, r2
   225c4:	0018      	movs	r0, r3
   225c6:	4b13      	ldr	r3, [pc, #76]	; (22614 <enable_interrupts+0xac>)
   225c8:	4798      	blx	r3
   225ca:	0003      	movs	r3, r0
   225cc:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   225ce:	1dfb      	adds	r3, r7, #7
   225d0:	781b      	ldrb	r3, [r3, #0]
   225d2:	b25b      	sxtb	r3, r3
   225d4:	2b00      	cmp	r3, #0
   225d6:	d113      	bne.n	22600 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   225d8:	683b      	ldr	r3, [r7, #0]
   225da:	2280      	movs	r2, #128	; 0x80
   225dc:	0252      	lsls	r2, r2, #9
   225de:	4313      	orrs	r3, r2
   225e0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   225e2:	683a      	ldr	r2, [r7, #0]
   225e4:	1dfc      	adds	r4, r7, #7
   225e6:	23d0      	movs	r3, #208	; 0xd0
   225e8:	015b      	lsls	r3, r3, #5
   225ea:	0011      	movs	r1, r2
   225ec:	0018      	movs	r0, r3
   225ee:	4b0a      	ldr	r3, [pc, #40]	; (22618 <enable_interrupts+0xb0>)
   225f0:	4798      	blx	r3
   225f2:	0003      	movs	r3, r0
   225f4:	7023      	strb	r3, [r4, #0]
   225f6:	e004      	b.n	22602 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   225f8:	46c0      	nop			; (mov r8, r8)
   225fa:	e002      	b.n	22602 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   225fc:	46c0      	nop			; (mov r8, r8)
   225fe:	e000      	b.n	22602 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22600:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   22602:	1dfb      	adds	r3, r7, #7
   22604:	781b      	ldrb	r3, [r3, #0]
   22606:	b25b      	sxtb	r3, r3
}
   22608:	0018      	movs	r0, r3
   2260a:	46bd      	mov	sp, r7
   2260c:	b003      	add	sp, #12
   2260e:	bd90      	pop	{r4, r7, pc}
   22610:	00001408 	.word	0x00001408
   22614:	00022d1d 	.word	0x00022d1d
   22618:	00022d41 	.word	0x00022d41

0002261c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   2261c:	b580      	push	{r7, lr}
   2261e:	b082      	sub	sp, #8
   22620:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   22622:	4b32      	ldr	r3, [pc, #200]	; (226ec <nmi_get_chipid+0xd0>)
   22624:	681b      	ldr	r3, [r3, #0]
   22626:	2b00      	cmp	r3, #0
   22628:	d159      	bne.n	226de <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   2262a:	4a30      	ldr	r2, [pc, #192]	; (226ec <nmi_get_chipid+0xd0>)
   2262c:	2380      	movs	r3, #128	; 0x80
   2262e:	015b      	lsls	r3, r3, #5
   22630:	0011      	movs	r1, r2
   22632:	0018      	movs	r0, r3
   22634:	4b2e      	ldr	r3, [pc, #184]	; (226f0 <nmi_get_chipid+0xd4>)
   22636:	4798      	blx	r3
   22638:	1e03      	subs	r3, r0, #0
   2263a:	d004      	beq.n	22646 <nmi_get_chipid+0x2a>
			chipid = 0;
   2263c:	4b2b      	ldr	r3, [pc, #172]	; (226ec <nmi_get_chipid+0xd0>)
   2263e:	2200      	movs	r2, #0
   22640:	601a      	str	r2, [r3, #0]
			return 0;
   22642:	2300      	movs	r3, #0
   22644:	e04d      	b.n	226e2 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   22646:	1d3b      	adds	r3, r7, #4
   22648:	4a2a      	ldr	r2, [pc, #168]	; (226f4 <nmi_get_chipid+0xd8>)
   2264a:	0019      	movs	r1, r3
   2264c:	0010      	movs	r0, r2
   2264e:	4b28      	ldr	r3, [pc, #160]	; (226f0 <nmi_get_chipid+0xd4>)
   22650:	4798      	blx	r3
   22652:	1e03      	subs	r3, r0, #0
   22654:	d004      	beq.n	22660 <nmi_get_chipid+0x44>
			chipid = 0;
   22656:	4b25      	ldr	r3, [pc, #148]	; (226ec <nmi_get_chipid+0xd0>)
   22658:	2200      	movs	r2, #0
   2265a:	601a      	str	r2, [r3, #0]
			return 0;
   2265c:	2300      	movs	r3, #0
   2265e:	e040      	b.n	226e2 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   22660:	4b22      	ldr	r3, [pc, #136]	; (226ec <nmi_get_chipid+0xd0>)
   22662:	681b      	ldr	r3, [r3, #0]
   22664:	4a24      	ldr	r2, [pc, #144]	; (226f8 <nmi_get_chipid+0xdc>)
   22666:	4293      	cmp	r3, r2
   22668:	d106      	bne.n	22678 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   2266a:	687b      	ldr	r3, [r7, #4]
   2266c:	2b01      	cmp	r3, #1
   2266e:	d029      	beq.n	226c4 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   22670:	4b1e      	ldr	r3, [pc, #120]	; (226ec <nmi_get_chipid+0xd0>)
   22672:	4a22      	ldr	r2, [pc, #136]	; (226fc <nmi_get_chipid+0xe0>)
   22674:	601a      	str	r2, [r3, #0]
   22676:	e025      	b.n	226c4 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   22678:	4b1c      	ldr	r3, [pc, #112]	; (226ec <nmi_get_chipid+0xd0>)
   2267a:	681b      	ldr	r3, [r3, #0]
   2267c:	4a20      	ldr	r2, [pc, #128]	; (22700 <nmi_get_chipid+0xe4>)
   2267e:	4293      	cmp	r3, r2
   22680:	d10d      	bne.n	2269e <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   22682:	687b      	ldr	r3, [r7, #4]
   22684:	2b03      	cmp	r3, #3
   22686:	d01d      	beq.n	226c4 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   22688:	687b      	ldr	r3, [r7, #4]
   2268a:	2b04      	cmp	r3, #4
   2268c:	d103      	bne.n	22696 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   2268e:	4b17      	ldr	r3, [pc, #92]	; (226ec <nmi_get_chipid+0xd0>)
   22690:	4a1c      	ldr	r2, [pc, #112]	; (22704 <nmi_get_chipid+0xe8>)
   22692:	601a      	str	r2, [r3, #0]
   22694:	e016      	b.n	226c4 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   22696:	4b15      	ldr	r3, [pc, #84]	; (226ec <nmi_get_chipid+0xd0>)
   22698:	4a1b      	ldr	r2, [pc, #108]	; (22708 <nmi_get_chipid+0xec>)
   2269a:	601a      	str	r2, [r3, #0]
   2269c:	e012      	b.n	226c4 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   2269e:	4b13      	ldr	r3, [pc, #76]	; (226ec <nmi_get_chipid+0xd0>)
   226a0:	681b      	ldr	r3, [r3, #0]
   226a2:	4a1a      	ldr	r2, [pc, #104]	; (2270c <nmi_get_chipid+0xf0>)
   226a4:	4293      	cmp	r3, r2
   226a6:	d10d      	bne.n	226c4 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   226a8:	4a10      	ldr	r2, [pc, #64]	; (226ec <nmi_get_chipid+0xd0>)
   226aa:	23ec      	movs	r3, #236	; 0xec
   226ac:	039b      	lsls	r3, r3, #14
   226ae:	0011      	movs	r1, r2
   226b0:	0018      	movs	r0, r3
   226b2:	4b0f      	ldr	r3, [pc, #60]	; (226f0 <nmi_get_chipid+0xd4>)
   226b4:	4798      	blx	r3
   226b6:	1e03      	subs	r3, r0, #0
   226b8:	d004      	beq.n	226c4 <nmi_get_chipid+0xa8>
			chipid = 0;
   226ba:	4b0c      	ldr	r3, [pc, #48]	; (226ec <nmi_get_chipid+0xd0>)
   226bc:	2200      	movs	r2, #0
   226be:	601a      	str	r2, [r3, #0]
			return 0;
   226c0:	2300      	movs	r3, #0
   226c2:	e00e      	b.n	226e2 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   226c4:	4b09      	ldr	r3, [pc, #36]	; (226ec <nmi_get_chipid+0xd0>)
   226c6:	681b      	ldr	r3, [r3, #0]
   226c8:	4a11      	ldr	r2, [pc, #68]	; (22710 <nmi_get_chipid+0xf4>)
   226ca:	401a      	ands	r2, r3
   226cc:	4b07      	ldr	r3, [pc, #28]	; (226ec <nmi_get_chipid+0xd0>)
   226ce:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   226d0:	4b06      	ldr	r3, [pc, #24]	; (226ec <nmi_get_chipid+0xd0>)
   226d2:	681b      	ldr	r3, [r3, #0]
   226d4:	22a0      	movs	r2, #160	; 0xa0
   226d6:	02d2      	lsls	r2, r2, #11
   226d8:	431a      	orrs	r2, r3
   226da:	4b04      	ldr	r3, [pc, #16]	; (226ec <nmi_get_chipid+0xd0>)
   226dc:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   226de:	4b03      	ldr	r3, [pc, #12]	; (226ec <nmi_get_chipid+0xd0>)
   226e0:	681b      	ldr	r3, [r3, #0]
}
   226e2:	0018      	movs	r0, r3
   226e4:	46bd      	mov	sp, r7
   226e6:	b002      	add	sp, #8
   226e8:	bd80      	pop	{r7, pc}
   226ea:	46c0      	nop			; (mov r8, r8)
   226ec:	2000412c 	.word	0x2000412c
   226f0:	00022d1d 	.word	0x00022d1d
   226f4:	000013f4 	.word	0x000013f4
   226f8:	001002a0 	.word	0x001002a0
   226fc:	001002a1 	.word	0x001002a1
   22700:	001002b0 	.word	0x001002b0
   22704:	001002b1 	.word	0x001002b1
   22708:	001002b2 	.word	0x001002b2
   2270c:	001000f0 	.word	0x001000f0
   22710:	fff0ffff 	.word	0xfff0ffff

00022714 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   22714:	b590      	push	{r4, r7, lr}
   22716:	b083      	sub	sp, #12
   22718:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2271a:	1dfb      	adds	r3, r7, #7
   2271c:	2200      	movs	r2, #0
   2271e:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22720:	1dfc      	adds	r4, r7, #7
   22722:	003b      	movs	r3, r7
   22724:	0019      	movs	r1, r3
   22726:	2010      	movs	r0, #16
   22728:	4b2e      	ldr	r3, [pc, #184]	; (227e4 <chip_sleep+0xd0>)
   2272a:	4798      	blx	r3
   2272c:	0003      	movs	r3, r0
   2272e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   22730:	1dfb      	adds	r3, r7, #7
   22732:	781b      	ldrb	r3, [r3, #0]
   22734:	b25b      	sxtb	r3, r3
   22736:	2b00      	cmp	r3, #0
   22738:	d145      	bne.n	227c6 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   2273a:	683b      	ldr	r3, [r7, #0]
   2273c:	2201      	movs	r2, #1
   2273e:	4013      	ands	r3, r2
   22740:	d000      	beq.n	22744 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22742:	e7ed      	b.n	22720 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   22744:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   22746:	1dfc      	adds	r4, r7, #7
   22748:	003b      	movs	r3, r7
   2274a:	0019      	movs	r1, r3
   2274c:	2001      	movs	r0, #1
   2274e:	4b25      	ldr	r3, [pc, #148]	; (227e4 <chip_sleep+0xd0>)
   22750:	4798      	blx	r3
   22752:	0003      	movs	r3, r0
   22754:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22756:	1dfb      	adds	r3, r7, #7
   22758:	781b      	ldrb	r3, [r3, #0]
   2275a:	b25b      	sxtb	r3, r3
   2275c:	2b00      	cmp	r3, #0
   2275e:	d134      	bne.n	227ca <chip_sleep+0xb6>
	if(reg & NBIT1)
   22760:	683b      	ldr	r3, [r7, #0]
   22762:	2202      	movs	r2, #2
   22764:	4013      	ands	r3, r2
   22766:	d010      	beq.n	2278a <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   22768:	683b      	ldr	r3, [r7, #0]
   2276a:	2202      	movs	r2, #2
   2276c:	4393      	bics	r3, r2
   2276e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   22770:	683b      	ldr	r3, [r7, #0]
   22772:	1dfc      	adds	r4, r7, #7
   22774:	0019      	movs	r1, r3
   22776:	2001      	movs	r0, #1
   22778:	4b1b      	ldr	r3, [pc, #108]	; (227e8 <chip_sleep+0xd4>)
   2277a:	4798      	blx	r3
   2277c:	0003      	movs	r3, r0
   2277e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   22780:	1dfb      	adds	r3, r7, #7
   22782:	781b      	ldrb	r3, [r3, #0]
   22784:	b25b      	sxtb	r3, r3
   22786:	2b00      	cmp	r3, #0
   22788:	d121      	bne.n	227ce <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2278a:	1dfc      	adds	r4, r7, #7
   2278c:	003b      	movs	r3, r7
   2278e:	0019      	movs	r1, r3
   22790:	200b      	movs	r0, #11
   22792:	4b14      	ldr	r3, [pc, #80]	; (227e4 <chip_sleep+0xd0>)
   22794:	4798      	blx	r3
   22796:	0003      	movs	r3, r0
   22798:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2279a:	1dfb      	adds	r3, r7, #7
   2279c:	781b      	ldrb	r3, [r3, #0]
   2279e:	b25b      	sxtb	r3, r3
   227a0:	2b00      	cmp	r3, #0
   227a2:	d116      	bne.n	227d2 <chip_sleep+0xbe>
	if(reg & NBIT0)
   227a4:	683b      	ldr	r3, [r7, #0]
   227a6:	2201      	movs	r2, #1
   227a8:	4013      	ands	r3, r2
   227aa:	d013      	beq.n	227d4 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   227ac:	683b      	ldr	r3, [r7, #0]
   227ae:	2201      	movs	r2, #1
   227b0:	4393      	bics	r3, r2
   227b2:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   227b4:	683b      	ldr	r3, [r7, #0]
   227b6:	1dfc      	adds	r4, r7, #7
   227b8:	0019      	movs	r1, r3
   227ba:	200b      	movs	r0, #11
   227bc:	4b0a      	ldr	r3, [pc, #40]	; (227e8 <chip_sleep+0xd4>)
   227be:	4798      	blx	r3
   227c0:	0003      	movs	r3, r0
   227c2:	7023      	strb	r3, [r4, #0]
   227c4:	e006      	b.n	227d4 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   227c6:	46c0      	nop			; (mov r8, r8)
   227c8:	e004      	b.n	227d4 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   227ca:	46c0      	nop			; (mov r8, r8)
   227cc:	e002      	b.n	227d4 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   227ce:	46c0      	nop			; (mov r8, r8)
   227d0:	e000      	b.n	227d4 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   227d2:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   227d4:	1dfb      	adds	r3, r7, #7
   227d6:	781b      	ldrb	r3, [r3, #0]
   227d8:	b25b      	sxtb	r3, r3
}
   227da:	0018      	movs	r0, r3
   227dc:	46bd      	mov	sp, r7
   227de:	b003      	add	sp, #12
   227e0:	bd90      	pop	{r4, r7, pc}
   227e2:	46c0      	nop			; (mov r8, r8)
   227e4:	00022d1d 	.word	0x00022d1d
   227e8:	00022d41 	.word	0x00022d41

000227ec <chip_wake>:
sint8 chip_wake(void)
{
   227ec:	b590      	push	{r4, r7, lr}
   227ee:	b085      	sub	sp, #20
   227f0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   227f2:	230f      	movs	r3, #15
   227f4:	18fb      	adds	r3, r7, r3
   227f6:	2200      	movs	r2, #0
   227f8:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   227fa:	2300      	movs	r3, #0
   227fc:	607b      	str	r3, [r7, #4]
   227fe:	2300      	movs	r3, #0
   22800:	603b      	str	r3, [r7, #0]
   22802:	2300      	movs	r3, #0
   22804:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   22806:	230f      	movs	r3, #15
   22808:	18fc      	adds	r4, r7, r3
   2280a:	1d3b      	adds	r3, r7, #4
   2280c:	0019      	movs	r1, r3
   2280e:	200b      	movs	r0, #11
   22810:	4b4e      	ldr	r3, [pc, #312]	; (2294c <chip_wake+0x160>)
   22812:	4798      	blx	r3
   22814:	0003      	movs	r3, r0
   22816:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22818:	230f      	movs	r3, #15
   2281a:	18fb      	adds	r3, r7, r3
   2281c:	781b      	ldrb	r3, [r3, #0]
   2281e:	b25b      	sxtb	r3, r3
   22820:	2b00      	cmp	r3, #0
   22822:	d000      	beq.n	22826 <chip_wake+0x3a>
   22824:	e082      	b.n	2292c <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   22826:	687b      	ldr	r3, [r7, #4]
   22828:	2201      	movs	r2, #1
   2282a:	4013      	ands	r3, r2
   2282c:	d111      	bne.n	22852 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   2282e:	687b      	ldr	r3, [r7, #4]
   22830:	2201      	movs	r2, #1
   22832:	4313      	orrs	r3, r2
   22834:	220f      	movs	r2, #15
   22836:	18bc      	adds	r4, r7, r2
   22838:	0019      	movs	r1, r3
   2283a:	200b      	movs	r0, #11
   2283c:	4b44      	ldr	r3, [pc, #272]	; (22950 <chip_wake+0x164>)
   2283e:	4798      	blx	r3
   22840:	0003      	movs	r3, r0
   22842:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22844:	230f      	movs	r3, #15
   22846:	18fb      	adds	r3, r7, r3
   22848:	781b      	ldrb	r3, [r3, #0]
   2284a:	b25b      	sxtb	r3, r3
   2284c:	2b00      	cmp	r3, #0
   2284e:	d000      	beq.n	22852 <chip_wake+0x66>
   22850:	e06e      	b.n	22930 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   22852:	230f      	movs	r3, #15
   22854:	18fc      	adds	r4, r7, r3
   22856:	1d3b      	adds	r3, r7, #4
   22858:	0019      	movs	r1, r3
   2285a:	2001      	movs	r0, #1
   2285c:	4b3b      	ldr	r3, [pc, #236]	; (2294c <chip_wake+0x160>)
   2285e:	4798      	blx	r3
   22860:	0003      	movs	r3, r0
   22862:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22864:	230f      	movs	r3, #15
   22866:	18fb      	adds	r3, r7, r3
   22868:	781b      	ldrb	r3, [r3, #0]
   2286a:	b25b      	sxtb	r3, r3
   2286c:	2b00      	cmp	r3, #0
   2286e:	d161      	bne.n	22934 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   22870:	687b      	ldr	r3, [r7, #4]
   22872:	2202      	movs	r2, #2
   22874:	4013      	ands	r3, r2
   22876:	d110      	bne.n	2289a <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   22878:	687b      	ldr	r3, [r7, #4]
   2287a:	2202      	movs	r2, #2
   2287c:	4313      	orrs	r3, r2
   2287e:	220f      	movs	r2, #15
   22880:	18bc      	adds	r4, r7, r2
   22882:	0019      	movs	r1, r3
   22884:	2001      	movs	r0, #1
   22886:	4b32      	ldr	r3, [pc, #200]	; (22950 <chip_wake+0x164>)
   22888:	4798      	blx	r3
   2288a:	0003      	movs	r3, r0
   2288c:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   2288e:	230f      	movs	r3, #15
   22890:	18fb      	adds	r3, r7, r3
   22892:	781b      	ldrb	r3, [r3, #0]
   22894:	b25b      	sxtb	r3, r3
   22896:	2b00      	cmp	r3, #0
   22898:	d14e      	bne.n	22938 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2289a:	230f      	movs	r3, #15
   2289c:	18fc      	adds	r4, r7, r3
   2289e:	003b      	movs	r3, r7
   228a0:	0019      	movs	r1, r3
   228a2:	200f      	movs	r0, #15
   228a4:	4b29      	ldr	r3, [pc, #164]	; (2294c <chip_wake+0x160>)
   228a6:	4798      	blx	r3
   228a8:	0003      	movs	r3, r0
   228aa:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   228ac:	230f      	movs	r3, #15
   228ae:	18fb      	adds	r3, r7, r3
   228b0:	781b      	ldrb	r3, [r3, #0]
   228b2:	b25b      	sxtb	r3, r3
   228b4:	2b00      	cmp	r3, #0
   228b6:	d014      	beq.n	228e2 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   228b8:	23a8      	movs	r3, #168	; 0xa8
   228ba:	005a      	lsls	r2, r3, #1
   228bc:	4925      	ldr	r1, [pc, #148]	; (22954 <chip_wake+0x168>)
   228be:	4b26      	ldr	r3, [pc, #152]	; (22958 <chip_wake+0x16c>)
   228c0:	0018      	movs	r0, r3
   228c2:	4b26      	ldr	r3, [pc, #152]	; (2295c <chip_wake+0x170>)
   228c4:	4798      	blx	r3
   228c6:	230f      	movs	r3, #15
   228c8:	18fb      	adds	r3, r7, r3
   228ca:	2100      	movs	r1, #0
   228cc:	5659      	ldrsb	r1, [r3, r1]
   228ce:	683a      	ldr	r2, [r7, #0]
   228d0:	4b23      	ldr	r3, [pc, #140]	; (22960 <chip_wake+0x174>)
   228d2:	0018      	movs	r0, r3
   228d4:	4b21      	ldr	r3, [pc, #132]	; (2295c <chip_wake+0x170>)
   228d6:	4798      	blx	r3
   228d8:	4b22      	ldr	r3, [pc, #136]	; (22964 <chip_wake+0x178>)
   228da:	0018      	movs	r0, r3
   228dc:	4b1f      	ldr	r3, [pc, #124]	; (2295c <chip_wake+0x170>)
   228de:	4798      	blx	r3
			goto _WAKE_EXIT;
   228e0:	e02b      	b.n	2293a <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   228e2:	683b      	ldr	r3, [r7, #0]
   228e4:	2204      	movs	r2, #4
   228e6:	4013      	ands	r3, r2
   228e8:	d11c      	bne.n	22924 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   228ea:	2002      	movs	r0, #2
   228ec:	4b1e      	ldr	r3, [pc, #120]	; (22968 <chip_wake+0x17c>)
   228ee:	4798      	blx	r3
		trials++;
   228f0:	68bb      	ldr	r3, [r7, #8]
   228f2:	3301      	adds	r3, #1
   228f4:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   228f6:	68bb      	ldr	r3, [r7, #8]
   228f8:	2b04      	cmp	r3, #4
   228fa:	d9ce      	bls.n	2289a <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   228fc:	23ad      	movs	r3, #173	; 0xad
   228fe:	005a      	lsls	r2, r3, #1
   22900:	4914      	ldr	r1, [pc, #80]	; (22954 <chip_wake+0x168>)
   22902:	4b15      	ldr	r3, [pc, #84]	; (22958 <chip_wake+0x16c>)
   22904:	0018      	movs	r0, r3
   22906:	4b15      	ldr	r3, [pc, #84]	; (2295c <chip_wake+0x170>)
   22908:	4798      	blx	r3
   2290a:	4b18      	ldr	r3, [pc, #96]	; (2296c <chip_wake+0x180>)
   2290c:	0018      	movs	r0, r3
   2290e:	4b13      	ldr	r3, [pc, #76]	; (2295c <chip_wake+0x170>)
   22910:	4798      	blx	r3
   22912:	4b14      	ldr	r3, [pc, #80]	; (22964 <chip_wake+0x178>)
   22914:	0018      	movs	r0, r3
   22916:	4b11      	ldr	r3, [pc, #68]	; (2295c <chip_wake+0x170>)
   22918:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   2291a:	230f      	movs	r3, #15
   2291c:	18fb      	adds	r3, r7, r3
   2291e:	22fc      	movs	r2, #252	; 0xfc
   22920:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   22922:	e00a      	b.n	2293a <chip_wake+0x14e>
			break;
   22924:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   22926:	4b12      	ldr	r3, [pc, #72]	; (22970 <chip_wake+0x184>)
   22928:	4798      	blx	r3
   2292a:	e006      	b.n	2293a <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2292c:	46c0      	nop			; (mov r8, r8)
   2292e:	e004      	b.n	2293a <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22930:	46c0      	nop			; (mov r8, r8)
   22932:	e002      	b.n	2293a <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22934:	46c0      	nop			; (mov r8, r8)
   22936:	e000      	b.n	2293a <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22938:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   2293a:	230f      	movs	r3, #15
   2293c:	18fb      	adds	r3, r7, r3
   2293e:	781b      	ldrb	r3, [r3, #0]
   22940:	b25b      	sxtb	r3, r3
}
   22942:	0018      	movs	r0, r3
   22944:	46bd      	mov	sp, r7
   22946:	b005      	add	sp, #20
   22948:	bd90      	pop	{r4, r7, pc}
   2294a:	46c0      	nop			; (mov r8, r8)
   2294c:	00022d1d 	.word	0x00022d1d
   22950:	00022d41 	.word	0x00022d41
   22954:	00038c84 	.word	0x00038c84
   22958:	00038bf8 	.word	0x00038bf8
   2295c:	0001df59 	.word	0x0001df59
   22960:	00038c0c 	.word	0x00038c0c
   22964:	00038c24 	.word	0x00038c24
   22968:	000203ad 	.word	0x000203ad
   2296c:	00038c28 	.word	0x00038c28
   22970:	00022cdd 	.word	0x00022cdd

00022974 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   22974:	b580      	push	{r7, lr}
   22976:	b088      	sub	sp, #32
   22978:	af00      	add	r7, sp, #0
   2297a:	0002      	movs	r2, r0
   2297c:	1dfb      	adds	r3, r7, #7
   2297e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22980:	2313      	movs	r3, #19
   22982:	18fb      	adds	r3, r7, r3
   22984:	2200      	movs	r2, #0
   22986:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22988:	2300      	movs	r3, #0
   2298a:	61fb      	str	r3, [r7, #28]
   2298c:	2300      	movs	r3, #0
   2298e:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   22990:	2300      	movs	r3, #0
   22992:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   22994:	4b4a      	ldr	r3, [pc, #296]	; (22ac0 <wait_for_bootrom+0x14c>)
   22996:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   22998:	2300      	movs	r3, #0
   2299a:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   2299c:	4b49      	ldr	r3, [pc, #292]	; (22ac4 <wait_for_bootrom+0x150>)
   2299e:	0018      	movs	r0, r3
   229a0:	4b49      	ldr	r3, [pc, #292]	; (22ac8 <wait_for_bootrom+0x154>)
   229a2:	4798      	blx	r3
   229a4:	0003      	movs	r3, r0
   229a6:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   229a8:	69fb      	ldr	r3, [r7, #28]
   229aa:	2b00      	cmp	r3, #0
   229ac:	db03      	blt.n	229b6 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   229ae:	2001      	movs	r0, #1
   229b0:	4b46      	ldr	r3, [pc, #280]	; (22acc <wait_for_bootrom+0x158>)
   229b2:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   229b4:	e7f2      	b.n	2299c <wait_for_bootrom+0x28>
			break;
   229b6:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   229b8:	4b45      	ldr	r3, [pc, #276]	; (22ad0 <wait_for_bootrom+0x15c>)
   229ba:	0018      	movs	r0, r3
   229bc:	4b42      	ldr	r3, [pc, #264]	; (22ac8 <wait_for_bootrom+0x154>)
   229be:	4798      	blx	r3
   229c0:	0003      	movs	r3, r0
   229c2:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   229c4:	69fb      	ldr	r3, [r7, #28]
   229c6:	2201      	movs	r2, #1
   229c8:	4013      	ands	r3, r2
   229ca:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   229cc:	69fb      	ldr	r3, [r7, #28]
   229ce:	2b00      	cmp	r3, #0
   229d0:	d112      	bne.n	229f8 <wait_for_bootrom+0x84>
	{
		reg = 0;
   229d2:	2300      	movs	r3, #0
   229d4:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   229d6:	e00b      	b.n	229f0 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   229d8:	2001      	movs	r0, #1
   229da:	4b3c      	ldr	r3, [pc, #240]	; (22acc <wait_for_bootrom+0x158>)
   229dc:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   229de:	4b3d      	ldr	r3, [pc, #244]	; (22ad4 <wait_for_bootrom+0x160>)
   229e0:	0018      	movs	r0, r3
   229e2:	4b39      	ldr	r3, [pc, #228]	; (22ac8 <wait_for_bootrom+0x154>)
   229e4:	4798      	blx	r3
   229e6:	0003      	movs	r3, r0
   229e8:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   229ea:	69bb      	ldr	r3, [r7, #24]
   229ec:	3301      	adds	r3, #1
   229ee:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   229f0:	69fb      	ldr	r3, [r7, #28]
   229f2:	4a39      	ldr	r2, [pc, #228]	; (22ad8 <wait_for_bootrom+0x164>)
   229f4:	4293      	cmp	r3, r2
   229f6:	d1ef      	bne.n	229d8 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   229f8:	1dfb      	adds	r3, r7, #7
   229fa:	781b      	ldrb	r3, [r3, #0]
   229fc:	2b02      	cmp	r3, #2
   229fe:	d10d      	bne.n	22a1c <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22a00:	4a36      	ldr	r2, [pc, #216]	; (22adc <wait_for_bootrom+0x168>)
   22a02:	4b37      	ldr	r3, [pc, #220]	; (22ae0 <wait_for_bootrom+0x16c>)
   22a04:	0011      	movs	r1, r2
   22a06:	0018      	movs	r0, r3
   22a08:	4b36      	ldr	r3, [pc, #216]	; (22ae4 <wait_for_bootrom+0x170>)
   22a0a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   22a0c:	2380      	movs	r3, #128	; 0x80
   22a0e:	035b      	lsls	r3, r3, #13
   22a10:	4a35      	ldr	r2, [pc, #212]	; (22ae8 <wait_for_bootrom+0x174>)
   22a12:	0019      	movs	r1, r3
   22a14:	0010      	movs	r0, r2
   22a16:	4b33      	ldr	r3, [pc, #204]	; (22ae4 <wait_for_bootrom+0x170>)
   22a18:	4798      	blx	r3
   22a1a:	e022      	b.n	22a62 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   22a1c:	1dfb      	adds	r3, r7, #7
   22a1e:	781b      	ldrb	r3, [r3, #0]
   22a20:	2b03      	cmp	r3, #3
   22a22:	d10b      	bne.n	22a3c <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22a24:	4a2d      	ldr	r2, [pc, #180]	; (22adc <wait_for_bootrom+0x168>)
   22a26:	4b2e      	ldr	r3, [pc, #184]	; (22ae0 <wait_for_bootrom+0x16c>)
   22a28:	0011      	movs	r1, r2
   22a2a:	0018      	movs	r0, r3
   22a2c:	4b2d      	ldr	r3, [pc, #180]	; (22ae4 <wait_for_bootrom+0x170>)
   22a2e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   22a30:	4b2d      	ldr	r3, [pc, #180]	; (22ae8 <wait_for_bootrom+0x174>)
   22a32:	2100      	movs	r1, #0
   22a34:	0018      	movs	r0, r3
   22a36:	4b2b      	ldr	r3, [pc, #172]	; (22ae4 <wait_for_bootrom+0x170>)
   22a38:	4798      	blx	r3
   22a3a:	e012      	b.n	22a62 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   22a3c:	1dfb      	adds	r3, r7, #7
   22a3e:	781b      	ldrb	r3, [r3, #0]
   22a40:	2b04      	cmp	r3, #4
   22a42:	d108      	bne.n	22a56 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   22a44:	2380      	movs	r3, #128	; 0x80
   22a46:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   22a48:	68fb      	ldr	r3, [r7, #12]
   22a4a:	4a27      	ldr	r2, [pc, #156]	; (22ae8 <wait_for_bootrom+0x174>)
   22a4c:	0019      	movs	r1, r3
   22a4e:	0010      	movs	r0, r2
   22a50:	4b24      	ldr	r3, [pc, #144]	; (22ae4 <wait_for_bootrom+0x170>)
   22a52:	4798      	blx	r3
   22a54:	e005      	b.n	22a62 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   22a56:	68fb      	ldr	r3, [r7, #12]
   22a58:	4a23      	ldr	r2, [pc, #140]	; (22ae8 <wait_for_bootrom+0x174>)
   22a5a:	0019      	movs	r1, r3
   22a5c:	0010      	movs	r0, r2
   22a5e:	4b21      	ldr	r3, [pc, #132]	; (22ae4 <wait_for_bootrom+0x170>)
   22a60:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   22a62:	4b22      	ldr	r3, [pc, #136]	; (22aec <wait_for_bootrom+0x178>)
   22a64:	4798      	blx	r3
   22a66:	0003      	movs	r3, r0
   22a68:	051b      	lsls	r3, r3, #20
   22a6a:	0d1b      	lsrs	r3, r3, #20
   22a6c:	4a20      	ldr	r2, [pc, #128]	; (22af0 <wait_for_bootrom+0x17c>)
   22a6e:	4293      	cmp	r3, r2
   22a70:	d906      	bls.n	22a80 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   22a72:	697b      	ldr	r3, [r7, #20]
   22a74:	2202      	movs	r2, #2
   22a76:	4313      	orrs	r3, r2
   22a78:	0018      	movs	r0, r3
   22a7a:	4b1e      	ldr	r3, [pc, #120]	; (22af4 <wait_for_bootrom+0x180>)
   22a7c:	4798      	blx	r3
   22a7e:	e003      	b.n	22a88 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   22a80:	697b      	ldr	r3, [r7, #20]
   22a82:	0018      	movs	r0, r3
   22a84:	4b1b      	ldr	r3, [pc, #108]	; (22af4 <wait_for_bootrom+0x180>)
   22a86:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   22a88:	4b1b      	ldr	r3, [pc, #108]	; (22af8 <wait_for_bootrom+0x184>)
   22a8a:	0018      	movs	r0, r3
   22a8c:	4b1b      	ldr	r3, [pc, #108]	; (22afc <wait_for_bootrom+0x188>)
   22a8e:	4798      	blx	r3
   22a90:	68fa      	ldr	r2, [r7, #12]
   22a92:	4b1b      	ldr	r3, [pc, #108]	; (22b00 <wait_for_bootrom+0x18c>)
   22a94:	0011      	movs	r1, r2
   22a96:	0018      	movs	r0, r3
   22a98:	4b18      	ldr	r3, [pc, #96]	; (22afc <wait_for_bootrom+0x188>)
   22a9a:	4798      	blx	r3
   22a9c:	4b19      	ldr	r3, [pc, #100]	; (22b04 <wait_for_bootrom+0x190>)
   22a9e:	0018      	movs	r0, r3
   22aa0:	4b16      	ldr	r3, [pc, #88]	; (22afc <wait_for_bootrom+0x188>)
   22aa2:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   22aa4:	4a18      	ldr	r2, [pc, #96]	; (22b08 <wait_for_bootrom+0x194>)
   22aa6:	4b0b      	ldr	r3, [pc, #44]	; (22ad4 <wait_for_bootrom+0x160>)
   22aa8:	0011      	movs	r1, r2
   22aaa:	0018      	movs	r0, r3
   22aac:	4b0d      	ldr	r3, [pc, #52]	; (22ae4 <wait_for_bootrom+0x170>)
   22aae:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   22ab0:	2313      	movs	r3, #19
   22ab2:	18fb      	adds	r3, r7, r3
   22ab4:	781b      	ldrb	r3, [r3, #0]
   22ab6:	b25b      	sxtb	r3, r3
}
   22ab8:	0018      	movs	r0, r3
   22aba:	46bd      	mov	sp, r7
   22abc:	b008      	add	sp, #32
   22abe:	bd80      	pop	{r7, pc}
   22ac0:	13301354 	.word	0x13301354
   22ac4:	00001014 	.word	0x00001014
   22ac8:	00022cfd 	.word	0x00022cfd
   22acc:	000203ad 	.word	0x000203ad
   22ad0:	000207bc 	.word	0x000207bc
   22ad4:	000c000c 	.word	0x000c000c
   22ad8:	10add09e 	.word	0x10add09e
   22adc:	3c1cd57d 	.word	0x3c1cd57d
   22ae0:	000207ac 	.word	0x000207ac
   22ae4:	00022d41 	.word	0x00022d41
   22ae8:	0000108c 	.word	0x0000108c
   22aec:	0002261d 	.word	0x0002261d
   22af0:	0000039f 	.word	0x0000039f
   22af4:	000224ed 	.word	0x000224ed
   22af8:	00038c44 	.word	0x00038c44
   22afc:	0001df59 	.word	0x0001df59
   22b00:	00038c50 	.word	0x00038c50
   22b04:	00038c24 	.word	0x00038c24
   22b08:	ef522f61 	.word	0xef522f61

00022b0c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   22b0c:	b580      	push	{r7, lr}
   22b0e:	b088      	sub	sp, #32
   22b10:	af00      	add	r7, sp, #0
   22b12:	0002      	movs	r2, r0
   22b14:	1dfb      	adds	r3, r7, #7
   22b16:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22b18:	231f      	movs	r3, #31
   22b1a:	18fb      	adds	r3, r7, r3
   22b1c:	2200      	movs	r2, #0
   22b1e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22b20:	2300      	movs	r3, #0
   22b22:	61bb      	str	r3, [r7, #24]
   22b24:	2300      	movs	r3, #0
   22b26:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   22b28:	2301      	movs	r3, #1
   22b2a:	425b      	negs	r3, r3
   22b2c:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   22b2e:	4b1d      	ldr	r3, [pc, #116]	; (22ba4 <wait_for_firmware_start+0x98>)
   22b30:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   22b32:	4b1d      	ldr	r3, [pc, #116]	; (22ba8 <wait_for_firmware_start+0x9c>)
   22b34:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   22b36:	1dfb      	adds	r3, r7, #7
   22b38:	781b      	ldrb	r3, [r3, #0]
   22b3a:	2b02      	cmp	r3, #2
   22b3c:	d003      	beq.n	22b46 <wait_for_firmware_start+0x3a>
   22b3e:	1dfb      	adds	r3, r7, #7
   22b40:	781b      	ldrb	r3, [r3, #0]
   22b42:	2b03      	cmp	r3, #3
   22b44:	d119      	bne.n	22b7a <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   22b46:	4b19      	ldr	r3, [pc, #100]	; (22bac <wait_for_firmware_start+0xa0>)
   22b48:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   22b4a:	4b19      	ldr	r3, [pc, #100]	; (22bb0 <wait_for_firmware_start+0xa4>)
   22b4c:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   22b4e:	e014      	b.n	22b7a <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   22b50:	2002      	movs	r0, #2
   22b52:	4b18      	ldr	r3, [pc, #96]	; (22bb4 <wait_for_firmware_start+0xa8>)
   22b54:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   22b56:	68fb      	ldr	r3, [r7, #12]
   22b58:	0018      	movs	r0, r3
   22b5a:	4b17      	ldr	r3, [pc, #92]	; (22bb8 <wait_for_firmware_start+0xac>)
   22b5c:	4798      	blx	r3
   22b5e:	0003      	movs	r3, r0
   22b60:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   22b62:	697b      	ldr	r3, [r7, #20]
   22b64:	3301      	adds	r3, #1
   22b66:	617b      	str	r3, [r7, #20]
   22b68:	697a      	ldr	r2, [r7, #20]
   22b6a:	693b      	ldr	r3, [r7, #16]
   22b6c:	429a      	cmp	r2, r3
   22b6e:	d304      	bcc.n	22b7a <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   22b70:	231f      	movs	r3, #31
   22b72:	18fb      	adds	r3, r7, r3
   22b74:	22fb      	movs	r2, #251	; 0xfb
   22b76:	701a      	strb	r2, [r3, #0]
			goto ERR;
   22b78:	e00c      	b.n	22b94 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   22b7a:	68ba      	ldr	r2, [r7, #8]
   22b7c:	69bb      	ldr	r3, [r7, #24]
   22b7e:	429a      	cmp	r2, r3
   22b80:	d1e6      	bne.n	22b50 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   22b82:	68bb      	ldr	r3, [r7, #8]
   22b84:	4a08      	ldr	r2, [pc, #32]	; (22ba8 <wait_for_firmware_start+0x9c>)
   22b86:	4293      	cmp	r3, r2
   22b88:	d104      	bne.n	22b94 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   22b8a:	4b06      	ldr	r3, [pc, #24]	; (22ba4 <wait_for_firmware_start+0x98>)
   22b8c:	2100      	movs	r1, #0
   22b8e:	0018      	movs	r0, r3
   22b90:	4b0a      	ldr	r3, [pc, #40]	; (22bbc <wait_for_firmware_start+0xb0>)
   22b92:	4798      	blx	r3
	}
ERR:
	return ret;
   22b94:	231f      	movs	r3, #31
   22b96:	18fb      	adds	r3, r7, r3
   22b98:	781b      	ldrb	r3, [r3, #0]
   22b9a:	b25b      	sxtb	r3, r3
}
   22b9c:	0018      	movs	r0, r3
   22b9e:	46bd      	mov	sp, r7
   22ba0:	b008      	add	sp, #32
   22ba2:	bd80      	pop	{r7, pc}
   22ba4:	0000108c 	.word	0x0000108c
   22ba8:	02532636 	.word	0x02532636
   22bac:	000207ac 	.word	0x000207ac
   22bb0:	d75dc1c3 	.word	0xd75dc1c3
   22bb4:	000203ad 	.word	0x000203ad
   22bb8:	00022cfd 	.word	0x00022cfd
   22bbc:	00022d41 	.word	0x00022d41

00022bc0 <chip_deinit>:

sint8 chip_deinit(void)
{
   22bc0:	b590      	push	{r4, r7, lr}
   22bc2:	b083      	sub	sp, #12
   22bc4:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   22bc6:	2300      	movs	r3, #0
   22bc8:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   22bca:	1dfc      	adds	r4, r7, #7
   22bcc:	003a      	movs	r2, r7
   22bce:	23a0      	movs	r3, #160	; 0xa0
   22bd0:	015b      	lsls	r3, r3, #5
   22bd2:	0011      	movs	r1, r2
   22bd4:	0018      	movs	r0, r3
   22bd6:	4b20      	ldr	r3, [pc, #128]	; (22c58 <chip_deinit+0x98>)
   22bd8:	4798      	blx	r3
   22bda:	0003      	movs	r3, r0
   22bdc:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   22bde:	1dfb      	adds	r3, r7, #7
   22be0:	781b      	ldrb	r3, [r3, #0]
   22be2:	b25b      	sxtb	r3, r3
   22be4:	2b00      	cmp	r3, #0
   22be6:	d00e      	beq.n	22c06 <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   22be8:	4a1c      	ldr	r2, [pc, #112]	; (22c5c <chip_deinit+0x9c>)
   22bea:	491d      	ldr	r1, [pc, #116]	; (22c60 <chip_deinit+0xa0>)
   22bec:	4b1d      	ldr	r3, [pc, #116]	; (22c64 <chip_deinit+0xa4>)
   22bee:	0018      	movs	r0, r3
   22bf0:	4b1d      	ldr	r3, [pc, #116]	; (22c68 <chip_deinit+0xa8>)
   22bf2:	4798      	blx	r3
   22bf4:	4b1d      	ldr	r3, [pc, #116]	; (22c6c <chip_deinit+0xac>)
   22bf6:	0018      	movs	r0, r3
   22bf8:	4b1b      	ldr	r3, [pc, #108]	; (22c68 <chip_deinit+0xa8>)
   22bfa:	4798      	blx	r3
   22bfc:	4b1c      	ldr	r3, [pc, #112]	; (22c70 <chip_deinit+0xb0>)
   22bfe:	0018      	movs	r0, r3
   22c00:	4b19      	ldr	r3, [pc, #100]	; (22c68 <chip_deinit+0xa8>)
   22c02:	4798      	blx	r3
		goto ERR1;
   22c04:	e021      	b.n	22c4a <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   22c06:	683b      	ldr	r3, [r7, #0]
   22c08:	4a1a      	ldr	r2, [pc, #104]	; (22c74 <chip_deinit+0xb4>)
   22c0a:	4013      	ands	r3, r2
   22c0c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   22c0e:	683a      	ldr	r2, [r7, #0]
   22c10:	1dfc      	adds	r4, r7, #7
   22c12:	23a0      	movs	r3, #160	; 0xa0
   22c14:	015b      	lsls	r3, r3, #5
   22c16:	0011      	movs	r1, r2
   22c18:	0018      	movs	r0, r3
   22c1a:	4b17      	ldr	r3, [pc, #92]	; (22c78 <chip_deinit+0xb8>)
   22c1c:	4798      	blx	r3
   22c1e:	0003      	movs	r3, r0
   22c20:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   22c22:	1dfb      	adds	r3, r7, #7
   22c24:	781b      	ldrb	r3, [r3, #0]
   22c26:	b25b      	sxtb	r3, r3
   22c28:	2b00      	cmp	r3, #0
   22c2a:	d00e      	beq.n	22c4a <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   22c2c:	4a13      	ldr	r2, [pc, #76]	; (22c7c <chip_deinit+0xbc>)
   22c2e:	490c      	ldr	r1, [pc, #48]	; (22c60 <chip_deinit+0xa0>)
   22c30:	4b0c      	ldr	r3, [pc, #48]	; (22c64 <chip_deinit+0xa4>)
   22c32:	0018      	movs	r0, r3
   22c34:	4b0c      	ldr	r3, [pc, #48]	; (22c68 <chip_deinit+0xa8>)
   22c36:	4798      	blx	r3
   22c38:	4b0c      	ldr	r3, [pc, #48]	; (22c6c <chip_deinit+0xac>)
   22c3a:	0018      	movs	r0, r3
   22c3c:	4b0a      	ldr	r3, [pc, #40]	; (22c68 <chip_deinit+0xa8>)
   22c3e:	4798      	blx	r3
   22c40:	4b0b      	ldr	r3, [pc, #44]	; (22c70 <chip_deinit+0xb0>)
   22c42:	0018      	movs	r0, r3
   22c44:	4b08      	ldr	r3, [pc, #32]	; (22c68 <chip_deinit+0xa8>)
   22c46:	4798      	blx	r3
		goto ERR1;
   22c48:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   22c4a:	1dfb      	adds	r3, r7, #7
   22c4c:	781b      	ldrb	r3, [r3, #0]
   22c4e:	b25b      	sxtb	r3, r3
}
   22c50:	0018      	movs	r0, r3
   22c52:	46bd      	mov	sp, r7
   22c54:	b003      	add	sp, #12
   22c56:	bd90      	pop	{r4, r7, pc}
   22c58:	00022d1d 	.word	0x00022d1d
   22c5c:	00000201 	.word	0x00000201
   22c60:	00038c90 	.word	0x00038c90
   22c64:	00038bf8 	.word	0x00038bf8
   22c68:	0001df59 	.word	0x0001df59
   22c6c:	00038c68 	.word	0x00038c68
   22c70:	00038c24 	.word	0x00038c24
   22c74:	fffffbff 	.word	0xfffffbff
   22c78:	00022d41 	.word	0x00022d41
   22c7c:	00000207 	.word	0x00000207

00022c80 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   22c80:	b590      	push	{r4, r7, lr}
   22c82:	b085      	sub	sp, #20
   22c84:	af00      	add	r7, sp, #0
   22c86:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22c88:	230f      	movs	r3, #15
   22c8a:	18fb      	adds	r3, r7, r3
   22c8c:	2200      	movs	r2, #0
   22c8e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   22c90:	230f      	movs	r3, #15
   22c92:	18fc      	adds	r4, r7, r3
   22c94:	687b      	ldr	r3, [r7, #4]
   22c96:	0018      	movs	r0, r3
   22c98:	4b05      	ldr	r3, [pc, #20]	; (22cb0 <nm_bus_iface_init+0x30>)
   22c9a:	4798      	blx	r3
   22c9c:	0003      	movs	r3, r0
   22c9e:	7023      	strb	r3, [r4, #0]
	return ret;
   22ca0:	230f      	movs	r3, #15
   22ca2:	18fb      	adds	r3, r7, r3
   22ca4:	781b      	ldrb	r3, [r3, #0]
   22ca6:	b25b      	sxtb	r3, r3
}
   22ca8:	0018      	movs	r0, r3
   22caa:	46bd      	mov	sp, r7
   22cac:	b005      	add	sp, #20
   22cae:	bd90      	pop	{r4, r7, pc}
   22cb0:	00020a69 	.word	0x00020a69

00022cb4 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   22cb4:	b590      	push	{r4, r7, lr}
   22cb6:	b083      	sub	sp, #12
   22cb8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22cba:	1dfb      	adds	r3, r7, #7
   22cbc:	2200      	movs	r2, #0
   22cbe:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   22cc0:	1dfc      	adds	r4, r7, #7
   22cc2:	4b05      	ldr	r3, [pc, #20]	; (22cd8 <nm_bus_iface_deinit+0x24>)
   22cc4:	4798      	blx	r3
   22cc6:	0003      	movs	r3, r0
   22cc8:	7023      	strb	r3, [r4, #0]

	return ret;
   22cca:	1dfb      	adds	r3, r7, #7
   22ccc:	781b      	ldrb	r3, [r3, #0]
   22cce:	b25b      	sxtb	r3, r3
}
   22cd0:	0018      	movs	r0, r3
   22cd2:	46bd      	mov	sp, r7
   22cd4:	b003      	add	sp, #12
   22cd6:	bd90      	pop	{r4, r7, pc}
   22cd8:	00020be1 	.word	0x00020be1

00022cdc <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   22cdc:	b580      	push	{r7, lr}
   22cde:	b082      	sub	sp, #8
   22ce0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22ce2:	1dfb      	adds	r3, r7, #7
   22ce4:	2200      	movs	r2, #0
   22ce6:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   22ce8:	4b03      	ldr	r3, [pc, #12]	; (22cf8 <nm_bus_reset+0x1c>)
   22cea:	4798      	blx	r3
   22cec:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   22cee:	0018      	movs	r0, r3
   22cf0:	46bd      	mov	sp, r7
   22cf2:	b002      	add	sp, #8
   22cf4:	bd80      	pop	{r7, pc}
   22cf6:	46c0      	nop			; (mov r8, r8)
   22cf8:	00024b09 	.word	0x00024b09

00022cfc <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   22cfc:	b580      	push	{r7, lr}
   22cfe:	b082      	sub	sp, #8
   22d00:	af00      	add	r7, sp, #0
   22d02:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   22d04:	687b      	ldr	r3, [r7, #4]
   22d06:	0018      	movs	r0, r3
   22d08:	4b03      	ldr	r3, [pc, #12]	; (22d18 <nm_read_reg+0x1c>)
   22d0a:	4798      	blx	r3
   22d0c:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   22d0e:	0018      	movs	r0, r3
   22d10:	46bd      	mov	sp, r7
   22d12:	b002      	add	sp, #8
   22d14:	bd80      	pop	{r7, pc}
   22d16:	46c0      	nop			; (mov r8, r8)
   22d18:	00024c9d 	.word	0x00024c9d

00022d1c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   22d1c:	b580      	push	{r7, lr}
   22d1e:	b082      	sub	sp, #8
   22d20:	af00      	add	r7, sp, #0
   22d22:	6078      	str	r0, [r7, #4]
   22d24:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   22d26:	683a      	ldr	r2, [r7, #0]
   22d28:	687b      	ldr	r3, [r7, #4]
   22d2a:	0011      	movs	r1, r2
   22d2c:	0018      	movs	r0, r3
   22d2e:	4b03      	ldr	r3, [pc, #12]	; (22d3c <nm_read_reg_with_ret+0x20>)
   22d30:	4798      	blx	r3
   22d32:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   22d34:	0018      	movs	r0, r3
   22d36:	46bd      	mov	sp, r7
   22d38:	b002      	add	sp, #8
   22d3a:	bd80      	pop	{r7, pc}
   22d3c:	00024cc1 	.word	0x00024cc1

00022d40 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   22d40:	b580      	push	{r7, lr}
   22d42:	b082      	sub	sp, #8
   22d44:	af00      	add	r7, sp, #0
   22d46:	6078      	str	r0, [r7, #4]
   22d48:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   22d4a:	683a      	ldr	r2, [r7, #0]
   22d4c:	687b      	ldr	r3, [r7, #4]
   22d4e:	0011      	movs	r1, r2
   22d50:	0018      	movs	r0, r3
   22d52:	4b03      	ldr	r3, [pc, #12]	; (22d60 <nm_write_reg+0x20>)
   22d54:	4798      	blx	r3
   22d56:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   22d58:	0018      	movs	r0, r3
   22d5a:	46bd      	mov	sp, r7
   22d5c:	b002      	add	sp, #8
   22d5e:	bd80      	pop	{r7, pc}
   22d60:	00024d11 	.word	0x00024d11

00022d64 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   22d64:	b580      	push	{r7, lr}
   22d66:	b084      	sub	sp, #16
   22d68:	af00      	add	r7, sp, #0
   22d6a:	60f8      	str	r0, [r7, #12]
   22d6c:	60b9      	str	r1, [r7, #8]
   22d6e:	1dbb      	adds	r3, r7, #6
   22d70:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   22d72:	1dbb      	adds	r3, r7, #6
   22d74:	881a      	ldrh	r2, [r3, #0]
   22d76:	68b9      	ldr	r1, [r7, #8]
   22d78:	68fb      	ldr	r3, [r7, #12]
   22d7a:	0018      	movs	r0, r3
   22d7c:	4b03      	ldr	r3, [pc, #12]	; (22d8c <p_nm_read_block+0x28>)
   22d7e:	4798      	blx	r3
   22d80:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   22d82:	0018      	movs	r0, r3
   22d84:	46bd      	mov	sp, r7
   22d86:	b004      	add	sp, #16
   22d88:	bd80      	pop	{r7, pc}
   22d8a:	46c0      	nop			; (mov r8, r8)
   22d8c:	00024d61 	.word	0x00024d61

00022d90 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22d90:	b580      	push	{r7, lr}
   22d92:	b086      	sub	sp, #24
   22d94:	af00      	add	r7, sp, #0
   22d96:	60f8      	str	r0, [r7, #12]
   22d98:	60b9      	str	r1, [r7, #8]
   22d9a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22d9c:	4b2d      	ldr	r3, [pc, #180]	; (22e54 <nm_read_block+0xc4>)
   22d9e:	881a      	ldrh	r2, [r3, #0]
   22da0:	2310      	movs	r3, #16
   22da2:	18fb      	adds	r3, r7, r3
   22da4:	3a08      	subs	r2, #8
   22da6:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22da8:	2300      	movs	r3, #0
   22daa:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22dac:	2313      	movs	r3, #19
   22dae:	18fb      	adds	r3, r7, r3
   22db0:	2200      	movs	r2, #0
   22db2:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22db4:	2310      	movs	r3, #16
   22db6:	18fb      	adds	r3, r7, r3
   22db8:	881a      	ldrh	r2, [r3, #0]
   22dba:	687b      	ldr	r3, [r7, #4]
   22dbc:	429a      	cmp	r2, r3
   22dbe:	d313      	bcc.n	22de8 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22dc0:	68ba      	ldr	r2, [r7, #8]
   22dc2:	697b      	ldr	r3, [r7, #20]
   22dc4:	18d1      	adds	r1, r2, r3
   22dc6:	687b      	ldr	r3, [r7, #4]
   22dc8:	b29a      	uxth	r2, r3
   22dca:	68fb      	ldr	r3, [r7, #12]
   22dcc:	0018      	movs	r0, r3
   22dce:	4b22      	ldr	r3, [pc, #136]	; (22e58 <nm_read_block+0xc8>)
   22dd0:	4798      	blx	r3
   22dd2:	0003      	movs	r3, r0
   22dd4:	b2da      	uxtb	r2, r3
   22dd6:	2313      	movs	r3, #19
   22dd8:	18fb      	adds	r3, r7, r3
   22dda:	781b      	ldrb	r3, [r3, #0]
   22ddc:	18d3      	adds	r3, r2, r3
   22dde:	b2da      	uxtb	r2, r3
   22de0:	2313      	movs	r3, #19
   22de2:	18fb      	adds	r3, r7, r3
   22de4:	701a      	strb	r2, [r3, #0]
			break;
   22de6:	e02d      	b.n	22e44 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22de8:	68ba      	ldr	r2, [r7, #8]
   22dea:	697b      	ldr	r3, [r7, #20]
   22dec:	18d1      	adds	r1, r2, r3
   22dee:	2310      	movs	r3, #16
   22df0:	18fb      	adds	r3, r7, r3
   22df2:	881a      	ldrh	r2, [r3, #0]
   22df4:	68fb      	ldr	r3, [r7, #12]
   22df6:	0018      	movs	r0, r3
   22df8:	4b17      	ldr	r3, [pc, #92]	; (22e58 <nm_read_block+0xc8>)
   22dfa:	4798      	blx	r3
   22dfc:	0003      	movs	r3, r0
   22dfe:	b2da      	uxtb	r2, r3
   22e00:	2313      	movs	r3, #19
   22e02:	18fb      	adds	r3, r7, r3
   22e04:	781b      	ldrb	r3, [r3, #0]
   22e06:	18d3      	adds	r3, r2, r3
   22e08:	b2da      	uxtb	r2, r3
   22e0a:	2313      	movs	r3, #19
   22e0c:	18fb      	adds	r3, r7, r3
   22e0e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22e10:	2313      	movs	r3, #19
   22e12:	18fb      	adds	r3, r7, r3
   22e14:	781b      	ldrb	r3, [r3, #0]
   22e16:	b25b      	sxtb	r3, r3
   22e18:	2b00      	cmp	r3, #0
   22e1a:	d112      	bne.n	22e42 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   22e1c:	2310      	movs	r3, #16
   22e1e:	18fb      	adds	r3, r7, r3
   22e20:	881b      	ldrh	r3, [r3, #0]
   22e22:	687a      	ldr	r2, [r7, #4]
   22e24:	1ad3      	subs	r3, r2, r3
   22e26:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   22e28:	2310      	movs	r3, #16
   22e2a:	18fb      	adds	r3, r7, r3
   22e2c:	881b      	ldrh	r3, [r3, #0]
   22e2e:	697a      	ldr	r2, [r7, #20]
   22e30:	18d3      	adds	r3, r2, r3
   22e32:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   22e34:	2310      	movs	r3, #16
   22e36:	18fb      	adds	r3, r7, r3
   22e38:	881b      	ldrh	r3, [r3, #0]
   22e3a:	68fa      	ldr	r2, [r7, #12]
   22e3c:	18d3      	adds	r3, r2, r3
   22e3e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22e40:	e7b8      	b.n	22db4 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   22e42:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   22e44:	2313      	movs	r3, #19
   22e46:	18fb      	adds	r3, r7, r3
   22e48:	781b      	ldrb	r3, [r3, #0]
   22e4a:	b25b      	sxtb	r3, r3
}
   22e4c:	0018      	movs	r0, r3
   22e4e:	46bd      	mov	sp, r7
   22e50:	b006      	add	sp, #24
   22e52:	bd80      	pop	{r7, pc}
   22e54:	20000118 	.word	0x20000118
   22e58:	00022d65 	.word	0x00022d65

00022e5c <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   22e5c:	b580      	push	{r7, lr}
   22e5e:	b084      	sub	sp, #16
   22e60:	af00      	add	r7, sp, #0
   22e62:	60f8      	str	r0, [r7, #12]
   22e64:	60b9      	str	r1, [r7, #8]
   22e66:	1dbb      	adds	r3, r7, #6
   22e68:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   22e6a:	1dbb      	adds	r3, r7, #6
   22e6c:	881a      	ldrh	r2, [r3, #0]
   22e6e:	68b9      	ldr	r1, [r7, #8]
   22e70:	68fb      	ldr	r3, [r7, #12]
   22e72:	0018      	movs	r0, r3
   22e74:	4b03      	ldr	r3, [pc, #12]	; (22e84 <p_nm_write_block+0x28>)
   22e76:	4798      	blx	r3
   22e78:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   22e7a:	0018      	movs	r0, r3
   22e7c:	46bd      	mov	sp, r7
   22e7e:	b004      	add	sp, #16
   22e80:	bd80      	pop	{r7, pc}
   22e82:	46c0      	nop			; (mov r8, r8)
   22e84:	00024db9 	.word	0x00024db9

00022e88 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22e88:	b580      	push	{r7, lr}
   22e8a:	b086      	sub	sp, #24
   22e8c:	af00      	add	r7, sp, #0
   22e8e:	60f8      	str	r0, [r7, #12]
   22e90:	60b9      	str	r1, [r7, #8]
   22e92:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22e94:	4b2d      	ldr	r3, [pc, #180]	; (22f4c <nm_write_block+0xc4>)
   22e96:	881a      	ldrh	r2, [r3, #0]
   22e98:	2310      	movs	r3, #16
   22e9a:	18fb      	adds	r3, r7, r3
   22e9c:	3a08      	subs	r2, #8
   22e9e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22ea0:	2300      	movs	r3, #0
   22ea2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22ea4:	2313      	movs	r3, #19
   22ea6:	18fb      	adds	r3, r7, r3
   22ea8:	2200      	movs	r2, #0
   22eaa:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22eac:	2310      	movs	r3, #16
   22eae:	18fb      	adds	r3, r7, r3
   22eb0:	881a      	ldrh	r2, [r3, #0]
   22eb2:	687b      	ldr	r3, [r7, #4]
   22eb4:	429a      	cmp	r2, r3
   22eb6:	d313      	bcc.n	22ee0 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22eb8:	68ba      	ldr	r2, [r7, #8]
   22eba:	697b      	ldr	r3, [r7, #20]
   22ebc:	18d1      	adds	r1, r2, r3
   22ebe:	687b      	ldr	r3, [r7, #4]
   22ec0:	b29a      	uxth	r2, r3
   22ec2:	68fb      	ldr	r3, [r7, #12]
   22ec4:	0018      	movs	r0, r3
   22ec6:	4b22      	ldr	r3, [pc, #136]	; (22f50 <nm_write_block+0xc8>)
   22ec8:	4798      	blx	r3
   22eca:	0003      	movs	r3, r0
   22ecc:	b2da      	uxtb	r2, r3
   22ece:	2313      	movs	r3, #19
   22ed0:	18fb      	adds	r3, r7, r3
   22ed2:	781b      	ldrb	r3, [r3, #0]
   22ed4:	18d3      	adds	r3, r2, r3
   22ed6:	b2da      	uxtb	r2, r3
   22ed8:	2313      	movs	r3, #19
   22eda:	18fb      	adds	r3, r7, r3
   22edc:	701a      	strb	r2, [r3, #0]
			break;
   22ede:	e02d      	b.n	22f3c <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22ee0:	68ba      	ldr	r2, [r7, #8]
   22ee2:	697b      	ldr	r3, [r7, #20]
   22ee4:	18d1      	adds	r1, r2, r3
   22ee6:	2310      	movs	r3, #16
   22ee8:	18fb      	adds	r3, r7, r3
   22eea:	881a      	ldrh	r2, [r3, #0]
   22eec:	68fb      	ldr	r3, [r7, #12]
   22eee:	0018      	movs	r0, r3
   22ef0:	4b17      	ldr	r3, [pc, #92]	; (22f50 <nm_write_block+0xc8>)
   22ef2:	4798      	blx	r3
   22ef4:	0003      	movs	r3, r0
   22ef6:	b2da      	uxtb	r2, r3
   22ef8:	2313      	movs	r3, #19
   22efa:	18fb      	adds	r3, r7, r3
   22efc:	781b      	ldrb	r3, [r3, #0]
   22efe:	18d3      	adds	r3, r2, r3
   22f00:	b2da      	uxtb	r2, r3
   22f02:	2313      	movs	r3, #19
   22f04:	18fb      	adds	r3, r7, r3
   22f06:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22f08:	2313      	movs	r3, #19
   22f0a:	18fb      	adds	r3, r7, r3
   22f0c:	781b      	ldrb	r3, [r3, #0]
   22f0e:	b25b      	sxtb	r3, r3
   22f10:	2b00      	cmp	r3, #0
   22f12:	d112      	bne.n	22f3a <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   22f14:	2310      	movs	r3, #16
   22f16:	18fb      	adds	r3, r7, r3
   22f18:	881b      	ldrh	r3, [r3, #0]
   22f1a:	687a      	ldr	r2, [r7, #4]
   22f1c:	1ad3      	subs	r3, r2, r3
   22f1e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   22f20:	2310      	movs	r3, #16
   22f22:	18fb      	adds	r3, r7, r3
   22f24:	881b      	ldrh	r3, [r3, #0]
   22f26:	697a      	ldr	r2, [r7, #20]
   22f28:	18d3      	adds	r3, r2, r3
   22f2a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   22f2c:	2310      	movs	r3, #16
   22f2e:	18fb      	adds	r3, r7, r3
   22f30:	881b      	ldrh	r3, [r3, #0]
   22f32:	68fa      	ldr	r2, [r7, #12]
   22f34:	18d3      	adds	r3, r2, r3
   22f36:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22f38:	e7b8      	b.n	22eac <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   22f3a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   22f3c:	2313      	movs	r3, #19
   22f3e:	18fb      	adds	r3, r7, r3
   22f40:	781b      	ldrb	r3, [r3, #0]
   22f42:	b25b      	sxtb	r3, r3
}
   22f44:	0018      	movs	r0, r3
   22f46:	46bd      	mov	sp, r7
   22f48:	b006      	add	sp, #24
   22f4a:	bd80      	pop	{r7, pc}
   22f4c:	20000118 	.word	0x20000118
   22f50:	00022e5d 	.word	0x00022e5d

00022f54 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   22f54:	b590      	push	{r4, r7, lr}
   22f56:	b089      	sub	sp, #36	; 0x24
   22f58:	af00      	add	r7, sp, #0
   22f5a:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   22f5c:	2300      	movs	r3, #0
   22f5e:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   22f60:	231f      	movs	r3, #31
   22f62:	18fb      	adds	r3, r7, r3
   22f64:	2200      	movs	r2, #0
   22f66:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   22f68:	230c      	movs	r3, #12
   22f6a:	18fb      	adds	r3, r7, r3
   22f6c:	0018      	movs	r0, r3
   22f6e:	2308      	movs	r3, #8
   22f70:	001a      	movs	r2, r3
   22f72:	2100      	movs	r1, #0
   22f74:	4b64      	ldr	r3, [pc, #400]	; (23108 <nm_get_firmware_full_info+0x1b4>)
   22f76:	4798      	blx	r3
	if (pstrRev != NULL)
   22f78:	687b      	ldr	r3, [r7, #4]
   22f7a:	2b00      	cmp	r3, #0
   22f7c:	d100      	bne.n	22f80 <nm_get_firmware_full_info+0x2c>
   22f7e:	e0ba      	b.n	230f6 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   22f80:	687b      	ldr	r3, [r7, #4]
   22f82:	2228      	movs	r2, #40	; 0x28
   22f84:	2100      	movs	r1, #0
   22f86:	0018      	movs	r0, r3
   22f88:	4b60      	ldr	r3, [pc, #384]	; (2310c <nm_get_firmware_full_info+0x1b8>)
   22f8a:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   22f8c:	231f      	movs	r3, #31
   22f8e:	18fc      	adds	r4, r7, r3
   22f90:	2314      	movs	r3, #20
   22f92:	18fb      	adds	r3, r7, r3
   22f94:	4a5e      	ldr	r2, [pc, #376]	; (23110 <nm_get_firmware_full_info+0x1bc>)
   22f96:	0019      	movs	r1, r3
   22f98:	0010      	movs	r0, r2
   22f9a:	4b5e      	ldr	r3, [pc, #376]	; (23114 <nm_get_firmware_full_info+0x1c0>)
   22f9c:	4798      	blx	r3
   22f9e:	0003      	movs	r3, r0
   22fa0:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   22fa2:	231f      	movs	r3, #31
   22fa4:	18fb      	adds	r3, r7, r3
   22fa6:	781b      	ldrb	r3, [r3, #0]
   22fa8:	b25b      	sxtb	r3, r3
   22faa:	2b00      	cmp	r3, #0
   22fac:	d000      	beq.n	22fb0 <nm_get_firmware_full_info+0x5c>
   22fae:	e0a2      	b.n	230f6 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   22fb0:	697b      	ldr	r3, [r7, #20]
   22fb2:	2b00      	cmp	r3, #0
   22fb4:	d100      	bne.n	22fb8 <nm_get_firmware_full_info+0x64>
   22fb6:	e09a      	b.n	230ee <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   22fb8:	697b      	ldr	r3, [r7, #20]
   22fba:	22c0      	movs	r2, #192	; 0xc0
   22fbc:	0292      	lsls	r2, r2, #10
   22fbe:	4313      	orrs	r3, r2
   22fc0:	221f      	movs	r2, #31
   22fc2:	18bc      	adds	r4, r7, r2
   22fc4:	220c      	movs	r2, #12
   22fc6:	18b9      	adds	r1, r7, r2
   22fc8:	2208      	movs	r2, #8
   22fca:	0018      	movs	r0, r3
   22fcc:	4b52      	ldr	r3, [pc, #328]	; (23118 <nm_get_firmware_full_info+0x1c4>)
   22fce:	4798      	blx	r3
   22fd0:	0003      	movs	r3, r0
   22fd2:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   22fd4:	231f      	movs	r3, #31
   22fd6:	18fb      	adds	r3, r7, r3
   22fd8:	781b      	ldrb	r3, [r3, #0]
   22fda:	b25b      	sxtb	r3, r3
   22fdc:	2b00      	cmp	r3, #0
   22fde:	d000      	beq.n	22fe2 <nm_get_firmware_full_info+0x8e>
   22fe0:	e089      	b.n	230f6 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   22fe2:	230c      	movs	r3, #12
   22fe4:	18fb      	adds	r3, r7, r3
   22fe6:	685b      	ldr	r3, [r3, #4]
   22fe8:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   22fea:	697b      	ldr	r3, [r7, #20]
   22fec:	041b      	lsls	r3, r3, #16
   22fee:	0c1b      	lsrs	r3, r3, #16
   22ff0:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   22ff2:	697b      	ldr	r3, [r7, #20]
   22ff4:	2b00      	cmp	r3, #0
   22ff6:	d100      	bne.n	22ffa <nm_get_firmware_full_info+0xa6>
   22ff8:	e074      	b.n	230e4 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   22ffa:	697b      	ldr	r3, [r7, #20]
   22ffc:	22c0      	movs	r2, #192	; 0xc0
   22ffe:	0292      	lsls	r2, r2, #10
   23000:	4313      	orrs	r3, r2
   23002:	221f      	movs	r2, #31
   23004:	18bc      	adds	r4, r7, r2
   23006:	6879      	ldr	r1, [r7, #4]
   23008:	2228      	movs	r2, #40	; 0x28
   2300a:	0018      	movs	r0, r3
   2300c:	4b42      	ldr	r3, [pc, #264]	; (23118 <nm_get_firmware_full_info+0x1c4>)
   2300e:	4798      	blx	r3
   23010:	0003      	movs	r3, r0
   23012:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   23014:	231f      	movs	r3, #31
   23016:	18fb      	adds	r3, r7, r3
   23018:	781b      	ldrb	r3, [r3, #0]
   2301a:	b25b      	sxtb	r3, r3
   2301c:	2b00      	cmp	r3, #0
   2301e:	d16a      	bne.n	230f6 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   23020:	687b      	ldr	r3, [r7, #4]
   23022:	791b      	ldrb	r3, [r3, #4]
   23024:	021b      	lsls	r3, r3, #8
   23026:	b21a      	sxth	r2, r3
   23028:	687b      	ldr	r3, [r7, #4]
   2302a:	795b      	ldrb	r3, [r3, #5]
   2302c:	011b      	lsls	r3, r3, #4
   2302e:	b21b      	sxth	r3, r3
   23030:	21ff      	movs	r1, #255	; 0xff
   23032:	400b      	ands	r3, r1
   23034:	b21b      	sxth	r3, r3
   23036:	4313      	orrs	r3, r2
   23038:	b21a      	sxth	r2, r3
   2303a:	687b      	ldr	r3, [r7, #4]
   2303c:	799b      	ldrb	r3, [r3, #6]
   2303e:	b21b      	sxth	r3, r3
   23040:	210f      	movs	r1, #15
   23042:	400b      	ands	r3, r1
   23044:	b21b      	sxth	r3, r3
   23046:	4313      	orrs	r3, r2
   23048:	b21a      	sxth	r2, r3
   2304a:	231c      	movs	r3, #28
   2304c:	18fb      	adds	r3, r7, r3
   2304e:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   23050:	231a      	movs	r3, #26
   23052:	18fb      	adds	r3, r7, r3
   23054:	4a31      	ldr	r2, [pc, #196]	; (2311c <nm_get_firmware_full_info+0x1c8>)
   23056:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   23058:	687b      	ldr	r3, [r7, #4]
   2305a:	79db      	ldrb	r3, [r3, #7]
   2305c:	021b      	lsls	r3, r3, #8
   2305e:	b21a      	sxth	r2, r3
   23060:	687b      	ldr	r3, [r7, #4]
   23062:	7a1b      	ldrb	r3, [r3, #8]
   23064:	011b      	lsls	r3, r3, #4
   23066:	b21b      	sxth	r3, r3
   23068:	21ff      	movs	r1, #255	; 0xff
   2306a:	400b      	ands	r3, r1
   2306c:	b21b      	sxth	r3, r3
   2306e:	4313      	orrs	r3, r2
   23070:	b21a      	sxth	r2, r3
   23072:	687b      	ldr	r3, [r7, #4]
   23074:	7a5b      	ldrb	r3, [r3, #9]
   23076:	b21b      	sxth	r3, r3
   23078:	210f      	movs	r1, #15
   2307a:	400b      	ands	r3, r1
   2307c:	b21b      	sxth	r3, r3
   2307e:	4313      	orrs	r3, r2
   23080:	b21a      	sxth	r2, r3
   23082:	2318      	movs	r3, #24
   23084:	18fb      	adds	r3, r7, r3
   23086:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   23088:	231c      	movs	r3, #28
   2308a:	18fb      	adds	r3, r7, r3
   2308c:	881b      	ldrh	r3, [r3, #0]
   2308e:	2b00      	cmp	r3, #0
   23090:	d009      	beq.n	230a6 <nm_get_firmware_full_info+0x152>
   23092:	2318      	movs	r3, #24
   23094:	18fb      	adds	r3, r7, r3
   23096:	881b      	ldrh	r3, [r3, #0]
   23098:	2b00      	cmp	r3, #0
   2309a:	d004      	beq.n	230a6 <nm_get_firmware_full_info+0x152>
   2309c:	2318      	movs	r3, #24
   2309e:	18fb      	adds	r3, r7, r3
   230a0:	881b      	ldrh	r3, [r3, #0]
   230a2:	2b00      	cmp	r3, #0
   230a4:	d104      	bne.n	230b0 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   230a6:	231f      	movs	r3, #31
   230a8:	18fb      	adds	r3, r7, r3
   230aa:	22f4      	movs	r2, #244	; 0xf4
   230ac:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   230ae:	e022      	b.n	230f6 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   230b0:	231a      	movs	r3, #26
   230b2:	18fa      	adds	r2, r7, r3
   230b4:	2318      	movs	r3, #24
   230b6:	18fb      	adds	r3, r7, r3
   230b8:	8812      	ldrh	r2, [r2, #0]
   230ba:	881b      	ldrh	r3, [r3, #0]
   230bc:	429a      	cmp	r2, r3
   230be:	d204      	bcs.n	230ca <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   230c0:	231f      	movs	r3, #31
   230c2:	18fb      	adds	r3, r7, r3
   230c4:	22f3      	movs	r2, #243	; 0xf3
   230c6:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   230c8:	e015      	b.n	230f6 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   230ca:	231a      	movs	r3, #26
   230cc:	18fa      	adds	r2, r7, r3
   230ce:	231c      	movs	r3, #28
   230d0:	18fb      	adds	r3, r7, r3
   230d2:	8812      	ldrh	r2, [r2, #0]
   230d4:	881b      	ldrh	r3, [r3, #0]
   230d6:	429a      	cmp	r2, r3
   230d8:	d90d      	bls.n	230f6 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   230da:	231f      	movs	r3, #31
   230dc:	18fb      	adds	r3, r7, r3
   230de:	22f3      	movs	r2, #243	; 0xf3
   230e0:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   230e2:	e008      	b.n	230f6 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   230e4:	231f      	movs	r3, #31
   230e6:	18fb      	adds	r3, r7, r3
   230e8:	22f4      	movs	r2, #244	; 0xf4
   230ea:	701a      	strb	r2, [r3, #0]
   230ec:	e003      	b.n	230f6 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   230ee:	231f      	movs	r3, #31
   230f0:	18fb      	adds	r3, r7, r3
   230f2:	22f4      	movs	r2, #244	; 0xf4
   230f4:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   230f6:	231f      	movs	r3, #31
   230f8:	18fb      	adds	r3, r7, r3
   230fa:	781b      	ldrb	r3, [r3, #0]
   230fc:	b25b      	sxtb	r3, r3
}
   230fe:	0018      	movs	r0, r3
   23100:	46bd      	mov	sp, r7
   23102:	b009      	add	sp, #36	; 0x24
   23104:	bd90      	pop	{r4, r7, pc}
   23106:	46c0      	nop			; (mov r8, r8)
   23108:	00034a5f 	.word	0x00034a5f
   2310c:	00020c8d 	.word	0x00020c8d
   23110:	000c0008 	.word	0x000c0008
   23114:	00022d1d 	.word	0x00022d1d
   23118:	00022d91 	.word	0x00022d91
   2311c:	00001354 	.word	0x00001354

00023120 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   23120:	b590      	push	{r4, r7, lr}
   23122:	b085      	sub	sp, #20
   23124:	af00      	add	r7, sp, #0
   23126:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23128:	230f      	movs	r3, #15
   2312a:	18fb      	adds	r3, r7, r3
   2312c:	2200      	movs	r2, #0
   2312e:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   23130:	687b      	ldr	r3, [r7, #4]
   23132:	2b00      	cmp	r3, #0
   23134:	d013      	beq.n	2315e <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   23136:	230e      	movs	r3, #14
   23138:	18fb      	adds	r3, r7, r3
   2313a:	687a      	ldr	r2, [r7, #4]
   2313c:	7812      	ldrb	r2, [r2, #0]
   2313e:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   23140:	230e      	movs	r3, #14
   23142:	18fb      	adds	r3, r7, r3
   23144:	781b      	ldrb	r3, [r3, #0]
   23146:	2b00      	cmp	r3, #0
   23148:	d004      	beq.n	23154 <nm_drv_init+0x34>
   2314a:	230e      	movs	r3, #14
   2314c:	18fb      	adds	r3, r7, r3
   2314e:	781b      	ldrb	r3, [r3, #0]
   23150:	2b04      	cmp	r3, #4
   23152:	d908      	bls.n	23166 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   23154:	230e      	movs	r3, #14
   23156:	18fb      	adds	r3, r7, r3
   23158:	2201      	movs	r2, #1
   2315a:	701a      	strb	r2, [r3, #0]
   2315c:	e003      	b.n	23166 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   2315e:	230e      	movs	r3, #14
   23160:	18fb      	adds	r3, r7, r3
   23162:	2201      	movs	r2, #1
   23164:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   23166:	230f      	movs	r3, #15
   23168:	18fc      	adds	r4, r7, r3
   2316a:	2000      	movs	r0, #0
   2316c:	4b41      	ldr	r3, [pc, #260]	; (23274 <nm_drv_init+0x154>)
   2316e:	4798      	blx	r3
   23170:	0003      	movs	r3, r0
   23172:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23174:	230f      	movs	r3, #15
   23176:	18fb      	adds	r3, r7, r3
   23178:	781b      	ldrb	r3, [r3, #0]
   2317a:	b25b      	sxtb	r3, r3
   2317c:	2b00      	cmp	r3, #0
   2317e:	d00f      	beq.n	231a0 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   23180:	2390      	movs	r3, #144	; 0x90
   23182:	005a      	lsls	r2, r3, #1
   23184:	493c      	ldr	r1, [pc, #240]	; (23278 <nm_drv_init+0x158>)
   23186:	4b3d      	ldr	r3, [pc, #244]	; (2327c <nm_drv_init+0x15c>)
   23188:	0018      	movs	r0, r3
   2318a:	4b3d      	ldr	r3, [pc, #244]	; (23280 <nm_drv_init+0x160>)
   2318c:	4798      	blx	r3
   2318e:	4b3d      	ldr	r3, [pc, #244]	; (23284 <nm_drv_init+0x164>)
   23190:	0018      	movs	r0, r3
   23192:	4b3b      	ldr	r3, [pc, #236]	; (23280 <nm_drv_init+0x160>)
   23194:	4798      	blx	r3
   23196:	4b3c      	ldr	r3, [pc, #240]	; (23288 <nm_drv_init+0x168>)
   23198:	0018      	movs	r0, r3
   2319a:	4b39      	ldr	r3, [pc, #228]	; (23280 <nm_drv_init+0x160>)
   2319c:	4798      	blx	r3
		goto ERR1;
   2319e:	e061      	b.n	23264 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   231a0:	4b3a      	ldr	r3, [pc, #232]	; (2328c <nm_drv_init+0x16c>)
   231a2:	0018      	movs	r0, r3
   231a4:	4b36      	ldr	r3, [pc, #216]	; (23280 <nm_drv_init+0x160>)
   231a6:	4798      	blx	r3
   231a8:	4b39      	ldr	r3, [pc, #228]	; (23290 <nm_drv_init+0x170>)
   231aa:	4798      	blx	r3
   231ac:	0002      	movs	r2, r0
   231ae:	4b39      	ldr	r3, [pc, #228]	; (23294 <nm_drv_init+0x174>)
   231b0:	0011      	movs	r1, r2
   231b2:	0018      	movs	r0, r3
   231b4:	4b32      	ldr	r3, [pc, #200]	; (23280 <nm_drv_init+0x160>)
   231b6:	4798      	blx	r3
   231b8:	4b33      	ldr	r3, [pc, #204]	; (23288 <nm_drv_init+0x168>)
   231ba:	0018      	movs	r0, r3
   231bc:	4b30      	ldr	r3, [pc, #192]	; (23280 <nm_drv_init+0x160>)
   231be:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   231c0:	4b35      	ldr	r3, [pc, #212]	; (23298 <nm_drv_init+0x178>)
   231c2:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   231c4:	230f      	movs	r3, #15
   231c6:	18fc      	adds	r4, r7, r3
   231c8:	230e      	movs	r3, #14
   231ca:	18fb      	adds	r3, r7, r3
   231cc:	781b      	ldrb	r3, [r3, #0]
   231ce:	0018      	movs	r0, r3
   231d0:	4b32      	ldr	r3, [pc, #200]	; (2329c <nm_drv_init+0x17c>)
   231d2:	4798      	blx	r3
   231d4:	0003      	movs	r3, r0
   231d6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   231d8:	230f      	movs	r3, #15
   231da:	18fb      	adds	r3, r7, r3
   231dc:	781b      	ldrb	r3, [r3, #0]
   231de:	b25b      	sxtb	r3, r3
   231e0:	2b00      	cmp	r3, #0
   231e2:	d13a      	bne.n	2325a <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   231e4:	230f      	movs	r3, #15
   231e6:	18fc      	adds	r4, r7, r3
   231e8:	230e      	movs	r3, #14
   231ea:	18fb      	adds	r3, r7, r3
   231ec:	781b      	ldrb	r3, [r3, #0]
   231ee:	0018      	movs	r0, r3
   231f0:	4b2b      	ldr	r3, [pc, #172]	; (232a0 <nm_drv_init+0x180>)
   231f2:	4798      	blx	r3
   231f4:	0003      	movs	r3, r0
   231f6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   231f8:	230f      	movs	r3, #15
   231fa:	18fb      	adds	r3, r7, r3
   231fc:	781b      	ldrb	r3, [r3, #0]
   231fe:	b25b      	sxtb	r3, r3
   23200:	2b00      	cmp	r3, #0
   23202:	d12c      	bne.n	2325e <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   23204:	230e      	movs	r3, #14
   23206:	18fb      	adds	r3, r7, r3
   23208:	781b      	ldrb	r3, [r3, #0]
   2320a:	2b02      	cmp	r3, #2
   2320c:	d02a      	beq.n	23264 <nm_drv_init+0x144>
   2320e:	230e      	movs	r3, #14
   23210:	18fb      	adds	r3, r7, r3
   23212:	781b      	ldrb	r3, [r3, #0]
   23214:	2b03      	cmp	r3, #3
   23216:	d025      	beq.n	23264 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   23218:	230f      	movs	r3, #15
   2321a:	18fc      	adds	r4, r7, r3
   2321c:	4b21      	ldr	r3, [pc, #132]	; (232a4 <nm_drv_init+0x184>)
   2321e:	4798      	blx	r3
   23220:	0003      	movs	r3, r0
   23222:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23224:	230f      	movs	r3, #15
   23226:	18fb      	adds	r3, r7, r3
   23228:	781b      	ldrb	r3, [r3, #0]
   2322a:	b25b      	sxtb	r3, r3
   2322c:	2b00      	cmp	r3, #0
   2322e:	d00f      	beq.n	23250 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   23230:	23a7      	movs	r3, #167	; 0xa7
   23232:	005a      	lsls	r2, r3, #1
   23234:	4910      	ldr	r1, [pc, #64]	; (23278 <nm_drv_init+0x158>)
   23236:	4b11      	ldr	r3, [pc, #68]	; (2327c <nm_drv_init+0x15c>)
   23238:	0018      	movs	r0, r3
   2323a:	4b11      	ldr	r3, [pc, #68]	; (23280 <nm_drv_init+0x160>)
   2323c:	4798      	blx	r3
   2323e:	4b1a      	ldr	r3, [pc, #104]	; (232a8 <nm_drv_init+0x188>)
   23240:	0018      	movs	r0, r3
   23242:	4b0f      	ldr	r3, [pc, #60]	; (23280 <nm_drv_init+0x160>)
   23244:	4798      	blx	r3
   23246:	4b10      	ldr	r3, [pc, #64]	; (23288 <nm_drv_init+0x168>)
   23248:	0018      	movs	r0, r3
   2324a:	4b0d      	ldr	r3, [pc, #52]	; (23280 <nm_drv_init+0x160>)
   2324c:	4798      	blx	r3
		goto ERR2;
   2324e:	e007      	b.n	23260 <nm_drv_init+0x140>
	}
	return ret;
   23250:	230f      	movs	r3, #15
   23252:	18fb      	adds	r3, r7, r3
   23254:	781b      	ldrb	r3, [r3, #0]
   23256:	b25b      	sxtb	r3, r3
   23258:	e008      	b.n	2326c <nm_drv_init+0x14c>
		goto ERR2;
   2325a:	46c0      	nop			; (mov r8, r8)
   2325c:	e000      	b.n	23260 <nm_drv_init+0x140>
		goto ERR2;
   2325e:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   23260:	4b12      	ldr	r3, [pc, #72]	; (232ac <nm_drv_init+0x18c>)
   23262:	4798      	blx	r3
ERR1:
	return ret;
   23264:	230f      	movs	r3, #15
   23266:	18fb      	adds	r3, r7, r3
   23268:	781b      	ldrb	r3, [r3, #0]
   2326a:	b25b      	sxtb	r3, r3
}
   2326c:	0018      	movs	r0, r3
   2326e:	46bd      	mov	sp, r7
   23270:	b005      	add	sp, #20
   23272:	bd90      	pop	{r4, r7, pc}
   23274:	00022c81 	.word	0x00022c81
   23278:	00038d6c 	.word	0x00038d6c
   2327c:	00038c9c 	.word	0x00038c9c
   23280:	0001df59 	.word	0x0001df59
   23284:	00038cb0 	.word	0x00038cb0
   23288:	00038ccc 	.word	0x00038ccc
   2328c:	00038cd0 	.word	0x00038cd0
   23290:	0002261d 	.word	0x0002261d
   23294:	00038cdc 	.word	0x00038cdc
   23298:	00024b39 	.word	0x00024b39
   2329c:	00022975 	.word	0x00022975
   232a0:	00022b0d 	.word	0x00022b0d
   232a4:	00022569 	.word	0x00022569
   232a8:	00038cec 	.word	0x00038cec
   232ac:	00022cb5 	.word	0x00022cb5

000232b0 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   232b0:	b590      	push	{r4, r7, lr}
   232b2:	b085      	sub	sp, #20
   232b4:	af00      	add	r7, sp, #0
   232b6:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   232b8:	230f      	movs	r3, #15
   232ba:	18fc      	adds	r4, r7, r3
   232bc:	4b2e      	ldr	r3, [pc, #184]	; (23378 <nm_drv_deinit+0xc8>)
   232be:	4798      	blx	r3
   232c0:	0003      	movs	r3, r0
   232c2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   232c4:	230f      	movs	r3, #15
   232c6:	18fb      	adds	r3, r7, r3
   232c8:	781b      	ldrb	r3, [r3, #0]
   232ca:	b25b      	sxtb	r3, r3
   232cc:	2b00      	cmp	r3, #0
   232ce:	d010      	beq.n	232f2 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   232d0:	2366      	movs	r3, #102	; 0x66
   232d2:	33ff      	adds	r3, #255	; 0xff
   232d4:	001a      	movs	r2, r3
   232d6:	4929      	ldr	r1, [pc, #164]	; (2337c <nm_drv_deinit+0xcc>)
   232d8:	4b29      	ldr	r3, [pc, #164]	; (23380 <nm_drv_deinit+0xd0>)
   232da:	0018      	movs	r0, r3
   232dc:	4b29      	ldr	r3, [pc, #164]	; (23384 <nm_drv_deinit+0xd4>)
   232de:	4798      	blx	r3
   232e0:	4b29      	ldr	r3, [pc, #164]	; (23388 <nm_drv_deinit+0xd8>)
   232e2:	0018      	movs	r0, r3
   232e4:	4b27      	ldr	r3, [pc, #156]	; (23384 <nm_drv_deinit+0xd4>)
   232e6:	4798      	blx	r3
   232e8:	4b28      	ldr	r3, [pc, #160]	; (2338c <nm_drv_deinit+0xdc>)
   232ea:	0018      	movs	r0, r3
   232ec:	4b25      	ldr	r3, [pc, #148]	; (23384 <nm_drv_deinit+0xd4>)
   232ee:	4798      	blx	r3
		goto ERR1;
   232f0:	e03a      	b.n	23368 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   232f2:	230f      	movs	r3, #15
   232f4:	18fc      	adds	r4, r7, r3
   232f6:	2000      	movs	r0, #0
   232f8:	4b25      	ldr	r3, [pc, #148]	; (23390 <nm_drv_deinit+0xe0>)
   232fa:	4798      	blx	r3
   232fc:	0003      	movs	r3, r0
   232fe:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23300:	230f      	movs	r3, #15
   23302:	18fb      	adds	r3, r7, r3
   23304:	781b      	ldrb	r3, [r3, #0]
   23306:	b25b      	sxtb	r3, r3
   23308:	2b00      	cmp	r3, #0
   2330a:	d00f      	beq.n	2332c <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   2330c:	23b6      	movs	r3, #182	; 0xb6
   2330e:	005a      	lsls	r2, r3, #1
   23310:	491a      	ldr	r1, [pc, #104]	; (2337c <nm_drv_deinit+0xcc>)
   23312:	4b1b      	ldr	r3, [pc, #108]	; (23380 <nm_drv_deinit+0xd0>)
   23314:	0018      	movs	r0, r3
   23316:	4b1b      	ldr	r3, [pc, #108]	; (23384 <nm_drv_deinit+0xd4>)
   23318:	4798      	blx	r3
   2331a:	4b1e      	ldr	r3, [pc, #120]	; (23394 <nm_drv_deinit+0xe4>)
   2331c:	0018      	movs	r0, r3
   2331e:	4b19      	ldr	r3, [pc, #100]	; (23384 <nm_drv_deinit+0xd4>)
   23320:	4798      	blx	r3
   23322:	4b1a      	ldr	r3, [pc, #104]	; (2338c <nm_drv_deinit+0xdc>)
   23324:	0018      	movs	r0, r3
   23326:	4b17      	ldr	r3, [pc, #92]	; (23384 <nm_drv_deinit+0xd4>)
   23328:	4798      	blx	r3
		goto ERR1;
   2332a:	e01d      	b.n	23368 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   2332c:	230f      	movs	r3, #15
   2332e:	18fc      	adds	r4, r7, r3
   23330:	4b19      	ldr	r3, [pc, #100]	; (23398 <nm_drv_deinit+0xe8>)
   23332:	4798      	blx	r3
   23334:	0003      	movs	r3, r0
   23336:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23338:	230f      	movs	r3, #15
   2333a:	18fb      	adds	r3, r7, r3
   2333c:	781b      	ldrb	r3, [r3, #0]
   2333e:	b25b      	sxtb	r3, r3
   23340:	2b00      	cmp	r3, #0
   23342:	d00f      	beq.n	23364 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   23344:	23b9      	movs	r3, #185	; 0xb9
   23346:	005a      	lsls	r2, r3, #1
   23348:	490c      	ldr	r1, [pc, #48]	; (2337c <nm_drv_deinit+0xcc>)
   2334a:	4b0d      	ldr	r3, [pc, #52]	; (23380 <nm_drv_deinit+0xd0>)
   2334c:	0018      	movs	r0, r3
   2334e:	4b0d      	ldr	r3, [pc, #52]	; (23384 <nm_drv_deinit+0xd4>)
   23350:	4798      	blx	r3
   23352:	4b12      	ldr	r3, [pc, #72]	; (2339c <nm_drv_deinit+0xec>)
   23354:	0018      	movs	r0, r3
   23356:	4b0b      	ldr	r3, [pc, #44]	; (23384 <nm_drv_deinit+0xd4>)
   23358:	4798      	blx	r3
   2335a:	4b0c      	ldr	r3, [pc, #48]	; (2338c <nm_drv_deinit+0xdc>)
   2335c:	0018      	movs	r0, r3
   2335e:	4b09      	ldr	r3, [pc, #36]	; (23384 <nm_drv_deinit+0xd4>)
   23360:	4798      	blx	r3
		goto ERR1;
   23362:	e001      	b.n	23368 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   23364:	4b0e      	ldr	r3, [pc, #56]	; (233a0 <nm_drv_deinit+0xf0>)
   23366:	4798      	blx	r3
#endif

ERR1:
	return ret;
   23368:	230f      	movs	r3, #15
   2336a:	18fb      	adds	r3, r7, r3
   2336c:	781b      	ldrb	r3, [r3, #0]
   2336e:	b25b      	sxtb	r3, r3
}
   23370:	0018      	movs	r0, r3
   23372:	46bd      	mov	sp, r7
   23374:	b005      	add	sp, #20
   23376:	bd90      	pop	{r4, r7, pc}
   23378:	00022bc1 	.word	0x00022bc1
   2337c:	00038d78 	.word	0x00038d78
   23380:	00038c9c 	.word	0x00038c9c
   23384:	0001df59 	.word	0x0001df59
   23388:	00038d0c 	.word	0x00038d0c
   2338c:	00038ccc 	.word	0x00038ccc
   23390:	00025fe1 	.word	0x00025fe1
   23394:	00038d2c 	.word	0x00038d2c
   23398:	00022cb5 	.word	0x00022cb5
   2339c:	00038d50 	.word	0x00038d50
   233a0:	00024c85 	.word	0x00024c85

000233a4 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   233a4:	b580      	push	{r7, lr}
   233a6:	b086      	sub	sp, #24
   233a8:	af00      	add	r7, sp, #0
   233aa:	6078      	str	r0, [r7, #4]
   233ac:	000a      	movs	r2, r1
   233ae:	1cbb      	adds	r3, r7, #2
   233b0:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   233b2:	230c      	movs	r3, #12
   233b4:	18fb      	adds	r3, r7, r3
   233b6:	2200      	movs	r2, #0
   233b8:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   233ba:	230c      	movs	r3, #12
   233bc:	18fb      	adds	r3, r7, r3
   233be:	687a      	ldr	r2, [r7, #4]
   233c0:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   233c2:	230c      	movs	r3, #12
   233c4:	18fb      	adds	r3, r7, r3
   233c6:	1cba      	adds	r2, r7, #2
   233c8:	8812      	ldrh	r2, [r2, #0]
   233ca:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   233cc:	230c      	movs	r3, #12
   233ce:	18fb      	adds	r3, r7, r3
   233d0:	0019      	movs	r1, r3
   233d2:	2003      	movs	r0, #3
   233d4:	4b03      	ldr	r3, [pc, #12]	; (233e4 <nmi_spi_read+0x40>)
   233d6:	4798      	blx	r3
   233d8:	0003      	movs	r3, r0
}
   233da:	0018      	movs	r0, r3
   233dc:	46bd      	mov	sp, r7
   233de:	b006      	add	sp, #24
   233e0:	bd80      	pop	{r7, pc}
   233e2:	46c0      	nop			; (mov r8, r8)
   233e4:	00020b51 	.word	0x00020b51

000233e8 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   233e8:	b580      	push	{r7, lr}
   233ea:	b086      	sub	sp, #24
   233ec:	af00      	add	r7, sp, #0
   233ee:	6078      	str	r0, [r7, #4]
   233f0:	000a      	movs	r2, r1
   233f2:	1cbb      	adds	r3, r7, #2
   233f4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   233f6:	230c      	movs	r3, #12
   233f8:	18fb      	adds	r3, r7, r3
   233fa:	687a      	ldr	r2, [r7, #4]
   233fc:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   233fe:	230c      	movs	r3, #12
   23400:	18fb      	adds	r3, r7, r3
   23402:	2200      	movs	r2, #0
   23404:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23406:	230c      	movs	r3, #12
   23408:	18fb      	adds	r3, r7, r3
   2340a:	1cba      	adds	r2, r7, #2
   2340c:	8812      	ldrh	r2, [r2, #0]
   2340e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23410:	230c      	movs	r3, #12
   23412:	18fb      	adds	r3, r7, r3
   23414:	0019      	movs	r1, r3
   23416:	2003      	movs	r0, #3
   23418:	4b03      	ldr	r3, [pc, #12]	; (23428 <nmi_spi_write+0x40>)
   2341a:	4798      	blx	r3
   2341c:	0003      	movs	r3, r0
}
   2341e:	0018      	movs	r0, r3
   23420:	46bd      	mov	sp, r7
   23422:	b006      	add	sp, #24
   23424:	bd80      	pop	{r7, pc}
   23426:	46c0      	nop			; (mov r8, r8)
   23428:	00020b51 	.word	0x00020b51

0002342c <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   2342c:	b580      	push	{r7, lr}
   2342e:	b088      	sub	sp, #32
   23430:	af00      	add	r7, sp, #0
   23432:	60f8      	str	r0, [r7, #12]
   23434:	60b9      	str	r1, [r7, #8]
   23436:	1dbb      	adds	r3, r7, #6
   23438:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   2343a:	2314      	movs	r3, #20
   2343c:	18fb      	adds	r3, r7, r3
   2343e:	68fa      	ldr	r2, [r7, #12]
   23440:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   23442:	2314      	movs	r3, #20
   23444:	18fb      	adds	r3, r7, r3
   23446:	68ba      	ldr	r2, [r7, #8]
   23448:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2344a:	2314      	movs	r3, #20
   2344c:	18fb      	adds	r3, r7, r3
   2344e:	1dba      	adds	r2, r7, #6
   23450:	8812      	ldrh	r2, [r2, #0]
   23452:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   23454:	2314      	movs	r3, #20
   23456:	18fb      	adds	r3, r7, r3
   23458:	0019      	movs	r1, r3
   2345a:	2003      	movs	r0, #3
   2345c:	4b03      	ldr	r3, [pc, #12]	; (2346c <nmi_spi_rw+0x40>)
   2345e:	4798      	blx	r3
   23460:	0003      	movs	r3, r0
}
   23462:	0018      	movs	r0, r3
   23464:	46bd      	mov	sp, r7
   23466:	b008      	add	sp, #32
   23468:	bd80      	pop	{r7, pc}
   2346a:	46c0      	nop			; (mov r8, r8)
   2346c:	00020b51 	.word	0x00020b51

00023470 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   23470:	b580      	push	{r7, lr}
   23472:	b082      	sub	sp, #8
   23474:	af00      	add	r7, sp, #0
   23476:	0002      	movs	r2, r0
   23478:	1dfb      	adds	r3, r7, #7
   2347a:	701a      	strb	r2, [r3, #0]
   2347c:	1dbb      	adds	r3, r7, #6
   2347e:	1c0a      	adds	r2, r1, #0
   23480:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   23482:	1dfb      	adds	r3, r7, #7
   23484:	781b      	ldrb	r3, [r3, #0]
   23486:	005a      	lsls	r2, r3, #1
   23488:	1dbb      	adds	r3, r7, #6
   2348a:	781b      	ldrb	r3, [r3, #0]
   2348c:	4053      	eors	r3, r2
   2348e:	4a03      	ldr	r2, [pc, #12]	; (2349c <crc7_byte+0x2c>)
   23490:	5cd3      	ldrb	r3, [r2, r3]
}
   23492:	0018      	movs	r0, r3
   23494:	46bd      	mov	sp, r7
   23496:	b002      	add	sp, #8
   23498:	bd80      	pop	{r7, pc}
   2349a:	46c0      	nop			; (mov r8, r8)
   2349c:	00038d88 	.word	0x00038d88

000234a0 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   234a0:	b590      	push	{r4, r7, lr}
   234a2:	b085      	sub	sp, #20
   234a4:	af00      	add	r7, sp, #0
   234a6:	60b9      	str	r1, [r7, #8]
   234a8:	607a      	str	r2, [r7, #4]
   234aa:	230f      	movs	r3, #15
   234ac:	18fb      	adds	r3, r7, r3
   234ae:	1c02      	adds	r2, r0, #0
   234b0:	701a      	strb	r2, [r3, #0]
	while (len--)
   234b2:	e00e      	b.n	234d2 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   234b4:	68bb      	ldr	r3, [r7, #8]
   234b6:	1c5a      	adds	r2, r3, #1
   234b8:	60ba      	str	r2, [r7, #8]
   234ba:	781a      	ldrb	r2, [r3, #0]
   234bc:	230f      	movs	r3, #15
   234be:	18fc      	adds	r4, r7, r3
   234c0:	230f      	movs	r3, #15
   234c2:	18fb      	adds	r3, r7, r3
   234c4:	781b      	ldrb	r3, [r3, #0]
   234c6:	0011      	movs	r1, r2
   234c8:	0018      	movs	r0, r3
   234ca:	4b08      	ldr	r3, [pc, #32]	; (234ec <crc7+0x4c>)
   234cc:	4798      	blx	r3
   234ce:	0003      	movs	r3, r0
   234d0:	7023      	strb	r3, [r4, #0]
	while (len--)
   234d2:	687b      	ldr	r3, [r7, #4]
   234d4:	1e5a      	subs	r2, r3, #1
   234d6:	607a      	str	r2, [r7, #4]
   234d8:	2b00      	cmp	r3, #0
   234da:	d1eb      	bne.n	234b4 <crc7+0x14>
	return crc;
   234dc:	230f      	movs	r3, #15
   234de:	18fb      	adds	r3, r7, r3
   234e0:	781b      	ldrb	r3, [r3, #0]
}
   234e2:	0018      	movs	r0, r3
   234e4:	46bd      	mov	sp, r7
   234e6:	b005      	add	sp, #20
   234e8:	bd90      	pop	{r4, r7, pc}
   234ea:	46c0      	nop			; (mov r8, r8)
   234ec:	00023471 	.word	0x00023471

000234f0 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   234f0:	b590      	push	{r4, r7, lr}
   234f2:	b089      	sub	sp, #36	; 0x24
   234f4:	af00      	add	r7, sp, #0
   234f6:	60b9      	str	r1, [r7, #8]
   234f8:	607a      	str	r2, [r7, #4]
   234fa:	603b      	str	r3, [r7, #0]
   234fc:	230f      	movs	r3, #15
   234fe:	18fb      	adds	r3, r7, r3
   23500:	1c02      	adds	r2, r0, #0
   23502:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   23504:	231f      	movs	r3, #31
   23506:	18fb      	adds	r3, r7, r3
   23508:	2205      	movs	r2, #5
   2350a:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2350c:	231e      	movs	r3, #30
   2350e:	18fb      	adds	r3, r7, r3
   23510:	2201      	movs	r2, #1
   23512:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   23514:	2314      	movs	r3, #20
   23516:	18fb      	adds	r3, r7, r3
   23518:	220f      	movs	r2, #15
   2351a:	18ba      	adds	r2, r7, r2
   2351c:	7812      	ldrb	r2, [r2, #0]
   2351e:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23520:	230f      	movs	r3, #15
   23522:	18fb      	adds	r3, r7, r3
   23524:	781b      	ldrb	r3, [r3, #0]
   23526:	3bc1      	subs	r3, #193	; 0xc1
   23528:	2b0e      	cmp	r3, #14
   2352a:	d900      	bls.n	2352e <spi_cmd+0x3e>
   2352c:	e11b      	b.n	23766 <spi_cmd+0x276>
   2352e:	009a      	lsls	r2, r3, #2
   23530:	4bb6      	ldr	r3, [pc, #728]	; (2380c <spi_cmd+0x31c>)
   23532:	18d3      	adds	r3, r2, r3
   23534:	681b      	ldr	r3, [r3, #0]
   23536:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   23538:	68bb      	ldr	r3, [r7, #8]
   2353a:	0c1b      	lsrs	r3, r3, #16
   2353c:	b2da      	uxtb	r2, r3
   2353e:	2314      	movs	r3, #20
   23540:	18fb      	adds	r3, r7, r3
   23542:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23544:	68bb      	ldr	r3, [r7, #8]
   23546:	0a1b      	lsrs	r3, r3, #8
   23548:	b2da      	uxtb	r2, r3
   2354a:	2314      	movs	r3, #20
   2354c:	18fb      	adds	r3, r7, r3
   2354e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23550:	68bb      	ldr	r3, [r7, #8]
   23552:	b2da      	uxtb	r2, r3
   23554:	2314      	movs	r3, #20
   23556:	18fb      	adds	r3, r7, r3
   23558:	70da      	strb	r2, [r3, #3]
		len = 5;
   2355a:	231f      	movs	r3, #31
   2355c:	18fb      	adds	r3, r7, r3
   2355e:	2205      	movs	r2, #5
   23560:	701a      	strb	r2, [r3, #0]
		break;
   23562:	e105      	b.n	23770 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   23564:	68bb      	ldr	r3, [r7, #8]
   23566:	0a1b      	lsrs	r3, r3, #8
   23568:	b2da      	uxtb	r2, r3
   2356a:	2314      	movs	r3, #20
   2356c:	18fb      	adds	r3, r7, r3
   2356e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   23570:	2330      	movs	r3, #48	; 0x30
   23572:	18fb      	adds	r3, r7, r3
   23574:	781b      	ldrb	r3, [r3, #0]
   23576:	2b00      	cmp	r3, #0
   23578:	d009      	beq.n	2358e <spi_cmd+0x9e>
   2357a:	2314      	movs	r3, #20
   2357c:	18fb      	adds	r3, r7, r3
   2357e:	785b      	ldrb	r3, [r3, #1]
   23580:	2280      	movs	r2, #128	; 0x80
   23582:	4252      	negs	r2, r2
   23584:	4313      	orrs	r3, r2
   23586:	b2da      	uxtb	r2, r3
   23588:	2314      	movs	r3, #20
   2358a:	18fb      	adds	r3, r7, r3
   2358c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   2358e:	68bb      	ldr	r3, [r7, #8]
   23590:	b2da      	uxtb	r2, r3
   23592:	2314      	movs	r3, #20
   23594:	18fb      	adds	r3, r7, r3
   23596:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   23598:	2314      	movs	r3, #20
   2359a:	18fb      	adds	r3, r7, r3
   2359c:	2200      	movs	r2, #0
   2359e:	70da      	strb	r2, [r3, #3]
		len = 5;
   235a0:	231f      	movs	r3, #31
   235a2:	18fb      	adds	r3, r7, r3
   235a4:	2205      	movs	r2, #5
   235a6:	701a      	strb	r2, [r3, #0]
		break;
   235a8:	e0e2      	b.n	23770 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   235aa:	2314      	movs	r3, #20
   235ac:	18fb      	adds	r3, r7, r3
   235ae:	2200      	movs	r2, #0
   235b0:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   235b2:	2314      	movs	r3, #20
   235b4:	18fb      	adds	r3, r7, r3
   235b6:	2200      	movs	r2, #0
   235b8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   235ba:	2314      	movs	r3, #20
   235bc:	18fb      	adds	r3, r7, r3
   235be:	2200      	movs	r2, #0
   235c0:	70da      	strb	r2, [r3, #3]
		len = 5;
   235c2:	231f      	movs	r3, #31
   235c4:	18fb      	adds	r3, r7, r3
   235c6:	2205      	movs	r2, #5
   235c8:	701a      	strb	r2, [r3, #0]
		break;
   235ca:	e0d1      	b.n	23770 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   235cc:	2314      	movs	r3, #20
   235ce:	18fb      	adds	r3, r7, r3
   235d0:	2200      	movs	r2, #0
   235d2:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   235d4:	2314      	movs	r3, #20
   235d6:	18fb      	adds	r3, r7, r3
   235d8:	2200      	movs	r2, #0
   235da:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   235dc:	2314      	movs	r3, #20
   235de:	18fb      	adds	r3, r7, r3
   235e0:	2200      	movs	r2, #0
   235e2:	70da      	strb	r2, [r3, #3]
		len = 5;
   235e4:	231f      	movs	r3, #31
   235e6:	18fb      	adds	r3, r7, r3
   235e8:	2205      	movs	r2, #5
   235ea:	701a      	strb	r2, [r3, #0]
		break;
   235ec:	e0c0      	b.n	23770 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   235ee:	2314      	movs	r3, #20
   235f0:	18fb      	adds	r3, r7, r3
   235f2:	22ff      	movs	r2, #255	; 0xff
   235f4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   235f6:	2314      	movs	r3, #20
   235f8:	18fb      	adds	r3, r7, r3
   235fa:	22ff      	movs	r2, #255	; 0xff
   235fc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   235fe:	2314      	movs	r3, #20
   23600:	18fb      	adds	r3, r7, r3
   23602:	22ff      	movs	r2, #255	; 0xff
   23604:	70da      	strb	r2, [r3, #3]
		len = 5;
   23606:	231f      	movs	r3, #31
   23608:	18fb      	adds	r3, r7, r3
   2360a:	2205      	movs	r2, #5
   2360c:	701a      	strb	r2, [r3, #0]
		break;
   2360e:	e0af      	b.n	23770 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   23610:	68bb      	ldr	r3, [r7, #8]
   23612:	0c1b      	lsrs	r3, r3, #16
   23614:	b2da      	uxtb	r2, r3
   23616:	2314      	movs	r3, #20
   23618:	18fb      	adds	r3, r7, r3
   2361a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2361c:	68bb      	ldr	r3, [r7, #8]
   2361e:	0a1b      	lsrs	r3, r3, #8
   23620:	b2da      	uxtb	r2, r3
   23622:	2314      	movs	r3, #20
   23624:	18fb      	adds	r3, r7, r3
   23626:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23628:	68bb      	ldr	r3, [r7, #8]
   2362a:	b2da      	uxtb	r2, r3
   2362c:	2314      	movs	r3, #20
   2362e:	18fb      	adds	r3, r7, r3
   23630:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   23632:	683b      	ldr	r3, [r7, #0]
   23634:	0a1b      	lsrs	r3, r3, #8
   23636:	b2da      	uxtb	r2, r3
   23638:	2314      	movs	r3, #20
   2363a:	18fb      	adds	r3, r7, r3
   2363c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   2363e:	683b      	ldr	r3, [r7, #0]
   23640:	b2da      	uxtb	r2, r3
   23642:	2314      	movs	r3, #20
   23644:	18fb      	adds	r3, r7, r3
   23646:	715a      	strb	r2, [r3, #5]
		len = 7;
   23648:	231f      	movs	r3, #31
   2364a:	18fb      	adds	r3, r7, r3
   2364c:	2207      	movs	r2, #7
   2364e:	701a      	strb	r2, [r3, #0]
		break;
   23650:	e08e      	b.n	23770 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   23652:	68bb      	ldr	r3, [r7, #8]
   23654:	0c1b      	lsrs	r3, r3, #16
   23656:	b2da      	uxtb	r2, r3
   23658:	2314      	movs	r3, #20
   2365a:	18fb      	adds	r3, r7, r3
   2365c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2365e:	68bb      	ldr	r3, [r7, #8]
   23660:	0a1b      	lsrs	r3, r3, #8
   23662:	b2da      	uxtb	r2, r3
   23664:	2314      	movs	r3, #20
   23666:	18fb      	adds	r3, r7, r3
   23668:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2366a:	68bb      	ldr	r3, [r7, #8]
   2366c:	b2da      	uxtb	r2, r3
   2366e:	2314      	movs	r3, #20
   23670:	18fb      	adds	r3, r7, r3
   23672:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   23674:	683b      	ldr	r3, [r7, #0]
   23676:	0c1b      	lsrs	r3, r3, #16
   23678:	b2da      	uxtb	r2, r3
   2367a:	2314      	movs	r3, #20
   2367c:	18fb      	adds	r3, r7, r3
   2367e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   23680:	683b      	ldr	r3, [r7, #0]
   23682:	0a1b      	lsrs	r3, r3, #8
   23684:	b2da      	uxtb	r2, r3
   23686:	2314      	movs	r3, #20
   23688:	18fb      	adds	r3, r7, r3
   2368a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   2368c:	683b      	ldr	r3, [r7, #0]
   2368e:	b2da      	uxtb	r2, r3
   23690:	2314      	movs	r3, #20
   23692:	18fb      	adds	r3, r7, r3
   23694:	719a      	strb	r2, [r3, #6]
		len = 8;
   23696:	231f      	movs	r3, #31
   23698:	18fb      	adds	r3, r7, r3
   2369a:	2208      	movs	r2, #8
   2369c:	701a      	strb	r2, [r3, #0]
		break;
   2369e:	e067      	b.n	23770 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   236a0:	68bb      	ldr	r3, [r7, #8]
   236a2:	0a1b      	lsrs	r3, r3, #8
   236a4:	b2da      	uxtb	r2, r3
   236a6:	2314      	movs	r3, #20
   236a8:	18fb      	adds	r3, r7, r3
   236aa:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   236ac:	2330      	movs	r3, #48	; 0x30
   236ae:	18fb      	adds	r3, r7, r3
   236b0:	781b      	ldrb	r3, [r3, #0]
   236b2:	2b00      	cmp	r3, #0
   236b4:	d009      	beq.n	236ca <spi_cmd+0x1da>
   236b6:	2314      	movs	r3, #20
   236b8:	18fb      	adds	r3, r7, r3
   236ba:	785b      	ldrb	r3, [r3, #1]
   236bc:	2280      	movs	r2, #128	; 0x80
   236be:	4252      	negs	r2, r2
   236c0:	4313      	orrs	r3, r2
   236c2:	b2da      	uxtb	r2, r3
   236c4:	2314      	movs	r3, #20
   236c6:	18fb      	adds	r3, r7, r3
   236c8:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   236ca:	68bb      	ldr	r3, [r7, #8]
   236cc:	b2da      	uxtb	r2, r3
   236ce:	2314      	movs	r3, #20
   236d0:	18fb      	adds	r3, r7, r3
   236d2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   236d4:	687b      	ldr	r3, [r7, #4]
   236d6:	0e1b      	lsrs	r3, r3, #24
   236d8:	b2da      	uxtb	r2, r3
   236da:	2314      	movs	r3, #20
   236dc:	18fb      	adds	r3, r7, r3
   236de:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   236e0:	687b      	ldr	r3, [r7, #4]
   236e2:	0c1b      	lsrs	r3, r3, #16
   236e4:	b2da      	uxtb	r2, r3
   236e6:	2314      	movs	r3, #20
   236e8:	18fb      	adds	r3, r7, r3
   236ea:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   236ec:	687b      	ldr	r3, [r7, #4]
   236ee:	0a1b      	lsrs	r3, r3, #8
   236f0:	b2da      	uxtb	r2, r3
   236f2:	2314      	movs	r3, #20
   236f4:	18fb      	adds	r3, r7, r3
   236f6:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   236f8:	687b      	ldr	r3, [r7, #4]
   236fa:	b2da      	uxtb	r2, r3
   236fc:	2314      	movs	r3, #20
   236fe:	18fb      	adds	r3, r7, r3
   23700:	719a      	strb	r2, [r3, #6]
		len = 8;
   23702:	231f      	movs	r3, #31
   23704:	18fb      	adds	r3, r7, r3
   23706:	2208      	movs	r2, #8
   23708:	701a      	strb	r2, [r3, #0]
		break;
   2370a:	e031      	b.n	23770 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   2370c:	68bb      	ldr	r3, [r7, #8]
   2370e:	0c1b      	lsrs	r3, r3, #16
   23710:	b2da      	uxtb	r2, r3
   23712:	2314      	movs	r3, #20
   23714:	18fb      	adds	r3, r7, r3
   23716:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23718:	68bb      	ldr	r3, [r7, #8]
   2371a:	0a1b      	lsrs	r3, r3, #8
   2371c:	b2da      	uxtb	r2, r3
   2371e:	2314      	movs	r3, #20
   23720:	18fb      	adds	r3, r7, r3
   23722:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   23724:	68bb      	ldr	r3, [r7, #8]
   23726:	b2da      	uxtb	r2, r3
   23728:	2314      	movs	r3, #20
   2372a:	18fb      	adds	r3, r7, r3
   2372c:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   2372e:	687b      	ldr	r3, [r7, #4]
   23730:	0e1b      	lsrs	r3, r3, #24
   23732:	b2da      	uxtb	r2, r3
   23734:	2314      	movs	r3, #20
   23736:	18fb      	adds	r3, r7, r3
   23738:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   2373a:	687b      	ldr	r3, [r7, #4]
   2373c:	0c1b      	lsrs	r3, r3, #16
   2373e:	b2da      	uxtb	r2, r3
   23740:	2314      	movs	r3, #20
   23742:	18fb      	adds	r3, r7, r3
   23744:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   23746:	687b      	ldr	r3, [r7, #4]
   23748:	0a1b      	lsrs	r3, r3, #8
   2374a:	b2da      	uxtb	r2, r3
   2374c:	2314      	movs	r3, #20
   2374e:	18fb      	adds	r3, r7, r3
   23750:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   23752:	687b      	ldr	r3, [r7, #4]
   23754:	b2da      	uxtb	r2, r3
   23756:	2314      	movs	r3, #20
   23758:	18fb      	adds	r3, r7, r3
   2375a:	71da      	strb	r2, [r3, #7]
		len = 9;
   2375c:	231f      	movs	r3, #31
   2375e:	18fb      	adds	r3, r7, r3
   23760:	2209      	movs	r2, #9
   23762:	701a      	strb	r2, [r3, #0]
		break;
   23764:	e004      	b.n	23770 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   23766:	231e      	movs	r3, #30
   23768:	18fb      	adds	r3, r7, r3
   2376a:	2200      	movs	r2, #0
   2376c:	701a      	strb	r2, [r3, #0]
		break;
   2376e:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   23770:	231e      	movs	r3, #30
   23772:	18fb      	adds	r3, r7, r3
   23774:	781b      	ldrb	r3, [r3, #0]
   23776:	b25b      	sxtb	r3, r3
   23778:	2b00      	cmp	r3, #0
   2377a:	d03f      	beq.n	237fc <spi_cmd+0x30c>
		if (!gu8Crc_off)
   2377c:	4b24      	ldr	r3, [pc, #144]	; (23810 <spi_cmd+0x320>)
   2377e:	781b      	ldrb	r3, [r3, #0]
   23780:	2b00      	cmp	r3, #0
   23782:	d115      	bne.n	237b0 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   23784:	231f      	movs	r3, #31
   23786:	18fb      	adds	r3, r7, r3
   23788:	781b      	ldrb	r3, [r3, #0]
   2378a:	1e5c      	subs	r4, r3, #1
   2378c:	231f      	movs	r3, #31
   2378e:	18fb      	adds	r3, r7, r3
   23790:	781b      	ldrb	r3, [r3, #0]
   23792:	3b01      	subs	r3, #1
   23794:	001a      	movs	r2, r3
   23796:	2314      	movs	r3, #20
   23798:	18fb      	adds	r3, r7, r3
   2379a:	0019      	movs	r1, r3
   2379c:	207f      	movs	r0, #127	; 0x7f
   2379e:	4b1d      	ldr	r3, [pc, #116]	; (23814 <spi_cmd+0x324>)
   237a0:	4798      	blx	r3
   237a2:	0003      	movs	r3, r0
   237a4:	18db      	adds	r3, r3, r3
   237a6:	b2da      	uxtb	r2, r3
   237a8:	2314      	movs	r3, #20
   237aa:	18fb      	adds	r3, r7, r3
   237ac:	551a      	strb	r2, [r3, r4]
   237ae:	e006      	b.n	237be <spi_cmd+0x2ce>
		else
			len-=1;
   237b0:	231f      	movs	r3, #31
   237b2:	18fb      	adds	r3, r7, r3
   237b4:	221f      	movs	r2, #31
   237b6:	18ba      	adds	r2, r7, r2
   237b8:	7812      	ldrb	r2, [r2, #0]
   237ba:	3a01      	subs	r2, #1
   237bc:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   237be:	231f      	movs	r3, #31
   237c0:	18fb      	adds	r3, r7, r3
   237c2:	781b      	ldrb	r3, [r3, #0]
   237c4:	b29a      	uxth	r2, r3
   237c6:	2314      	movs	r3, #20
   237c8:	18fb      	adds	r3, r7, r3
   237ca:	0011      	movs	r1, r2
   237cc:	0018      	movs	r0, r3
   237ce:	4b12      	ldr	r3, [pc, #72]	; (23818 <spi_cmd+0x328>)
   237d0:	4798      	blx	r3
   237d2:	1e03      	subs	r3, r0, #0
   237d4:	d012      	beq.n	237fc <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   237d6:	2390      	movs	r3, #144	; 0x90
   237d8:	005a      	lsls	r2, r3, #1
   237da:	4910      	ldr	r1, [pc, #64]	; (2381c <spi_cmd+0x32c>)
   237dc:	4b10      	ldr	r3, [pc, #64]	; (23820 <spi_cmd+0x330>)
   237de:	0018      	movs	r0, r3
   237e0:	4b10      	ldr	r3, [pc, #64]	; (23824 <spi_cmd+0x334>)
   237e2:	4798      	blx	r3
   237e4:	4b10      	ldr	r3, [pc, #64]	; (23828 <spi_cmd+0x338>)
   237e6:	0018      	movs	r0, r3
   237e8:	4b0e      	ldr	r3, [pc, #56]	; (23824 <spi_cmd+0x334>)
   237ea:	4798      	blx	r3
   237ec:	4b0f      	ldr	r3, [pc, #60]	; (2382c <spi_cmd+0x33c>)
   237ee:	0018      	movs	r0, r3
   237f0:	4b0c      	ldr	r3, [pc, #48]	; (23824 <spi_cmd+0x334>)
   237f2:	4798      	blx	r3
			result = N_FAIL;
   237f4:	231e      	movs	r3, #30
   237f6:	18fb      	adds	r3, r7, r3
   237f8:	2200      	movs	r2, #0
   237fa:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   237fc:	231e      	movs	r3, #30
   237fe:	18fb      	adds	r3, r7, r3
   23800:	781b      	ldrb	r3, [r3, #0]
   23802:	b25b      	sxtb	r3, r3
}
   23804:	0018      	movs	r0, r3
   23806:	46bd      	mov	sp, r7
   23808:	b009      	add	sp, #36	; 0x24
   2380a:	bd90      	pop	{r4, r7, pc}
   2380c:	00039400 	.word	0x00039400
   23810:	20004130 	.word	0x20004130
   23814:	000234a1 	.word	0x000234a1
   23818:	000233e9 	.word	0x000233e9
   2381c:	00039478 	.word	0x00039478
   23820:	00038e88 	.word	0x00038e88
   23824:	0001df59 	.word	0x0001df59
   23828:	00038e9c 	.word	0x00038e9c
   2382c:	00038ec8 	.word	0x00038ec8

00023830 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   23830:	b590      	push	{r4, r7, lr}
   23832:	b085      	sub	sp, #20
   23834:	af00      	add	r7, sp, #0
   23836:	0002      	movs	r2, r0
   23838:	1dfb      	adds	r3, r7, #7
   2383a:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   2383c:	230e      	movs	r3, #14
   2383e:	18fb      	adds	r3, r7, r3
   23840:	2201      	movs	r2, #1
   23842:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   23844:	4b32      	ldr	r3, [pc, #200]	; (23910 <spi_data_rsp+0xe0>)
   23846:	781b      	ldrb	r3, [r3, #0]
   23848:	2b00      	cmp	r3, #0
   2384a:	d104      	bne.n	23856 <spi_data_rsp+0x26>
		len = 2;
   2384c:	230f      	movs	r3, #15
   2384e:	18fb      	adds	r3, r7, r3
   23850:	2202      	movs	r2, #2
   23852:	701a      	strb	r2, [r3, #0]
   23854:	e003      	b.n	2385e <spi_data_rsp+0x2e>
	else
		len = 3;
   23856:	230f      	movs	r3, #15
   23858:	18fb      	adds	r3, r7, r3
   2385a:	2203      	movs	r2, #3
   2385c:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   2385e:	230f      	movs	r3, #15
   23860:	18fb      	adds	r3, r7, r3
   23862:	781b      	ldrb	r3, [r3, #0]
   23864:	b29a      	uxth	r2, r3
   23866:	2308      	movs	r3, #8
   23868:	18fb      	adds	r3, r7, r3
   2386a:	0011      	movs	r1, r2
   2386c:	0018      	movs	r0, r3
   2386e:	4b29      	ldr	r3, [pc, #164]	; (23914 <spi_data_rsp+0xe4>)
   23870:	4798      	blx	r3
   23872:	1e03      	subs	r3, r0, #0
   23874:	d013      	beq.n	2389e <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   23876:	239a      	movs	r3, #154	; 0x9a
   23878:	005a      	lsls	r2, r3, #1
   2387a:	4927      	ldr	r1, [pc, #156]	; (23918 <spi_data_rsp+0xe8>)
   2387c:	4b27      	ldr	r3, [pc, #156]	; (2391c <spi_data_rsp+0xec>)
   2387e:	0018      	movs	r0, r3
   23880:	4b27      	ldr	r3, [pc, #156]	; (23920 <spi_data_rsp+0xf0>)
   23882:	4798      	blx	r3
   23884:	4b27      	ldr	r3, [pc, #156]	; (23924 <spi_data_rsp+0xf4>)
   23886:	0018      	movs	r0, r3
   23888:	4b25      	ldr	r3, [pc, #148]	; (23920 <spi_data_rsp+0xf0>)
   2388a:	4798      	blx	r3
   2388c:	4b26      	ldr	r3, [pc, #152]	; (23928 <spi_data_rsp+0xf8>)
   2388e:	0018      	movs	r0, r3
   23890:	4b23      	ldr	r3, [pc, #140]	; (23920 <spi_data_rsp+0xf0>)
   23892:	4798      	blx	r3
		result = N_FAIL;
   23894:	230e      	movs	r3, #14
   23896:	18fb      	adds	r3, r7, r3
   23898:	2200      	movs	r2, #0
   2389a:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   2389c:	e030      	b.n	23900 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   2389e:	230f      	movs	r3, #15
   238a0:	18fb      	adds	r3, r7, r3
   238a2:	781b      	ldrb	r3, [r3, #0]
   238a4:	3b01      	subs	r3, #1
   238a6:	2208      	movs	r2, #8
   238a8:	18ba      	adds	r2, r7, r2
   238aa:	5cd3      	ldrb	r3, [r2, r3]
   238ac:	2b00      	cmp	r3, #0
   238ae:	d108      	bne.n	238c2 <spi_data_rsp+0x92>
   238b0:	230f      	movs	r3, #15
   238b2:	18fb      	adds	r3, r7, r3
   238b4:	781b      	ldrb	r3, [r3, #0]
   238b6:	3b02      	subs	r3, #2
   238b8:	2208      	movs	r2, #8
   238ba:	18ba      	adds	r2, r7, r2
   238bc:	5cd3      	ldrb	r3, [r2, r3]
   238be:	2bc3      	cmp	r3, #195	; 0xc3
   238c0:	d01e      	beq.n	23900 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   238c2:	233c      	movs	r3, #60	; 0x3c
   238c4:	33ff      	adds	r3, #255	; 0xff
   238c6:	001a      	movs	r2, r3
   238c8:	4913      	ldr	r1, [pc, #76]	; (23918 <spi_data_rsp+0xe8>)
   238ca:	4b14      	ldr	r3, [pc, #80]	; (2391c <spi_data_rsp+0xec>)
   238cc:	0018      	movs	r0, r3
   238ce:	4b14      	ldr	r3, [pc, #80]	; (23920 <spi_data_rsp+0xf0>)
   238d0:	4798      	blx	r3
   238d2:	2308      	movs	r3, #8
   238d4:	18fb      	adds	r3, r7, r3
   238d6:	781b      	ldrb	r3, [r3, #0]
   238d8:	0019      	movs	r1, r3
   238da:	2308      	movs	r3, #8
   238dc:	18fb      	adds	r3, r7, r3
   238de:	785b      	ldrb	r3, [r3, #1]
   238e0:	001a      	movs	r2, r3
   238e2:	2308      	movs	r3, #8
   238e4:	18fb      	adds	r3, r7, r3
   238e6:	789b      	ldrb	r3, [r3, #2]
   238e8:	4810      	ldr	r0, [pc, #64]	; (2392c <spi_data_rsp+0xfc>)
   238ea:	4c0d      	ldr	r4, [pc, #52]	; (23920 <spi_data_rsp+0xf0>)
   238ec:	47a0      	blx	r4
   238ee:	4b0e      	ldr	r3, [pc, #56]	; (23928 <spi_data_rsp+0xf8>)
   238f0:	0018      	movs	r0, r3
   238f2:	4b0b      	ldr	r3, [pc, #44]	; (23920 <spi_data_rsp+0xf0>)
   238f4:	4798      	blx	r3
		result = N_FAIL;
   238f6:	230e      	movs	r3, #14
   238f8:	18fb      	adds	r3, r7, r3
   238fa:	2200      	movs	r2, #0
   238fc:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   238fe:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   23900:	230e      	movs	r3, #14
   23902:	18fb      	adds	r3, r7, r3
   23904:	781b      	ldrb	r3, [r3, #0]
   23906:	b25b      	sxtb	r3, r3
}
   23908:	0018      	movs	r0, r3
   2390a:	46bd      	mov	sp, r7
   2390c:	b005      	add	sp, #20
   2390e:	bd90      	pop	{r4, r7, pc}
   23910:	20004130 	.word	0x20004130
   23914:	000233a5 	.word	0x000233a5
   23918:	00039480 	.word	0x00039480
   2391c:	00038e88 	.word	0x00038e88
   23920:	0001df59 	.word	0x0001df59
   23924:	00038ecc 	.word	0x00038ecc
   23928:	00038ec8 	.word	0x00038ec8
   2392c:	00038eec 	.word	0x00038eec

00023930 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   23930:	b580      	push	{r7, lr}
   23932:	b084      	sub	sp, #16
   23934:	af00      	add	r7, sp, #0
   23936:	0002      	movs	r2, r0
   23938:	1dfb      	adds	r3, r7, #7
   2393a:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   2393c:	230f      	movs	r3, #15
   2393e:	18fb      	adds	r3, r7, r3
   23940:	2201      	movs	r2, #1
   23942:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23944:	1dfb      	adds	r3, r7, #7
   23946:	781b      	ldrb	r3, [r3, #0]
   23948:	2bcf      	cmp	r3, #207	; 0xcf
   2394a:	d007      	beq.n	2395c <spi_cmd_rsp+0x2c>
   2394c:	1dfb      	adds	r3, r7, #7
   2394e:	781b      	ldrb	r3, [r3, #0]
   23950:	2bc5      	cmp	r3, #197	; 0xc5
   23952:	d003      	beq.n	2395c <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   23954:	1dfb      	adds	r3, r7, #7
   23956:	781b      	ldrb	r3, [r3, #0]
   23958:	2bc6      	cmp	r3, #198	; 0xc6
   2395a:	d10c      	bne.n	23976 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2395c:	230d      	movs	r3, #13
   2395e:	18fb      	adds	r3, r7, r3
   23960:	2101      	movs	r1, #1
   23962:	0018      	movs	r0, r3
   23964:	4b3b      	ldr	r3, [pc, #236]	; (23a54 <spi_cmd_rsp+0x124>)
   23966:	4798      	blx	r3
   23968:	1e03      	subs	r3, r0, #0
   2396a:	d004      	beq.n	23976 <spi_cmd_rsp+0x46>
			result = N_FAIL;
   2396c:	230f      	movs	r3, #15
   2396e:	18fb      	adds	r3, r7, r3
   23970:	2200      	movs	r2, #0
   23972:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23974:	e065      	b.n	23a42 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   23976:	230e      	movs	r3, #14
   23978:	18fb      	adds	r3, r7, r3
   2397a:	220a      	movs	r2, #10
   2397c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2397e:	230d      	movs	r3, #13
   23980:	18fb      	adds	r3, r7, r3
   23982:	2101      	movs	r1, #1
   23984:	0018      	movs	r0, r3
   23986:	4b33      	ldr	r3, [pc, #204]	; (23a54 <spi_cmd_rsp+0x124>)
   23988:	4798      	blx	r3
   2398a:	1e03      	subs	r3, r0, #0
   2398c:	d014      	beq.n	239b8 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2398e:	235c      	movs	r3, #92	; 0x5c
   23990:	33ff      	adds	r3, #255	; 0xff
   23992:	001a      	movs	r2, r3
   23994:	4930      	ldr	r1, [pc, #192]	; (23a58 <spi_cmd_rsp+0x128>)
   23996:	4b31      	ldr	r3, [pc, #196]	; (23a5c <spi_cmd_rsp+0x12c>)
   23998:	0018      	movs	r0, r3
   2399a:	4b31      	ldr	r3, [pc, #196]	; (23a60 <spi_cmd_rsp+0x130>)
   2399c:	4798      	blx	r3
   2399e:	4b31      	ldr	r3, [pc, #196]	; (23a64 <spi_cmd_rsp+0x134>)
   239a0:	0018      	movs	r0, r3
   239a2:	4b2f      	ldr	r3, [pc, #188]	; (23a60 <spi_cmd_rsp+0x130>)
   239a4:	4798      	blx	r3
   239a6:	4b30      	ldr	r3, [pc, #192]	; (23a68 <spi_cmd_rsp+0x138>)
   239a8:	0018      	movs	r0, r3
   239aa:	4b2d      	ldr	r3, [pc, #180]	; (23a60 <spi_cmd_rsp+0x130>)
   239ac:	4798      	blx	r3
			result = N_FAIL;
   239ae:	230f      	movs	r3, #15
   239b0:	18fb      	adds	r3, r7, r3
   239b2:	2200      	movs	r2, #0
   239b4:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   239b6:	e044      	b.n	23a42 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   239b8:	230d      	movs	r3, #13
   239ba:	18fb      	adds	r3, r7, r3
   239bc:	781b      	ldrb	r3, [r3, #0]
   239be:	1dfa      	adds	r2, r7, #7
   239c0:	7812      	ldrb	r2, [r2, #0]
   239c2:	429a      	cmp	r2, r3
   239c4:	d00b      	beq.n	239de <spi_cmd_rsp+0xae>
   239c6:	230e      	movs	r3, #14
   239c8:	18fb      	adds	r3, r7, r3
   239ca:	781b      	ldrb	r3, [r3, #0]
   239cc:	b25b      	sxtb	r3, r3
   239ce:	b2da      	uxtb	r2, r3
   239d0:	3a01      	subs	r2, #1
   239d2:	b2d1      	uxtb	r1, r2
   239d4:	220e      	movs	r2, #14
   239d6:	18ba      	adds	r2, r7, r2
   239d8:	7011      	strb	r1, [r2, #0]
   239da:	2b00      	cmp	r3, #0
   239dc:	dccf      	bgt.n	2397e <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   239de:	230e      	movs	r3, #14
   239e0:	18fb      	adds	r3, r7, r3
   239e2:	220a      	movs	r2, #10
   239e4:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   239e6:	230d      	movs	r3, #13
   239e8:	18fb      	adds	r3, r7, r3
   239ea:	2101      	movs	r1, #1
   239ec:	0018      	movs	r0, r3
   239ee:	4b19      	ldr	r3, [pc, #100]	; (23a54 <spi_cmd_rsp+0x124>)
   239f0:	4798      	blx	r3
   239f2:	1e03      	subs	r3, r0, #0
   239f4:	d014      	beq.n	23a20 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   239f6:	236a      	movs	r3, #106	; 0x6a
   239f8:	33ff      	adds	r3, #255	; 0xff
   239fa:	001a      	movs	r2, r3
   239fc:	4916      	ldr	r1, [pc, #88]	; (23a58 <spi_cmd_rsp+0x128>)
   239fe:	4b17      	ldr	r3, [pc, #92]	; (23a5c <spi_cmd_rsp+0x12c>)
   23a00:	0018      	movs	r0, r3
   23a02:	4b17      	ldr	r3, [pc, #92]	; (23a60 <spi_cmd_rsp+0x130>)
   23a04:	4798      	blx	r3
   23a06:	4b17      	ldr	r3, [pc, #92]	; (23a64 <spi_cmd_rsp+0x134>)
   23a08:	0018      	movs	r0, r3
   23a0a:	4b15      	ldr	r3, [pc, #84]	; (23a60 <spi_cmd_rsp+0x130>)
   23a0c:	4798      	blx	r3
   23a0e:	4b16      	ldr	r3, [pc, #88]	; (23a68 <spi_cmd_rsp+0x138>)
   23a10:	0018      	movs	r0, r3
   23a12:	4b13      	ldr	r3, [pc, #76]	; (23a60 <spi_cmd_rsp+0x130>)
   23a14:	4798      	blx	r3
			result = N_FAIL;
   23a16:	230f      	movs	r3, #15
   23a18:	18fb      	adds	r3, r7, r3
   23a1a:	2200      	movs	r2, #0
   23a1c:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23a1e:	e010      	b.n	23a42 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   23a20:	230d      	movs	r3, #13
   23a22:	18fb      	adds	r3, r7, r3
   23a24:	781b      	ldrb	r3, [r3, #0]
   23a26:	2b00      	cmp	r3, #0
   23a28:	d00b      	beq.n	23a42 <spi_cmd_rsp+0x112>
   23a2a:	230e      	movs	r3, #14
   23a2c:	18fb      	adds	r3, r7, r3
   23a2e:	781b      	ldrb	r3, [r3, #0]
   23a30:	b25b      	sxtb	r3, r3
   23a32:	b2da      	uxtb	r2, r3
   23a34:	3a01      	subs	r2, #1
   23a36:	b2d1      	uxtb	r1, r2
   23a38:	220e      	movs	r2, #14
   23a3a:	18ba      	adds	r2, r7, r2
   23a3c:	7011      	strb	r1, [r2, #0]
   23a3e:	2b00      	cmp	r3, #0
   23a40:	dcd1      	bgt.n	239e6 <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   23a42:	230f      	movs	r3, #15
   23a44:	18fb      	adds	r3, r7, r3
   23a46:	781b      	ldrb	r3, [r3, #0]
   23a48:	b25b      	sxtb	r3, r3
}
   23a4a:	0018      	movs	r0, r3
   23a4c:	46bd      	mov	sp, r7
   23a4e:	b004      	add	sp, #16
   23a50:	bd80      	pop	{r7, pc}
   23a52:	46c0      	nop			; (mov r8, r8)
   23a54:	000233a5 	.word	0x000233a5
   23a58:	00039490 	.word	0x00039490
   23a5c:	00038e88 	.word	0x00038e88
   23a60:	0001df59 	.word	0x0001df59
   23a64:	00038f1c 	.word	0x00038f1c
   23a68:	00038ec8 	.word	0x00038ec8

00023a6c <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   23a6c:	b590      	push	{r4, r7, lr}
   23a6e:	b09f      	sub	sp, #124	; 0x7c
   23a70:	af00      	add	r7, sp, #0
   23a72:	60b9      	str	r1, [r7, #8]
   23a74:	607a      	str	r2, [r7, #4]
   23a76:	603b      	str	r3, [r7, #0]
   23a78:	230f      	movs	r3, #15
   23a7a:	18fb      	adds	r3, r7, r3
   23a7c:	1c02      	adds	r2, r0, #0
   23a7e:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   23a80:	2300      	movs	r3, #0
   23a82:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   23a84:	2301      	movs	r3, #1
   23a86:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   23a88:	2338      	movs	r3, #56	; 0x38
   23a8a:	18fb      	adds	r3, r7, r3
   23a8c:	220f      	movs	r2, #15
   23a8e:	18ba      	adds	r2, r7, r2
   23a90:	7812      	ldrb	r2, [r2, #0]
   23a92:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23a94:	230f      	movs	r3, #15
   23a96:	18fb      	adds	r3, r7, r3
   23a98:	781b      	ldrb	r3, [r3, #0]
   23a9a:	3bc1      	subs	r3, #193	; 0xc1
   23a9c:	2b0e      	cmp	r3, #14
   23a9e:	d900      	bls.n	23aa2 <spi_cmd_complete+0x36>
   23aa0:	e103      	b.n	23caa <spi_cmd_complete+0x23e>
   23aa2:	009a      	lsls	r2, r3, #2
   23aa4:	4bd1      	ldr	r3, [pc, #836]	; (23dec <spi_cmd_complete+0x380>)
   23aa6:	18d3      	adds	r3, r2, r3
   23aa8:	681b      	ldr	r3, [r3, #0]
   23aaa:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   23aac:	68bb      	ldr	r3, [r7, #8]
   23aae:	0c1b      	lsrs	r3, r3, #16
   23ab0:	b2da      	uxtb	r2, r3
   23ab2:	2338      	movs	r3, #56	; 0x38
   23ab4:	18fb      	adds	r3, r7, r3
   23ab6:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23ab8:	68bb      	ldr	r3, [r7, #8]
   23aba:	0a1b      	lsrs	r3, r3, #8
   23abc:	b2da      	uxtb	r2, r3
   23abe:	2338      	movs	r3, #56	; 0x38
   23ac0:	18fb      	adds	r3, r7, r3
   23ac2:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23ac4:	68bb      	ldr	r3, [r7, #8]
   23ac6:	b2da      	uxtb	r2, r3
   23ac8:	2338      	movs	r3, #56	; 0x38
   23aca:	18fb      	adds	r3, r7, r3
   23acc:	70da      	strb	r2, [r3, #3]
		len = 5;
   23ace:	2305      	movs	r3, #5
   23ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   23ad2:	e0ed      	b.n	23cb0 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   23ad4:	68bb      	ldr	r3, [r7, #8]
   23ad6:	0a1b      	lsrs	r3, r3, #8
   23ad8:	b2da      	uxtb	r2, r3
   23ada:	2338      	movs	r3, #56	; 0x38
   23adc:	18fb      	adds	r3, r7, r3
   23ade:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23ae0:	2388      	movs	r3, #136	; 0x88
   23ae2:	18fb      	adds	r3, r7, r3
   23ae4:	781b      	ldrb	r3, [r3, #0]
   23ae6:	2b01      	cmp	r3, #1
   23ae8:	d109      	bne.n	23afe <spi_cmd_complete+0x92>
   23aea:	2338      	movs	r3, #56	; 0x38
   23aec:	18fb      	adds	r3, r7, r3
   23aee:	785b      	ldrb	r3, [r3, #1]
   23af0:	2280      	movs	r2, #128	; 0x80
   23af2:	4252      	negs	r2, r2
   23af4:	4313      	orrs	r3, r2
   23af6:	b2da      	uxtb	r2, r3
   23af8:	2338      	movs	r3, #56	; 0x38
   23afa:	18fb      	adds	r3, r7, r3
   23afc:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   23afe:	68bb      	ldr	r3, [r7, #8]
   23b00:	b2da      	uxtb	r2, r3
   23b02:	2338      	movs	r3, #56	; 0x38
   23b04:	18fb      	adds	r3, r7, r3
   23b06:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23b08:	2338      	movs	r3, #56	; 0x38
   23b0a:	18fb      	adds	r3, r7, r3
   23b0c:	2200      	movs	r2, #0
   23b0e:	70da      	strb	r2, [r3, #3]
		len = 5;
   23b10:	2305      	movs	r3, #5
   23b12:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23b14:	e0cc      	b.n	23cb0 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   23b16:	2338      	movs	r3, #56	; 0x38
   23b18:	18fb      	adds	r3, r7, r3
   23b1a:	2200      	movs	r2, #0
   23b1c:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   23b1e:	2338      	movs	r3, #56	; 0x38
   23b20:	18fb      	adds	r3, r7, r3
   23b22:	2200      	movs	r2, #0
   23b24:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23b26:	2338      	movs	r3, #56	; 0x38
   23b28:	18fb      	adds	r3, r7, r3
   23b2a:	2200      	movs	r2, #0
   23b2c:	70da      	strb	r2, [r3, #3]
		len = 5;
   23b2e:	2305      	movs	r3, #5
   23b30:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23b32:	e0bd      	b.n	23cb0 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   23b34:	2338      	movs	r3, #56	; 0x38
   23b36:	18fb      	adds	r3, r7, r3
   23b38:	2200      	movs	r2, #0
   23b3a:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   23b3c:	2338      	movs	r3, #56	; 0x38
   23b3e:	18fb      	adds	r3, r7, r3
   23b40:	2200      	movs	r2, #0
   23b42:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23b44:	2338      	movs	r3, #56	; 0x38
   23b46:	18fb      	adds	r3, r7, r3
   23b48:	2200      	movs	r2, #0
   23b4a:	70da      	strb	r2, [r3, #3]
		len = 5;
   23b4c:	2305      	movs	r3, #5
   23b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23b50:	e0ae      	b.n	23cb0 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   23b52:	2338      	movs	r3, #56	; 0x38
   23b54:	18fb      	adds	r3, r7, r3
   23b56:	22ff      	movs	r2, #255	; 0xff
   23b58:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   23b5a:	2338      	movs	r3, #56	; 0x38
   23b5c:	18fb      	adds	r3, r7, r3
   23b5e:	22ff      	movs	r2, #255	; 0xff
   23b60:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   23b62:	2338      	movs	r3, #56	; 0x38
   23b64:	18fb      	adds	r3, r7, r3
   23b66:	22ff      	movs	r2, #255	; 0xff
   23b68:	70da      	strb	r2, [r3, #3]
		len = 5;
   23b6a:	2305      	movs	r3, #5
   23b6c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23b6e:	e09f      	b.n	23cb0 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   23b70:	68bb      	ldr	r3, [r7, #8]
   23b72:	0c1b      	lsrs	r3, r3, #16
   23b74:	b2da      	uxtb	r2, r3
   23b76:	2338      	movs	r3, #56	; 0x38
   23b78:	18fb      	adds	r3, r7, r3
   23b7a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23b7c:	68bb      	ldr	r3, [r7, #8]
   23b7e:	0a1b      	lsrs	r3, r3, #8
   23b80:	b2da      	uxtb	r2, r3
   23b82:	2338      	movs	r3, #56	; 0x38
   23b84:	18fb      	adds	r3, r7, r3
   23b86:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23b88:	68bb      	ldr	r3, [r7, #8]
   23b8a:	b2da      	uxtb	r2, r3
   23b8c:	2338      	movs	r3, #56	; 0x38
   23b8e:	18fb      	adds	r3, r7, r3
   23b90:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   23b92:	683b      	ldr	r3, [r7, #0]
   23b94:	0a1b      	lsrs	r3, r3, #8
   23b96:	b2da      	uxtb	r2, r3
   23b98:	2338      	movs	r3, #56	; 0x38
   23b9a:	18fb      	adds	r3, r7, r3
   23b9c:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   23b9e:	683b      	ldr	r3, [r7, #0]
   23ba0:	b2da      	uxtb	r2, r3
   23ba2:	2338      	movs	r3, #56	; 0x38
   23ba4:	18fb      	adds	r3, r7, r3
   23ba6:	715a      	strb	r2, [r3, #5]
		len = 7;
   23ba8:	2307      	movs	r3, #7
   23baa:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23bac:	e080      	b.n	23cb0 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   23bae:	68bb      	ldr	r3, [r7, #8]
   23bb0:	0c1b      	lsrs	r3, r3, #16
   23bb2:	b2da      	uxtb	r2, r3
   23bb4:	2338      	movs	r3, #56	; 0x38
   23bb6:	18fb      	adds	r3, r7, r3
   23bb8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23bba:	68bb      	ldr	r3, [r7, #8]
   23bbc:	0a1b      	lsrs	r3, r3, #8
   23bbe:	b2da      	uxtb	r2, r3
   23bc0:	2338      	movs	r3, #56	; 0x38
   23bc2:	18fb      	adds	r3, r7, r3
   23bc4:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23bc6:	68bb      	ldr	r3, [r7, #8]
   23bc8:	b2da      	uxtb	r2, r3
   23bca:	2338      	movs	r3, #56	; 0x38
   23bcc:	18fb      	adds	r3, r7, r3
   23bce:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   23bd0:	683b      	ldr	r3, [r7, #0]
   23bd2:	0c1b      	lsrs	r3, r3, #16
   23bd4:	b2da      	uxtb	r2, r3
   23bd6:	2338      	movs	r3, #56	; 0x38
   23bd8:	18fb      	adds	r3, r7, r3
   23bda:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   23bdc:	683b      	ldr	r3, [r7, #0]
   23bde:	0a1b      	lsrs	r3, r3, #8
   23be0:	b2da      	uxtb	r2, r3
   23be2:	2338      	movs	r3, #56	; 0x38
   23be4:	18fb      	adds	r3, r7, r3
   23be6:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   23be8:	683b      	ldr	r3, [r7, #0]
   23bea:	b2da      	uxtb	r2, r3
   23bec:	2338      	movs	r3, #56	; 0x38
   23bee:	18fb      	adds	r3, r7, r3
   23bf0:	719a      	strb	r2, [r3, #6]
		len = 8;
   23bf2:	2308      	movs	r3, #8
   23bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23bf6:	e05b      	b.n	23cb0 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   23bf8:	68bb      	ldr	r3, [r7, #8]
   23bfa:	0a1b      	lsrs	r3, r3, #8
   23bfc:	b2da      	uxtb	r2, r3
   23bfe:	2338      	movs	r3, #56	; 0x38
   23c00:	18fb      	adds	r3, r7, r3
   23c02:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23c04:	2388      	movs	r3, #136	; 0x88
   23c06:	18fb      	adds	r3, r7, r3
   23c08:	781b      	ldrb	r3, [r3, #0]
   23c0a:	2b01      	cmp	r3, #1
   23c0c:	d109      	bne.n	23c22 <spi_cmd_complete+0x1b6>
   23c0e:	2338      	movs	r3, #56	; 0x38
   23c10:	18fb      	adds	r3, r7, r3
   23c12:	785b      	ldrb	r3, [r3, #1]
   23c14:	2280      	movs	r2, #128	; 0x80
   23c16:	4252      	negs	r2, r2
   23c18:	4313      	orrs	r3, r2
   23c1a:	b2da      	uxtb	r2, r3
   23c1c:	2338      	movs	r3, #56	; 0x38
   23c1e:	18fb      	adds	r3, r7, r3
   23c20:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   23c22:	68bb      	ldr	r3, [r7, #8]
   23c24:	b2da      	uxtb	r2, r3
   23c26:	2338      	movs	r3, #56	; 0x38
   23c28:	18fb      	adds	r3, r7, r3
   23c2a:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   23c2c:	687b      	ldr	r3, [r7, #4]
   23c2e:	78da      	ldrb	r2, [r3, #3]
   23c30:	2338      	movs	r3, #56	; 0x38
   23c32:	18fb      	adds	r3, r7, r3
   23c34:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   23c36:	687b      	ldr	r3, [r7, #4]
   23c38:	789a      	ldrb	r2, [r3, #2]
   23c3a:	2338      	movs	r3, #56	; 0x38
   23c3c:	18fb      	adds	r3, r7, r3
   23c3e:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   23c40:	687b      	ldr	r3, [r7, #4]
   23c42:	785a      	ldrb	r2, [r3, #1]
   23c44:	2338      	movs	r3, #56	; 0x38
   23c46:	18fb      	adds	r3, r7, r3
   23c48:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   23c4a:	687b      	ldr	r3, [r7, #4]
   23c4c:	781a      	ldrb	r2, [r3, #0]
   23c4e:	2338      	movs	r3, #56	; 0x38
   23c50:	18fb      	adds	r3, r7, r3
   23c52:	719a      	strb	r2, [r3, #6]
		len = 8;
   23c54:	2308      	movs	r3, #8
   23c56:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23c58:	e02a      	b.n	23cb0 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   23c5a:	68bb      	ldr	r3, [r7, #8]
   23c5c:	0c1b      	lsrs	r3, r3, #16
   23c5e:	b2da      	uxtb	r2, r3
   23c60:	2338      	movs	r3, #56	; 0x38
   23c62:	18fb      	adds	r3, r7, r3
   23c64:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23c66:	68bb      	ldr	r3, [r7, #8]
   23c68:	0a1b      	lsrs	r3, r3, #8
   23c6a:	b2da      	uxtb	r2, r3
   23c6c:	2338      	movs	r3, #56	; 0x38
   23c6e:	18fb      	adds	r3, r7, r3
   23c70:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   23c72:	68bb      	ldr	r3, [r7, #8]
   23c74:	b2da      	uxtb	r2, r3
   23c76:	2338      	movs	r3, #56	; 0x38
   23c78:	18fb      	adds	r3, r7, r3
   23c7a:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   23c7c:	687b      	ldr	r3, [r7, #4]
   23c7e:	78da      	ldrb	r2, [r3, #3]
   23c80:	2338      	movs	r3, #56	; 0x38
   23c82:	18fb      	adds	r3, r7, r3
   23c84:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   23c86:	687b      	ldr	r3, [r7, #4]
   23c88:	789a      	ldrb	r2, [r3, #2]
   23c8a:	2338      	movs	r3, #56	; 0x38
   23c8c:	18fb      	adds	r3, r7, r3
   23c8e:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   23c90:	687b      	ldr	r3, [r7, #4]
   23c92:	785a      	ldrb	r2, [r3, #1]
   23c94:	2338      	movs	r3, #56	; 0x38
   23c96:	18fb      	adds	r3, r7, r3
   23c98:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   23c9a:	687b      	ldr	r3, [r7, #4]
   23c9c:	781a      	ldrb	r2, [r3, #0]
   23c9e:	2338      	movs	r3, #56	; 0x38
   23ca0:	18fb      	adds	r3, r7, r3
   23ca2:	71da      	strb	r2, [r3, #7]
		len = 9;
   23ca4:	2309      	movs	r3, #9
   23ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23ca8:	e002      	b.n	23cb0 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   23caa:	2300      	movs	r3, #0
   23cac:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   23cae:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   23cb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23cb2:	2b01      	cmp	r3, #1
   23cb4:	d001      	beq.n	23cba <spi_cmd_complete+0x24e>
		return result;
   23cb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23cb8:	e33a      	b.n	24330 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   23cba:	4b4d      	ldr	r3, [pc, #308]	; (23df0 <spi_cmd_complete+0x384>)
   23cbc:	781b      	ldrb	r3, [r3, #0]
   23cbe:	2b00      	cmp	r3, #0
   23cc0:	d111      	bne.n	23ce6 <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   23cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23cc4:	1e5c      	subs	r4, r3, #1
   23cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23cc8:	3b01      	subs	r3, #1
   23cca:	001a      	movs	r2, r3
   23ccc:	2338      	movs	r3, #56	; 0x38
   23cce:	18fb      	adds	r3, r7, r3
   23cd0:	0019      	movs	r1, r3
   23cd2:	207f      	movs	r0, #127	; 0x7f
   23cd4:	4b47      	ldr	r3, [pc, #284]	; (23df4 <spi_cmd_complete+0x388>)
   23cd6:	4798      	blx	r3
   23cd8:	0003      	movs	r3, r0
   23cda:	18db      	adds	r3, r3, r3
   23cdc:	b2da      	uxtb	r2, r3
   23cde:	2338      	movs	r3, #56	; 0x38
   23ce0:	18fb      	adds	r3, r7, r3
   23ce2:	551a      	strb	r2, [r3, r4]
   23ce4:	e002      	b.n	23cec <spi_cmd_complete+0x280>
	} else {
		len -=1;
   23ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23ce8:	3b01      	subs	r3, #1
   23cea:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   23cec:	230f      	movs	r3, #15
   23cee:	18fb      	adds	r3, r7, r3
   23cf0:	781b      	ldrb	r3, [r3, #0]
   23cf2:	2bcf      	cmp	r3, #207	; 0xcf
   23cf4:	d009      	beq.n	23d0a <spi_cmd_complete+0x29e>
   23cf6:	230f      	movs	r3, #15
   23cf8:	18fb      	adds	r3, r7, r3
   23cfa:	781b      	ldrb	r3, [r3, #0]
   23cfc:	2bc5      	cmp	r3, #197	; 0xc5
   23cfe:	d004      	beq.n	23d0a <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   23d00:	230f      	movs	r3, #15
   23d02:	18fb      	adds	r3, r7, r3
   23d04:	781b      	ldrb	r3, [r3, #0]
   23d06:	2bc6      	cmp	r3, #198	; 0xc6
   23d08:	d103      	bne.n	23d12 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   23d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23d0c:	3306      	adds	r3, #6
   23d0e:	673b      	str	r3, [r7, #112]	; 0x70
   23d10:	e018      	b.n	23d44 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   23d12:	230f      	movs	r3, #15
   23d14:	18fb      	adds	r3, r7, r3
   23d16:	781b      	ldrb	r3, [r3, #0]
   23d18:	2bc4      	cmp	r3, #196	; 0xc4
   23d1a:	d004      	beq.n	23d26 <spi_cmd_complete+0x2ba>
   23d1c:	230f      	movs	r3, #15
   23d1e:	18fb      	adds	r3, r7, r3
   23d20:	781b      	ldrb	r3, [r3, #0]
   23d22:	2bca      	cmp	r3, #202	; 0xca
   23d24:	d10b      	bne.n	23d3e <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   23d26:	4b32      	ldr	r3, [pc, #200]	; (23df0 <spi_cmd_complete+0x384>)
   23d28:	781b      	ldrb	r3, [r3, #0]
   23d2a:	2b00      	cmp	r3, #0
   23d2c:	d103      	bne.n	23d36 <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   23d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23d30:	330c      	adds	r3, #12
   23d32:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   23d34:	e006      	b.n	23d44 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   23d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23d38:	330a      	adds	r3, #10
   23d3a:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   23d3c:	e002      	b.n	23d44 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   23d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23d40:	3305      	adds	r3, #5
   23d42:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   23d44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23d46:	2b20      	cmp	r3, #32
   23d48:	d914      	bls.n	23d74 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   23d4a:	23f7      	movs	r3, #247	; 0xf7
   23d4c:	005a      	lsls	r2, r3, #1
   23d4e:	492a      	ldr	r1, [pc, #168]	; (23df8 <spi_cmd_complete+0x38c>)
   23d50:	4b2a      	ldr	r3, [pc, #168]	; (23dfc <spi_cmd_complete+0x390>)
   23d52:	0018      	movs	r0, r3
   23d54:	4b2a      	ldr	r3, [pc, #168]	; (23e00 <spi_cmd_complete+0x394>)
   23d56:	4798      	blx	r3
   23d58:	6f39      	ldr	r1, [r7, #112]	; 0x70
   23d5a:	4b2a      	ldr	r3, [pc, #168]	; (23e04 <spi_cmd_complete+0x398>)
   23d5c:	2220      	movs	r2, #32
   23d5e:	0018      	movs	r0, r3
   23d60:	4b27      	ldr	r3, [pc, #156]	; (23e00 <spi_cmd_complete+0x394>)
   23d62:	4798      	blx	r3
   23d64:	4b28      	ldr	r3, [pc, #160]	; (23e08 <spi_cmd_complete+0x39c>)
   23d66:	0018      	movs	r0, r3
   23d68:	4b25      	ldr	r3, [pc, #148]	; (23e00 <spi_cmd_complete+0x394>)
   23d6a:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   23d6c:	2300      	movs	r3, #0
   23d6e:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23d72:	e2dd      	b.n	24330 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   23d74:	2377      	movs	r3, #119	; 0x77
   23d76:	18fb      	adds	r3, r7, r3
   23d78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   23d7a:	701a      	strb	r2, [r3, #0]
   23d7c:	e00d      	b.n	23d9a <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   23d7e:	2377      	movs	r3, #119	; 0x77
   23d80:	18fb      	adds	r3, r7, r3
   23d82:	781b      	ldrb	r3, [r3, #0]
   23d84:	2238      	movs	r2, #56	; 0x38
   23d86:	18ba      	adds	r2, r7, r2
   23d88:	2100      	movs	r1, #0
   23d8a:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   23d8c:	2377      	movs	r3, #119	; 0x77
   23d8e:	18fb      	adds	r3, r7, r3
   23d90:	781a      	ldrb	r2, [r3, #0]
   23d92:	2377      	movs	r3, #119	; 0x77
   23d94:	18fb      	adds	r3, r7, r3
   23d96:	3201      	adds	r2, #1
   23d98:	701a      	strb	r2, [r3, #0]
   23d9a:	2377      	movs	r3, #119	; 0x77
   23d9c:	18fb      	adds	r3, r7, r3
   23d9e:	781a      	ldrb	r2, [r3, #0]
   23da0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23da2:	429a      	cmp	r2, r3
   23da4:	d3eb      	bcc.n	23d7e <spi_cmd_complete+0x312>
	}
	rix = len;
   23da6:	2376      	movs	r3, #118	; 0x76
   23da8:	18fb      	adds	r3, r7, r3
   23daa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   23dac:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   23dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23db0:	b29a      	uxth	r2, r3
   23db2:	2318      	movs	r3, #24
   23db4:	18f9      	adds	r1, r7, r3
   23db6:	2338      	movs	r3, #56	; 0x38
   23db8:	18fb      	adds	r3, r7, r3
   23dba:	0018      	movs	r0, r3
   23dbc:	4b13      	ldr	r3, [pc, #76]	; (23e0c <spi_cmd_complete+0x3a0>)
   23dbe:	4798      	blx	r3
   23dc0:	1e03      	subs	r3, r0, #0
   23dc2:	d027      	beq.n	23e14 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23dc4:	23fa      	movs	r3, #250	; 0xfa
   23dc6:	33ff      	adds	r3, #255	; 0xff
   23dc8:	001a      	movs	r2, r3
   23dca:	490b      	ldr	r1, [pc, #44]	; (23df8 <spi_cmd_complete+0x38c>)
   23dcc:	4b0b      	ldr	r3, [pc, #44]	; (23dfc <spi_cmd_complete+0x390>)
   23dce:	0018      	movs	r0, r3
   23dd0:	4b0b      	ldr	r3, [pc, #44]	; (23e00 <spi_cmd_complete+0x394>)
   23dd2:	4798      	blx	r3
   23dd4:	4b0e      	ldr	r3, [pc, #56]	; (23e10 <spi_cmd_complete+0x3a4>)
   23dd6:	0018      	movs	r0, r3
   23dd8:	4b09      	ldr	r3, [pc, #36]	; (23e00 <spi_cmd_complete+0x394>)
   23dda:	4798      	blx	r3
   23ddc:	4b0a      	ldr	r3, [pc, #40]	; (23e08 <spi_cmd_complete+0x39c>)
   23dde:	0018      	movs	r0, r3
   23de0:	4b07      	ldr	r3, [pc, #28]	; (23e00 <spi_cmd_complete+0x394>)
   23de2:	4798      	blx	r3
		result = N_FAIL;
   23de4:	2300      	movs	r3, #0
   23de6:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23dea:	e2a1      	b.n	24330 <spi_cmd_complete+0x8c4>
   23dec:	0003943c 	.word	0x0003943c
   23df0:	20004130 	.word	0x20004130
   23df4:	000234a1 	.word	0x000234a1
   23df8:	0003949c 	.word	0x0003949c
   23dfc:	00038e88 	.word	0x00038e88
   23e00:	0001df59 	.word	0x0001df59
   23e04:	00038f50 	.word	0x00038f50
   23e08:	00038ec8 	.word	0x00038ec8
   23e0c:	0002342d 	.word	0x0002342d
   23e10:	00038e9c 	.word	0x00038e9c
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23e14:	230f      	movs	r3, #15
   23e16:	18fb      	adds	r3, r7, r3
   23e18:	781b      	ldrb	r3, [r3, #0]
   23e1a:	2bcf      	cmp	r3, #207	; 0xcf
   23e1c:	d009      	beq.n	23e32 <spi_cmd_complete+0x3c6>
   23e1e:	230f      	movs	r3, #15
   23e20:	18fb      	adds	r3, r7, r3
   23e22:	781b      	ldrb	r3, [r3, #0]
   23e24:	2bc5      	cmp	r3, #197	; 0xc5
   23e26:	d004      	beq.n	23e32 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   23e28:	230f      	movs	r3, #15
   23e2a:	18fb      	adds	r3, r7, r3
   23e2c:	781b      	ldrb	r3, [r3, #0]
   23e2e:	2bc6      	cmp	r3, #198	; 0xc6
   23e30:	d106      	bne.n	23e40 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   23e32:	2376      	movs	r3, #118	; 0x76
   23e34:	18fb      	adds	r3, r7, r3
   23e36:	781a      	ldrb	r2, [r3, #0]
   23e38:	2376      	movs	r3, #118	; 0x76
   23e3a:	18fb      	adds	r3, r7, r3
   23e3c:	3201      	adds	r2, #1
   23e3e:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   23e40:	2376      	movs	r3, #118	; 0x76
   23e42:	18fb      	adds	r3, r7, r3
   23e44:	781b      	ldrb	r3, [r3, #0]
   23e46:	2276      	movs	r2, #118	; 0x76
   23e48:	18ba      	adds	r2, r7, r2
   23e4a:	1c59      	adds	r1, r3, #1
   23e4c:	7011      	strb	r1, [r2, #0]
   23e4e:	001a      	movs	r2, r3
   23e50:	2318      	movs	r3, #24
   23e52:	18fb      	adds	r3, r7, r3
   23e54:	5c9a      	ldrb	r2, [r3, r2]
   23e56:	2317      	movs	r3, #23
   23e58:	18fb      	adds	r3, r7, r3
   23e5a:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   23e5c:	2317      	movs	r3, #23
   23e5e:	18fb      	adds	r3, r7, r3
   23e60:	781b      	ldrb	r3, [r3, #0]
   23e62:	220f      	movs	r2, #15
   23e64:	18ba      	adds	r2, r7, r2
   23e66:	7812      	ldrb	r2, [r2, #0]
   23e68:	429a      	cmp	r2, r3
   23e6a:	d018      	beq.n	23e9e <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   23e6c:	4add      	ldr	r2, [pc, #884]	; (241e4 <spi_cmd_complete+0x778>)
   23e6e:	49de      	ldr	r1, [pc, #888]	; (241e8 <spi_cmd_complete+0x77c>)
   23e70:	4bde      	ldr	r3, [pc, #888]	; (241ec <spi_cmd_complete+0x780>)
   23e72:	0018      	movs	r0, r3
   23e74:	4bde      	ldr	r3, [pc, #888]	; (241f0 <spi_cmd_complete+0x784>)
   23e76:	4798      	blx	r3
   23e78:	230f      	movs	r3, #15
   23e7a:	18fb      	adds	r3, r7, r3
   23e7c:	7819      	ldrb	r1, [r3, #0]
   23e7e:	2317      	movs	r3, #23
   23e80:	18fb      	adds	r3, r7, r3
   23e82:	781b      	ldrb	r3, [r3, #0]
   23e84:	001a      	movs	r2, r3
   23e86:	4bdb      	ldr	r3, [pc, #876]	; (241f4 <spi_cmd_complete+0x788>)
   23e88:	0018      	movs	r0, r3
   23e8a:	4bd9      	ldr	r3, [pc, #868]	; (241f0 <spi_cmd_complete+0x784>)
   23e8c:	4798      	blx	r3
   23e8e:	4bda      	ldr	r3, [pc, #872]	; (241f8 <spi_cmd_complete+0x78c>)
   23e90:	0018      	movs	r0, r3
   23e92:	4bd7      	ldr	r3, [pc, #860]	; (241f0 <spi_cmd_complete+0x784>)
   23e94:	4798      	blx	r3
		result = N_FAIL;
   23e96:	2300      	movs	r3, #0
   23e98:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23e9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23e9c:	e248      	b.n	24330 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   23e9e:	2376      	movs	r3, #118	; 0x76
   23ea0:	18fb      	adds	r3, r7, r3
   23ea2:	781b      	ldrb	r3, [r3, #0]
   23ea4:	2276      	movs	r2, #118	; 0x76
   23ea6:	18ba      	adds	r2, r7, r2
   23ea8:	1c59      	adds	r1, r3, #1
   23eaa:	7011      	strb	r1, [r2, #0]
   23eac:	001a      	movs	r2, r3
   23eae:	2318      	movs	r3, #24
   23eb0:	18fb      	adds	r3, r7, r3
   23eb2:	5c9a      	ldrb	r2, [r3, r2]
   23eb4:	2317      	movs	r3, #23
   23eb6:	18fb      	adds	r3, r7, r3
   23eb8:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   23eba:	2317      	movs	r3, #23
   23ebc:	18fb      	adds	r3, r7, r3
   23ebe:	781b      	ldrb	r3, [r3, #0]
   23ec0:	2b00      	cmp	r3, #0
   23ec2:	d016      	beq.n	23ef2 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   23ec4:	4acd      	ldr	r2, [pc, #820]	; (241fc <spi_cmd_complete+0x790>)
   23ec6:	49c8      	ldr	r1, [pc, #800]	; (241e8 <spi_cmd_complete+0x77c>)
   23ec8:	4bc8      	ldr	r3, [pc, #800]	; (241ec <spi_cmd_complete+0x780>)
   23eca:	0018      	movs	r0, r3
   23ecc:	4bc8      	ldr	r3, [pc, #800]	; (241f0 <spi_cmd_complete+0x784>)
   23ece:	4798      	blx	r3
   23ed0:	2317      	movs	r3, #23
   23ed2:	18fb      	adds	r3, r7, r3
   23ed4:	781b      	ldrb	r3, [r3, #0]
   23ed6:	001a      	movs	r2, r3
   23ed8:	4bc9      	ldr	r3, [pc, #804]	; (24200 <spi_cmd_complete+0x794>)
   23eda:	0011      	movs	r1, r2
   23edc:	0018      	movs	r0, r3
   23ede:	4bc4      	ldr	r3, [pc, #784]	; (241f0 <spi_cmd_complete+0x784>)
   23ee0:	4798      	blx	r3
   23ee2:	4bc5      	ldr	r3, [pc, #788]	; (241f8 <spi_cmd_complete+0x78c>)
   23ee4:	0018      	movs	r0, r3
   23ee6:	4bc2      	ldr	r3, [pc, #776]	; (241f0 <spi_cmd_complete+0x784>)
   23ee8:	4798      	blx	r3
		result = N_FAIL;
   23eea:	2300      	movs	r3, #0
   23eec:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23eee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23ef0:	e21e      	b.n	24330 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   23ef2:	230f      	movs	r3, #15
   23ef4:	18fb      	adds	r3, r7, r3
   23ef6:	781b      	ldrb	r3, [r3, #0]
   23ef8:	2bc4      	cmp	r3, #196	; 0xc4
   23efa:	d00f      	beq.n	23f1c <spi_cmd_complete+0x4b0>
   23efc:	230f      	movs	r3, #15
   23efe:	18fb      	adds	r3, r7, r3
   23f00:	781b      	ldrb	r3, [r3, #0]
   23f02:	2bca      	cmp	r3, #202	; 0xca
   23f04:	d00a      	beq.n	23f1c <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23f06:	230f      	movs	r3, #15
   23f08:	18fb      	adds	r3, r7, r3
   23f0a:	781b      	ldrb	r3, [r3, #0]
   23f0c:	2bc2      	cmp	r3, #194	; 0xc2
   23f0e:	d005      	beq.n	23f1c <spi_cmd_complete+0x4b0>
   23f10:	230f      	movs	r3, #15
   23f12:	18fb      	adds	r3, r7, r3
   23f14:	781b      	ldrb	r3, [r3, #0]
   23f16:	2bc8      	cmp	r3, #200	; 0xc8
   23f18:	d000      	beq.n	23f1c <spi_cmd_complete+0x4b0>
   23f1a:	e208      	b.n	2432e <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   23f1c:	230a      	movs	r3, #10
   23f1e:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   23f20:	2376      	movs	r3, #118	; 0x76
   23f22:	18fb      	adds	r3, r7, r3
   23f24:	781a      	ldrb	r2, [r3, #0]
   23f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23f28:	429a      	cmp	r2, r3
   23f2a:	d218      	bcs.n	23f5e <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   23f2c:	2376      	movs	r3, #118	; 0x76
   23f2e:	18fb      	adds	r3, r7, r3
   23f30:	781b      	ldrb	r3, [r3, #0]
   23f32:	2276      	movs	r2, #118	; 0x76
   23f34:	18ba      	adds	r2, r7, r2
   23f36:	1c59      	adds	r1, r3, #1
   23f38:	7011      	strb	r1, [r2, #0]
   23f3a:	001a      	movs	r2, r3
   23f3c:	2318      	movs	r3, #24
   23f3e:	18fb      	adds	r3, r7, r3
   23f40:	5c9a      	ldrb	r2, [r3, r2]
   23f42:	2317      	movs	r3, #23
   23f44:	18fb      	adds	r3, r7, r3
   23f46:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   23f48:	2317      	movs	r3, #23
   23f4a:	18fb      	adds	r3, r7, r3
   23f4c:	781b      	ldrb	r3, [r3, #0]
   23f4e:	091b      	lsrs	r3, r3, #4
   23f50:	b2db      	uxtb	r3, r3
   23f52:	001a      	movs	r2, r3
   23f54:	230f      	movs	r3, #15
   23f56:	4013      	ands	r3, r2
   23f58:	2b0f      	cmp	r3, #15
   23f5a:	d103      	bne.n	23f64 <spi_cmd_complete+0x4f8>
					break;
   23f5c:	e007      	b.n	23f6e <spi_cmd_complete+0x502>
					retry = 0;
   23f5e:	2300      	movs	r3, #0
   23f60:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   23f62:	e004      	b.n	23f6e <spi_cmd_complete+0x502>
			} while (retry--);
   23f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23f66:	1e5a      	subs	r2, r3, #1
   23f68:	667a      	str	r2, [r7, #100]	; 0x64
   23f6a:	2b00      	cmp	r3, #0
   23f6c:	d1d8      	bne.n	23f20 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   23f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23f70:	2b00      	cmp	r3, #0
   23f72:	dc18      	bgt.n	23fa6 <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   23f74:	2395      	movs	r3, #149	; 0x95
   23f76:	009a      	lsls	r2, r3, #2
   23f78:	499b      	ldr	r1, [pc, #620]	; (241e8 <spi_cmd_complete+0x77c>)
   23f7a:	4b9c      	ldr	r3, [pc, #624]	; (241ec <spi_cmd_complete+0x780>)
   23f7c:	0018      	movs	r0, r3
   23f7e:	4b9c      	ldr	r3, [pc, #624]	; (241f0 <spi_cmd_complete+0x784>)
   23f80:	4798      	blx	r3
   23f82:	2317      	movs	r3, #23
   23f84:	18fb      	adds	r3, r7, r3
   23f86:	781b      	ldrb	r3, [r3, #0]
   23f88:	001a      	movs	r2, r3
   23f8a:	4b9e      	ldr	r3, [pc, #632]	; (24204 <spi_cmd_complete+0x798>)
   23f8c:	0011      	movs	r1, r2
   23f8e:	0018      	movs	r0, r3
   23f90:	4b97      	ldr	r3, [pc, #604]	; (241f0 <spi_cmd_complete+0x784>)
   23f92:	4798      	blx	r3
   23f94:	4b98      	ldr	r3, [pc, #608]	; (241f8 <spi_cmd_complete+0x78c>)
   23f96:	0018      	movs	r0, r3
   23f98:	4b95      	ldr	r3, [pc, #596]	; (241f0 <spi_cmd_complete+0x784>)
   23f9a:	4798      	blx	r3
				result = N_RESET;
   23f9c:	2301      	movs	r3, #1
   23f9e:	425b      	negs	r3, r3
   23fa0:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   23fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23fa4:	e1c4      	b.n	24330 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   23fa6:	230f      	movs	r3, #15
   23fa8:	18fb      	adds	r3, r7, r3
   23faa:	781b      	ldrb	r3, [r3, #0]
   23fac:	2bc4      	cmp	r3, #196	; 0xc4
   23fae:	d005      	beq.n	23fbc <spi_cmd_complete+0x550>
   23fb0:	230f      	movs	r3, #15
   23fb2:	18fb      	adds	r3, r7, r3
   23fb4:	781b      	ldrb	r3, [r3, #0]
   23fb6:	2bca      	cmp	r3, #202	; 0xca
   23fb8:	d000      	beq.n	23fbc <spi_cmd_complete+0x550>
   23fba:	e08e      	b.n	240da <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   23fbc:	2376      	movs	r3, #118	; 0x76
   23fbe:	18fb      	adds	r3, r7, r3
   23fc0:	781b      	ldrb	r3, [r3, #0]
   23fc2:	3303      	adds	r3, #3
   23fc4:	001a      	movs	r2, r3
   23fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23fc8:	429a      	cmp	r2, r3
   23fca:	d23c      	bcs.n	24046 <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   23fcc:	2376      	movs	r3, #118	; 0x76
   23fce:	18fb      	adds	r3, r7, r3
   23fd0:	781b      	ldrb	r3, [r3, #0]
   23fd2:	2276      	movs	r2, #118	; 0x76
   23fd4:	18ba      	adds	r2, r7, r2
   23fd6:	1c59      	adds	r1, r3, #1
   23fd8:	7011      	strb	r1, [r2, #0]
   23fda:	001a      	movs	r2, r3
   23fdc:	2318      	movs	r3, #24
   23fde:	18fb      	adds	r3, r7, r3
   23fe0:	5c9a      	ldrb	r2, [r3, r2]
   23fe2:	687b      	ldr	r3, [r7, #4]
   23fe4:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   23fe6:	687b      	ldr	r3, [r7, #4]
   23fe8:	1c5a      	adds	r2, r3, #1
   23fea:	2376      	movs	r3, #118	; 0x76
   23fec:	18fb      	adds	r3, r7, r3
   23fee:	781b      	ldrb	r3, [r3, #0]
   23ff0:	2176      	movs	r1, #118	; 0x76
   23ff2:	1879      	adds	r1, r7, r1
   23ff4:	1c58      	adds	r0, r3, #1
   23ff6:	7008      	strb	r0, [r1, #0]
   23ff8:	0019      	movs	r1, r3
   23ffa:	2318      	movs	r3, #24
   23ffc:	18fb      	adds	r3, r7, r3
   23ffe:	5c5b      	ldrb	r3, [r3, r1]
   24000:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   24002:	687b      	ldr	r3, [r7, #4]
   24004:	1c9a      	adds	r2, r3, #2
   24006:	2376      	movs	r3, #118	; 0x76
   24008:	18fb      	adds	r3, r7, r3
   2400a:	781b      	ldrb	r3, [r3, #0]
   2400c:	2176      	movs	r1, #118	; 0x76
   2400e:	1879      	adds	r1, r7, r1
   24010:	1c58      	adds	r0, r3, #1
   24012:	7008      	strb	r0, [r1, #0]
   24014:	0019      	movs	r1, r3
   24016:	2318      	movs	r3, #24
   24018:	18fb      	adds	r3, r7, r3
   2401a:	5c5b      	ldrb	r3, [r3, r1]
   2401c:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   2401e:	687b      	ldr	r3, [r7, #4]
   24020:	1cda      	adds	r2, r3, #3
   24022:	2376      	movs	r3, #118	; 0x76
   24024:	18fb      	adds	r3, r7, r3
   24026:	781b      	ldrb	r3, [r3, #0]
   24028:	2176      	movs	r1, #118	; 0x76
   2402a:	1879      	adds	r1, r7, r1
   2402c:	1c58      	adds	r0, r3, #1
   2402e:	7008      	strb	r0, [r1, #0]
   24030:	0019      	movs	r1, r3
   24032:	2318      	movs	r3, #24
   24034:	18fb      	adds	r3, r7, r3
   24036:	5c5b      	ldrb	r3, [r3, r1]
   24038:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   2403a:	4b73      	ldr	r3, [pc, #460]	; (24208 <spi_cmd_complete+0x79c>)
   2403c:	781b      	ldrb	r3, [r3, #0]
   2403e:	2b00      	cmp	r3, #0
   24040:	d000      	beq.n	24044 <spi_cmd_complete+0x5d8>
   24042:	e174      	b.n	2432e <spi_cmd_complete+0x8c2>
   24044:	e011      	b.n	2406a <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   24046:	4a71      	ldr	r2, [pc, #452]	; (2420c <spi_cmd_complete+0x7a0>)
   24048:	4967      	ldr	r1, [pc, #412]	; (241e8 <spi_cmd_complete+0x77c>)
   2404a:	4b68      	ldr	r3, [pc, #416]	; (241ec <spi_cmd_complete+0x780>)
   2404c:	0018      	movs	r0, r3
   2404e:	4b68      	ldr	r3, [pc, #416]	; (241f0 <spi_cmd_complete+0x784>)
   24050:	4798      	blx	r3
   24052:	4b6f      	ldr	r3, [pc, #444]	; (24210 <spi_cmd_complete+0x7a4>)
   24054:	0018      	movs	r0, r3
   24056:	4b66      	ldr	r3, [pc, #408]	; (241f0 <spi_cmd_complete+0x784>)
   24058:	4798      	blx	r3
   2405a:	4b67      	ldr	r3, [pc, #412]	; (241f8 <spi_cmd_complete+0x78c>)
   2405c:	0018      	movs	r0, r3
   2405e:	4b64      	ldr	r3, [pc, #400]	; (241f0 <spi_cmd_complete+0x784>)
   24060:	4798      	blx	r3
					result = N_FAIL;
   24062:	2300      	movs	r3, #0
   24064:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   24066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24068:	e162      	b.n	24330 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   2406a:	2376      	movs	r3, #118	; 0x76
   2406c:	18fb      	adds	r3, r7, r3
   2406e:	781b      	ldrb	r3, [r3, #0]
   24070:	3301      	adds	r3, #1
   24072:	001a      	movs	r2, r3
   24074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24076:	429a      	cmp	r2, r3
   24078:	d21c      	bcs.n	240b4 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   2407a:	2376      	movs	r3, #118	; 0x76
   2407c:	18fb      	adds	r3, r7, r3
   2407e:	781b      	ldrb	r3, [r3, #0]
   24080:	2276      	movs	r2, #118	; 0x76
   24082:	18ba      	adds	r2, r7, r2
   24084:	1c59      	adds	r1, r3, #1
   24086:	7011      	strb	r1, [r2, #0]
   24088:	001a      	movs	r2, r3
   2408a:	2318      	movs	r3, #24
   2408c:	18fb      	adds	r3, r7, r3
   2408e:	5c9a      	ldrb	r2, [r3, r2]
   24090:	2314      	movs	r3, #20
   24092:	18fb      	adds	r3, r7, r3
   24094:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   24096:	2376      	movs	r3, #118	; 0x76
   24098:	18fb      	adds	r3, r7, r3
   2409a:	781b      	ldrb	r3, [r3, #0]
   2409c:	2276      	movs	r2, #118	; 0x76
   2409e:	18ba      	adds	r2, r7, r2
   240a0:	1c59      	adds	r1, r3, #1
   240a2:	7011      	strb	r1, [r2, #0]
   240a4:	001a      	movs	r2, r3
   240a6:	2318      	movs	r3, #24
   240a8:	18fb      	adds	r3, r7, r3
   240aa:	5c9a      	ldrb	r2, [r3, r2]
   240ac:	2314      	movs	r3, #20
   240ae:	18fb      	adds	r3, r7, r3
   240b0:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   240b2:	e13c      	b.n	2432e <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   240b4:	239c      	movs	r3, #156	; 0x9c
   240b6:	009a      	lsls	r2, r3, #2
   240b8:	494b      	ldr	r1, [pc, #300]	; (241e8 <spi_cmd_complete+0x77c>)
   240ba:	4b4c      	ldr	r3, [pc, #304]	; (241ec <spi_cmd_complete+0x780>)
   240bc:	0018      	movs	r0, r3
   240be:	4b4c      	ldr	r3, [pc, #304]	; (241f0 <spi_cmd_complete+0x784>)
   240c0:	4798      	blx	r3
   240c2:	4b54      	ldr	r3, [pc, #336]	; (24214 <spi_cmd_complete+0x7a8>)
   240c4:	0018      	movs	r0, r3
   240c6:	4b4a      	ldr	r3, [pc, #296]	; (241f0 <spi_cmd_complete+0x784>)
   240c8:	4798      	blx	r3
   240ca:	4b4b      	ldr	r3, [pc, #300]	; (241f8 <spi_cmd_complete+0x78c>)
   240cc:	0018      	movs	r0, r3
   240ce:	4b48      	ldr	r3, [pc, #288]	; (241f0 <spi_cmd_complete+0x784>)
   240d0:	4798      	blx	r3
						result = N_FAIL;
   240d2:	2300      	movs	r3, #0
   240d4:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   240d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   240d8:	e12a      	b.n	24330 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   240da:	230f      	movs	r3, #15
   240dc:	18fb      	adds	r3, r7, r3
   240de:	781b      	ldrb	r3, [r3, #0]
   240e0:	2bc2      	cmp	r3, #194	; 0xc2
   240e2:	d005      	beq.n	240f0 <spi_cmd_complete+0x684>
   240e4:	230f      	movs	r3, #15
   240e6:	18fb      	adds	r3, r7, r3
   240e8:	781b      	ldrb	r3, [r3, #0]
   240ea:	2bc8      	cmp	r3, #200	; 0xc8
   240ec:	d000      	beq.n	240f0 <spi_cmd_complete+0x684>
   240ee:	e11e      	b.n	2432e <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   240f0:	2300      	movs	r3, #0
   240f2:	663b      	str	r3, [r7, #96]	; 0x60
   240f4:	e011      	b.n	2411a <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   240f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   240f8:	1c5a      	adds	r2, r3, #1
   240fa:	663a      	str	r2, [r7, #96]	; 0x60
   240fc:	001a      	movs	r2, r3
   240fe:	687b      	ldr	r3, [r7, #4]
   24100:	189a      	adds	r2, r3, r2
   24102:	2376      	movs	r3, #118	; 0x76
   24104:	18fb      	adds	r3, r7, r3
   24106:	781b      	ldrb	r3, [r3, #0]
   24108:	2176      	movs	r1, #118	; 0x76
   2410a:	1879      	adds	r1, r7, r1
   2410c:	1c58      	adds	r0, r3, #1
   2410e:	7008      	strb	r0, [r1, #0]
   24110:	0019      	movs	r1, r3
   24112:	2318      	movs	r3, #24
   24114:	18fb      	adds	r3, r7, r3
   24116:	5c5b      	ldrb	r3, [r3, r1]
   24118:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   2411a:	2376      	movs	r3, #118	; 0x76
   2411c:	18fb      	adds	r3, r7, r3
   2411e:	781a      	ldrb	r2, [r3, #0]
   24120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24122:	429a      	cmp	r2, r3
   24124:	d203      	bcs.n	2412e <spi_cmd_complete+0x6c2>
   24126:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24128:	683b      	ldr	r3, [r7, #0]
   2412a:	429a      	cmp	r2, r3
   2412c:	d3e3      	bcc.n	240f6 <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   2412e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24130:	683a      	ldr	r2, [r7, #0]
   24132:	1ad3      	subs	r3, r2, r3
   24134:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   24136:	683b      	ldr	r3, [r7, #0]
   24138:	2b00      	cmp	r3, #0
   2413a:	d100      	bne.n	2413e <spi_cmd_complete+0x6d2>
   2413c:	e0f1      	b.n	24322 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   2413e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24140:	2280      	movs	r2, #128	; 0x80
   24142:	0192      	lsls	r2, r2, #6
   24144:	1ad3      	subs	r3, r2, r3
   24146:	001a      	movs	r2, r3
   24148:	683b      	ldr	r3, [r7, #0]
   2414a:	429a      	cmp	r2, r3
   2414c:	d302      	bcc.n	24154 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   2414e:	683b      	ldr	r3, [r7, #0]
   24150:	65fb      	str	r3, [r7, #92]	; 0x5c
   24152:	e004      	b.n	2415e <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   24154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24156:	2280      	movs	r2, #128	; 0x80
   24158:	0192      	lsls	r2, r2, #6
   2415a:	1ad3      	subs	r3, r2, r3
   2415c:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   2415e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24160:	687a      	ldr	r2, [r7, #4]
   24162:	18d3      	adds	r3, r2, r3
   24164:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   24166:	b292      	uxth	r2, r2
   24168:	0011      	movs	r1, r2
   2416a:	0018      	movs	r0, r3
   2416c:	4b2a      	ldr	r3, [pc, #168]	; (24218 <spi_cmd_complete+0x7ac>)
   2416e:	4798      	blx	r3
   24170:	1e03      	subs	r3, r0, #0
   24172:	d010      	beq.n	24196 <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24174:	4a29      	ldr	r2, [pc, #164]	; (2421c <spi_cmd_complete+0x7b0>)
   24176:	491c      	ldr	r1, [pc, #112]	; (241e8 <spi_cmd_complete+0x77c>)
   24178:	4b1c      	ldr	r3, [pc, #112]	; (241ec <spi_cmd_complete+0x780>)
   2417a:	0018      	movs	r0, r3
   2417c:	4b1c      	ldr	r3, [pc, #112]	; (241f0 <spi_cmd_complete+0x784>)
   2417e:	4798      	blx	r3
   24180:	4b27      	ldr	r3, [pc, #156]	; (24220 <spi_cmd_complete+0x7b4>)
   24182:	0018      	movs	r0, r3
   24184:	4b1a      	ldr	r3, [pc, #104]	; (241f0 <spi_cmd_complete+0x784>)
   24186:	4798      	blx	r3
   24188:	4b1b      	ldr	r3, [pc, #108]	; (241f8 <spi_cmd_complete+0x78c>)
   2418a:	0018      	movs	r0, r3
   2418c:	4b18      	ldr	r3, [pc, #96]	; (241f0 <spi_cmd_complete+0x784>)
   2418e:	4798      	blx	r3
						result = N_FAIL;
   24190:	2300      	movs	r3, #0
   24192:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   24194:	e0cb      	b.n	2432e <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24196:	4b1c      	ldr	r3, [pc, #112]	; (24208 <spi_cmd_complete+0x79c>)
   24198:	781b      	ldrb	r3, [r3, #0]
   2419a:	2b00      	cmp	r3, #0
   2419c:	d119      	bne.n	241d2 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   2419e:	2314      	movs	r3, #20
   241a0:	18fb      	adds	r3, r7, r3
   241a2:	2102      	movs	r1, #2
   241a4:	0018      	movs	r0, r3
   241a6:	4b1c      	ldr	r3, [pc, #112]	; (24218 <spi_cmd_complete+0x7ac>)
   241a8:	4798      	blx	r3
   241aa:	1e03      	subs	r3, r0, #0
   241ac:	d011      	beq.n	241d2 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   241ae:	23a6      	movs	r3, #166	; 0xa6
   241b0:	009a      	lsls	r2, r3, #2
   241b2:	490d      	ldr	r1, [pc, #52]	; (241e8 <spi_cmd_complete+0x77c>)
   241b4:	4b0d      	ldr	r3, [pc, #52]	; (241ec <spi_cmd_complete+0x780>)
   241b6:	0018      	movs	r0, r3
   241b8:	4b0d      	ldr	r3, [pc, #52]	; (241f0 <spi_cmd_complete+0x784>)
   241ba:	4798      	blx	r3
   241bc:	4b19      	ldr	r3, [pc, #100]	; (24224 <spi_cmd_complete+0x7b8>)
   241be:	0018      	movs	r0, r3
   241c0:	4b0b      	ldr	r3, [pc, #44]	; (241f0 <spi_cmd_complete+0x784>)
   241c2:	4798      	blx	r3
   241c4:	4b0c      	ldr	r3, [pc, #48]	; (241f8 <spi_cmd_complete+0x78c>)
   241c6:	0018      	movs	r0, r3
   241c8:	4b09      	ldr	r3, [pc, #36]	; (241f0 <spi_cmd_complete+0x784>)
   241ca:	4798      	blx	r3
							result = N_FAIL;
   241cc:	2300      	movs	r3, #0
   241ce:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   241d0:	e0ad      	b.n	2432e <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   241d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   241d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   241d6:	18d3      	adds	r3, r2, r3
   241d8:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   241da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   241dc:	683a      	ldr	r2, [r7, #0]
   241de:	1ad3      	subs	r3, r2, r3
   241e0:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   241e2:	e09e      	b.n	24322 <spi_cmd_complete+0x8b6>
   241e4:	0000022f 	.word	0x0000022f
   241e8:	0003949c 	.word	0x0003949c
   241ec:	00038e88 	.word	0x00038e88
   241f0:	0001df59 	.word	0x0001df59
   241f4:	00038f80 	.word	0x00038f80
   241f8:	00038ec8 	.word	0x00038ec8
   241fc:	00000239 	.word	0x00000239
   24200:	00038fbc 	.word	0x00038fbc
   24204:	00038ff0 	.word	0x00038ff0
   24208:	20004130 	.word	0x20004130
   2420c:	00000263 	.word	0x00000263
   24210:	00039020 	.word	0x00039020
   24214:	00039050 	.word	0x00039050
   24218:	000233a5 	.word	0x000233a5
   2421c:	0000028e 	.word	0x0000028e
   24220:	00039080 	.word	0x00039080
   24224:	000390b4 	.word	0x000390b4
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   24228:	683a      	ldr	r2, [r7, #0]
   2422a:	2380      	movs	r3, #128	; 0x80
   2422c:	019b      	lsls	r3, r3, #6
   2422e:	429a      	cmp	r2, r3
   24230:	d802      	bhi.n	24238 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   24232:	683b      	ldr	r3, [r7, #0]
   24234:	65bb      	str	r3, [r7, #88]	; 0x58
   24236:	e002      	b.n	2423e <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   24238:	2380      	movs	r3, #128	; 0x80
   2423a:	019b      	lsls	r3, r3, #6
   2423c:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   2423e:	230a      	movs	r3, #10
   24240:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   24242:	2317      	movs	r3, #23
   24244:	18fb      	adds	r3, r7, r3
   24246:	2101      	movs	r1, #1
   24248:	0018      	movs	r0, r3
   2424a:	4b3b      	ldr	r3, [pc, #236]	; (24338 <spi_cmd_complete+0x8cc>)
   2424c:	4798      	blx	r3
   2424e:	1e03      	subs	r3, r0, #0
   24250:	d011      	beq.n	24276 <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   24252:	23ae      	movs	r3, #174	; 0xae
   24254:	009a      	lsls	r2, r3, #2
   24256:	4939      	ldr	r1, [pc, #228]	; (2433c <spi_cmd_complete+0x8d0>)
   24258:	4b39      	ldr	r3, [pc, #228]	; (24340 <spi_cmd_complete+0x8d4>)
   2425a:	0018      	movs	r0, r3
   2425c:	4b39      	ldr	r3, [pc, #228]	; (24344 <spi_cmd_complete+0x8d8>)
   2425e:	4798      	blx	r3
   24260:	4b39      	ldr	r3, [pc, #228]	; (24348 <spi_cmd_complete+0x8dc>)
   24262:	0018      	movs	r0, r3
   24264:	4b37      	ldr	r3, [pc, #220]	; (24344 <spi_cmd_complete+0x8d8>)
   24266:	4798      	blx	r3
   24268:	4b38      	ldr	r3, [pc, #224]	; (2434c <spi_cmd_complete+0x8e0>)
   2426a:	0018      	movs	r0, r3
   2426c:	4b35      	ldr	r3, [pc, #212]	; (24344 <spi_cmd_complete+0x8d8>)
   2426e:	4798      	blx	r3
							result = N_FAIL;
   24270:	2300      	movs	r3, #0
   24272:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24274:	e010      	b.n	24298 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   24276:	2317      	movs	r3, #23
   24278:	18fb      	adds	r3, r7, r3
   2427a:	781b      	ldrb	r3, [r3, #0]
   2427c:	091b      	lsrs	r3, r3, #4
   2427e:	b2db      	uxtb	r3, r3
   24280:	001a      	movs	r2, r3
   24282:	230f      	movs	r3, #15
   24284:	4013      	ands	r3, r2
   24286:	2b0f      	cmp	r3, #15
   24288:	d005      	beq.n	24296 <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   2428a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2428c:	1e5a      	subs	r2, r3, #1
   2428e:	667a      	str	r2, [r7, #100]	; 0x64
   24290:	2b00      	cmp	r3, #0
   24292:	d1d6      	bne.n	24242 <spi_cmd_complete+0x7d6>
   24294:	e000      	b.n	24298 <spi_cmd_complete+0x82c>
							break;
   24296:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   24298:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2429a:	2b00      	cmp	r3, #0
   2429c:	d046      	beq.n	2432c <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   2429e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   242a0:	687a      	ldr	r2, [r7, #4]
   242a2:	18d3      	adds	r3, r2, r3
   242a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
   242a6:	b292      	uxth	r2, r2
   242a8:	0011      	movs	r1, r2
   242aa:	0018      	movs	r0, r3
   242ac:	4b22      	ldr	r3, [pc, #136]	; (24338 <spi_cmd_complete+0x8cc>)
   242ae:	4798      	blx	r3
   242b0:	1e03      	subs	r3, r0, #0
   242b2:	d011      	beq.n	242d8 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   242b4:	23b2      	movs	r3, #178	; 0xb2
   242b6:	009a      	lsls	r2, r3, #2
   242b8:	4920      	ldr	r1, [pc, #128]	; (2433c <spi_cmd_complete+0x8d0>)
   242ba:	4b21      	ldr	r3, [pc, #132]	; (24340 <spi_cmd_complete+0x8d4>)
   242bc:	0018      	movs	r0, r3
   242be:	4b21      	ldr	r3, [pc, #132]	; (24344 <spi_cmd_complete+0x8d8>)
   242c0:	4798      	blx	r3
   242c2:	4b23      	ldr	r3, [pc, #140]	; (24350 <spi_cmd_complete+0x8e4>)
   242c4:	0018      	movs	r0, r3
   242c6:	4b1f      	ldr	r3, [pc, #124]	; (24344 <spi_cmd_complete+0x8d8>)
   242c8:	4798      	blx	r3
   242ca:	4b20      	ldr	r3, [pc, #128]	; (2434c <spi_cmd_complete+0x8e0>)
   242cc:	0018      	movs	r0, r3
   242ce:	4b1d      	ldr	r3, [pc, #116]	; (24344 <spi_cmd_complete+0x8d8>)
   242d0:	4798      	blx	r3
						result = N_FAIL;
   242d2:	2300      	movs	r3, #0
   242d4:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   242d6:	e02a      	b.n	2432e <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   242d8:	4b1e      	ldr	r3, [pc, #120]	; (24354 <spi_cmd_complete+0x8e8>)
   242da:	781b      	ldrb	r3, [r3, #0]
   242dc:	2b00      	cmp	r3, #0
   242de:	d118      	bne.n	24312 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   242e0:	2314      	movs	r3, #20
   242e2:	18fb      	adds	r3, r7, r3
   242e4:	2102      	movs	r1, #2
   242e6:	0018      	movs	r0, r3
   242e8:	4b13      	ldr	r3, [pc, #76]	; (24338 <spi_cmd_complete+0x8cc>)
   242ea:	4798      	blx	r3
   242ec:	1e03      	subs	r3, r0, #0
   242ee:	d010      	beq.n	24312 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   242f0:	4a19      	ldr	r2, [pc, #100]	; (24358 <spi_cmd_complete+0x8ec>)
   242f2:	4912      	ldr	r1, [pc, #72]	; (2433c <spi_cmd_complete+0x8d0>)
   242f4:	4b12      	ldr	r3, [pc, #72]	; (24340 <spi_cmd_complete+0x8d4>)
   242f6:	0018      	movs	r0, r3
   242f8:	4b12      	ldr	r3, [pc, #72]	; (24344 <spi_cmd_complete+0x8d8>)
   242fa:	4798      	blx	r3
   242fc:	4b17      	ldr	r3, [pc, #92]	; (2435c <spi_cmd_complete+0x8f0>)
   242fe:	0018      	movs	r0, r3
   24300:	4b10      	ldr	r3, [pc, #64]	; (24344 <spi_cmd_complete+0x8d8>)
   24302:	4798      	blx	r3
   24304:	4b11      	ldr	r3, [pc, #68]	; (2434c <spi_cmd_complete+0x8e0>)
   24306:	0018      	movs	r0, r3
   24308:	4b0e      	ldr	r3, [pc, #56]	; (24344 <spi_cmd_complete+0x8d8>)
   2430a:	4798      	blx	r3
							result = N_FAIL;
   2430c:	2300      	movs	r3, #0
   2430e:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24310:	e00d      	b.n	2432e <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   24312:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24316:	18d3      	adds	r3, r2, r3
   24318:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   2431a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2431c:	683a      	ldr	r2, [r7, #0]
   2431e:	1ad3      	subs	r3, r2, r3
   24320:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   24322:	683b      	ldr	r3, [r7, #0]
   24324:	2b00      	cmp	r3, #0
   24326:	d000      	beq.n	2432a <spi_cmd_complete+0x8be>
   24328:	e77e      	b.n	24228 <spi_cmd_complete+0x7bc>
   2432a:	e000      	b.n	2432e <spi_cmd_complete+0x8c2>
						break;
   2432c:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   2432e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   24330:	0018      	movs	r0, r3
   24332:	46bd      	mov	sp, r7
   24334:	b01f      	add	sp, #124	; 0x7c
   24336:	bd90      	pop	{r4, r7, pc}
   24338:	000233a5 	.word	0x000233a5
   2433c:	0003949c 	.word	0x0003949c
   24340:	00038e88 	.word	0x00038e88
   24344:	0001df59 	.word	0x0001df59
   24348:	000390ec 	.word	0x000390ec
   2434c:	00038ec8 	.word	0x00038ec8
   24350:	00039080 	.word	0x00039080
   24354:	20004130 	.word	0x20004130
   24358:	000002d2 	.word	0x000002d2
   2435c:	000390b4 	.word	0x000390b4

00024360 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   24360:	b580      	push	{r7, lr}
   24362:	b086      	sub	sp, #24
   24364:	af00      	add	r7, sp, #0
   24366:	6078      	str	r0, [r7, #4]
   24368:	000a      	movs	r2, r1
   2436a:	1cbb      	adds	r3, r7, #2
   2436c:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   2436e:	2313      	movs	r3, #19
   24370:	18fb      	adds	r3, r7, r3
   24372:	2201      	movs	r2, #1
   24374:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   24376:	230c      	movs	r3, #12
   24378:	18fb      	adds	r3, r7, r3
   2437a:	2200      	movs	r2, #0
   2437c:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   2437e:	2316      	movs	r3, #22
   24380:	18fb      	adds	r3, r7, r3
   24382:	2200      	movs	r2, #0
   24384:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   24386:	1cbb      	adds	r3, r7, #2
   24388:	881a      	ldrh	r2, [r3, #0]
   2438a:	2380      	movs	r3, #128	; 0x80
   2438c:	019b      	lsls	r3, r3, #6
   2438e:	429a      	cmp	r2, r3
   24390:	d805      	bhi.n	2439e <spi_data_write+0x3e>
			nbytes = sz;
   24392:	2314      	movs	r3, #20
   24394:	18fb      	adds	r3, r7, r3
   24396:	1cba      	adds	r2, r7, #2
   24398:	8812      	ldrh	r2, [r2, #0]
   2439a:	801a      	strh	r2, [r3, #0]
   2439c:	e004      	b.n	243a8 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   2439e:	2314      	movs	r3, #20
   243a0:	18fb      	adds	r3, r7, r3
   243a2:	2280      	movs	r2, #128	; 0x80
   243a4:	0192      	lsls	r2, r2, #6
   243a6:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   243a8:	2311      	movs	r3, #17
   243aa:	18fb      	adds	r3, r7, r3
   243ac:	22f0      	movs	r2, #240	; 0xf0
   243ae:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   243b0:	2316      	movs	r3, #22
   243b2:	18fb      	adds	r3, r7, r3
   243b4:	2200      	movs	r2, #0
   243b6:	5e9b      	ldrsh	r3, [r3, r2]
   243b8:	2b00      	cmp	r3, #0
   243ba:	d10f      	bne.n	243dc <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   243bc:	1cbb      	adds	r3, r7, #2
   243be:	881a      	ldrh	r2, [r3, #0]
   243c0:	2380      	movs	r3, #128	; 0x80
   243c2:	019b      	lsls	r3, r3, #6
   243c4:	429a      	cmp	r2, r3
   243c6:	d804      	bhi.n	243d2 <spi_data_write+0x72>
				order = 0x3;
   243c8:	2312      	movs	r3, #18
   243ca:	18fb      	adds	r3, r7, r3
   243cc:	2203      	movs	r2, #3
   243ce:	701a      	strb	r2, [r3, #0]
   243d0:	e013      	b.n	243fa <spi_data_write+0x9a>
			else
				order = 0x1;
   243d2:	2312      	movs	r3, #18
   243d4:	18fb      	adds	r3, r7, r3
   243d6:	2201      	movs	r2, #1
   243d8:	701a      	strb	r2, [r3, #0]
   243da:	e00e      	b.n	243fa <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   243dc:	1cbb      	adds	r3, r7, #2
   243de:	881a      	ldrh	r2, [r3, #0]
   243e0:	2380      	movs	r3, #128	; 0x80
   243e2:	019b      	lsls	r3, r3, #6
   243e4:	429a      	cmp	r2, r3
   243e6:	d804      	bhi.n	243f2 <spi_data_write+0x92>
				order = 0x3;
   243e8:	2312      	movs	r3, #18
   243ea:	18fb      	adds	r3, r7, r3
   243ec:	2203      	movs	r2, #3
   243ee:	701a      	strb	r2, [r3, #0]
   243f0:	e003      	b.n	243fa <spi_data_write+0x9a>
			else
				order = 0x2;
   243f2:	2312      	movs	r3, #18
   243f4:	18fb      	adds	r3, r7, r3
   243f6:	2202      	movs	r2, #2
   243f8:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   243fa:	2311      	movs	r3, #17
   243fc:	18fb      	adds	r3, r7, r3
   243fe:	781a      	ldrb	r2, [r3, #0]
   24400:	2312      	movs	r3, #18
   24402:	18fb      	adds	r3, r7, r3
   24404:	781b      	ldrb	r3, [r3, #0]
   24406:	4313      	orrs	r3, r2
   24408:	b2da      	uxtb	r2, r3
   2440a:	2311      	movs	r3, #17
   2440c:	18fb      	adds	r3, r7, r3
   2440e:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   24410:	2311      	movs	r3, #17
   24412:	18fb      	adds	r3, r7, r3
   24414:	2101      	movs	r1, #1
   24416:	0018      	movs	r0, r3
   24418:	4b3c      	ldr	r3, [pc, #240]	; (2450c <spi_data_write+0x1ac>)
   2441a:	4798      	blx	r3
   2441c:	1e03      	subs	r3, r0, #0
   2441e:	d012      	beq.n	24446 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   24420:	4a3b      	ldr	r2, [pc, #236]	; (24510 <spi_data_write+0x1b0>)
   24422:	493c      	ldr	r1, [pc, #240]	; (24514 <spi_data_write+0x1b4>)
   24424:	4b3c      	ldr	r3, [pc, #240]	; (24518 <spi_data_write+0x1b8>)
   24426:	0018      	movs	r0, r3
   24428:	4b3c      	ldr	r3, [pc, #240]	; (2451c <spi_data_write+0x1bc>)
   2442a:	4798      	blx	r3
   2442c:	4b3c      	ldr	r3, [pc, #240]	; (24520 <spi_data_write+0x1c0>)
   2442e:	0018      	movs	r0, r3
   24430:	4b3a      	ldr	r3, [pc, #232]	; (2451c <spi_data_write+0x1bc>)
   24432:	4798      	blx	r3
   24434:	4b3b      	ldr	r3, [pc, #236]	; (24524 <spi_data_write+0x1c4>)
   24436:	0018      	movs	r0, r3
   24438:	4b38      	ldr	r3, [pc, #224]	; (2451c <spi_data_write+0x1bc>)
   2443a:	4798      	blx	r3
			result = N_FAIL;
   2443c:	2313      	movs	r3, #19
   2443e:	18fb      	adds	r3, r7, r3
   24440:	2200      	movs	r2, #0
   24442:	701a      	strb	r2, [r3, #0]
			break;
   24444:	e059      	b.n	244fa <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   24446:	2316      	movs	r3, #22
   24448:	18fb      	adds	r3, r7, r3
   2444a:	2200      	movs	r2, #0
   2444c:	5e9b      	ldrsh	r3, [r3, r2]
   2444e:	687a      	ldr	r2, [r7, #4]
   24450:	18d2      	adds	r2, r2, r3
   24452:	2314      	movs	r3, #20
   24454:	18fb      	adds	r3, r7, r3
   24456:	881b      	ldrh	r3, [r3, #0]
   24458:	0019      	movs	r1, r3
   2445a:	0010      	movs	r0, r2
   2445c:	4b2b      	ldr	r3, [pc, #172]	; (2450c <spi_data_write+0x1ac>)
   2445e:	4798      	blx	r3
   24460:	1e03      	subs	r3, r0, #0
   24462:	d012      	beq.n	2448a <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   24464:	4a30      	ldr	r2, [pc, #192]	; (24528 <spi_data_write+0x1c8>)
   24466:	492b      	ldr	r1, [pc, #172]	; (24514 <spi_data_write+0x1b4>)
   24468:	4b2b      	ldr	r3, [pc, #172]	; (24518 <spi_data_write+0x1b8>)
   2446a:	0018      	movs	r0, r3
   2446c:	4b2b      	ldr	r3, [pc, #172]	; (2451c <spi_data_write+0x1bc>)
   2446e:	4798      	blx	r3
   24470:	4b2e      	ldr	r3, [pc, #184]	; (2452c <spi_data_write+0x1cc>)
   24472:	0018      	movs	r0, r3
   24474:	4b29      	ldr	r3, [pc, #164]	; (2451c <spi_data_write+0x1bc>)
   24476:	4798      	blx	r3
   24478:	4b2a      	ldr	r3, [pc, #168]	; (24524 <spi_data_write+0x1c4>)
   2447a:	0018      	movs	r0, r3
   2447c:	4b27      	ldr	r3, [pc, #156]	; (2451c <spi_data_write+0x1bc>)
   2447e:	4798      	blx	r3
			result = N_FAIL;
   24480:	2313      	movs	r3, #19
   24482:	18fb      	adds	r3, r7, r3
   24484:	2200      	movs	r2, #0
   24486:	701a      	strb	r2, [r3, #0]
			break;
   24488:	e037      	b.n	244fa <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   2448a:	4b29      	ldr	r3, [pc, #164]	; (24530 <spi_data_write+0x1d0>)
   2448c:	781b      	ldrb	r3, [r3, #0]
   2448e:	2b00      	cmp	r3, #0
   24490:	d11b      	bne.n	244ca <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   24492:	230c      	movs	r3, #12
   24494:	18fb      	adds	r3, r7, r3
   24496:	2102      	movs	r1, #2
   24498:	0018      	movs	r0, r3
   2449a:	4b1c      	ldr	r3, [pc, #112]	; (2450c <spi_data_write+0x1ac>)
   2449c:	4798      	blx	r3
   2449e:	1e03      	subs	r3, r0, #0
   244a0:	d013      	beq.n	244ca <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   244a2:	23d7      	movs	r3, #215	; 0xd7
   244a4:	009a      	lsls	r2, r3, #2
   244a6:	491b      	ldr	r1, [pc, #108]	; (24514 <spi_data_write+0x1b4>)
   244a8:	4b1b      	ldr	r3, [pc, #108]	; (24518 <spi_data_write+0x1b8>)
   244aa:	0018      	movs	r0, r3
   244ac:	4b1b      	ldr	r3, [pc, #108]	; (2451c <spi_data_write+0x1bc>)
   244ae:	4798      	blx	r3
   244b0:	4b20      	ldr	r3, [pc, #128]	; (24534 <spi_data_write+0x1d4>)
   244b2:	0018      	movs	r0, r3
   244b4:	4b19      	ldr	r3, [pc, #100]	; (2451c <spi_data_write+0x1bc>)
   244b6:	4798      	blx	r3
   244b8:	4b1a      	ldr	r3, [pc, #104]	; (24524 <spi_data_write+0x1c4>)
   244ba:	0018      	movs	r0, r3
   244bc:	4b17      	ldr	r3, [pc, #92]	; (2451c <spi_data_write+0x1bc>)
   244be:	4798      	blx	r3
				result = N_FAIL;
   244c0:	2313      	movs	r3, #19
   244c2:	18fb      	adds	r3, r7, r3
   244c4:	2200      	movs	r2, #0
   244c6:	701a      	strb	r2, [r3, #0]
				break;
   244c8:	e017      	b.n	244fa <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   244ca:	2316      	movs	r3, #22
   244cc:	18fb      	adds	r3, r7, r3
   244ce:	881a      	ldrh	r2, [r3, #0]
   244d0:	2314      	movs	r3, #20
   244d2:	18fb      	adds	r3, r7, r3
   244d4:	881b      	ldrh	r3, [r3, #0]
   244d6:	18d3      	adds	r3, r2, r3
   244d8:	b29a      	uxth	r2, r3
   244da:	2316      	movs	r3, #22
   244dc:	18fb      	adds	r3, r7, r3
   244de:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   244e0:	1cbb      	adds	r3, r7, #2
   244e2:	1cb9      	adds	r1, r7, #2
   244e4:	2214      	movs	r2, #20
   244e6:	18ba      	adds	r2, r7, r2
   244e8:	8809      	ldrh	r1, [r1, #0]
   244ea:	8812      	ldrh	r2, [r2, #0]
   244ec:	1a8a      	subs	r2, r1, r2
   244ee:	801a      	strh	r2, [r3, #0]
	} while (sz);
   244f0:	1cbb      	adds	r3, r7, #2
   244f2:	881b      	ldrh	r3, [r3, #0]
   244f4:	2b00      	cmp	r3, #0
   244f6:	d000      	beq.n	244fa <spi_data_write+0x19a>
   244f8:	e745      	b.n	24386 <spi_data_write+0x26>


	return result;
   244fa:	2313      	movs	r3, #19
   244fc:	18fb      	adds	r3, r7, r3
   244fe:	781b      	ldrb	r3, [r3, #0]
   24500:	b25b      	sxtb	r3, r3
}
   24502:	0018      	movs	r0, r3
   24504:	46bd      	mov	sp, r7
   24506:	b006      	add	sp, #24
   24508:	bd80      	pop	{r7, pc}
   2450a:	46c0      	nop			; (mov r8, r8)
   2450c:	000233e9 	.word	0x000233e9
   24510:	00000349 	.word	0x00000349
   24514:	000394b0 	.word	0x000394b0
   24518:	00038e88 	.word	0x00038e88
   2451c:	0001df59 	.word	0x0001df59
   24520:	00039150 	.word	0x00039150
   24524:	00038ec8 	.word	0x00038ec8
   24528:	00000352 	.word	0x00000352
   2452c:	00039188 	.word	0x00039188
   24530:	20004130 	.word	0x20004130
   24534:	000391bc 	.word	0x000391bc

00024538 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   24538:	b590      	push	{r4, r7, lr}
   2453a:	b087      	sub	sp, #28
   2453c:	af02      	add	r7, sp, #8
   2453e:	6078      	str	r0, [r7, #4]
   24540:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   24542:	230f      	movs	r3, #15
   24544:	18fb      	adds	r3, r7, r3
   24546:	220a      	movs	r2, #10
   24548:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2454a:	230c      	movs	r3, #12
   2454c:	18fb      	adds	r3, r7, r3
   2454e:	2201      	movs	r2, #1
   24550:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   24552:	230e      	movs	r3, #14
   24554:	18fb      	adds	r3, r7, r3
   24556:	22c9      	movs	r2, #201	; 0xc9
   24558:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   2455a:	230d      	movs	r3, #13
   2455c:	18fb      	adds	r3, r7, r3
   2455e:	2200      	movs	r2, #0
   24560:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   24562:	687b      	ldr	r3, [r7, #4]
   24564:	2b30      	cmp	r3, #48	; 0x30
   24566:	d808      	bhi.n	2457a <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   24568:	230e      	movs	r3, #14
   2456a:	18fb      	adds	r3, r7, r3
   2456c:	22c3      	movs	r2, #195	; 0xc3
   2456e:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   24570:	230d      	movs	r3, #13
   24572:	18fb      	adds	r3, r7, r3
   24574:	2201      	movs	r2, #1
   24576:	701a      	strb	r2, [r3, #0]
   24578:	e007      	b.n	2458a <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   2457a:	230e      	movs	r3, #14
   2457c:	18fb      	adds	r3, r7, r3
   2457e:	22c9      	movs	r2, #201	; 0xc9
   24580:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   24582:	230d      	movs	r3, #13
   24584:	18fb      	adds	r3, r7, r3
   24586:	2200      	movs	r2, #0
   24588:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   2458a:	003a      	movs	r2, r7
   2458c:	6879      	ldr	r1, [r7, #4]
   2458e:	230e      	movs	r3, #14
   24590:	18fb      	adds	r3, r7, r3
   24592:	7818      	ldrb	r0, [r3, #0]
   24594:	230d      	movs	r3, #13
   24596:	18fb      	adds	r3, r7, r3
   24598:	781b      	ldrb	r3, [r3, #0]
   2459a:	9300      	str	r3, [sp, #0]
   2459c:	2304      	movs	r3, #4
   2459e:	4c2e      	ldr	r4, [pc, #184]	; (24658 <spi_write_reg+0x120>)
   245a0:	47a0      	blx	r4
   245a2:	0002      	movs	r2, r0
   245a4:	230c      	movs	r3, #12
   245a6:	18fb      	adds	r3, r7, r3
   245a8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   245aa:	230c      	movs	r3, #12
   245ac:	18fb      	adds	r3, r7, r3
   245ae:	781b      	ldrb	r3, [r3, #0]
   245b0:	b25b      	sxtb	r3, r3
   245b2:	2b01      	cmp	r3, #1
   245b4:	d010      	beq.n	245d8 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   245b6:	4a29      	ldr	r2, [pc, #164]	; (2465c <spi_write_reg+0x124>)
   245b8:	4929      	ldr	r1, [pc, #164]	; (24660 <spi_write_reg+0x128>)
   245ba:	4b2a      	ldr	r3, [pc, #168]	; (24664 <spi_write_reg+0x12c>)
   245bc:	0018      	movs	r0, r3
   245be:	4b2a      	ldr	r3, [pc, #168]	; (24668 <spi_write_reg+0x130>)
   245c0:	4798      	blx	r3
   245c2:	687a      	ldr	r2, [r7, #4]
   245c4:	4b29      	ldr	r3, [pc, #164]	; (2466c <spi_write_reg+0x134>)
   245c6:	0011      	movs	r1, r2
   245c8:	0018      	movs	r0, r3
   245ca:	4b27      	ldr	r3, [pc, #156]	; (24668 <spi_write_reg+0x130>)
   245cc:	4798      	blx	r3
   245ce:	4b28      	ldr	r3, [pc, #160]	; (24670 <spi_write_reg+0x138>)
   245d0:	0018      	movs	r0, r3
   245d2:	4b25      	ldr	r3, [pc, #148]	; (24668 <spi_write_reg+0x130>)
   245d4:	4798      	blx	r3
		goto _FAIL_;
   245d6:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   245d8:	230c      	movs	r3, #12
   245da:	18fb      	adds	r3, r7, r3
   245dc:	781b      	ldrb	r3, [r3, #0]
   245de:	b25b      	sxtb	r3, r3
   245e0:	2b01      	cmp	r3, #1
   245e2:	d030      	beq.n	24646 <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   245e4:	2001      	movs	r0, #1
   245e6:	4b23      	ldr	r3, [pc, #140]	; (24674 <spi_write_reg+0x13c>)
   245e8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   245ea:	2300      	movs	r3, #0
   245ec:	9300      	str	r3, [sp, #0]
   245ee:	2300      	movs	r3, #0
   245f0:	2200      	movs	r2, #0
   245f2:	2100      	movs	r1, #0
   245f4:	20cf      	movs	r0, #207	; 0xcf
   245f6:	4c20      	ldr	r4, [pc, #128]	; (24678 <spi_write_reg+0x140>)
   245f8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   245fa:	20cf      	movs	r0, #207	; 0xcf
   245fc:	4b1f      	ldr	r3, [pc, #124]	; (2467c <spi_write_reg+0x144>)
   245fe:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   24600:	23ea      	movs	r3, #234	; 0xea
   24602:	009a      	lsls	r2, r3, #2
   24604:	4916      	ldr	r1, [pc, #88]	; (24660 <spi_write_reg+0x128>)
   24606:	4b17      	ldr	r3, [pc, #92]	; (24664 <spi_write_reg+0x12c>)
   24608:	0018      	movs	r0, r3
   2460a:	4b17      	ldr	r3, [pc, #92]	; (24668 <spi_write_reg+0x130>)
   2460c:	4798      	blx	r3
   2460e:	230f      	movs	r3, #15
   24610:	18fb      	adds	r3, r7, r3
   24612:	7819      	ldrb	r1, [r3, #0]
   24614:	683b      	ldr	r3, [r7, #0]
   24616:	687a      	ldr	r2, [r7, #4]
   24618:	4819      	ldr	r0, [pc, #100]	; (24680 <spi_write_reg+0x148>)
   2461a:	4c13      	ldr	r4, [pc, #76]	; (24668 <spi_write_reg+0x130>)
   2461c:	47a0      	blx	r4
   2461e:	4b14      	ldr	r3, [pc, #80]	; (24670 <spi_write_reg+0x138>)
   24620:	0018      	movs	r0, r3
   24622:	4b11      	ldr	r3, [pc, #68]	; (24668 <spi_write_reg+0x130>)
   24624:	4798      	blx	r3
		nm_bsp_sleep(1);
   24626:	2001      	movs	r0, #1
   24628:	4b12      	ldr	r3, [pc, #72]	; (24674 <spi_write_reg+0x13c>)
   2462a:	4798      	blx	r3
		retry--;
   2462c:	230f      	movs	r3, #15
   2462e:	18fb      	adds	r3, r7, r3
   24630:	781a      	ldrb	r2, [r3, #0]
   24632:	230f      	movs	r3, #15
   24634:	18fb      	adds	r3, r7, r3
   24636:	3a01      	subs	r2, #1
   24638:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2463a:	230f      	movs	r3, #15
   2463c:	18fb      	adds	r3, r7, r3
   2463e:	781b      	ldrb	r3, [r3, #0]
   24640:	2b00      	cmp	r3, #0
   24642:	d000      	beq.n	24646 <spi_write_reg+0x10e>
   24644:	e78d      	b.n	24562 <spi_write_reg+0x2a>
	}

	return result;
   24646:	230c      	movs	r3, #12
   24648:	18fb      	adds	r3, r7, r3
   2464a:	781b      	ldrb	r3, [r3, #0]
   2464c:	b25b      	sxtb	r3, r3
}
   2464e:	0018      	movs	r0, r3
   24650:	46bd      	mov	sp, r7
   24652:	b005      	add	sp, #20
   24654:	bd90      	pop	{r4, r7, pc}
   24656:	46c0      	nop			; (mov r8, r8)
   24658:	00023a6d 	.word	0x00023a6d
   2465c:	0000039d 	.word	0x0000039d
   24660:	000394c0 	.word	0x000394c0
   24664:	00038e88 	.word	0x00038e88
   24668:	0001df59 	.word	0x0001df59
   2466c:	000391f4 	.word	0x000391f4
   24670:	00038ec8 	.word	0x00038ec8
   24674:	000203ad 	.word	0x000203ad
   24678:	000234f1 	.word	0x000234f1
   2467c:	00023931 	.word	0x00023931
   24680:	00039220 	.word	0x00039220

00024684 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   24684:	b590      	push	{r4, r7, lr}
   24686:	b089      	sub	sp, #36	; 0x24
   24688:	af02      	add	r7, sp, #8
   2468a:	60f8      	str	r0, [r7, #12]
   2468c:	60b9      	str	r1, [r7, #8]
   2468e:	1dbb      	adds	r3, r7, #6
   24690:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24692:	2316      	movs	r3, #22
   24694:	18fb      	adds	r3, r7, r3
   24696:	220a      	movs	r2, #10
   24698:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2469a:	2315      	movs	r3, #21
   2469c:	18fb      	adds	r3, r7, r3
   2469e:	22c7      	movs	r2, #199	; 0xc7
   246a0:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   246a2:	1dbb      	adds	r3, r7, #6
   246a4:	881a      	ldrh	r2, [r3, #0]
   246a6:	68f9      	ldr	r1, [r7, #12]
   246a8:	2315      	movs	r3, #21
   246aa:	18fb      	adds	r3, r7, r3
   246ac:	7818      	ldrb	r0, [r3, #0]
   246ae:	2300      	movs	r3, #0
   246b0:	9300      	str	r3, [sp, #0]
   246b2:	0013      	movs	r3, r2
   246b4:	2200      	movs	r2, #0
   246b6:	4c4d      	ldr	r4, [pc, #308]	; (247ec <nm_spi_write+0x168>)
   246b8:	47a0      	blx	r4
   246ba:	0002      	movs	r2, r0
   246bc:	2317      	movs	r3, #23
   246be:	18fb      	adds	r3, r7, r3
   246c0:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   246c2:	2317      	movs	r3, #23
   246c4:	18fb      	adds	r3, r7, r3
   246c6:	781b      	ldrb	r3, [r3, #0]
   246c8:	b25b      	sxtb	r3, r3
   246ca:	2b01      	cmp	r3, #1
   246cc:	d010      	beq.n	246f0 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   246ce:	4a48      	ldr	r2, [pc, #288]	; (247f0 <nm_spi_write+0x16c>)
   246d0:	4948      	ldr	r1, [pc, #288]	; (247f4 <nm_spi_write+0x170>)
   246d2:	4b49      	ldr	r3, [pc, #292]	; (247f8 <nm_spi_write+0x174>)
   246d4:	0018      	movs	r0, r3
   246d6:	4b49      	ldr	r3, [pc, #292]	; (247fc <nm_spi_write+0x178>)
   246d8:	4798      	blx	r3
   246da:	68fa      	ldr	r2, [r7, #12]
   246dc:	4b48      	ldr	r3, [pc, #288]	; (24800 <nm_spi_write+0x17c>)
   246de:	0011      	movs	r1, r2
   246e0:	0018      	movs	r0, r3
   246e2:	4b46      	ldr	r3, [pc, #280]	; (247fc <nm_spi_write+0x178>)
   246e4:	4798      	blx	r3
   246e6:	4b47      	ldr	r3, [pc, #284]	; (24804 <nm_spi_write+0x180>)
   246e8:	0018      	movs	r0, r3
   246ea:	4b44      	ldr	r3, [pc, #272]	; (247fc <nm_spi_write+0x178>)
   246ec:	4798      	blx	r3
		goto _FAIL_;
   246ee:	e03e      	b.n	2476e <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   246f0:	2317      	movs	r3, #23
   246f2:	18fc      	adds	r4, r7, r3
   246f4:	1dbb      	adds	r3, r7, #6
   246f6:	881a      	ldrh	r2, [r3, #0]
   246f8:	68bb      	ldr	r3, [r7, #8]
   246fa:	0011      	movs	r1, r2
   246fc:	0018      	movs	r0, r3
   246fe:	4b42      	ldr	r3, [pc, #264]	; (24808 <nm_spi_write+0x184>)
   24700:	4798      	blx	r3
   24702:	0003      	movs	r3, r0
   24704:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   24706:	2317      	movs	r3, #23
   24708:	18fb      	adds	r3, r7, r3
   2470a:	781b      	ldrb	r3, [r3, #0]
   2470c:	b25b      	sxtb	r3, r3
   2470e:	2b01      	cmp	r3, #1
   24710:	d00e      	beq.n	24730 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24712:	4a3e      	ldr	r2, [pc, #248]	; (2480c <nm_spi_write+0x188>)
   24714:	4937      	ldr	r1, [pc, #220]	; (247f4 <nm_spi_write+0x170>)
   24716:	4b38      	ldr	r3, [pc, #224]	; (247f8 <nm_spi_write+0x174>)
   24718:	0018      	movs	r0, r3
   2471a:	4b38      	ldr	r3, [pc, #224]	; (247fc <nm_spi_write+0x178>)
   2471c:	4798      	blx	r3
   2471e:	4b3c      	ldr	r3, [pc, #240]	; (24810 <nm_spi_write+0x18c>)
   24720:	0018      	movs	r0, r3
   24722:	4b36      	ldr	r3, [pc, #216]	; (247fc <nm_spi_write+0x178>)
   24724:	4798      	blx	r3
   24726:	4b37      	ldr	r3, [pc, #220]	; (24804 <nm_spi_write+0x180>)
   24728:	0018      	movs	r0, r3
   2472a:	4b34      	ldr	r3, [pc, #208]	; (247fc <nm_spi_write+0x178>)
   2472c:	4798      	blx	r3
		goto _FAIL_;
   2472e:	e01e      	b.n	2476e <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   24730:	2317      	movs	r3, #23
   24732:	18fc      	adds	r4, r7, r3
   24734:	2315      	movs	r3, #21
   24736:	18fb      	adds	r3, r7, r3
   24738:	781b      	ldrb	r3, [r3, #0]
   2473a:	0018      	movs	r0, r3
   2473c:	4b35      	ldr	r3, [pc, #212]	; (24814 <nm_spi_write+0x190>)
   2473e:	4798      	blx	r3
   24740:	0003      	movs	r3, r0
   24742:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   24744:	2317      	movs	r3, #23
   24746:	18fb      	adds	r3, r7, r3
   24748:	781b      	ldrb	r3, [r3, #0]
   2474a:	b25b      	sxtb	r3, r3
   2474c:	2b01      	cmp	r3, #1
   2474e:	d00e      	beq.n	2476e <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24750:	4a31      	ldr	r2, [pc, #196]	; (24818 <nm_spi_write+0x194>)
   24752:	4928      	ldr	r1, [pc, #160]	; (247f4 <nm_spi_write+0x170>)
   24754:	4b28      	ldr	r3, [pc, #160]	; (247f8 <nm_spi_write+0x174>)
   24756:	0018      	movs	r0, r3
   24758:	4b28      	ldr	r3, [pc, #160]	; (247fc <nm_spi_write+0x178>)
   2475a:	4798      	blx	r3
   2475c:	4b2c      	ldr	r3, [pc, #176]	; (24810 <nm_spi_write+0x18c>)
   2475e:	0018      	movs	r0, r3
   24760:	4b26      	ldr	r3, [pc, #152]	; (247fc <nm_spi_write+0x178>)
   24762:	4798      	blx	r3
   24764:	4b27      	ldr	r3, [pc, #156]	; (24804 <nm_spi_write+0x180>)
   24766:	0018      	movs	r0, r3
   24768:	4b24      	ldr	r3, [pc, #144]	; (247fc <nm_spi_write+0x178>)
   2476a:	4798      	blx	r3
		goto _FAIL_;
   2476c:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   2476e:	2317      	movs	r3, #23
   24770:	18fb      	adds	r3, r7, r3
   24772:	781b      	ldrb	r3, [r3, #0]
   24774:	b25b      	sxtb	r3, r3
   24776:	2b01      	cmp	r3, #1
   24778:	d030      	beq.n	247dc <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   2477a:	2001      	movs	r0, #1
   2477c:	4b27      	ldr	r3, [pc, #156]	; (2481c <nm_spi_write+0x198>)
   2477e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24780:	2300      	movs	r3, #0
   24782:	9300      	str	r3, [sp, #0]
   24784:	2300      	movs	r3, #0
   24786:	2200      	movs	r2, #0
   24788:	2100      	movs	r1, #0
   2478a:	20cf      	movs	r0, #207	; 0xcf
   2478c:	4c24      	ldr	r4, [pc, #144]	; (24820 <nm_spi_write+0x19c>)
   2478e:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24790:	20cf      	movs	r0, #207	; 0xcf
   24792:	4b24      	ldr	r3, [pc, #144]	; (24824 <nm_spi_write+0x1a0>)
   24794:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   24796:	4a24      	ldr	r2, [pc, #144]	; (24828 <nm_spi_write+0x1a4>)
   24798:	4916      	ldr	r1, [pc, #88]	; (247f4 <nm_spi_write+0x170>)
   2479a:	4b17      	ldr	r3, [pc, #92]	; (247f8 <nm_spi_write+0x174>)
   2479c:	0018      	movs	r0, r3
   2479e:	4b17      	ldr	r3, [pc, #92]	; (247fc <nm_spi_write+0x178>)
   247a0:	4798      	blx	r3
   247a2:	2316      	movs	r3, #22
   247a4:	18fb      	adds	r3, r7, r3
   247a6:	7819      	ldrb	r1, [r3, #0]
   247a8:	1dbb      	adds	r3, r7, #6
   247aa:	881b      	ldrh	r3, [r3, #0]
   247ac:	68fa      	ldr	r2, [r7, #12]
   247ae:	481f      	ldr	r0, [pc, #124]	; (2482c <nm_spi_write+0x1a8>)
   247b0:	4c12      	ldr	r4, [pc, #72]	; (247fc <nm_spi_write+0x178>)
   247b2:	47a0      	blx	r4
   247b4:	4b13      	ldr	r3, [pc, #76]	; (24804 <nm_spi_write+0x180>)
   247b6:	0018      	movs	r0, r3
   247b8:	4b10      	ldr	r3, [pc, #64]	; (247fc <nm_spi_write+0x178>)
   247ba:	4798      	blx	r3
		nm_bsp_sleep(1);
   247bc:	2001      	movs	r0, #1
   247be:	4b17      	ldr	r3, [pc, #92]	; (2481c <nm_spi_write+0x198>)
   247c0:	4798      	blx	r3
		retry--;
   247c2:	2316      	movs	r3, #22
   247c4:	18fb      	adds	r3, r7, r3
   247c6:	781a      	ldrb	r2, [r3, #0]
   247c8:	2316      	movs	r3, #22
   247ca:	18fb      	adds	r3, r7, r3
   247cc:	3a01      	subs	r2, #1
   247ce:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   247d0:	2316      	movs	r3, #22
   247d2:	18fb      	adds	r3, r7, r3
   247d4:	781b      	ldrb	r3, [r3, #0]
   247d6:	2b00      	cmp	r3, #0
   247d8:	d000      	beq.n	247dc <nm_spi_write+0x158>
   247da:	e762      	b.n	246a2 <nm_spi_write+0x1e>
	}


	return result;
   247dc:	2317      	movs	r3, #23
   247de:	18fb      	adds	r3, r7, r3
   247e0:	781b      	ldrb	r3, [r3, #0]
   247e2:	b25b      	sxtb	r3, r3
}
   247e4:	0018      	movs	r0, r3
   247e6:	46bd      	mov	sp, r7
   247e8:	b007      	add	sp, #28
   247ea:	bd90      	pop	{r4, r7, pc}
   247ec:	00023a6d 	.word	0x00023a6d
   247f0:	000003cf 	.word	0x000003cf
   247f4:	000394d0 	.word	0x000394d0
   247f8:	00038e88 	.word	0x00038e88
   247fc:	0001df59 	.word	0x0001df59
   24800:	0003923c 	.word	0x0003923c
   24804:	00038ec8 	.word	0x00038ec8
   24808:	00024361 	.word	0x00024361
   2480c:	000003d9 	.word	0x000003d9
   24810:	0003926c 	.word	0x0003926c
   24814:	00023831 	.word	0x00023831
   24818:	000003e1 	.word	0x000003e1
   2481c:	000203ad 	.word	0x000203ad
   24820:	000234f1 	.word	0x000234f1
   24824:	00023931 	.word	0x00023931
   24828:	000003eb 	.word	0x000003eb
   2482c:	00039294 	.word	0x00039294

00024830 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   24830:	b590      	push	{r4, r7, lr}
   24832:	b087      	sub	sp, #28
   24834:	af02      	add	r7, sp, #8
   24836:	6078      	str	r0, [r7, #4]
   24838:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2483a:	230f      	movs	r3, #15
   2483c:	18fb      	adds	r3, r7, r3
   2483e:	220a      	movs	r2, #10
   24840:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24842:	230c      	movs	r3, #12
   24844:	18fb      	adds	r3, r7, r3
   24846:	2201      	movs	r2, #1
   24848:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   2484a:	230e      	movs	r3, #14
   2484c:	18fb      	adds	r3, r7, r3
   2484e:	22ca      	movs	r2, #202	; 0xca
   24850:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   24852:	230d      	movs	r3, #13
   24854:	18fb      	adds	r3, r7, r3
   24856:	2200      	movs	r2, #0
   24858:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   2485a:	687b      	ldr	r3, [r7, #4]
   2485c:	2bff      	cmp	r3, #255	; 0xff
   2485e:	d808      	bhi.n	24872 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   24860:	230e      	movs	r3, #14
   24862:	18fb      	adds	r3, r7, r3
   24864:	22c4      	movs	r2, #196	; 0xc4
   24866:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   24868:	230d      	movs	r3, #13
   2486a:	18fb      	adds	r3, r7, r3
   2486c:	2201      	movs	r2, #1
   2486e:	701a      	strb	r2, [r3, #0]
   24870:	e007      	b.n	24882 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   24872:	230e      	movs	r3, #14
   24874:	18fb      	adds	r3, r7, r3
   24876:	22ca      	movs	r2, #202	; 0xca
   24878:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2487a:	230d      	movs	r3, #13
   2487c:	18fb      	adds	r3, r7, r3
   2487e:	2200      	movs	r2, #0
   24880:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   24882:	2308      	movs	r3, #8
   24884:	18fa      	adds	r2, r7, r3
   24886:	6879      	ldr	r1, [r7, #4]
   24888:	230e      	movs	r3, #14
   2488a:	18fb      	adds	r3, r7, r3
   2488c:	7818      	ldrb	r0, [r3, #0]
   2488e:	230d      	movs	r3, #13
   24890:	18fb      	adds	r3, r7, r3
   24892:	781b      	ldrb	r3, [r3, #0]
   24894:	9300      	str	r3, [sp, #0]
   24896:	2304      	movs	r3, #4
   24898:	4c37      	ldr	r4, [pc, #220]	; (24978 <spi_read_reg+0x148>)
   2489a:	47a0      	blx	r4
   2489c:	0002      	movs	r2, r0
   2489e:	230c      	movs	r3, #12
   248a0:	18fb      	adds	r3, r7, r3
   248a2:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   248a4:	230c      	movs	r3, #12
   248a6:	18fb      	adds	r3, r7, r3
   248a8:	781b      	ldrb	r3, [r3, #0]
   248aa:	b25b      	sxtb	r3, r3
   248ac:	2b01      	cmp	r3, #1
   248ae:	d010      	beq.n	248d2 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   248b0:	4a32      	ldr	r2, [pc, #200]	; (2497c <spi_read_reg+0x14c>)
   248b2:	4933      	ldr	r1, [pc, #204]	; (24980 <spi_read_reg+0x150>)
   248b4:	4b33      	ldr	r3, [pc, #204]	; (24984 <spi_read_reg+0x154>)
   248b6:	0018      	movs	r0, r3
   248b8:	4b33      	ldr	r3, [pc, #204]	; (24988 <spi_read_reg+0x158>)
   248ba:	4798      	blx	r3
   248bc:	687a      	ldr	r2, [r7, #4]
   248be:	4b33      	ldr	r3, [pc, #204]	; (2498c <spi_read_reg+0x15c>)
   248c0:	0011      	movs	r1, r2
   248c2:	0018      	movs	r0, r3
   248c4:	4b30      	ldr	r3, [pc, #192]	; (24988 <spi_read_reg+0x158>)
   248c6:	4798      	blx	r3
   248c8:	4b31      	ldr	r3, [pc, #196]	; (24990 <spi_read_reg+0x160>)
   248ca:	0018      	movs	r0, r3
   248cc:	4b2e      	ldr	r3, [pc, #184]	; (24988 <spi_read_reg+0x158>)
   248ce:	4798      	blx	r3
		goto _FAIL_;
   248d0:	e014      	b.n	248fc <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   248d2:	2308      	movs	r3, #8
   248d4:	18fb      	adds	r3, r7, r3
   248d6:	781b      	ldrb	r3, [r3, #0]
   248d8:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   248da:	2308      	movs	r3, #8
   248dc:	18fb      	adds	r3, r7, r3
   248de:	785b      	ldrb	r3, [r3, #1]
   248e0:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   248e2:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   248e4:	2308      	movs	r3, #8
   248e6:	18fb      	adds	r3, r7, r3
   248e8:	789b      	ldrb	r3, [r3, #2]
   248ea:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   248ec:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   248ee:	2308      	movs	r3, #8
   248f0:	18fb      	adds	r3, r7, r3
   248f2:	78db      	ldrb	r3, [r3, #3]
   248f4:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   248f6:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   248f8:	683b      	ldr	r3, [r7, #0]
   248fa:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   248fc:	230c      	movs	r3, #12
   248fe:	18fb      	adds	r3, r7, r3
   24900:	781b      	ldrb	r3, [r3, #0]
   24902:	b25b      	sxtb	r3, r3
   24904:	2b01      	cmp	r3, #1
   24906:	d02f      	beq.n	24968 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   24908:	2001      	movs	r0, #1
   2490a:	4b22      	ldr	r3, [pc, #136]	; (24994 <spi_read_reg+0x164>)
   2490c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2490e:	2300      	movs	r3, #0
   24910:	9300      	str	r3, [sp, #0]
   24912:	2300      	movs	r3, #0
   24914:	2200      	movs	r2, #0
   24916:	2100      	movs	r1, #0
   24918:	20cf      	movs	r0, #207	; 0xcf
   2491a:	4c1f      	ldr	r4, [pc, #124]	; (24998 <spi_read_reg+0x168>)
   2491c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2491e:	20cf      	movs	r0, #207	; 0xcf
   24920:	4b1e      	ldr	r3, [pc, #120]	; (2499c <spi_read_reg+0x16c>)
   24922:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   24924:	4a1e      	ldr	r2, [pc, #120]	; (249a0 <spi_read_reg+0x170>)
   24926:	4916      	ldr	r1, [pc, #88]	; (24980 <spi_read_reg+0x150>)
   24928:	4b16      	ldr	r3, [pc, #88]	; (24984 <spi_read_reg+0x154>)
   2492a:	0018      	movs	r0, r3
   2492c:	4b16      	ldr	r3, [pc, #88]	; (24988 <spi_read_reg+0x158>)
   2492e:	4798      	blx	r3
   24930:	230f      	movs	r3, #15
   24932:	18fb      	adds	r3, r7, r3
   24934:	7819      	ldrb	r1, [r3, #0]
   24936:	687a      	ldr	r2, [r7, #4]
   24938:	4b1a      	ldr	r3, [pc, #104]	; (249a4 <spi_read_reg+0x174>)
   2493a:	0018      	movs	r0, r3
   2493c:	4b12      	ldr	r3, [pc, #72]	; (24988 <spi_read_reg+0x158>)
   2493e:	4798      	blx	r3
   24940:	4b13      	ldr	r3, [pc, #76]	; (24990 <spi_read_reg+0x160>)
   24942:	0018      	movs	r0, r3
   24944:	4b10      	ldr	r3, [pc, #64]	; (24988 <spi_read_reg+0x158>)
   24946:	4798      	blx	r3
		nm_bsp_sleep(1);
   24948:	2001      	movs	r0, #1
   2494a:	4b12      	ldr	r3, [pc, #72]	; (24994 <spi_read_reg+0x164>)
   2494c:	4798      	blx	r3
		retry--;
   2494e:	230f      	movs	r3, #15
   24950:	18fb      	adds	r3, r7, r3
   24952:	781a      	ldrb	r2, [r3, #0]
   24954:	230f      	movs	r3, #15
   24956:	18fb      	adds	r3, r7, r3
   24958:	3a01      	subs	r2, #1
   2495a:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2495c:	230f      	movs	r3, #15
   2495e:	18fb      	adds	r3, r7, r3
   24960:	781b      	ldrb	r3, [r3, #0]
   24962:	2b00      	cmp	r3, #0
   24964:	d000      	beq.n	24968 <spi_read_reg+0x138>
   24966:	e778      	b.n	2485a <spi_read_reg+0x2a>
	}
		
	return result;
   24968:	230c      	movs	r3, #12
   2496a:	18fb      	adds	r3, r7, r3
   2496c:	781b      	ldrb	r3, [r3, #0]
   2496e:	b25b      	sxtb	r3, r3
}
   24970:	0018      	movs	r0, r3
   24972:	46bd      	mov	sp, r7
   24974:	b005      	add	sp, #20
   24976:	bd90      	pop	{r4, r7, pc}
   24978:	00023a6d 	.word	0x00023a6d
   2497c:	00000423 	.word	0x00000423
   24980:	000394e0 	.word	0x000394e0
   24984:	00038e88 	.word	0x00038e88
   24988:	0001df59 	.word	0x0001df59
   2498c:	000392b0 	.word	0x000392b0
   24990:	00038ec8 	.word	0x00038ec8
   24994:	000203ad 	.word	0x000203ad
   24998:	000234f1 	.word	0x000234f1
   2499c:	00023931 	.word	0x00023931
   249a0:	00000435 	.word	0x00000435
   249a4:	000392dc 	.word	0x000392dc

000249a8 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   249a8:	b590      	push	{r4, r7, lr}
   249aa:	b089      	sub	sp, #36	; 0x24
   249ac:	af02      	add	r7, sp, #8
   249ae:	60f8      	str	r0, [r7, #12]
   249b0:	60b9      	str	r1, [r7, #8]
   249b2:	1dbb      	adds	r3, r7, #6
   249b4:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   249b6:	2316      	movs	r3, #22
   249b8:	18fb      	adds	r3, r7, r3
   249ba:	22c8      	movs	r2, #200	; 0xc8
   249bc:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   249be:	2317      	movs	r3, #23
   249c0:	18fb      	adds	r3, r7, r3
   249c2:	220a      	movs	r2, #10
   249c4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   249c6:	1dbb      	adds	r3, r7, #6
   249c8:	881c      	ldrh	r4, [r3, #0]
   249ca:	68ba      	ldr	r2, [r7, #8]
   249cc:	68f9      	ldr	r1, [r7, #12]
   249ce:	2316      	movs	r3, #22
   249d0:	18fb      	adds	r3, r7, r3
   249d2:	7818      	ldrb	r0, [r3, #0]
   249d4:	2300      	movs	r3, #0
   249d6:	9300      	str	r3, [sp, #0]
   249d8:	0023      	movs	r3, r4
   249da:	4c2e      	ldr	r4, [pc, #184]	; (24a94 <nm_spi_read+0xec>)
   249dc:	47a0      	blx	r4
   249de:	0002      	movs	r2, r0
   249e0:	2315      	movs	r3, #21
   249e2:	18fb      	adds	r3, r7, r3
   249e4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   249e6:	2315      	movs	r3, #21
   249e8:	18fb      	adds	r3, r7, r3
   249ea:	781b      	ldrb	r3, [r3, #0]
   249ec:	b25b      	sxtb	r3, r3
   249ee:	2b01      	cmp	r3, #1
   249f0:	d010      	beq.n	24a14 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   249f2:	4a29      	ldr	r2, [pc, #164]	; (24a98 <nm_spi_read+0xf0>)
   249f4:	4929      	ldr	r1, [pc, #164]	; (24a9c <nm_spi_read+0xf4>)
   249f6:	4b2a      	ldr	r3, [pc, #168]	; (24aa0 <nm_spi_read+0xf8>)
   249f8:	0018      	movs	r0, r3
   249fa:	4b2a      	ldr	r3, [pc, #168]	; (24aa4 <nm_spi_read+0xfc>)
   249fc:	4798      	blx	r3
   249fe:	68fa      	ldr	r2, [r7, #12]
   24a00:	4b29      	ldr	r3, [pc, #164]	; (24aa8 <nm_spi_read+0x100>)
   24a02:	0011      	movs	r1, r2
   24a04:	0018      	movs	r0, r3
   24a06:	4b27      	ldr	r3, [pc, #156]	; (24aa4 <nm_spi_read+0xfc>)
   24a08:	4798      	blx	r3
   24a0a:	4b28      	ldr	r3, [pc, #160]	; (24aac <nm_spi_read+0x104>)
   24a0c:	0018      	movs	r0, r3
   24a0e:	4b25      	ldr	r3, [pc, #148]	; (24aa4 <nm_spi_read+0xfc>)
   24a10:	4798      	blx	r3
		goto _FAIL_;
   24a12:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   24a14:	2315      	movs	r3, #21
   24a16:	18fb      	adds	r3, r7, r3
   24a18:	781b      	ldrb	r3, [r3, #0]
   24a1a:	b25b      	sxtb	r3, r3
   24a1c:	2b01      	cmp	r3, #1
   24a1e:	d030      	beq.n	24a82 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   24a20:	2001      	movs	r0, #1
   24a22:	4b23      	ldr	r3, [pc, #140]	; (24ab0 <nm_spi_read+0x108>)
   24a24:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24a26:	2300      	movs	r3, #0
   24a28:	9300      	str	r3, [sp, #0]
   24a2a:	2300      	movs	r3, #0
   24a2c:	2200      	movs	r2, #0
   24a2e:	2100      	movs	r1, #0
   24a30:	20cf      	movs	r0, #207	; 0xcf
   24a32:	4c20      	ldr	r4, [pc, #128]	; (24ab4 <nm_spi_read+0x10c>)
   24a34:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24a36:	20cf      	movs	r0, #207	; 0xcf
   24a38:	4b1f      	ldr	r3, [pc, #124]	; (24ab8 <nm_spi_read+0x110>)
   24a3a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   24a3c:	4a1f      	ldr	r2, [pc, #124]	; (24abc <nm_spi_read+0x114>)
   24a3e:	4917      	ldr	r1, [pc, #92]	; (24a9c <nm_spi_read+0xf4>)
   24a40:	4b17      	ldr	r3, [pc, #92]	; (24aa0 <nm_spi_read+0xf8>)
   24a42:	0018      	movs	r0, r3
   24a44:	4b17      	ldr	r3, [pc, #92]	; (24aa4 <nm_spi_read+0xfc>)
   24a46:	4798      	blx	r3
   24a48:	2317      	movs	r3, #23
   24a4a:	18fb      	adds	r3, r7, r3
   24a4c:	7819      	ldrb	r1, [r3, #0]
   24a4e:	1dbb      	adds	r3, r7, #6
   24a50:	881b      	ldrh	r3, [r3, #0]
   24a52:	68fa      	ldr	r2, [r7, #12]
   24a54:	481a      	ldr	r0, [pc, #104]	; (24ac0 <nm_spi_read+0x118>)
   24a56:	4c13      	ldr	r4, [pc, #76]	; (24aa4 <nm_spi_read+0xfc>)
   24a58:	47a0      	blx	r4
   24a5a:	4b14      	ldr	r3, [pc, #80]	; (24aac <nm_spi_read+0x104>)
   24a5c:	0018      	movs	r0, r3
   24a5e:	4b11      	ldr	r3, [pc, #68]	; (24aa4 <nm_spi_read+0xfc>)
   24a60:	4798      	blx	r3
		nm_bsp_sleep(1);
   24a62:	2001      	movs	r0, #1
   24a64:	4b12      	ldr	r3, [pc, #72]	; (24ab0 <nm_spi_read+0x108>)
   24a66:	4798      	blx	r3
		retry--;
   24a68:	2317      	movs	r3, #23
   24a6a:	18fb      	adds	r3, r7, r3
   24a6c:	781a      	ldrb	r2, [r3, #0]
   24a6e:	2317      	movs	r3, #23
   24a70:	18fb      	adds	r3, r7, r3
   24a72:	3a01      	subs	r2, #1
   24a74:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24a76:	2317      	movs	r3, #23
   24a78:	18fb      	adds	r3, r7, r3
   24a7a:	781b      	ldrb	r3, [r3, #0]
   24a7c:	2b00      	cmp	r3, #0
   24a7e:	d000      	beq.n	24a82 <nm_spi_read+0xda>
   24a80:	e7a1      	b.n	249c6 <nm_spi_read+0x1e>
	}

	return result;
   24a82:	2315      	movs	r3, #21
   24a84:	18fb      	adds	r3, r7, r3
   24a86:	781b      	ldrb	r3, [r3, #0]
   24a88:	b25b      	sxtb	r3, r3
}
   24a8a:	0018      	movs	r0, r3
   24a8c:	46bd      	mov	sp, r7
   24a8e:	b007      	add	sp, #28
   24a90:	bd90      	pop	{r4, r7, pc}
   24a92:	46c0      	nop			; (mov r8, r8)
   24a94:	00023a6d 	.word	0x00023a6d
   24a98:	00000472 	.word	0x00000472
   24a9c:	000394f0 	.word	0x000394f0
   24aa0:	00038e88 	.word	0x00038e88
   24aa4:	0001df59 	.word	0x0001df59
   24aa8:	000392f4 	.word	0x000392f4
   24aac:	00038ec8 	.word	0x00038ec8
   24ab0:	000203ad 	.word	0x000203ad
   24ab4:	000234f1 	.word	0x000234f1
   24ab8:	00023931 	.word	0x00023931
   24abc:	0000047d 	.word	0x0000047d
   24ac0:	00039294 	.word	0x00039294

00024ac4 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   24ac4:	b580      	push	{r7, lr}
   24ac6:	b082      	sub	sp, #8
   24ac8:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   24aca:	4b0c      	ldr	r3, [pc, #48]	; (24afc <spi_init_pkt_sz+0x38>)
   24acc:	0018      	movs	r0, r3
   24ace:	4b0c      	ldr	r3, [pc, #48]	; (24b00 <spi_init_pkt_sz+0x3c>)
   24ad0:	4798      	blx	r3
   24ad2:	0003      	movs	r3, r0
   24ad4:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   24ad6:	687b      	ldr	r3, [r7, #4]
   24ad8:	2270      	movs	r2, #112	; 0x70
   24ada:	4393      	bics	r3, r2
   24adc:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   24ade:	687b      	ldr	r3, [r7, #4]
   24ae0:	2250      	movs	r2, #80	; 0x50
   24ae2:	4313      	orrs	r3, r2
   24ae4:	607b      	str	r3, [r7, #4]
   24ae6:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   24ae8:	687b      	ldr	r3, [r7, #4]
   24aea:	4a04      	ldr	r2, [pc, #16]	; (24afc <spi_init_pkt_sz+0x38>)
   24aec:	0019      	movs	r1, r3
   24aee:	0010      	movs	r0, r2
   24af0:	4b04      	ldr	r3, [pc, #16]	; (24b04 <spi_init_pkt_sz+0x40>)
   24af2:	4798      	blx	r3
}
   24af4:	46c0      	nop			; (mov r8, r8)
   24af6:	46bd      	mov	sp, r7
   24af8:	b002      	add	sp, #8
   24afa:	bd80      	pop	{r7, pc}
   24afc:	0000e824 	.word	0x0000e824
   24b00:	00024c9d 	.word	0x00024c9d
   24b04:	00024d11 	.word	0x00024d11

00024b08 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   24b08:	b590      	push	{r4, r7, lr}
   24b0a:	b083      	sub	sp, #12
   24b0c:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24b0e:	2300      	movs	r3, #0
   24b10:	9300      	str	r3, [sp, #0]
   24b12:	2300      	movs	r3, #0
   24b14:	2200      	movs	r2, #0
   24b16:	2100      	movs	r1, #0
   24b18:	20cf      	movs	r0, #207	; 0xcf
   24b1a:	4c05      	ldr	r4, [pc, #20]	; (24b30 <nm_spi_reset+0x28>)
   24b1c:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   24b1e:	20cf      	movs	r0, #207	; 0xcf
   24b20:	4b04      	ldr	r3, [pc, #16]	; (24b34 <nm_spi_reset+0x2c>)
   24b22:	4798      	blx	r3
	return M2M_SUCCESS;
   24b24:	2300      	movs	r3, #0
}
   24b26:	0018      	movs	r0, r3
   24b28:	46bd      	mov	sp, r7
   24b2a:	b001      	add	sp, #4
   24b2c:	bd90      	pop	{r4, r7, pc}
   24b2e:	46c0      	nop			; (mov r8, r8)
   24b30:	000234f1 	.word	0x000234f1
   24b34:	00023931 	.word	0x00023931

00024b38 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   24b38:	b580      	push	{r7, lr}
   24b3a:	b082      	sub	sp, #8
   24b3c:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   24b3e:	2300      	movs	r3, #0
   24b40:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   24b42:	4b40      	ldr	r3, [pc, #256]	; (24c44 <nm_spi_init+0x10c>)
   24b44:	2200      	movs	r2, #0
   24b46:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   24b48:	003b      	movs	r3, r7
   24b4a:	4a3f      	ldr	r2, [pc, #252]	; (24c48 <nm_spi_init+0x110>)
   24b4c:	0019      	movs	r1, r3
   24b4e:	0010      	movs	r0, r2
   24b50:	4b3e      	ldr	r3, [pc, #248]	; (24c4c <nm_spi_init+0x114>)
   24b52:	4798      	blx	r3
   24b54:	1e03      	subs	r3, r0, #0
   24b56:	d129      	bne.n	24bac <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   24b58:	4b3a      	ldr	r3, [pc, #232]	; (24c44 <nm_spi_init+0x10c>)
   24b5a:	2201      	movs	r2, #1
   24b5c:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   24b5e:	2398      	movs	r3, #152	; 0x98
   24b60:	00da      	lsls	r2, r3, #3
   24b62:	493b      	ldr	r1, [pc, #236]	; (24c50 <nm_spi_init+0x118>)
   24b64:	4b3b      	ldr	r3, [pc, #236]	; (24c54 <nm_spi_init+0x11c>)
   24b66:	0018      	movs	r0, r3
   24b68:	4b3b      	ldr	r3, [pc, #236]	; (24c58 <nm_spi_init+0x120>)
   24b6a:	4798      	blx	r3
   24b6c:	4b3b      	ldr	r3, [pc, #236]	; (24c5c <nm_spi_init+0x124>)
   24b6e:	0018      	movs	r0, r3
   24b70:	4b39      	ldr	r3, [pc, #228]	; (24c58 <nm_spi_init+0x120>)
   24b72:	4798      	blx	r3
   24b74:	4b3a      	ldr	r3, [pc, #232]	; (24c60 <nm_spi_init+0x128>)
   24b76:	0018      	movs	r0, r3
   24b78:	4b37      	ldr	r3, [pc, #220]	; (24c58 <nm_spi_init+0x120>)
   24b7a:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   24b7c:	003b      	movs	r3, r7
   24b7e:	4a32      	ldr	r2, [pc, #200]	; (24c48 <nm_spi_init+0x110>)
   24b80:	0019      	movs	r1, r3
   24b82:	0010      	movs	r0, r2
   24b84:	4b31      	ldr	r3, [pc, #196]	; (24c4c <nm_spi_init+0x114>)
   24b86:	4798      	blx	r3
   24b88:	1e03      	subs	r3, r0, #0
   24b8a:	d10f      	bne.n	24bac <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   24b8c:	4a35      	ldr	r2, [pc, #212]	; (24c64 <nm_spi_init+0x12c>)
   24b8e:	4930      	ldr	r1, [pc, #192]	; (24c50 <nm_spi_init+0x118>)
   24b90:	4b30      	ldr	r3, [pc, #192]	; (24c54 <nm_spi_init+0x11c>)
   24b92:	0018      	movs	r0, r3
   24b94:	4b30      	ldr	r3, [pc, #192]	; (24c58 <nm_spi_init+0x120>)
   24b96:	4798      	blx	r3
   24b98:	4b33      	ldr	r3, [pc, #204]	; (24c68 <nm_spi_init+0x130>)
   24b9a:	0018      	movs	r0, r3
   24b9c:	4b2e      	ldr	r3, [pc, #184]	; (24c58 <nm_spi_init+0x120>)
   24b9e:	4798      	blx	r3
   24ba0:	4b2f      	ldr	r3, [pc, #188]	; (24c60 <nm_spi_init+0x128>)
   24ba2:	0018      	movs	r0, r3
   24ba4:	4b2c      	ldr	r3, [pc, #176]	; (24c58 <nm_spi_init+0x120>)
   24ba6:	4798      	blx	r3
			return 0;
   24ba8:	2300      	movs	r3, #0
   24baa:	e047      	b.n	24c3c <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   24bac:	4b25      	ldr	r3, [pc, #148]	; (24c44 <nm_spi_init+0x10c>)
   24bae:	781b      	ldrb	r3, [r3, #0]
   24bb0:	2b00      	cmp	r3, #0
   24bb2:	d126      	bne.n	24c02 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   24bb4:	683b      	ldr	r3, [r7, #0]
   24bb6:	220c      	movs	r2, #12
   24bb8:	4393      	bics	r3, r2
   24bba:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   24bbc:	683b      	ldr	r3, [r7, #0]
   24bbe:	2270      	movs	r2, #112	; 0x70
   24bc0:	4393      	bics	r3, r2
   24bc2:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   24bc4:	683b      	ldr	r3, [r7, #0]
   24bc6:	2250      	movs	r2, #80	; 0x50
   24bc8:	4313      	orrs	r3, r2
   24bca:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   24bcc:	683b      	ldr	r3, [r7, #0]
   24bce:	4a1e      	ldr	r2, [pc, #120]	; (24c48 <nm_spi_init+0x110>)
   24bd0:	0019      	movs	r1, r3
   24bd2:	0010      	movs	r0, r2
   24bd4:	4b25      	ldr	r3, [pc, #148]	; (24c6c <nm_spi_init+0x134>)
   24bd6:	4798      	blx	r3
   24bd8:	1e03      	subs	r3, r0, #0
   24bda:	d10f      	bne.n	24bfc <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   24bdc:	4a24      	ldr	r2, [pc, #144]	; (24c70 <nm_spi_init+0x138>)
   24bde:	491c      	ldr	r1, [pc, #112]	; (24c50 <nm_spi_init+0x118>)
   24be0:	4b1c      	ldr	r3, [pc, #112]	; (24c54 <nm_spi_init+0x11c>)
   24be2:	0018      	movs	r0, r3
   24be4:	4b1c      	ldr	r3, [pc, #112]	; (24c58 <nm_spi_init+0x120>)
   24be6:	4798      	blx	r3
   24be8:	4b22      	ldr	r3, [pc, #136]	; (24c74 <nm_spi_init+0x13c>)
   24bea:	0018      	movs	r0, r3
   24bec:	4b1a      	ldr	r3, [pc, #104]	; (24c58 <nm_spi_init+0x120>)
   24bee:	4798      	blx	r3
   24bf0:	4b1b      	ldr	r3, [pc, #108]	; (24c60 <nm_spi_init+0x128>)
   24bf2:	0018      	movs	r0, r3
   24bf4:	4b18      	ldr	r3, [pc, #96]	; (24c58 <nm_spi_init+0x120>)
   24bf6:	4798      	blx	r3
			return 0;
   24bf8:	2300      	movs	r3, #0
   24bfa:	e01f      	b.n	24c3c <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   24bfc:	4b11      	ldr	r3, [pc, #68]	; (24c44 <nm_spi_init+0x10c>)
   24bfe:	2201      	movs	r2, #1
   24c00:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   24c02:	1d3a      	adds	r2, r7, #4
   24c04:	2380      	movs	r3, #128	; 0x80
   24c06:	015b      	lsls	r3, r3, #5
   24c08:	0011      	movs	r1, r2
   24c0a:	0018      	movs	r0, r3
   24c0c:	4b0f      	ldr	r3, [pc, #60]	; (24c4c <nm_spi_init+0x114>)
   24c0e:	4798      	blx	r3
   24c10:	1e03      	subs	r3, r0, #0
   24c12:	d110      	bne.n	24c36 <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   24c14:	4a18      	ldr	r2, [pc, #96]	; (24c78 <nm_spi_init+0x140>)
   24c16:	490e      	ldr	r1, [pc, #56]	; (24c50 <nm_spi_init+0x118>)
   24c18:	4b0e      	ldr	r3, [pc, #56]	; (24c54 <nm_spi_init+0x11c>)
   24c1a:	0018      	movs	r0, r3
   24c1c:	4b0e      	ldr	r3, [pc, #56]	; (24c58 <nm_spi_init+0x120>)
   24c1e:	4798      	blx	r3
   24c20:	4b16      	ldr	r3, [pc, #88]	; (24c7c <nm_spi_init+0x144>)
   24c22:	0018      	movs	r0, r3
   24c24:	4b0c      	ldr	r3, [pc, #48]	; (24c58 <nm_spi_init+0x120>)
   24c26:	4798      	blx	r3
   24c28:	4b0d      	ldr	r3, [pc, #52]	; (24c60 <nm_spi_init+0x128>)
   24c2a:	0018      	movs	r0, r3
   24c2c:	4b0a      	ldr	r3, [pc, #40]	; (24c58 <nm_spi_init+0x120>)
   24c2e:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   24c30:	2306      	movs	r3, #6
   24c32:	425b      	negs	r3, r3
   24c34:	e002      	b.n	24c3c <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   24c36:	4b12      	ldr	r3, [pc, #72]	; (24c80 <nm_spi_init+0x148>)
   24c38:	4798      	blx	r3


	return M2M_SUCCESS;
   24c3a:	2300      	movs	r3, #0
}
   24c3c:	0018      	movs	r0, r3
   24c3e:	46bd      	mov	sp, r7
   24c40:	b002      	add	sp, #8
   24c42:	bd80      	pop	{r7, pc}
   24c44:	20004130 	.word	0x20004130
   24c48:	0000e824 	.word	0x0000e824
   24c4c:	00024831 	.word	0x00024831
   24c50:	000394fc 	.word	0x000394fc
   24c54:	00038e88 	.word	0x00038e88
   24c58:	0001df59 	.word	0x0001df59
   24c5c:	00039324 	.word	0x00039324
   24c60:	00038ec8 	.word	0x00038ec8
   24c64:	000004c3 	.word	0x000004c3
   24c68:	00039374 	.word	0x00039374
   24c6c:	00024539 	.word	0x00024539
   24c70:	000004cd 	.word	0x000004cd
   24c74:	000393a4 	.word	0x000393a4
   24c78:	000004d7 	.word	0x000004d7
   24c7c:	000393d8 	.word	0x000393d8
   24c80:	00024ac5 	.word	0x00024ac5

00024c84 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   24c84:	b580      	push	{r7, lr}
   24c86:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   24c88:	4b03      	ldr	r3, [pc, #12]	; (24c98 <nm_spi_deinit+0x14>)
   24c8a:	2200      	movs	r2, #0
   24c8c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   24c8e:	2300      	movs	r3, #0
}
   24c90:	0018      	movs	r0, r3
   24c92:	46bd      	mov	sp, r7
   24c94:	bd80      	pop	{r7, pc}
   24c96:	46c0      	nop			; (mov r8, r8)
   24c98:	20004130 	.word	0x20004130

00024c9c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   24c9c:	b580      	push	{r7, lr}
   24c9e:	b084      	sub	sp, #16
   24ca0:	af00      	add	r7, sp, #0
   24ca2:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   24ca4:	230c      	movs	r3, #12
   24ca6:	18fa      	adds	r2, r7, r3
   24ca8:	687b      	ldr	r3, [r7, #4]
   24caa:	0011      	movs	r1, r2
   24cac:	0018      	movs	r0, r3
   24cae:	4b03      	ldr	r3, [pc, #12]	; (24cbc <nm_spi_read_reg+0x20>)
   24cb0:	4798      	blx	r3

	return u32Val;
   24cb2:	68fb      	ldr	r3, [r7, #12]
}
   24cb4:	0018      	movs	r0, r3
   24cb6:	46bd      	mov	sp, r7
   24cb8:	b004      	add	sp, #16
   24cba:	bd80      	pop	{r7, pc}
   24cbc:	00024831 	.word	0x00024831

00024cc0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   24cc0:	b590      	push	{r4, r7, lr}
   24cc2:	b085      	sub	sp, #20
   24cc4:	af00      	add	r7, sp, #0
   24cc6:	6078      	str	r0, [r7, #4]
   24cc8:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   24cca:	230f      	movs	r3, #15
   24ccc:	18fc      	adds	r4, r7, r3
   24cce:	683a      	ldr	r2, [r7, #0]
   24cd0:	687b      	ldr	r3, [r7, #4]
   24cd2:	0011      	movs	r1, r2
   24cd4:	0018      	movs	r0, r3
   24cd6:	4b0d      	ldr	r3, [pc, #52]	; (24d0c <nm_spi_read_reg_with_ret+0x4c>)
   24cd8:	4798      	blx	r3
   24cda:	0003      	movs	r3, r0
   24cdc:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24cde:	230f      	movs	r3, #15
   24ce0:	18fb      	adds	r3, r7, r3
   24ce2:	781b      	ldrb	r3, [r3, #0]
   24ce4:	b25b      	sxtb	r3, r3
   24ce6:	2b01      	cmp	r3, #1
   24ce8:	d104      	bne.n	24cf4 <nm_spi_read_reg_with_ret+0x34>
   24cea:	230f      	movs	r3, #15
   24cec:	18fb      	adds	r3, r7, r3
   24cee:	2200      	movs	r2, #0
   24cf0:	701a      	strb	r2, [r3, #0]
   24cf2:	e003      	b.n	24cfc <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24cf4:	230f      	movs	r3, #15
   24cf6:	18fb      	adds	r3, r7, r3
   24cf8:	22fa      	movs	r2, #250	; 0xfa
   24cfa:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24cfc:	230f      	movs	r3, #15
   24cfe:	18fb      	adds	r3, r7, r3
   24d00:	781b      	ldrb	r3, [r3, #0]
   24d02:	b25b      	sxtb	r3, r3
}
   24d04:	0018      	movs	r0, r3
   24d06:	46bd      	mov	sp, r7
   24d08:	b005      	add	sp, #20
   24d0a:	bd90      	pop	{r4, r7, pc}
   24d0c:	00024831 	.word	0x00024831

00024d10 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   24d10:	b590      	push	{r4, r7, lr}
   24d12:	b085      	sub	sp, #20
   24d14:	af00      	add	r7, sp, #0
   24d16:	6078      	str	r0, [r7, #4]
   24d18:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   24d1a:	230f      	movs	r3, #15
   24d1c:	18fc      	adds	r4, r7, r3
   24d1e:	683a      	ldr	r2, [r7, #0]
   24d20:	687b      	ldr	r3, [r7, #4]
   24d22:	0011      	movs	r1, r2
   24d24:	0018      	movs	r0, r3
   24d26:	4b0d      	ldr	r3, [pc, #52]	; (24d5c <nm_spi_write_reg+0x4c>)
   24d28:	4798      	blx	r3
   24d2a:	0003      	movs	r3, r0
   24d2c:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24d2e:	230f      	movs	r3, #15
   24d30:	18fb      	adds	r3, r7, r3
   24d32:	781b      	ldrb	r3, [r3, #0]
   24d34:	b25b      	sxtb	r3, r3
   24d36:	2b01      	cmp	r3, #1
   24d38:	d104      	bne.n	24d44 <nm_spi_write_reg+0x34>
   24d3a:	230f      	movs	r3, #15
   24d3c:	18fb      	adds	r3, r7, r3
   24d3e:	2200      	movs	r2, #0
   24d40:	701a      	strb	r2, [r3, #0]
   24d42:	e003      	b.n	24d4c <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24d44:	230f      	movs	r3, #15
   24d46:	18fb      	adds	r3, r7, r3
   24d48:	22fa      	movs	r2, #250	; 0xfa
   24d4a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24d4c:	230f      	movs	r3, #15
   24d4e:	18fb      	adds	r3, r7, r3
   24d50:	781b      	ldrb	r3, [r3, #0]
   24d52:	b25b      	sxtb	r3, r3
}
   24d54:	0018      	movs	r0, r3
   24d56:	46bd      	mov	sp, r7
   24d58:	b005      	add	sp, #20
   24d5a:	bd90      	pop	{r4, r7, pc}
   24d5c:	00024539 	.word	0x00024539

00024d60 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24d60:	b590      	push	{r4, r7, lr}
   24d62:	b087      	sub	sp, #28
   24d64:	af00      	add	r7, sp, #0
   24d66:	60f8      	str	r0, [r7, #12]
   24d68:	60b9      	str	r1, [r7, #8]
   24d6a:	1dbb      	adds	r3, r7, #6
   24d6c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   24d6e:	2317      	movs	r3, #23
   24d70:	18fc      	adds	r4, r7, r3
   24d72:	1dbb      	adds	r3, r7, #6
   24d74:	881a      	ldrh	r2, [r3, #0]
   24d76:	68b9      	ldr	r1, [r7, #8]
   24d78:	68fb      	ldr	r3, [r7, #12]
   24d7a:	0018      	movs	r0, r3
   24d7c:	4b0d      	ldr	r3, [pc, #52]	; (24db4 <nm_spi_read_block+0x54>)
   24d7e:	4798      	blx	r3
   24d80:	0003      	movs	r3, r0
   24d82:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24d84:	2317      	movs	r3, #23
   24d86:	18fb      	adds	r3, r7, r3
   24d88:	781b      	ldrb	r3, [r3, #0]
   24d8a:	b25b      	sxtb	r3, r3
   24d8c:	2b01      	cmp	r3, #1
   24d8e:	d104      	bne.n	24d9a <nm_spi_read_block+0x3a>
   24d90:	2317      	movs	r3, #23
   24d92:	18fb      	adds	r3, r7, r3
   24d94:	2200      	movs	r2, #0
   24d96:	701a      	strb	r2, [r3, #0]
   24d98:	e003      	b.n	24da2 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24d9a:	2317      	movs	r3, #23
   24d9c:	18fb      	adds	r3, r7, r3
   24d9e:	22fa      	movs	r2, #250	; 0xfa
   24da0:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24da2:	2317      	movs	r3, #23
   24da4:	18fb      	adds	r3, r7, r3
   24da6:	781b      	ldrb	r3, [r3, #0]
   24da8:	b25b      	sxtb	r3, r3
}
   24daa:	0018      	movs	r0, r3
   24dac:	46bd      	mov	sp, r7
   24dae:	b007      	add	sp, #28
   24db0:	bd90      	pop	{r4, r7, pc}
   24db2:	46c0      	nop			; (mov r8, r8)
   24db4:	000249a9 	.word	0x000249a9

00024db8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24db8:	b590      	push	{r4, r7, lr}
   24dba:	b087      	sub	sp, #28
   24dbc:	af00      	add	r7, sp, #0
   24dbe:	60f8      	str	r0, [r7, #12]
   24dc0:	60b9      	str	r1, [r7, #8]
   24dc2:	1dbb      	adds	r3, r7, #6
   24dc4:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   24dc6:	2317      	movs	r3, #23
   24dc8:	18fc      	adds	r4, r7, r3
   24dca:	1dbb      	adds	r3, r7, #6
   24dcc:	881a      	ldrh	r2, [r3, #0]
   24dce:	68b9      	ldr	r1, [r7, #8]
   24dd0:	68fb      	ldr	r3, [r7, #12]
   24dd2:	0018      	movs	r0, r3
   24dd4:	4b0d      	ldr	r3, [pc, #52]	; (24e0c <nm_spi_write_block+0x54>)
   24dd6:	4798      	blx	r3
   24dd8:	0003      	movs	r3, r0
   24dda:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24ddc:	2317      	movs	r3, #23
   24dde:	18fb      	adds	r3, r7, r3
   24de0:	781b      	ldrb	r3, [r3, #0]
   24de2:	b25b      	sxtb	r3, r3
   24de4:	2b01      	cmp	r3, #1
   24de6:	d104      	bne.n	24df2 <nm_spi_write_block+0x3a>
   24de8:	2317      	movs	r3, #23
   24dea:	18fb      	adds	r3, r7, r3
   24dec:	2200      	movs	r2, #0
   24dee:	701a      	strb	r2, [r3, #0]
   24df0:	e003      	b.n	24dfa <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24df2:	2317      	movs	r3, #23
   24df4:	18fb      	adds	r3, r7, r3
   24df6:	22fa      	movs	r2, #250	; 0xfa
   24df8:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24dfa:	2317      	movs	r3, #23
   24dfc:	18fb      	adds	r3, r7, r3
   24dfe:	781b      	ldrb	r3, [r3, #0]
   24e00:	b25b      	sxtb	r3, r3
}
   24e02:	0018      	movs	r0, r3
   24e04:	46bd      	mov	sp, r7
   24e06:	b007      	add	sp, #28
   24e08:	bd90      	pop	{r4, r7, pc}
   24e0a:	46c0      	nop			; (mov r8, r8)
   24e0c:	00024685 	.word	0x00024685

00024e10 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   24e10:	b590      	push	{r4, r7, lr}
   24e12:	b089      	sub	sp, #36	; 0x24
   24e14:	af00      	add	r7, sp, #0
   24e16:	60b9      	str	r1, [r7, #8]
   24e18:	0011      	movs	r1, r2
   24e1a:	607b      	str	r3, [r7, #4]
   24e1c:	230f      	movs	r3, #15
   24e1e:	18fb      	adds	r3, r7, r3
   24e20:	1c02      	adds	r2, r0, #0
   24e22:	701a      	strb	r2, [r3, #0]
   24e24:	230e      	movs	r3, #14
   24e26:	18fb      	adds	r3, r7, r3
   24e28:	1c0a      	adds	r2, r1, #0
   24e2a:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   24e2c:	2330      	movs	r3, #48	; 0x30
   24e2e:	18fb      	adds	r3, r7, r3
   24e30:	881b      	ldrh	r3, [r3, #0]
   24e32:	2b00      	cmp	r3, #0
   24e34:	d100      	bne.n	24e38 <Socket_ReadSocketData+0x28>
   24e36:	e0d7      	b.n	24fe8 <Socket_ReadSocketData+0x1d8>
   24e38:	230f      	movs	r3, #15
   24e3a:	18fb      	adds	r3, r7, r3
   24e3c:	2200      	movs	r2, #0
   24e3e:	569a      	ldrsb	r2, [r3, r2]
   24e40:	4b6b      	ldr	r3, [pc, #428]	; (24ff0 <Socket_ReadSocketData+0x1e0>)
   24e42:	0112      	lsls	r2, r2, #4
   24e44:	58d3      	ldr	r3, [r2, r3]
   24e46:	2b00      	cmp	r3, #0
   24e48:	d100      	bne.n	24e4c <Socket_ReadSocketData+0x3c>
   24e4a:	e0cd      	b.n	24fe8 <Socket_ReadSocketData+0x1d8>
   24e4c:	230f      	movs	r3, #15
   24e4e:	18fb      	adds	r3, r7, r3
   24e50:	781b      	ldrb	r3, [r3, #0]
   24e52:	b25b      	sxtb	r3, r3
   24e54:	4a66      	ldr	r2, [pc, #408]	; (24ff0 <Socket_ReadSocketData+0x1e0>)
   24e56:	011b      	lsls	r3, r3, #4
   24e58:	18d3      	adds	r3, r2, r3
   24e5a:	3304      	adds	r3, #4
   24e5c:	881b      	ldrh	r3, [r3, #0]
   24e5e:	b29b      	uxth	r3, r3
   24e60:	2b00      	cmp	r3, #0
   24e62:	d100      	bne.n	24e66 <Socket_ReadSocketData+0x56>
   24e64:	e0c0      	b.n	24fe8 <Socket_ReadSocketData+0x1d8>
   24e66:	230f      	movs	r3, #15
   24e68:	18fb      	adds	r3, r7, r3
   24e6a:	781b      	ldrb	r3, [r3, #0]
   24e6c:	b25b      	sxtb	r3, r3
   24e6e:	4a60      	ldr	r2, [pc, #384]	; (24ff0 <Socket_ReadSocketData+0x1e0>)
   24e70:	011b      	lsls	r3, r3, #4
   24e72:	18d3      	adds	r3, r2, r3
   24e74:	330a      	adds	r3, #10
   24e76:	781b      	ldrb	r3, [r3, #0]
   24e78:	b2db      	uxtb	r3, r3
   24e7a:	2b01      	cmp	r3, #1
   24e7c:	d000      	beq.n	24e80 <Socket_ReadSocketData+0x70>
   24e7e:	e0b3      	b.n	24fe8 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   24e80:	687b      	ldr	r3, [r7, #4]
   24e82:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   24e84:	68bb      	ldr	r3, [r7, #8]
   24e86:	2230      	movs	r2, #48	; 0x30
   24e88:	18ba      	adds	r2, r7, r2
   24e8a:	8812      	ldrh	r2, [r2, #0]
   24e8c:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   24e8e:	2319      	movs	r3, #25
   24e90:	18fb      	adds	r3, r7, r3
   24e92:	2201      	movs	r2, #1
   24e94:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   24e96:	231a      	movs	r3, #26
   24e98:	18fb      	adds	r3, r7, r3
   24e9a:	2230      	movs	r2, #48	; 0x30
   24e9c:	18ba      	adds	r2, r7, r2
   24e9e:	8812      	ldrh	r2, [r2, #0]
   24ea0:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   24ea2:	230f      	movs	r3, #15
   24ea4:	18fb      	adds	r3, r7, r3
   24ea6:	781b      	ldrb	r3, [r3, #0]
   24ea8:	b25b      	sxtb	r3, r3
   24eaa:	4a51      	ldr	r2, [pc, #324]	; (24ff0 <Socket_ReadSocketData+0x1e0>)
   24eac:	011b      	lsls	r3, r3, #4
   24eae:	18d3      	adds	r3, r2, r3
   24eb0:	3304      	adds	r3, #4
   24eb2:	881b      	ldrh	r3, [r3, #0]
   24eb4:	b29b      	uxth	r3, r3
   24eb6:	221a      	movs	r2, #26
   24eb8:	18ba      	adds	r2, r7, r2
   24eba:	8812      	ldrh	r2, [r2, #0]
   24ebc:	1ad3      	subs	r3, r2, r3
   24ebe:	b29a      	uxth	r2, r3
   24ec0:	2316      	movs	r3, #22
   24ec2:	18fb      	adds	r3, r7, r3
   24ec4:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   24ec6:	2316      	movs	r3, #22
   24ec8:	18fb      	adds	r3, r7, r3
   24eca:	2200      	movs	r2, #0
   24ecc:	5e9b      	ldrsh	r3, [r3, r2]
   24ece:	2b00      	cmp	r3, #0
   24ed0:	dd0f      	ble.n	24ef2 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   24ed2:	2319      	movs	r3, #25
   24ed4:	18fb      	adds	r3, r7, r3
   24ed6:	2200      	movs	r2, #0
   24ed8:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   24eda:	230f      	movs	r3, #15
   24edc:	18fb      	adds	r3, r7, r3
   24ede:	2200      	movs	r2, #0
   24ee0:	569a      	ldrsb	r2, [r3, r2]
   24ee2:	231a      	movs	r3, #26
   24ee4:	18fb      	adds	r3, r7, r3
   24ee6:	4942      	ldr	r1, [pc, #264]	; (24ff0 <Socket_ReadSocketData+0x1e0>)
   24ee8:	0112      	lsls	r2, r2, #4
   24eea:	188a      	adds	r2, r1, r2
   24eec:	3204      	adds	r2, #4
   24eee:	8812      	ldrh	r2, [r2, #0]
   24ef0:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   24ef2:	230f      	movs	r3, #15
   24ef4:	18fb      	adds	r3, r7, r3
   24ef6:	2200      	movs	r2, #0
   24ef8:	569a      	ldrsb	r2, [r3, r2]
   24efa:	4b3d      	ldr	r3, [pc, #244]	; (24ff0 <Socket_ReadSocketData+0x1e0>)
   24efc:	0112      	lsls	r2, r2, #4
   24efe:	58d1      	ldr	r1, [r2, r3]
   24f00:	2319      	movs	r3, #25
   24f02:	18fb      	adds	r3, r7, r3
   24f04:	781c      	ldrb	r4, [r3, #0]
   24f06:	231a      	movs	r3, #26
   24f08:	18fb      	adds	r3, r7, r3
   24f0a:	881a      	ldrh	r2, [r3, #0]
   24f0c:	69f8      	ldr	r0, [r7, #28]
   24f0e:	0023      	movs	r3, r4
   24f10:	4c38      	ldr	r4, [pc, #224]	; (24ff4 <Socket_ReadSocketData+0x1e4>)
   24f12:	47a0      	blx	r4
   24f14:	1e03      	subs	r3, r0, #0
   24f16:	d14f      	bne.n	24fb8 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   24f18:	230f      	movs	r3, #15
   24f1a:	18fb      	adds	r3, r7, r3
   24f1c:	2200      	movs	r2, #0
   24f1e:	569a      	ldrsb	r2, [r3, r2]
   24f20:	4b33      	ldr	r3, [pc, #204]	; (24ff0 <Socket_ReadSocketData+0x1e0>)
   24f22:	0112      	lsls	r2, r2, #4
   24f24:	58d2      	ldr	r2, [r2, r3]
   24f26:	68bb      	ldr	r3, [r7, #8]
   24f28:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   24f2a:	231a      	movs	r3, #26
   24f2c:	18fb      	adds	r3, r7, r3
   24f2e:	2200      	movs	r2, #0
   24f30:	5e9a      	ldrsh	r2, [r3, r2]
   24f32:	68bb      	ldr	r3, [r7, #8]
   24f34:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   24f36:	68bb      	ldr	r3, [r7, #8]
   24f38:	88da      	ldrh	r2, [r3, #6]
   24f3a:	231a      	movs	r3, #26
   24f3c:	18fb      	adds	r3, r7, r3
   24f3e:	881b      	ldrh	r3, [r3, #0]
   24f40:	1ad3      	subs	r3, r2, r3
   24f42:	b29a      	uxth	r2, r3
   24f44:	68bb      	ldr	r3, [r7, #8]
   24f46:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   24f48:	4b2b      	ldr	r3, [pc, #172]	; (24ff8 <Socket_ReadSocketData+0x1e8>)
   24f4a:	681b      	ldr	r3, [r3, #0]
   24f4c:	2b00      	cmp	r3, #0
   24f4e:	d00b      	beq.n	24f68 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   24f50:	4b29      	ldr	r3, [pc, #164]	; (24ff8 <Socket_ReadSocketData+0x1e8>)
   24f52:	681b      	ldr	r3, [r3, #0]
   24f54:	68bc      	ldr	r4, [r7, #8]
   24f56:	220e      	movs	r2, #14
   24f58:	18ba      	adds	r2, r7, r2
   24f5a:	7811      	ldrb	r1, [r2, #0]
   24f5c:	220f      	movs	r2, #15
   24f5e:	18ba      	adds	r2, r7, r2
   24f60:	2000      	movs	r0, #0
   24f62:	5610      	ldrsb	r0, [r2, r0]
   24f64:	0022      	movs	r2, r4
   24f66:	4798      	blx	r3

				u16ReadCount -= u16Read;
   24f68:	2330      	movs	r3, #48	; 0x30
   24f6a:	18f9      	adds	r1, r7, r3
   24f6c:	2330      	movs	r3, #48	; 0x30
   24f6e:	18fa      	adds	r2, r7, r3
   24f70:	231a      	movs	r3, #26
   24f72:	18fb      	adds	r3, r7, r3
   24f74:	8812      	ldrh	r2, [r2, #0]
   24f76:	881b      	ldrh	r3, [r3, #0]
   24f78:	1ad3      	subs	r3, r2, r3
   24f7a:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   24f7c:	231a      	movs	r3, #26
   24f7e:	18fb      	adds	r3, r7, r3
   24f80:	881b      	ldrh	r3, [r3, #0]
   24f82:	69fa      	ldr	r2, [r7, #28]
   24f84:	18d3      	adds	r3, r2, r3
   24f86:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   24f88:	230f      	movs	r3, #15
   24f8a:	18fb      	adds	r3, r7, r3
   24f8c:	781b      	ldrb	r3, [r3, #0]
   24f8e:	b25b      	sxtb	r3, r3
   24f90:	4a17      	ldr	r2, [pc, #92]	; (24ff0 <Socket_ReadSocketData+0x1e0>)
   24f92:	011b      	lsls	r3, r3, #4
   24f94:	18d3      	adds	r3, r2, r3
   24f96:	330a      	adds	r3, #10
   24f98:	781b      	ldrb	r3, [r3, #0]
   24f9a:	b2db      	uxtb	r3, r3
   24f9c:	2b00      	cmp	r3, #0
   24f9e:	d11c      	bne.n	24fda <Socket_ReadSocketData+0x1ca>
   24fa0:	2330      	movs	r3, #48	; 0x30
   24fa2:	18fb      	adds	r3, r7, r3
   24fa4:	881b      	ldrh	r3, [r3, #0]
   24fa6:	2b00      	cmp	r3, #0
   24fa8:	d017      	beq.n	24fda <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   24faa:	2301      	movs	r3, #1
   24fac:	2200      	movs	r2, #0
   24fae:	2100      	movs	r1, #0
   24fb0:	2000      	movs	r0, #0
   24fb2:	4c10      	ldr	r4, [pc, #64]	; (24ff4 <Socket_ReadSocketData+0x1e4>)
   24fb4:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   24fb6:	e017      	b.n	24fe8 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   24fb8:	4b10      	ldr	r3, [pc, #64]	; (24ffc <Socket_ReadSocketData+0x1ec>)
   24fba:	0018      	movs	r0, r3
   24fbc:	4b10      	ldr	r3, [pc, #64]	; (25000 <Socket_ReadSocketData+0x1f0>)
   24fbe:	4798      	blx	r3
   24fc0:	2330      	movs	r3, #48	; 0x30
   24fc2:	18fb      	adds	r3, r7, r3
   24fc4:	881a      	ldrh	r2, [r3, #0]
   24fc6:	4b0f      	ldr	r3, [pc, #60]	; (25004 <Socket_ReadSocketData+0x1f4>)
   24fc8:	0011      	movs	r1, r2
   24fca:	0018      	movs	r0, r3
   24fcc:	4b0c      	ldr	r3, [pc, #48]	; (25000 <Socket_ReadSocketData+0x1f0>)
   24fce:	4798      	blx	r3
   24fd0:	4b0d      	ldr	r3, [pc, #52]	; (25008 <Socket_ReadSocketData+0x1f8>)
   24fd2:	0018      	movs	r0, r3
   24fd4:	4b0a      	ldr	r3, [pc, #40]	; (25000 <Socket_ReadSocketData+0x1f0>)
   24fd6:	4798      	blx	r3
				break;
   24fd8:	e006      	b.n	24fe8 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   24fda:	2330      	movs	r3, #48	; 0x30
   24fdc:	18fb      	adds	r3, r7, r3
   24fde:	881b      	ldrh	r3, [r3, #0]
   24fe0:	2b00      	cmp	r3, #0
   24fe2:	d000      	beq.n	24fe6 <Socket_ReadSocketData+0x1d6>
   24fe4:	e753      	b.n	24e8e <Socket_ReadSocketData+0x7e>
	}
}
   24fe6:	e7ff      	b.n	24fe8 <Socket_ReadSocketData+0x1d8>
   24fe8:	46c0      	nop			; (mov r8, r8)
   24fea:	46bd      	mov	sp, r7
   24fec:	b009      	add	sp, #36	; 0x24
   24fee:	bd90      	pop	{r4, r7, pc}
   24ff0:	20005984 	.word	0x20005984
   24ff4:	00021809 	.word	0x00021809
   24ff8:	20005a34 	.word	0x20005a34
   24ffc:	00039508 	.word	0x00039508
   25000:	0001df59 	.word	0x0001df59
   25004:	00039514 	.word	0x00039514
   25008:	00039528 	.word	0x00039528

0002500c <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   2500c:	b590      	push	{r4, r7, lr}
   2500e:	b0bb      	sub	sp, #236	; 0xec
   25010:	af02      	add	r7, sp, #8
   25012:	603a      	str	r2, [r7, #0]
   25014:	1dfb      	adds	r3, r7, #7
   25016:	1c02      	adds	r2, r0, #0
   25018:	701a      	strb	r2, [r3, #0]
   2501a:	1d3b      	adds	r3, r7, #4
   2501c:	1c0a      	adds	r2, r1, #0
   2501e:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   25020:	1dfb      	adds	r3, r7, #7
   25022:	781b      	ldrb	r3, [r3, #0]
   25024:	2b41      	cmp	r3, #65	; 0x41
   25026:	d003      	beq.n	25030 <m2m_ip_cb+0x24>
   25028:	1dfb      	adds	r3, r7, #7
   2502a:	781b      	ldrb	r3, [r3, #0]
   2502c:	2b54      	cmp	r3, #84	; 0x54
   2502e:	d120      	bne.n	25072 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   25030:	23cc      	movs	r3, #204	; 0xcc
   25032:	18f9      	adds	r1, r7, r3
   25034:	6838      	ldr	r0, [r7, #0]
   25036:	2300      	movs	r3, #0
   25038:	2204      	movs	r2, #4
   2503a:	4c98      	ldr	r4, [pc, #608]	; (2529c <m2m_ip_cb+0x290>)
   2503c:	47a0      	blx	r4
   2503e:	1e03      	subs	r3, r0, #0
   25040:	d000      	beq.n	25044 <m2m_ip_cb+0x38>
   25042:	e275      	b.n	25530 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   25044:	23cc      	movs	r3, #204	; 0xcc
   25046:	18fb      	adds	r3, r7, r3
   25048:	2201      	movs	r2, #1
   2504a:	569a      	ldrsb	r2, [r3, r2]
   2504c:	23c8      	movs	r3, #200	; 0xc8
   2504e:	18fb      	adds	r3, r7, r3
   25050:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25052:	4b93      	ldr	r3, [pc, #588]	; (252a0 <m2m_ip_cb+0x294>)
   25054:	681b      	ldr	r3, [r3, #0]
   25056:	2b00      	cmp	r3, #0
   25058:	d100      	bne.n	2505c <m2m_ip_cb+0x50>
   2505a:	e269      	b.n	25530 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   2505c:	4b90      	ldr	r3, [pc, #576]	; (252a0 <m2m_ip_cb+0x294>)
   2505e:	681b      	ldr	r3, [r3, #0]
   25060:	22cc      	movs	r2, #204	; 0xcc
   25062:	18ba      	adds	r2, r7, r2
   25064:	2000      	movs	r0, #0
   25066:	5610      	ldrsb	r0, [r2, r0]
   25068:	22c8      	movs	r2, #200	; 0xc8
   2506a:	18ba      	adds	r2, r7, r2
   2506c:	2101      	movs	r1, #1
   2506e:	4798      	blx	r3
	{
   25070:	e25e      	b.n	25530 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   25072:	1dfb      	adds	r3, r7, #7
   25074:	781b      	ldrb	r3, [r3, #0]
   25076:	2b42      	cmp	r3, #66	; 0x42
   25078:	d120      	bne.n	250bc <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   2507a:	23c4      	movs	r3, #196	; 0xc4
   2507c:	18f9      	adds	r1, r7, r3
   2507e:	6838      	ldr	r0, [r7, #0]
   25080:	2300      	movs	r3, #0
   25082:	2204      	movs	r2, #4
   25084:	4c85      	ldr	r4, [pc, #532]	; (2529c <m2m_ip_cb+0x290>)
   25086:	47a0      	blx	r4
   25088:	1e03      	subs	r3, r0, #0
   2508a:	d000      	beq.n	2508e <m2m_ip_cb+0x82>
   2508c:	e257      	b.n	2553e <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   2508e:	23c4      	movs	r3, #196	; 0xc4
   25090:	18fb      	adds	r3, r7, r3
   25092:	2201      	movs	r2, #1
   25094:	569a      	ldrsb	r2, [r3, r2]
   25096:	23c0      	movs	r3, #192	; 0xc0
   25098:	18fb      	adds	r3, r7, r3
   2509a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   2509c:	4b80      	ldr	r3, [pc, #512]	; (252a0 <m2m_ip_cb+0x294>)
   2509e:	681b      	ldr	r3, [r3, #0]
   250a0:	2b00      	cmp	r3, #0
   250a2:	d100      	bne.n	250a6 <m2m_ip_cb+0x9a>
   250a4:	e24b      	b.n	2553e <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   250a6:	4b7e      	ldr	r3, [pc, #504]	; (252a0 <m2m_ip_cb+0x294>)
   250a8:	681b      	ldr	r3, [r3, #0]
   250aa:	22c4      	movs	r2, #196	; 0xc4
   250ac:	18ba      	adds	r2, r7, r2
   250ae:	2000      	movs	r0, #0
   250b0:	5610      	ldrsb	r0, [r2, r0]
   250b2:	22c0      	movs	r2, #192	; 0xc0
   250b4:	18ba      	adds	r2, r7, r2
   250b6:	2102      	movs	r1, #2
   250b8:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   250ba:	e240      	b.n	2553e <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   250bc:	1dfb      	adds	r3, r7, #7
   250be:	781b      	ldrb	r3, [r3, #0]
   250c0:	2b43      	cmp	r3, #67	; 0x43
   250c2:	d000      	beq.n	250c6 <m2m_ip_cb+0xba>
   250c4:	e086      	b.n	251d4 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   250c6:	23b4      	movs	r3, #180	; 0xb4
   250c8:	18f9      	adds	r1, r7, r3
   250ca:	6838      	ldr	r0, [r7, #0]
   250cc:	2300      	movs	r3, #0
   250ce:	220c      	movs	r2, #12
   250d0:	4c72      	ldr	r4, [pc, #456]	; (2529c <m2m_ip_cb+0x290>)
   250d2:	47a0      	blx	r4
   250d4:	1e03      	subs	r3, r0, #0
   250d6:	d000      	beq.n	250da <m2m_ip_cb+0xce>
   250d8:	e231      	b.n	2553e <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   250da:	23b4      	movs	r3, #180	; 0xb4
   250dc:	18fb      	adds	r3, r7, r3
   250de:	7a5b      	ldrb	r3, [r3, #9]
   250e0:	b25b      	sxtb	r3, r3
   250e2:	2b00      	cmp	r3, #0
   250e4:	db4f      	blt.n	25186 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   250e6:	23b4      	movs	r3, #180	; 0xb4
   250e8:	18fb      	adds	r3, r7, r3
   250ea:	7a5b      	ldrb	r3, [r3, #9]
   250ec:	b25b      	sxtb	r3, r3
   250ee:	0018      	movs	r0, r3
   250f0:	23b4      	movs	r3, #180	; 0xb4
   250f2:	18fb      	adds	r3, r7, r3
   250f4:	7a1b      	ldrb	r3, [r3, #8]
   250f6:	b25b      	sxtb	r3, r3
   250f8:	4a6a      	ldr	r2, [pc, #424]	; (252a4 <m2m_ip_cb+0x298>)
   250fa:	011b      	lsls	r3, r3, #4
   250fc:	18d3      	adds	r3, r2, r3
   250fe:	330b      	adds	r3, #11
   25100:	781b      	ldrb	r3, [r3, #0]
   25102:	b2d9      	uxtb	r1, r3
   25104:	4a67      	ldr	r2, [pc, #412]	; (252a4 <m2m_ip_cb+0x298>)
   25106:	0103      	lsls	r3, r0, #4
   25108:	18d3      	adds	r3, r2, r3
   2510a:	330b      	adds	r3, #11
   2510c:	1c0a      	adds	r2, r1, #0
   2510e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   25110:	23b4      	movs	r3, #180	; 0xb4
   25112:	18fb      	adds	r3, r7, r3
   25114:	7a5b      	ldrb	r3, [r3, #9]
   25116:	b25b      	sxtb	r3, r3
   25118:	4a62      	ldr	r2, [pc, #392]	; (252a4 <m2m_ip_cb+0x298>)
   2511a:	011b      	lsls	r3, r3, #4
   2511c:	18d3      	adds	r3, r2, r3
   2511e:	330a      	adds	r3, #10
   25120:	2201      	movs	r2, #1
   25122:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25124:	23b4      	movs	r3, #180	; 0xb4
   25126:	18fb      	adds	r3, r7, r3
   25128:	7a5b      	ldrb	r3, [r3, #9]
   2512a:	b25b      	sxtb	r3, r3
   2512c:	0018      	movs	r0, r3
   2512e:	23b4      	movs	r3, #180	; 0xb4
   25130:	18fb      	adds	r3, r7, r3
   25132:	895b      	ldrh	r3, [r3, #10]
   25134:	3b08      	subs	r3, #8
   25136:	b299      	uxth	r1, r3
   25138:	4a5a      	ldr	r2, [pc, #360]	; (252a4 <m2m_ip_cb+0x298>)
   2513a:	0103      	lsls	r3, r0, #4
   2513c:	18d3      	adds	r3, r2, r3
   2513e:	3308      	adds	r3, #8
   25140:	1c0a      	adds	r2, r1, #0
   25142:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   25144:	4b58      	ldr	r3, [pc, #352]	; (252a8 <m2m_ip_cb+0x29c>)
   25146:	881b      	ldrh	r3, [r3, #0]
   25148:	b29b      	uxth	r3, r3
   2514a:	3301      	adds	r3, #1
   2514c:	b29a      	uxth	r2, r3
   2514e:	4b56      	ldr	r3, [pc, #344]	; (252a8 <m2m_ip_cb+0x29c>)
   25150:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   25152:	4b55      	ldr	r3, [pc, #340]	; (252a8 <m2m_ip_cb+0x29c>)
   25154:	881b      	ldrh	r3, [r3, #0]
   25156:	b29b      	uxth	r3, r3
   25158:	2b00      	cmp	r3, #0
   2515a:	d106      	bne.n	2516a <m2m_ip_cb+0x15e>
					++gu16SessionID;
   2515c:	4b52      	ldr	r3, [pc, #328]	; (252a8 <m2m_ip_cb+0x29c>)
   2515e:	881b      	ldrh	r3, [r3, #0]
   25160:	b29b      	uxth	r3, r3
   25162:	3301      	adds	r3, #1
   25164:	b29a      	uxth	r2, r3
   25166:	4b50      	ldr	r3, [pc, #320]	; (252a8 <m2m_ip_cb+0x29c>)
   25168:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   2516a:	23b4      	movs	r3, #180	; 0xb4
   2516c:	18fb      	adds	r3, r7, r3
   2516e:	7a5b      	ldrb	r3, [r3, #9]
   25170:	b25b      	sxtb	r3, r3
   25172:	0018      	movs	r0, r3
   25174:	4b4c      	ldr	r3, [pc, #304]	; (252a8 <m2m_ip_cb+0x29c>)
   25176:	881b      	ldrh	r3, [r3, #0]
   25178:	b299      	uxth	r1, r3
   2517a:	4a4a      	ldr	r2, [pc, #296]	; (252a4 <m2m_ip_cb+0x298>)
   2517c:	0103      	lsls	r3, r0, #4
   2517e:	18d3      	adds	r3, r2, r3
   25180:	3306      	adds	r3, #6
   25182:	1c0a      	adds	r2, r1, #0
   25184:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   25186:	23b4      	movs	r3, #180	; 0xb4
   25188:	18fb      	adds	r3, r7, r3
   2518a:	2209      	movs	r2, #9
   2518c:	569a      	ldrsb	r2, [r3, r2]
   2518e:	23a0      	movs	r3, #160	; 0xa0
   25190:	18fb      	adds	r3, r7, r3
   25192:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   25194:	23a0      	movs	r3, #160	; 0xa0
   25196:	18fb      	adds	r3, r7, r3
   25198:	2202      	movs	r2, #2
   2519a:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   2519c:	23b4      	movs	r3, #180	; 0xb4
   2519e:	18fb      	adds	r3, r7, r3
   251a0:	885a      	ldrh	r2, [r3, #2]
   251a2:	23a0      	movs	r3, #160	; 0xa0
   251a4:	18fb      	adds	r3, r7, r3
   251a6:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   251a8:	23b4      	movs	r3, #180	; 0xb4
   251aa:	18fb      	adds	r3, r7, r3
   251ac:	685a      	ldr	r2, [r3, #4]
   251ae:	23a0      	movs	r3, #160	; 0xa0
   251b0:	18fb      	adds	r3, r7, r3
   251b2:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   251b4:	4b3a      	ldr	r3, [pc, #232]	; (252a0 <m2m_ip_cb+0x294>)
   251b6:	681b      	ldr	r3, [r3, #0]
   251b8:	2b00      	cmp	r3, #0
   251ba:	d100      	bne.n	251be <m2m_ip_cb+0x1b2>
   251bc:	e1bf      	b.n	2553e <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   251be:	4b38      	ldr	r3, [pc, #224]	; (252a0 <m2m_ip_cb+0x294>)
   251c0:	681b      	ldr	r3, [r3, #0]
   251c2:	22b4      	movs	r2, #180	; 0xb4
   251c4:	18ba      	adds	r2, r7, r2
   251c6:	2008      	movs	r0, #8
   251c8:	5610      	ldrsb	r0, [r2, r0]
   251ca:	22a0      	movs	r2, #160	; 0xa0
   251cc:	18ba      	adds	r2, r7, r2
   251ce:	2104      	movs	r1, #4
   251d0:	4798      	blx	r3
}
   251d2:	e1b4      	b.n	2553e <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   251d4:	1dfb      	adds	r3, r7, #7
   251d6:	781b      	ldrb	r3, [r3, #0]
   251d8:	2b44      	cmp	r3, #68	; 0x44
   251da:	d003      	beq.n	251e4 <m2m_ip_cb+0x1d8>
   251dc:	1dfb      	adds	r3, r7, #7
   251de:	781b      	ldrb	r3, [r3, #0]
   251e0:	2b4b      	cmp	r3, #75	; 0x4b
   251e2:	d13d      	bne.n	25260 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   251e4:	239c      	movs	r3, #156	; 0x9c
   251e6:	18f9      	adds	r1, r7, r3
   251e8:	6838      	ldr	r0, [r7, #0]
   251ea:	2300      	movs	r3, #0
   251ec:	2204      	movs	r2, #4
   251ee:	4c2b      	ldr	r4, [pc, #172]	; (2529c <m2m_ip_cb+0x290>)
   251f0:	47a0      	blx	r4
   251f2:	1e03      	subs	r3, r0, #0
   251f4:	d000      	beq.n	251f8 <m2m_ip_cb+0x1ec>
   251f6:	e19d      	b.n	25534 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   251f8:	239c      	movs	r3, #156	; 0x9c
   251fa:	18fb      	adds	r3, r7, r3
   251fc:	2200      	movs	r2, #0
   251fe:	569a      	ldrsb	r2, [r3, r2]
   25200:	2398      	movs	r3, #152	; 0x98
   25202:	18fb      	adds	r3, r7, r3
   25204:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   25206:	239c      	movs	r3, #156	; 0x9c
   25208:	18fb      	adds	r3, r7, r3
   2520a:	2201      	movs	r2, #1
   2520c:	569a      	ldrsb	r2, [r3, r2]
   2520e:	2398      	movs	r3, #152	; 0x98
   25210:	18fb      	adds	r3, r7, r3
   25212:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   25214:	239c      	movs	r3, #156	; 0x9c
   25216:	18fb      	adds	r3, r7, r3
   25218:	785b      	ldrb	r3, [r3, #1]
   2521a:	b25b      	sxtb	r3, r3
   2521c:	2b00      	cmp	r3, #0
   2521e:	d10f      	bne.n	25240 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25220:	239c      	movs	r3, #156	; 0x9c
   25222:	18fb      	adds	r3, r7, r3
   25224:	781b      	ldrb	r3, [r3, #0]
   25226:	b25b      	sxtb	r3, r3
   25228:	0018      	movs	r0, r3
   2522a:	239c      	movs	r3, #156	; 0x9c
   2522c:	18fb      	adds	r3, r7, r3
   2522e:	885b      	ldrh	r3, [r3, #2]
   25230:	3b08      	subs	r3, #8
   25232:	b299      	uxth	r1, r3
   25234:	4a1b      	ldr	r2, [pc, #108]	; (252a4 <m2m_ip_cb+0x298>)
   25236:	0103      	lsls	r3, r0, #4
   25238:	18d3      	adds	r3, r2, r3
   2523a:	3308      	adds	r3, #8
   2523c:	1c0a      	adds	r2, r1, #0
   2523e:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   25240:	4b17      	ldr	r3, [pc, #92]	; (252a0 <m2m_ip_cb+0x294>)
   25242:	681b      	ldr	r3, [r3, #0]
   25244:	2b00      	cmp	r3, #0
   25246:	d100      	bne.n	2524a <m2m_ip_cb+0x23e>
   25248:	e174      	b.n	25534 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   2524a:	4b15      	ldr	r3, [pc, #84]	; (252a0 <m2m_ip_cb+0x294>)
   2524c:	681b      	ldr	r3, [r3, #0]
   2524e:	229c      	movs	r2, #156	; 0x9c
   25250:	18ba      	adds	r2, r7, r2
   25252:	2000      	movs	r0, #0
   25254:	5610      	ldrsb	r0, [r2, r0]
   25256:	2298      	movs	r2, #152	; 0x98
   25258:	18ba      	adds	r2, r7, r2
   2525a:	2105      	movs	r1, #5
   2525c:	4798      	blx	r3
	{
   2525e:	e169      	b.n	25534 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   25260:	1dfb      	adds	r3, r7, #7
   25262:	781b      	ldrb	r3, [r3, #0]
   25264:	2b4a      	cmp	r3, #74	; 0x4a
   25266:	d123      	bne.n	252b0 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   25268:	230c      	movs	r3, #12
   2526a:	18f9      	adds	r1, r7, r3
   2526c:	6838      	ldr	r0, [r7, #0]
   2526e:	2300      	movs	r3, #0
   25270:	2244      	movs	r2, #68	; 0x44
   25272:	4c0a      	ldr	r4, [pc, #40]	; (2529c <m2m_ip_cb+0x290>)
   25274:	47a0      	blx	r4
   25276:	1e03      	subs	r3, r0, #0
   25278:	d000      	beq.n	2527c <m2m_ip_cb+0x270>
   2527a:	e160      	b.n	2553e <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   2527c:	4b0b      	ldr	r3, [pc, #44]	; (252ac <m2m_ip_cb+0x2a0>)
   2527e:	681b      	ldr	r3, [r3, #0]
   25280:	2b00      	cmp	r3, #0
   25282:	d100      	bne.n	25286 <m2m_ip_cb+0x27a>
   25284:	e15b      	b.n	2553e <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   25286:	4b09      	ldr	r3, [pc, #36]	; (252ac <m2m_ip_cb+0x2a0>)
   25288:	681a      	ldr	r2, [r3, #0]
   2528a:	230c      	movs	r3, #12
   2528c:	18fb      	adds	r3, r7, r3
   2528e:	6c19      	ldr	r1, [r3, #64]	; 0x40
   25290:	230c      	movs	r3, #12
   25292:	18fb      	adds	r3, r7, r3
   25294:	0018      	movs	r0, r3
   25296:	4790      	blx	r2
}
   25298:	e151      	b.n	2553e <m2m_ip_cb+0x532>
   2529a:	46c0      	nop			; (mov r8, r8)
   2529c:	00021809 	.word	0x00021809
   252a0:	20005a34 	.word	0x20005a34
   252a4:	20005984 	.word	0x20005984
   252a8:	20004132 	.word	0x20004132
   252ac:	20005a3c 	.word	0x20005a3c
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   252b0:	1dfb      	adds	r3, r7, #7
   252b2:	781b      	ldrb	r3, [r3, #0]
   252b4:	2b46      	cmp	r3, #70	; 0x46
   252b6:	d008      	beq.n	252ca <m2m_ip_cb+0x2be>
   252b8:	1dfb      	adds	r3, r7, #7
   252ba:	781b      	ldrb	r3, [r3, #0]
   252bc:	2b48      	cmp	r3, #72	; 0x48
   252be:	d004      	beq.n	252ca <m2m_ip_cb+0x2be>
   252c0:	1dfb      	adds	r3, r7, #7
   252c2:	781b      	ldrb	r3, [r3, #0]
   252c4:	2b4d      	cmp	r3, #77	; 0x4d
   252c6:	d000      	beq.n	252ca <m2m_ip_cb+0x2be>
   252c8:	e0b4      	b.n	25434 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   252ca:	23df      	movs	r3, #223	; 0xdf
   252cc:	18fb      	adds	r3, r7, r3
   252ce:	2206      	movs	r2, #6
   252d0:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   252d2:	1dfb      	adds	r3, r7, #7
   252d4:	781b      	ldrb	r3, [r3, #0]
   252d6:	2b48      	cmp	r3, #72	; 0x48
   252d8:	d103      	bne.n	252e2 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   252da:	23df      	movs	r3, #223	; 0xdf
   252dc:	18fb      	adds	r3, r7, r3
   252de:	2209      	movs	r2, #9
   252e0:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   252e2:	23d8      	movs	r3, #216	; 0xd8
   252e4:	18fb      	adds	r3, r7, r3
   252e6:	2210      	movs	r2, #16
   252e8:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   252ea:	23d8      	movs	r3, #216	; 0xd8
   252ec:	18fb      	adds	r3, r7, r3
   252ee:	881a      	ldrh	r2, [r3, #0]
   252f0:	2388      	movs	r3, #136	; 0x88
   252f2:	18f9      	adds	r1, r7, r3
   252f4:	6838      	ldr	r0, [r7, #0]
   252f6:	2300      	movs	r3, #0
   252f8:	4c93      	ldr	r4, [pc, #588]	; (25548 <m2m_ip_cb+0x53c>)
   252fa:	47a0      	blx	r4
   252fc:	1e03      	subs	r3, r0, #0
   252fe:	d000      	beq.n	25302 <m2m_ip_cb+0x2f6>
   25300:	e11a      	b.n	25538 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   25302:	23d6      	movs	r3, #214	; 0xd6
   25304:	18fb      	adds	r3, r7, r3
   25306:	2200      	movs	r2, #0
   25308:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   2530a:	23d5      	movs	r3, #213	; 0xd5
   2530c:	18fb      	adds	r3, r7, r3
   2530e:	2288      	movs	r2, #136	; 0x88
   25310:	18ba      	adds	r2, r7, r2
   25312:	7b12      	ldrb	r2, [r2, #12]
   25314:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   25316:	23d6      	movs	r3, #214	; 0xd6
   25318:	18fb      	adds	r3, r7, r3
   2531a:	2288      	movs	r2, #136	; 0x88
   2531c:	18ba      	adds	r2, r7, r2
   2531e:	89d2      	ldrh	r2, [r2, #14]
   25320:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   25322:	23d5      	movs	r3, #213	; 0xd5
   25324:	18fb      	adds	r3, r7, r3
   25326:	781b      	ldrb	r3, [r3, #0]
   25328:	b25b      	sxtb	r3, r3
   2532a:	4a88      	ldr	r2, [pc, #544]	; (2554c <m2m_ip_cb+0x540>)
   2532c:	011b      	lsls	r3, r3, #4
   2532e:	18d3      	adds	r3, r2, r3
   25330:	330c      	adds	r3, #12
   25332:	2200      	movs	r2, #0
   25334:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   25336:	23d2      	movs	r3, #210	; 0xd2
   25338:	18fb      	adds	r3, r7, r3
   2533a:	2288      	movs	r2, #136	; 0x88
   2533c:	18ba      	adds	r2, r7, r2
   2533e:	8912      	ldrh	r2, [r2, #8]
   25340:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   25342:	23d0      	movs	r3, #208	; 0xd0
   25344:	18fb      	adds	r3, r7, r3
   25346:	2288      	movs	r2, #136	; 0x88
   25348:	18ba      	adds	r2, r7, r2
   2534a:	8952      	ldrh	r2, [r2, #10]
   2534c:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   2534e:	2388      	movs	r3, #136	; 0x88
   25350:	18fb      	adds	r3, r7, r3
   25352:	885a      	ldrh	r2, [r3, #2]
   25354:	2370      	movs	r3, #112	; 0x70
   25356:	18fb      	adds	r3, r7, r3
   25358:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   2535a:	2388      	movs	r3, #136	; 0x88
   2535c:	18fb      	adds	r3, r7, r3
   2535e:	685a      	ldr	r2, [r3, #4]
   25360:	2370      	movs	r3, #112	; 0x70
   25362:	18fb      	adds	r3, r7, r3
   25364:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   25366:	23d5      	movs	r3, #213	; 0xd5
   25368:	18fb      	adds	r3, r7, r3
   2536a:	781b      	ldrb	r3, [r3, #0]
   2536c:	b25b      	sxtb	r3, r3
   2536e:	4a77      	ldr	r2, [pc, #476]	; (2554c <m2m_ip_cb+0x540>)
   25370:	011b      	lsls	r3, r3, #4
   25372:	18d3      	adds	r3, r2, r3
   25374:	3306      	adds	r3, #6
   25376:	881b      	ldrh	r3, [r3, #0]
   25378:	b29b      	uxth	r3, r3
   2537a:	22d6      	movs	r2, #214	; 0xd6
   2537c:	18ba      	adds	r2, r7, r2
   2537e:	8812      	ldrh	r2, [r2, #0]
   25380:	429a      	cmp	r2, r3
   25382:	d148      	bne.n	25416 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   25384:	23d2      	movs	r3, #210	; 0xd2
   25386:	18fb      	adds	r3, r7, r3
   25388:	2200      	movs	r2, #0
   2538a:	5e9b      	ldrsh	r3, [r3, r2]
   2538c:	2b00      	cmp	r3, #0
   2538e:	dd25      	ble.n	253dc <m2m_ip_cb+0x3d0>
   25390:	23d2      	movs	r3, #210	; 0xd2
   25392:	18fb      	adds	r3, r7, r3
   25394:	2200      	movs	r2, #0
   25396:	5e9a      	ldrsh	r2, [r3, r2]
   25398:	1d3b      	adds	r3, r7, #4
   2539a:	881b      	ldrh	r3, [r3, #0]
   2539c:	429a      	cmp	r2, r3
   2539e:	da1d      	bge.n	253dc <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   253a0:	23d0      	movs	r3, #208	; 0xd0
   253a2:	18fb      	adds	r3, r7, r3
   253a4:	881b      	ldrh	r3, [r3, #0]
   253a6:	683a      	ldr	r2, [r7, #0]
   253a8:	18d3      	adds	r3, r2, r3
   253aa:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   253ac:	23d8      	movs	r3, #216	; 0xd8
   253ae:	18fb      	adds	r3, r7, r3
   253b0:	22d2      	movs	r2, #210	; 0xd2
   253b2:	18ba      	adds	r2, r7, r2
   253b4:	8812      	ldrh	r2, [r2, #0]
   253b6:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   253b8:	683c      	ldr	r4, [r7, #0]
   253ba:	23df      	movs	r3, #223	; 0xdf
   253bc:	18fb      	adds	r3, r7, r3
   253be:	781a      	ldrb	r2, [r3, #0]
   253c0:	2370      	movs	r3, #112	; 0x70
   253c2:	18f9      	adds	r1, r7, r3
   253c4:	23d5      	movs	r3, #213	; 0xd5
   253c6:	18fb      	adds	r3, r7, r3
   253c8:	2000      	movs	r0, #0
   253ca:	5618      	ldrsb	r0, [r3, r0]
   253cc:	23d8      	movs	r3, #216	; 0xd8
   253ce:	18fb      	adds	r3, r7, r3
   253d0:	881b      	ldrh	r3, [r3, #0]
   253d2:	9300      	str	r3, [sp, #0]
   253d4:	0023      	movs	r3, r4
   253d6:	4c5e      	ldr	r4, [pc, #376]	; (25550 <m2m_ip_cb+0x544>)
   253d8:	47a0      	blx	r4
	{
   253da:	e0ad      	b.n	25538 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   253dc:	2370      	movs	r3, #112	; 0x70
   253de:	18fb      	adds	r3, r7, r3
   253e0:	22d2      	movs	r2, #210	; 0xd2
   253e2:	18ba      	adds	r2, r7, r2
   253e4:	8812      	ldrh	r2, [r2, #0]
   253e6:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   253e8:	2370      	movs	r3, #112	; 0x70
   253ea:	18fb      	adds	r3, r7, r3
   253ec:	2200      	movs	r2, #0
   253ee:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   253f0:	4b58      	ldr	r3, [pc, #352]	; (25554 <m2m_ip_cb+0x548>)
   253f2:	681b      	ldr	r3, [r3, #0]
   253f4:	2b00      	cmp	r3, #0
   253f6:	d100      	bne.n	253fa <m2m_ip_cb+0x3ee>
   253f8:	e09e      	b.n	25538 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   253fa:	4b56      	ldr	r3, [pc, #344]	; (25554 <m2m_ip_cb+0x548>)
   253fc:	681b      	ldr	r3, [r3, #0]
   253fe:	2270      	movs	r2, #112	; 0x70
   25400:	18bc      	adds	r4, r7, r2
   25402:	22df      	movs	r2, #223	; 0xdf
   25404:	18ba      	adds	r2, r7, r2
   25406:	7811      	ldrb	r1, [r2, #0]
   25408:	22d5      	movs	r2, #213	; 0xd5
   2540a:	18ba      	adds	r2, r7, r2
   2540c:	2000      	movs	r0, #0
   2540e:	5610      	ldrsb	r0, [r2, r0]
   25410:	0022      	movs	r2, r4
   25412:	4798      	blx	r3
	{
   25414:	e090      	b.n	25538 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   25416:	23d8      	movs	r3, #216	; 0xd8
   25418:	18fa      	adds	r2, r7, r3
   2541a:	1d3b      	adds	r3, r7, #4
   2541c:	8812      	ldrh	r2, [r2, #0]
   2541e:	881b      	ldrh	r3, [r3, #0]
   25420:	429a      	cmp	r2, r3
   25422:	d300      	bcc.n	25426 <m2m_ip_cb+0x41a>
   25424:	e088      	b.n	25538 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25426:	2301      	movs	r3, #1
   25428:	2200      	movs	r2, #0
   2542a:	2100      	movs	r1, #0
   2542c:	2000      	movs	r0, #0
   2542e:	4c46      	ldr	r4, [pc, #280]	; (25548 <m2m_ip_cb+0x53c>)
   25430:	47a0      	blx	r4
	{
   25432:	e081      	b.n	25538 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   25434:	1dfb      	adds	r3, r7, #7
   25436:	781b      	ldrb	r3, [r3, #0]
   25438:	2b45      	cmp	r3, #69	; 0x45
   2543a:	d007      	beq.n	2544c <m2m_ip_cb+0x440>
   2543c:	1dfb      	adds	r3, r7, #7
   2543e:	781b      	ldrb	r3, [r3, #0]
   25440:	2b47      	cmp	r3, #71	; 0x47
   25442:	d003      	beq.n	2544c <m2m_ip_cb+0x440>
   25444:	1dfb      	adds	r3, r7, #7
   25446:	781b      	ldrb	r3, [r3, #0]
   25448:	2b4c      	cmp	r3, #76	; 0x4c
   2544a:	d14c      	bne.n	254e6 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   2544c:	23de      	movs	r3, #222	; 0xde
   2544e:	18fb      	adds	r3, r7, r3
   25450:	2207      	movs	r2, #7
   25452:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   25454:	1dfb      	adds	r3, r7, #7
   25456:	781b      	ldrb	r3, [r3, #0]
   25458:	2b47      	cmp	r3, #71	; 0x47
   2545a:	d103      	bne.n	25464 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   2545c:	23de      	movs	r3, #222	; 0xde
   2545e:	18fb      	adds	r3, r7, r3
   25460:	2208      	movs	r2, #8
   25462:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   25464:	2364      	movs	r3, #100	; 0x64
   25466:	18f9      	adds	r1, r7, r3
   25468:	6838      	ldr	r0, [r7, #0]
   2546a:	2300      	movs	r3, #0
   2546c:	2208      	movs	r2, #8
   2546e:	4c36      	ldr	r4, [pc, #216]	; (25548 <m2m_ip_cb+0x53c>)
   25470:	47a0      	blx	r4
   25472:	1e03      	subs	r3, r0, #0
   25474:	d162      	bne.n	2553c <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   25476:	23dc      	movs	r3, #220	; 0xdc
   25478:	18fb      	adds	r3, r7, r3
   2547a:	2200      	movs	r2, #0
   2547c:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   2547e:	23db      	movs	r3, #219	; 0xdb
   25480:	18fb      	adds	r3, r7, r3
   25482:	2264      	movs	r2, #100	; 0x64
   25484:	18ba      	adds	r2, r7, r2
   25486:	7812      	ldrb	r2, [r2, #0]
   25488:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   2548a:	23dc      	movs	r3, #220	; 0xdc
   2548c:	18fb      	adds	r3, r7, r3
   2548e:	2264      	movs	r2, #100	; 0x64
   25490:	18ba      	adds	r2, r7, r2
   25492:	8892      	ldrh	r2, [r2, #4]
   25494:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   25496:	2364      	movs	r3, #100	; 0x64
   25498:	18fb      	adds	r3, r7, r3
   2549a:	2202      	movs	r2, #2
   2549c:	5e9a      	ldrsh	r2, [r3, r2]
   2549e:	236e      	movs	r3, #110	; 0x6e
   254a0:	18fb      	adds	r3, r7, r3
   254a2:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   254a4:	23db      	movs	r3, #219	; 0xdb
   254a6:	18fb      	adds	r3, r7, r3
   254a8:	781b      	ldrb	r3, [r3, #0]
   254aa:	b25b      	sxtb	r3, r3
   254ac:	4a27      	ldr	r2, [pc, #156]	; (2554c <m2m_ip_cb+0x540>)
   254ae:	011b      	lsls	r3, r3, #4
   254b0:	18d3      	adds	r3, r2, r3
   254b2:	3306      	adds	r3, #6
   254b4:	881b      	ldrh	r3, [r3, #0]
   254b6:	b29b      	uxth	r3, r3
   254b8:	22dc      	movs	r2, #220	; 0xdc
   254ba:	18ba      	adds	r2, r7, r2
   254bc:	8812      	ldrh	r2, [r2, #0]
   254be:	429a      	cmp	r2, r3
   254c0:	d13c      	bne.n	2553c <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   254c2:	4b24      	ldr	r3, [pc, #144]	; (25554 <m2m_ip_cb+0x548>)
   254c4:	681b      	ldr	r3, [r3, #0]
   254c6:	2b00      	cmp	r3, #0
   254c8:	d038      	beq.n	2553c <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   254ca:	4b22      	ldr	r3, [pc, #136]	; (25554 <m2m_ip_cb+0x548>)
   254cc:	681b      	ldr	r3, [r3, #0]
   254ce:	226e      	movs	r2, #110	; 0x6e
   254d0:	18bc      	adds	r4, r7, r2
   254d2:	22de      	movs	r2, #222	; 0xde
   254d4:	18ba      	adds	r2, r7, r2
   254d6:	7811      	ldrb	r1, [r2, #0]
   254d8:	22db      	movs	r2, #219	; 0xdb
   254da:	18ba      	adds	r2, r7, r2
   254dc:	2000      	movs	r0, #0
   254de:	5610      	ldrsb	r0, [r2, r0]
   254e0:	0022      	movs	r2, r4
   254e2:	4798      	blx	r3
	{
   254e4:	e02a      	b.n	2553c <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   254e6:	1dfb      	adds	r3, r7, #7
   254e8:	781b      	ldrb	r3, [r3, #0]
   254ea:	2b52      	cmp	r3, #82	; 0x52
   254ec:	d127      	bne.n	2553e <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   254ee:	2350      	movs	r3, #80	; 0x50
   254f0:	18f9      	adds	r1, r7, r3
   254f2:	6838      	ldr	r0, [r7, #0]
   254f4:	2301      	movs	r3, #1
   254f6:	2214      	movs	r2, #20
   254f8:	4c13      	ldr	r4, [pc, #76]	; (25548 <m2m_ip_cb+0x53c>)
   254fa:	47a0      	blx	r4
   254fc:	1e03      	subs	r3, r0, #0
   254fe:	d11e      	bne.n	2553e <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   25500:	2350      	movs	r3, #80	; 0x50
   25502:	18fb      	adds	r3, r7, r3
   25504:	685b      	ldr	r3, [r3, #4]
   25506:	001a      	movs	r2, r3
   25508:	4b13      	ldr	r3, [pc, #76]	; (25558 <m2m_ip_cb+0x54c>)
   2550a:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   2550c:	4b12      	ldr	r3, [pc, #72]	; (25558 <m2m_ip_cb+0x54c>)
   2550e:	681b      	ldr	r3, [r3, #0]
   25510:	2b00      	cmp	r3, #0
   25512:	d014      	beq.n	2553e <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   25514:	4b10      	ldr	r3, [pc, #64]	; (25558 <m2m_ip_cb+0x54c>)
   25516:	681c      	ldr	r4, [r3, #0]
   25518:	2350      	movs	r3, #80	; 0x50
   2551a:	18fb      	adds	r3, r7, r3
   2551c:	6818      	ldr	r0, [r3, #0]
   2551e:	2350      	movs	r3, #80	; 0x50
   25520:	18fb      	adds	r3, r7, r3
   25522:	6899      	ldr	r1, [r3, #8]
   25524:	2350      	movs	r3, #80	; 0x50
   25526:	18fb      	adds	r3, r7, r3
   25528:	7c1b      	ldrb	r3, [r3, #16]
   2552a:	001a      	movs	r2, r3
   2552c:	47a0      	blx	r4
}
   2552e:	e006      	b.n	2553e <m2m_ip_cb+0x532>
	{
   25530:	46c0      	nop			; (mov r8, r8)
   25532:	e004      	b.n	2553e <m2m_ip_cb+0x532>
	{
   25534:	46c0      	nop			; (mov r8, r8)
   25536:	e002      	b.n	2553e <m2m_ip_cb+0x532>
	{
   25538:	46c0      	nop			; (mov r8, r8)
   2553a:	e000      	b.n	2553e <m2m_ip_cb+0x532>
	{
   2553c:	46c0      	nop			; (mov r8, r8)
}
   2553e:	46c0      	nop			; (mov r8, r8)
   25540:	46bd      	mov	sp, r7
   25542:	b039      	add	sp, #228	; 0xe4
   25544:	bd90      	pop	{r4, r7, pc}
   25546:	46c0      	nop			; (mov r8, r8)
   25548:	00021809 	.word	0x00021809
   2554c:	20005984 	.word	0x20005984
   25550:	00024e11 	.word	0x00024e11
   25554:	20005a34 	.word	0x20005a34
   25558:	20005a38 	.word	0x20005a38

0002555c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   2555c:	b580      	push	{r7, lr}
   2555e:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   25560:	4b0c      	ldr	r3, [pc, #48]	; (25594 <socketInit+0x38>)
   25562:	781b      	ldrb	r3, [r3, #0]
   25564:	b2db      	uxtb	r3, r3
   25566:	2b00      	cmp	r3, #0
   25568:	d110      	bne.n	2558c <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   2556a:	4b0b      	ldr	r3, [pc, #44]	; (25598 <socketInit+0x3c>)
   2556c:	22b0      	movs	r2, #176	; 0xb0
   2556e:	2100      	movs	r1, #0
   25570:	0018      	movs	r0, r3
   25572:	4b0a      	ldr	r3, [pc, #40]	; (2559c <socketInit+0x40>)
   25574:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   25576:	4b0a      	ldr	r3, [pc, #40]	; (255a0 <socketInit+0x44>)
   25578:	0019      	movs	r1, r3
   2557a:	2002      	movs	r0, #2
   2557c:	4b09      	ldr	r3, [pc, #36]	; (255a4 <socketInit+0x48>)
   2557e:	4798      	blx	r3
		gbSocketInit	= 1;
   25580:	4b04      	ldr	r3, [pc, #16]	; (25594 <socketInit+0x38>)
   25582:	2201      	movs	r2, #1
   25584:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   25586:	4b08      	ldr	r3, [pc, #32]	; (255a8 <socketInit+0x4c>)
   25588:	2200      	movs	r2, #0
   2558a:	801a      	strh	r2, [r3, #0]
	}
}
   2558c:	46c0      	nop			; (mov r8, r8)
   2558e:	46bd      	mov	sp, r7
   25590:	bd80      	pop	{r7, pc}
   25592:	46c0      	nop			; (mov r8, r8)
   25594:	20004134 	.word	0x20004134
   25598:	20005984 	.word	0x20005984
   2559c:	00020c8d 	.word	0x00020c8d
   255a0:	0002500d 	.word	0x0002500d
   255a4:	00021989 	.word	0x00021989
   255a8:	20004132 	.word	0x20004132

000255ac <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   255ac:	b580      	push	{r7, lr}
   255ae:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   255b0:	4b0a      	ldr	r3, [pc, #40]	; (255dc <socketDeinit+0x30>)
   255b2:	22b0      	movs	r2, #176	; 0xb0
   255b4:	2100      	movs	r1, #0
   255b6:	0018      	movs	r0, r3
   255b8:	4b09      	ldr	r3, [pc, #36]	; (255e0 <socketDeinit+0x34>)
   255ba:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   255bc:	2100      	movs	r1, #0
   255be:	2002      	movs	r0, #2
   255c0:	4b08      	ldr	r3, [pc, #32]	; (255e4 <socketDeinit+0x38>)
   255c2:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   255c4:	4b08      	ldr	r3, [pc, #32]	; (255e8 <socketDeinit+0x3c>)
   255c6:	2200      	movs	r2, #0
   255c8:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   255ca:	4b08      	ldr	r3, [pc, #32]	; (255ec <socketDeinit+0x40>)
   255cc:	2200      	movs	r2, #0
   255ce:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   255d0:	4b07      	ldr	r3, [pc, #28]	; (255f0 <socketDeinit+0x44>)
   255d2:	2200      	movs	r2, #0
   255d4:	701a      	strb	r2, [r3, #0]
}
   255d6:	46c0      	nop			; (mov r8, r8)
   255d8:	46bd      	mov	sp, r7
   255da:	bd80      	pop	{r7, pc}
   255dc:	20005984 	.word	0x20005984
   255e0:	00020c8d 	.word	0x00020c8d
   255e4:	00021989 	.word	0x00021989
   255e8:	20005a34 	.word	0x20005a34
   255ec:	20005a3c 	.word	0x20005a3c
   255f0:	20004134 	.word	0x20004134

000255f4 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   255f4:	b580      	push	{r7, lr}
   255f6:	b082      	sub	sp, #8
   255f8:	af00      	add	r7, sp, #0
   255fa:	6078      	str	r0, [r7, #4]
   255fc:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   255fe:	4b05      	ldr	r3, [pc, #20]	; (25614 <registerSocketCallback+0x20>)
   25600:	687a      	ldr	r2, [r7, #4]
   25602:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   25604:	4b04      	ldr	r3, [pc, #16]	; (25618 <registerSocketCallback+0x24>)
   25606:	683a      	ldr	r2, [r7, #0]
   25608:	601a      	str	r2, [r3, #0]
}
   2560a:	46c0      	nop			; (mov r8, r8)
   2560c:	46bd      	mov	sp, r7
   2560e:	b002      	add	sp, #8
   25610:	bd80      	pop	{r7, pc}
   25612:	46c0      	nop			; (mov r8, r8)
   25614:	20005a34 	.word	0x20005a34
   25618:	20005a3c 	.word	0x20005a3c

0002561c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   2561c:	b590      	push	{r4, r7, lr}
   2561e:	b08d      	sub	sp, #52	; 0x34
   25620:	af04      	add	r7, sp, #16
   25622:	0004      	movs	r4, r0
   25624:	0008      	movs	r0, r1
   25626:	0011      	movs	r1, r2
   25628:	1dbb      	adds	r3, r7, #6
   2562a:	1c22      	adds	r2, r4, #0
   2562c:	801a      	strh	r2, [r3, #0]
   2562e:	1d7b      	adds	r3, r7, #5
   25630:	1c02      	adds	r2, r0, #0
   25632:	701a      	strb	r2, [r3, #0]
   25634:	1d3b      	adds	r3, r7, #4
   25636:	1c0a      	adds	r2, r1, #0
   25638:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   2563a:	231f      	movs	r3, #31
   2563c:	18fb      	adds	r3, r7, r3
   2563e:	22ff      	movs	r2, #255	; 0xff
   25640:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   25642:	1dbb      	adds	r3, r7, #6
   25644:	881b      	ldrh	r3, [r3, #0]
   25646:	2b02      	cmp	r3, #2
   25648:	d000      	beq.n	2564c <socket+0x30>
   2564a:	e0ce      	b.n	257ea <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   2564c:	1d7b      	adds	r3, r7, #5
   2564e:	781b      	ldrb	r3, [r3, #0]
   25650:	2b01      	cmp	r3, #1
   25652:	d135      	bne.n	256c0 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   25654:	231e      	movs	r3, #30
   25656:	18fb      	adds	r3, r7, r3
   25658:	2200      	movs	r2, #0
   2565a:	701a      	strb	r2, [r3, #0]
   2565c:	e02a      	b.n	256b4 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   2565e:	2317      	movs	r3, #23
   25660:	18fb      	adds	r3, r7, r3
   25662:	4a66      	ldr	r2, [pc, #408]	; (257fc <socket+0x1e0>)
   25664:	7812      	ldrb	r2, [r2, #0]
   25666:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   25668:	4b64      	ldr	r3, [pc, #400]	; (257fc <socket+0x1e0>)
   2566a:	781b      	ldrb	r3, [r3, #0]
   2566c:	b2db      	uxtb	r3, r3
   2566e:	011a      	lsls	r2, r3, #4
   25670:	4b63      	ldr	r3, [pc, #396]	; (25800 <socket+0x1e4>)
   25672:	18d3      	adds	r3, r2, r3
   25674:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   25676:	4b61      	ldr	r3, [pc, #388]	; (257fc <socket+0x1e0>)
   25678:	781b      	ldrb	r3, [r3, #0]
   2567a:	b2db      	uxtb	r3, r3
   2567c:	1c5a      	adds	r2, r3, #1
   2567e:	4b61      	ldr	r3, [pc, #388]	; (25804 <socket+0x1e8>)
   25680:	2107      	movs	r1, #7
   25682:	0010      	movs	r0, r2
   25684:	4798      	blx	r3
   25686:	000b      	movs	r3, r1
   25688:	b2da      	uxtb	r2, r3
   2568a:	4b5c      	ldr	r3, [pc, #368]	; (257fc <socket+0x1e0>)
   2568c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   2568e:	69bb      	ldr	r3, [r7, #24]
   25690:	7a9b      	ldrb	r3, [r3, #10]
   25692:	b2db      	uxtb	r3, r3
   25694:	2b00      	cmp	r3, #0
   25696:	d106      	bne.n	256a6 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   25698:	231f      	movs	r3, #31
   2569a:	18fb      	adds	r3, r7, r3
   2569c:	2217      	movs	r2, #23
   2569e:	18ba      	adds	r2, r7, r2
   256a0:	7812      	ldrb	r2, [r2, #0]
   256a2:	701a      	strb	r2, [r3, #0]
					break;
   256a4:	e04c      	b.n	25740 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   256a6:	231e      	movs	r3, #30
   256a8:	18fb      	adds	r3, r7, r3
   256aa:	781a      	ldrb	r2, [r3, #0]
   256ac:	231e      	movs	r3, #30
   256ae:	18fb      	adds	r3, r7, r3
   256b0:	3201      	adds	r2, #1
   256b2:	701a      	strb	r2, [r3, #0]
   256b4:	231e      	movs	r3, #30
   256b6:	18fb      	adds	r3, r7, r3
   256b8:	781b      	ldrb	r3, [r3, #0]
   256ba:	2b06      	cmp	r3, #6
   256bc:	d9cf      	bls.n	2565e <socket+0x42>
   256be:	e03f      	b.n	25740 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   256c0:	1d7b      	adds	r3, r7, #5
   256c2:	781b      	ldrb	r3, [r3, #0]
   256c4:	2b02      	cmp	r3, #2
   256c6:	d13b      	bne.n	25740 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   256c8:	4b4f      	ldr	r3, [pc, #316]	; (25808 <socket+0x1ec>)
   256ca:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   256cc:	231e      	movs	r3, #30
   256ce:	18fb      	adds	r3, r7, r3
   256d0:	2200      	movs	r2, #0
   256d2:	701a      	strb	r2, [r3, #0]
   256d4:	e02f      	b.n	25736 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   256d6:	2317      	movs	r3, #23
   256d8:	18fb      	adds	r3, r7, r3
   256da:	4a4c      	ldr	r2, [pc, #304]	; (2580c <socket+0x1f0>)
   256dc:	7812      	ldrb	r2, [r2, #0]
   256de:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   256e0:	4b4a      	ldr	r3, [pc, #296]	; (2580c <socket+0x1f0>)
   256e2:	781b      	ldrb	r3, [r3, #0]
   256e4:	b2db      	uxtb	r3, r3
   256e6:	011b      	lsls	r3, r3, #4
   256e8:	693a      	ldr	r2, [r7, #16]
   256ea:	18d3      	adds	r3, r2, r3
   256ec:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   256ee:	4b47      	ldr	r3, [pc, #284]	; (2580c <socket+0x1f0>)
   256f0:	781b      	ldrb	r3, [r3, #0]
   256f2:	b2db      	uxtb	r3, r3
   256f4:	3301      	adds	r3, #1
   256f6:	4a46      	ldr	r2, [pc, #280]	; (25810 <socket+0x1f4>)
   256f8:	4013      	ands	r3, r2
   256fa:	d504      	bpl.n	25706 <socket+0xea>
   256fc:	3b01      	subs	r3, #1
   256fe:	2204      	movs	r2, #4
   25700:	4252      	negs	r2, r2
   25702:	4313      	orrs	r3, r2
   25704:	3301      	adds	r3, #1
   25706:	b2da      	uxtb	r2, r3
   25708:	4b40      	ldr	r3, [pc, #256]	; (2580c <socket+0x1f0>)
   2570a:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   2570c:	69bb      	ldr	r3, [r7, #24]
   2570e:	7a9b      	ldrb	r3, [r3, #10]
   25710:	b2db      	uxtb	r3, r3
   25712:	2b00      	cmp	r3, #0
   25714:	d108      	bne.n	25728 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   25716:	2317      	movs	r3, #23
   25718:	18fb      	adds	r3, r7, r3
   2571a:	781b      	ldrb	r3, [r3, #0]
   2571c:	3307      	adds	r3, #7
   2571e:	b2da      	uxtb	r2, r3
   25720:	231f      	movs	r3, #31
   25722:	18fb      	adds	r3, r7, r3
   25724:	701a      	strb	r2, [r3, #0]
					break;
   25726:	e00b      	b.n	25740 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   25728:	231e      	movs	r3, #30
   2572a:	18fb      	adds	r3, r7, r3
   2572c:	781a      	ldrb	r2, [r3, #0]
   2572e:	231e      	movs	r3, #30
   25730:	18fb      	adds	r3, r7, r3
   25732:	3201      	adds	r2, #1
   25734:	701a      	strb	r2, [r3, #0]
   25736:	231e      	movs	r3, #30
   25738:	18fb      	adds	r3, r7, r3
   2573a:	781b      	ldrb	r3, [r3, #0]
   2573c:	2b03      	cmp	r3, #3
   2573e:	d9ca      	bls.n	256d6 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   25740:	231f      	movs	r3, #31
   25742:	18fb      	adds	r3, r7, r3
   25744:	781b      	ldrb	r3, [r3, #0]
   25746:	2b7f      	cmp	r3, #127	; 0x7f
   25748:	d84f      	bhi.n	257ea <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   2574a:	69bb      	ldr	r3, [r7, #24]
   2574c:	2210      	movs	r2, #16
   2574e:	2100      	movs	r1, #0
   25750:	0018      	movs	r0, r3
   25752:	4b30      	ldr	r3, [pc, #192]	; (25814 <socket+0x1f8>)
   25754:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   25756:	69bb      	ldr	r3, [r7, #24]
   25758:	2201      	movs	r2, #1
   2575a:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   2575c:	4b2e      	ldr	r3, [pc, #184]	; (25818 <socket+0x1fc>)
   2575e:	881b      	ldrh	r3, [r3, #0]
   25760:	b29b      	uxth	r3, r3
   25762:	3301      	adds	r3, #1
   25764:	b29a      	uxth	r2, r3
   25766:	4b2c      	ldr	r3, [pc, #176]	; (25818 <socket+0x1fc>)
   25768:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   2576a:	4b2b      	ldr	r3, [pc, #172]	; (25818 <socket+0x1fc>)
   2576c:	881b      	ldrh	r3, [r3, #0]
   2576e:	b29b      	uxth	r3, r3
   25770:	2b00      	cmp	r3, #0
   25772:	d106      	bne.n	25782 <socket+0x166>
				++gu16SessionID;
   25774:	4b28      	ldr	r3, [pc, #160]	; (25818 <socket+0x1fc>)
   25776:	881b      	ldrh	r3, [r3, #0]
   25778:	b29b      	uxth	r3, r3
   2577a:	3301      	adds	r3, #1
   2577c:	b29a      	uxth	r2, r3
   2577e:	4b26      	ldr	r3, [pc, #152]	; (25818 <socket+0x1fc>)
   25780:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   25782:	4b25      	ldr	r3, [pc, #148]	; (25818 <socket+0x1fc>)
   25784:	881b      	ldrh	r3, [r3, #0]
   25786:	b29a      	uxth	r2, r3
   25788:	69bb      	ldr	r3, [r7, #24]
   2578a:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   2578c:	4b23      	ldr	r3, [pc, #140]	; (2581c <socket+0x200>)
   2578e:	0018      	movs	r0, r3
   25790:	4b23      	ldr	r3, [pc, #140]	; (25820 <socket+0x204>)
   25792:	4798      	blx	r3
   25794:	231f      	movs	r3, #31
   25796:	18fb      	adds	r3, r7, r3
   25798:	2100      	movs	r1, #0
   2579a:	5659      	ldrsb	r1, [r3, r1]
   2579c:	4b1e      	ldr	r3, [pc, #120]	; (25818 <socket+0x1fc>)
   2579e:	881b      	ldrh	r3, [r3, #0]
   257a0:	b29b      	uxth	r3, r3
   257a2:	001a      	movs	r2, r3
   257a4:	4b1f      	ldr	r3, [pc, #124]	; (25824 <socket+0x208>)
   257a6:	0018      	movs	r0, r3
   257a8:	4b1d      	ldr	r3, [pc, #116]	; (25820 <socket+0x204>)
   257aa:	4798      	blx	r3
   257ac:	4b1e      	ldr	r3, [pc, #120]	; (25828 <socket+0x20c>)
   257ae:	0018      	movs	r0, r3
   257b0:	4b1b      	ldr	r3, [pc, #108]	; (25820 <socket+0x204>)
   257b2:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   257b4:	1d3b      	adds	r3, r7, #4
   257b6:	781b      	ldrb	r3, [r3, #0]
   257b8:	2201      	movs	r2, #1
   257ba:	4013      	ands	r3, r2
   257bc:	d015      	beq.n	257ea <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   257be:	230c      	movs	r3, #12
   257c0:	18fb      	adds	r3, r7, r3
   257c2:	221f      	movs	r2, #31
   257c4:	18ba      	adds	r2, r7, r2
   257c6:	7812      	ldrb	r2, [r2, #0]
   257c8:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   257ca:	69bb      	ldr	r3, [r7, #24]
   257cc:	2221      	movs	r2, #33	; 0x21
   257ce:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   257d0:	230c      	movs	r3, #12
   257d2:	18fa      	adds	r2, r7, r3
   257d4:	2300      	movs	r3, #0
   257d6:	9302      	str	r3, [sp, #8]
   257d8:	2300      	movs	r3, #0
   257da:	9301      	str	r3, [sp, #4]
   257dc:	2300      	movs	r3, #0
   257de:	9300      	str	r3, [sp, #0]
   257e0:	2304      	movs	r3, #4
   257e2:	2150      	movs	r1, #80	; 0x50
   257e4:	2002      	movs	r0, #2
   257e6:	4c11      	ldr	r4, [pc, #68]	; (2582c <socket+0x210>)
   257e8:	47a0      	blx	r4
			}
		}
	}
	return sock;
   257ea:	231f      	movs	r3, #31
   257ec:	18fb      	adds	r3, r7, r3
   257ee:	781b      	ldrb	r3, [r3, #0]
   257f0:	b25b      	sxtb	r3, r3
}
   257f2:	0018      	movs	r0, r3
   257f4:	46bd      	mov	sp, r7
   257f6:	b009      	add	sp, #36	; 0x24
   257f8:	bd90      	pop	{r4, r7, pc}
   257fa:	46c0      	nop			; (mov r8, r8)
   257fc:	20004135 	.word	0x20004135
   25800:	20005984 	.word	0x20005984
   25804:	00032d65 	.word	0x00032d65
   25808:	200059f4 	.word	0x200059f4
   2580c:	20004136 	.word	0x20004136
   25810:	80000003 	.word	0x80000003
   25814:	00020c8d 	.word	0x00020c8d
   25818:	20004132 	.word	0x20004132
   2581c:	00039508 	.word	0x00039508
   25820:	0001df59 	.word	0x0001df59
   25824:	0003952c 	.word	0x0003952c
   25828:	00039528 	.word	0x00039528
   2582c:	00020eed 	.word	0x00020eed

00025830 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   25830:	b5b0      	push	{r4, r5, r7, lr}
   25832:	b08a      	sub	sp, #40	; 0x28
   25834:	af04      	add	r7, sp, #16
   25836:	6039      	str	r1, [r7, #0]
   25838:	0011      	movs	r1, r2
   2583a:	1dfb      	adds	r3, r7, #7
   2583c:	1c02      	adds	r2, r0, #0
   2583e:	701a      	strb	r2, [r3, #0]
   25840:	1dbb      	adds	r3, r7, #6
   25842:	1c0a      	adds	r2, r1, #0
   25844:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25846:	2317      	movs	r3, #23
   25848:	18fb      	adds	r3, r7, r3
   2584a:	22fa      	movs	r2, #250	; 0xfa
   2584c:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   2584e:	1dfb      	adds	r3, r7, #7
   25850:	781b      	ldrb	r3, [r3, #0]
   25852:	2b7f      	cmp	r3, #127	; 0x7f
   25854:	d867      	bhi.n	25926 <connect+0xf6>
   25856:	683b      	ldr	r3, [r7, #0]
   25858:	2b00      	cmp	r3, #0
   2585a:	d064      	beq.n	25926 <connect+0xf6>
   2585c:	1dfb      	adds	r3, r7, #7
   2585e:	781b      	ldrb	r3, [r3, #0]
   25860:	b25b      	sxtb	r3, r3
   25862:	4a35      	ldr	r2, [pc, #212]	; (25938 <connect+0x108>)
   25864:	011b      	lsls	r3, r3, #4
   25866:	18d3      	adds	r3, r2, r3
   25868:	330a      	adds	r3, #10
   2586a:	781b      	ldrb	r3, [r3, #0]
   2586c:	b2db      	uxtb	r3, r3
   2586e:	2b01      	cmp	r3, #1
   25870:	d159      	bne.n	25926 <connect+0xf6>
   25872:	1dbb      	adds	r3, r7, #6
   25874:	781b      	ldrb	r3, [r3, #0]
   25876:	2b00      	cmp	r3, #0
   25878:	d055      	beq.n	25926 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   2587a:	2316      	movs	r3, #22
   2587c:	18fb      	adds	r3, r7, r3
   2587e:	2244      	movs	r2, #68	; 0x44
   25880:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   25882:	1dfb      	adds	r3, r7, #7
   25884:	781b      	ldrb	r3, [r3, #0]
   25886:	b25b      	sxtb	r3, r3
   25888:	4a2b      	ldr	r2, [pc, #172]	; (25938 <connect+0x108>)
   2588a:	011b      	lsls	r3, r3, #4
   2588c:	18d3      	adds	r3, r2, r3
   2588e:	330b      	adds	r3, #11
   25890:	781b      	ldrb	r3, [r3, #0]
   25892:	b2db      	uxtb	r3, r3
   25894:	001a      	movs	r2, r3
   25896:	2301      	movs	r3, #1
   25898:	4013      	ands	r3, r2
   2589a:	d00f      	beq.n	258bc <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   2589c:	2316      	movs	r3, #22
   2589e:	18fb      	adds	r3, r7, r3
   258a0:	224b      	movs	r2, #75	; 0x4b
   258a2:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   258a4:	1dfb      	adds	r3, r7, #7
   258a6:	781b      	ldrb	r3, [r3, #0]
   258a8:	b25b      	sxtb	r3, r3
   258aa:	4a23      	ldr	r2, [pc, #140]	; (25938 <connect+0x108>)
   258ac:	011b      	lsls	r3, r3, #4
   258ae:	18d3      	adds	r3, r2, r3
   258b0:	330b      	adds	r3, #11
   258b2:	781b      	ldrb	r3, [r3, #0]
   258b4:	b2da      	uxtb	r2, r3
   258b6:	2308      	movs	r3, #8
   258b8:	18fb      	adds	r3, r7, r3
   258ba:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   258bc:	2308      	movs	r3, #8
   258be:	18fb      	adds	r3, r7, r3
   258c0:	1dfa      	adds	r2, r7, #7
   258c2:	7812      	ldrb	r2, [r2, #0]
   258c4:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   258c6:	6839      	ldr	r1, [r7, #0]
   258c8:	2308      	movs	r3, #8
   258ca:	18fb      	adds	r3, r7, r3
   258cc:	2208      	movs	r2, #8
   258ce:	0018      	movs	r0, r3
   258d0:	4b1a      	ldr	r3, [pc, #104]	; (2593c <connect+0x10c>)
   258d2:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   258d4:	1dfb      	adds	r3, r7, #7
   258d6:	781b      	ldrb	r3, [r3, #0]
   258d8:	b25b      	sxtb	r3, r3
   258da:	4a17      	ldr	r2, [pc, #92]	; (25938 <connect+0x108>)
   258dc:	011b      	lsls	r3, r3, #4
   258de:	18d3      	adds	r3, r2, r3
   258e0:	3306      	adds	r3, #6
   258e2:	881b      	ldrh	r3, [r3, #0]
   258e4:	b29a      	uxth	r2, r3
   258e6:	2308      	movs	r3, #8
   258e8:	18fb      	adds	r3, r7, r3
   258ea:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   258ec:	2317      	movs	r3, #23
   258ee:	18fc      	adds	r4, r7, r3
   258f0:	2308      	movs	r3, #8
   258f2:	18fa      	adds	r2, r7, r3
   258f4:	2316      	movs	r3, #22
   258f6:	18fb      	adds	r3, r7, r3
   258f8:	7819      	ldrb	r1, [r3, #0]
   258fa:	2300      	movs	r3, #0
   258fc:	9302      	str	r3, [sp, #8]
   258fe:	2300      	movs	r3, #0
   25900:	9301      	str	r3, [sp, #4]
   25902:	2300      	movs	r3, #0
   25904:	9300      	str	r3, [sp, #0]
   25906:	230c      	movs	r3, #12
   25908:	2002      	movs	r0, #2
   2590a:	4d0d      	ldr	r5, [pc, #52]	; (25940 <connect+0x110>)
   2590c:	47a8      	blx	r5
   2590e:	0003      	movs	r3, r0
   25910:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25912:	2317      	movs	r3, #23
   25914:	18fb      	adds	r3, r7, r3
   25916:	781b      	ldrb	r3, [r3, #0]
   25918:	b25b      	sxtb	r3, r3
   2591a:	2b00      	cmp	r3, #0
   2591c:	d003      	beq.n	25926 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   2591e:	2317      	movs	r3, #23
   25920:	18fb      	adds	r3, r7, r3
   25922:	22f7      	movs	r2, #247	; 0xf7
   25924:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   25926:	2317      	movs	r3, #23
   25928:	18fb      	adds	r3, r7, r3
   2592a:	781b      	ldrb	r3, [r3, #0]
   2592c:	b25b      	sxtb	r3, r3
}
   2592e:	0018      	movs	r0, r3
   25930:	46bd      	mov	sp, r7
   25932:	b006      	add	sp, #24
   25934:	bdb0      	pop	{r4, r5, r7, pc}
   25936:	46c0      	nop			; (mov r8, r8)
   25938:	20005984 	.word	0x20005984
   2593c:	00020c51 	.word	0x00020c51
   25940:	00020eed 	.word	0x00020eed

00025944 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   25944:	b590      	push	{r4, r7, lr}
   25946:	b08f      	sub	sp, #60	; 0x3c
   25948:	af04      	add	r7, sp, #16
   2594a:	0004      	movs	r4, r0
   2594c:	60b9      	str	r1, [r7, #8]
   2594e:	0010      	movs	r0, r2
   25950:	0019      	movs	r1, r3
   25952:	230f      	movs	r3, #15
   25954:	18fb      	adds	r3, r7, r3
   25956:	1c22      	adds	r2, r4, #0
   25958:	701a      	strb	r2, [r3, #0]
   2595a:	230c      	movs	r3, #12
   2595c:	18fb      	adds	r3, r7, r3
   2595e:	1c02      	adds	r2, r0, #0
   25960:	801a      	strh	r2, [r3, #0]
   25962:	1dbb      	adds	r3, r7, #6
   25964:	1c0a      	adds	r2, r1, #0
   25966:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25968:	2326      	movs	r3, #38	; 0x26
   2596a:	18fb      	adds	r3, r7, r3
   2596c:	2206      	movs	r2, #6
   2596e:	4252      	negs	r2, r2
   25970:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   25972:	230f      	movs	r3, #15
   25974:	18fb      	adds	r3, r7, r3
   25976:	781b      	ldrb	r3, [r3, #0]
   25978:	2b7f      	cmp	r3, #127	; 0x7f
   2597a:	d900      	bls.n	2597e <send+0x3a>
   2597c:	e087      	b.n	25a8e <send+0x14a>
   2597e:	68bb      	ldr	r3, [r7, #8]
   25980:	2b00      	cmp	r3, #0
   25982:	d100      	bne.n	25986 <send+0x42>
   25984:	e083      	b.n	25a8e <send+0x14a>
   25986:	230c      	movs	r3, #12
   25988:	18fb      	adds	r3, r7, r3
   2598a:	881a      	ldrh	r2, [r3, #0]
   2598c:	23af      	movs	r3, #175	; 0xaf
   2598e:	00db      	lsls	r3, r3, #3
   25990:	429a      	cmp	r2, r3
   25992:	d900      	bls.n	25996 <send+0x52>
   25994:	e07b      	b.n	25a8e <send+0x14a>
   25996:	230f      	movs	r3, #15
   25998:	18fb      	adds	r3, r7, r3
   2599a:	781b      	ldrb	r3, [r3, #0]
   2599c:	b25b      	sxtb	r3, r3
   2599e:	4a40      	ldr	r2, [pc, #256]	; (25aa0 <send+0x15c>)
   259a0:	011b      	lsls	r3, r3, #4
   259a2:	18d3      	adds	r3, r2, r3
   259a4:	330a      	adds	r3, #10
   259a6:	781b      	ldrb	r3, [r3, #0]
   259a8:	b2db      	uxtb	r3, r3
   259aa:	2b01      	cmp	r3, #1
   259ac:	d16f      	bne.n	25a8e <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   259ae:	2323      	movs	r3, #35	; 0x23
   259b0:	18fb      	adds	r3, r7, r3
   259b2:	2245      	movs	r2, #69	; 0x45
   259b4:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   259b6:	2324      	movs	r3, #36	; 0x24
   259b8:	18fb      	adds	r3, r7, r3
   259ba:	2250      	movs	r2, #80	; 0x50
   259bc:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   259be:	2310      	movs	r3, #16
   259c0:	18fb      	adds	r3, r7, r3
   259c2:	220f      	movs	r2, #15
   259c4:	18ba      	adds	r2, r7, r2
   259c6:	7812      	ldrb	r2, [r2, #0]
   259c8:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   259ca:	2310      	movs	r3, #16
   259cc:	18fb      	adds	r3, r7, r3
   259ce:	220c      	movs	r2, #12
   259d0:	18ba      	adds	r2, r7, r2
   259d2:	8812      	ldrh	r2, [r2, #0]
   259d4:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   259d6:	230f      	movs	r3, #15
   259d8:	18fb      	adds	r3, r7, r3
   259da:	781b      	ldrb	r3, [r3, #0]
   259dc:	b25b      	sxtb	r3, r3
   259de:	4a30      	ldr	r2, [pc, #192]	; (25aa0 <send+0x15c>)
   259e0:	011b      	lsls	r3, r3, #4
   259e2:	18d3      	adds	r3, r2, r3
   259e4:	3306      	adds	r3, #6
   259e6:	881b      	ldrh	r3, [r3, #0]
   259e8:	b29a      	uxth	r2, r3
   259ea:	2310      	movs	r3, #16
   259ec:	18fb      	adds	r3, r7, r3
   259ee:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   259f0:	230f      	movs	r3, #15
   259f2:	18fb      	adds	r3, r7, r3
   259f4:	781b      	ldrb	r3, [r3, #0]
   259f6:	b25b      	sxtb	r3, r3
   259f8:	2b06      	cmp	r3, #6
   259fa:	dd03      	ble.n	25a04 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   259fc:	2324      	movs	r3, #36	; 0x24
   259fe:	18fb      	adds	r3, r7, r3
   25a00:	2244      	movs	r2, #68	; 0x44
   25a02:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25a04:	230f      	movs	r3, #15
   25a06:	18fb      	adds	r3, r7, r3
   25a08:	781b      	ldrb	r3, [r3, #0]
   25a0a:	b25b      	sxtb	r3, r3
   25a0c:	4a24      	ldr	r2, [pc, #144]	; (25aa0 <send+0x15c>)
   25a0e:	011b      	lsls	r3, r3, #4
   25a10:	18d3      	adds	r3, r2, r3
   25a12:	330b      	adds	r3, #11
   25a14:	781b      	ldrb	r3, [r3, #0]
   25a16:	b2db      	uxtb	r3, r3
   25a18:	001a      	movs	r2, r3
   25a1a:	2301      	movs	r3, #1
   25a1c:	4013      	ands	r3, r2
   25a1e:	d00f      	beq.n	25a40 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   25a20:	2323      	movs	r3, #35	; 0x23
   25a22:	18fb      	adds	r3, r7, r3
   25a24:	224c      	movs	r2, #76	; 0x4c
   25a26:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   25a28:	230f      	movs	r3, #15
   25a2a:	18fb      	adds	r3, r7, r3
   25a2c:	2200      	movs	r2, #0
   25a2e:	569a      	ldrsb	r2, [r3, r2]
   25a30:	2324      	movs	r3, #36	; 0x24
   25a32:	18fb      	adds	r3, r7, r3
   25a34:	491a      	ldr	r1, [pc, #104]	; (25aa0 <send+0x15c>)
   25a36:	0112      	lsls	r2, r2, #4
   25a38:	188a      	adds	r2, r1, r2
   25a3a:	3208      	adds	r2, #8
   25a3c:	8812      	ldrh	r2, [r2, #0]
   25a3e:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   25a40:	2323      	movs	r3, #35	; 0x23
   25a42:	18fb      	adds	r3, r7, r3
   25a44:	781b      	ldrb	r3, [r3, #0]
   25a46:	2280      	movs	r2, #128	; 0x80
   25a48:	4252      	negs	r2, r2
   25a4a:	4313      	orrs	r3, r2
   25a4c:	b2d9      	uxtb	r1, r3
   25a4e:	2310      	movs	r3, #16
   25a50:	18fa      	adds	r2, r7, r3
   25a52:	2324      	movs	r3, #36	; 0x24
   25a54:	18fb      	adds	r3, r7, r3
   25a56:	881b      	ldrh	r3, [r3, #0]
   25a58:	9302      	str	r3, [sp, #8]
   25a5a:	230c      	movs	r3, #12
   25a5c:	18fb      	adds	r3, r7, r3
   25a5e:	881b      	ldrh	r3, [r3, #0]
   25a60:	9301      	str	r3, [sp, #4]
   25a62:	68bb      	ldr	r3, [r7, #8]
   25a64:	9300      	str	r3, [sp, #0]
   25a66:	2310      	movs	r3, #16
   25a68:	2002      	movs	r0, #2
   25a6a:	4c0e      	ldr	r4, [pc, #56]	; (25aa4 <send+0x160>)
   25a6c:	47a0      	blx	r4
   25a6e:	0003      	movs	r3, r0
   25a70:	001a      	movs	r2, r3
   25a72:	2326      	movs	r3, #38	; 0x26
   25a74:	18fb      	adds	r3, r7, r3
   25a76:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   25a78:	2326      	movs	r3, #38	; 0x26
   25a7a:	18fb      	adds	r3, r7, r3
   25a7c:	2200      	movs	r2, #0
   25a7e:	5e9b      	ldrsh	r3, [r3, r2]
   25a80:	2b00      	cmp	r3, #0
   25a82:	d004      	beq.n	25a8e <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   25a84:	2326      	movs	r3, #38	; 0x26
   25a86:	18fb      	adds	r3, r7, r3
   25a88:	220e      	movs	r2, #14
   25a8a:	4252      	negs	r2, r2
   25a8c:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   25a8e:	2326      	movs	r3, #38	; 0x26
   25a90:	18fb      	adds	r3, r7, r3
   25a92:	2200      	movs	r2, #0
   25a94:	5e9b      	ldrsh	r3, [r3, r2]
}
   25a96:	0018      	movs	r0, r3
   25a98:	46bd      	mov	sp, r7
   25a9a:	b00b      	add	sp, #44	; 0x2c
   25a9c:	bd90      	pop	{r4, r7, pc}
   25a9e:	46c0      	nop			; (mov r8, r8)
   25aa0:	20005984 	.word	0x20005984
   25aa4:	00020eed 	.word	0x00020eed

00025aa8 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   25aa8:	b590      	push	{r4, r7, lr}
   25aaa:	b08d      	sub	sp, #52	; 0x34
   25aac:	af04      	add	r7, sp, #16
   25aae:	60b9      	str	r1, [r7, #8]
   25ab0:	0011      	movs	r1, r2
   25ab2:	607b      	str	r3, [r7, #4]
   25ab4:	230f      	movs	r3, #15
   25ab6:	18fb      	adds	r3, r7, r3
   25ab8:	1c02      	adds	r2, r0, #0
   25aba:	701a      	strb	r2, [r3, #0]
   25abc:	230c      	movs	r3, #12
   25abe:	18fb      	adds	r3, r7, r3
   25ac0:	1c0a      	adds	r2, r1, #0
   25ac2:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25ac4:	231e      	movs	r3, #30
   25ac6:	18fb      	adds	r3, r7, r3
   25ac8:	2206      	movs	r2, #6
   25aca:	4252      	negs	r2, r2
   25acc:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   25ace:	230f      	movs	r3, #15
   25ad0:	18fb      	adds	r3, r7, r3
   25ad2:	781b      	ldrb	r3, [r3, #0]
   25ad4:	2b7f      	cmp	r3, #127	; 0x7f
   25ad6:	d900      	bls.n	25ada <recv+0x32>
   25ad8:	e099      	b.n	25c0e <recv+0x166>
   25ada:	68bb      	ldr	r3, [r7, #8]
   25adc:	2b00      	cmp	r3, #0
   25ade:	d100      	bne.n	25ae2 <recv+0x3a>
   25ae0:	e095      	b.n	25c0e <recv+0x166>
   25ae2:	230c      	movs	r3, #12
   25ae4:	18fb      	adds	r3, r7, r3
   25ae6:	881b      	ldrh	r3, [r3, #0]
   25ae8:	2b00      	cmp	r3, #0
   25aea:	d100      	bne.n	25aee <recv+0x46>
   25aec:	e08f      	b.n	25c0e <recv+0x166>
   25aee:	230f      	movs	r3, #15
   25af0:	18fb      	adds	r3, r7, r3
   25af2:	781b      	ldrb	r3, [r3, #0]
   25af4:	b25b      	sxtb	r3, r3
   25af6:	4a4a      	ldr	r2, [pc, #296]	; (25c20 <recv+0x178>)
   25af8:	011b      	lsls	r3, r3, #4
   25afa:	18d3      	adds	r3, r2, r3
   25afc:	330a      	adds	r3, #10
   25afe:	781b      	ldrb	r3, [r3, #0]
   25b00:	b2db      	uxtb	r3, r3
   25b02:	2b01      	cmp	r3, #1
   25b04:	d000      	beq.n	25b08 <recv+0x60>
   25b06:	e082      	b.n	25c0e <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   25b08:	231e      	movs	r3, #30
   25b0a:	18fb      	adds	r3, r7, r3
   25b0c:	2200      	movs	r2, #0
   25b0e:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   25b10:	230f      	movs	r3, #15
   25b12:	18fb      	adds	r3, r7, r3
   25b14:	2200      	movs	r2, #0
   25b16:	569a      	ldrsb	r2, [r3, r2]
   25b18:	4b41      	ldr	r3, [pc, #260]	; (25c20 <recv+0x178>)
   25b1a:	0112      	lsls	r2, r2, #4
   25b1c:	68b9      	ldr	r1, [r7, #8]
   25b1e:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   25b20:	230f      	movs	r3, #15
   25b22:	18fb      	adds	r3, r7, r3
   25b24:	781b      	ldrb	r3, [r3, #0]
   25b26:	b25b      	sxtb	r3, r3
   25b28:	4a3d      	ldr	r2, [pc, #244]	; (25c20 <recv+0x178>)
   25b2a:	011b      	lsls	r3, r3, #4
   25b2c:	18d3      	adds	r3, r2, r3
   25b2e:	3304      	adds	r3, #4
   25b30:	220c      	movs	r2, #12
   25b32:	18ba      	adds	r2, r7, r2
   25b34:	8812      	ldrh	r2, [r2, #0]
   25b36:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   25b38:	230f      	movs	r3, #15
   25b3a:	18fb      	adds	r3, r7, r3
   25b3c:	781b      	ldrb	r3, [r3, #0]
   25b3e:	b25b      	sxtb	r3, r3
   25b40:	4a37      	ldr	r2, [pc, #220]	; (25c20 <recv+0x178>)
   25b42:	011b      	lsls	r3, r3, #4
   25b44:	18d3      	adds	r3, r2, r3
   25b46:	330c      	adds	r3, #12
   25b48:	781b      	ldrb	r3, [r3, #0]
   25b4a:	b2db      	uxtb	r3, r3
   25b4c:	2b00      	cmp	r3, #0
   25b4e:	d15e      	bne.n	25c0e <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   25b50:	231d      	movs	r3, #29
   25b52:	18fb      	adds	r3, r7, r3
   25b54:	2246      	movs	r2, #70	; 0x46
   25b56:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   25b58:	230f      	movs	r3, #15
   25b5a:	18fb      	adds	r3, r7, r3
   25b5c:	781b      	ldrb	r3, [r3, #0]
   25b5e:	b25b      	sxtb	r3, r3
   25b60:	4a2f      	ldr	r2, [pc, #188]	; (25c20 <recv+0x178>)
   25b62:	011b      	lsls	r3, r3, #4
   25b64:	18d3      	adds	r3, r2, r3
   25b66:	330c      	adds	r3, #12
   25b68:	2201      	movs	r2, #1
   25b6a:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25b6c:	230f      	movs	r3, #15
   25b6e:	18fb      	adds	r3, r7, r3
   25b70:	781b      	ldrb	r3, [r3, #0]
   25b72:	b25b      	sxtb	r3, r3
   25b74:	4a2a      	ldr	r2, [pc, #168]	; (25c20 <recv+0x178>)
   25b76:	011b      	lsls	r3, r3, #4
   25b78:	18d3      	adds	r3, r2, r3
   25b7a:	330b      	adds	r3, #11
   25b7c:	781b      	ldrb	r3, [r3, #0]
   25b7e:	b2db      	uxtb	r3, r3
   25b80:	001a      	movs	r2, r3
   25b82:	2301      	movs	r3, #1
   25b84:	4013      	ands	r3, r2
   25b86:	d003      	beq.n	25b90 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   25b88:	231d      	movs	r3, #29
   25b8a:	18fb      	adds	r3, r7, r3
   25b8c:	224d      	movs	r2, #77	; 0x4d
   25b8e:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   25b90:	687b      	ldr	r3, [r7, #4]
   25b92:	2b00      	cmp	r3, #0
   25b94:	d105      	bne.n	25ba2 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   25b96:	2314      	movs	r3, #20
   25b98:	18fb      	adds	r3, r7, r3
   25b9a:	2201      	movs	r2, #1
   25b9c:	4252      	negs	r2, r2
   25b9e:	601a      	str	r2, [r3, #0]
   25ba0:	e003      	b.n	25baa <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   25ba2:	2314      	movs	r3, #20
   25ba4:	18fb      	adds	r3, r7, r3
   25ba6:	687a      	ldr	r2, [r7, #4]
   25ba8:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   25baa:	2314      	movs	r3, #20
   25bac:	18fb      	adds	r3, r7, r3
   25bae:	220f      	movs	r2, #15
   25bb0:	18ba      	adds	r2, r7, r2
   25bb2:	7812      	ldrb	r2, [r2, #0]
   25bb4:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   25bb6:	230f      	movs	r3, #15
   25bb8:	18fb      	adds	r3, r7, r3
   25bba:	781b      	ldrb	r3, [r3, #0]
   25bbc:	b25b      	sxtb	r3, r3
   25bbe:	4a18      	ldr	r2, [pc, #96]	; (25c20 <recv+0x178>)
   25bc0:	011b      	lsls	r3, r3, #4
   25bc2:	18d3      	adds	r3, r2, r3
   25bc4:	3306      	adds	r3, #6
   25bc6:	881b      	ldrh	r3, [r3, #0]
   25bc8:	b29a      	uxth	r2, r3
   25bca:	2314      	movs	r3, #20
   25bcc:	18fb      	adds	r3, r7, r3
   25bce:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   25bd0:	2314      	movs	r3, #20
   25bd2:	18fa      	adds	r2, r7, r3
   25bd4:	231d      	movs	r3, #29
   25bd6:	18fb      	adds	r3, r7, r3
   25bd8:	7819      	ldrb	r1, [r3, #0]
   25bda:	2300      	movs	r3, #0
   25bdc:	9302      	str	r3, [sp, #8]
   25bde:	2300      	movs	r3, #0
   25be0:	9301      	str	r3, [sp, #4]
   25be2:	2300      	movs	r3, #0
   25be4:	9300      	str	r3, [sp, #0]
   25be6:	2308      	movs	r3, #8
   25be8:	2002      	movs	r0, #2
   25bea:	4c0e      	ldr	r4, [pc, #56]	; (25c24 <recv+0x17c>)
   25bec:	47a0      	blx	r4
   25bee:	0003      	movs	r3, r0
   25bf0:	001a      	movs	r2, r3
   25bf2:	231e      	movs	r3, #30
   25bf4:	18fb      	adds	r3, r7, r3
   25bf6:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   25bf8:	231e      	movs	r3, #30
   25bfa:	18fb      	adds	r3, r7, r3
   25bfc:	2200      	movs	r2, #0
   25bfe:	5e9b      	ldrsh	r3, [r3, r2]
   25c00:	2b00      	cmp	r3, #0
   25c02:	d004      	beq.n	25c0e <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   25c04:	231e      	movs	r3, #30
   25c06:	18fb      	adds	r3, r7, r3
   25c08:	220e      	movs	r2, #14
   25c0a:	4252      	negs	r2, r2
   25c0c:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   25c0e:	231e      	movs	r3, #30
   25c10:	18fb      	adds	r3, r7, r3
   25c12:	2200      	movs	r2, #0
   25c14:	5e9b      	ldrsh	r3, [r3, r2]
}
   25c16:	0018      	movs	r0, r3
   25c18:	46bd      	mov	sp, r7
   25c1a:	b009      	add	sp, #36	; 0x24
   25c1c:	bd90      	pop	{r4, r7, pc}
   25c1e:	46c0      	nop			; (mov r8, r8)
   25c20:	20005984 	.word	0x20005984
   25c24:	00020eed 	.word	0x00020eed

00025c28 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   25c28:	b5b0      	push	{r4, r5, r7, lr}
   25c2a:	b088      	sub	sp, #32
   25c2c:	af04      	add	r7, sp, #16
   25c2e:	0002      	movs	r2, r0
   25c30:	1dfb      	adds	r3, r7, #7
   25c32:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25c34:	230f      	movs	r3, #15
   25c36:	18fb      	adds	r3, r7, r3
   25c38:	22fa      	movs	r2, #250	; 0xfa
   25c3a:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   25c3c:	4b43      	ldr	r3, [pc, #268]	; (25d4c <close+0x124>)
   25c3e:	0018      	movs	r0, r3
   25c40:	4b43      	ldr	r3, [pc, #268]	; (25d50 <close+0x128>)
   25c42:	4798      	blx	r3
   25c44:	1dfb      	adds	r3, r7, #7
   25c46:	2200      	movs	r2, #0
   25c48:	569a      	ldrsb	r2, [r3, r2]
   25c4a:	4b42      	ldr	r3, [pc, #264]	; (25d54 <close+0x12c>)
   25c4c:	0011      	movs	r1, r2
   25c4e:	0018      	movs	r0, r3
   25c50:	4b3f      	ldr	r3, [pc, #252]	; (25d50 <close+0x128>)
   25c52:	4798      	blx	r3
   25c54:	4b40      	ldr	r3, [pc, #256]	; (25d58 <close+0x130>)
   25c56:	0018      	movs	r0, r3
   25c58:	4b3d      	ldr	r3, [pc, #244]	; (25d50 <close+0x128>)
   25c5a:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   25c5c:	1dfb      	adds	r3, r7, #7
   25c5e:	781b      	ldrb	r3, [r3, #0]
   25c60:	2b7f      	cmp	r3, #127	; 0x7f
   25c62:	d86a      	bhi.n	25d3a <close+0x112>
   25c64:	1dfb      	adds	r3, r7, #7
   25c66:	781b      	ldrb	r3, [r3, #0]
   25c68:	b25b      	sxtb	r3, r3
   25c6a:	4a3c      	ldr	r2, [pc, #240]	; (25d5c <close+0x134>)
   25c6c:	011b      	lsls	r3, r3, #4
   25c6e:	18d3      	adds	r3, r2, r3
   25c70:	330a      	adds	r3, #10
   25c72:	781b      	ldrb	r3, [r3, #0]
   25c74:	b2db      	uxtb	r3, r3
   25c76:	2b01      	cmp	r3, #1
   25c78:	d15f      	bne.n	25d3a <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   25c7a:	230e      	movs	r3, #14
   25c7c:	18fb      	adds	r3, r7, r3
   25c7e:	2249      	movs	r2, #73	; 0x49
   25c80:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   25c82:	2308      	movs	r3, #8
   25c84:	18fb      	adds	r3, r7, r3
   25c86:	1dfa      	adds	r2, r7, #7
   25c88:	7812      	ldrb	r2, [r2, #0]
   25c8a:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   25c8c:	1dfb      	adds	r3, r7, #7
   25c8e:	781b      	ldrb	r3, [r3, #0]
   25c90:	b25b      	sxtb	r3, r3
   25c92:	4a32      	ldr	r2, [pc, #200]	; (25d5c <close+0x134>)
   25c94:	011b      	lsls	r3, r3, #4
   25c96:	18d3      	adds	r3, r2, r3
   25c98:	3306      	adds	r3, #6
   25c9a:	881b      	ldrh	r3, [r3, #0]
   25c9c:	b29a      	uxth	r2, r3
   25c9e:	2308      	movs	r3, #8
   25ca0:	18fb      	adds	r3, r7, r3
   25ca2:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   25ca4:	1dfb      	adds	r3, r7, #7
   25ca6:	781b      	ldrb	r3, [r3, #0]
   25ca8:	b25b      	sxtb	r3, r3
   25caa:	4a2c      	ldr	r2, [pc, #176]	; (25d5c <close+0x134>)
   25cac:	011b      	lsls	r3, r3, #4
   25cae:	18d3      	adds	r3, r2, r3
   25cb0:	330a      	adds	r3, #10
   25cb2:	2200      	movs	r2, #0
   25cb4:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   25cb6:	1dfb      	adds	r3, r7, #7
   25cb8:	781b      	ldrb	r3, [r3, #0]
   25cba:	b25b      	sxtb	r3, r3
   25cbc:	4a27      	ldr	r2, [pc, #156]	; (25d5c <close+0x134>)
   25cbe:	011b      	lsls	r3, r3, #4
   25cc0:	18d3      	adds	r3, r2, r3
   25cc2:	3306      	adds	r3, #6
   25cc4:	2200      	movs	r2, #0
   25cc6:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25cc8:	1dfb      	adds	r3, r7, #7
   25cca:	781b      	ldrb	r3, [r3, #0]
   25ccc:	b25b      	sxtb	r3, r3
   25cce:	4a23      	ldr	r2, [pc, #140]	; (25d5c <close+0x134>)
   25cd0:	011b      	lsls	r3, r3, #4
   25cd2:	18d3      	adds	r3, r2, r3
   25cd4:	330b      	adds	r3, #11
   25cd6:	781b      	ldrb	r3, [r3, #0]
   25cd8:	b2db      	uxtb	r3, r3
   25cda:	001a      	movs	r2, r3
   25cdc:	2301      	movs	r3, #1
   25cde:	4013      	ands	r3, r2
   25ce0:	d003      	beq.n	25cea <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   25ce2:	230e      	movs	r3, #14
   25ce4:	18fb      	adds	r3, r7, r3
   25ce6:	224e      	movs	r2, #78	; 0x4e
   25ce8:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   25cea:	230f      	movs	r3, #15
   25cec:	18fc      	adds	r4, r7, r3
   25cee:	2308      	movs	r3, #8
   25cf0:	18fa      	adds	r2, r7, r3
   25cf2:	230e      	movs	r3, #14
   25cf4:	18fb      	adds	r3, r7, r3
   25cf6:	7819      	ldrb	r1, [r3, #0]
   25cf8:	2300      	movs	r3, #0
   25cfa:	9302      	str	r3, [sp, #8]
   25cfc:	2300      	movs	r3, #0
   25cfe:	9301      	str	r3, [sp, #4]
   25d00:	2300      	movs	r3, #0
   25d02:	9300      	str	r3, [sp, #0]
   25d04:	2304      	movs	r3, #4
   25d06:	2002      	movs	r0, #2
   25d08:	4d15      	ldr	r5, [pc, #84]	; (25d60 <close+0x138>)
   25d0a:	47a8      	blx	r5
   25d0c:	0003      	movs	r3, r0
   25d0e:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25d10:	230f      	movs	r3, #15
   25d12:	18fb      	adds	r3, r7, r3
   25d14:	781b      	ldrb	r3, [r3, #0]
   25d16:	b25b      	sxtb	r3, r3
   25d18:	2b00      	cmp	r3, #0
   25d1a:	d003      	beq.n	25d24 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   25d1c:	230f      	movs	r3, #15
   25d1e:	18fb      	adds	r3, r7, r3
   25d20:	22f7      	movs	r2, #247	; 0xf7
   25d22:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   25d24:	1dfb      	adds	r3, r7, #7
   25d26:	781b      	ldrb	r3, [r3, #0]
   25d28:	b25b      	sxtb	r3, r3
   25d2a:	011a      	lsls	r2, r3, #4
   25d2c:	4b0b      	ldr	r3, [pc, #44]	; (25d5c <close+0x134>)
   25d2e:	18d3      	adds	r3, r2, r3
   25d30:	2210      	movs	r2, #16
   25d32:	2100      	movs	r1, #0
   25d34:	0018      	movs	r0, r3
   25d36:	4b0b      	ldr	r3, [pc, #44]	; (25d64 <close+0x13c>)
   25d38:	4798      	blx	r3
	}
	return s8Ret;
   25d3a:	230f      	movs	r3, #15
   25d3c:	18fb      	adds	r3, r7, r3
   25d3e:	781b      	ldrb	r3, [r3, #0]
   25d40:	b25b      	sxtb	r3, r3
}
   25d42:	0018      	movs	r0, r3
   25d44:	46bd      	mov	sp, r7
   25d46:	b004      	add	sp, #16
   25d48:	bdb0      	pop	{r4, r5, r7, pc}
   25d4a:	46c0      	nop			; (mov r8, r8)
   25d4c:	00039508 	.word	0x00039508
   25d50:	0001df59 	.word	0x0001df59
   25d54:	00039548 	.word	0x00039548
   25d58:	00039528 	.word	0x00039528
   25d5c:	20005984 	.word	0x20005984
   25d60:	00020eed 	.word	0x00020eed
   25d64:	00020c8d 	.word	0x00020c8d

00025d68 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   25d68:	b580      	push	{r7, lr}
   25d6a:	b086      	sub	sp, #24
   25d6c:	af00      	add	r7, sp, #0
   25d6e:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   25d70:	2300      	movs	r3, #0
   25d72:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   25d74:	2317      	movs	r3, #23
   25d76:	18fb      	adds	r3, r7, r3
   25d78:	2200      	movs	r2, #0
   25d7a:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   25d7c:	2316      	movs	r3, #22
   25d7e:	18fb      	adds	r3, r7, r3
   25d80:	2200      	movs	r2, #0
   25d82:	701a      	strb	r2, [r3, #0]
   25d84:	e060      	b.n	25e48 <nmi_inet_addr+0xe0>
	{
		j = 0;
   25d86:	2315      	movs	r3, #21
   25d88:	18fb      	adds	r3, r7, r3
   25d8a:	2200      	movs	r2, #0
   25d8c:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   25d8e:	2314      	movs	r3, #20
   25d90:	18fb      	adds	r3, r7, r3
   25d92:	687a      	ldr	r2, [r7, #4]
   25d94:	7812      	ldrb	r2, [r2, #0]
   25d96:	701a      	strb	r2, [r3, #0]
			++j;
   25d98:	2315      	movs	r3, #21
   25d9a:	18fb      	adds	r3, r7, r3
   25d9c:	2215      	movs	r2, #21
   25d9e:	18ba      	adds	r2, r7, r2
   25da0:	7812      	ldrb	r2, [r2, #0]
   25da2:	3201      	adds	r2, #1
   25da4:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   25da6:	2315      	movs	r3, #21
   25da8:	18fb      	adds	r3, r7, r3
   25daa:	781b      	ldrb	r3, [r3, #0]
   25dac:	2b04      	cmp	r3, #4
   25dae:	d901      	bls.n	25db4 <nmi_inet_addr+0x4c>
			{
				return 0;
   25db0:	2300      	movs	r3, #0
   25db2:	e057      	b.n	25e64 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   25db4:	2314      	movs	r3, #20
   25db6:	18fb      	adds	r3, r7, r3
   25db8:	781b      	ldrb	r3, [r3, #0]
   25dba:	2b2e      	cmp	r3, #46	; 0x2e
   25dbc:	d004      	beq.n	25dc8 <nmi_inet_addr+0x60>
   25dbe:	2314      	movs	r3, #20
   25dc0:	18fb      	adds	r3, r7, r3
   25dc2:	781b      	ldrb	r3, [r3, #0]
   25dc4:	2b00      	cmp	r3, #0
   25dc6:	d10d      	bne.n	25de4 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   25dc8:	2316      	movs	r3, #22
   25dca:	18fb      	adds	r3, r7, r3
   25dcc:	781b      	ldrb	r3, [r3, #0]
   25dce:	220c      	movs	r2, #12
   25dd0:	18ba      	adds	r2, r7, r2
   25dd2:	2117      	movs	r1, #23
   25dd4:	1879      	adds	r1, r7, r1
   25dd6:	7809      	ldrb	r1, [r1, #0]
   25dd8:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   25dda:	2317      	movs	r3, #23
   25ddc:	18fb      	adds	r3, r7, r3
   25dde:	2200      	movs	r2, #0
   25de0:	701a      	strb	r2, [r3, #0]
   25de2:	e01d      	b.n	25e20 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   25de4:	2314      	movs	r3, #20
   25de6:	18fb      	adds	r3, r7, r3
   25de8:	781b      	ldrb	r3, [r3, #0]
   25dea:	2b2f      	cmp	r3, #47	; 0x2f
   25dec:	d916      	bls.n	25e1c <nmi_inet_addr+0xb4>
   25dee:	2314      	movs	r3, #20
   25df0:	18fb      	adds	r3, r7, r3
   25df2:	781b      	ldrb	r3, [r3, #0]
   25df4:	2b39      	cmp	r3, #57	; 0x39
   25df6:	d811      	bhi.n	25e1c <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   25df8:	2317      	movs	r3, #23
   25dfa:	18fb      	adds	r3, r7, r3
   25dfc:	781b      	ldrb	r3, [r3, #0]
   25dfe:	1c1a      	adds	r2, r3, #0
   25e00:	0092      	lsls	r2, r2, #2
   25e02:	18d3      	adds	r3, r2, r3
   25e04:	18db      	adds	r3, r3, r3
   25e06:	b2da      	uxtb	r2, r3
   25e08:	2314      	movs	r3, #20
   25e0a:	18fb      	adds	r3, r7, r3
   25e0c:	781b      	ldrb	r3, [r3, #0]
   25e0e:	18d3      	adds	r3, r2, r3
   25e10:	b2da      	uxtb	r2, r3
   25e12:	2317      	movs	r3, #23
   25e14:	18fb      	adds	r3, r7, r3
   25e16:	3a30      	subs	r2, #48	; 0x30
   25e18:	701a      	strb	r2, [r3, #0]
   25e1a:	e001      	b.n	25e20 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   25e1c:	2300      	movs	r3, #0
   25e1e:	e021      	b.n	25e64 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   25e20:	687b      	ldr	r3, [r7, #4]
   25e22:	3301      	adds	r3, #1
   25e24:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   25e26:	2314      	movs	r3, #20
   25e28:	18fb      	adds	r3, r7, r3
   25e2a:	781b      	ldrb	r3, [r3, #0]
   25e2c:	2b2e      	cmp	r3, #46	; 0x2e
   25e2e:	d004      	beq.n	25e3a <nmi_inet_addr+0xd2>
   25e30:	2314      	movs	r3, #20
   25e32:	18fb      	adds	r3, r7, r3
   25e34:	781b      	ldrb	r3, [r3, #0]
   25e36:	2b00      	cmp	r3, #0
   25e38:	d1a9      	bne.n	25d8e <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   25e3a:	2316      	movs	r3, #22
   25e3c:	18fb      	adds	r3, r7, r3
   25e3e:	2216      	movs	r2, #22
   25e40:	18ba      	adds	r2, r7, r2
   25e42:	7812      	ldrb	r2, [r2, #0]
   25e44:	3201      	adds	r2, #1
   25e46:	701a      	strb	r2, [r3, #0]
   25e48:	2316      	movs	r3, #22
   25e4a:	18fb      	adds	r3, r7, r3
   25e4c:	781b      	ldrb	r3, [r3, #0]
   25e4e:	2b03      	cmp	r3, #3
   25e50:	d999      	bls.n	25d86 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   25e52:	230c      	movs	r3, #12
   25e54:	18f9      	adds	r1, r7, r3
   25e56:	2310      	movs	r3, #16
   25e58:	18fb      	adds	r3, r7, r3
   25e5a:	2204      	movs	r2, #4
   25e5c:	0018      	movs	r0, r3
   25e5e:	4b03      	ldr	r3, [pc, #12]	; (25e6c <nmi_inet_addr+0x104>)
   25e60:	4798      	blx	r3
	return u32IP;
   25e62:	693b      	ldr	r3, [r7, #16]
}
   25e64:	0018      	movs	r0, r3
   25e66:	46bd      	mov	sp, r7
   25e68:	b006      	add	sp, #24
   25e6a:	bd80      	pop	{r7, pc}
   25e6c:	00020c51 	.word	0x00020c51

00025e70 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   25e70:	b5b0      	push	{r4, r5, r7, lr}
   25e72:	b088      	sub	sp, #32
   25e74:	af04      	add	r7, sp, #16
   25e76:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   25e78:	230f      	movs	r3, #15
   25e7a:	18fb      	adds	r3, r7, r3
   25e7c:	22fa      	movs	r2, #250	; 0xfa
   25e7e:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   25e80:	687b      	ldr	r3, [r7, #4]
   25e82:	0018      	movs	r0, r3
   25e84:	4b14      	ldr	r3, [pc, #80]	; (25ed8 <gethostbyname+0x68>)
   25e86:	4798      	blx	r3
   25e88:	0003      	movs	r3, r0
   25e8a:	001a      	movs	r2, r3
   25e8c:	230e      	movs	r3, #14
   25e8e:	18fb      	adds	r3, r7, r3
   25e90:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   25e92:	230e      	movs	r3, #14
   25e94:	18fb      	adds	r3, r7, r3
   25e96:	781b      	ldrb	r3, [r3, #0]
   25e98:	2b40      	cmp	r3, #64	; 0x40
   25e9a:	d815      	bhi.n	25ec8 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   25e9c:	230e      	movs	r3, #14
   25e9e:	18fb      	adds	r3, r7, r3
   25ea0:	781b      	ldrb	r3, [r3, #0]
   25ea2:	b29b      	uxth	r3, r3
   25ea4:	3301      	adds	r3, #1
   25ea6:	b299      	uxth	r1, r3
   25ea8:	230f      	movs	r3, #15
   25eaa:	18fc      	adds	r4, r7, r3
   25eac:	687a      	ldr	r2, [r7, #4]
   25eae:	2300      	movs	r3, #0
   25eb0:	9302      	str	r3, [sp, #8]
   25eb2:	2300      	movs	r3, #0
   25eb4:	9301      	str	r3, [sp, #4]
   25eb6:	2300      	movs	r3, #0
   25eb8:	9300      	str	r3, [sp, #0]
   25eba:	000b      	movs	r3, r1
   25ebc:	214a      	movs	r1, #74	; 0x4a
   25ebe:	2002      	movs	r0, #2
   25ec0:	4d06      	ldr	r5, [pc, #24]	; (25edc <gethostbyname+0x6c>)
   25ec2:	47a8      	blx	r5
   25ec4:	0003      	movs	r3, r0
   25ec6:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   25ec8:	230f      	movs	r3, #15
   25eca:	18fb      	adds	r3, r7, r3
   25ecc:	781b      	ldrb	r3, [r3, #0]
   25ece:	b25b      	sxtb	r3, r3
}
   25ed0:	0018      	movs	r0, r3
   25ed2:	46bd      	mov	sp, r7
   25ed4:	b004      	add	sp, #16
   25ed6:	bdb0      	pop	{r4, r5, r7, pc}
   25ed8:	00020ccb 	.word	0x00020ccb
   25edc:	00020eed 	.word	0x00020eed

00025ee0 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   25ee0:	b580      	push	{r7, lr}
   25ee2:	b082      	sub	sp, #8
   25ee4:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25ee6:	003b      	movs	r3, r7
   25ee8:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   25eea:	687b      	ldr	r3, [r7, #4]
   25eec:	22b9      	movs	r2, #185	; 0xb9
   25eee:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25ef0:	4b13      	ldr	r3, [pc, #76]	; (25f40 <spi_flash_enter_low_power_mode+0x60>)
   25ef2:	2100      	movs	r1, #0
   25ef4:	0018      	movs	r0, r3
   25ef6:	4b13      	ldr	r3, [pc, #76]	; (25f44 <spi_flash_enter_low_power_mode+0x64>)
   25ef8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   25efa:	687b      	ldr	r3, [r7, #4]
   25efc:	781b      	ldrb	r3, [r3, #0]
   25efe:	001a      	movs	r2, r3
   25f00:	4b11      	ldr	r3, [pc, #68]	; (25f48 <spi_flash_enter_low_power_mode+0x68>)
   25f02:	0011      	movs	r1, r2
   25f04:	0018      	movs	r0, r3
   25f06:	4b0f      	ldr	r3, [pc, #60]	; (25f44 <spi_flash_enter_low_power_mode+0x64>)
   25f08:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   25f0a:	4b10      	ldr	r3, [pc, #64]	; (25f4c <spi_flash_enter_low_power_mode+0x6c>)
   25f0c:	2101      	movs	r1, #1
   25f0e:	0018      	movs	r0, r3
   25f10:	4b0c      	ldr	r3, [pc, #48]	; (25f44 <spi_flash_enter_low_power_mode+0x64>)
   25f12:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25f14:	4b0e      	ldr	r3, [pc, #56]	; (25f50 <spi_flash_enter_low_power_mode+0x70>)
   25f16:	2100      	movs	r1, #0
   25f18:	0018      	movs	r0, r3
   25f1a:	4b0a      	ldr	r3, [pc, #40]	; (25f44 <spi_flash_enter_low_power_mode+0x64>)
   25f1c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   25f1e:	4b0d      	ldr	r3, [pc, #52]	; (25f54 <spi_flash_enter_low_power_mode+0x74>)
   25f20:	2181      	movs	r1, #129	; 0x81
   25f22:	0018      	movs	r0, r3
   25f24:	4b07      	ldr	r3, [pc, #28]	; (25f44 <spi_flash_enter_low_power_mode+0x64>)
   25f26:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   25f28:	46c0      	nop			; (mov r8, r8)
   25f2a:	4b0b      	ldr	r3, [pc, #44]	; (25f58 <spi_flash_enter_low_power_mode+0x78>)
   25f2c:	0018      	movs	r0, r3
   25f2e:	4b0b      	ldr	r3, [pc, #44]	; (25f5c <spi_flash_enter_low_power_mode+0x7c>)
   25f30:	4798      	blx	r3
   25f32:	0003      	movs	r3, r0
   25f34:	2b01      	cmp	r3, #1
   25f36:	d1f8      	bne.n	25f2a <spi_flash_enter_low_power_mode+0x4a>
}
   25f38:	46c0      	nop			; (mov r8, r8)
   25f3a:	46bd      	mov	sp, r7
   25f3c:	b002      	add	sp, #8
   25f3e:	bd80      	pop	{r7, pc}
   25f40:	00010208 	.word	0x00010208
   25f44:	00022d41 	.word	0x00022d41
   25f48:	0001020c 	.word	0x0001020c
   25f4c:	00010214 	.word	0x00010214
   25f50:	0001021c 	.word	0x0001021c
   25f54:	00010204 	.word	0x00010204
   25f58:	00010218 	.word	0x00010218
   25f5c:	00022cfd 	.word	0x00022cfd

00025f60 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   25f60:	b580      	push	{r7, lr}
   25f62:	b082      	sub	sp, #8
   25f64:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25f66:	003b      	movs	r3, r7
   25f68:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   25f6a:	687b      	ldr	r3, [r7, #4]
   25f6c:	22ab      	movs	r2, #171	; 0xab
   25f6e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25f70:	4b13      	ldr	r3, [pc, #76]	; (25fc0 <spi_flash_leave_low_power_mode+0x60>)
   25f72:	2100      	movs	r1, #0
   25f74:	0018      	movs	r0, r3
   25f76:	4b13      	ldr	r3, [pc, #76]	; (25fc4 <spi_flash_leave_low_power_mode+0x64>)
   25f78:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   25f7a:	687b      	ldr	r3, [r7, #4]
   25f7c:	781b      	ldrb	r3, [r3, #0]
   25f7e:	001a      	movs	r2, r3
   25f80:	4b11      	ldr	r3, [pc, #68]	; (25fc8 <spi_flash_leave_low_power_mode+0x68>)
   25f82:	0011      	movs	r1, r2
   25f84:	0018      	movs	r0, r3
   25f86:	4b0f      	ldr	r3, [pc, #60]	; (25fc4 <spi_flash_leave_low_power_mode+0x64>)
   25f88:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   25f8a:	4b10      	ldr	r3, [pc, #64]	; (25fcc <spi_flash_leave_low_power_mode+0x6c>)
   25f8c:	2101      	movs	r1, #1
   25f8e:	0018      	movs	r0, r3
   25f90:	4b0c      	ldr	r3, [pc, #48]	; (25fc4 <spi_flash_leave_low_power_mode+0x64>)
   25f92:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25f94:	4b0e      	ldr	r3, [pc, #56]	; (25fd0 <spi_flash_leave_low_power_mode+0x70>)
   25f96:	2100      	movs	r1, #0
   25f98:	0018      	movs	r0, r3
   25f9a:	4b0a      	ldr	r3, [pc, #40]	; (25fc4 <spi_flash_leave_low_power_mode+0x64>)
   25f9c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   25f9e:	4b0d      	ldr	r3, [pc, #52]	; (25fd4 <spi_flash_leave_low_power_mode+0x74>)
   25fa0:	2181      	movs	r1, #129	; 0x81
   25fa2:	0018      	movs	r0, r3
   25fa4:	4b07      	ldr	r3, [pc, #28]	; (25fc4 <spi_flash_leave_low_power_mode+0x64>)
   25fa6:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   25fa8:	46c0      	nop			; (mov r8, r8)
   25faa:	4b0b      	ldr	r3, [pc, #44]	; (25fd8 <spi_flash_leave_low_power_mode+0x78>)
   25fac:	0018      	movs	r0, r3
   25fae:	4b0b      	ldr	r3, [pc, #44]	; (25fdc <spi_flash_leave_low_power_mode+0x7c>)
   25fb0:	4798      	blx	r3
   25fb2:	0003      	movs	r3, r0
   25fb4:	2b01      	cmp	r3, #1
   25fb6:	d1f8      	bne.n	25faa <spi_flash_leave_low_power_mode+0x4a>
}
   25fb8:	46c0      	nop			; (mov r8, r8)
   25fba:	46bd      	mov	sp, r7
   25fbc:	b002      	add	sp, #8
   25fbe:	bd80      	pop	{r7, pc}
   25fc0:	00010208 	.word	0x00010208
   25fc4:	00022d41 	.word	0x00022d41
   25fc8:	0001020c 	.word	0x0001020c
   25fcc:	00010214 	.word	0x00010214
   25fd0:	0001021c 	.word	0x0001021c
   25fd4:	00010204 	.word	0x00010204
   25fd8:	00010218 	.word	0x00010218
   25fdc:	00022cfd 	.word	0x00022cfd

00025fe0 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   25fe0:	b590      	push	{r4, r7, lr}
   25fe2:	b085      	sub	sp, #20
   25fe4:	af00      	add	r7, sp, #0
   25fe6:	0002      	movs	r2, r0
   25fe8:	1dfb      	adds	r3, r7, #7
   25fea:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   25fec:	230f      	movs	r3, #15
   25fee:	18fb      	adds	r3, r7, r3
   25ff0:	2200      	movs	r2, #0
   25ff2:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   25ff4:	4b24      	ldr	r3, [pc, #144]	; (26088 <spi_flash_enable+0xa8>)
   25ff6:	4798      	blx	r3
   25ff8:	0003      	movs	r3, r0
   25ffa:	051b      	lsls	r3, r3, #20
   25ffc:	0d1b      	lsrs	r3, r3, #20
   25ffe:	4a23      	ldr	r2, [pc, #140]	; (2608c <spi_flash_enable+0xac>)
   26000:	4293      	cmp	r3, r2
   26002:	d938      	bls.n	26076 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   26004:	230f      	movs	r3, #15
   26006:	18fc      	adds	r4, r7, r3
   26008:	2308      	movs	r3, #8
   2600a:	18fb      	adds	r3, r7, r3
   2600c:	4a20      	ldr	r2, [pc, #128]	; (26090 <spi_flash_enable+0xb0>)
   2600e:	0019      	movs	r1, r3
   26010:	0010      	movs	r0, r2
   26012:	4b20      	ldr	r3, [pc, #128]	; (26094 <spi_flash_enable+0xb4>)
   26014:	4798      	blx	r3
   26016:	0003      	movs	r3, r0
   26018:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   2601a:	230f      	movs	r3, #15
   2601c:	18fb      	adds	r3, r7, r3
   2601e:	781b      	ldrb	r3, [r3, #0]
   26020:	b25b      	sxtb	r3, r3
   26022:	2b00      	cmp	r3, #0
   26024:	d126      	bne.n	26074 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   26026:	68bb      	ldr	r3, [r7, #8]
   26028:	4a1b      	ldr	r2, [pc, #108]	; (26098 <spi_flash_enable+0xb8>)
   2602a:	4013      	ands	r3, r2
   2602c:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   2602e:	68bb      	ldr	r3, [r7, #8]
   26030:	4a1a      	ldr	r2, [pc, #104]	; (2609c <spi_flash_enable+0xbc>)
   26032:	4313      	orrs	r3, r2
   26034:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26036:	68bb      	ldr	r3, [r7, #8]
   26038:	4a15      	ldr	r2, [pc, #84]	; (26090 <spi_flash_enable+0xb0>)
   2603a:	0019      	movs	r1, r3
   2603c:	0010      	movs	r0, r2
   2603e:	4b18      	ldr	r3, [pc, #96]	; (260a0 <spi_flash_enable+0xc0>)
   26040:	4798      	blx	r3
		if(enable) {
   26042:	1dfb      	adds	r3, r7, #7
   26044:	781b      	ldrb	r3, [r3, #0]
   26046:	2b00      	cmp	r3, #0
   26048:	d002      	beq.n	26050 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   2604a:	4b16      	ldr	r3, [pc, #88]	; (260a4 <spi_flash_enable+0xc4>)
   2604c:	4798      	blx	r3
   2604e:	e001      	b.n	26054 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   26050:	4b15      	ldr	r3, [pc, #84]	; (260a8 <spi_flash_enable+0xc8>)
   26052:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   26054:	68bb      	ldr	r3, [r7, #8]
   26056:	4a10      	ldr	r2, [pc, #64]	; (26098 <spi_flash_enable+0xb8>)
   26058:	4013      	ands	r3, r2
   2605a:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   2605c:	68bb      	ldr	r3, [r7, #8]
   2605e:	2280      	movs	r2, #128	; 0x80
   26060:	0252      	lsls	r2, r2, #9
   26062:	4313      	orrs	r3, r2
   26064:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26066:	68bb      	ldr	r3, [r7, #8]
   26068:	4a09      	ldr	r2, [pc, #36]	; (26090 <spi_flash_enable+0xb0>)
   2606a:	0019      	movs	r1, r3
   2606c:	0010      	movs	r0, r2
   2606e:	4b0c      	ldr	r3, [pc, #48]	; (260a0 <spi_flash_enable+0xc0>)
   26070:	4798      	blx	r3
   26072:	e000      	b.n	26076 <spi_flash_enable+0x96>
			goto ERR1;
   26074:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   26076:	230f      	movs	r3, #15
   26078:	18fb      	adds	r3, r7, r3
   2607a:	781b      	ldrb	r3, [r3, #0]
   2607c:	b25b      	sxtb	r3, r3
}
   2607e:	0018      	movs	r0, r3
   26080:	46bd      	mov	sp, r7
   26082:	b005      	add	sp, #20
   26084:	bd90      	pop	{r4, r7, pc}
   26086:	46c0      	nop			; (mov r8, r8)
   26088:	0002261d 	.word	0x0002261d
   2608c:	0000039f 	.word	0x0000039f
   26090:	00001410 	.word	0x00001410
   26094:	00022d1d 	.word	0x00022d1d
   26098:	f8888fff 	.word	0xf8888fff
   2609c:	01111000 	.word	0x01111000
   260a0:	00022d41 	.word	0x00022d41
   260a4:	00025f61 	.word	0x00025f61
   260a8:	00025ee1 	.word	0x00025ee1

000260ac <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   260ac:	b580      	push	{r7, lr}
   260ae:	b084      	sub	sp, #16
   260b0:	af00      	add	r7, sp, #0
   260b2:	0002      	movs	r2, r0
   260b4:	1dfb      	adds	r3, r7, #7
   260b6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   260b8:	1dfb      	adds	r3, r7, #7
   260ba:	781b      	ldrb	r3, [r3, #0]
   260bc:	2b00      	cmp	r3, #0
   260be:	d108      	bne.n	260d2 <mem_test_unit_ready+0x26>
   260c0:	1dfb      	adds	r3, r7, #7
   260c2:	781a      	ldrb	r2, [r3, #0]
   260c4:	4b08      	ldr	r3, [pc, #32]	; (260e8 <mem_test_unit_ready+0x3c>)
   260c6:	0152      	lsls	r2, r2, #5
   260c8:	58d3      	ldr	r3, [r2, r3]
   260ca:	4798      	blx	r3
   260cc:	0003      	movs	r3, r0
   260ce:	001a      	movs	r2, r3
   260d0:	e000      	b.n	260d4 <mem_test_unit_ready+0x28>
   260d2:	2201      	movs	r2, #1
  status =
   260d4:	230f      	movs	r3, #15
   260d6:	18fb      	adds	r3, r7, r3
   260d8:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   260da:	230f      	movs	r3, #15
   260dc:	18fb      	adds	r3, r7, r3
   260de:	781b      	ldrb	r3, [r3, #0]
}
   260e0:	0018      	movs	r0, r3
   260e2:	46bd      	mov	sp, r7
   260e4:	b004      	add	sp, #16
   260e6:	bd80      	pop	{r7, pc}
   260e8:	000395d4 	.word	0x000395d4

000260ec <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   260ec:	b580      	push	{r7, lr}
   260ee:	b084      	sub	sp, #16
   260f0:	af00      	add	r7, sp, #0
   260f2:	0002      	movs	r2, r0
   260f4:	6039      	str	r1, [r7, #0]
   260f6:	1dfb      	adds	r3, r7, #7
   260f8:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   260fa:	1dfb      	adds	r3, r7, #7
   260fc:	781b      	ldrb	r3, [r3, #0]
   260fe:	2b00      	cmp	r3, #0
   26100:	d10c      	bne.n	2611c <mem_read_capacity+0x30>
   26102:	1dfb      	adds	r3, r7, #7
   26104:	781b      	ldrb	r3, [r3, #0]
   26106:	4a0b      	ldr	r2, [pc, #44]	; (26134 <mem_read_capacity+0x48>)
   26108:	015b      	lsls	r3, r3, #5
   2610a:	18d3      	adds	r3, r2, r3
   2610c:	3304      	adds	r3, #4
   2610e:	681b      	ldr	r3, [r3, #0]
   26110:	683a      	ldr	r2, [r7, #0]
   26112:	0010      	movs	r0, r2
   26114:	4798      	blx	r3
   26116:	0003      	movs	r3, r0
   26118:	001a      	movs	r2, r3
   2611a:	e000      	b.n	2611e <mem_read_capacity+0x32>
   2611c:	2201      	movs	r2, #1
  status =
   2611e:	230f      	movs	r3, #15
   26120:	18fb      	adds	r3, r7, r3
   26122:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26124:	230f      	movs	r3, #15
   26126:	18fb      	adds	r3, r7, r3
   26128:	781b      	ldrb	r3, [r3, #0]
}
   2612a:	0018      	movs	r0, r3
   2612c:	46bd      	mov	sp, r7
   2612e:	b004      	add	sp, #16
   26130:	bd80      	pop	{r7, pc}
   26132:	46c0      	nop			; (mov r8, r8)
   26134:	000395d4 	.word	0x000395d4

00026138 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   26138:	b580      	push	{r7, lr}
   2613a:	b084      	sub	sp, #16
   2613c:	af00      	add	r7, sp, #0
   2613e:	0002      	movs	r2, r0
   26140:	1dfb      	adds	r3, r7, #7
   26142:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   26144:	1dfb      	adds	r3, r7, #7
   26146:	781b      	ldrb	r3, [r3, #0]
   26148:	425a      	negs	r2, r3
   2614a:	4153      	adcs	r3, r2
   2614c:	b2da      	uxtb	r2, r3
  sector_size =
   2614e:	230f      	movs	r3, #15
   26150:	18fb      	adds	r3, r7, r3
   26152:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   26154:	230f      	movs	r3, #15
   26156:	18fb      	adds	r3, r7, r3
   26158:	781b      	ldrb	r3, [r3, #0]
}
   2615a:	0018      	movs	r0, r3
   2615c:	46bd      	mov	sp, r7
   2615e:	b004      	add	sp, #16
   26160:	bd80      	pop	{r7, pc}
	...

00026164 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   26164:	b580      	push	{r7, lr}
   26166:	b084      	sub	sp, #16
   26168:	af00      	add	r7, sp, #0
   2616a:	0002      	movs	r2, r0
   2616c:	1dfb      	adds	r3, r7, #7
   2616e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   26170:	1dfb      	adds	r3, r7, #7
   26172:	781b      	ldrb	r3, [r3, #0]
   26174:	2b00      	cmp	r3, #0
   26176:	d109      	bne.n	2618c <mem_wr_protect+0x28>
   26178:	1dfb      	adds	r3, r7, #7
   2617a:	781b      	ldrb	r3, [r3, #0]
   2617c:	4a0a      	ldr	r2, [pc, #40]	; (261a8 <mem_wr_protect+0x44>)
   2617e:	015b      	lsls	r3, r3, #5
   26180:	18d3      	adds	r3, r2, r3
   26182:	330c      	adds	r3, #12
   26184:	681b      	ldr	r3, [r3, #0]
   26186:	4798      	blx	r3
   26188:	1e03      	subs	r3, r0, #0
   2618a:	d001      	beq.n	26190 <mem_wr_protect+0x2c>
   2618c:	2201      	movs	r2, #1
   2618e:	e000      	b.n	26192 <mem_wr_protect+0x2e>
   26190:	2200      	movs	r2, #0
  wr_protect =
   26192:	230f      	movs	r3, #15
   26194:	18fb      	adds	r3, r7, r3
   26196:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   26198:	230f      	movs	r3, #15
   2619a:	18fb      	adds	r3, r7, r3
   2619c:	781b      	ldrb	r3, [r3, #0]
}
   2619e:	0018      	movs	r0, r3
   261a0:	46bd      	mov	sp, r7
   261a2:	b004      	add	sp, #16
   261a4:	bd80      	pop	{r7, pc}
   261a6:	46c0      	nop			; (mov r8, r8)
   261a8:	000395d4 	.word	0x000395d4

000261ac <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   261ac:	b580      	push	{r7, lr}
   261ae:	b086      	sub	sp, #24
   261b0:	af00      	add	r7, sp, #0
   261b2:	60b9      	str	r1, [r7, #8]
   261b4:	607a      	str	r2, [r7, #4]
   261b6:	230f      	movs	r3, #15
   261b8:	18fb      	adds	r3, r7, r3
   261ba:	1c02      	adds	r2, r0, #0
   261bc:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   261be:	230f      	movs	r3, #15
   261c0:	18fb      	adds	r3, r7, r3
   261c2:	781b      	ldrb	r3, [r3, #0]
   261c4:	2b00      	cmp	r3, #0
   261c6:	d10e      	bne.n	261e6 <memory_2_ram+0x3a>
   261c8:	230f      	movs	r3, #15
   261ca:	18fb      	adds	r3, r7, r3
   261cc:	781b      	ldrb	r3, [r3, #0]
   261ce:	4a0b      	ldr	r2, [pc, #44]	; (261fc <memory_2_ram+0x50>)
   261d0:	015b      	lsls	r3, r3, #5
   261d2:	18d3      	adds	r3, r2, r3
   261d4:	3314      	adds	r3, #20
   261d6:	681b      	ldr	r3, [r3, #0]
   261d8:	6879      	ldr	r1, [r7, #4]
   261da:	68ba      	ldr	r2, [r7, #8]
   261dc:	0010      	movs	r0, r2
   261de:	4798      	blx	r3
   261e0:	0003      	movs	r3, r0
   261e2:	001a      	movs	r2, r3
   261e4:	e000      	b.n	261e8 <memory_2_ram+0x3c>
   261e6:	2201      	movs	r2, #1
  status =
   261e8:	2317      	movs	r3, #23
   261ea:	18fb      	adds	r3, r7, r3
   261ec:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   261ee:	2317      	movs	r3, #23
   261f0:	18fb      	adds	r3, r7, r3
   261f2:	781b      	ldrb	r3, [r3, #0]
}
   261f4:	0018      	movs	r0, r3
   261f6:	46bd      	mov	sp, r7
   261f8:	b006      	add	sp, #24
   261fa:	bd80      	pop	{r7, pc}
   261fc:	000395d4 	.word	0x000395d4

00026200 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   26200:	b580      	push	{r7, lr}
   26202:	b086      	sub	sp, #24
   26204:	af00      	add	r7, sp, #0
   26206:	60b9      	str	r1, [r7, #8]
   26208:	607a      	str	r2, [r7, #4]
   2620a:	230f      	movs	r3, #15
   2620c:	18fb      	adds	r3, r7, r3
   2620e:	1c02      	adds	r2, r0, #0
   26210:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   26212:	230f      	movs	r3, #15
   26214:	18fb      	adds	r3, r7, r3
   26216:	781b      	ldrb	r3, [r3, #0]
   26218:	2b00      	cmp	r3, #0
   2621a:	d10e      	bne.n	2623a <ram_2_memory+0x3a>
   2621c:	230f      	movs	r3, #15
   2621e:	18fb      	adds	r3, r7, r3
   26220:	781b      	ldrb	r3, [r3, #0]
   26222:	4a0b      	ldr	r2, [pc, #44]	; (26250 <ram_2_memory+0x50>)
   26224:	015b      	lsls	r3, r3, #5
   26226:	18d3      	adds	r3, r2, r3
   26228:	3318      	adds	r3, #24
   2622a:	681b      	ldr	r3, [r3, #0]
   2622c:	6879      	ldr	r1, [r7, #4]
   2622e:	68ba      	ldr	r2, [r7, #8]
   26230:	0010      	movs	r0, r2
   26232:	4798      	blx	r3
   26234:	0003      	movs	r3, r0
   26236:	001a      	movs	r2, r3
   26238:	e000      	b.n	2623c <ram_2_memory+0x3c>
   2623a:	2201      	movs	r2, #1
  status =
   2623c:	2317      	movs	r3, #23
   2623e:	18fb      	adds	r3, r7, r3
   26240:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   26242:	2317      	movs	r3, #23
   26244:	18fb      	adds	r3, r7, r3
   26246:	781b      	ldrb	r3, [r3, #0]
}
   26248:	0018      	movs	r0, r3
   2624a:	46bd      	mov	sp, r7
   2624c:	b006      	add	sp, #24
   2624e:	bd80      	pop	{r7, pc}
   26250:	000395d4 	.word	0x000395d4

00026254 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   26254:	b580      	push	{r7, lr}
   26256:	b082      	sub	sp, #8
   26258:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   2625a:	4b10      	ldr	r3, [pc, #64]	; (2629c <cpu_irq_enter_critical+0x48>)
   2625c:	681b      	ldr	r3, [r3, #0]
   2625e:	2b00      	cmp	r3, #0
   26260:	d112      	bne.n	26288 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   26262:	f3ef 8310 	mrs	r3, PRIMASK
   26266:	607b      	str	r3, [r7, #4]
  return(result);
   26268:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   2626a:	2b00      	cmp	r3, #0
   2626c:	d109      	bne.n	26282 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   2626e:	b672      	cpsid	i
   26270:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   26274:	4b0a      	ldr	r3, [pc, #40]	; (262a0 <cpu_irq_enter_critical+0x4c>)
   26276:	2200      	movs	r2, #0
   26278:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   2627a:	4b0a      	ldr	r3, [pc, #40]	; (262a4 <cpu_irq_enter_critical+0x50>)
   2627c:	2201      	movs	r2, #1
   2627e:	701a      	strb	r2, [r3, #0]
   26280:	e002      	b.n	26288 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   26282:	4b08      	ldr	r3, [pc, #32]	; (262a4 <cpu_irq_enter_critical+0x50>)
   26284:	2200      	movs	r2, #0
   26286:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   26288:	4b04      	ldr	r3, [pc, #16]	; (2629c <cpu_irq_enter_critical+0x48>)
   2628a:	681b      	ldr	r3, [r3, #0]
   2628c:	1c5a      	adds	r2, r3, #1
   2628e:	4b03      	ldr	r3, [pc, #12]	; (2629c <cpu_irq_enter_critical+0x48>)
   26290:	601a      	str	r2, [r3, #0]
}
   26292:	46c0      	nop			; (mov r8, r8)
   26294:	46bd      	mov	sp, r7
   26296:	b002      	add	sp, #8
   26298:	bd80      	pop	{r7, pc}
   2629a:	46c0      	nop			; (mov r8, r8)
   2629c:	20004138 	.word	0x20004138
   262a0:	2000011a 	.word	0x2000011a
   262a4:	2000413c 	.word	0x2000413c

000262a8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   262a8:	b580      	push	{r7, lr}
   262aa:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   262ac:	4b0b      	ldr	r3, [pc, #44]	; (262dc <cpu_irq_leave_critical+0x34>)
   262ae:	681b      	ldr	r3, [r3, #0]
   262b0:	1e5a      	subs	r2, r3, #1
   262b2:	4b0a      	ldr	r3, [pc, #40]	; (262dc <cpu_irq_leave_critical+0x34>)
   262b4:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   262b6:	4b09      	ldr	r3, [pc, #36]	; (262dc <cpu_irq_leave_critical+0x34>)
   262b8:	681b      	ldr	r3, [r3, #0]
   262ba:	2b00      	cmp	r3, #0
   262bc:	d10a      	bne.n	262d4 <cpu_irq_leave_critical+0x2c>
   262be:	4b08      	ldr	r3, [pc, #32]	; (262e0 <cpu_irq_leave_critical+0x38>)
   262c0:	781b      	ldrb	r3, [r3, #0]
   262c2:	b2db      	uxtb	r3, r3
   262c4:	2b00      	cmp	r3, #0
   262c6:	d005      	beq.n	262d4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   262c8:	4b06      	ldr	r3, [pc, #24]	; (262e4 <cpu_irq_leave_critical+0x3c>)
   262ca:	2201      	movs	r2, #1
   262cc:	701a      	strb	r2, [r3, #0]
   262ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   262d2:	b662      	cpsie	i
	}
}
   262d4:	46c0      	nop			; (mov r8, r8)
   262d6:	46bd      	mov	sp, r7
   262d8:	bd80      	pop	{r7, pc}
   262da:	46c0      	nop			; (mov r8, r8)
   262dc:	20004138 	.word	0x20004138
   262e0:	2000413c 	.word	0x2000413c
   262e4:	2000011a 	.word	0x2000011a

000262e8 <system_pinmux_get_group_from_gpio_pin>:
{
   262e8:	b580      	push	{r7, lr}
   262ea:	b084      	sub	sp, #16
   262ec:	af00      	add	r7, sp, #0
   262ee:	0002      	movs	r2, r0
   262f0:	1dfb      	adds	r3, r7, #7
   262f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   262f4:	230f      	movs	r3, #15
   262f6:	18fb      	adds	r3, r7, r3
   262f8:	1dfa      	adds	r2, r7, #7
   262fa:	7812      	ldrb	r2, [r2, #0]
   262fc:	09d2      	lsrs	r2, r2, #7
   262fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26300:	230e      	movs	r3, #14
   26302:	18fb      	adds	r3, r7, r3
   26304:	1dfa      	adds	r2, r7, #7
   26306:	7812      	ldrb	r2, [r2, #0]
   26308:	0952      	lsrs	r2, r2, #5
   2630a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2630c:	4b0d      	ldr	r3, [pc, #52]	; (26344 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2630e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26310:	230f      	movs	r3, #15
   26312:	18fb      	adds	r3, r7, r3
   26314:	781b      	ldrb	r3, [r3, #0]
   26316:	2b00      	cmp	r3, #0
   26318:	d10f      	bne.n	2633a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2631a:	230f      	movs	r3, #15
   2631c:	18fb      	adds	r3, r7, r3
   2631e:	781b      	ldrb	r3, [r3, #0]
   26320:	009b      	lsls	r3, r3, #2
   26322:	2210      	movs	r2, #16
   26324:	4694      	mov	ip, r2
   26326:	44bc      	add	ip, r7
   26328:	4463      	add	r3, ip
   2632a:	3b08      	subs	r3, #8
   2632c:	681a      	ldr	r2, [r3, #0]
   2632e:	230e      	movs	r3, #14
   26330:	18fb      	adds	r3, r7, r3
   26332:	781b      	ldrb	r3, [r3, #0]
   26334:	01db      	lsls	r3, r3, #7
   26336:	18d3      	adds	r3, r2, r3
   26338:	e000      	b.n	2633c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2633a:	2300      	movs	r3, #0
}
   2633c:	0018      	movs	r0, r3
   2633e:	46bd      	mov	sp, r7
   26340:	b004      	add	sp, #16
   26342:	bd80      	pop	{r7, pc}
   26344:	41004400 	.word	0x41004400

00026348 <port_get_group_from_gpio_pin>:
{
   26348:	b580      	push	{r7, lr}
   2634a:	b082      	sub	sp, #8
   2634c:	af00      	add	r7, sp, #0
   2634e:	0002      	movs	r2, r0
   26350:	1dfb      	adds	r3, r7, #7
   26352:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26354:	1dfb      	adds	r3, r7, #7
   26356:	781b      	ldrb	r3, [r3, #0]
   26358:	0018      	movs	r0, r3
   2635a:	4b03      	ldr	r3, [pc, #12]	; (26368 <port_get_group_from_gpio_pin+0x20>)
   2635c:	4798      	blx	r3
   2635e:	0003      	movs	r3, r0
}
   26360:	0018      	movs	r0, r3
   26362:	46bd      	mov	sp, r7
   26364:	b002      	add	sp, #8
   26366:	bd80      	pop	{r7, pc}
   26368:	000262e9 	.word	0x000262e9

0002636c <port_get_config_defaults>:
{
   2636c:	b580      	push	{r7, lr}
   2636e:	b082      	sub	sp, #8
   26370:	af00      	add	r7, sp, #0
   26372:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   26374:	687b      	ldr	r3, [r7, #4]
   26376:	2200      	movs	r2, #0
   26378:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2637a:	687b      	ldr	r3, [r7, #4]
   2637c:	2201      	movs	r2, #1
   2637e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   26380:	687b      	ldr	r3, [r7, #4]
   26382:	2200      	movs	r2, #0
   26384:	709a      	strb	r2, [r3, #2]
}
   26386:	46c0      	nop			; (mov r8, r8)
   26388:	46bd      	mov	sp, r7
   2638a:	b002      	add	sp, #8
   2638c:	bd80      	pop	{r7, pc}
	...

00026390 <port_pin_set_output_level>:
{
   26390:	b580      	push	{r7, lr}
   26392:	b084      	sub	sp, #16
   26394:	af00      	add	r7, sp, #0
   26396:	0002      	movs	r2, r0
   26398:	1dfb      	adds	r3, r7, #7
   2639a:	701a      	strb	r2, [r3, #0]
   2639c:	1dbb      	adds	r3, r7, #6
   2639e:	1c0a      	adds	r2, r1, #0
   263a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   263a2:	1dfb      	adds	r3, r7, #7
   263a4:	781b      	ldrb	r3, [r3, #0]
   263a6:	0018      	movs	r0, r3
   263a8:	4b0d      	ldr	r3, [pc, #52]	; (263e0 <port_pin_set_output_level+0x50>)
   263aa:	4798      	blx	r3
   263ac:	0003      	movs	r3, r0
   263ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   263b0:	1dfb      	adds	r3, r7, #7
   263b2:	781b      	ldrb	r3, [r3, #0]
   263b4:	221f      	movs	r2, #31
   263b6:	4013      	ands	r3, r2
   263b8:	2201      	movs	r2, #1
   263ba:	409a      	lsls	r2, r3
   263bc:	0013      	movs	r3, r2
   263be:	60bb      	str	r3, [r7, #8]
	if (level) {
   263c0:	1dbb      	adds	r3, r7, #6
   263c2:	781b      	ldrb	r3, [r3, #0]
   263c4:	2b00      	cmp	r3, #0
   263c6:	d003      	beq.n	263d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   263c8:	68fb      	ldr	r3, [r7, #12]
   263ca:	68ba      	ldr	r2, [r7, #8]
   263cc:	619a      	str	r2, [r3, #24]
}
   263ce:	e002      	b.n	263d6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   263d0:	68fb      	ldr	r3, [r7, #12]
   263d2:	68ba      	ldr	r2, [r7, #8]
   263d4:	615a      	str	r2, [r3, #20]
}
   263d6:	46c0      	nop			; (mov r8, r8)
   263d8:	46bd      	mov	sp, r7
   263da:	b004      	add	sp, #16
   263dc:	bd80      	pop	{r7, pc}
   263de:	46c0      	nop			; (mov r8, r8)
   263e0:	00026349 	.word	0x00026349

000263e4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   263e4:	b580      	push	{r7, lr}
   263e6:	b082      	sub	sp, #8
   263e8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   263ea:	1d3b      	adds	r3, r7, #4
   263ec:	0018      	movs	r0, r3
   263ee:	4b0e      	ldr	r3, [pc, #56]	; (26428 <system_board_init+0x44>)
   263f0:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   263f2:	1d3b      	adds	r3, r7, #4
   263f4:	2201      	movs	r2, #1
   263f6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   263f8:	1d3b      	adds	r3, r7, #4
   263fa:	0019      	movs	r1, r3
   263fc:	2017      	movs	r0, #23
   263fe:	4b0b      	ldr	r3, [pc, #44]	; (2642c <system_board_init+0x48>)
   26400:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   26402:	2101      	movs	r1, #1
   26404:	2017      	movs	r0, #23
   26406:	4b0a      	ldr	r3, [pc, #40]	; (26430 <system_board_init+0x4c>)
   26408:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   2640a:	1d3b      	adds	r3, r7, #4
   2640c:	2200      	movs	r2, #0
   2640e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   26410:	1d3b      	adds	r3, r7, #4
   26412:	2201      	movs	r2, #1
   26414:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   26416:	1d3b      	adds	r3, r7, #4
   26418:	0019      	movs	r1, r3
   2641a:	2037      	movs	r0, #55	; 0x37
   2641c:	4b03      	ldr	r3, [pc, #12]	; (2642c <system_board_init+0x48>)
   2641e:	4798      	blx	r3
}
   26420:	46c0      	nop			; (mov r8, r8)
   26422:	46bd      	mov	sp, r7
   26424:	b002      	add	sp, #8
   26426:	bd80      	pop	{r7, pc}
   26428:	0002636d 	.word	0x0002636d
   2642c:	00026a59 	.word	0x00026a59
   26430:	00026391 	.word	0x00026391

00026434 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   26434:	b580      	push	{r7, lr}
   26436:	b084      	sub	sp, #16
   26438:	af00      	add	r7, sp, #0
   2643a:	0002      	movs	r2, r0
   2643c:	1dfb      	adds	r3, r7, #7
   2643e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26440:	230f      	movs	r3, #15
   26442:	18fb      	adds	r3, r7, r3
   26444:	1dfa      	adds	r2, r7, #7
   26446:	7812      	ldrb	r2, [r2, #0]
   26448:	0952      	lsrs	r2, r2, #5
   2644a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   2644c:	230f      	movs	r3, #15
   2644e:	18fb      	adds	r3, r7, r3
   26450:	781b      	ldrb	r3, [r3, #0]
   26452:	2b00      	cmp	r3, #0
   26454:	d10c      	bne.n	26470 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26456:	4b09      	ldr	r3, [pc, #36]	; (2647c <_extint_get_eic_from_channel+0x48>)
   26458:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   2645a:	230f      	movs	r3, #15
   2645c:	18fb      	adds	r3, r7, r3
   2645e:	781b      	ldrb	r3, [r3, #0]
   26460:	009b      	lsls	r3, r3, #2
   26462:	2210      	movs	r2, #16
   26464:	4694      	mov	ip, r2
   26466:	44bc      	add	ip, r7
   26468:	4463      	add	r3, ip
   2646a:	3b08      	subs	r3, #8
   2646c:	681b      	ldr	r3, [r3, #0]
   2646e:	e000      	b.n	26472 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   26470:	2300      	movs	r3, #0
	}
}
   26472:	0018      	movs	r0, r3
   26474:	46bd      	mov	sp, r7
   26476:	b004      	add	sp, #16
   26478:	bd80      	pop	{r7, pc}
   2647a:	46c0      	nop			; (mov r8, r8)
   2647c:	40001800 	.word	0x40001800

00026480 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   26480:	b580      	push	{r7, lr}
   26482:	b084      	sub	sp, #16
   26484:	af00      	add	r7, sp, #0
   26486:	0002      	movs	r2, r0
   26488:	1dfb      	adds	r3, r7, #7
   2648a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   2648c:	1dfb      	adds	r3, r7, #7
   2648e:	781b      	ldrb	r3, [r3, #0]
   26490:	0018      	movs	r0, r3
   26492:	4b0b      	ldr	r3, [pc, #44]	; (264c0 <extint_chan_is_detected+0x40>)
   26494:	4798      	blx	r3
   26496:	0003      	movs	r3, r0
   26498:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2649a:	1dfb      	adds	r3, r7, #7
   2649c:	781b      	ldrb	r3, [r3, #0]
   2649e:	221f      	movs	r2, #31
   264a0:	4013      	ands	r3, r2
   264a2:	2201      	movs	r2, #1
   264a4:	409a      	lsls	r2, r3
   264a6:	0013      	movs	r3, r2
   264a8:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   264aa:	68fb      	ldr	r3, [r7, #12]
   264ac:	691b      	ldr	r3, [r3, #16]
   264ae:	68ba      	ldr	r2, [r7, #8]
   264b0:	4013      	ands	r3, r2
   264b2:	1e5a      	subs	r2, r3, #1
   264b4:	4193      	sbcs	r3, r2
   264b6:	b2db      	uxtb	r3, r3
}
   264b8:	0018      	movs	r0, r3
   264ba:	46bd      	mov	sp, r7
   264bc:	b004      	add	sp, #16
   264be:	bd80      	pop	{r7, pc}
   264c0:	00026435 	.word	0x00026435

000264c4 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   264c4:	b580      	push	{r7, lr}
   264c6:	b084      	sub	sp, #16
   264c8:	af00      	add	r7, sp, #0
   264ca:	0002      	movs	r2, r0
   264cc:	1dfb      	adds	r3, r7, #7
   264ce:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   264d0:	1dfb      	adds	r3, r7, #7
   264d2:	781b      	ldrb	r3, [r3, #0]
   264d4:	0018      	movs	r0, r3
   264d6:	4b09      	ldr	r3, [pc, #36]	; (264fc <extint_chan_clear_detected+0x38>)
   264d8:	4798      	blx	r3
   264da:	0003      	movs	r3, r0
   264dc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   264de:	1dfb      	adds	r3, r7, #7
   264e0:	781b      	ldrb	r3, [r3, #0]
   264e2:	221f      	movs	r2, #31
   264e4:	4013      	ands	r3, r2
   264e6:	2201      	movs	r2, #1
   264e8:	409a      	lsls	r2, r3
   264ea:	0013      	movs	r3, r2
   264ec:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   264ee:	68fb      	ldr	r3, [r7, #12]
   264f0:	68ba      	ldr	r2, [r7, #8]
   264f2:	611a      	str	r2, [r3, #16]
}
   264f4:	46c0      	nop			; (mov r8, r8)
   264f6:	46bd      	mov	sp, r7
   264f8:	b004      	add	sp, #16
   264fa:	bd80      	pop	{r7, pc}
   264fc:	00026435 	.word	0x00026435

00026500 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26500:	b580      	push	{r7, lr}
   26502:	b082      	sub	sp, #8
   26504:	af00      	add	r7, sp, #0
   26506:	6078      	str	r0, [r7, #4]
   26508:	0008      	movs	r0, r1
   2650a:	0011      	movs	r1, r2
   2650c:	1cfb      	adds	r3, r7, #3
   2650e:	1c02      	adds	r2, r0, #0
   26510:	701a      	strb	r2, [r3, #0]
   26512:	1cbb      	adds	r3, r7, #2
   26514:	1c0a      	adds	r2, r1, #0
   26516:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   26518:	1cbb      	adds	r3, r7, #2
   2651a:	781b      	ldrb	r3, [r3, #0]
   2651c:	2b00      	cmp	r3, #0
   2651e:	d001      	beq.n	26524 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   26520:	2317      	movs	r3, #23
   26522:	e019      	b.n	26558 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   26524:	1cfb      	adds	r3, r7, #3
   26526:	781a      	ldrb	r2, [r3, #0]
   26528:	4b0d      	ldr	r3, [pc, #52]	; (26560 <extint_register_callback+0x60>)
   2652a:	0092      	lsls	r2, r2, #2
   2652c:	58d3      	ldr	r3, [r2, r3]
   2652e:	2b00      	cmp	r3, #0
   26530:	d107      	bne.n	26542 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   26532:	1cfb      	adds	r3, r7, #3
   26534:	781a      	ldrb	r2, [r3, #0]
   26536:	4b0a      	ldr	r3, [pc, #40]	; (26560 <extint_register_callback+0x60>)
   26538:	0092      	lsls	r2, r2, #2
   2653a:	6879      	ldr	r1, [r7, #4]
   2653c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   2653e:	2300      	movs	r3, #0
   26540:	e00a      	b.n	26558 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   26542:	1cfb      	adds	r3, r7, #3
   26544:	781a      	ldrb	r2, [r3, #0]
   26546:	4b06      	ldr	r3, [pc, #24]	; (26560 <extint_register_callback+0x60>)
   26548:	0092      	lsls	r2, r2, #2
   2654a:	58d2      	ldr	r2, [r2, r3]
   2654c:	687b      	ldr	r3, [r7, #4]
   2654e:	429a      	cmp	r2, r3
   26550:	d101      	bne.n	26556 <extint_register_callback+0x56>
		return STATUS_OK;
   26552:	2300      	movs	r3, #0
   26554:	e000      	b.n	26558 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   26556:	231d      	movs	r3, #29
}
   26558:	0018      	movs	r0, r3
   2655a:	46bd      	mov	sp, r7
   2655c:	b002      	add	sp, #8
   2655e:	bd80      	pop	{r7, pc}
   26560:	20005a44 	.word	0x20005a44

00026564 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26564:	b580      	push	{r7, lr}
   26566:	b084      	sub	sp, #16
   26568:	af00      	add	r7, sp, #0
   2656a:	0002      	movs	r2, r0
   2656c:	1dfb      	adds	r3, r7, #7
   2656e:	701a      	strb	r2, [r3, #0]
   26570:	1dbb      	adds	r3, r7, #6
   26572:	1c0a      	adds	r2, r1, #0
   26574:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   26576:	1dbb      	adds	r3, r7, #6
   26578:	781b      	ldrb	r3, [r3, #0]
   2657a:	2b00      	cmp	r3, #0
   2657c:	d10e      	bne.n	2659c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2657e:	1dfb      	adds	r3, r7, #7
   26580:	781b      	ldrb	r3, [r3, #0]
   26582:	0018      	movs	r0, r3
   26584:	4b08      	ldr	r3, [pc, #32]	; (265a8 <extint_chan_enable_callback+0x44>)
   26586:	4798      	blx	r3
   26588:	0003      	movs	r3, r0
   2658a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   2658c:	1dfb      	adds	r3, r7, #7
   2658e:	781b      	ldrb	r3, [r3, #0]
   26590:	2201      	movs	r2, #1
   26592:	409a      	lsls	r2, r3
   26594:	68fb      	ldr	r3, [r7, #12]
   26596:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   26598:	2300      	movs	r3, #0
   2659a:	e000      	b.n	2659e <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   2659c:	2317      	movs	r3, #23
}
   2659e:	0018      	movs	r0, r3
   265a0:	46bd      	mov	sp, r7
   265a2:	b004      	add	sp, #16
   265a4:	bd80      	pop	{r7, pc}
   265a6:	46c0      	nop			; (mov r8, r8)
   265a8:	00026435 	.word	0x00026435

000265ac <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   265ac:	b580      	push	{r7, lr}
   265ae:	b084      	sub	sp, #16
   265b0:	af00      	add	r7, sp, #0
   265b2:	0002      	movs	r2, r0
   265b4:	1dfb      	adds	r3, r7, #7
   265b6:	701a      	strb	r2, [r3, #0]
   265b8:	1dbb      	adds	r3, r7, #6
   265ba:	1c0a      	adds	r2, r1, #0
   265bc:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   265be:	1dbb      	adds	r3, r7, #6
   265c0:	781b      	ldrb	r3, [r3, #0]
   265c2:	2b00      	cmp	r3, #0
   265c4:	d10e      	bne.n	265e4 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   265c6:	1dfb      	adds	r3, r7, #7
   265c8:	781b      	ldrb	r3, [r3, #0]
   265ca:	0018      	movs	r0, r3
   265cc:	4b08      	ldr	r3, [pc, #32]	; (265f0 <extint_chan_disable_callback+0x44>)
   265ce:	4798      	blx	r3
   265d0:	0003      	movs	r3, r0
   265d2:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   265d4:	1dfb      	adds	r3, r7, #7
   265d6:	781b      	ldrb	r3, [r3, #0]
   265d8:	2201      	movs	r2, #1
   265da:	409a      	lsls	r2, r3
   265dc:	68fb      	ldr	r3, [r7, #12]
   265de:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   265e0:	2300      	movs	r3, #0
   265e2:	e000      	b.n	265e6 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   265e4:	2317      	movs	r3, #23
}
   265e6:	0018      	movs	r0, r3
   265e8:	46bd      	mov	sp, r7
   265ea:	b004      	add	sp, #16
   265ec:	bd80      	pop	{r7, pc}
   265ee:	46c0      	nop			; (mov r8, r8)
   265f0:	00026435 	.word	0x00026435

000265f4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   265f4:	b580      	push	{r7, lr}
   265f6:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   265f8:	4b15      	ldr	r3, [pc, #84]	; (26650 <EIC_Handler+0x5c>)
   265fa:	2200      	movs	r2, #0
   265fc:	701a      	strb	r2, [r3, #0]
   265fe:	e020      	b.n	26642 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   26600:	4b13      	ldr	r3, [pc, #76]	; (26650 <EIC_Handler+0x5c>)
   26602:	781b      	ldrb	r3, [r3, #0]
   26604:	0018      	movs	r0, r3
   26606:	4b13      	ldr	r3, [pc, #76]	; (26654 <EIC_Handler+0x60>)
   26608:	4798      	blx	r3
   2660a:	1e03      	subs	r3, r0, #0
   2660c:	d013      	beq.n	26636 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   2660e:	4b10      	ldr	r3, [pc, #64]	; (26650 <EIC_Handler+0x5c>)
   26610:	781b      	ldrb	r3, [r3, #0]
   26612:	0018      	movs	r0, r3
   26614:	4b10      	ldr	r3, [pc, #64]	; (26658 <EIC_Handler+0x64>)
   26616:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   26618:	4b0d      	ldr	r3, [pc, #52]	; (26650 <EIC_Handler+0x5c>)
   2661a:	781b      	ldrb	r3, [r3, #0]
   2661c:	001a      	movs	r2, r3
   2661e:	4b0f      	ldr	r3, [pc, #60]	; (2665c <EIC_Handler+0x68>)
   26620:	0092      	lsls	r2, r2, #2
   26622:	58d3      	ldr	r3, [r2, r3]
   26624:	2b00      	cmp	r3, #0
   26626:	d006      	beq.n	26636 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   26628:	4b09      	ldr	r3, [pc, #36]	; (26650 <EIC_Handler+0x5c>)
   2662a:	781b      	ldrb	r3, [r3, #0]
   2662c:	001a      	movs	r2, r3
   2662e:	4b0b      	ldr	r3, [pc, #44]	; (2665c <EIC_Handler+0x68>)
   26630:	0092      	lsls	r2, r2, #2
   26632:	58d3      	ldr	r3, [r2, r3]
   26634:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   26636:	4b06      	ldr	r3, [pc, #24]	; (26650 <EIC_Handler+0x5c>)
   26638:	781b      	ldrb	r3, [r3, #0]
   2663a:	3301      	adds	r3, #1
   2663c:	b2da      	uxtb	r2, r3
   2663e:	4b04      	ldr	r3, [pc, #16]	; (26650 <EIC_Handler+0x5c>)
   26640:	701a      	strb	r2, [r3, #0]
   26642:	4b03      	ldr	r3, [pc, #12]	; (26650 <EIC_Handler+0x5c>)
   26644:	781b      	ldrb	r3, [r3, #0]
   26646:	2b0f      	cmp	r3, #15
   26648:	d9da      	bls.n	26600 <EIC_Handler+0xc>
			}
		}
	}
}
   2664a:	46c0      	nop			; (mov r8, r8)
   2664c:	46bd      	mov	sp, r7
   2664e:	bd80      	pop	{r7, pc}
   26650:	20005a40 	.word	0x20005a40
   26654:	00026481 	.word	0x00026481
   26658:	000264c5 	.word	0x000264c5
   2665c:	20005a44 	.word	0x20005a44

00026660 <system_gclk_chan_get_config_defaults>:
{
   26660:	b580      	push	{r7, lr}
   26662:	b082      	sub	sp, #8
   26664:	af00      	add	r7, sp, #0
   26666:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26668:	687b      	ldr	r3, [r7, #4]
   2666a:	2200      	movs	r2, #0
   2666c:	701a      	strb	r2, [r3, #0]
}
   2666e:	46c0      	nop			; (mov r8, r8)
   26670:	46bd      	mov	sp, r7
   26672:	b002      	add	sp, #8
   26674:	bd80      	pop	{r7, pc}
	...

00026678 <system_apb_clock_set_mask>:
{
   26678:	b580      	push	{r7, lr}
   2667a:	b082      	sub	sp, #8
   2667c:	af00      	add	r7, sp, #0
   2667e:	0002      	movs	r2, r0
   26680:	6039      	str	r1, [r7, #0]
   26682:	1dfb      	adds	r3, r7, #7
   26684:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26686:	1dfb      	adds	r3, r7, #7
   26688:	781b      	ldrb	r3, [r3, #0]
   2668a:	2b01      	cmp	r3, #1
   2668c:	d00a      	beq.n	266a4 <system_apb_clock_set_mask+0x2c>
   2668e:	2b02      	cmp	r3, #2
   26690:	d00f      	beq.n	266b2 <system_apb_clock_set_mask+0x3a>
   26692:	2b00      	cmp	r3, #0
   26694:	d114      	bne.n	266c0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26696:	4b0e      	ldr	r3, [pc, #56]	; (266d0 <system_apb_clock_set_mask+0x58>)
   26698:	4a0d      	ldr	r2, [pc, #52]	; (266d0 <system_apb_clock_set_mask+0x58>)
   2669a:	6991      	ldr	r1, [r2, #24]
   2669c:	683a      	ldr	r2, [r7, #0]
   2669e:	430a      	orrs	r2, r1
   266a0:	619a      	str	r2, [r3, #24]
			break;
   266a2:	e00f      	b.n	266c4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   266a4:	4b0a      	ldr	r3, [pc, #40]	; (266d0 <system_apb_clock_set_mask+0x58>)
   266a6:	4a0a      	ldr	r2, [pc, #40]	; (266d0 <system_apb_clock_set_mask+0x58>)
   266a8:	69d1      	ldr	r1, [r2, #28]
   266aa:	683a      	ldr	r2, [r7, #0]
   266ac:	430a      	orrs	r2, r1
   266ae:	61da      	str	r2, [r3, #28]
			break;
   266b0:	e008      	b.n	266c4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   266b2:	4b07      	ldr	r3, [pc, #28]	; (266d0 <system_apb_clock_set_mask+0x58>)
   266b4:	4a06      	ldr	r2, [pc, #24]	; (266d0 <system_apb_clock_set_mask+0x58>)
   266b6:	6a11      	ldr	r1, [r2, #32]
   266b8:	683a      	ldr	r2, [r7, #0]
   266ba:	430a      	orrs	r2, r1
   266bc:	621a      	str	r2, [r3, #32]
			break;
   266be:	e001      	b.n	266c4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   266c0:	2317      	movs	r3, #23
   266c2:	e000      	b.n	266c6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   266c4:	2300      	movs	r3, #0
}
   266c6:	0018      	movs	r0, r3
   266c8:	46bd      	mov	sp, r7
   266ca:	b002      	add	sp, #8
   266cc:	bd80      	pop	{r7, pc}
   266ce:	46c0      	nop			; (mov r8, r8)
   266d0:	40000400 	.word	0x40000400

000266d4 <system_pinmux_get_config_defaults>:
{
   266d4:	b580      	push	{r7, lr}
   266d6:	b082      	sub	sp, #8
   266d8:	af00      	add	r7, sp, #0
   266da:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   266dc:	687b      	ldr	r3, [r7, #4]
   266de:	2280      	movs	r2, #128	; 0x80
   266e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   266e2:	687b      	ldr	r3, [r7, #4]
   266e4:	2200      	movs	r2, #0
   266e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   266e8:	687b      	ldr	r3, [r7, #4]
   266ea:	2201      	movs	r2, #1
   266ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   266ee:	687b      	ldr	r3, [r7, #4]
   266f0:	2200      	movs	r2, #0
   266f2:	70da      	strb	r2, [r3, #3]
}
   266f4:	46c0      	nop			; (mov r8, r8)
   266f6:	46bd      	mov	sp, r7
   266f8:	b002      	add	sp, #8
   266fa:	bd80      	pop	{r7, pc}

000266fc <system_interrupt_enable>:
{
   266fc:	b580      	push	{r7, lr}
   266fe:	b082      	sub	sp, #8
   26700:	af00      	add	r7, sp, #0
   26702:	0002      	movs	r2, r0
   26704:	1dfb      	adds	r3, r7, #7
   26706:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26708:	4b06      	ldr	r3, [pc, #24]	; (26724 <system_interrupt_enable+0x28>)
   2670a:	1dfa      	adds	r2, r7, #7
   2670c:	7812      	ldrb	r2, [r2, #0]
   2670e:	0011      	movs	r1, r2
   26710:	221f      	movs	r2, #31
   26712:	400a      	ands	r2, r1
   26714:	2101      	movs	r1, #1
   26716:	4091      	lsls	r1, r2
   26718:	000a      	movs	r2, r1
   2671a:	601a      	str	r2, [r3, #0]
}
   2671c:	46c0      	nop			; (mov r8, r8)
   2671e:	46bd      	mov	sp, r7
   26720:	b002      	add	sp, #8
   26722:	bd80      	pop	{r7, pc}
   26724:	e000e100 	.word	0xe000e100

00026728 <_extint_get_eic_from_channel>:
{
   26728:	b580      	push	{r7, lr}
   2672a:	b084      	sub	sp, #16
   2672c:	af00      	add	r7, sp, #0
   2672e:	0002      	movs	r2, r0
   26730:	1dfb      	adds	r3, r7, #7
   26732:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26734:	230f      	movs	r3, #15
   26736:	18fb      	adds	r3, r7, r3
   26738:	1dfa      	adds	r2, r7, #7
   2673a:	7812      	ldrb	r2, [r2, #0]
   2673c:	0952      	lsrs	r2, r2, #5
   2673e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   26740:	230f      	movs	r3, #15
   26742:	18fb      	adds	r3, r7, r3
   26744:	781b      	ldrb	r3, [r3, #0]
   26746:	2b00      	cmp	r3, #0
   26748:	d10c      	bne.n	26764 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2674a:	4b09      	ldr	r3, [pc, #36]	; (26770 <_extint_get_eic_from_channel+0x48>)
   2674c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   2674e:	230f      	movs	r3, #15
   26750:	18fb      	adds	r3, r7, r3
   26752:	781b      	ldrb	r3, [r3, #0]
   26754:	009b      	lsls	r3, r3, #2
   26756:	2210      	movs	r2, #16
   26758:	4694      	mov	ip, r2
   2675a:	44bc      	add	ip, r7
   2675c:	4463      	add	r3, ip
   2675e:	3b08      	subs	r3, #8
   26760:	681b      	ldr	r3, [r3, #0]
   26762:	e000      	b.n	26766 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   26764:	2300      	movs	r3, #0
}
   26766:	0018      	movs	r0, r3
   26768:	46bd      	mov	sp, r7
   2676a:	b004      	add	sp, #16
   2676c:	bd80      	pop	{r7, pc}
   2676e:	46c0      	nop			; (mov r8, r8)
   26770:	40001800 	.word	0x40001800

00026774 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   26774:	b580      	push	{r7, lr}
   26776:	b082      	sub	sp, #8
   26778:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2677a:	4b0f      	ldr	r3, [pc, #60]	; (267b8 <extint_is_syncing+0x44>)
   2677c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2677e:	2300      	movs	r3, #0
   26780:	607b      	str	r3, [r7, #4]
   26782:	e011      	b.n	267a8 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   26784:	687b      	ldr	r3, [r7, #4]
   26786:	009b      	lsls	r3, r3, #2
   26788:	2208      	movs	r2, #8
   2678a:	4694      	mov	ip, r2
   2678c:	44bc      	add	ip, r7
   2678e:	4463      	add	r3, ip
   26790:	3b08      	subs	r3, #8
   26792:	681b      	ldr	r3, [r3, #0]
   26794:	785b      	ldrb	r3, [r3, #1]
   26796:	b2db      	uxtb	r3, r3
   26798:	b25b      	sxtb	r3, r3
   2679a:	2b00      	cmp	r3, #0
   2679c:	da01      	bge.n	267a2 <extint_is_syncing+0x2e>
			return true;
   2679e:	2301      	movs	r3, #1
   267a0:	e006      	b.n	267b0 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   267a2:	687b      	ldr	r3, [r7, #4]
   267a4:	3301      	adds	r3, #1
   267a6:	607b      	str	r3, [r7, #4]
   267a8:	687b      	ldr	r3, [r7, #4]
   267aa:	2b00      	cmp	r3, #0
   267ac:	d0ea      	beq.n	26784 <extint_is_syncing+0x10>
		}
	}
	return false;
   267ae:	2300      	movs	r3, #0
}
   267b0:	0018      	movs	r0, r3
   267b2:	46bd      	mov	sp, r7
   267b4:	b002      	add	sp, #8
   267b6:	bd80      	pop	{r7, pc}
   267b8:	40001800 	.word	0x40001800

000267bc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   267bc:	b580      	push	{r7, lr}
   267be:	b084      	sub	sp, #16
   267c0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   267c2:	4b2d      	ldr	r3, [pc, #180]	; (26878 <_system_extint_init+0xbc>)
   267c4:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   267c6:	2140      	movs	r1, #64	; 0x40
   267c8:	2000      	movs	r0, #0
   267ca:	4b2c      	ldr	r3, [pc, #176]	; (2687c <_system_extint_init+0xc0>)
   267cc:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   267ce:	003b      	movs	r3, r7
   267d0:	0018      	movs	r0, r3
   267d2:	4b2b      	ldr	r3, [pc, #172]	; (26880 <_system_extint_init+0xc4>)
   267d4:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   267d6:	003b      	movs	r3, r7
   267d8:	2200      	movs	r2, #0
   267da:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   267dc:	003b      	movs	r3, r7
   267de:	0019      	movs	r1, r3
   267e0:	2005      	movs	r0, #5
   267e2:	4b28      	ldr	r3, [pc, #160]	; (26884 <_system_extint_init+0xc8>)
   267e4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   267e6:	2005      	movs	r0, #5
   267e8:	4b27      	ldr	r3, [pc, #156]	; (26888 <_system_extint_init+0xcc>)
   267ea:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   267ec:	2300      	movs	r3, #0
   267ee:	60fb      	str	r3, [r7, #12]
   267f0:	e018      	b.n	26824 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   267f2:	68fb      	ldr	r3, [r7, #12]
   267f4:	009b      	lsls	r3, r3, #2
   267f6:	2210      	movs	r2, #16
   267f8:	4694      	mov	ip, r2
   267fa:	44bc      	add	ip, r7
   267fc:	4463      	add	r3, ip
   267fe:	3b0c      	subs	r3, #12
   26800:	681a      	ldr	r2, [r3, #0]
   26802:	68fb      	ldr	r3, [r7, #12]
   26804:	009b      	lsls	r3, r3, #2
   26806:	2110      	movs	r1, #16
   26808:	468c      	mov	ip, r1
   2680a:	44bc      	add	ip, r7
   2680c:	4463      	add	r3, ip
   2680e:	3b0c      	subs	r3, #12
   26810:	681b      	ldr	r3, [r3, #0]
   26812:	781b      	ldrb	r3, [r3, #0]
   26814:	b2db      	uxtb	r3, r3
   26816:	2101      	movs	r1, #1
   26818:	430b      	orrs	r3, r1
   2681a:	b2db      	uxtb	r3, r3
   2681c:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2681e:	68fb      	ldr	r3, [r7, #12]
   26820:	3301      	adds	r3, #1
   26822:	60fb      	str	r3, [r7, #12]
   26824:	68fb      	ldr	r3, [r7, #12]
   26826:	2b00      	cmp	r3, #0
   26828:	d0e3      	beq.n	267f2 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   2682a:	46c0      	nop			; (mov r8, r8)
   2682c:	4b17      	ldr	r3, [pc, #92]	; (2688c <_system_extint_init+0xd0>)
   2682e:	4798      	blx	r3
   26830:	1e03      	subs	r3, r0, #0
   26832:	d1fb      	bne.n	2682c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   26834:	230b      	movs	r3, #11
   26836:	18fb      	adds	r3, r7, r3
   26838:	2200      	movs	r2, #0
   2683a:	701a      	strb	r2, [r3, #0]
   2683c:	e00d      	b.n	2685a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   2683e:	230b      	movs	r3, #11
   26840:	18fb      	adds	r3, r7, r3
   26842:	781a      	ldrb	r2, [r3, #0]
   26844:	4b12      	ldr	r3, [pc, #72]	; (26890 <_system_extint_init+0xd4>)
   26846:	0092      	lsls	r2, r2, #2
   26848:	2100      	movs	r1, #0
   2684a:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   2684c:	230b      	movs	r3, #11
   2684e:	18fb      	adds	r3, r7, r3
   26850:	781a      	ldrb	r2, [r3, #0]
   26852:	230b      	movs	r3, #11
   26854:	18fb      	adds	r3, r7, r3
   26856:	3201      	adds	r2, #1
   26858:	701a      	strb	r2, [r3, #0]
   2685a:	230b      	movs	r3, #11
   2685c:	18fb      	adds	r3, r7, r3
   2685e:	781b      	ldrb	r3, [r3, #0]
   26860:	2b0f      	cmp	r3, #15
   26862:	d9ec      	bls.n	2683e <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   26864:	2004      	movs	r0, #4
   26866:	4b0b      	ldr	r3, [pc, #44]	; (26894 <_system_extint_init+0xd8>)
   26868:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   2686a:	4b0b      	ldr	r3, [pc, #44]	; (26898 <_system_extint_init+0xdc>)
   2686c:	4798      	blx	r3
}
   2686e:	46c0      	nop			; (mov r8, r8)
   26870:	46bd      	mov	sp, r7
   26872:	b004      	add	sp, #16
   26874:	bd80      	pop	{r7, pc}
   26876:	46c0      	nop			; (mov r8, r8)
   26878:	40001800 	.word	0x40001800
   2687c:	00026679 	.word	0x00026679
   26880:	00026661 	.word	0x00026661
   26884:	00029ee9 	.word	0x00029ee9
   26888:	00029f2d 	.word	0x00029f2d
   2688c:	00026775 	.word	0x00026775
   26890:	20005a44 	.word	0x20005a44
   26894:	000266fd 	.word	0x000266fd
   26898:	0002689d 	.word	0x0002689d

0002689c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   2689c:	b580      	push	{r7, lr}
   2689e:	b082      	sub	sp, #8
   268a0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   268a2:	4b15      	ldr	r3, [pc, #84]	; (268f8 <_extint_enable+0x5c>)
   268a4:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   268a6:	2300      	movs	r3, #0
   268a8:	607b      	str	r3, [r7, #4]
   268aa:	e018      	b.n	268de <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   268ac:	687b      	ldr	r3, [r7, #4]
   268ae:	009b      	lsls	r3, r3, #2
   268b0:	2208      	movs	r2, #8
   268b2:	4694      	mov	ip, r2
   268b4:	44bc      	add	ip, r7
   268b6:	4463      	add	r3, ip
   268b8:	3b08      	subs	r3, #8
   268ba:	681a      	ldr	r2, [r3, #0]
   268bc:	687b      	ldr	r3, [r7, #4]
   268be:	009b      	lsls	r3, r3, #2
   268c0:	2108      	movs	r1, #8
   268c2:	468c      	mov	ip, r1
   268c4:	44bc      	add	ip, r7
   268c6:	4463      	add	r3, ip
   268c8:	3b08      	subs	r3, #8
   268ca:	681b      	ldr	r3, [r3, #0]
   268cc:	781b      	ldrb	r3, [r3, #0]
   268ce:	b2db      	uxtb	r3, r3
   268d0:	2102      	movs	r1, #2
   268d2:	430b      	orrs	r3, r1
   268d4:	b2db      	uxtb	r3, r3
   268d6:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   268d8:	687b      	ldr	r3, [r7, #4]
   268da:	3301      	adds	r3, #1
   268dc:	607b      	str	r3, [r7, #4]
   268de:	687b      	ldr	r3, [r7, #4]
   268e0:	2b00      	cmp	r3, #0
   268e2:	d0e3      	beq.n	268ac <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   268e4:	46c0      	nop			; (mov r8, r8)
   268e6:	4b05      	ldr	r3, [pc, #20]	; (268fc <_extint_enable+0x60>)
   268e8:	4798      	blx	r3
   268ea:	1e03      	subs	r3, r0, #0
   268ec:	d1fb      	bne.n	268e6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   268ee:	46c0      	nop			; (mov r8, r8)
   268f0:	46bd      	mov	sp, r7
   268f2:	b002      	add	sp, #8
   268f4:	bd80      	pop	{r7, pc}
   268f6:	46c0      	nop			; (mov r8, r8)
   268f8:	40001800 	.word	0x40001800
   268fc:	00026775 	.word	0x00026775

00026900 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   26900:	b580      	push	{r7, lr}
   26902:	b082      	sub	sp, #8
   26904:	af00      	add	r7, sp, #0
   26906:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   26908:	687b      	ldr	r3, [r7, #4]
   2690a:	2200      	movs	r2, #0
   2690c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   2690e:	687b      	ldr	r3, [r7, #4]
   26910:	2200      	movs	r2, #0
   26912:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   26914:	687b      	ldr	r3, [r7, #4]
   26916:	2201      	movs	r2, #1
   26918:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   2691a:	687b      	ldr	r3, [r7, #4]
   2691c:	2201      	movs	r2, #1
   2691e:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   26920:	687b      	ldr	r3, [r7, #4]
   26922:	2200      	movs	r2, #0
   26924:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   26926:	687b      	ldr	r3, [r7, #4]
   26928:	2202      	movs	r2, #2
   2692a:	72da      	strb	r2, [r3, #11]
}
   2692c:	46c0      	nop			; (mov r8, r8)
   2692e:	46bd      	mov	sp, r7
   26930:	b002      	add	sp, #8
   26932:	bd80      	pop	{r7, pc}

00026934 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   26934:	b580      	push	{r7, lr}
   26936:	b086      	sub	sp, #24
   26938:	af00      	add	r7, sp, #0
   2693a:	0002      	movs	r2, r0
   2693c:	6039      	str	r1, [r7, #0]
   2693e:	1dfb      	adds	r3, r7, #7
   26940:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   26942:	2308      	movs	r3, #8
   26944:	18fb      	adds	r3, r7, r3
   26946:	0018      	movs	r0, r3
   26948:	4b36      	ldr	r3, [pc, #216]	; (26a24 <extint_chan_set_config+0xf0>)
   2694a:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   2694c:	683b      	ldr	r3, [r7, #0]
   2694e:	685b      	ldr	r3, [r3, #4]
   26950:	b2da      	uxtb	r2, r3
   26952:	2308      	movs	r3, #8
   26954:	18fb      	adds	r3, r7, r3
   26956:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26958:	2308      	movs	r3, #8
   2695a:	18fb      	adds	r3, r7, r3
   2695c:	2200      	movs	r2, #0
   2695e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   26960:	683b      	ldr	r3, [r7, #0]
   26962:	7a1a      	ldrb	r2, [r3, #8]
   26964:	2308      	movs	r3, #8
   26966:	18fb      	adds	r3, r7, r3
   26968:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   2696a:	683b      	ldr	r3, [r7, #0]
   2696c:	681b      	ldr	r3, [r3, #0]
   2696e:	b2db      	uxtb	r3, r3
   26970:	2208      	movs	r2, #8
   26972:	18ba      	adds	r2, r7, r2
   26974:	0011      	movs	r1, r2
   26976:	0018      	movs	r0, r3
   26978:	4b2b      	ldr	r3, [pc, #172]	; (26a28 <extint_chan_set_config+0xf4>)
   2697a:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   2697c:	1dfb      	adds	r3, r7, #7
   2697e:	781b      	ldrb	r3, [r3, #0]
   26980:	0018      	movs	r0, r3
   26982:	4b2a      	ldr	r3, [pc, #168]	; (26a2c <extint_chan_set_config+0xf8>)
   26984:	4798      	blx	r3
   26986:	0003      	movs	r3, r0
   26988:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   2698a:	1dfb      	adds	r3, r7, #7
   2698c:	781b      	ldrb	r3, [r3, #0]
   2698e:	2207      	movs	r2, #7
   26990:	4013      	ands	r3, r2
   26992:	009b      	lsls	r3, r3, #2
   26994:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   26996:	683b      	ldr	r3, [r7, #0]
   26998:	7adb      	ldrb	r3, [r3, #11]
   2699a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   2699c:	683b      	ldr	r3, [r7, #0]
   2699e:	7a9b      	ldrb	r3, [r3, #10]
   269a0:	2b00      	cmp	r3, #0
   269a2:	d003      	beq.n	269ac <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   269a4:	697b      	ldr	r3, [r7, #20]
   269a6:	2208      	movs	r2, #8
   269a8:	4313      	orrs	r3, r2
   269aa:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   269ac:	1dfb      	adds	r3, r7, #7
   269ae:	781b      	ldrb	r3, [r3, #0]
   269b0:	08db      	lsrs	r3, r3, #3
   269b2:	b2db      	uxtb	r3, r3
   269b4:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   269b6:	1dfb      	adds	r3, r7, #7
   269b8:	781b      	ldrb	r3, [r3, #0]
   269ba:	08db      	lsrs	r3, r3, #3
   269bc:	b2db      	uxtb	r3, r3
   269be:	001a      	movs	r2, r3
   269c0:	693b      	ldr	r3, [r7, #16]
   269c2:	3206      	adds	r2, #6
   269c4:	0092      	lsls	r2, r2, #2
   269c6:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   269c8:	210f      	movs	r1, #15
   269ca:	68fa      	ldr	r2, [r7, #12]
   269cc:	4091      	lsls	r1, r2
   269ce:	000a      	movs	r2, r1
   269d0:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   269d2:	401a      	ands	r2, r3
			(new_config << config_pos);
   269d4:	6979      	ldr	r1, [r7, #20]
   269d6:	68fb      	ldr	r3, [r7, #12]
   269d8:	4099      	lsls	r1, r3
   269da:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   269dc:	431a      	orrs	r2, r3
   269de:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   269e0:	693b      	ldr	r3, [r7, #16]
   269e2:	1d82      	adds	r2, r0, #6
   269e4:	0092      	lsls	r2, r2, #2
   269e6:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   269e8:	683b      	ldr	r3, [r7, #0]
   269ea:	7a5b      	ldrb	r3, [r3, #9]
   269ec:	2b00      	cmp	r3, #0
   269ee:	d00a      	beq.n	26a06 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   269f0:	693b      	ldr	r3, [r7, #16]
   269f2:	695a      	ldr	r2, [r3, #20]
   269f4:	1dfb      	adds	r3, r7, #7
   269f6:	781b      	ldrb	r3, [r3, #0]
   269f8:	2101      	movs	r1, #1
   269fa:	4099      	lsls	r1, r3
   269fc:	000b      	movs	r3, r1
   269fe:	431a      	orrs	r2, r3
   26a00:	693b      	ldr	r3, [r7, #16]
   26a02:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   26a04:	e00a      	b.n	26a1c <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   26a06:	693b      	ldr	r3, [r7, #16]
   26a08:	695b      	ldr	r3, [r3, #20]
   26a0a:	1dfa      	adds	r2, r7, #7
   26a0c:	7812      	ldrb	r2, [r2, #0]
   26a0e:	2101      	movs	r1, #1
   26a10:	4091      	lsls	r1, r2
   26a12:	000a      	movs	r2, r1
   26a14:	43d2      	mvns	r2, r2
   26a16:	401a      	ands	r2, r3
   26a18:	693b      	ldr	r3, [r7, #16]
   26a1a:	615a      	str	r2, [r3, #20]
}
   26a1c:	46c0      	nop			; (mov r8, r8)
   26a1e:	46bd      	mov	sp, r7
   26a20:	b006      	add	sp, #24
   26a22:	bd80      	pop	{r7, pc}
   26a24:	000266d5 	.word	0x000266d5
   26a28:	0002a249 	.word	0x0002a249
   26a2c:	00026729 	.word	0x00026729

00026a30 <system_pinmux_get_config_defaults>:
{
   26a30:	b580      	push	{r7, lr}
   26a32:	b082      	sub	sp, #8
   26a34:	af00      	add	r7, sp, #0
   26a36:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26a38:	687b      	ldr	r3, [r7, #4]
   26a3a:	2280      	movs	r2, #128	; 0x80
   26a3c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26a3e:	687b      	ldr	r3, [r7, #4]
   26a40:	2200      	movs	r2, #0
   26a42:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26a44:	687b      	ldr	r3, [r7, #4]
   26a46:	2201      	movs	r2, #1
   26a48:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26a4a:	687b      	ldr	r3, [r7, #4]
   26a4c:	2200      	movs	r2, #0
   26a4e:	70da      	strb	r2, [r3, #3]
}
   26a50:	46c0      	nop			; (mov r8, r8)
   26a52:	46bd      	mov	sp, r7
   26a54:	b002      	add	sp, #8
   26a56:	bd80      	pop	{r7, pc}

00026a58 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   26a58:	b580      	push	{r7, lr}
   26a5a:	b084      	sub	sp, #16
   26a5c:	af00      	add	r7, sp, #0
   26a5e:	0002      	movs	r2, r0
   26a60:	6039      	str	r1, [r7, #0]
   26a62:	1dfb      	adds	r3, r7, #7
   26a64:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   26a66:	230c      	movs	r3, #12
   26a68:	18fb      	adds	r3, r7, r3
   26a6a:	0018      	movs	r0, r3
   26a6c:	4b10      	ldr	r3, [pc, #64]	; (26ab0 <port_pin_set_config+0x58>)
   26a6e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   26a70:	230c      	movs	r3, #12
   26a72:	18fb      	adds	r3, r7, r3
   26a74:	2280      	movs	r2, #128	; 0x80
   26a76:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   26a78:	683b      	ldr	r3, [r7, #0]
   26a7a:	781a      	ldrb	r2, [r3, #0]
   26a7c:	230c      	movs	r3, #12
   26a7e:	18fb      	adds	r3, r7, r3
   26a80:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   26a82:	683b      	ldr	r3, [r7, #0]
   26a84:	785a      	ldrb	r2, [r3, #1]
   26a86:	230c      	movs	r3, #12
   26a88:	18fb      	adds	r3, r7, r3
   26a8a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   26a8c:	683b      	ldr	r3, [r7, #0]
   26a8e:	789a      	ldrb	r2, [r3, #2]
   26a90:	230c      	movs	r3, #12
   26a92:	18fb      	adds	r3, r7, r3
   26a94:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   26a96:	230c      	movs	r3, #12
   26a98:	18fa      	adds	r2, r7, r3
   26a9a:	1dfb      	adds	r3, r7, #7
   26a9c:	781b      	ldrb	r3, [r3, #0]
   26a9e:	0011      	movs	r1, r2
   26aa0:	0018      	movs	r0, r3
   26aa2:	4b04      	ldr	r3, [pc, #16]	; (26ab4 <port_pin_set_config+0x5c>)
   26aa4:	4798      	blx	r3
}
   26aa6:	46c0      	nop			; (mov r8, r8)
   26aa8:	46bd      	mov	sp, r7
   26aaa:	b004      	add	sp, #16
   26aac:	bd80      	pop	{r7, pc}
   26aae:	46c0      	nop			; (mov r8, r8)
   26ab0:	00026a31 	.word	0x00026a31
   26ab4:	0002a249 	.word	0x0002a249

00026ab8 <system_gclk_chan_get_config_defaults>:
{
   26ab8:	b580      	push	{r7, lr}
   26aba:	b082      	sub	sp, #8
   26abc:	af00      	add	r7, sp, #0
   26abe:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26ac0:	687b      	ldr	r3, [r7, #4]
   26ac2:	2200      	movs	r2, #0
   26ac4:	701a      	strb	r2, [r3, #0]
}
   26ac6:	46c0      	nop			; (mov r8, r8)
   26ac8:	46bd      	mov	sp, r7
   26aca:	b002      	add	sp, #8
   26acc:	bd80      	pop	{r7, pc}
	...

00026ad0 <system_apb_clock_set_mask>:
{
   26ad0:	b580      	push	{r7, lr}
   26ad2:	b082      	sub	sp, #8
   26ad4:	af00      	add	r7, sp, #0
   26ad6:	0002      	movs	r2, r0
   26ad8:	6039      	str	r1, [r7, #0]
   26ada:	1dfb      	adds	r3, r7, #7
   26adc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26ade:	1dfb      	adds	r3, r7, #7
   26ae0:	781b      	ldrb	r3, [r3, #0]
   26ae2:	2b01      	cmp	r3, #1
   26ae4:	d00a      	beq.n	26afc <system_apb_clock_set_mask+0x2c>
   26ae6:	2b02      	cmp	r3, #2
   26ae8:	d00f      	beq.n	26b0a <system_apb_clock_set_mask+0x3a>
   26aea:	2b00      	cmp	r3, #0
   26aec:	d114      	bne.n	26b18 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26aee:	4b0e      	ldr	r3, [pc, #56]	; (26b28 <system_apb_clock_set_mask+0x58>)
   26af0:	4a0d      	ldr	r2, [pc, #52]	; (26b28 <system_apb_clock_set_mask+0x58>)
   26af2:	6991      	ldr	r1, [r2, #24]
   26af4:	683a      	ldr	r2, [r7, #0]
   26af6:	430a      	orrs	r2, r1
   26af8:	619a      	str	r2, [r3, #24]
			break;
   26afa:	e00f      	b.n	26b1c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26afc:	4b0a      	ldr	r3, [pc, #40]	; (26b28 <system_apb_clock_set_mask+0x58>)
   26afe:	4a0a      	ldr	r2, [pc, #40]	; (26b28 <system_apb_clock_set_mask+0x58>)
   26b00:	69d1      	ldr	r1, [r2, #28]
   26b02:	683a      	ldr	r2, [r7, #0]
   26b04:	430a      	orrs	r2, r1
   26b06:	61da      	str	r2, [r3, #28]
			break;
   26b08:	e008      	b.n	26b1c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26b0a:	4b07      	ldr	r3, [pc, #28]	; (26b28 <system_apb_clock_set_mask+0x58>)
   26b0c:	4a06      	ldr	r2, [pc, #24]	; (26b28 <system_apb_clock_set_mask+0x58>)
   26b0e:	6a11      	ldr	r1, [r2, #32]
   26b10:	683a      	ldr	r2, [r7, #0]
   26b12:	430a      	orrs	r2, r1
   26b14:	621a      	str	r2, [r3, #32]
			break;
   26b16:	e001      	b.n	26b1c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26b18:	2317      	movs	r3, #23
   26b1a:	e000      	b.n	26b1e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26b1c:	2300      	movs	r3, #0
}
   26b1e:	0018      	movs	r0, r3
   26b20:	46bd      	mov	sp, r7
   26b22:	b002      	add	sp, #8
   26b24:	bd80      	pop	{r7, pc}
   26b26:	46c0      	nop			; (mov r8, r8)
   26b28:	40000400 	.word	0x40000400

00026b2c <system_interrupt_enable>:
{
   26b2c:	b580      	push	{r7, lr}
   26b2e:	b082      	sub	sp, #8
   26b30:	af00      	add	r7, sp, #0
   26b32:	0002      	movs	r2, r0
   26b34:	1dfb      	adds	r3, r7, #7
   26b36:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26b38:	4b06      	ldr	r3, [pc, #24]	; (26b54 <system_interrupt_enable+0x28>)
   26b3a:	1dfa      	adds	r2, r7, #7
   26b3c:	7812      	ldrb	r2, [r2, #0]
   26b3e:	0011      	movs	r1, r2
   26b40:	221f      	movs	r2, #31
   26b42:	400a      	ands	r2, r1
   26b44:	2101      	movs	r1, #1
   26b46:	4091      	lsls	r1, r2
   26b48:	000a      	movs	r2, r1
   26b4a:	601a      	str	r2, [r3, #0]
}
   26b4c:	46c0      	nop			; (mov r8, r8)
   26b4e:	46bd      	mov	sp, r7
   26b50:	b002      	add	sp, #8
   26b52:	bd80      	pop	{r7, pc}
   26b54:	e000e100 	.word	0xe000e100

00026b58 <system_interrupt_disable>:
{
   26b58:	b580      	push	{r7, lr}
   26b5a:	b082      	sub	sp, #8
   26b5c:	af00      	add	r7, sp, #0
   26b5e:	0002      	movs	r2, r0
   26b60:	1dfb      	adds	r3, r7, #7
   26b62:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26b64:	4a07      	ldr	r2, [pc, #28]	; (26b84 <system_interrupt_disable+0x2c>)
   26b66:	1dfb      	adds	r3, r7, #7
   26b68:	781b      	ldrb	r3, [r3, #0]
   26b6a:	0019      	movs	r1, r3
   26b6c:	231f      	movs	r3, #31
   26b6e:	400b      	ands	r3, r1
   26b70:	2101      	movs	r1, #1
   26b72:	4099      	lsls	r1, r3
   26b74:	000b      	movs	r3, r1
   26b76:	0019      	movs	r1, r3
   26b78:	2380      	movs	r3, #128	; 0x80
   26b7a:	50d1      	str	r1, [r2, r3]
}
   26b7c:	46c0      	nop			; (mov r8, r8)
   26b7e:	46bd      	mov	sp, r7
   26b80:	b002      	add	sp, #8
   26b82:	bd80      	pop	{r7, pc}
   26b84:	e000e100 	.word	0xe000e100

00026b88 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   26b88:	b580      	push	{r7, lr}
   26b8a:	b084      	sub	sp, #16
   26b8c:	af00      	add	r7, sp, #0
   26b8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26b90:	687b      	ldr	r3, [r7, #4]
   26b92:	681b      	ldr	r3, [r3, #0]
   26b94:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   26b96:	68fb      	ldr	r3, [r7, #12]
   26b98:	7a9b      	ldrb	r3, [r3, #10]
   26b9a:	b2db      	uxtb	r3, r3
   26b9c:	b25b      	sxtb	r3, r3
   26b9e:	2b00      	cmp	r3, #0
   26ba0:	da01      	bge.n	26ba6 <rtc_calendar_is_syncing+0x1e>
                return true;
   26ba2:	2301      	movs	r3, #1
   26ba4:	e000      	b.n	26ba8 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   26ba6:	2300      	movs	r3, #0
}
   26ba8:	0018      	movs	r0, r3
   26baa:	46bd      	mov	sp, r7
   26bac:	b004      	add	sp, #16
   26bae:	bd80      	pop	{r7, pc}

00026bb0 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   26bb0:	b580      	push	{r7, lr}
   26bb2:	b084      	sub	sp, #16
   26bb4:	af00      	add	r7, sp, #0
   26bb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26bb8:	687b      	ldr	r3, [r7, #4]
   26bba:	681b      	ldr	r3, [r3, #0]
   26bbc:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   26bbe:	2003      	movs	r0, #3
   26bc0:	4b0a      	ldr	r3, [pc, #40]	; (26bec <rtc_calendar_enable+0x3c>)
   26bc2:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26bc4:	46c0      	nop			; (mov r8, r8)
   26bc6:	687b      	ldr	r3, [r7, #4]
   26bc8:	0018      	movs	r0, r3
   26bca:	4b09      	ldr	r3, [pc, #36]	; (26bf0 <rtc_calendar_enable+0x40>)
   26bcc:	4798      	blx	r3
   26bce:	1e03      	subs	r3, r0, #0
   26bd0:	d1f9      	bne.n	26bc6 <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   26bd2:	68fb      	ldr	r3, [r7, #12]
   26bd4:	881b      	ldrh	r3, [r3, #0]
   26bd6:	b29b      	uxth	r3, r3
   26bd8:	2202      	movs	r2, #2
   26bda:	4313      	orrs	r3, r2
   26bdc:	b29a      	uxth	r2, r3
   26bde:	68fb      	ldr	r3, [r7, #12]
   26be0:	801a      	strh	r2, [r3, #0]
}
   26be2:	46c0      	nop			; (mov r8, r8)
   26be4:	46bd      	mov	sp, r7
   26be6:	b004      	add	sp, #16
   26be8:	bd80      	pop	{r7, pc}
   26bea:	46c0      	nop			; (mov r8, r8)
   26bec:	00026b2d 	.word	0x00026b2d
   26bf0:	00026b89 	.word	0x00026b89

00026bf4 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   26bf4:	b580      	push	{r7, lr}
   26bf6:	b084      	sub	sp, #16
   26bf8:	af00      	add	r7, sp, #0
   26bfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26bfc:	687b      	ldr	r3, [r7, #4]
   26bfe:	681b      	ldr	r3, [r3, #0]
   26c00:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   26c02:	2003      	movs	r0, #3
   26c04:	4b0d      	ldr	r3, [pc, #52]	; (26c3c <rtc_calendar_disable+0x48>)
   26c06:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26c08:	46c0      	nop			; (mov r8, r8)
   26c0a:	687b      	ldr	r3, [r7, #4]
   26c0c:	0018      	movs	r0, r3
   26c0e:	4b0c      	ldr	r3, [pc, #48]	; (26c40 <rtc_calendar_disable+0x4c>)
   26c10:	4798      	blx	r3
   26c12:	1e03      	subs	r3, r0, #0
   26c14:	d1f9      	bne.n	26c0a <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   26c16:	68fb      	ldr	r3, [r7, #12]
   26c18:	22c1      	movs	r2, #193	; 0xc1
   26c1a:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   26c1c:	68fb      	ldr	r3, [r7, #12]
   26c1e:	22c1      	movs	r2, #193	; 0xc1
   26c20:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   26c22:	68fb      	ldr	r3, [r7, #12]
   26c24:	881b      	ldrh	r3, [r3, #0]
   26c26:	b29b      	uxth	r3, r3
   26c28:	2202      	movs	r2, #2
   26c2a:	4393      	bics	r3, r2
   26c2c:	b29a      	uxth	r2, r3
   26c2e:	68fb      	ldr	r3, [r7, #12]
   26c30:	801a      	strh	r2, [r3, #0]
}
   26c32:	46c0      	nop			; (mov r8, r8)
   26c34:	46bd      	mov	sp, r7
   26c36:	b004      	add	sp, #16
   26c38:	bd80      	pop	{r7, pc}
   26c3a:	46c0      	nop			; (mov r8, r8)
   26c3c:	00026b59 	.word	0x00026b59
   26c40:	00026b89 	.word	0x00026b89

00026c44 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   26c44:	b580      	push	{r7, lr}
   26c46:	b084      	sub	sp, #16
   26c48:	af00      	add	r7, sp, #0
   26c4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26c4c:	687b      	ldr	r3, [r7, #4]
   26c4e:	681b      	ldr	r3, [r3, #0]
   26c50:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   26c52:	687b      	ldr	r3, [r7, #4]
   26c54:	0018      	movs	r0, r3
   26c56:	4b0d      	ldr	r3, [pc, #52]	; (26c8c <rtc_calendar_reset+0x48>)
   26c58:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   26c5a:	687b      	ldr	r3, [r7, #4]
   26c5c:	2200      	movs	r2, #0
   26c5e:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   26c60:	687b      	ldr	r3, [r7, #4]
   26c62:	2200      	movs	r2, #0
   26c64:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   26c66:	46c0      	nop			; (mov r8, r8)
   26c68:	687b      	ldr	r3, [r7, #4]
   26c6a:	0018      	movs	r0, r3
   26c6c:	4b08      	ldr	r3, [pc, #32]	; (26c90 <rtc_calendar_reset+0x4c>)
   26c6e:	4798      	blx	r3
   26c70:	1e03      	subs	r3, r0, #0
   26c72:	d1f9      	bne.n	26c68 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   26c74:	68fb      	ldr	r3, [r7, #12]
   26c76:	881b      	ldrh	r3, [r3, #0]
   26c78:	b29b      	uxth	r3, r3
   26c7a:	2201      	movs	r2, #1
   26c7c:	4313      	orrs	r3, r2
   26c7e:	b29a      	uxth	r2, r3
   26c80:	68fb      	ldr	r3, [r7, #12]
   26c82:	801a      	strh	r2, [r3, #0]
}
   26c84:	46c0      	nop			; (mov r8, r8)
   26c86:	46bd      	mov	sp, r7
   26c88:	b004      	add	sp, #16
   26c8a:	bd80      	pop	{r7, pc}
   26c8c:	00026bf5 	.word	0x00026bf5
   26c90:	00026b89 	.word	0x00026b89

00026c94 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   26c94:	b580      	push	{r7, lr}
   26c96:	b084      	sub	sp, #16
   26c98:	af00      	add	r7, sp, #0
   26c9a:	6078      	str	r0, [r7, #4]
   26c9c:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   26c9e:	683b      	ldr	r3, [r7, #0]
   26ca0:	88db      	ldrh	r3, [r3, #6]
   26ca2:	001a      	movs	r2, r3
   26ca4:	687b      	ldr	r3, [r7, #4]
   26ca6:	88db      	ldrh	r3, [r3, #6]
   26ca8:	1ad3      	subs	r3, r2, r3
   26caa:	069b      	lsls	r3, r3, #26
   26cac:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   26cae:	683b      	ldr	r3, [r7, #0]
   26cb0:	795b      	ldrb	r3, [r3, #5]
   26cb2:	059b      	lsls	r3, r3, #22
   26cb4:	001a      	movs	r2, r3
   26cb6:	68fb      	ldr	r3, [r7, #12]
   26cb8:	4313      	orrs	r3, r2
   26cba:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   26cbc:	683b      	ldr	r3, [r7, #0]
   26cbe:	791b      	ldrb	r3, [r3, #4]
   26cc0:	045b      	lsls	r3, r3, #17
   26cc2:	001a      	movs	r2, r3
   26cc4:	68fb      	ldr	r3, [r7, #12]
   26cc6:	4313      	orrs	r3, r2
   26cc8:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   26cca:	683b      	ldr	r3, [r7, #0]
   26ccc:	789b      	ldrb	r3, [r3, #2]
   26cce:	031b      	lsls	r3, r3, #12
   26cd0:	001a      	movs	r2, r3
   26cd2:	68fb      	ldr	r3, [r7, #12]
   26cd4:	4313      	orrs	r3, r2
   26cd6:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   26cd8:	687b      	ldr	r3, [r7, #4]
   26cda:	791b      	ldrb	r3, [r3, #4]
   26cdc:	2201      	movs	r2, #1
   26cde:	4053      	eors	r3, r2
   26ce0:	b2db      	uxtb	r3, r3
   26ce2:	2b00      	cmp	r3, #0
   26ce4:	d008      	beq.n	26cf8 <rtc_calendar_time_to_register_value+0x64>
   26ce6:	683b      	ldr	r3, [r7, #0]
   26ce8:	78db      	ldrb	r3, [r3, #3]
   26cea:	2b00      	cmp	r3, #0
   26cec:	d004      	beq.n	26cf8 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   26cee:	68fb      	ldr	r3, [r7, #12]
   26cf0:	2280      	movs	r2, #128	; 0x80
   26cf2:	0252      	lsls	r2, r2, #9
   26cf4:	4313      	orrs	r3, r2
   26cf6:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   26cf8:	683b      	ldr	r3, [r7, #0]
   26cfa:	785b      	ldrb	r3, [r3, #1]
   26cfc:	019b      	lsls	r3, r3, #6
   26cfe:	001a      	movs	r2, r3
   26d00:	68fb      	ldr	r3, [r7, #12]
   26d02:	4313      	orrs	r3, r2
   26d04:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   26d06:	683b      	ldr	r3, [r7, #0]
   26d08:	781b      	ldrb	r3, [r3, #0]
   26d0a:	001a      	movs	r2, r3
   26d0c:	68fb      	ldr	r3, [r7, #12]
   26d0e:	4313      	orrs	r3, r2
   26d10:	60fb      	str	r3, [r7, #12]

	return register_value;
   26d12:	68fb      	ldr	r3, [r7, #12]
}
   26d14:	0018      	movs	r0, r3
   26d16:	46bd      	mov	sp, r7
   26d18:	b004      	add	sp, #16
   26d1a:	bd80      	pop	{r7, pc}

00026d1c <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   26d1c:	b580      	push	{r7, lr}
   26d1e:	b084      	sub	sp, #16
   26d20:	af00      	add	r7, sp, #0
   26d22:	60f8      	str	r0, [r7, #12]
   26d24:	60b9      	str	r1, [r7, #8]
   26d26:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26d28:	68bb      	ldr	r3, [r7, #8]
   26d2a:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   26d2c:	b29a      	uxth	r2, r3
   26d2e:	68fb      	ldr	r3, [r7, #12]
   26d30:	88db      	ldrh	r3, [r3, #6]
   26d32:	18d3      	adds	r3, r2, r3
   26d34:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26d36:	687b      	ldr	r3, [r7, #4]
   26d38:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   26d3a:	68bb      	ldr	r3, [r7, #8]
   26d3c:	0d9b      	lsrs	r3, r3, #22
   26d3e:	b2db      	uxtb	r3, r3
   26d40:	220f      	movs	r2, #15
   26d42:	4013      	ands	r3, r2
   26d44:	b2da      	uxtb	r2, r3
   26d46:	687b      	ldr	r3, [r7, #4]
   26d48:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   26d4a:	68bb      	ldr	r3, [r7, #8]
   26d4c:	0c5b      	lsrs	r3, r3, #17
   26d4e:	b2db      	uxtb	r3, r3
   26d50:	221f      	movs	r2, #31
   26d52:	4013      	ands	r3, r2
   26d54:	b2da      	uxtb	r2, r3
   26d56:	687b      	ldr	r3, [r7, #4]
   26d58:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   26d5a:	68fb      	ldr	r3, [r7, #12]
   26d5c:	791b      	ldrb	r3, [r3, #4]
   26d5e:	2b00      	cmp	r3, #0
   26d60:	d008      	beq.n	26d74 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   26d62:	68bb      	ldr	r3, [r7, #8]
   26d64:	0b1b      	lsrs	r3, r3, #12
   26d66:	b2db      	uxtb	r3, r3
   26d68:	221f      	movs	r2, #31
   26d6a:	4013      	ands	r3, r2
   26d6c:	b2da      	uxtb	r2, r3
   26d6e:	687b      	ldr	r3, [r7, #4]
   26d70:	709a      	strb	r2, [r3, #2]
   26d72:	e010      	b.n	26d96 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   26d74:	68bb      	ldr	r3, [r7, #8]
   26d76:	0b1b      	lsrs	r3, r3, #12
   26d78:	b2db      	uxtb	r3, r3
   26d7a:	220f      	movs	r2, #15
   26d7c:	4013      	ands	r3, r2
   26d7e:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   26d80:	687b      	ldr	r3, [r7, #4]
   26d82:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   26d84:	68ba      	ldr	r2, [r7, #8]
   26d86:	2380      	movs	r3, #128	; 0x80
   26d88:	025b      	lsls	r3, r3, #9
   26d8a:	4013      	ands	r3, r2
   26d8c:	1e5a      	subs	r2, r3, #1
   26d8e:	4193      	sbcs	r3, r2
   26d90:	b2da      	uxtb	r2, r3
   26d92:	687b      	ldr	r3, [r7, #4]
   26d94:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   26d96:	68bb      	ldr	r3, [r7, #8]
   26d98:	099b      	lsrs	r3, r3, #6
   26d9a:	b2db      	uxtb	r3, r3
   26d9c:	223f      	movs	r2, #63	; 0x3f
   26d9e:	4013      	ands	r3, r2
   26da0:	b2da      	uxtb	r2, r3
   26da2:	687b      	ldr	r3, [r7, #4]
   26da4:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   26da6:	68bb      	ldr	r3, [r7, #8]
   26da8:	b2db      	uxtb	r3, r3
   26daa:	223f      	movs	r2, #63	; 0x3f
   26dac:	4013      	ands	r3, r2
   26dae:	b2da      	uxtb	r2, r3
   26db0:	687b      	ldr	r3, [r7, #4]
   26db2:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   26db4:	46c0      	nop			; (mov r8, r8)
   26db6:	46bd      	mov	sp, r7
   26db8:	b004      	add	sp, #16
   26dba:	bd80      	pop	{r7, pc}

00026dbc <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   26dbc:	b580      	push	{r7, lr}
   26dbe:	b084      	sub	sp, #16
   26dc0:	af00      	add	r7, sp, #0
   26dc2:	6078      	str	r0, [r7, #4]
   26dc4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26dc6:	687b      	ldr	r3, [r7, #4]
   26dc8:	681b      	ldr	r3, [r3, #0]
   26dca:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   26dcc:	683b      	ldr	r3, [r7, #0]
   26dce:	881a      	ldrh	r2, [r3, #0]
   26dd0:	230e      	movs	r3, #14
   26dd2:	18fb      	adds	r3, r7, r3
   26dd4:	2108      	movs	r1, #8
   26dd6:	430a      	orrs	r2, r1
   26dd8:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   26dda:	683b      	ldr	r3, [r7, #0]
   26ddc:	791b      	ldrb	r3, [r3, #4]
   26dde:	2201      	movs	r2, #1
   26de0:	4053      	eors	r3, r2
   26de2:	b2db      	uxtb	r3, r3
   26de4:	2b00      	cmp	r3, #0
   26de6:	d007      	beq.n	26df8 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   26de8:	230e      	movs	r3, #14
   26dea:	18fb      	adds	r3, r7, r3
   26dec:	220e      	movs	r2, #14
   26dee:	18ba      	adds	r2, r7, r2
   26df0:	8812      	ldrh	r2, [r2, #0]
   26df2:	2140      	movs	r1, #64	; 0x40
   26df4:	430a      	orrs	r2, r1
   26df6:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   26df8:	683b      	ldr	r3, [r7, #0]
   26dfa:	789b      	ldrb	r3, [r3, #2]
   26dfc:	2b00      	cmp	r3, #0
   26dfe:	d007      	beq.n	26e10 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   26e00:	230e      	movs	r3, #14
   26e02:	18fb      	adds	r3, r7, r3
   26e04:	220e      	movs	r2, #14
   26e06:	18ba      	adds	r2, r7, r2
   26e08:	8812      	ldrh	r2, [r2, #0]
   26e0a:	2180      	movs	r1, #128	; 0x80
   26e0c:	430a      	orrs	r2, r1
   26e0e:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   26e10:	68bb      	ldr	r3, [r7, #8]
   26e12:	220e      	movs	r2, #14
   26e14:	18ba      	adds	r2, r7, r2
   26e16:	8812      	ldrh	r2, [r2, #0]
   26e18:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   26e1a:	683b      	ldr	r3, [r7, #0]
   26e1c:	78db      	ldrb	r3, [r3, #3]
   26e1e:	2b00      	cmp	r3, #0
   26e20:	d008      	beq.n	26e34 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   26e22:	68bb      	ldr	r3, [r7, #8]
   26e24:	885b      	ldrh	r3, [r3, #2]
   26e26:	b29b      	uxth	r3, r3
   26e28:	2280      	movs	r2, #128	; 0x80
   26e2a:	01d2      	lsls	r2, r2, #7
   26e2c:	4313      	orrs	r3, r2
   26e2e:	b29a      	uxth	r2, r3
   26e30:	68bb      	ldr	r3, [r7, #8]
   26e32:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   26e34:	230d      	movs	r3, #13
   26e36:	18fb      	adds	r3, r7, r3
   26e38:	2200      	movs	r2, #0
   26e3a:	701a      	strb	r2, [r3, #0]
   26e3c:	e017      	b.n	26e6e <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   26e3e:	230d      	movs	r3, #13
   26e40:	18fb      	adds	r3, r7, r3
   26e42:	781a      	ldrb	r2, [r3, #0]
   26e44:	0013      	movs	r3, r2
   26e46:	009b      	lsls	r3, r3, #2
   26e48:	189b      	adds	r3, r3, r2
   26e4a:	005b      	lsls	r3, r3, #1
   26e4c:	3308      	adds	r3, #8
   26e4e:	683a      	ldr	r2, [r7, #0]
   26e50:	18d1      	adds	r1, r2, r3
   26e52:	230d      	movs	r3, #13
   26e54:	18fb      	adds	r3, r7, r3
   26e56:	781a      	ldrb	r2, [r3, #0]
   26e58:	687b      	ldr	r3, [r7, #4]
   26e5a:	0018      	movs	r0, r3
   26e5c:	4b08      	ldr	r3, [pc, #32]	; (26e80 <_rtc_calendar_set_config+0xc4>)
   26e5e:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   26e60:	230d      	movs	r3, #13
   26e62:	18fb      	adds	r3, r7, r3
   26e64:	781a      	ldrb	r2, [r3, #0]
   26e66:	230d      	movs	r3, #13
   26e68:	18fb      	adds	r3, r7, r3
   26e6a:	3201      	adds	r2, #1
   26e6c:	701a      	strb	r2, [r3, #0]
   26e6e:	230d      	movs	r3, #13
   26e70:	18fb      	adds	r3, r7, r3
   26e72:	781b      	ldrb	r3, [r3, #0]
   26e74:	2b00      	cmp	r3, #0
   26e76:	d0e2      	beq.n	26e3e <_rtc_calendar_set_config+0x82>
	}
}
   26e78:	46c0      	nop			; (mov r8, r8)
   26e7a:	46bd      	mov	sp, r7
   26e7c:	b004      	add	sp, #16
   26e7e:	bd80      	pop	{r7, pc}
   26e80:	00026fa5 	.word	0x00026fa5

00026e84 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   26e84:	b580      	push	{r7, lr}
   26e86:	b086      	sub	sp, #24
   26e88:	af00      	add	r7, sp, #0
   26e8a:	60f8      	str	r0, [r7, #12]
   26e8c:	60b9      	str	r1, [r7, #8]
   26e8e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   26e90:	68fb      	ldr	r3, [r7, #12]
   26e92:	68ba      	ldr	r2, [r7, #8]
   26e94:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   26e96:	2120      	movs	r1, #32
   26e98:	2000      	movs	r0, #0
   26e9a:	4b18      	ldr	r3, [pc, #96]	; (26efc <rtc_calendar_init+0x78>)
   26e9c:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26e9e:	2314      	movs	r3, #20
   26ea0:	18fb      	adds	r3, r7, r3
   26ea2:	0018      	movs	r0, r3
   26ea4:	4b16      	ldr	r3, [pc, #88]	; (26f00 <rtc_calendar_init+0x7c>)
   26ea6:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   26ea8:	2314      	movs	r3, #20
   26eaa:	18fb      	adds	r3, r7, r3
   26eac:	2202      	movs	r2, #2
   26eae:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   26eb0:	2314      	movs	r3, #20
   26eb2:	18fb      	adds	r3, r7, r3
   26eb4:	0019      	movs	r1, r3
   26eb6:	2004      	movs	r0, #4
   26eb8:	4b12      	ldr	r3, [pc, #72]	; (26f04 <rtc_calendar_init+0x80>)
   26eba:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   26ebc:	2004      	movs	r0, #4
   26ebe:	4b12      	ldr	r3, [pc, #72]	; (26f08 <rtc_calendar_init+0x84>)
   26ec0:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   26ec2:	68fb      	ldr	r3, [r7, #12]
   26ec4:	0018      	movs	r0, r3
   26ec6:	4b11      	ldr	r3, [pc, #68]	; (26f0c <rtc_calendar_init+0x88>)
   26ec8:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   26eca:	687b      	ldr	r3, [r7, #4]
   26ecc:	791a      	ldrb	r2, [r3, #4]
   26ece:	68fb      	ldr	r3, [r7, #12]
   26ed0:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   26ed2:	687b      	ldr	r3, [r7, #4]
   26ed4:	78da      	ldrb	r2, [r3, #3]
   26ed6:	68fb      	ldr	r3, [r7, #12]
   26ed8:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   26eda:	687b      	ldr	r3, [r7, #4]
   26edc:	88da      	ldrh	r2, [r3, #6]
   26ede:	68fb      	ldr	r3, [r7, #12]
   26ee0:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   26ee2:	4b0b      	ldr	r3, [pc, #44]	; (26f10 <rtc_calendar_init+0x8c>)
   26ee4:	68fa      	ldr	r2, [r7, #12]
   26ee6:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   26ee8:	687a      	ldr	r2, [r7, #4]
   26eea:	68fb      	ldr	r3, [r7, #12]
   26eec:	0011      	movs	r1, r2
   26eee:	0018      	movs	r0, r3
   26ef0:	4b08      	ldr	r3, [pc, #32]	; (26f14 <rtc_calendar_init+0x90>)
   26ef2:	4798      	blx	r3
}
   26ef4:	46c0      	nop			; (mov r8, r8)
   26ef6:	46bd      	mov	sp, r7
   26ef8:	b006      	add	sp, #24
   26efa:	bd80      	pop	{r7, pc}
   26efc:	00026ad1 	.word	0x00026ad1
   26f00:	00026ab9 	.word	0x00026ab9
   26f04:	00029ee9 	.word	0x00029ee9
   26f08:	00029f2d 	.word	0x00029f2d
   26f0c:	00026c45 	.word	0x00026c45
   26f10:	20005a84 	.word	0x20005a84
   26f14:	00026dbd 	.word	0x00026dbd

00026f18 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   26f18:	b580      	push	{r7, lr}
   26f1a:	b084      	sub	sp, #16
   26f1c:	af00      	add	r7, sp, #0
   26f1e:	6078      	str	r0, [r7, #4]
   26f20:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26f22:	687b      	ldr	r3, [r7, #4]
   26f24:	681b      	ldr	r3, [r3, #0]
   26f26:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   26f28:	687b      	ldr	r3, [r7, #4]
   26f2a:	795b      	ldrb	r3, [r3, #5]
   26f2c:	2201      	movs	r2, #1
   26f2e:	4053      	eors	r3, r2
   26f30:	b2db      	uxtb	r3, r3
   26f32:	2b00      	cmp	r3, #0
   26f34:	d00a      	beq.n	26f4c <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   26f36:	68fb      	ldr	r3, [r7, #12]
   26f38:	4a16      	ldr	r2, [pc, #88]	; (26f94 <rtc_calendar_get_time+0x7c>)
   26f3a:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   26f3c:	46c0      	nop			; (mov r8, r8)
   26f3e:	687b      	ldr	r3, [r7, #4]
   26f40:	0018      	movs	r0, r3
   26f42:	4b15      	ldr	r3, [pc, #84]	; (26f98 <rtc_calendar_get_time+0x80>)
   26f44:	4798      	blx	r3
   26f46:	1e03      	subs	r3, r0, #0
   26f48:	d1f9      	bne.n	26f3e <rtc_calendar_get_time+0x26>
   26f4a:	e016      	b.n	26f7a <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   26f4c:	68fb      	ldr	r3, [r7, #12]
   26f4e:	885b      	ldrh	r3, [r3, #2]
   26f50:	b29b      	uxth	r3, r3
   26f52:	001a      	movs	r2, r3
   26f54:	2380      	movs	r3, #128	; 0x80
   26f56:	01db      	lsls	r3, r3, #7
   26f58:	4013      	ands	r3, r2
   26f5a:	d10e      	bne.n	26f7a <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   26f5c:	68fb      	ldr	r3, [r7, #12]
   26f5e:	885b      	ldrh	r3, [r3, #2]
   26f60:	b29b      	uxth	r3, r3
   26f62:	4a0e      	ldr	r2, [pc, #56]	; (26f9c <rtc_calendar_get_time+0x84>)
   26f64:	4313      	orrs	r3, r2
   26f66:	b29a      	uxth	r2, r3
   26f68:	68fb      	ldr	r3, [r7, #12]
   26f6a:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   26f6c:	46c0      	nop			; (mov r8, r8)
   26f6e:	687b      	ldr	r3, [r7, #4]
   26f70:	0018      	movs	r0, r3
   26f72:	4b09      	ldr	r3, [pc, #36]	; (26f98 <rtc_calendar_get_time+0x80>)
   26f74:	4798      	blx	r3
   26f76:	1e03      	subs	r3, r0, #0
   26f78:	d1f9      	bne.n	26f6e <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   26f7a:	68fb      	ldr	r3, [r7, #12]
   26f7c:	691b      	ldr	r3, [r3, #16]
   26f7e:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   26f80:	683a      	ldr	r2, [r7, #0]
   26f82:	68b9      	ldr	r1, [r7, #8]
   26f84:	687b      	ldr	r3, [r7, #4]
   26f86:	0018      	movs	r0, r3
   26f88:	4b05      	ldr	r3, [pc, #20]	; (26fa0 <rtc_calendar_get_time+0x88>)
   26f8a:	4798      	blx	r3
}
   26f8c:	46c0      	nop			; (mov r8, r8)
   26f8e:	46bd      	mov	sp, r7
   26f90:	b004      	add	sp, #16
   26f92:	bd80      	pop	{r7, pc}
   26f94:	ffff8000 	.word	0xffff8000
   26f98:	00026b89 	.word	0x00026b89
   26f9c:	ffffc000 	.word	0xffffc000
   26fa0:	00026d1d 	.word	0x00026d1d

00026fa4 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   26fa4:	b580      	push	{r7, lr}
   26fa6:	b086      	sub	sp, #24
   26fa8:	af00      	add	r7, sp, #0
   26faa:	60f8      	str	r0, [r7, #12]
   26fac:	60b9      	str	r1, [r7, #8]
   26fae:	1dfb      	adds	r3, r7, #7
   26fb0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26fb2:	68fb      	ldr	r3, [r7, #12]
   26fb4:	681b      	ldr	r3, [r3, #0]
   26fb6:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   26fb8:	1dfb      	adds	r3, r7, #7
   26fba:	781b      	ldrb	r3, [r3, #0]
   26fbc:	2b01      	cmp	r3, #1
   26fbe:	d901      	bls.n	26fc4 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   26fc0:	2317      	movs	r3, #23
   26fc2:	e021      	b.n	27008 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   26fc4:	68ba      	ldr	r2, [r7, #8]
   26fc6:	68fb      	ldr	r3, [r7, #12]
   26fc8:	0011      	movs	r1, r2
   26fca:	0018      	movs	r0, r3
   26fcc:	4b10      	ldr	r3, [pc, #64]	; (27010 <rtc_calendar_set_alarm+0x6c>)
   26fce:	4798      	blx	r3
   26fd0:	0003      	movs	r3, r0
   26fd2:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   26fd4:	46c0      	nop			; (mov r8, r8)
   26fd6:	68fb      	ldr	r3, [r7, #12]
   26fd8:	0018      	movs	r0, r3
   26fda:	4b0e      	ldr	r3, [pc, #56]	; (27014 <rtc_calendar_set_alarm+0x70>)
   26fdc:	4798      	blx	r3
   26fde:	1e03      	subs	r3, r0, #0
   26fe0:	d1f9      	bne.n	26fd6 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   26fe2:	1dfb      	adds	r3, r7, #7
   26fe4:	781a      	ldrb	r2, [r3, #0]
   26fe6:	697b      	ldr	r3, [r7, #20]
   26fe8:	3203      	adds	r2, #3
   26fea:	00d2      	lsls	r2, r2, #3
   26fec:	6939      	ldr	r1, [r7, #16]
   26fee:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   26ff0:	1dfb      	adds	r3, r7, #7
   26ff2:	781b      	ldrb	r3, [r3, #0]
   26ff4:	68ba      	ldr	r2, [r7, #8]
   26ff6:	7a11      	ldrb	r1, [r2, #8]
   26ff8:	697a      	ldr	r2, [r7, #20]
   26ffa:	3303      	adds	r3, #3
   26ffc:	00db      	lsls	r3, r3, #3
   26ffe:	18d3      	adds	r3, r2, r3
   27000:	3304      	adds	r3, #4
   27002:	1c0a      	adds	r2, r1, #0
   27004:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   27006:	2300      	movs	r3, #0
}
   27008:	0018      	movs	r0, r3
   2700a:	46bd      	mov	sp, r7
   2700c:	b006      	add	sp, #24
   2700e:	bd80      	pop	{r7, pc}
   27010:	00026c95 	.word	0x00026c95
   27014:	00026b89 	.word	0x00026b89

00027018 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   27018:	b580      	push	{r7, lr}
   2701a:	b086      	sub	sp, #24
   2701c:	af00      	add	r7, sp, #0
   2701e:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   27020:	4b28      	ldr	r3, [pc, #160]	; (270c4 <_rtc_interrupt_handler+0xac>)
   27022:	687a      	ldr	r2, [r7, #4]
   27024:	0092      	lsls	r2, r2, #2
   27026:	58d3      	ldr	r3, [r2, r3]
   27028:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   2702a:	697b      	ldr	r3, [r7, #20]
   2702c:	681b      	ldr	r3, [r3, #0]
   2702e:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   27030:	230e      	movs	r3, #14
   27032:	18fb      	adds	r3, r7, r3
   27034:	697a      	ldr	r2, [r7, #20]
   27036:	8a52      	ldrh	r2, [r2, #18]
   27038:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   2703a:	697b      	ldr	r3, [r7, #20]
   2703c:	8a1b      	ldrh	r3, [r3, #16]
   2703e:	b29a      	uxth	r2, r3
   27040:	230e      	movs	r3, #14
   27042:	18fb      	adds	r3, r7, r3
   27044:	210e      	movs	r1, #14
   27046:	1879      	adds	r1, r7, r1
   27048:	8809      	ldrh	r1, [r1, #0]
   2704a:	400a      	ands	r2, r1
   2704c:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   2704e:	693b      	ldr	r3, [r7, #16]
   27050:	7a1b      	ldrb	r3, [r3, #8]
   27052:	b2da      	uxtb	r2, r3
   27054:	230c      	movs	r3, #12
   27056:	18fb      	adds	r3, r7, r3
   27058:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   2705a:	693b      	ldr	r3, [r7, #16]
   2705c:	79db      	ldrb	r3, [r3, #7]
   2705e:	b2db      	uxtb	r3, r3
   27060:	b29a      	uxth	r2, r3
   27062:	230c      	movs	r3, #12
   27064:	18fb      	adds	r3, r7, r3
   27066:	210c      	movs	r1, #12
   27068:	1879      	adds	r1, r7, r1
   2706a:	8809      	ldrh	r1, [r1, #0]
   2706c:	400a      	ands	r2, r1
   2706e:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   27070:	230c      	movs	r3, #12
   27072:	18fb      	adds	r3, r7, r3
   27074:	881b      	ldrh	r3, [r3, #0]
   27076:	2280      	movs	r2, #128	; 0x80
   27078:	4013      	ands	r3, r2
   2707a:	d00c      	beq.n	27096 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   2707c:	230e      	movs	r3, #14
   2707e:	18fb      	adds	r3, r7, r3
   27080:	881b      	ldrh	r3, [r3, #0]
   27082:	2202      	movs	r2, #2
   27084:	4013      	ands	r3, r2
   27086:	d002      	beq.n	2708e <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   27088:	697b      	ldr	r3, [r7, #20]
   2708a:	68db      	ldr	r3, [r3, #12]
   2708c:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   2708e:	693b      	ldr	r3, [r7, #16]
   27090:	2280      	movs	r2, #128	; 0x80
   27092:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   27094:	e011      	b.n	270ba <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   27096:	230c      	movs	r3, #12
   27098:	18fb      	adds	r3, r7, r3
   2709a:	881b      	ldrh	r3, [r3, #0]
   2709c:	2201      	movs	r2, #1
   2709e:	4013      	ands	r3, r2
   270a0:	d00b      	beq.n	270ba <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   270a2:	230e      	movs	r3, #14
   270a4:	18fb      	adds	r3, r7, r3
   270a6:	881b      	ldrh	r3, [r3, #0]
   270a8:	2201      	movs	r2, #1
   270aa:	4013      	ands	r3, r2
   270ac:	d002      	beq.n	270b4 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   270ae:	697b      	ldr	r3, [r7, #20]
   270b0:	689b      	ldr	r3, [r3, #8]
   270b2:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   270b4:	693b      	ldr	r3, [r7, #16]
   270b6:	2201      	movs	r2, #1
   270b8:	721a      	strb	r2, [r3, #8]
}
   270ba:	46c0      	nop			; (mov r8, r8)
   270bc:	46bd      	mov	sp, r7
   270be:	b006      	add	sp, #24
   270c0:	bd80      	pop	{r7, pc}
   270c2:	46c0      	nop			; (mov r8, r8)
   270c4:	20005a84 	.word	0x20005a84

000270c8 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   270c8:	b580      	push	{r7, lr}
   270ca:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   270cc:	2000      	movs	r0, #0
   270ce:	4b02      	ldr	r3, [pc, #8]	; (270d8 <RTC_Handler+0x10>)
   270d0:	4798      	blx	r3
}
   270d2:	46c0      	nop			; (mov r8, r8)
   270d4:	46bd      	mov	sp, r7
   270d6:	bd80      	pop	{r7, pc}
   270d8:	00027019 	.word	0x00027019

000270dc <system_gclk_chan_get_config_defaults>:
{
   270dc:	b580      	push	{r7, lr}
   270de:	b082      	sub	sp, #8
   270e0:	af00      	add	r7, sp, #0
   270e2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   270e4:	687b      	ldr	r3, [r7, #4]
   270e6:	2200      	movs	r2, #0
   270e8:	701a      	strb	r2, [r3, #0]
}
   270ea:	46c0      	nop			; (mov r8, r8)
   270ec:	46bd      	mov	sp, r7
   270ee:	b002      	add	sp, #8
   270f0:	bd80      	pop	{r7, pc}

000270f2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   270f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   270f4:	b08d      	sub	sp, #52	; 0x34
   270f6:	af00      	add	r7, sp, #0
   270f8:	60b8      	str	r0, [r7, #8]
   270fa:	60f9      	str	r1, [r7, #12]
   270fc:	603a      	str	r2, [r7, #0]
   270fe:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   27100:	2300      	movs	r3, #0
   27102:	2400      	movs	r4, #0
   27104:	623b      	str	r3, [r7, #32]
   27106:	627c      	str	r4, [r7, #36]	; 0x24
   27108:	2300      	movs	r3, #0
   2710a:	2400      	movs	r4, #0
   2710c:	61bb      	str	r3, [r7, #24]
   2710e:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   27110:	233f      	movs	r3, #63	; 0x3f
   27112:	62fb      	str	r3, [r7, #44]	; 0x2c
   27114:	e053      	b.n	271be <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   27116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27118:	3b20      	subs	r3, #32
   2711a:	2b00      	cmp	r3, #0
   2711c:	db04      	blt.n	27128 <long_division+0x36>
   2711e:	2201      	movs	r2, #1
   27120:	409a      	lsls	r2, r3
   27122:	0013      	movs	r3, r2
   27124:	617b      	str	r3, [r7, #20]
   27126:	e00b      	b.n	27140 <long_division+0x4e>
   27128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2712a:	2220      	movs	r2, #32
   2712c:	1ad3      	subs	r3, r2, r3
   2712e:	2201      	movs	r2, #1
   27130:	40da      	lsrs	r2, r3
   27132:	0013      	movs	r3, r2
   27134:	2100      	movs	r1, #0
   27136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   27138:	4091      	lsls	r1, r2
   2713a:	000a      	movs	r2, r1
   2713c:	4313      	orrs	r3, r2
   2713e:	617b      	str	r3, [r7, #20]
   27140:	2201      	movs	r2, #1
   27142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27144:	409a      	lsls	r2, r3
   27146:	0013      	movs	r3, r2
   27148:	613b      	str	r3, [r7, #16]

		r = r << 1;
   2714a:	69bb      	ldr	r3, [r7, #24]
   2714c:	69fc      	ldr	r4, [r7, #28]
   2714e:	18db      	adds	r3, r3, r3
   27150:	4164      	adcs	r4, r4
   27152:	61bb      	str	r3, [r7, #24]
   27154:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   27156:	68bb      	ldr	r3, [r7, #8]
   27158:	693a      	ldr	r2, [r7, #16]
   2715a:	401a      	ands	r2, r3
   2715c:	0015      	movs	r5, r2
   2715e:	68fb      	ldr	r3, [r7, #12]
   27160:	697a      	ldr	r2, [r7, #20]
   27162:	401a      	ands	r2, r3
   27164:	0016      	movs	r6, r2
   27166:	002b      	movs	r3, r5
   27168:	4333      	orrs	r3, r6
   2716a:	d007      	beq.n	2717c <long_division+0x8a>
			r |= 0x01;
   2716c:	69bb      	ldr	r3, [r7, #24]
   2716e:	2201      	movs	r2, #1
   27170:	4313      	orrs	r3, r2
   27172:	61bb      	str	r3, [r7, #24]
   27174:	69fb      	ldr	r3, [r7, #28]
   27176:	2200      	movs	r2, #0
   27178:	4313      	orrs	r3, r2
   2717a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   2717c:	687a      	ldr	r2, [r7, #4]
   2717e:	69fb      	ldr	r3, [r7, #28]
   27180:	429a      	cmp	r2, r3
   27182:	d819      	bhi.n	271b8 <long_division+0xc6>
   27184:	687a      	ldr	r2, [r7, #4]
   27186:	69fb      	ldr	r3, [r7, #28]
   27188:	429a      	cmp	r2, r3
   2718a:	d103      	bne.n	27194 <long_division+0xa2>
   2718c:	683a      	ldr	r2, [r7, #0]
   2718e:	69bb      	ldr	r3, [r7, #24]
   27190:	429a      	cmp	r2, r3
   27192:	d811      	bhi.n	271b8 <long_division+0xc6>
			r = r - d;
   27194:	69b9      	ldr	r1, [r7, #24]
   27196:	69fa      	ldr	r2, [r7, #28]
   27198:	683b      	ldr	r3, [r7, #0]
   2719a:	687c      	ldr	r4, [r7, #4]
   2719c:	1ac9      	subs	r1, r1, r3
   2719e:	41a2      	sbcs	r2, r4
   271a0:	000b      	movs	r3, r1
   271a2:	0014      	movs	r4, r2
   271a4:	61bb      	str	r3, [r7, #24]
   271a6:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   271a8:	6a3a      	ldr	r2, [r7, #32]
   271aa:	693b      	ldr	r3, [r7, #16]
   271ac:	4313      	orrs	r3, r2
   271ae:	623b      	str	r3, [r7, #32]
   271b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   271b2:	697b      	ldr	r3, [r7, #20]
   271b4:	4313      	orrs	r3, r2
   271b6:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   271b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   271ba:	3b01      	subs	r3, #1
   271bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   271be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   271c0:	2b00      	cmp	r3, #0
   271c2:	daa8      	bge.n	27116 <long_division+0x24>
		}
	}

	return q;
   271c4:	6a3b      	ldr	r3, [r7, #32]
   271c6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   271c8:	0018      	movs	r0, r3
   271ca:	0021      	movs	r1, r4
   271cc:	46bd      	mov	sp, r7
   271ce:	b00d      	add	sp, #52	; 0x34
   271d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000271d2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   271d2:	b580      	push	{r7, lr}
   271d4:	b086      	sub	sp, #24
   271d6:	af00      	add	r7, sp, #0
   271d8:	60f8      	str	r0, [r7, #12]
   271da:	60b9      	str	r1, [r7, #8]
   271dc:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   271de:	2316      	movs	r3, #22
   271e0:	18fb      	adds	r3, r7, r3
   271e2:	2200      	movs	r2, #0
   271e4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   271e6:	68bb      	ldr	r3, [r7, #8]
   271e8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   271ea:	68bb      	ldr	r3, [r7, #8]
   271ec:	085a      	lsrs	r2, r3, #1
   271ee:	68fb      	ldr	r3, [r7, #12]
   271f0:	429a      	cmp	r2, r3
   271f2:	d201      	bcs.n	271f8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   271f4:	2340      	movs	r3, #64	; 0x40
   271f6:	e026      	b.n	27246 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   271f8:	68bb      	ldr	r3, [r7, #8]
   271fa:	085b      	lsrs	r3, r3, #1
   271fc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   271fe:	e00a      	b.n	27216 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   27200:	693a      	ldr	r2, [r7, #16]
   27202:	68fb      	ldr	r3, [r7, #12]
   27204:	1ad3      	subs	r3, r2, r3
   27206:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   27208:	2316      	movs	r3, #22
   2720a:	18fb      	adds	r3, r7, r3
   2720c:	881a      	ldrh	r2, [r3, #0]
   2720e:	2316      	movs	r3, #22
   27210:	18fb      	adds	r3, r7, r3
   27212:	3201      	adds	r2, #1
   27214:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   27216:	693a      	ldr	r2, [r7, #16]
   27218:	68fb      	ldr	r3, [r7, #12]
   2721a:	429a      	cmp	r2, r3
   2721c:	d2f0      	bcs.n	27200 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   2721e:	2316      	movs	r3, #22
   27220:	18fb      	adds	r3, r7, r3
   27222:	2216      	movs	r2, #22
   27224:	18ba      	adds	r2, r7, r2
   27226:	8812      	ldrh	r2, [r2, #0]
   27228:	3a01      	subs	r2, #1
   2722a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   2722c:	2316      	movs	r3, #22
   2722e:	18fb      	adds	r3, r7, r3
   27230:	881b      	ldrh	r3, [r3, #0]
   27232:	2bff      	cmp	r3, #255	; 0xff
   27234:	d901      	bls.n	2723a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27236:	2340      	movs	r3, #64	; 0x40
   27238:	e005      	b.n	27246 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   2723a:	687b      	ldr	r3, [r7, #4]
   2723c:	2216      	movs	r2, #22
   2723e:	18ba      	adds	r2, r7, r2
   27240:	8812      	ldrh	r2, [r2, #0]
   27242:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   27244:	2300      	movs	r3, #0
	}
}
   27246:	0018      	movs	r0, r3
   27248:	46bd      	mov	sp, r7
   2724a:	b006      	add	sp, #24
   2724c:	bd80      	pop	{r7, pc}
	...

00027250 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   27250:	b5f0      	push	{r4, r5, r6, r7, lr}
   27252:	b0a1      	sub	sp, #132	; 0x84
   27254:	af00      	add	r7, sp, #0
   27256:	64f8      	str	r0, [r7, #76]	; 0x4c
   27258:	64b9      	str	r1, [r7, #72]	; 0x48
   2725a:	647a      	str	r2, [r7, #68]	; 0x44
   2725c:	2243      	movs	r2, #67	; 0x43
   2725e:	18ba      	adds	r2, r7, r2
   27260:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   27262:	2300      	movs	r3, #0
   27264:	2400      	movs	r4, #0
   27266:	673b      	str	r3, [r7, #112]	; 0x70
   27268:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   2726a:	2300      	movs	r3, #0
   2726c:	2400      	movs	r4, #0
   2726e:	66bb      	str	r3, [r7, #104]	; 0x68
   27270:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   27272:	2300      	movs	r3, #0
   27274:	2400      	movs	r4, #0
   27276:	67bb      	str	r3, [r7, #120]	; 0x78
   27278:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   2727a:	2300      	movs	r3, #0
   2727c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   2727e:	2358      	movs	r3, #88	; 0x58
   27280:	2240      	movs	r2, #64	; 0x40
   27282:	4694      	mov	ip, r2
   27284:	44bc      	add	ip, r7
   27286:	4463      	add	r3, ip
   27288:	781a      	ldrb	r2, [r3, #0]
   2728a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2728c:	435a      	muls	r2, r3
   2728e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27290:	429a      	cmp	r2, r3
   27292:	d901      	bls.n	27298 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27294:	2340      	movs	r3, #64	; 0x40
   27296:	e0b3      	b.n	27400 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   27298:	2343      	movs	r3, #67	; 0x43
   2729a:	18fb      	adds	r3, r7, r3
   2729c:	781b      	ldrb	r3, [r3, #0]
   2729e:	2b00      	cmp	r3, #0
   272a0:	d13d      	bne.n	2731e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   272a2:	2358      	movs	r3, #88	; 0x58
   272a4:	2240      	movs	r2, #64	; 0x40
   272a6:	4694      	mov	ip, r2
   272a8:	44bc      	add	ip, r7
   272aa:	4463      	add	r3, ip
   272ac:	781b      	ldrb	r3, [r3, #0]
   272ae:	b2db      	uxtb	r3, r3
   272b0:	613b      	str	r3, [r7, #16]
   272b2:	2300      	movs	r3, #0
   272b4:	617b      	str	r3, [r7, #20]
   272b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   272b8:	60bb      	str	r3, [r7, #8]
   272ba:	2300      	movs	r3, #0
   272bc:	60fb      	str	r3, [r7, #12]
   272be:	4c52      	ldr	r4, [pc, #328]	; (27408 <_sercom_get_async_baud_val+0x1b8>)
   272c0:	68ba      	ldr	r2, [r7, #8]
   272c2:	68fb      	ldr	r3, [r7, #12]
   272c4:	6938      	ldr	r0, [r7, #16]
   272c6:	6979      	ldr	r1, [r7, #20]
   272c8:	47a0      	blx	r4
   272ca:	0003      	movs	r3, r0
   272cc:	000c      	movs	r4, r1
   272ce:	001b      	movs	r3, r3
   272d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   272d2:	2300      	movs	r3, #0
   272d4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   272d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   272d8:	603b      	str	r3, [r7, #0]
   272da:	2300      	movs	r3, #0
   272dc:	607b      	str	r3, [r7, #4]
   272de:	6db8      	ldr	r0, [r7, #88]	; 0x58
   272e0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   272e2:	683a      	ldr	r2, [r7, #0]
   272e4:	687b      	ldr	r3, [r7, #4]
   272e6:	4c49      	ldr	r4, [pc, #292]	; (2740c <_sercom_get_async_baud_val+0x1bc>)
   272e8:	47a0      	blx	r4
   272ea:	0003      	movs	r3, r0
   272ec:	000c      	movs	r4, r1
   272ee:	673b      	str	r3, [r7, #112]	; 0x70
   272f0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   272f2:	2100      	movs	r1, #0
   272f4:	2201      	movs	r2, #1
   272f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   272f8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   272fa:	1ac9      	subs	r1, r1, r3
   272fc:	41a2      	sbcs	r2, r4
   272fe:	000b      	movs	r3, r1
   27300:	0014      	movs	r4, r2
   27302:	66bb      	str	r3, [r7, #104]	; 0x68
   27304:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   27306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27308:	0c1b      	lsrs	r3, r3, #16
   2730a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2730c:	0416      	lsls	r6, r2, #16
   2730e:	431e      	orrs	r6, r3
   27310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27312:	041d      	lsls	r5, r3, #16
   27314:	0033      	movs	r3, r6
   27316:	67bb      	str	r3, [r7, #120]	; 0x78
   27318:	2300      	movs	r3, #0
   2731a:	67fb      	str	r3, [r7, #124]	; 0x7c
   2731c:	e06a      	b.n	273f4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   2731e:	2343      	movs	r3, #67	; 0x43
   27320:	18fb      	adds	r3, r7, r3
   27322:	781b      	ldrb	r3, [r3, #0]
   27324:	2b01      	cmp	r3, #1
   27326:	d165      	bne.n	273f4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   27328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2732a:	633b      	str	r3, [r7, #48]	; 0x30
   2732c:	2300      	movs	r3, #0
   2732e:	637b      	str	r3, [r7, #52]	; 0x34
   27330:	2358      	movs	r3, #88	; 0x58
   27332:	2240      	movs	r2, #64	; 0x40
   27334:	4694      	mov	ip, r2
   27336:	44bc      	add	ip, r7
   27338:	4463      	add	r3, ip
   2733a:	781b      	ldrb	r3, [r3, #0]
   2733c:	b2db      	uxtb	r3, r3
   2733e:	62bb      	str	r3, [r7, #40]	; 0x28
   27340:	2300      	movs	r3, #0
   27342:	62fb      	str	r3, [r7, #44]	; 0x2c
   27344:	4c30      	ldr	r4, [pc, #192]	; (27408 <_sercom_get_async_baud_val+0x1b8>)
   27346:	6aba      	ldr	r2, [r7, #40]	; 0x28
   27348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2734a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   2734c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2734e:	47a0      	blx	r4
   27350:	0003      	movs	r3, r0
   27352:	000c      	movs	r4, r1
   27354:	65bb      	str	r3, [r7, #88]	; 0x58
   27356:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   27358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2735a:	623b      	str	r3, [r7, #32]
   2735c:	2300      	movs	r3, #0
   2735e:	627b      	str	r3, [r7, #36]	; 0x24
   27360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27362:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27364:	001a      	movs	r2, r3
   27366:	0023      	movs	r3, r4
   27368:	6a38      	ldr	r0, [r7, #32]
   2736a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2736c:	4c27      	ldr	r4, [pc, #156]	; (2740c <_sercom_get_async_baud_val+0x1bc>)
   2736e:	47a0      	blx	r4
   27370:	0003      	movs	r3, r0
   27372:	000c      	movs	r4, r1
   27374:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   27376:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   27378:	2380      	movs	r3, #128	; 0x80
   2737a:	019b      	lsls	r3, r3, #6
   2737c:	429a      	cmp	r2, r3
   2737e:	d901      	bls.n	27384 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27380:	2340      	movs	r3, #64	; 0x40
   27382:	e03d      	b.n	27400 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   27384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27386:	61bb      	str	r3, [r7, #24]
   27388:	2300      	movs	r3, #0
   2738a:	61fb      	str	r3, [r7, #28]
   2738c:	69b9      	ldr	r1, [r7, #24]
   2738e:	69fa      	ldr	r2, [r7, #28]
   27390:	000b      	movs	r3, r1
   27392:	0f5b      	lsrs	r3, r3, #29
   27394:	0010      	movs	r0, r2
   27396:	00c0      	lsls	r0, r0, #3
   27398:	63f8      	str	r0, [r7, #60]	; 0x3c
   2739a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   2739c:	4318      	orrs	r0, r3
   2739e:	63f8      	str	r0, [r7, #60]	; 0x3c
   273a0:	000b      	movs	r3, r1
   273a2:	00db      	lsls	r3, r3, #3
   273a4:	63bb      	str	r3, [r7, #56]	; 0x38
   273a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   273a8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   273aa:	001a      	movs	r2, r3
   273ac:	0023      	movs	r3, r4
   273ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   273b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   273b2:	4c16      	ldr	r4, [pc, #88]	; (2740c <_sercom_get_async_baud_val+0x1bc>)
   273b4:	47a0      	blx	r4
   273b6:	0003      	movs	r3, r0
   273b8:	000c      	movs	r4, r1
   273ba:	65bb      	str	r3, [r7, #88]	; 0x58
   273bc:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   273be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   273c0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   273c2:	b2d9      	uxtb	r1, r3
   273c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   273c6:	b2db      	uxtb	r3, r3
   273c8:	00db      	lsls	r3, r3, #3
   273ca:	b2da      	uxtb	r2, r3
   273cc:	2317      	movs	r3, #23
   273ce:	2040      	movs	r0, #64	; 0x40
   273d0:	4684      	mov	ip, r0
   273d2:	44bc      	add	ip, r7
   273d4:	4463      	add	r3, ip
   273d6:	1a8a      	subs	r2, r1, r2
   273d8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   273da:	2317      	movs	r3, #23
   273dc:	2240      	movs	r2, #64	; 0x40
   273de:	4694      	mov	ip, r2
   273e0:	44bc      	add	ip, r7
   273e2:	4463      	add	r3, ip
   273e4:	781b      	ldrb	r3, [r3, #0]
   273e6:	035b      	lsls	r3, r3, #13
   273e8:	001a      	movs	r2, r3
   273ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   273ec:	4313      	orrs	r3, r2
   273ee:	67bb      	str	r3, [r7, #120]	; 0x78
   273f0:	2300      	movs	r3, #0
   273f2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   273f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   273f6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   273f8:	b29a      	uxth	r2, r3
   273fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   273fc:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   273fe:	2300      	movs	r3, #0
}
   27400:	0018      	movs	r0, r3
   27402:	46bd      	mov	sp, r7
   27404:	b021      	add	sp, #132	; 0x84
   27406:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27408:	00032d71 	.word	0x00032d71
   2740c:	000270f3 	.word	0x000270f3

00027410 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   27410:	b580      	push	{r7, lr}
   27412:	b084      	sub	sp, #16
   27414:	af00      	add	r7, sp, #0
   27416:	0002      	movs	r2, r0
   27418:	1dfb      	adds	r3, r7, #7
   2741a:	701a      	strb	r2, [r3, #0]
   2741c:	1dbb      	adds	r3, r7, #6
   2741e:	1c0a      	adds	r2, r1, #0
   27420:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   27422:	4b1a      	ldr	r3, [pc, #104]	; (2748c <sercom_set_gclk_generator+0x7c>)
   27424:	781b      	ldrb	r3, [r3, #0]
   27426:	2201      	movs	r2, #1
   27428:	4053      	eors	r3, r2
   2742a:	b2db      	uxtb	r3, r3
   2742c:	2b00      	cmp	r3, #0
   2742e:	d103      	bne.n	27438 <sercom_set_gclk_generator+0x28>
   27430:	1dbb      	adds	r3, r7, #6
   27432:	781b      	ldrb	r3, [r3, #0]
   27434:	2b00      	cmp	r3, #0
   27436:	d01b      	beq.n	27470 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27438:	230c      	movs	r3, #12
   2743a:	18fb      	adds	r3, r7, r3
   2743c:	0018      	movs	r0, r3
   2743e:	4b14      	ldr	r3, [pc, #80]	; (27490 <sercom_set_gclk_generator+0x80>)
   27440:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   27442:	230c      	movs	r3, #12
   27444:	18fb      	adds	r3, r7, r3
   27446:	1dfa      	adds	r2, r7, #7
   27448:	7812      	ldrb	r2, [r2, #0]
   2744a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   2744c:	230c      	movs	r3, #12
   2744e:	18fb      	adds	r3, r7, r3
   27450:	0019      	movs	r1, r3
   27452:	2013      	movs	r0, #19
   27454:	4b0f      	ldr	r3, [pc, #60]	; (27494 <sercom_set_gclk_generator+0x84>)
   27456:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   27458:	2013      	movs	r0, #19
   2745a:	4b0f      	ldr	r3, [pc, #60]	; (27498 <sercom_set_gclk_generator+0x88>)
   2745c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   2745e:	4b0b      	ldr	r3, [pc, #44]	; (2748c <sercom_set_gclk_generator+0x7c>)
   27460:	1dfa      	adds	r2, r7, #7
   27462:	7812      	ldrb	r2, [r2, #0]
   27464:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   27466:	4b09      	ldr	r3, [pc, #36]	; (2748c <sercom_set_gclk_generator+0x7c>)
   27468:	2201      	movs	r2, #1
   2746a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   2746c:	2300      	movs	r3, #0
   2746e:	e008      	b.n	27482 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   27470:	4b06      	ldr	r3, [pc, #24]	; (2748c <sercom_set_gclk_generator+0x7c>)
   27472:	785b      	ldrb	r3, [r3, #1]
   27474:	1dfa      	adds	r2, r7, #7
   27476:	7812      	ldrb	r2, [r2, #0]
   27478:	429a      	cmp	r2, r3
   2747a:	d101      	bne.n	27480 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   2747c:	2300      	movs	r3, #0
   2747e:	e000      	b.n	27482 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   27480:	231d      	movs	r3, #29
}
   27482:	0018      	movs	r0, r3
   27484:	46bd      	mov	sp, r7
   27486:	b004      	add	sp, #16
   27488:	bd80      	pop	{r7, pc}
   2748a:	46c0      	nop			; (mov r8, r8)
   2748c:	20004140 	.word	0x20004140
   27490:	000270dd 	.word	0x000270dd
   27494:	00029ee9 	.word	0x00029ee9
   27498:	00029f2d 	.word	0x00029f2d

0002749c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   2749c:	b580      	push	{r7, lr}
   2749e:	b082      	sub	sp, #8
   274a0:	af00      	add	r7, sp, #0
   274a2:	6078      	str	r0, [r7, #4]
   274a4:	000a      	movs	r2, r1
   274a6:	1cfb      	adds	r3, r7, #3
   274a8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   274aa:	687b      	ldr	r3, [r7, #4]
   274ac:	4a4d      	ldr	r2, [pc, #308]	; (275e4 <_sercom_get_default_pad+0x148>)
   274ae:	4293      	cmp	r3, r2
   274b0:	d03f      	beq.n	27532 <_sercom_get_default_pad+0x96>
   274b2:	4a4c      	ldr	r2, [pc, #304]	; (275e4 <_sercom_get_default_pad+0x148>)
   274b4:	4293      	cmp	r3, r2
   274b6:	d806      	bhi.n	274c6 <_sercom_get_default_pad+0x2a>
   274b8:	4a4b      	ldr	r2, [pc, #300]	; (275e8 <_sercom_get_default_pad+0x14c>)
   274ba:	4293      	cmp	r3, r2
   274bc:	d00f      	beq.n	274de <_sercom_get_default_pad+0x42>
   274be:	4a4b      	ldr	r2, [pc, #300]	; (275ec <_sercom_get_default_pad+0x150>)
   274c0:	4293      	cmp	r3, r2
   274c2:	d021      	beq.n	27508 <_sercom_get_default_pad+0x6c>
   274c4:	e089      	b.n	275da <_sercom_get_default_pad+0x13e>
   274c6:	4a4a      	ldr	r2, [pc, #296]	; (275f0 <_sercom_get_default_pad+0x154>)
   274c8:	4293      	cmp	r3, r2
   274ca:	d100      	bne.n	274ce <_sercom_get_default_pad+0x32>
   274cc:	e05b      	b.n	27586 <_sercom_get_default_pad+0xea>
   274ce:	4a49      	ldr	r2, [pc, #292]	; (275f4 <_sercom_get_default_pad+0x158>)
   274d0:	4293      	cmp	r3, r2
   274d2:	d100      	bne.n	274d6 <_sercom_get_default_pad+0x3a>
   274d4:	e06c      	b.n	275b0 <_sercom_get_default_pad+0x114>
   274d6:	4a48      	ldr	r2, [pc, #288]	; (275f8 <_sercom_get_default_pad+0x15c>)
   274d8:	4293      	cmp	r3, r2
   274da:	d03f      	beq.n	2755c <_sercom_get_default_pad+0xc0>
   274dc:	e07d      	b.n	275da <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   274de:	1cfb      	adds	r3, r7, #3
   274e0:	781b      	ldrb	r3, [r3, #0]
   274e2:	2b01      	cmp	r3, #1
   274e4:	d00a      	beq.n	274fc <_sercom_get_default_pad+0x60>
   274e6:	dc02      	bgt.n	274ee <_sercom_get_default_pad+0x52>
   274e8:	2b00      	cmp	r3, #0
   274ea:	d005      	beq.n	274f8 <_sercom_get_default_pad+0x5c>
   274ec:	e075      	b.n	275da <_sercom_get_default_pad+0x13e>
   274ee:	2b02      	cmp	r3, #2
   274f0:	d006      	beq.n	27500 <_sercom_get_default_pad+0x64>
   274f2:	2b03      	cmp	r3, #3
   274f4:	d006      	beq.n	27504 <_sercom_get_default_pad+0x68>
   274f6:	e070      	b.n	275da <_sercom_get_default_pad+0x13e>
   274f8:	4b40      	ldr	r3, [pc, #256]	; (275fc <_sercom_get_default_pad+0x160>)
   274fa:	e06f      	b.n	275dc <_sercom_get_default_pad+0x140>
   274fc:	4b40      	ldr	r3, [pc, #256]	; (27600 <_sercom_get_default_pad+0x164>)
   274fe:	e06d      	b.n	275dc <_sercom_get_default_pad+0x140>
   27500:	4b40      	ldr	r3, [pc, #256]	; (27604 <_sercom_get_default_pad+0x168>)
   27502:	e06b      	b.n	275dc <_sercom_get_default_pad+0x140>
   27504:	4b40      	ldr	r3, [pc, #256]	; (27608 <_sercom_get_default_pad+0x16c>)
   27506:	e069      	b.n	275dc <_sercom_get_default_pad+0x140>
   27508:	1cfb      	adds	r3, r7, #3
   2750a:	781b      	ldrb	r3, [r3, #0]
   2750c:	2b01      	cmp	r3, #1
   2750e:	d00a      	beq.n	27526 <_sercom_get_default_pad+0x8a>
   27510:	dc02      	bgt.n	27518 <_sercom_get_default_pad+0x7c>
   27512:	2b00      	cmp	r3, #0
   27514:	d005      	beq.n	27522 <_sercom_get_default_pad+0x86>
   27516:	e060      	b.n	275da <_sercom_get_default_pad+0x13e>
   27518:	2b02      	cmp	r3, #2
   2751a:	d006      	beq.n	2752a <_sercom_get_default_pad+0x8e>
   2751c:	2b03      	cmp	r3, #3
   2751e:	d006      	beq.n	2752e <_sercom_get_default_pad+0x92>
   27520:	e05b      	b.n	275da <_sercom_get_default_pad+0x13e>
   27522:	2303      	movs	r3, #3
   27524:	e05a      	b.n	275dc <_sercom_get_default_pad+0x140>
   27526:	4b39      	ldr	r3, [pc, #228]	; (2760c <_sercom_get_default_pad+0x170>)
   27528:	e058      	b.n	275dc <_sercom_get_default_pad+0x140>
   2752a:	4b39      	ldr	r3, [pc, #228]	; (27610 <_sercom_get_default_pad+0x174>)
   2752c:	e056      	b.n	275dc <_sercom_get_default_pad+0x140>
   2752e:	4b39      	ldr	r3, [pc, #228]	; (27614 <_sercom_get_default_pad+0x178>)
   27530:	e054      	b.n	275dc <_sercom_get_default_pad+0x140>
   27532:	1cfb      	adds	r3, r7, #3
   27534:	781b      	ldrb	r3, [r3, #0]
   27536:	2b01      	cmp	r3, #1
   27538:	d00a      	beq.n	27550 <_sercom_get_default_pad+0xb4>
   2753a:	dc02      	bgt.n	27542 <_sercom_get_default_pad+0xa6>
   2753c:	2b00      	cmp	r3, #0
   2753e:	d005      	beq.n	2754c <_sercom_get_default_pad+0xb0>
   27540:	e04b      	b.n	275da <_sercom_get_default_pad+0x13e>
   27542:	2b02      	cmp	r3, #2
   27544:	d006      	beq.n	27554 <_sercom_get_default_pad+0xb8>
   27546:	2b03      	cmp	r3, #3
   27548:	d006      	beq.n	27558 <_sercom_get_default_pad+0xbc>
   2754a:	e046      	b.n	275da <_sercom_get_default_pad+0x13e>
   2754c:	4b32      	ldr	r3, [pc, #200]	; (27618 <_sercom_get_default_pad+0x17c>)
   2754e:	e045      	b.n	275dc <_sercom_get_default_pad+0x140>
   27550:	4b32      	ldr	r3, [pc, #200]	; (2761c <_sercom_get_default_pad+0x180>)
   27552:	e043      	b.n	275dc <_sercom_get_default_pad+0x140>
   27554:	4b32      	ldr	r3, [pc, #200]	; (27620 <_sercom_get_default_pad+0x184>)
   27556:	e041      	b.n	275dc <_sercom_get_default_pad+0x140>
   27558:	4b32      	ldr	r3, [pc, #200]	; (27624 <_sercom_get_default_pad+0x188>)
   2755a:	e03f      	b.n	275dc <_sercom_get_default_pad+0x140>
   2755c:	1cfb      	adds	r3, r7, #3
   2755e:	781b      	ldrb	r3, [r3, #0]
   27560:	2b01      	cmp	r3, #1
   27562:	d00a      	beq.n	2757a <_sercom_get_default_pad+0xde>
   27564:	dc02      	bgt.n	2756c <_sercom_get_default_pad+0xd0>
   27566:	2b00      	cmp	r3, #0
   27568:	d005      	beq.n	27576 <_sercom_get_default_pad+0xda>
   2756a:	e036      	b.n	275da <_sercom_get_default_pad+0x13e>
   2756c:	2b02      	cmp	r3, #2
   2756e:	d006      	beq.n	2757e <_sercom_get_default_pad+0xe2>
   27570:	2b03      	cmp	r3, #3
   27572:	d006      	beq.n	27582 <_sercom_get_default_pad+0xe6>
   27574:	e031      	b.n	275da <_sercom_get_default_pad+0x13e>
   27576:	4b2c      	ldr	r3, [pc, #176]	; (27628 <_sercom_get_default_pad+0x18c>)
   27578:	e030      	b.n	275dc <_sercom_get_default_pad+0x140>
   2757a:	4b2c      	ldr	r3, [pc, #176]	; (2762c <_sercom_get_default_pad+0x190>)
   2757c:	e02e      	b.n	275dc <_sercom_get_default_pad+0x140>
   2757e:	4b2c      	ldr	r3, [pc, #176]	; (27630 <_sercom_get_default_pad+0x194>)
   27580:	e02c      	b.n	275dc <_sercom_get_default_pad+0x140>
   27582:	4b2c      	ldr	r3, [pc, #176]	; (27634 <_sercom_get_default_pad+0x198>)
   27584:	e02a      	b.n	275dc <_sercom_get_default_pad+0x140>
   27586:	1cfb      	adds	r3, r7, #3
   27588:	781b      	ldrb	r3, [r3, #0]
   2758a:	2b01      	cmp	r3, #1
   2758c:	d00a      	beq.n	275a4 <_sercom_get_default_pad+0x108>
   2758e:	dc02      	bgt.n	27596 <_sercom_get_default_pad+0xfa>
   27590:	2b00      	cmp	r3, #0
   27592:	d005      	beq.n	275a0 <_sercom_get_default_pad+0x104>
   27594:	e021      	b.n	275da <_sercom_get_default_pad+0x13e>
   27596:	2b02      	cmp	r3, #2
   27598:	d006      	beq.n	275a8 <_sercom_get_default_pad+0x10c>
   2759a:	2b03      	cmp	r3, #3
   2759c:	d006      	beq.n	275ac <_sercom_get_default_pad+0x110>
   2759e:	e01c      	b.n	275da <_sercom_get_default_pad+0x13e>
   275a0:	4b25      	ldr	r3, [pc, #148]	; (27638 <_sercom_get_default_pad+0x19c>)
   275a2:	e01b      	b.n	275dc <_sercom_get_default_pad+0x140>
   275a4:	4b25      	ldr	r3, [pc, #148]	; (2763c <_sercom_get_default_pad+0x1a0>)
   275a6:	e019      	b.n	275dc <_sercom_get_default_pad+0x140>
   275a8:	4b25      	ldr	r3, [pc, #148]	; (27640 <_sercom_get_default_pad+0x1a4>)
   275aa:	e017      	b.n	275dc <_sercom_get_default_pad+0x140>
   275ac:	4b25      	ldr	r3, [pc, #148]	; (27644 <_sercom_get_default_pad+0x1a8>)
   275ae:	e015      	b.n	275dc <_sercom_get_default_pad+0x140>
   275b0:	1cfb      	adds	r3, r7, #3
   275b2:	781b      	ldrb	r3, [r3, #0]
   275b4:	2b01      	cmp	r3, #1
   275b6:	d00a      	beq.n	275ce <_sercom_get_default_pad+0x132>
   275b8:	dc02      	bgt.n	275c0 <_sercom_get_default_pad+0x124>
   275ba:	2b00      	cmp	r3, #0
   275bc:	d005      	beq.n	275ca <_sercom_get_default_pad+0x12e>
   275be:	e00c      	b.n	275da <_sercom_get_default_pad+0x13e>
   275c0:	2b02      	cmp	r3, #2
   275c2:	d006      	beq.n	275d2 <_sercom_get_default_pad+0x136>
   275c4:	2b03      	cmp	r3, #3
   275c6:	d006      	beq.n	275d6 <_sercom_get_default_pad+0x13a>
   275c8:	e007      	b.n	275da <_sercom_get_default_pad+0x13e>
   275ca:	4b1f      	ldr	r3, [pc, #124]	; (27648 <_sercom_get_default_pad+0x1ac>)
   275cc:	e006      	b.n	275dc <_sercom_get_default_pad+0x140>
   275ce:	4b1f      	ldr	r3, [pc, #124]	; (2764c <_sercom_get_default_pad+0x1b0>)
   275d0:	e004      	b.n	275dc <_sercom_get_default_pad+0x140>
   275d2:	4b1f      	ldr	r3, [pc, #124]	; (27650 <_sercom_get_default_pad+0x1b4>)
   275d4:	e002      	b.n	275dc <_sercom_get_default_pad+0x140>
   275d6:	4b1f      	ldr	r3, [pc, #124]	; (27654 <_sercom_get_default_pad+0x1b8>)
   275d8:	e000      	b.n	275dc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   275da:	2300      	movs	r3, #0
}
   275dc:	0018      	movs	r0, r3
   275de:	46bd      	mov	sp, r7
   275e0:	b002      	add	sp, #8
   275e2:	bd80      	pop	{r7, pc}
   275e4:	42001000 	.word	0x42001000
   275e8:	42000800 	.word	0x42000800
   275ec:	42000c00 	.word	0x42000c00
   275f0:	42001800 	.word	0x42001800
   275f4:	42001c00 	.word	0x42001c00
   275f8:	42001400 	.word	0x42001400
   275fc:	00040003 	.word	0x00040003
   27600:	00050003 	.word	0x00050003
   27604:	00060003 	.word	0x00060003
   27608:	00070003 	.word	0x00070003
   2760c:	00010003 	.word	0x00010003
   27610:	001e0003 	.word	0x001e0003
   27614:	001f0003 	.word	0x001f0003
   27618:	00080003 	.word	0x00080003
   2761c:	00090003 	.word	0x00090003
   27620:	000a0003 	.word	0x000a0003
   27624:	000b0003 	.word	0x000b0003
   27628:	00100003 	.word	0x00100003
   2762c:	00110003 	.word	0x00110003
   27630:	00120003 	.word	0x00120003
   27634:	00130003 	.word	0x00130003
   27638:	000c0003 	.word	0x000c0003
   2763c:	000d0003 	.word	0x000d0003
   27640:	000e0003 	.word	0x000e0003
   27644:	000f0003 	.word	0x000f0003
   27648:	00160003 	.word	0x00160003
   2764c:	00170003 	.word	0x00170003
   27650:	00180003 	.word	0x00180003
   27654:	00190003 	.word	0x00190003

00027658 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   27658:	b590      	push	{r4, r7, lr}
   2765a:	b08b      	sub	sp, #44	; 0x2c
   2765c:	af00      	add	r7, sp, #0
   2765e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   27660:	230c      	movs	r3, #12
   27662:	18fb      	adds	r3, r7, r3
   27664:	4a0f      	ldr	r2, [pc, #60]	; (276a4 <_sercom_get_sercom_inst_index+0x4c>)
   27666:	ca13      	ldmia	r2!, {r0, r1, r4}
   27668:	c313      	stmia	r3!, {r0, r1, r4}
   2766a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2766c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2766e:	2300      	movs	r3, #0
   27670:	627b      	str	r3, [r7, #36]	; 0x24
   27672:	e00e      	b.n	27692 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   27674:	230c      	movs	r3, #12
   27676:	18fb      	adds	r3, r7, r3
   27678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2767a:	0092      	lsls	r2, r2, #2
   2767c:	58d3      	ldr	r3, [r2, r3]
   2767e:	001a      	movs	r2, r3
   27680:	687b      	ldr	r3, [r7, #4]
   27682:	429a      	cmp	r2, r3
   27684:	d102      	bne.n	2768c <_sercom_get_sercom_inst_index+0x34>
			return i;
   27686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27688:	b2db      	uxtb	r3, r3
   2768a:	e006      	b.n	2769a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2768e:	3301      	adds	r3, #1
   27690:	627b      	str	r3, [r7, #36]	; 0x24
   27692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27694:	2b05      	cmp	r3, #5
   27696:	d9ed      	bls.n	27674 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   27698:	2300      	movs	r3, #0
}
   2769a:	0018      	movs	r0, r3
   2769c:	46bd      	mov	sp, r7
   2769e:	b00b      	add	sp, #44	; 0x2c
   276a0:	bd90      	pop	{r4, r7, pc}
   276a2:	46c0      	nop			; (mov r8, r8)
   276a4:	000395f4 	.word	0x000395f4

000276a8 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   276a8:	b580      	push	{r7, lr}
   276aa:	b082      	sub	sp, #8
   276ac:	af00      	add	r7, sp, #0
   276ae:	0002      	movs	r2, r0
   276b0:	1dfb      	adds	r3, r7, #7
   276b2:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   276b4:	46c0      	nop			; (mov r8, r8)
   276b6:	46bd      	mov	sp, r7
   276b8:	b002      	add	sp, #8
   276ba:	bd80      	pop	{r7, pc}

000276bc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   276bc:	b580      	push	{r7, lr}
   276be:	b084      	sub	sp, #16
   276c0:	af00      	add	r7, sp, #0
   276c2:	0002      	movs	r2, r0
   276c4:	6039      	str	r1, [r7, #0]
   276c6:	1dfb      	adds	r3, r7, #7
   276c8:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   276ca:	4b13      	ldr	r3, [pc, #76]	; (27718 <_sercom_set_handler+0x5c>)
   276cc:	781b      	ldrb	r3, [r3, #0]
   276ce:	2201      	movs	r2, #1
   276d0:	4053      	eors	r3, r2
   276d2:	b2db      	uxtb	r3, r3
   276d4:	2b00      	cmp	r3, #0
   276d6:	d015      	beq.n	27704 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   276d8:	2300      	movs	r3, #0
   276da:	60fb      	str	r3, [r7, #12]
   276dc:	e00c      	b.n	276f8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   276de:	4b0f      	ldr	r3, [pc, #60]	; (2771c <_sercom_set_handler+0x60>)
   276e0:	68fa      	ldr	r2, [r7, #12]
   276e2:	0092      	lsls	r2, r2, #2
   276e4:	490e      	ldr	r1, [pc, #56]	; (27720 <_sercom_set_handler+0x64>)
   276e6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   276e8:	4b0e      	ldr	r3, [pc, #56]	; (27724 <_sercom_set_handler+0x68>)
   276ea:	68fa      	ldr	r2, [r7, #12]
   276ec:	0092      	lsls	r2, r2, #2
   276ee:	2100      	movs	r1, #0
   276f0:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   276f2:	68fb      	ldr	r3, [r7, #12]
   276f4:	3301      	adds	r3, #1
   276f6:	60fb      	str	r3, [r7, #12]
   276f8:	68fb      	ldr	r3, [r7, #12]
   276fa:	2b05      	cmp	r3, #5
   276fc:	d9ef      	bls.n	276de <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   276fe:	4b06      	ldr	r3, [pc, #24]	; (27718 <_sercom_set_handler+0x5c>)
   27700:	2201      	movs	r2, #1
   27702:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   27704:	1dfb      	adds	r3, r7, #7
   27706:	781a      	ldrb	r2, [r3, #0]
   27708:	4b04      	ldr	r3, [pc, #16]	; (2771c <_sercom_set_handler+0x60>)
   2770a:	0092      	lsls	r2, r2, #2
   2770c:	6839      	ldr	r1, [r7, #0]
   2770e:	50d1      	str	r1, [r2, r3]
}
   27710:	46c0      	nop			; (mov r8, r8)
   27712:	46bd      	mov	sp, r7
   27714:	b004      	add	sp, #16
   27716:	bd80      	pop	{r7, pc}
   27718:	20004142 	.word	0x20004142
   2771c:	20004144 	.word	0x20004144
   27720:	000276a9 	.word	0x000276a9
   27724:	20005a88 	.word	0x20005a88

00027728 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   27728:	b590      	push	{r4, r7, lr}
   2772a:	b085      	sub	sp, #20
   2772c:	af00      	add	r7, sp, #0
   2772e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   27730:	2308      	movs	r3, #8
   27732:	18fb      	adds	r3, r7, r3
   27734:	4a0b      	ldr	r2, [pc, #44]	; (27764 <_sercom_get_interrupt_vector+0x3c>)
   27736:	6811      	ldr	r1, [r2, #0]
   27738:	6019      	str	r1, [r3, #0]
   2773a:	8892      	ldrh	r2, [r2, #4]
   2773c:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   2773e:	230f      	movs	r3, #15
   27740:	18fc      	adds	r4, r7, r3
   27742:	687b      	ldr	r3, [r7, #4]
   27744:	0018      	movs	r0, r3
   27746:	4b08      	ldr	r3, [pc, #32]	; (27768 <_sercom_get_interrupt_vector+0x40>)
   27748:	4798      	blx	r3
   2774a:	0003      	movs	r3, r0
   2774c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   2774e:	230f      	movs	r3, #15
   27750:	18fb      	adds	r3, r7, r3
   27752:	781b      	ldrb	r3, [r3, #0]
   27754:	2208      	movs	r2, #8
   27756:	18ba      	adds	r2, r7, r2
   27758:	5cd3      	ldrb	r3, [r2, r3]
   2775a:	b25b      	sxtb	r3, r3
}
   2775c:	0018      	movs	r0, r3
   2775e:	46bd      	mov	sp, r7
   27760:	b005      	add	sp, #20
   27762:	bd90      	pop	{r4, r7, pc}
   27764:	0003960c 	.word	0x0003960c
   27768:	00027659 	.word	0x00027659

0002776c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   2776c:	b580      	push	{r7, lr}
   2776e:	af00      	add	r7, sp, #0
   27770:	4b03      	ldr	r3, [pc, #12]	; (27780 <SERCOM0_Handler+0x14>)
   27772:	681b      	ldr	r3, [r3, #0]
   27774:	2000      	movs	r0, #0
   27776:	4798      	blx	r3
   27778:	46c0      	nop			; (mov r8, r8)
   2777a:	46bd      	mov	sp, r7
   2777c:	bd80      	pop	{r7, pc}
   2777e:	46c0      	nop			; (mov r8, r8)
   27780:	20004144 	.word	0x20004144

00027784 <SERCOM1_Handler>:
   27784:	b580      	push	{r7, lr}
   27786:	af00      	add	r7, sp, #0
   27788:	4b03      	ldr	r3, [pc, #12]	; (27798 <SERCOM1_Handler+0x14>)
   2778a:	685b      	ldr	r3, [r3, #4]
   2778c:	2001      	movs	r0, #1
   2778e:	4798      	blx	r3
   27790:	46c0      	nop			; (mov r8, r8)
   27792:	46bd      	mov	sp, r7
   27794:	bd80      	pop	{r7, pc}
   27796:	46c0      	nop			; (mov r8, r8)
   27798:	20004144 	.word	0x20004144

0002779c <SERCOM2_Handler>:
   2779c:	b580      	push	{r7, lr}
   2779e:	af00      	add	r7, sp, #0
   277a0:	4b03      	ldr	r3, [pc, #12]	; (277b0 <SERCOM2_Handler+0x14>)
   277a2:	689b      	ldr	r3, [r3, #8]
   277a4:	2002      	movs	r0, #2
   277a6:	4798      	blx	r3
   277a8:	46c0      	nop			; (mov r8, r8)
   277aa:	46bd      	mov	sp, r7
   277ac:	bd80      	pop	{r7, pc}
   277ae:	46c0      	nop			; (mov r8, r8)
   277b0:	20004144 	.word	0x20004144

000277b4 <SERCOM3_Handler>:
   277b4:	b580      	push	{r7, lr}
   277b6:	af00      	add	r7, sp, #0
   277b8:	4b03      	ldr	r3, [pc, #12]	; (277c8 <SERCOM3_Handler+0x14>)
   277ba:	68db      	ldr	r3, [r3, #12]
   277bc:	2003      	movs	r0, #3
   277be:	4798      	blx	r3
   277c0:	46c0      	nop			; (mov r8, r8)
   277c2:	46bd      	mov	sp, r7
   277c4:	bd80      	pop	{r7, pc}
   277c6:	46c0      	nop			; (mov r8, r8)
   277c8:	20004144 	.word	0x20004144

000277cc <SERCOM4_Handler>:
   277cc:	b580      	push	{r7, lr}
   277ce:	af00      	add	r7, sp, #0
   277d0:	4b03      	ldr	r3, [pc, #12]	; (277e0 <SERCOM4_Handler+0x14>)
   277d2:	691b      	ldr	r3, [r3, #16]
   277d4:	2004      	movs	r0, #4
   277d6:	4798      	blx	r3
   277d8:	46c0      	nop			; (mov r8, r8)
   277da:	46bd      	mov	sp, r7
   277dc:	bd80      	pop	{r7, pc}
   277de:	46c0      	nop			; (mov r8, r8)
   277e0:	20004144 	.word	0x20004144

000277e4 <SERCOM5_Handler>:
   277e4:	b580      	push	{r7, lr}
   277e6:	af00      	add	r7, sp, #0
   277e8:	4b03      	ldr	r3, [pc, #12]	; (277f8 <SERCOM5_Handler+0x14>)
   277ea:	695b      	ldr	r3, [r3, #20]
   277ec:	2005      	movs	r0, #5
   277ee:	4798      	blx	r3
   277f0:	46c0      	nop			; (mov r8, r8)
   277f2:	46bd      	mov	sp, r7
   277f4:	bd80      	pop	{r7, pc}
   277f6:	46c0      	nop			; (mov r8, r8)
   277f8:	20004144 	.word	0x20004144

000277fc <system_pinmux_get_config_defaults>:
{
   277fc:	b580      	push	{r7, lr}
   277fe:	b082      	sub	sp, #8
   27800:	af00      	add	r7, sp, #0
   27802:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27804:	687b      	ldr	r3, [r7, #4]
   27806:	2280      	movs	r2, #128	; 0x80
   27808:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2780a:	687b      	ldr	r3, [r7, #4]
   2780c:	2200      	movs	r2, #0
   2780e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27810:	687b      	ldr	r3, [r7, #4]
   27812:	2201      	movs	r2, #1
   27814:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27816:	687b      	ldr	r3, [r7, #4]
   27818:	2200      	movs	r2, #0
   2781a:	70da      	strb	r2, [r3, #3]
}
   2781c:	46c0      	nop			; (mov r8, r8)
   2781e:	46bd      	mov	sp, r7
   27820:	b002      	add	sp, #8
   27822:	bd80      	pop	{r7, pc}

00027824 <system_pinmux_get_group_from_gpio_pin>:
{
   27824:	b580      	push	{r7, lr}
   27826:	b084      	sub	sp, #16
   27828:	af00      	add	r7, sp, #0
   2782a:	0002      	movs	r2, r0
   2782c:	1dfb      	adds	r3, r7, #7
   2782e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   27830:	230f      	movs	r3, #15
   27832:	18fb      	adds	r3, r7, r3
   27834:	1dfa      	adds	r2, r7, #7
   27836:	7812      	ldrb	r2, [r2, #0]
   27838:	09d2      	lsrs	r2, r2, #7
   2783a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2783c:	230e      	movs	r3, #14
   2783e:	18fb      	adds	r3, r7, r3
   27840:	1dfa      	adds	r2, r7, #7
   27842:	7812      	ldrb	r2, [r2, #0]
   27844:	0952      	lsrs	r2, r2, #5
   27846:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   27848:	4b0d      	ldr	r3, [pc, #52]	; (27880 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2784a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2784c:	230f      	movs	r3, #15
   2784e:	18fb      	adds	r3, r7, r3
   27850:	781b      	ldrb	r3, [r3, #0]
   27852:	2b00      	cmp	r3, #0
   27854:	d10f      	bne.n	27876 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   27856:	230f      	movs	r3, #15
   27858:	18fb      	adds	r3, r7, r3
   2785a:	781b      	ldrb	r3, [r3, #0]
   2785c:	009b      	lsls	r3, r3, #2
   2785e:	2210      	movs	r2, #16
   27860:	4694      	mov	ip, r2
   27862:	44bc      	add	ip, r7
   27864:	4463      	add	r3, ip
   27866:	3b08      	subs	r3, #8
   27868:	681a      	ldr	r2, [r3, #0]
   2786a:	230e      	movs	r3, #14
   2786c:	18fb      	adds	r3, r7, r3
   2786e:	781b      	ldrb	r3, [r3, #0]
   27870:	01db      	lsls	r3, r3, #7
   27872:	18d3      	adds	r3, r2, r3
   27874:	e000      	b.n	27878 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   27876:	2300      	movs	r3, #0
}
   27878:	0018      	movs	r0, r3
   2787a:	46bd      	mov	sp, r7
   2787c:	b004      	add	sp, #16
   2787e:	bd80      	pop	{r7, pc}
   27880:	41004400 	.word	0x41004400

00027884 <port_get_group_from_gpio_pin>:
{
   27884:	b580      	push	{r7, lr}
   27886:	b082      	sub	sp, #8
   27888:	af00      	add	r7, sp, #0
   2788a:	0002      	movs	r2, r0
   2788c:	1dfb      	adds	r3, r7, #7
   2788e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   27890:	1dfb      	adds	r3, r7, #7
   27892:	781b      	ldrb	r3, [r3, #0]
   27894:	0018      	movs	r0, r3
   27896:	4b03      	ldr	r3, [pc, #12]	; (278a4 <port_get_group_from_gpio_pin+0x20>)
   27898:	4798      	blx	r3
   2789a:	0003      	movs	r3, r0
}
   2789c:	0018      	movs	r0, r3
   2789e:	46bd      	mov	sp, r7
   278a0:	b002      	add	sp, #8
   278a2:	bd80      	pop	{r7, pc}
   278a4:	00027825 	.word	0x00027825

000278a8 <port_pin_set_output_level>:
{
   278a8:	b580      	push	{r7, lr}
   278aa:	b084      	sub	sp, #16
   278ac:	af00      	add	r7, sp, #0
   278ae:	0002      	movs	r2, r0
   278b0:	1dfb      	adds	r3, r7, #7
   278b2:	701a      	strb	r2, [r3, #0]
   278b4:	1dbb      	adds	r3, r7, #6
   278b6:	1c0a      	adds	r2, r1, #0
   278b8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   278ba:	1dfb      	adds	r3, r7, #7
   278bc:	781b      	ldrb	r3, [r3, #0]
   278be:	0018      	movs	r0, r3
   278c0:	4b0d      	ldr	r3, [pc, #52]	; (278f8 <port_pin_set_output_level+0x50>)
   278c2:	4798      	blx	r3
   278c4:	0003      	movs	r3, r0
   278c6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   278c8:	1dfb      	adds	r3, r7, #7
   278ca:	781b      	ldrb	r3, [r3, #0]
   278cc:	221f      	movs	r2, #31
   278ce:	4013      	ands	r3, r2
   278d0:	2201      	movs	r2, #1
   278d2:	409a      	lsls	r2, r3
   278d4:	0013      	movs	r3, r2
   278d6:	60bb      	str	r3, [r7, #8]
	if (level) {
   278d8:	1dbb      	adds	r3, r7, #6
   278da:	781b      	ldrb	r3, [r3, #0]
   278dc:	2b00      	cmp	r3, #0
   278de:	d003      	beq.n	278e8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   278e0:	68fb      	ldr	r3, [r7, #12]
   278e2:	68ba      	ldr	r2, [r7, #8]
   278e4:	619a      	str	r2, [r3, #24]
}
   278e6:	e002      	b.n	278ee <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   278e8:	68fb      	ldr	r3, [r7, #12]
   278ea:	68ba      	ldr	r2, [r7, #8]
   278ec:	615a      	str	r2, [r3, #20]
}
   278ee:	46c0      	nop			; (mov r8, r8)
   278f0:	46bd      	mov	sp, r7
   278f2:	b004      	add	sp, #16
   278f4:	bd80      	pop	{r7, pc}
   278f6:	46c0      	nop			; (mov r8, r8)
   278f8:	00027885 	.word	0x00027885

000278fc <system_gclk_chan_get_config_defaults>:
{
   278fc:	b580      	push	{r7, lr}
   278fe:	b082      	sub	sp, #8
   27900:	af00      	add	r7, sp, #0
   27902:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27904:	687b      	ldr	r3, [r7, #4]
   27906:	2200      	movs	r2, #0
   27908:	701a      	strb	r2, [r3, #0]
}
   2790a:	46c0      	nop			; (mov r8, r8)
   2790c:	46bd      	mov	sp, r7
   2790e:	b002      	add	sp, #8
   27910:	bd80      	pop	{r7, pc}
	...

00027914 <system_apb_clock_set_mask>:
{
   27914:	b580      	push	{r7, lr}
   27916:	b082      	sub	sp, #8
   27918:	af00      	add	r7, sp, #0
   2791a:	0002      	movs	r2, r0
   2791c:	6039      	str	r1, [r7, #0]
   2791e:	1dfb      	adds	r3, r7, #7
   27920:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27922:	1dfb      	adds	r3, r7, #7
   27924:	781b      	ldrb	r3, [r3, #0]
   27926:	2b01      	cmp	r3, #1
   27928:	d00a      	beq.n	27940 <system_apb_clock_set_mask+0x2c>
   2792a:	2b02      	cmp	r3, #2
   2792c:	d00f      	beq.n	2794e <system_apb_clock_set_mask+0x3a>
   2792e:	2b00      	cmp	r3, #0
   27930:	d114      	bne.n	2795c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27932:	4b0e      	ldr	r3, [pc, #56]	; (2796c <system_apb_clock_set_mask+0x58>)
   27934:	4a0d      	ldr	r2, [pc, #52]	; (2796c <system_apb_clock_set_mask+0x58>)
   27936:	6991      	ldr	r1, [r2, #24]
   27938:	683a      	ldr	r2, [r7, #0]
   2793a:	430a      	orrs	r2, r1
   2793c:	619a      	str	r2, [r3, #24]
			break;
   2793e:	e00f      	b.n	27960 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27940:	4b0a      	ldr	r3, [pc, #40]	; (2796c <system_apb_clock_set_mask+0x58>)
   27942:	4a0a      	ldr	r2, [pc, #40]	; (2796c <system_apb_clock_set_mask+0x58>)
   27944:	69d1      	ldr	r1, [r2, #28]
   27946:	683a      	ldr	r2, [r7, #0]
   27948:	430a      	orrs	r2, r1
   2794a:	61da      	str	r2, [r3, #28]
			break;
   2794c:	e008      	b.n	27960 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2794e:	4b07      	ldr	r3, [pc, #28]	; (2796c <system_apb_clock_set_mask+0x58>)
   27950:	4a06      	ldr	r2, [pc, #24]	; (2796c <system_apb_clock_set_mask+0x58>)
   27952:	6a11      	ldr	r1, [r2, #32]
   27954:	683a      	ldr	r2, [r7, #0]
   27956:	430a      	orrs	r2, r1
   27958:	621a      	str	r2, [r3, #32]
			break;
   2795a:	e001      	b.n	27960 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2795c:	2317      	movs	r3, #23
   2795e:	e000      	b.n	27962 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27960:	2300      	movs	r3, #0
}
   27962:	0018      	movs	r0, r3
   27964:	46bd      	mov	sp, r7
   27966:	b002      	add	sp, #8
   27968:	bd80      	pop	{r7, pc}
   2796a:	46c0      	nop			; (mov r8, r8)
   2796c:	40000400 	.word	0x40000400

00027970 <system_is_debugger_present>:
{
   27970:	b580      	push	{r7, lr}
   27972:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   27974:	4b05      	ldr	r3, [pc, #20]	; (2798c <system_is_debugger_present+0x1c>)
   27976:	789b      	ldrb	r3, [r3, #2]
   27978:	b2db      	uxtb	r3, r3
   2797a:	001a      	movs	r2, r3
   2797c:	2302      	movs	r3, #2
   2797e:	4013      	ands	r3, r2
   27980:	1e5a      	subs	r2, r3, #1
   27982:	4193      	sbcs	r3, r2
   27984:	b2db      	uxtb	r3, r3
}
   27986:	0018      	movs	r0, r3
   27988:	46bd      	mov	sp, r7
   2798a:	bd80      	pop	{r7, pc}
   2798c:	41002000 	.word	0x41002000

00027990 <system_interrupt_enable>:
{
   27990:	b580      	push	{r7, lr}
   27992:	b082      	sub	sp, #8
   27994:	af00      	add	r7, sp, #0
   27996:	0002      	movs	r2, r0
   27998:	1dfb      	adds	r3, r7, #7
   2799a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2799c:	4b06      	ldr	r3, [pc, #24]	; (279b8 <system_interrupt_enable+0x28>)
   2799e:	1dfa      	adds	r2, r7, #7
   279a0:	7812      	ldrb	r2, [r2, #0]
   279a2:	0011      	movs	r1, r2
   279a4:	221f      	movs	r2, #31
   279a6:	400a      	ands	r2, r1
   279a8:	2101      	movs	r1, #1
   279aa:	4091      	lsls	r1, r2
   279ac:	000a      	movs	r2, r1
   279ae:	601a      	str	r2, [r3, #0]
}
   279b0:	46c0      	nop			; (mov r8, r8)
   279b2:	46bd      	mov	sp, r7
   279b4:	b002      	add	sp, #8
   279b6:	bd80      	pop	{r7, pc}
   279b8:	e000e100 	.word	0xe000e100

000279bc <system_interrupt_disable>:
{
   279bc:	b580      	push	{r7, lr}
   279be:	b082      	sub	sp, #8
   279c0:	af00      	add	r7, sp, #0
   279c2:	0002      	movs	r2, r0
   279c4:	1dfb      	adds	r3, r7, #7
   279c6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   279c8:	4a07      	ldr	r2, [pc, #28]	; (279e8 <system_interrupt_disable+0x2c>)
   279ca:	1dfb      	adds	r3, r7, #7
   279cc:	781b      	ldrb	r3, [r3, #0]
   279ce:	0019      	movs	r1, r3
   279d0:	231f      	movs	r3, #31
   279d2:	400b      	ands	r3, r1
   279d4:	2101      	movs	r1, #1
   279d6:	4099      	lsls	r1, r3
   279d8:	000b      	movs	r3, r1
   279da:	0019      	movs	r1, r3
   279dc:	2380      	movs	r3, #128	; 0x80
   279de:	50d1      	str	r1, [r2, r3]
}
   279e0:	46c0      	nop			; (mov r8, r8)
   279e2:	46bd      	mov	sp, r7
   279e4:	b002      	add	sp, #8
   279e6:	bd80      	pop	{r7, pc}
   279e8:	e000e100 	.word	0xe000e100

000279ec <spi_is_syncing>:
{
   279ec:	b580      	push	{r7, lr}
   279ee:	b084      	sub	sp, #16
   279f0:	af00      	add	r7, sp, #0
   279f2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   279f4:	687b      	ldr	r3, [r7, #4]
   279f6:	681b      	ldr	r3, [r3, #0]
   279f8:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   279fa:	68fb      	ldr	r3, [r7, #12]
   279fc:	69db      	ldr	r3, [r3, #28]
   279fe:	1e5a      	subs	r2, r3, #1
   27a00:	4193      	sbcs	r3, r2
   27a02:	b2db      	uxtb	r3, r3
}
   27a04:	0018      	movs	r0, r3
   27a06:	46bd      	mov	sp, r7
   27a08:	b004      	add	sp, #16
   27a0a:	bd80      	pop	{r7, pc}

00027a0c <spi_enable>:
{
   27a0c:	b580      	push	{r7, lr}
   27a0e:	b084      	sub	sp, #16
   27a10:	af00      	add	r7, sp, #0
   27a12:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27a14:	687b      	ldr	r3, [r7, #4]
   27a16:	681b      	ldr	r3, [r3, #0]
   27a18:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   27a1a:	687b      	ldr	r3, [r7, #4]
   27a1c:	681b      	ldr	r3, [r3, #0]
   27a1e:	0018      	movs	r0, r3
   27a20:	4b0b      	ldr	r3, [pc, #44]	; (27a50 <spi_enable+0x44>)
   27a22:	4798      	blx	r3
   27a24:	0003      	movs	r3, r0
   27a26:	0018      	movs	r0, r3
   27a28:	4b0a      	ldr	r3, [pc, #40]	; (27a54 <spi_enable+0x48>)
   27a2a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   27a2c:	46c0      	nop			; (mov r8, r8)
   27a2e:	687b      	ldr	r3, [r7, #4]
   27a30:	0018      	movs	r0, r3
   27a32:	4b09      	ldr	r3, [pc, #36]	; (27a58 <spi_enable+0x4c>)
   27a34:	4798      	blx	r3
   27a36:	1e03      	subs	r3, r0, #0
   27a38:	d1f9      	bne.n	27a2e <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   27a3a:	68fb      	ldr	r3, [r7, #12]
   27a3c:	681b      	ldr	r3, [r3, #0]
   27a3e:	2202      	movs	r2, #2
   27a40:	431a      	orrs	r2, r3
   27a42:	68fb      	ldr	r3, [r7, #12]
   27a44:	601a      	str	r2, [r3, #0]
}
   27a46:	46c0      	nop			; (mov r8, r8)
   27a48:	46bd      	mov	sp, r7
   27a4a:	b004      	add	sp, #16
   27a4c:	bd80      	pop	{r7, pc}
   27a4e:	46c0      	nop			; (mov r8, r8)
   27a50:	00027729 	.word	0x00027729
   27a54:	00027991 	.word	0x00027991
   27a58:	000279ed 	.word	0x000279ed

00027a5c <spi_disable>:
{
   27a5c:	b580      	push	{r7, lr}
   27a5e:	b084      	sub	sp, #16
   27a60:	af00      	add	r7, sp, #0
   27a62:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27a64:	687b      	ldr	r3, [r7, #4]
   27a66:	681b      	ldr	r3, [r3, #0]
   27a68:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   27a6a:	687b      	ldr	r3, [r7, #4]
   27a6c:	681b      	ldr	r3, [r3, #0]
   27a6e:	0018      	movs	r0, r3
   27a70:	4b0e      	ldr	r3, [pc, #56]	; (27aac <spi_disable+0x50>)
   27a72:	4798      	blx	r3
   27a74:	0003      	movs	r3, r0
   27a76:	0018      	movs	r0, r3
   27a78:	4b0d      	ldr	r3, [pc, #52]	; (27ab0 <spi_disable+0x54>)
   27a7a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   27a7c:	46c0      	nop			; (mov r8, r8)
   27a7e:	687b      	ldr	r3, [r7, #4]
   27a80:	0018      	movs	r0, r3
   27a82:	4b0c      	ldr	r3, [pc, #48]	; (27ab4 <spi_disable+0x58>)
   27a84:	4798      	blx	r3
   27a86:	1e03      	subs	r3, r0, #0
   27a88:	d1f9      	bne.n	27a7e <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   27a8a:	68fb      	ldr	r3, [r7, #12]
   27a8c:	228f      	movs	r2, #143	; 0x8f
   27a8e:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   27a90:	68fb      	ldr	r3, [r7, #12]
   27a92:	228f      	movs	r2, #143	; 0x8f
   27a94:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   27a96:	68fb      	ldr	r3, [r7, #12]
   27a98:	681b      	ldr	r3, [r3, #0]
   27a9a:	2202      	movs	r2, #2
   27a9c:	4393      	bics	r3, r2
   27a9e:	001a      	movs	r2, r3
   27aa0:	68fb      	ldr	r3, [r7, #12]
   27aa2:	601a      	str	r2, [r3, #0]
}
   27aa4:	46c0      	nop			; (mov r8, r8)
   27aa6:	46bd      	mov	sp, r7
   27aa8:	b004      	add	sp, #16
   27aaa:	bd80      	pop	{r7, pc}
   27aac:	00027729 	.word	0x00027729
   27ab0:	000279bd 	.word	0x000279bd
   27ab4:	000279ed 	.word	0x000279ed

00027ab8 <spi_is_write_complete>:
{
   27ab8:	b580      	push	{r7, lr}
   27aba:	b084      	sub	sp, #16
   27abc:	af00      	add	r7, sp, #0
   27abe:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27ac0:	687b      	ldr	r3, [r7, #4]
   27ac2:	681b      	ldr	r3, [r3, #0]
   27ac4:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   27ac6:	68fb      	ldr	r3, [r7, #12]
   27ac8:	7e1b      	ldrb	r3, [r3, #24]
   27aca:	b2db      	uxtb	r3, r3
   27acc:	001a      	movs	r2, r3
   27ace:	2302      	movs	r3, #2
   27ad0:	4013      	ands	r3, r2
   27ad2:	1e5a      	subs	r2, r3, #1
   27ad4:	4193      	sbcs	r3, r2
   27ad6:	b2db      	uxtb	r3, r3
}
   27ad8:	0018      	movs	r0, r3
   27ada:	46bd      	mov	sp, r7
   27adc:	b004      	add	sp, #16
   27ade:	bd80      	pop	{r7, pc}

00027ae0 <spi_is_ready_to_write>:
{
   27ae0:	b580      	push	{r7, lr}
   27ae2:	b084      	sub	sp, #16
   27ae4:	af00      	add	r7, sp, #0
   27ae6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27ae8:	687b      	ldr	r3, [r7, #4]
   27aea:	681b      	ldr	r3, [r3, #0]
   27aec:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   27aee:	68fb      	ldr	r3, [r7, #12]
   27af0:	7e1b      	ldrb	r3, [r3, #24]
   27af2:	b2db      	uxtb	r3, r3
   27af4:	001a      	movs	r2, r3
   27af6:	2301      	movs	r3, #1
   27af8:	4013      	ands	r3, r2
   27afa:	1e5a      	subs	r2, r3, #1
   27afc:	4193      	sbcs	r3, r2
   27afe:	b2db      	uxtb	r3, r3
}
   27b00:	0018      	movs	r0, r3
   27b02:	46bd      	mov	sp, r7
   27b04:	b004      	add	sp, #16
   27b06:	bd80      	pop	{r7, pc}

00027b08 <spi_is_ready_to_read>:
{
   27b08:	b580      	push	{r7, lr}
   27b0a:	b084      	sub	sp, #16
   27b0c:	af00      	add	r7, sp, #0
   27b0e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27b10:	687b      	ldr	r3, [r7, #4]
   27b12:	681b      	ldr	r3, [r3, #0]
   27b14:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   27b16:	68fb      	ldr	r3, [r7, #12]
   27b18:	7e1b      	ldrb	r3, [r3, #24]
   27b1a:	b2db      	uxtb	r3, r3
   27b1c:	001a      	movs	r2, r3
   27b1e:	2304      	movs	r3, #4
   27b20:	4013      	ands	r3, r2
   27b22:	1e5a      	subs	r2, r3, #1
   27b24:	4193      	sbcs	r3, r2
   27b26:	b2db      	uxtb	r3, r3
}
   27b28:	0018      	movs	r0, r3
   27b2a:	46bd      	mov	sp, r7
   27b2c:	b004      	add	sp, #16
   27b2e:	bd80      	pop	{r7, pc}

00027b30 <spi_write>:
{
   27b30:	b580      	push	{r7, lr}
   27b32:	b084      	sub	sp, #16
   27b34:	af00      	add	r7, sp, #0
   27b36:	6078      	str	r0, [r7, #4]
   27b38:	000a      	movs	r2, r1
   27b3a:	1cbb      	adds	r3, r7, #2
   27b3c:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27b3e:	687b      	ldr	r3, [r7, #4]
   27b40:	681b      	ldr	r3, [r3, #0]
   27b42:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   27b44:	687b      	ldr	r3, [r7, #4]
   27b46:	0018      	movs	r0, r3
   27b48:	4b0a      	ldr	r3, [pc, #40]	; (27b74 <spi_write+0x44>)
   27b4a:	4798      	blx	r3
   27b4c:	0003      	movs	r3, r0
   27b4e:	001a      	movs	r2, r3
   27b50:	2301      	movs	r3, #1
   27b52:	4053      	eors	r3, r2
   27b54:	b2db      	uxtb	r3, r3
   27b56:	2b00      	cmp	r3, #0
   27b58:	d001      	beq.n	27b5e <spi_write+0x2e>
		return STATUS_BUSY;
   27b5a:	2305      	movs	r3, #5
   27b5c:	e006      	b.n	27b6c <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   27b5e:	1cbb      	adds	r3, r7, #2
   27b60:	881b      	ldrh	r3, [r3, #0]
   27b62:	05db      	lsls	r3, r3, #23
   27b64:	0dda      	lsrs	r2, r3, #23
   27b66:	68fb      	ldr	r3, [r7, #12]
   27b68:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   27b6a:	2300      	movs	r3, #0
}
   27b6c:	0018      	movs	r0, r3
   27b6e:	46bd      	mov	sp, r7
   27b70:	b004      	add	sp, #16
   27b72:	bd80      	pop	{r7, pc}
   27b74:	00027ae1 	.word	0x00027ae1

00027b78 <spi_read>:
{
   27b78:	b580      	push	{r7, lr}
   27b7a:	b084      	sub	sp, #16
   27b7c:	af00      	add	r7, sp, #0
   27b7e:	6078      	str	r0, [r7, #4]
   27b80:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27b82:	687b      	ldr	r3, [r7, #4]
   27b84:	681b      	ldr	r3, [r3, #0]
   27b86:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   27b88:	687b      	ldr	r3, [r7, #4]
   27b8a:	0018      	movs	r0, r3
   27b8c:	4b1b      	ldr	r3, [pc, #108]	; (27bfc <spi_read+0x84>)
   27b8e:	4798      	blx	r3
   27b90:	0003      	movs	r3, r0
   27b92:	001a      	movs	r2, r3
   27b94:	2301      	movs	r3, #1
   27b96:	4053      	eors	r3, r2
   27b98:	b2db      	uxtb	r3, r3
   27b9a:	2b00      	cmp	r3, #0
   27b9c:	d001      	beq.n	27ba2 <spi_read+0x2a>
		return STATUS_ERR_IO;
   27b9e:	2310      	movs	r3, #16
   27ba0:	e027      	b.n	27bf2 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   27ba2:	230f      	movs	r3, #15
   27ba4:	18fb      	adds	r3, r7, r3
   27ba6:	2200      	movs	r2, #0
   27ba8:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   27baa:	68bb      	ldr	r3, [r7, #8]
   27bac:	8b5b      	ldrh	r3, [r3, #26]
   27bae:	b29b      	uxth	r3, r3
   27bb0:	001a      	movs	r2, r3
   27bb2:	2304      	movs	r3, #4
   27bb4:	4013      	ands	r3, r2
   27bb6:	d006      	beq.n	27bc6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   27bb8:	230f      	movs	r3, #15
   27bba:	18fb      	adds	r3, r7, r3
   27bbc:	221e      	movs	r2, #30
   27bbe:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27bc0:	68bb      	ldr	r3, [r7, #8]
   27bc2:	2204      	movs	r2, #4
   27bc4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27bc6:	687b      	ldr	r3, [r7, #4]
   27bc8:	799b      	ldrb	r3, [r3, #6]
   27bca:	2b01      	cmp	r3, #1
   27bcc:	d108      	bne.n	27be0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   27bce:	68bb      	ldr	r3, [r7, #8]
   27bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27bd2:	b29b      	uxth	r3, r3
   27bd4:	05db      	lsls	r3, r3, #23
   27bd6:	0ddb      	lsrs	r3, r3, #23
   27bd8:	b29a      	uxth	r2, r3
   27bda:	683b      	ldr	r3, [r7, #0]
   27bdc:	801a      	strh	r2, [r3, #0]
   27bde:	e005      	b.n	27bec <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   27be0:	68bb      	ldr	r3, [r7, #8]
   27be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27be4:	b2db      	uxtb	r3, r3
   27be6:	b29a      	uxth	r2, r3
   27be8:	683b      	ldr	r3, [r7, #0]
   27bea:	801a      	strh	r2, [r3, #0]
	return retval;
   27bec:	230f      	movs	r3, #15
   27bee:	18fb      	adds	r3, r7, r3
   27bf0:	781b      	ldrb	r3, [r3, #0]
}
   27bf2:	0018      	movs	r0, r3
   27bf4:	46bd      	mov	sp, r7
   27bf6:	b004      	add	sp, #16
   27bf8:	bd80      	pop	{r7, pc}
   27bfa:	46c0      	nop			; (mov r8, r8)
   27bfc:	00027b09 	.word	0x00027b09

00027c00 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   27c00:	b590      	push	{r4, r7, lr}
   27c02:	b089      	sub	sp, #36	; 0x24
   27c04:	af00      	add	r7, sp, #0
   27c06:	6078      	str	r0, [r7, #4]
   27c08:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   27c0a:	230c      	movs	r3, #12
   27c0c:	18fb      	adds	r3, r7, r3
   27c0e:	2200      	movs	r2, #0
   27c10:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27c12:	687b      	ldr	r3, [r7, #4]
   27c14:	681b      	ldr	r3, [r3, #0]
   27c16:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   27c18:	687b      	ldr	r3, [r7, #4]
   27c1a:	0018      	movs	r0, r3
   27c1c:	4b24      	ldr	r3, [pc, #144]	; (27cb0 <spi_set_baudrate+0xb0>)
   27c1e:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27c20:	46c0      	nop			; (mov r8, r8)
   27c22:	687b      	ldr	r3, [r7, #4]
   27c24:	0018      	movs	r0, r3
   27c26:	4b23      	ldr	r3, [pc, #140]	; (27cb4 <spi_set_baudrate+0xb4>)
   27c28:	4798      	blx	r3
   27c2a:	1e03      	subs	r3, r0, #0
   27c2c:	d1f9      	bne.n	27c22 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27c2e:	687b      	ldr	r3, [r7, #4]
   27c30:	681b      	ldr	r3, [r3, #0]
   27c32:	0018      	movs	r0, r3
   27c34:	4b20      	ldr	r3, [pc, #128]	; (27cb8 <spi_set_baudrate+0xb8>)
   27c36:	4798      	blx	r3
   27c38:	0003      	movs	r3, r0
   27c3a:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27c3c:	69bb      	ldr	r3, [r7, #24]
   27c3e:	3314      	adds	r3, #20
   27c40:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27c42:	697b      	ldr	r3, [r7, #20]
   27c44:	b2db      	uxtb	r3, r3
   27c46:	0018      	movs	r0, r3
   27c48:	4b1c      	ldr	r3, [pc, #112]	; (27cbc <spi_set_baudrate+0xbc>)
   27c4a:	4798      	blx	r3
   27c4c:	0003      	movs	r3, r0
   27c4e:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   27c50:	230f      	movs	r3, #15
   27c52:	18fc      	adds	r4, r7, r3
   27c54:	230c      	movs	r3, #12
   27c56:	18fa      	adds	r2, r7, r3
   27c58:	6939      	ldr	r1, [r7, #16]
   27c5a:	683b      	ldr	r3, [r7, #0]
   27c5c:	0018      	movs	r0, r3
   27c5e:	4b18      	ldr	r3, [pc, #96]	; (27cc0 <spi_set_baudrate+0xc0>)
   27c60:	4798      	blx	r3
   27c62:	0003      	movs	r3, r0
   27c64:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   27c66:	230f      	movs	r3, #15
   27c68:	18fb      	adds	r3, r7, r3
   27c6a:	781b      	ldrb	r3, [r3, #0]
   27c6c:	2b00      	cmp	r3, #0
   27c6e:	d001      	beq.n	27c74 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   27c70:	2317      	movs	r3, #23
   27c72:	e018      	b.n	27ca6 <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   27c74:	230c      	movs	r3, #12
   27c76:	18fb      	adds	r3, r7, r3
   27c78:	881b      	ldrh	r3, [r3, #0]
   27c7a:	b2da      	uxtb	r2, r3
   27c7c:	69fb      	ldr	r3, [r7, #28]
   27c7e:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   27c80:	46c0      	nop			; (mov r8, r8)
   27c82:	687b      	ldr	r3, [r7, #4]
   27c84:	0018      	movs	r0, r3
   27c86:	4b0b      	ldr	r3, [pc, #44]	; (27cb4 <spi_set_baudrate+0xb4>)
   27c88:	4798      	blx	r3
   27c8a:	1e03      	subs	r3, r0, #0
   27c8c:	d1f9      	bne.n	27c82 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   27c8e:	687b      	ldr	r3, [r7, #4]
   27c90:	0018      	movs	r0, r3
   27c92:	4b0c      	ldr	r3, [pc, #48]	; (27cc4 <spi_set_baudrate+0xc4>)
   27c94:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27c96:	46c0      	nop			; (mov r8, r8)
   27c98:	687b      	ldr	r3, [r7, #4]
   27c9a:	0018      	movs	r0, r3
   27c9c:	4b05      	ldr	r3, [pc, #20]	; (27cb4 <spi_set_baudrate+0xb4>)
   27c9e:	4798      	blx	r3
   27ca0:	1e03      	subs	r3, r0, #0
   27ca2:	d1f9      	bne.n	27c98 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   27ca4:	2300      	movs	r3, #0
}
   27ca6:	0018      	movs	r0, r3
   27ca8:	46bd      	mov	sp, r7
   27caa:	b009      	add	sp, #36	; 0x24
   27cac:	bd90      	pop	{r4, r7, pc}
   27cae:	46c0      	nop			; (mov r8, r8)
   27cb0:	00027a5d 	.word	0x00027a5d
   27cb4:	000279ed 	.word	0x000279ed
   27cb8:	00027659 	.word	0x00027659
   27cbc:	0002a00d 	.word	0x0002a00d
   27cc0:	000271d3 	.word	0x000271d3
   27cc4:	00027a0d 	.word	0x00027a0d

00027cc8 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   27cc8:	b590      	push	{r4, r7, lr}
   27cca:	b093      	sub	sp, #76	; 0x4c
   27ccc:	af00      	add	r7, sp, #0
   27cce:	6078      	str	r0, [r7, #4]
   27cd0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   27cd2:	687b      	ldr	r3, [r7, #4]
   27cd4:	681b      	ldr	r3, [r3, #0]
   27cd6:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   27cd8:	687b      	ldr	r3, [r7, #4]
   27cda:	681b      	ldr	r3, [r3, #0]
   27cdc:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   27cde:	231c      	movs	r3, #28
   27ce0:	18fb      	adds	r3, r7, r3
   27ce2:	0018      	movs	r0, r3
   27ce4:	4b75      	ldr	r3, [pc, #468]	; (27ebc <_spi_set_config+0x1f4>)
   27ce6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27ce8:	231c      	movs	r3, #28
   27cea:	18fb      	adds	r3, r7, r3
   27cec:	2200      	movs	r2, #0
   27cee:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   27cf0:	683b      	ldr	r3, [r7, #0]
   27cf2:	781b      	ldrb	r3, [r3, #0]
   27cf4:	2b00      	cmp	r3, #0
   27cf6:	d103      	bne.n	27d00 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   27cf8:	231c      	movs	r3, #28
   27cfa:	18fb      	adds	r3, r7, r3
   27cfc:	2200      	movs	r2, #0
   27cfe:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27d00:	683b      	ldr	r3, [r7, #0]
   27d02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   27d04:	230c      	movs	r3, #12
   27d06:	18fb      	adds	r3, r7, r3
   27d08:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   27d0a:	683b      	ldr	r3, [r7, #0]
   27d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   27d0e:	230c      	movs	r3, #12
   27d10:	18fb      	adds	r3, r7, r3
   27d12:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27d14:	683b      	ldr	r3, [r7, #0]
   27d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   27d18:	230c      	movs	r3, #12
   27d1a:	18fb      	adds	r3, r7, r3
   27d1c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   27d1e:	683b      	ldr	r3, [r7, #0]
   27d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   27d22:	230c      	movs	r3, #12
   27d24:	18fb      	adds	r3, r7, r3
   27d26:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   27d28:	2347      	movs	r3, #71	; 0x47
   27d2a:	18fb      	adds	r3, r7, r3
   27d2c:	2200      	movs	r2, #0
   27d2e:	701a      	strb	r2, [r3, #0]
   27d30:	e02c      	b.n	27d8c <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   27d32:	2347      	movs	r3, #71	; 0x47
   27d34:	18fb      	adds	r3, r7, r3
   27d36:	781a      	ldrb	r2, [r3, #0]
   27d38:	230c      	movs	r3, #12
   27d3a:	18fb      	adds	r3, r7, r3
   27d3c:	0092      	lsls	r2, r2, #2
   27d3e:	58d3      	ldr	r3, [r2, r3]
   27d40:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   27d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27d44:	2b00      	cmp	r3, #0
   27d46:	d109      	bne.n	27d5c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   27d48:	2347      	movs	r3, #71	; 0x47
   27d4a:	18fb      	adds	r3, r7, r3
   27d4c:	781a      	ldrb	r2, [r3, #0]
   27d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27d50:	0011      	movs	r1, r2
   27d52:	0018      	movs	r0, r3
   27d54:	4b5a      	ldr	r3, [pc, #360]	; (27ec0 <_spi_set_config+0x1f8>)
   27d56:	4798      	blx	r3
   27d58:	0003      	movs	r3, r0
   27d5a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   27d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27d5e:	3301      	adds	r3, #1
   27d60:	d00d      	beq.n	27d7e <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   27d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27d64:	b2da      	uxtb	r2, r3
   27d66:	231c      	movs	r3, #28
   27d68:	18fb      	adds	r3, r7, r3
   27d6a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   27d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27d6e:	0c1b      	lsrs	r3, r3, #16
   27d70:	b2db      	uxtb	r3, r3
   27d72:	221c      	movs	r2, #28
   27d74:	18ba      	adds	r2, r7, r2
   27d76:	0011      	movs	r1, r2
   27d78:	0018      	movs	r0, r3
   27d7a:	4b52      	ldr	r3, [pc, #328]	; (27ec4 <_spi_set_config+0x1fc>)
   27d7c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   27d7e:	2347      	movs	r3, #71	; 0x47
   27d80:	18fb      	adds	r3, r7, r3
   27d82:	781a      	ldrb	r2, [r3, #0]
   27d84:	2347      	movs	r3, #71	; 0x47
   27d86:	18fb      	adds	r3, r7, r3
   27d88:	3201      	adds	r2, #1
   27d8a:	701a      	strb	r2, [r3, #0]
   27d8c:	2347      	movs	r3, #71	; 0x47
   27d8e:	18fb      	adds	r3, r7, r3
   27d90:	781b      	ldrb	r3, [r3, #0]
   27d92:	2b03      	cmp	r3, #3
   27d94:	d9cd      	bls.n	27d32 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   27d96:	683b      	ldr	r3, [r7, #0]
   27d98:	781a      	ldrb	r2, [r3, #0]
   27d9a:	687b      	ldr	r3, [r7, #4]
   27d9c:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   27d9e:	683b      	ldr	r3, [r7, #0]
   27da0:	7c1a      	ldrb	r2, [r3, #16]
   27da2:	687b      	ldr	r3, [r7, #4]
   27da4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   27da6:	683b      	ldr	r3, [r7, #0]
   27da8:	7c9a      	ldrb	r2, [r3, #18]
   27daa:	687b      	ldr	r3, [r7, #4]
   27dac:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   27dae:	683b      	ldr	r3, [r7, #0]
   27db0:	7d1a      	ldrb	r2, [r3, #20]
   27db2:	687b      	ldr	r3, [r7, #4]
   27db4:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   27db6:	230a      	movs	r3, #10
   27db8:	18fb      	adds	r3, r7, r3
   27dba:	2200      	movs	r2, #0
   27dbc:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   27dbe:	2300      	movs	r3, #0
   27dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   27dc2:	2300      	movs	r3, #0
   27dc4:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   27dc6:	683b      	ldr	r3, [r7, #0]
   27dc8:	781b      	ldrb	r3, [r3, #0]
   27dca:	2b01      	cmp	r3, #1
   27dcc:	d129      	bne.n	27e22 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27dce:	687b      	ldr	r3, [r7, #4]
   27dd0:	681b      	ldr	r3, [r3, #0]
   27dd2:	0018      	movs	r0, r3
   27dd4:	4b3c      	ldr	r3, [pc, #240]	; (27ec8 <_spi_set_config+0x200>)
   27dd6:	4798      	blx	r3
   27dd8:	0003      	movs	r3, r0
   27dda:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27dde:	3314      	adds	r3, #20
   27de0:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27de4:	b2db      	uxtb	r3, r3
   27de6:	0018      	movs	r0, r3
   27de8:	4b38      	ldr	r3, [pc, #224]	; (27ecc <_spi_set_config+0x204>)
   27dea:	4798      	blx	r3
   27dec:	0003      	movs	r3, r0
   27dee:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   27df0:	683b      	ldr	r3, [r7, #0]
   27df2:	699b      	ldr	r3, [r3, #24]
   27df4:	2223      	movs	r2, #35	; 0x23
   27df6:	18bc      	adds	r4, r7, r2
   27df8:	220a      	movs	r2, #10
   27dfa:	18ba      	adds	r2, r7, r2
   27dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27dfe:	0018      	movs	r0, r3
   27e00:	4b33      	ldr	r3, [pc, #204]	; (27ed0 <_spi_set_config+0x208>)
   27e02:	4798      	blx	r3
   27e04:	0003      	movs	r3, r0
   27e06:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   27e08:	2323      	movs	r3, #35	; 0x23
   27e0a:	18fb      	adds	r3, r7, r3
   27e0c:	781b      	ldrb	r3, [r3, #0]
   27e0e:	2b00      	cmp	r3, #0
   27e10:	d001      	beq.n	27e16 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   27e12:	2317      	movs	r3, #23
   27e14:	e04e      	b.n	27eb4 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   27e16:	230a      	movs	r3, #10
   27e18:	18fb      	adds	r3, r7, r3
   27e1a:	881b      	ldrh	r3, [r3, #0]
   27e1c:	b2da      	uxtb	r2, r3
   27e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27e20:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   27e22:	683b      	ldr	r3, [r7, #0]
   27e24:	685b      	ldr	r3, [r3, #4]
   27e26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27e28:	4313      	orrs	r3, r2
   27e2a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   27e2c:	683b      	ldr	r3, [r7, #0]
   27e2e:	689b      	ldr	r3, [r3, #8]
   27e30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27e32:	4313      	orrs	r3, r2
   27e34:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   27e36:	683b      	ldr	r3, [r7, #0]
   27e38:	68db      	ldr	r3, [r3, #12]
   27e3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27e3c:	4313      	orrs	r3, r2
   27e3e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   27e40:	683b      	ldr	r3, [r7, #0]
   27e42:	7c1b      	ldrb	r3, [r3, #16]
   27e44:	001a      	movs	r2, r3
   27e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27e48:	4313      	orrs	r3, r2
   27e4a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   27e4c:	683b      	ldr	r3, [r7, #0]
   27e4e:	7c5b      	ldrb	r3, [r3, #17]
   27e50:	2b00      	cmp	r3, #0
   27e52:	d103      	bne.n	27e5c <_spi_set_config+0x194>
   27e54:	4b1f      	ldr	r3, [pc, #124]	; (27ed4 <_spi_set_config+0x20c>)
   27e56:	4798      	blx	r3
   27e58:	1e03      	subs	r3, r0, #0
   27e5a:	d003      	beq.n	27e64 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   27e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27e5e:	2280      	movs	r2, #128	; 0x80
   27e60:	4313      	orrs	r3, r2
   27e62:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   27e64:	683b      	ldr	r3, [r7, #0]
   27e66:	7c9b      	ldrb	r3, [r3, #18]
   27e68:	2b00      	cmp	r3, #0
   27e6a:	d004      	beq.n	27e76 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   27e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27e6e:	2280      	movs	r2, #128	; 0x80
   27e70:	0292      	lsls	r2, r2, #10
   27e72:	4313      	orrs	r3, r2
   27e74:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   27e76:	683b      	ldr	r3, [r7, #0]
   27e78:	7cdb      	ldrb	r3, [r3, #19]
   27e7a:	2b00      	cmp	r3, #0
   27e7c:	d004      	beq.n	27e88 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   27e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27e80:	2280      	movs	r2, #128	; 0x80
   27e82:	0092      	lsls	r2, r2, #2
   27e84:	4313      	orrs	r3, r2
   27e86:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   27e88:	683b      	ldr	r3, [r7, #0]
   27e8a:	7d1b      	ldrb	r3, [r3, #20]
   27e8c:	2b00      	cmp	r3, #0
   27e8e:	d004      	beq.n	27e9a <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   27e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27e92:	2280      	movs	r2, #128	; 0x80
   27e94:	0192      	lsls	r2, r2, #6
   27e96:	4313      	orrs	r3, r2
   27e98:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   27e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27e9c:	681a      	ldr	r2, [r3, #0]
   27e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27ea0:	431a      	orrs	r2, r3
   27ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27ea4:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   27ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27ea8:	685a      	ldr	r2, [r3, #4]
   27eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27eac:	431a      	orrs	r2, r3
   27eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27eb0:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   27eb2:	2300      	movs	r3, #0
}
   27eb4:	0018      	movs	r0, r3
   27eb6:	46bd      	mov	sp, r7
   27eb8:	b013      	add	sp, #76	; 0x4c
   27eba:	bd90      	pop	{r4, r7, pc}
   27ebc:	000277fd 	.word	0x000277fd
   27ec0:	0002749d 	.word	0x0002749d
   27ec4:	0002a249 	.word	0x0002a249
   27ec8:	00027659 	.word	0x00027659
   27ecc:	0002a00d 	.word	0x0002a00d
   27ed0:	000271d3 	.word	0x000271d3
   27ed4:	00027971 	.word	0x00027971

00027ed8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   27ed8:	b590      	push	{r4, r7, lr}
   27eda:	b08b      	sub	sp, #44	; 0x2c
   27edc:	af00      	add	r7, sp, #0
   27ede:	60f8      	str	r0, [r7, #12]
   27ee0:	60b9      	str	r1, [r7, #8]
   27ee2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27ee4:	68fb      	ldr	r3, [r7, #12]
   27ee6:	68ba      	ldr	r2, [r7, #8]
   27ee8:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27eea:	68fb      	ldr	r3, [r7, #12]
   27eec:	681b      	ldr	r3, [r3, #0]
   27eee:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   27ef0:	6a3b      	ldr	r3, [r7, #32]
   27ef2:	681b      	ldr	r3, [r3, #0]
   27ef4:	2202      	movs	r2, #2
   27ef6:	4013      	ands	r3, r2
   27ef8:	d001      	beq.n	27efe <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   27efa:	231c      	movs	r3, #28
   27efc:	e09c      	b.n	28038 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   27efe:	6a3b      	ldr	r3, [r7, #32]
   27f00:	681b      	ldr	r3, [r3, #0]
   27f02:	2201      	movs	r2, #1
   27f04:	4013      	ands	r3, r2
   27f06:	d001      	beq.n	27f0c <spi_init+0x34>
		return STATUS_BUSY;
   27f08:	2305      	movs	r3, #5
   27f0a:	e095      	b.n	28038 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27f0c:	68fb      	ldr	r3, [r7, #12]
   27f0e:	681b      	ldr	r3, [r3, #0]
   27f10:	0018      	movs	r0, r3
   27f12:	4b4b      	ldr	r3, [pc, #300]	; (28040 <spi_init+0x168>)
   27f14:	4798      	blx	r3
   27f16:	0003      	movs	r3, r0
   27f18:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   27f1a:	69fb      	ldr	r3, [r7, #28]
   27f1c:	3302      	adds	r3, #2
   27f1e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27f20:	69fb      	ldr	r3, [r7, #28]
   27f22:	3314      	adds	r3, #20
   27f24:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   27f26:	2201      	movs	r2, #1
   27f28:	69bb      	ldr	r3, [r7, #24]
   27f2a:	409a      	lsls	r2, r3
   27f2c:	0013      	movs	r3, r2
   27f2e:	0019      	movs	r1, r3
   27f30:	2002      	movs	r0, #2
   27f32:	4b44      	ldr	r3, [pc, #272]	; (28044 <spi_init+0x16c>)
   27f34:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27f36:	2310      	movs	r3, #16
   27f38:	18fb      	adds	r3, r7, r3
   27f3a:	0018      	movs	r0, r3
   27f3c:	4b42      	ldr	r3, [pc, #264]	; (28048 <spi_init+0x170>)
   27f3e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   27f40:	687b      	ldr	r3, [r7, #4]
   27f42:	2224      	movs	r2, #36	; 0x24
   27f44:	5c9a      	ldrb	r2, [r3, r2]
   27f46:	2310      	movs	r3, #16
   27f48:	18fb      	adds	r3, r7, r3
   27f4a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   27f4c:	697b      	ldr	r3, [r7, #20]
   27f4e:	b2db      	uxtb	r3, r3
   27f50:	2210      	movs	r2, #16
   27f52:	18ba      	adds	r2, r7, r2
   27f54:	0011      	movs	r1, r2
   27f56:	0018      	movs	r0, r3
   27f58:	4b3c      	ldr	r3, [pc, #240]	; (2804c <spi_init+0x174>)
   27f5a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   27f5c:	697b      	ldr	r3, [r7, #20]
   27f5e:	b2db      	uxtb	r3, r3
   27f60:	0018      	movs	r0, r3
   27f62:	4b3b      	ldr	r3, [pc, #236]	; (28050 <spi_init+0x178>)
   27f64:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   27f66:	687b      	ldr	r3, [r7, #4]
   27f68:	2224      	movs	r2, #36	; 0x24
   27f6a:	5c9b      	ldrb	r3, [r3, r2]
   27f6c:	2100      	movs	r1, #0
   27f6e:	0018      	movs	r0, r3
   27f70:	4b38      	ldr	r3, [pc, #224]	; (28054 <spi_init+0x17c>)
   27f72:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   27f74:	687b      	ldr	r3, [r7, #4]
   27f76:	781b      	ldrb	r3, [r3, #0]
   27f78:	2b01      	cmp	r3, #1
   27f7a:	d105      	bne.n	27f88 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   27f7c:	6a3b      	ldr	r3, [r7, #32]
   27f7e:	681b      	ldr	r3, [r3, #0]
   27f80:	220c      	movs	r2, #12
   27f82:	431a      	orrs	r2, r3
   27f84:	6a3b      	ldr	r3, [r7, #32]
   27f86:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   27f88:	2327      	movs	r3, #39	; 0x27
   27f8a:	18fb      	adds	r3, r7, r3
   27f8c:	2200      	movs	r2, #0
   27f8e:	701a      	strb	r2, [r3, #0]
   27f90:	e010      	b.n	27fb4 <spi_init+0xdc>
		module->callback[i]        = NULL;
   27f92:	2327      	movs	r3, #39	; 0x27
   27f94:	18fb      	adds	r3, r7, r3
   27f96:	781b      	ldrb	r3, [r3, #0]
   27f98:	68fa      	ldr	r2, [r7, #12]
   27f9a:	3302      	adds	r3, #2
   27f9c:	009b      	lsls	r3, r3, #2
   27f9e:	18d3      	adds	r3, r2, r3
   27fa0:	3304      	adds	r3, #4
   27fa2:	2200      	movs	r2, #0
   27fa4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   27fa6:	2327      	movs	r3, #39	; 0x27
   27fa8:	18fb      	adds	r3, r7, r3
   27faa:	781a      	ldrb	r2, [r3, #0]
   27fac:	2327      	movs	r3, #39	; 0x27
   27fae:	18fb      	adds	r3, r7, r3
   27fb0:	3201      	adds	r2, #1
   27fb2:	701a      	strb	r2, [r3, #0]
   27fb4:	2327      	movs	r3, #39	; 0x27
   27fb6:	18fb      	adds	r3, r7, r3
   27fb8:	781b      	ldrb	r3, [r3, #0]
   27fba:	2b06      	cmp	r3, #6
   27fbc:	d9e9      	bls.n	27f92 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   27fbe:	68fb      	ldr	r3, [r7, #12]
   27fc0:	2200      	movs	r2, #0
   27fc2:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   27fc4:	68fb      	ldr	r3, [r7, #12]
   27fc6:	2200      	movs	r2, #0
   27fc8:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   27fca:	68fb      	ldr	r3, [r7, #12]
   27fcc:	2200      	movs	r2, #0
   27fce:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   27fd0:	68fb      	ldr	r3, [r7, #12]
   27fd2:	2200      	movs	r2, #0
   27fd4:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   27fd6:	68fb      	ldr	r3, [r7, #12]
   27fd8:	2236      	movs	r2, #54	; 0x36
   27fda:	2100      	movs	r1, #0
   27fdc:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   27fde:	68fb      	ldr	r3, [r7, #12]
   27fe0:	2237      	movs	r2, #55	; 0x37
   27fe2:	2100      	movs	r1, #0
   27fe4:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   27fe6:	68fb      	ldr	r3, [r7, #12]
   27fe8:	2238      	movs	r2, #56	; 0x38
   27fea:	2100      	movs	r1, #0
   27fec:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   27fee:	68fb      	ldr	r3, [r7, #12]
   27ff0:	2203      	movs	r2, #3
   27ff2:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   27ff4:	68fb      	ldr	r3, [r7, #12]
   27ff6:	2200      	movs	r2, #0
   27ff8:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   27ffa:	68fb      	ldr	r3, [r7, #12]
   27ffc:	681b      	ldr	r3, [r3, #0]
   27ffe:	2213      	movs	r2, #19
   28000:	18bc      	adds	r4, r7, r2
   28002:	0018      	movs	r0, r3
   28004:	4b0e      	ldr	r3, [pc, #56]	; (28040 <spi_init+0x168>)
   28006:	4798      	blx	r3
   28008:	0003      	movs	r3, r0
   2800a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   2800c:	4a12      	ldr	r2, [pc, #72]	; (28058 <spi_init+0x180>)
   2800e:	2313      	movs	r3, #19
   28010:	18fb      	adds	r3, r7, r3
   28012:	781b      	ldrb	r3, [r3, #0]
   28014:	0011      	movs	r1, r2
   28016:	0018      	movs	r0, r3
   28018:	4b10      	ldr	r3, [pc, #64]	; (2805c <spi_init+0x184>)
   2801a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   2801c:	2313      	movs	r3, #19
   2801e:	18fb      	adds	r3, r7, r3
   28020:	781a      	ldrb	r2, [r3, #0]
   28022:	4b0f      	ldr	r3, [pc, #60]	; (28060 <spi_init+0x188>)
   28024:	0092      	lsls	r2, r2, #2
   28026:	68f9      	ldr	r1, [r7, #12]
   28028:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   2802a:	687a      	ldr	r2, [r7, #4]
   2802c:	68fb      	ldr	r3, [r7, #12]
   2802e:	0011      	movs	r1, r2
   28030:	0018      	movs	r0, r3
   28032:	4b0c      	ldr	r3, [pc, #48]	; (28064 <spi_init+0x18c>)
   28034:	4798      	blx	r3
   28036:	0003      	movs	r3, r0
}
   28038:	0018      	movs	r0, r3
   2803a:	46bd      	mov	sp, r7
   2803c:	b00b      	add	sp, #44	; 0x2c
   2803e:	bd90      	pop	{r4, r7, pc}
   28040:	00027659 	.word	0x00027659
   28044:	00027915 	.word	0x00027915
   28048:	000278fd 	.word	0x000278fd
   2804c:	00029ee9 	.word	0x00029ee9
   28050:	00029f2d 	.word	0x00029f2d
   28054:	00027411 	.word	0x00027411
   28058:	00028531 	.word	0x00028531
   2805c:	000276bd 	.word	0x000276bd
   28060:	20005a88 	.word	0x20005a88
   28064:	00027cc9 	.word	0x00027cc9

00028068 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   28068:	b590      	push	{r4, r7, lr}
   2806a:	b087      	sub	sp, #28
   2806c:	af00      	add	r7, sp, #0
   2806e:	60f8      	str	r0, [r7, #12]
   28070:	60b9      	str	r1, [r7, #8]
   28072:	0019      	movs	r1, r3
   28074:	1dbb      	adds	r3, r7, #6
   28076:	801a      	strh	r2, [r3, #0]
   28078:	1d3b      	adds	r3, r7, #4
   2807a:	1c0a      	adds	r2, r1, #0
   2807c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   2807e:	68fb      	ldr	r3, [r7, #12]
   28080:	2238      	movs	r2, #56	; 0x38
   28082:	5c9b      	ldrb	r3, [r3, r2]
   28084:	b2db      	uxtb	r3, r3
   28086:	2b05      	cmp	r3, #5
   28088:	d101      	bne.n	2808e <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2808a:	2305      	movs	r3, #5
   2808c:	e07a      	b.n	28184 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   2808e:	1dbb      	adds	r3, r7, #6
   28090:	881b      	ldrh	r3, [r3, #0]
   28092:	2b00      	cmp	r3, #0
   28094:	d101      	bne.n	2809a <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   28096:	2317      	movs	r3, #23
   28098:	e074      	b.n	28184 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   2809a:	68fb      	ldr	r3, [r7, #12]
   2809c:	79db      	ldrb	r3, [r3, #7]
   2809e:	2201      	movs	r2, #1
   280a0:	4053      	eors	r3, r2
   280a2:	b2db      	uxtb	r3, r3
   280a4:	2b00      	cmp	r3, #0
   280a6:	d001      	beq.n	280ac <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   280a8:	231c      	movs	r3, #28
   280aa:	e06b      	b.n	28184 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   280ac:	2316      	movs	r3, #22
   280ae:	18fb      	adds	r3, r7, r3
   280b0:	2200      	movs	r2, #0
   280b2:	801a      	strh	r2, [r3, #0]

	while (length--) {
   280b4:	e05e      	b.n	28174 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   280b6:	68fb      	ldr	r3, [r7, #12]
   280b8:	795b      	ldrb	r3, [r3, #5]
   280ba:	2b01      	cmp	r3, #1
   280bc:	d112      	bne.n	280e4 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   280be:	46c0      	nop			; (mov r8, r8)
   280c0:	68fb      	ldr	r3, [r7, #12]
   280c2:	0018      	movs	r0, r3
   280c4:	4b31      	ldr	r3, [pc, #196]	; (2818c <spi_read_buffer_wait+0x124>)
   280c6:	4798      	blx	r3
   280c8:	0003      	movs	r3, r0
   280ca:	001a      	movs	r2, r3
   280cc:	2301      	movs	r3, #1
   280ce:	4053      	eors	r3, r2
   280d0:	b2db      	uxtb	r3, r3
   280d2:	2b00      	cmp	r3, #0
   280d4:	d1f4      	bne.n	280c0 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   280d6:	1d3b      	adds	r3, r7, #4
   280d8:	881a      	ldrh	r2, [r3, #0]
   280da:	68fb      	ldr	r3, [r7, #12]
   280dc:	0011      	movs	r1, r2
   280de:	0018      	movs	r0, r3
   280e0:	4b2b      	ldr	r3, [pc, #172]	; (28190 <spi_read_buffer_wait+0x128>)
   280e2:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   280e4:	46c0      	nop			; (mov r8, r8)
   280e6:	68fb      	ldr	r3, [r7, #12]
   280e8:	0018      	movs	r0, r3
   280ea:	4b2a      	ldr	r3, [pc, #168]	; (28194 <spi_read_buffer_wait+0x12c>)
   280ec:	4798      	blx	r3
   280ee:	0003      	movs	r3, r0
   280f0:	001a      	movs	r2, r3
   280f2:	2301      	movs	r3, #1
   280f4:	4053      	eors	r3, r2
   280f6:	b2db      	uxtb	r3, r3
   280f8:	2b00      	cmp	r3, #0
   280fa:	d1f4      	bne.n	280e6 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   280fc:	2312      	movs	r3, #18
   280fe:	18fb      	adds	r3, r7, r3
   28100:	2200      	movs	r2, #0
   28102:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   28104:	2315      	movs	r3, #21
   28106:	18fc      	adds	r4, r7, r3
   28108:	2312      	movs	r3, #18
   2810a:	18fa      	adds	r2, r7, r3
   2810c:	68fb      	ldr	r3, [r7, #12]
   2810e:	0011      	movs	r1, r2
   28110:	0018      	movs	r0, r3
   28112:	4b21      	ldr	r3, [pc, #132]	; (28198 <spi_read_buffer_wait+0x130>)
   28114:	4798      	blx	r3
   28116:	0003      	movs	r3, r0
   28118:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   2811a:	2315      	movs	r3, #21
   2811c:	18fb      	adds	r3, r7, r3
   2811e:	781b      	ldrb	r3, [r3, #0]
   28120:	2b00      	cmp	r3, #0
   28122:	d003      	beq.n	2812c <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   28124:	2315      	movs	r3, #21
   28126:	18fb      	adds	r3, r7, r3
   28128:	781b      	ldrb	r3, [r3, #0]
   2812a:	e02b      	b.n	28184 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   2812c:	2316      	movs	r3, #22
   2812e:	18fb      	adds	r3, r7, r3
   28130:	881b      	ldrh	r3, [r3, #0]
   28132:	2216      	movs	r2, #22
   28134:	18ba      	adds	r2, r7, r2
   28136:	1c59      	adds	r1, r3, #1
   28138:	8011      	strh	r1, [r2, #0]
   2813a:	001a      	movs	r2, r3
   2813c:	68bb      	ldr	r3, [r7, #8]
   2813e:	189b      	adds	r3, r3, r2
   28140:	2212      	movs	r2, #18
   28142:	18ba      	adds	r2, r7, r2
   28144:	8812      	ldrh	r2, [r2, #0]
   28146:	b2d2      	uxtb	r2, r2
   28148:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2814a:	68fb      	ldr	r3, [r7, #12]
   2814c:	799b      	ldrb	r3, [r3, #6]
   2814e:	2b01      	cmp	r3, #1
   28150:	d110      	bne.n	28174 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   28152:	2316      	movs	r3, #22
   28154:	18fb      	adds	r3, r7, r3
   28156:	881b      	ldrh	r3, [r3, #0]
   28158:	2216      	movs	r2, #22
   2815a:	18ba      	adds	r2, r7, r2
   2815c:	1c59      	adds	r1, r3, #1
   2815e:	8011      	strh	r1, [r2, #0]
   28160:	001a      	movs	r2, r3
   28162:	68bb      	ldr	r3, [r7, #8]
   28164:	189b      	adds	r3, r3, r2
   28166:	2212      	movs	r2, #18
   28168:	18ba      	adds	r2, r7, r2
   2816a:	8812      	ldrh	r2, [r2, #0]
   2816c:	0a12      	lsrs	r2, r2, #8
   2816e:	b292      	uxth	r2, r2
   28170:	b2d2      	uxtb	r2, r2
   28172:	701a      	strb	r2, [r3, #0]
	while (length--) {
   28174:	1dbb      	adds	r3, r7, #6
   28176:	881b      	ldrh	r3, [r3, #0]
   28178:	1dba      	adds	r2, r7, #6
   2817a:	1e59      	subs	r1, r3, #1
   2817c:	8011      	strh	r1, [r2, #0]
   2817e:	2b00      	cmp	r3, #0
   28180:	d199      	bne.n	280b6 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   28182:	2300      	movs	r3, #0
}
   28184:	0018      	movs	r0, r3
   28186:	46bd      	mov	sp, r7
   28188:	b007      	add	sp, #28
   2818a:	bd90      	pop	{r4, r7, pc}
   2818c:	00027ae1 	.word	0x00027ae1
   28190:	00027b31 	.word	0x00027b31
   28194:	00027b09 	.word	0x00027b09
   28198:	00027b79 	.word	0x00027b79

0002819c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   2819c:	b580      	push	{r7, lr}
   2819e:	b086      	sub	sp, #24
   281a0:	af00      	add	r7, sp, #0
   281a2:	60f8      	str	r0, [r7, #12]
   281a4:	60b9      	str	r1, [r7, #8]
   281a6:	1dfb      	adds	r3, r7, #7
   281a8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   281aa:	68fb      	ldr	r3, [r7, #12]
   281ac:	795b      	ldrb	r3, [r3, #5]
   281ae:	2b01      	cmp	r3, #1
   281b0:	d001      	beq.n	281b6 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   281b2:	2315      	movs	r3, #21
   281b4:	e05c      	b.n	28270 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   281b6:	68fb      	ldr	r3, [r7, #12]
   281b8:	7a1b      	ldrb	r3, [r3, #8]
   281ba:	2201      	movs	r2, #1
   281bc:	4053      	eors	r3, r2
   281be:	b2db      	uxtb	r3, r3
   281c0:	2b00      	cmp	r3, #0
   281c2:	d054      	beq.n	2826e <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   281c4:	1dfb      	adds	r3, r7, #7
   281c6:	781b      	ldrb	r3, [r3, #0]
   281c8:	2b00      	cmp	r3, #0
   281ca:	d04a      	beq.n	28262 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   281cc:	68bb      	ldr	r3, [r7, #8]
   281ce:	785b      	ldrb	r3, [r3, #1]
   281d0:	2b00      	cmp	r3, #0
   281d2:	d03f      	beq.n	28254 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   281d4:	68fb      	ldr	r3, [r7, #12]
   281d6:	0018      	movs	r0, r3
   281d8:	4b27      	ldr	r3, [pc, #156]	; (28278 <spi_select_slave+0xdc>)
   281da:	4798      	blx	r3
   281dc:	0003      	movs	r3, r0
   281de:	001a      	movs	r2, r3
   281e0:	2301      	movs	r3, #1
   281e2:	4053      	eors	r3, r2
   281e4:	b2db      	uxtb	r3, r3
   281e6:	2b00      	cmp	r3, #0
   281e8:	d007      	beq.n	281fa <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   281ea:	68bb      	ldr	r3, [r7, #8]
   281ec:	781b      	ldrb	r3, [r3, #0]
   281ee:	2101      	movs	r1, #1
   281f0:	0018      	movs	r0, r3
   281f2:	4b22      	ldr	r3, [pc, #136]	; (2827c <spi_select_slave+0xe0>)
   281f4:	4798      	blx	r3
					return STATUS_BUSY;
   281f6:	2305      	movs	r3, #5
   281f8:	e03a      	b.n	28270 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   281fa:	68bb      	ldr	r3, [r7, #8]
   281fc:	781b      	ldrb	r3, [r3, #0]
   281fe:	2100      	movs	r1, #0
   28200:	0018      	movs	r0, r3
   28202:	4b1e      	ldr	r3, [pc, #120]	; (2827c <spi_select_slave+0xe0>)
   28204:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   28206:	68bb      	ldr	r3, [r7, #8]
   28208:	789b      	ldrb	r3, [r3, #2]
   2820a:	b29a      	uxth	r2, r3
   2820c:	68fb      	ldr	r3, [r7, #12]
   2820e:	0011      	movs	r1, r2
   28210:	0018      	movs	r0, r3
   28212:	4b1b      	ldr	r3, [pc, #108]	; (28280 <spi_select_slave+0xe4>)
   28214:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   28216:	68fb      	ldr	r3, [r7, #12]
   28218:	79db      	ldrb	r3, [r3, #7]
   2821a:	2201      	movs	r2, #1
   2821c:	4053      	eors	r3, r2
   2821e:	b2db      	uxtb	r3, r3
   28220:	2b00      	cmp	r3, #0
   28222:	d024      	beq.n	2826e <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   28224:	46c0      	nop			; (mov r8, r8)
   28226:	68fb      	ldr	r3, [r7, #12]
   28228:	0018      	movs	r0, r3
   2822a:	4b16      	ldr	r3, [pc, #88]	; (28284 <spi_select_slave+0xe8>)
   2822c:	4798      	blx	r3
   2822e:	0003      	movs	r3, r0
   28230:	001a      	movs	r2, r3
   28232:	2301      	movs	r3, #1
   28234:	4053      	eors	r3, r2
   28236:	b2db      	uxtb	r3, r3
   28238:	2b00      	cmp	r3, #0
   2823a:	d1f4      	bne.n	28226 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   2823c:	2316      	movs	r3, #22
   2823e:	18fb      	adds	r3, r7, r3
   28240:	2200      	movs	r2, #0
   28242:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   28244:	2316      	movs	r3, #22
   28246:	18fa      	adds	r2, r7, r3
   28248:	68fb      	ldr	r3, [r7, #12]
   2824a:	0011      	movs	r1, r2
   2824c:	0018      	movs	r0, r3
   2824e:	4b0e      	ldr	r3, [pc, #56]	; (28288 <spi_select_slave+0xec>)
   28250:	4798      	blx	r3
   28252:	e00c      	b.n	2826e <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28254:	68bb      	ldr	r3, [r7, #8]
   28256:	781b      	ldrb	r3, [r3, #0]
   28258:	2100      	movs	r1, #0
   2825a:	0018      	movs	r0, r3
   2825c:	4b07      	ldr	r3, [pc, #28]	; (2827c <spi_select_slave+0xe0>)
   2825e:	4798      	blx	r3
   28260:	e005      	b.n	2826e <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   28262:	68bb      	ldr	r3, [r7, #8]
   28264:	781b      	ldrb	r3, [r3, #0]
   28266:	2101      	movs	r1, #1
   28268:	0018      	movs	r0, r3
   2826a:	4b04      	ldr	r3, [pc, #16]	; (2827c <spi_select_slave+0xe0>)
   2826c:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   2826e:	2300      	movs	r3, #0
}
   28270:	0018      	movs	r0, r3
   28272:	46bd      	mov	sp, r7
   28274:	b006      	add	sp, #24
   28276:	bd80      	pop	{r7, pc}
   28278:	00027ae1 	.word	0x00027ae1
   2827c:	000278a9 	.word	0x000278a9
   28280:	00027b31 	.word	0x00027b31
   28284:	00027b09 	.word	0x00027b09
   28288:	00027b79 	.word	0x00027b79

0002828c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   2828c:	b580      	push	{r7, lr}
   2828e:	b086      	sub	sp, #24
   28290:	af00      	add	r7, sp, #0
   28292:	60f8      	str	r0, [r7, #12]
   28294:	60b9      	str	r1, [r7, #8]
   28296:	1dbb      	adds	r3, r7, #6
   28298:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   2829a:	68fb      	ldr	r3, [r7, #12]
   2829c:	2238      	movs	r2, #56	; 0x38
   2829e:	5c9b      	ldrb	r3, [r3, r2]
   282a0:	b2db      	uxtb	r3, r3
   282a2:	2b05      	cmp	r3, #5
   282a4:	d101      	bne.n	282aa <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   282a6:	2305      	movs	r3, #5
   282a8:	e087      	b.n	283ba <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   282aa:	1dbb      	adds	r3, r7, #6
   282ac:	881b      	ldrh	r3, [r3, #0]
   282ae:	2b00      	cmp	r3, #0
   282b0:	d101      	bne.n	282b6 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   282b2:	2317      	movs	r3, #23
   282b4:	e081      	b.n	283ba <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   282b6:	2316      	movs	r3, #22
   282b8:	18fb      	adds	r3, r7, r3
   282ba:	2200      	movs	r2, #0
   282bc:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   282be:	2314      	movs	r3, #20
   282c0:	18fb      	adds	r3, r7, r3
   282c2:	1dba      	adds	r2, r7, #6
   282c4:	8812      	ldrh	r2, [r2, #0]
   282c6:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   282c8:	e05f      	b.n	2838a <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   282ca:	46c0      	nop			; (mov r8, r8)
   282cc:	68fb      	ldr	r3, [r7, #12]
   282ce:	0018      	movs	r0, r3
   282d0:	4b3c      	ldr	r3, [pc, #240]	; (283c4 <spi_write_buffer_wait+0x138>)
   282d2:	4798      	blx	r3
   282d4:	0003      	movs	r3, r0
   282d6:	001a      	movs	r2, r3
   282d8:	2301      	movs	r3, #1
   282da:	4053      	eors	r3, r2
   282dc:	b2db      	uxtb	r3, r3
   282de:	2b00      	cmp	r3, #0
   282e0:	d1f4      	bne.n	282cc <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   282e2:	2316      	movs	r3, #22
   282e4:	18fb      	adds	r3, r7, r3
   282e6:	881b      	ldrh	r3, [r3, #0]
   282e8:	2216      	movs	r2, #22
   282ea:	18ba      	adds	r2, r7, r2
   282ec:	1c59      	adds	r1, r3, #1
   282ee:	8011      	strh	r1, [r2, #0]
   282f0:	001a      	movs	r2, r3
   282f2:	68bb      	ldr	r3, [r7, #8]
   282f4:	189b      	adds	r3, r3, r2
   282f6:	781a      	ldrb	r2, [r3, #0]
   282f8:	2312      	movs	r3, #18
   282fa:	18fb      	adds	r3, r7, r3
   282fc:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   282fe:	68fb      	ldr	r3, [r7, #12]
   28300:	799b      	ldrb	r3, [r3, #6]
   28302:	2b01      	cmp	r3, #1
   28304:	d115      	bne.n	28332 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   28306:	2316      	movs	r3, #22
   28308:	18fb      	adds	r3, r7, r3
   2830a:	881b      	ldrh	r3, [r3, #0]
   2830c:	2216      	movs	r2, #22
   2830e:	18ba      	adds	r2, r7, r2
   28310:	1c59      	adds	r1, r3, #1
   28312:	8011      	strh	r1, [r2, #0]
   28314:	001a      	movs	r2, r3
   28316:	68bb      	ldr	r3, [r7, #8]
   28318:	189b      	adds	r3, r3, r2
   2831a:	781b      	ldrb	r3, [r3, #0]
   2831c:	021b      	lsls	r3, r3, #8
   2831e:	b21a      	sxth	r2, r3
   28320:	2312      	movs	r3, #18
   28322:	18fb      	adds	r3, r7, r3
   28324:	2100      	movs	r1, #0
   28326:	5e5b      	ldrsh	r3, [r3, r1]
   28328:	4313      	orrs	r3, r2
   2832a:	b21a      	sxth	r2, r3
   2832c:	2312      	movs	r3, #18
   2832e:	18fb      	adds	r3, r7, r3
   28330:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   28332:	2312      	movs	r3, #18
   28334:	18fb      	adds	r3, r7, r3
   28336:	881a      	ldrh	r2, [r3, #0]
   28338:	68fb      	ldr	r3, [r7, #12]
   2833a:	0011      	movs	r1, r2
   2833c:	0018      	movs	r0, r3
   2833e:	4b22      	ldr	r3, [pc, #136]	; (283c8 <spi_write_buffer_wait+0x13c>)
   28340:	4798      	blx	r3

		if (module->receiver_enabled) {
   28342:	68fb      	ldr	r3, [r7, #12]
   28344:	79db      	ldrb	r3, [r3, #7]
   28346:	2214      	movs	r2, #20
   28348:	18ba      	adds	r2, r7, r2
   2834a:	2114      	movs	r1, #20
   2834c:	1879      	adds	r1, r7, r1
   2834e:	8809      	ldrh	r1, [r1, #0]
   28350:	8011      	strh	r1, [r2, #0]
   28352:	2b00      	cmp	r3, #0
   28354:	d019      	beq.n	2838a <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   28356:	46c0      	nop			; (mov r8, r8)
   28358:	68fb      	ldr	r3, [r7, #12]
   2835a:	0018      	movs	r0, r3
   2835c:	4b1b      	ldr	r3, [pc, #108]	; (283cc <spi_write_buffer_wait+0x140>)
   2835e:	4798      	blx	r3
   28360:	0003      	movs	r3, r0
   28362:	001a      	movs	r2, r3
   28364:	2301      	movs	r3, #1
   28366:	4053      	eors	r3, r2
   28368:	b2db      	uxtb	r3, r3
   2836a:	2b00      	cmp	r3, #0
   2836c:	d1f4      	bne.n	28358 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   2836e:	2310      	movs	r3, #16
   28370:	18fa      	adds	r2, r7, r3
   28372:	68fb      	ldr	r3, [r7, #12]
   28374:	0011      	movs	r1, r2
   28376:	0018      	movs	r0, r3
   28378:	4b15      	ldr	r3, [pc, #84]	; (283d0 <spi_write_buffer_wait+0x144>)
   2837a:	4798      	blx	r3
			flush_length--;
   2837c:	2314      	movs	r3, #20
   2837e:	18fb      	adds	r3, r7, r3
   28380:	881a      	ldrh	r2, [r3, #0]
   28382:	2314      	movs	r3, #20
   28384:	18fb      	adds	r3, r7, r3
   28386:	3a01      	subs	r2, #1
   28388:	801a      	strh	r2, [r3, #0]
	while (length--) {
   2838a:	1dbb      	adds	r3, r7, #6
   2838c:	881b      	ldrh	r3, [r3, #0]
   2838e:	1dba      	adds	r2, r7, #6
   28390:	1e59      	subs	r1, r3, #1
   28392:	8011      	strh	r1, [r2, #0]
   28394:	2b00      	cmp	r3, #0
   28396:	d198      	bne.n	282ca <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   28398:	68fb      	ldr	r3, [r7, #12]
   2839a:	795b      	ldrb	r3, [r3, #5]
   2839c:	2b01      	cmp	r3, #1
   2839e:	d10b      	bne.n	283b8 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   283a0:	46c0      	nop			; (mov r8, r8)
   283a2:	68fb      	ldr	r3, [r7, #12]
   283a4:	0018      	movs	r0, r3
   283a6:	4b0b      	ldr	r3, [pc, #44]	; (283d4 <spi_write_buffer_wait+0x148>)
   283a8:	4798      	blx	r3
   283aa:	0003      	movs	r3, r0
   283ac:	001a      	movs	r2, r3
   283ae:	2301      	movs	r3, #1
   283b0:	4053      	eors	r3, r2
   283b2:	b2db      	uxtb	r3, r3
   283b4:	2b00      	cmp	r3, #0
   283b6:	d1f4      	bne.n	283a2 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   283b8:	2300      	movs	r3, #0
}
   283ba:	0018      	movs	r0, r3
   283bc:	46bd      	mov	sp, r7
   283be:	b006      	add	sp, #24
   283c0:	bd80      	pop	{r7, pc}
   283c2:	46c0      	nop			; (mov r8, r8)
   283c4:	00027ae1 	.word	0x00027ae1
   283c8:	00027b31 	.word	0x00027b31
   283cc:	00027b09 	.word	0x00027b09
   283d0:	00027b79 	.word	0x00027b79
   283d4:	00027ab9 	.word	0x00027ab9

000283d8 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   283d8:	b580      	push	{r7, lr}
   283da:	b084      	sub	sp, #16
   283dc:	af00      	add	r7, sp, #0
   283de:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   283e0:	687b      	ldr	r3, [r7, #4]
   283e2:	681b      	ldr	r3, [r3, #0]
   283e4:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   283e6:	687b      	ldr	r3, [r7, #4]
   283e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   283ea:	781b      	ldrb	r3, [r3, #0]
   283ec:	b2da      	uxtb	r2, r3
   283ee:	230e      	movs	r3, #14
   283f0:	18fb      	adds	r3, r7, r3
   283f2:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   283f4:	687b      	ldr	r3, [r7, #4]
   283f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   283f8:	1c5a      	adds	r2, r3, #1
   283fa:	687b      	ldr	r3, [r7, #4]
   283fc:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   283fe:	687b      	ldr	r3, [r7, #4]
   28400:	799b      	ldrb	r3, [r3, #6]
   28402:	2b01      	cmp	r3, #1
   28404:	d113      	bne.n	2842e <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   28406:	687b      	ldr	r3, [r7, #4]
   28408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2840a:	781b      	ldrb	r3, [r3, #0]
   2840c:	b2db      	uxtb	r3, r3
   2840e:	021b      	lsls	r3, r3, #8
   28410:	b21a      	sxth	r2, r3
   28412:	230e      	movs	r3, #14
   28414:	18fb      	adds	r3, r7, r3
   28416:	2100      	movs	r1, #0
   28418:	5e5b      	ldrsh	r3, [r3, r1]
   2841a:	4313      	orrs	r3, r2
   2841c:	b21a      	sxth	r2, r3
   2841e:	230e      	movs	r3, #14
   28420:	18fb      	adds	r3, r7, r3
   28422:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   28424:	687b      	ldr	r3, [r7, #4]
   28426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28428:	1c5a      	adds	r2, r3, #1
   2842a:	687b      	ldr	r3, [r7, #4]
   2842c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   2842e:	230e      	movs	r3, #14
   28430:	18fb      	adds	r3, r7, r3
   28432:	881b      	ldrh	r3, [r3, #0]
   28434:	05db      	lsls	r3, r3, #23
   28436:	0dda      	lsrs	r2, r3, #23
   28438:	68bb      	ldr	r3, [r7, #8]
   2843a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   2843c:	687b      	ldr	r3, [r7, #4]
   2843e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28440:	b29b      	uxth	r3, r3
   28442:	3b01      	subs	r3, #1
   28444:	b29a      	uxth	r2, r3
   28446:	687b      	ldr	r3, [r7, #4]
   28448:	869a      	strh	r2, [r3, #52]	; 0x34
}
   2844a:	46c0      	nop			; (mov r8, r8)
   2844c:	46bd      	mov	sp, r7
   2844e:	b004      	add	sp, #16
   28450:	bd80      	pop	{r7, pc}
	...

00028454 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   28454:	b580      	push	{r7, lr}
   28456:	b084      	sub	sp, #16
   28458:	af00      	add	r7, sp, #0
   2845a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2845c:	687b      	ldr	r3, [r7, #4]
   2845e:	681b      	ldr	r3, [r3, #0]
   28460:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   28462:	4b08      	ldr	r3, [pc, #32]	; (28484 <_spi_write_dummy+0x30>)
   28464:	881b      	ldrh	r3, [r3, #0]
   28466:	001a      	movs	r2, r3
   28468:	68fb      	ldr	r3, [r7, #12]
   2846a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   2846c:	687b      	ldr	r3, [r7, #4]
   2846e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28470:	b29b      	uxth	r3, r3
   28472:	3b01      	subs	r3, #1
   28474:	b29a      	uxth	r2, r3
   28476:	687b      	ldr	r3, [r7, #4]
   28478:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2847a:	46c0      	nop			; (mov r8, r8)
   2847c:	46bd      	mov	sp, r7
   2847e:	b004      	add	sp, #16
   28480:	bd80      	pop	{r7, pc}
   28482:	46c0      	nop			; (mov r8, r8)
   28484:	20005aa0 	.word	0x20005aa0

00028488 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   28488:	b580      	push	{r7, lr}
   2848a:	b084      	sub	sp, #16
   2848c:	af00      	add	r7, sp, #0
   2848e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28490:	687b      	ldr	r3, [r7, #4]
   28492:	681b      	ldr	r3, [r3, #0]
   28494:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   28496:	230a      	movs	r3, #10
   28498:	18fb      	adds	r3, r7, r3
   2849a:	2200      	movs	r2, #0
   2849c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   2849e:	68fb      	ldr	r3, [r7, #12]
   284a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   284a2:	230a      	movs	r3, #10
   284a4:	18fb      	adds	r3, r7, r3
   284a6:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   284a8:	687b      	ldr	r3, [r7, #4]
   284aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   284ac:	b29b      	uxth	r3, r3
   284ae:	3b01      	subs	r3, #1
   284b0:	b29a      	uxth	r2, r3
   284b2:	687b      	ldr	r3, [r7, #4]
   284b4:	865a      	strh	r2, [r3, #50]	; 0x32
}
   284b6:	46c0      	nop			; (mov r8, r8)
   284b8:	46bd      	mov	sp, r7
   284ba:	b004      	add	sp, #16
   284bc:	bd80      	pop	{r7, pc}

000284be <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   284be:	b580      	push	{r7, lr}
   284c0:	b084      	sub	sp, #16
   284c2:	af00      	add	r7, sp, #0
   284c4:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   284c6:	687b      	ldr	r3, [r7, #4]
   284c8:	681b      	ldr	r3, [r3, #0]
   284ca:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   284cc:	68fb      	ldr	r3, [r7, #12]
   284ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   284d0:	b29a      	uxth	r2, r3
   284d2:	230a      	movs	r3, #10
   284d4:	18fb      	adds	r3, r7, r3
   284d6:	05d2      	lsls	r2, r2, #23
   284d8:	0dd2      	lsrs	r2, r2, #23
   284da:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   284dc:	687b      	ldr	r3, [r7, #4]
   284de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   284e0:	220a      	movs	r2, #10
   284e2:	18ba      	adds	r2, r7, r2
   284e4:	8812      	ldrh	r2, [r2, #0]
   284e6:	b2d2      	uxtb	r2, r2
   284e8:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   284ea:	687b      	ldr	r3, [r7, #4]
   284ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   284ee:	1c5a      	adds	r2, r3, #1
   284f0:	687b      	ldr	r3, [r7, #4]
   284f2:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   284f4:	687b      	ldr	r3, [r7, #4]
   284f6:	799b      	ldrb	r3, [r3, #6]
   284f8:	2b01      	cmp	r3, #1
   284fa:	d10d      	bne.n	28518 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   284fc:	687b      	ldr	r3, [r7, #4]
   284fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28500:	220a      	movs	r2, #10
   28502:	18ba      	adds	r2, r7, r2
   28504:	8812      	ldrh	r2, [r2, #0]
   28506:	0a12      	lsrs	r2, r2, #8
   28508:	b292      	uxth	r2, r2
   2850a:	b2d2      	uxtb	r2, r2
   2850c:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   2850e:	687b      	ldr	r3, [r7, #4]
   28510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28512:	1c5a      	adds	r2, r3, #1
   28514:	687b      	ldr	r3, [r7, #4]
   28516:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   28518:	687b      	ldr	r3, [r7, #4]
   2851a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2851c:	b29b      	uxth	r3, r3
   2851e:	3b01      	subs	r3, #1
   28520:	b29a      	uxth	r2, r3
   28522:	687b      	ldr	r3, [r7, #4]
   28524:	861a      	strh	r2, [r3, #48]	; 0x30
}
   28526:	46c0      	nop			; (mov r8, r8)
   28528:	46bd      	mov	sp, r7
   2852a:	b004      	add	sp, #16
   2852c:	bd80      	pop	{r7, pc}
	...

00028530 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   28530:	b580      	push	{r7, lr}
   28532:	b086      	sub	sp, #24
   28534:	af00      	add	r7, sp, #0
   28536:	0002      	movs	r2, r0
   28538:	1dfb      	adds	r3, r7, #7
   2853a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   2853c:	1dfb      	adds	r3, r7, #7
   2853e:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   28540:	4b96      	ldr	r3, [pc, #600]	; (2879c <_spi_interrupt_handler+0x26c>)
   28542:	0092      	lsls	r2, r2, #2
   28544:	58d3      	ldr	r3, [r2, r3]
   28546:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28548:	697b      	ldr	r3, [r7, #20]
   2854a:	681b      	ldr	r3, [r3, #0]
   2854c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   2854e:	697b      	ldr	r3, [r7, #20]
   28550:	2237      	movs	r2, #55	; 0x37
   28552:	5c9a      	ldrb	r2, [r3, r2]
   28554:	697b      	ldr	r3, [r7, #20]
   28556:	2136      	movs	r1, #54	; 0x36
   28558:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   2855a:	230f      	movs	r3, #15
   2855c:	18fb      	adds	r3, r7, r3
   2855e:	400a      	ands	r2, r1
   28560:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   28562:	693b      	ldr	r3, [r7, #16]
   28564:	7e1b      	ldrb	r3, [r3, #24]
   28566:	b2da      	uxtb	r2, r3
   28568:	230c      	movs	r3, #12
   2856a:	18fb      	adds	r3, r7, r3
   2856c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   2856e:	693b      	ldr	r3, [r7, #16]
   28570:	7d9b      	ldrb	r3, [r3, #22]
   28572:	b2db      	uxtb	r3, r3
   28574:	b29a      	uxth	r2, r3
   28576:	230c      	movs	r3, #12
   28578:	18fb      	adds	r3, r7, r3
   2857a:	210c      	movs	r1, #12
   2857c:	1879      	adds	r1, r7, r1
   2857e:	8809      	ldrh	r1, [r1, #0]
   28580:	400a      	ands	r2, r1
   28582:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   28584:	230c      	movs	r3, #12
   28586:	18fb      	adds	r3, r7, r3
   28588:	881b      	ldrh	r3, [r3, #0]
   2858a:	2201      	movs	r2, #1
   2858c:	4013      	ands	r3, r2
   2858e:	d038      	beq.n	28602 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   28590:	697b      	ldr	r3, [r7, #20]
   28592:	795b      	ldrb	r3, [r3, #5]
   28594:	2b01      	cmp	r3, #1
   28596:	d110      	bne.n	285ba <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   28598:	697b      	ldr	r3, [r7, #20]
   2859a:	7a5b      	ldrb	r3, [r3, #9]
   2859c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2859e:	2b00      	cmp	r3, #0
   285a0:	d10b      	bne.n	285ba <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   285a2:	697b      	ldr	r3, [r7, #20]
   285a4:	0018      	movs	r0, r3
   285a6:	4b7e      	ldr	r3, [pc, #504]	; (287a0 <_spi_interrupt_handler+0x270>)
   285a8:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   285aa:	697b      	ldr	r3, [r7, #20]
   285ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   285ae:	b29b      	uxth	r3, r3
   285b0:	2b00      	cmp	r3, #0
   285b2:	d102      	bne.n	285ba <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   285b4:	693b      	ldr	r3, [r7, #16]
   285b6:	2201      	movs	r2, #1
   285b8:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   285ba:	697b      	ldr	r3, [r7, #20]
   285bc:	795b      	ldrb	r3, [r3, #5]
		if (0
   285be:	2b01      	cmp	r3, #1
   285c0:	d11f      	bne.n	28602 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   285c2:	697b      	ldr	r3, [r7, #20]
   285c4:	7a5b      	ldrb	r3, [r3, #9]
   285c6:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   285c8:	2b00      	cmp	r3, #0
   285ca:	d01a      	beq.n	28602 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   285cc:	697b      	ldr	r3, [r7, #20]
   285ce:	0018      	movs	r0, r3
   285d0:	4b74      	ldr	r3, [pc, #464]	; (287a4 <_spi_interrupt_handler+0x274>)
   285d2:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   285d4:	697b      	ldr	r3, [r7, #20]
   285d6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   285d8:	b29b      	uxth	r3, r3
   285da:	2b00      	cmp	r3, #0
   285dc:	d111      	bne.n	28602 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   285de:	693b      	ldr	r3, [r7, #16]
   285e0:	2201      	movs	r2, #1
   285e2:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   285e4:	697b      	ldr	r3, [r7, #20]
   285e6:	7a5b      	ldrb	r3, [r3, #9]
   285e8:	b2db      	uxtb	r3, r3
   285ea:	2b01      	cmp	r3, #1
   285ec:	d109      	bne.n	28602 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   285ee:	697b      	ldr	r3, [r7, #20]
   285f0:	79db      	ldrb	r3, [r3, #7]
   285f2:	2201      	movs	r2, #1
   285f4:	4053      	eors	r3, r2
   285f6:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   285f8:	2b00      	cmp	r3, #0
   285fa:	d002      	beq.n	28602 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   285fc:	693b      	ldr	r3, [r7, #16]
   285fe:	2202      	movs	r2, #2
   28600:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   28602:	230c      	movs	r3, #12
   28604:	18fb      	adds	r3, r7, r3
   28606:	881b      	ldrh	r3, [r3, #0]
   28608:	2204      	movs	r2, #4
   2860a:	4013      	ands	r3, r2
   2860c:	d100      	bne.n	28610 <_spi_interrupt_handler+0xe0>
   2860e:	e07e      	b.n	2870e <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   28610:	693b      	ldr	r3, [r7, #16]
   28612:	8b5b      	ldrh	r3, [r3, #26]
   28614:	b29b      	uxth	r3, r3
   28616:	001a      	movs	r2, r3
   28618:	2304      	movs	r3, #4
   2861a:	4013      	ands	r3, r2
   2861c:	d022      	beq.n	28664 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   2861e:	697b      	ldr	r3, [r7, #20]
   28620:	7a5b      	ldrb	r3, [r3, #9]
   28622:	b2db      	uxtb	r3, r3
   28624:	2b01      	cmp	r3, #1
   28626:	d014      	beq.n	28652 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   28628:	697b      	ldr	r3, [r7, #20]
   2862a:	2238      	movs	r2, #56	; 0x38
   2862c:	211e      	movs	r1, #30
   2862e:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   28630:	697b      	ldr	r3, [r7, #20]
   28632:	2203      	movs	r2, #3
   28634:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   28636:	693b      	ldr	r3, [r7, #16]
   28638:	2205      	movs	r2, #5
   2863a:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   2863c:	230f      	movs	r3, #15
   2863e:	18fb      	adds	r3, r7, r3
   28640:	781b      	ldrb	r3, [r3, #0]
   28642:	2208      	movs	r2, #8
   28644:	4013      	ands	r3, r2
   28646:	d004      	beq.n	28652 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   28648:	697b      	ldr	r3, [r7, #20]
   2864a:	699b      	ldr	r3, [r3, #24]
   2864c:	697a      	ldr	r2, [r7, #20]
   2864e:	0010      	movs	r0, r2
   28650:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   28652:	693b      	ldr	r3, [r7, #16]
   28654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   28656:	230a      	movs	r3, #10
   28658:	18fb      	adds	r3, r7, r3
   2865a:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   2865c:	693b      	ldr	r3, [r7, #16]
   2865e:	2204      	movs	r2, #4
   28660:	835a      	strh	r2, [r3, #26]
   28662:	e054      	b.n	2870e <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   28664:	697b      	ldr	r3, [r7, #20]
   28666:	7a5b      	ldrb	r3, [r3, #9]
   28668:	b2db      	uxtb	r3, r3
   2866a:	2b01      	cmp	r3, #1
   2866c:	d11e      	bne.n	286ac <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   2866e:	697b      	ldr	r3, [r7, #20]
   28670:	0018      	movs	r0, r3
   28672:	4b4d      	ldr	r3, [pc, #308]	; (287a8 <_spi_interrupt_handler+0x278>)
   28674:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   28676:	697b      	ldr	r3, [r7, #20]
   28678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2867a:	b29b      	uxth	r3, r3
   2867c:	2b00      	cmp	r3, #0
   2867e:	d146      	bne.n	2870e <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28680:	693b      	ldr	r3, [r7, #16]
   28682:	2204      	movs	r2, #4
   28684:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   28686:	697b      	ldr	r3, [r7, #20]
   28688:	2238      	movs	r2, #56	; 0x38
   2868a:	2100      	movs	r1, #0
   2868c:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   2868e:	697b      	ldr	r3, [r7, #20]
   28690:	2203      	movs	r2, #3
   28692:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   28694:	230f      	movs	r3, #15
   28696:	18fb      	adds	r3, r7, r3
   28698:	781b      	ldrb	r3, [r3, #0]
   2869a:	2201      	movs	r2, #1
   2869c:	4013      	ands	r3, r2
   2869e:	d036      	beq.n	2870e <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   286a0:	697b      	ldr	r3, [r7, #20]
   286a2:	68db      	ldr	r3, [r3, #12]
   286a4:	697a      	ldr	r2, [r7, #20]
   286a6:	0010      	movs	r0, r2
   286a8:	4798      	blx	r3
   286aa:	e030      	b.n	2870e <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   286ac:	697b      	ldr	r3, [r7, #20]
   286ae:	0018      	movs	r0, r3
   286b0:	4b3e      	ldr	r3, [pc, #248]	; (287ac <_spi_interrupt_handler+0x27c>)
   286b2:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   286b4:	697b      	ldr	r3, [r7, #20]
   286b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   286b8:	b29b      	uxth	r3, r3
   286ba:	2b00      	cmp	r3, #0
   286bc:	d127      	bne.n	2870e <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   286be:	697b      	ldr	r3, [r7, #20]
   286c0:	2238      	movs	r2, #56	; 0x38
   286c2:	2100      	movs	r1, #0
   286c4:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   286c6:	693b      	ldr	r3, [r7, #16]
   286c8:	2204      	movs	r2, #4
   286ca:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   286cc:	697b      	ldr	r3, [r7, #20]
   286ce:	7a5b      	ldrb	r3, [r3, #9]
   286d0:	b2db      	uxtb	r3, r3
   286d2:	2b02      	cmp	r3, #2
   286d4:	d10b      	bne.n	286ee <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   286d6:	230f      	movs	r3, #15
   286d8:	18fb      	adds	r3, r7, r3
   286da:	781b      	ldrb	r3, [r3, #0]
   286dc:	2204      	movs	r2, #4
   286de:	4013      	ands	r3, r2
   286e0:	d015      	beq.n	2870e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   286e2:	697b      	ldr	r3, [r7, #20]
   286e4:	695b      	ldr	r3, [r3, #20]
   286e6:	697a      	ldr	r2, [r7, #20]
   286e8:	0010      	movs	r0, r2
   286ea:	4798      	blx	r3
   286ec:	e00f      	b.n	2870e <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   286ee:	697b      	ldr	r3, [r7, #20]
   286f0:	7a5b      	ldrb	r3, [r3, #9]
   286f2:	b2db      	uxtb	r3, r3
   286f4:	2b00      	cmp	r3, #0
   286f6:	d10a      	bne.n	2870e <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   286f8:	230f      	movs	r3, #15
   286fa:	18fb      	adds	r3, r7, r3
   286fc:	781b      	ldrb	r3, [r3, #0]
   286fe:	2202      	movs	r2, #2
   28700:	4013      	ands	r3, r2
   28702:	d004      	beq.n	2870e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   28704:	697b      	ldr	r3, [r7, #20]
   28706:	691b      	ldr	r3, [r3, #16]
   28708:	697a      	ldr	r2, [r7, #20]
   2870a:	0010      	movs	r0, r2
   2870c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   2870e:	230c      	movs	r3, #12
   28710:	18fb      	adds	r3, r7, r3
   28712:	881b      	ldrh	r3, [r3, #0]
   28714:	2202      	movs	r2, #2
   28716:	4013      	ands	r3, r2
   28718:	d024      	beq.n	28764 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2871a:	697b      	ldr	r3, [r7, #20]
   2871c:	795b      	ldrb	r3, [r3, #5]
   2871e:	2b01      	cmp	r3, #1
   28720:	d120      	bne.n	28764 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   28722:	697b      	ldr	r3, [r7, #20]
   28724:	7a5b      	ldrb	r3, [r3, #9]
   28726:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   28728:	2b01      	cmp	r3, #1
   2872a:	d11b      	bne.n	28764 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   2872c:	697b      	ldr	r3, [r7, #20]
   2872e:	79db      	ldrb	r3, [r3, #7]
   28730:	2201      	movs	r2, #1
   28732:	4053      	eors	r3, r2
   28734:	b2db      	uxtb	r3, r3
   28736:	2b00      	cmp	r3, #0
   28738:	d014      	beq.n	28764 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2873a:	693b      	ldr	r3, [r7, #16]
   2873c:	2202      	movs	r2, #2
   2873e:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   28740:	697b      	ldr	r3, [r7, #20]
   28742:	2203      	movs	r2, #3
   28744:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   28746:	697b      	ldr	r3, [r7, #20]
   28748:	2238      	movs	r2, #56	; 0x38
   2874a:	2100      	movs	r1, #0
   2874c:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   2874e:	230f      	movs	r3, #15
   28750:	18fb      	adds	r3, r7, r3
   28752:	781b      	ldrb	r3, [r3, #0]
   28754:	2201      	movs	r2, #1
   28756:	4013      	ands	r3, r2
   28758:	d004      	beq.n	28764 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   2875a:	697b      	ldr	r3, [r7, #20]
   2875c:	68db      	ldr	r3, [r3, #12]
   2875e:	697a      	ldr	r2, [r7, #20]
   28760:	0010      	movs	r0, r2
   28762:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   28764:	230c      	movs	r3, #12
   28766:	18fb      	adds	r3, r7, r3
   28768:	881b      	ldrh	r3, [r3, #0]
   2876a:	2280      	movs	r2, #128	; 0x80
   2876c:	4013      	ands	r3, r2
   2876e:	d010      	beq.n	28792 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   28770:	693b      	ldr	r3, [r7, #16]
   28772:	2280      	movs	r2, #128	; 0x80
   28774:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   28776:	693b      	ldr	r3, [r7, #16]
   28778:	2280      	movs	r2, #128	; 0x80
   2877a:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   2877c:	230f      	movs	r3, #15
   2877e:	18fb      	adds	r3, r7, r3
   28780:	781b      	ldrb	r3, [r3, #0]
   28782:	2240      	movs	r2, #64	; 0x40
   28784:	4013      	ands	r3, r2
   28786:	d004      	beq.n	28792 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   28788:	697b      	ldr	r3, [r7, #20]
   2878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2878c:	697a      	ldr	r2, [r7, #20]
   2878e:	0010      	movs	r0, r2
   28790:	4798      	blx	r3
		}
	}
#  endif
}
   28792:	46c0      	nop			; (mov r8, r8)
   28794:	46bd      	mov	sp, r7
   28796:	b006      	add	sp, #24
   28798:	bd80      	pop	{r7, pc}
   2879a:	46c0      	nop			; (mov r8, r8)
   2879c:	20005a88 	.word	0x20005a88
   287a0:	00028455 	.word	0x00028455
   287a4:	000283d9 	.word	0x000283d9
   287a8:	00028489 	.word	0x00028489
   287ac:	000284bf 	.word	0x000284bf

000287b0 <system_gclk_chan_get_config_defaults>:
{
   287b0:	b580      	push	{r7, lr}
   287b2:	b082      	sub	sp, #8
   287b4:	af00      	add	r7, sp, #0
   287b6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   287b8:	687b      	ldr	r3, [r7, #4]
   287ba:	2200      	movs	r2, #0
   287bc:	701a      	strb	r2, [r3, #0]
}
   287be:	46c0      	nop			; (mov r8, r8)
   287c0:	46bd      	mov	sp, r7
   287c2:	b002      	add	sp, #8
   287c4:	bd80      	pop	{r7, pc}
	...

000287c8 <system_apb_clock_set_mask>:
{
   287c8:	b580      	push	{r7, lr}
   287ca:	b082      	sub	sp, #8
   287cc:	af00      	add	r7, sp, #0
   287ce:	0002      	movs	r2, r0
   287d0:	6039      	str	r1, [r7, #0]
   287d2:	1dfb      	adds	r3, r7, #7
   287d4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   287d6:	1dfb      	adds	r3, r7, #7
   287d8:	781b      	ldrb	r3, [r3, #0]
   287da:	2b01      	cmp	r3, #1
   287dc:	d00a      	beq.n	287f4 <system_apb_clock_set_mask+0x2c>
   287de:	2b02      	cmp	r3, #2
   287e0:	d00f      	beq.n	28802 <system_apb_clock_set_mask+0x3a>
   287e2:	2b00      	cmp	r3, #0
   287e4:	d114      	bne.n	28810 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   287e6:	4b0e      	ldr	r3, [pc, #56]	; (28820 <system_apb_clock_set_mask+0x58>)
   287e8:	4a0d      	ldr	r2, [pc, #52]	; (28820 <system_apb_clock_set_mask+0x58>)
   287ea:	6991      	ldr	r1, [r2, #24]
   287ec:	683a      	ldr	r2, [r7, #0]
   287ee:	430a      	orrs	r2, r1
   287f0:	619a      	str	r2, [r3, #24]
			break;
   287f2:	e00f      	b.n	28814 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   287f4:	4b0a      	ldr	r3, [pc, #40]	; (28820 <system_apb_clock_set_mask+0x58>)
   287f6:	4a0a      	ldr	r2, [pc, #40]	; (28820 <system_apb_clock_set_mask+0x58>)
   287f8:	69d1      	ldr	r1, [r2, #28]
   287fa:	683a      	ldr	r2, [r7, #0]
   287fc:	430a      	orrs	r2, r1
   287fe:	61da      	str	r2, [r3, #28]
			break;
   28800:	e008      	b.n	28814 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28802:	4b07      	ldr	r3, [pc, #28]	; (28820 <system_apb_clock_set_mask+0x58>)
   28804:	4a06      	ldr	r2, [pc, #24]	; (28820 <system_apb_clock_set_mask+0x58>)
   28806:	6a11      	ldr	r1, [r2, #32]
   28808:	683a      	ldr	r2, [r7, #0]
   2880a:	430a      	orrs	r2, r1
   2880c:	621a      	str	r2, [r3, #32]
			break;
   2880e:	e001      	b.n	28814 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28810:	2317      	movs	r3, #23
   28812:	e000      	b.n	28816 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28814:	2300      	movs	r3, #0
}
   28816:	0018      	movs	r0, r3
   28818:	46bd      	mov	sp, r7
   2881a:	b002      	add	sp, #8
   2881c:	bd80      	pop	{r7, pc}
   2881e:	46c0      	nop			; (mov r8, r8)
   28820:	40000400 	.word	0x40000400

00028824 <system_pinmux_get_config_defaults>:
{
   28824:	b580      	push	{r7, lr}
   28826:	b082      	sub	sp, #8
   28828:	af00      	add	r7, sp, #0
   2882a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2882c:	687b      	ldr	r3, [r7, #4]
   2882e:	2280      	movs	r2, #128	; 0x80
   28830:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28832:	687b      	ldr	r3, [r7, #4]
   28834:	2200      	movs	r2, #0
   28836:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28838:	687b      	ldr	r3, [r7, #4]
   2883a:	2201      	movs	r2, #1
   2883c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2883e:	687b      	ldr	r3, [r7, #4]
   28840:	2200      	movs	r2, #0
   28842:	70da      	strb	r2, [r3, #3]
}
   28844:	46c0      	nop			; (mov r8, r8)
   28846:	46bd      	mov	sp, r7
   28848:	b002      	add	sp, #8
   2884a:	bd80      	pop	{r7, pc}

0002884c <system_is_debugger_present>:
{
   2884c:	b580      	push	{r7, lr}
   2884e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   28850:	4b05      	ldr	r3, [pc, #20]	; (28868 <system_is_debugger_present+0x1c>)
   28852:	789b      	ldrb	r3, [r3, #2]
   28854:	b2db      	uxtb	r3, r3
   28856:	001a      	movs	r2, r3
   28858:	2302      	movs	r3, #2
   2885a:	4013      	ands	r3, r2
   2885c:	1e5a      	subs	r2, r3, #1
   2885e:	4193      	sbcs	r3, r2
   28860:	b2db      	uxtb	r3, r3
}
   28862:	0018      	movs	r0, r3
   28864:	46bd      	mov	sp, r7
   28866:	bd80      	pop	{r7, pc}
   28868:	41002000 	.word	0x41002000

0002886c <usart_is_syncing>:
{
   2886c:	b580      	push	{r7, lr}
   2886e:	b084      	sub	sp, #16
   28870:	af00      	add	r7, sp, #0
   28872:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   28874:	687b      	ldr	r3, [r7, #4]
   28876:	681b      	ldr	r3, [r3, #0]
   28878:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2887a:	68fb      	ldr	r3, [r7, #12]
   2887c:	69db      	ldr	r3, [r3, #28]
   2887e:	1e5a      	subs	r2, r3, #1
   28880:	4193      	sbcs	r3, r2
   28882:	b2db      	uxtb	r3, r3
}
   28884:	0018      	movs	r0, r3
   28886:	46bd      	mov	sp, r7
   28888:	b004      	add	sp, #16
   2888a:	bd80      	pop	{r7, pc}

0002888c <_usart_wait_for_sync>:
{
   2888c:	b580      	push	{r7, lr}
   2888e:	b082      	sub	sp, #8
   28890:	af00      	add	r7, sp, #0
   28892:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   28894:	46c0      	nop			; (mov r8, r8)
   28896:	687b      	ldr	r3, [r7, #4]
   28898:	0018      	movs	r0, r3
   2889a:	4b04      	ldr	r3, [pc, #16]	; (288ac <_usart_wait_for_sync+0x20>)
   2889c:	4798      	blx	r3
   2889e:	1e03      	subs	r3, r0, #0
   288a0:	d1f9      	bne.n	28896 <_usart_wait_for_sync+0xa>
}
   288a2:	46c0      	nop			; (mov r8, r8)
   288a4:	46bd      	mov	sp, r7
   288a6:	b002      	add	sp, #8
   288a8:	bd80      	pop	{r7, pc}
   288aa:	46c0      	nop			; (mov r8, r8)
   288ac:	0002886d 	.word	0x0002886d

000288b0 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   288b0:	b5b0      	push	{r4, r5, r7, lr}
   288b2:	b08c      	sub	sp, #48	; 0x30
   288b4:	af02      	add	r7, sp, #8
   288b6:	6078      	str	r0, [r7, #4]
   288b8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   288ba:	687b      	ldr	r3, [r7, #4]
   288bc:	681b      	ldr	r3, [r3, #0]
   288be:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   288c0:	687b      	ldr	r3, [r7, #4]
   288c2:	681b      	ldr	r3, [r3, #0]
   288c4:	0018      	movs	r0, r3
   288c6:	4bab      	ldr	r3, [pc, #684]	; (28b74 <_usart_set_config+0x2c4>)
   288c8:	4798      	blx	r3
   288ca:	0003      	movs	r3, r0
   288cc:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   288ce:	697b      	ldr	r3, [r7, #20]
   288d0:	3314      	adds	r3, #20
   288d2:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   288d4:	2300      	movs	r3, #0
   288d6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   288d8:	2300      	movs	r3, #0
   288da:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   288dc:	230a      	movs	r3, #10
   288de:	18fb      	adds	r3, r7, r3
   288e0:	2200      	movs	r2, #0
   288e2:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   288e4:	231f      	movs	r3, #31
   288e6:	18fb      	adds	r3, r7, r3
   288e8:	2200      	movs	r2, #0
   288ea:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   288ec:	231e      	movs	r3, #30
   288ee:	18fb      	adds	r3, r7, r3
   288f0:	2210      	movs	r2, #16
   288f2:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   288f4:	683b      	ldr	r3, [r7, #0]
   288f6:	8a1b      	ldrh	r3, [r3, #16]
   288f8:	2280      	movs	r2, #128	; 0x80
   288fa:	01d2      	lsls	r2, r2, #7
   288fc:	4293      	cmp	r3, r2
   288fe:	d01c      	beq.n	2893a <_usart_set_config+0x8a>
   28900:	2280      	movs	r2, #128	; 0x80
   28902:	01d2      	lsls	r2, r2, #7
   28904:	4293      	cmp	r3, r2
   28906:	dc06      	bgt.n	28916 <_usart_set_config+0x66>
   28908:	2b00      	cmp	r3, #0
   2890a:	d00d      	beq.n	28928 <_usart_set_config+0x78>
   2890c:	2280      	movs	r2, #128	; 0x80
   2890e:	0192      	lsls	r2, r2, #6
   28910:	4293      	cmp	r3, r2
   28912:	d024      	beq.n	2895e <_usart_set_config+0xae>
   28914:	e035      	b.n	28982 <_usart_set_config+0xd2>
   28916:	22c0      	movs	r2, #192	; 0xc0
   28918:	01d2      	lsls	r2, r2, #7
   2891a:	4293      	cmp	r3, r2
   2891c:	d028      	beq.n	28970 <_usart_set_config+0xc0>
   2891e:	2280      	movs	r2, #128	; 0x80
   28920:	0212      	lsls	r2, r2, #8
   28922:	4293      	cmp	r3, r2
   28924:	d012      	beq.n	2894c <_usart_set_config+0x9c>
   28926:	e02c      	b.n	28982 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28928:	231f      	movs	r3, #31
   2892a:	18fb      	adds	r3, r7, r3
   2892c:	2200      	movs	r2, #0
   2892e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28930:	231e      	movs	r3, #30
   28932:	18fb      	adds	r3, r7, r3
   28934:	2210      	movs	r2, #16
   28936:	701a      	strb	r2, [r3, #0]
			break;
   28938:	e023      	b.n	28982 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2893a:	231f      	movs	r3, #31
   2893c:	18fb      	adds	r3, r7, r3
   2893e:	2200      	movs	r2, #0
   28940:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28942:	231e      	movs	r3, #30
   28944:	18fb      	adds	r3, r7, r3
   28946:	2208      	movs	r2, #8
   28948:	701a      	strb	r2, [r3, #0]
			break;
   2894a:	e01a      	b.n	28982 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2894c:	231f      	movs	r3, #31
   2894e:	18fb      	adds	r3, r7, r3
   28950:	2200      	movs	r2, #0
   28952:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   28954:	231e      	movs	r3, #30
   28956:	18fb      	adds	r3, r7, r3
   28958:	2203      	movs	r2, #3
   2895a:	701a      	strb	r2, [r3, #0]
			break;
   2895c:	e011      	b.n	28982 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2895e:	231f      	movs	r3, #31
   28960:	18fb      	adds	r3, r7, r3
   28962:	2201      	movs	r2, #1
   28964:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28966:	231e      	movs	r3, #30
   28968:	18fb      	adds	r3, r7, r3
   2896a:	2210      	movs	r2, #16
   2896c:	701a      	strb	r2, [r3, #0]
			break;
   2896e:	e008      	b.n	28982 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   28970:	231f      	movs	r3, #31
   28972:	18fb      	adds	r3, r7, r3
   28974:	2201      	movs	r2, #1
   28976:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28978:	231e      	movs	r3, #30
   2897a:	18fb      	adds	r3, r7, r3
   2897c:	2208      	movs	r2, #8
   2897e:	701a      	strb	r2, [r3, #0]
			break;
   28980:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   28982:	683b      	ldr	r3, [r7, #0]
   28984:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   28986:	683b      	ldr	r3, [r7, #0]
   28988:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2898a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   2898c:	683b      	ldr	r3, [r7, #0]
   2898e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   28990:	4313      	orrs	r3, r2
		config->sample_rate |
   28992:	683a      	ldr	r2, [r7, #0]
   28994:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   28996:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   28998:	683a      	ldr	r2, [r7, #0]
   2899a:	7e12      	ldrb	r2, [r2, #24]
   2899c:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   2899e:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   289a0:	683a      	ldr	r2, [r7, #0]
   289a2:	2126      	movs	r1, #38	; 0x26
   289a4:	5c52      	ldrb	r2, [r2, r1]
   289a6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   289a8:	4313      	orrs	r3, r2
   289aa:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   289ac:	231d      	movs	r3, #29
   289ae:	18fb      	adds	r3, r7, r3
   289b0:	2200      	movs	r2, #0
   289b2:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   289b4:	683b      	ldr	r3, [r7, #0]
   289b6:	685b      	ldr	r3, [r3, #4]
   289b8:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   289ba:	68fb      	ldr	r3, [r7, #12]
   289bc:	2b00      	cmp	r3, #0
   289be:	d01e      	beq.n	289fe <_usart_set_config+0x14e>
   289c0:	2280      	movs	r2, #128	; 0x80
   289c2:	0552      	lsls	r2, r2, #21
   289c4:	4293      	cmp	r3, r2
   289c6:	d14f      	bne.n	28a68 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   289c8:	683b      	ldr	r3, [r7, #0]
   289ca:	2227      	movs	r2, #39	; 0x27
   289cc:	5c9b      	ldrb	r3, [r3, r2]
   289ce:	2201      	movs	r2, #1
   289d0:	4053      	eors	r3, r2
   289d2:	b2db      	uxtb	r3, r3
   289d4:	2b00      	cmp	r3, #0
   289d6:	d046      	beq.n	28a66 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   289d8:	683b      	ldr	r3, [r7, #0]
   289da:	6a1d      	ldr	r5, [r3, #32]
   289dc:	693b      	ldr	r3, [r7, #16]
   289de:	b2db      	uxtb	r3, r3
   289e0:	0018      	movs	r0, r3
   289e2:	4b65      	ldr	r3, [pc, #404]	; (28b78 <_usart_set_config+0x2c8>)
   289e4:	4798      	blx	r3
   289e6:	0001      	movs	r1, r0
   289e8:	231d      	movs	r3, #29
   289ea:	18fc      	adds	r4, r7, r3
   289ec:	230a      	movs	r3, #10
   289ee:	18fb      	adds	r3, r7, r3
   289f0:	001a      	movs	r2, r3
   289f2:	0028      	movs	r0, r5
   289f4:	4b61      	ldr	r3, [pc, #388]	; (28b7c <_usart_set_config+0x2cc>)
   289f6:	4798      	blx	r3
   289f8:	0003      	movs	r3, r0
   289fa:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   289fc:	e033      	b.n	28a66 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   289fe:	683b      	ldr	r3, [r7, #0]
   28a00:	2227      	movs	r2, #39	; 0x27
   28a02:	5c9b      	ldrb	r3, [r3, r2]
   28a04:	2b00      	cmp	r3, #0
   28a06:	d014      	beq.n	28a32 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   28a08:	683b      	ldr	r3, [r7, #0]
   28a0a:	6a18      	ldr	r0, [r3, #32]
   28a0c:	683b      	ldr	r3, [r7, #0]
   28a0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   28a10:	231d      	movs	r3, #29
   28a12:	18fc      	adds	r4, r7, r3
   28a14:	231f      	movs	r3, #31
   28a16:	18fb      	adds	r3, r7, r3
   28a18:	781d      	ldrb	r5, [r3, #0]
   28a1a:	230a      	movs	r3, #10
   28a1c:	18fa      	adds	r2, r7, r3
   28a1e:	231e      	movs	r3, #30
   28a20:	18fb      	adds	r3, r7, r3
   28a22:	781b      	ldrb	r3, [r3, #0]
   28a24:	9300      	str	r3, [sp, #0]
   28a26:	002b      	movs	r3, r5
   28a28:	4d55      	ldr	r5, [pc, #340]	; (28b80 <_usart_set_config+0x2d0>)
   28a2a:	47a8      	blx	r5
   28a2c:	0003      	movs	r3, r0
   28a2e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   28a30:	e01a      	b.n	28a68 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   28a32:	683b      	ldr	r3, [r7, #0]
   28a34:	6a1d      	ldr	r5, [r3, #32]
   28a36:	693b      	ldr	r3, [r7, #16]
   28a38:	b2db      	uxtb	r3, r3
   28a3a:	0018      	movs	r0, r3
   28a3c:	4b4e      	ldr	r3, [pc, #312]	; (28b78 <_usart_set_config+0x2c8>)
   28a3e:	4798      	blx	r3
				status_code =
   28a40:	231d      	movs	r3, #29
   28a42:	18fc      	adds	r4, r7, r3
   28a44:	231f      	movs	r3, #31
   28a46:	18fb      	adds	r3, r7, r3
   28a48:	7819      	ldrb	r1, [r3, #0]
   28a4a:	230a      	movs	r3, #10
   28a4c:	18fa      	adds	r2, r7, r3
   28a4e:	231e      	movs	r3, #30
   28a50:	18fb      	adds	r3, r7, r3
   28a52:	781b      	ldrb	r3, [r3, #0]
   28a54:	9300      	str	r3, [sp, #0]
   28a56:	000b      	movs	r3, r1
   28a58:	0001      	movs	r1, r0
   28a5a:	0028      	movs	r0, r5
   28a5c:	4d48      	ldr	r5, [pc, #288]	; (28b80 <_usart_set_config+0x2d0>)
   28a5e:	47a8      	blx	r5
   28a60:	0003      	movs	r3, r0
   28a62:	7023      	strb	r3, [r4, #0]
			break;
   28a64:	e000      	b.n	28a68 <_usart_set_config+0x1b8>
			break;
   28a66:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   28a68:	231d      	movs	r3, #29
   28a6a:	18fb      	adds	r3, r7, r3
   28a6c:	781b      	ldrb	r3, [r3, #0]
   28a6e:	2b00      	cmp	r3, #0
   28a70:	d003      	beq.n	28a7a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   28a72:	231d      	movs	r3, #29
   28a74:	18fb      	adds	r3, r7, r3
   28a76:	781b      	ldrb	r3, [r3, #0]
   28a78:	e077      	b.n	28b6a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   28a7a:	683b      	ldr	r3, [r7, #0]
   28a7c:	7e5b      	ldrb	r3, [r3, #25]
   28a7e:	2b00      	cmp	r3, #0
   28a80:	d003      	beq.n	28a8a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   28a82:	683b      	ldr	r3, [r7, #0]
   28a84:	7e9a      	ldrb	r2, [r3, #26]
   28a86:	69bb      	ldr	r3, [r7, #24]
   28a88:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   28a8a:	687b      	ldr	r3, [r7, #4]
   28a8c:	0018      	movs	r0, r3
   28a8e:	4b3d      	ldr	r3, [pc, #244]	; (28b84 <_usart_set_config+0x2d4>)
   28a90:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   28a92:	230a      	movs	r3, #10
   28a94:	18fb      	adds	r3, r7, r3
   28a96:	881a      	ldrh	r2, [r3, #0]
   28a98:	69bb      	ldr	r3, [r7, #24]
   28a9a:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   28a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28a9e:	68fb      	ldr	r3, [r7, #12]
   28aa0:	4313      	orrs	r3, r2
   28aa2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   28aa4:	683b      	ldr	r3, [r7, #0]
   28aa6:	2227      	movs	r2, #39	; 0x27
   28aa8:	5c9b      	ldrb	r3, [r3, r2]
   28aaa:	2201      	movs	r2, #1
   28aac:	4053      	eors	r3, r2
   28aae:	b2db      	uxtb	r3, r3
   28ab0:	2b00      	cmp	r3, #0
   28ab2:	d003      	beq.n	28abc <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   28ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28ab6:	2204      	movs	r2, #4
   28ab8:	4313      	orrs	r3, r2
   28aba:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28abc:	683b      	ldr	r3, [r7, #0]
   28abe:	7e5b      	ldrb	r3, [r3, #25]
   28ac0:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28ac2:	683b      	ldr	r3, [r7, #0]
   28ac4:	7f1b      	ldrb	r3, [r3, #28]
   28ac6:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28ac8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   28aca:	683b      	ldr	r3, [r7, #0]
   28acc:	7f5b      	ldrb	r3, [r3, #29]
   28ace:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28ad0:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28ad2:	683b      	ldr	r3, [r7, #0]
   28ad4:	2124      	movs	r1, #36	; 0x24
   28ad6:	5c5b      	ldrb	r3, [r3, r1]
   28ad8:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   28ada:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   28adc:	683b      	ldr	r3, [r7, #0]
   28ade:	2125      	movs	r1, #37	; 0x25
   28ae0:	5c5b      	ldrb	r3, [r3, r1]
   28ae2:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28ae4:	4313      	orrs	r3, r2
	ctrlb =  
   28ae6:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   28ae8:	683b      	ldr	r3, [r7, #0]
   28aea:	7a9b      	ldrb	r3, [r3, #10]
   28aec:	001a      	movs	r2, r3
   28aee:	6a3b      	ldr	r3, [r7, #32]
   28af0:	4313      	orrs	r3, r2
   28af2:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   28af4:	683b      	ldr	r3, [r7, #0]
   28af6:	7adb      	ldrb	r3, [r3, #11]
   28af8:	001a      	movs	r2, r3
   28afa:	6a3b      	ldr	r3, [r7, #32]
   28afc:	4313      	orrs	r3, r2
   28afe:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   28b00:	683b      	ldr	r3, [r7, #0]
   28b02:	891b      	ldrh	r3, [r3, #8]
   28b04:	2bff      	cmp	r3, #255	; 0xff
   28b06:	d00b      	beq.n	28b20 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   28b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28b0a:	2280      	movs	r2, #128	; 0x80
   28b0c:	0452      	lsls	r2, r2, #17
   28b0e:	4313      	orrs	r3, r2
   28b10:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   28b12:	683b      	ldr	r3, [r7, #0]
   28b14:	891b      	ldrh	r3, [r3, #8]
   28b16:	001a      	movs	r2, r3
   28b18:	6a3b      	ldr	r3, [r7, #32]
   28b1a:	4313      	orrs	r3, r2
   28b1c:	623b      	str	r3, [r7, #32]
   28b1e:	e008      	b.n	28b32 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   28b20:	683b      	ldr	r3, [r7, #0]
   28b22:	7edb      	ldrb	r3, [r3, #27]
   28b24:	2b00      	cmp	r3, #0
   28b26:	d004      	beq.n	28b32 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   28b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28b2a:	2280      	movs	r2, #128	; 0x80
   28b2c:	04d2      	lsls	r2, r2, #19
   28b2e:	4313      	orrs	r3, r2
   28b30:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   28b32:	683b      	ldr	r3, [r7, #0]
   28b34:	222c      	movs	r2, #44	; 0x2c
   28b36:	5c9b      	ldrb	r3, [r3, r2]
   28b38:	2b00      	cmp	r3, #0
   28b3a:	d103      	bne.n	28b44 <_usart_set_config+0x294>
   28b3c:	4b12      	ldr	r3, [pc, #72]	; (28b88 <_usart_set_config+0x2d8>)
   28b3e:	4798      	blx	r3
   28b40:	1e03      	subs	r3, r0, #0
   28b42:	d003      	beq.n	28b4c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   28b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28b46:	2280      	movs	r2, #128	; 0x80
   28b48:	4313      	orrs	r3, r2
   28b4a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   28b4c:	687b      	ldr	r3, [r7, #4]
   28b4e:	0018      	movs	r0, r3
   28b50:	4b0c      	ldr	r3, [pc, #48]	; (28b84 <_usart_set_config+0x2d4>)
   28b52:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   28b54:	69bb      	ldr	r3, [r7, #24]
   28b56:	6a3a      	ldr	r2, [r7, #32]
   28b58:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   28b5a:	687b      	ldr	r3, [r7, #4]
   28b5c:	0018      	movs	r0, r3
   28b5e:	4b09      	ldr	r3, [pc, #36]	; (28b84 <_usart_set_config+0x2d4>)
   28b60:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   28b62:	69bb      	ldr	r3, [r7, #24]
   28b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28b66:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   28b68:	2300      	movs	r3, #0
}
   28b6a:	0018      	movs	r0, r3
   28b6c:	46bd      	mov	sp, r7
   28b6e:	b00a      	add	sp, #40	; 0x28
   28b70:	bdb0      	pop	{r4, r5, r7, pc}
   28b72:	46c0      	nop			; (mov r8, r8)
   28b74:	00027659 	.word	0x00027659
   28b78:	0002a00d 	.word	0x0002a00d
   28b7c:	000271d3 	.word	0x000271d3
   28b80:	00027251 	.word	0x00027251
   28b84:	0002888d 	.word	0x0002888d
   28b88:	0002884d 	.word	0x0002884d

00028b8c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   28b8c:	b590      	push	{r4, r7, lr}
   28b8e:	b093      	sub	sp, #76	; 0x4c
   28b90:	af00      	add	r7, sp, #0
   28b92:	60f8      	str	r0, [r7, #12]
   28b94:	60b9      	str	r1, [r7, #8]
   28b96:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   28b98:	233b      	movs	r3, #59	; 0x3b
   28b9a:	18fb      	adds	r3, r7, r3
   28b9c:	2200      	movs	r2, #0
   28b9e:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   28ba0:	68fb      	ldr	r3, [r7, #12]
   28ba2:	68ba      	ldr	r2, [r7, #8]
   28ba4:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28ba6:	68fb      	ldr	r3, [r7, #12]
   28ba8:	681b      	ldr	r3, [r3, #0]
   28baa:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28bac:	68fb      	ldr	r3, [r7, #12]
   28bae:	681b      	ldr	r3, [r3, #0]
   28bb0:	0018      	movs	r0, r3
   28bb2:	4b86      	ldr	r3, [pc, #536]	; (28dcc <usart_init+0x240>)
   28bb4:	4798      	blx	r3
   28bb6:	0003      	movs	r3, r0
   28bb8:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   28bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28bbc:	3302      	adds	r3, #2
   28bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28bc2:	3314      	adds	r3, #20
   28bc4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   28bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28bc8:	681b      	ldr	r3, [r3, #0]
   28bca:	2201      	movs	r2, #1
   28bcc:	4013      	ands	r3, r2
   28bce:	d001      	beq.n	28bd4 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   28bd0:	2305      	movs	r3, #5
   28bd2:	e0f6      	b.n	28dc2 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   28bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28bd6:	681b      	ldr	r3, [r3, #0]
   28bd8:	2202      	movs	r2, #2
   28bda:	4013      	ands	r3, r2
   28bdc:	d001      	beq.n	28be2 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   28bde:	231c      	movs	r3, #28
   28be0:	e0ef      	b.n	28dc2 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28be2:	2201      	movs	r2, #1
   28be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28be6:	409a      	lsls	r2, r3
   28be8:	0013      	movs	r3, r2
   28bea:	0019      	movs	r1, r3
   28bec:	2002      	movs	r0, #2
   28bee:	4b78      	ldr	r3, [pc, #480]	; (28dd0 <usart_init+0x244>)
   28bf0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28bf2:	2324      	movs	r3, #36	; 0x24
   28bf4:	18fb      	adds	r3, r7, r3
   28bf6:	0018      	movs	r0, r3
   28bf8:	4b76      	ldr	r3, [pc, #472]	; (28dd4 <usart_init+0x248>)
   28bfa:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28bfc:	687b      	ldr	r3, [r7, #4]
   28bfe:	222d      	movs	r2, #45	; 0x2d
   28c00:	5c9a      	ldrb	r2, [r3, r2]
   28c02:	2324      	movs	r3, #36	; 0x24
   28c04:	18fb      	adds	r3, r7, r3
   28c06:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28c0a:	b2db      	uxtb	r3, r3
   28c0c:	2224      	movs	r2, #36	; 0x24
   28c0e:	18ba      	adds	r2, r7, r2
   28c10:	0011      	movs	r1, r2
   28c12:	0018      	movs	r0, r3
   28c14:	4b70      	ldr	r3, [pc, #448]	; (28dd8 <usart_init+0x24c>)
   28c16:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28c1a:	b2db      	uxtb	r3, r3
   28c1c:	0018      	movs	r0, r3
   28c1e:	4b6f      	ldr	r3, [pc, #444]	; (28ddc <usart_init+0x250>)
   28c20:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   28c22:	687b      	ldr	r3, [r7, #4]
   28c24:	222d      	movs	r2, #45	; 0x2d
   28c26:	5c9b      	ldrb	r3, [r3, r2]
   28c28:	2100      	movs	r1, #0
   28c2a:	0018      	movs	r0, r3
   28c2c:	4b6c      	ldr	r3, [pc, #432]	; (28de0 <usart_init+0x254>)
   28c2e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   28c30:	687b      	ldr	r3, [r7, #4]
   28c32:	7ada      	ldrb	r2, [r3, #11]
   28c34:	68fb      	ldr	r3, [r7, #12]
   28c36:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   28c38:	687b      	ldr	r3, [r7, #4]
   28c3a:	2224      	movs	r2, #36	; 0x24
   28c3c:	5c9a      	ldrb	r2, [r3, r2]
   28c3e:	68fb      	ldr	r3, [r7, #12]
   28c40:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   28c42:	687b      	ldr	r3, [r7, #4]
   28c44:	2225      	movs	r2, #37	; 0x25
   28c46:	5c9a      	ldrb	r2, [r3, r2]
   28c48:	68fb      	ldr	r3, [r7, #12]
   28c4a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   28c4c:	687b      	ldr	r3, [r7, #4]
   28c4e:	7eda      	ldrb	r2, [r3, #27]
   28c50:	68fb      	ldr	r3, [r7, #12]
   28c52:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   28c54:	687b      	ldr	r3, [r7, #4]
   28c56:	7f1a      	ldrb	r2, [r3, #28]
   28c58:	68fb      	ldr	r3, [r7, #12]
   28c5a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   28c5c:	233b      	movs	r3, #59	; 0x3b
   28c5e:	18fc      	adds	r4, r7, r3
   28c60:	687a      	ldr	r2, [r7, #4]
   28c62:	68fb      	ldr	r3, [r7, #12]
   28c64:	0011      	movs	r1, r2
   28c66:	0018      	movs	r0, r3
   28c68:	4b5e      	ldr	r3, [pc, #376]	; (28de4 <usart_init+0x258>)
   28c6a:	4798      	blx	r3
   28c6c:	0003      	movs	r3, r0
   28c6e:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   28c70:	233b      	movs	r3, #59	; 0x3b
   28c72:	18fb      	adds	r3, r7, r3
   28c74:	781b      	ldrb	r3, [r3, #0]
   28c76:	2b00      	cmp	r3, #0
   28c78:	d003      	beq.n	28c82 <usart_init+0xf6>
		return status_code;
   28c7a:	233b      	movs	r3, #59	; 0x3b
   28c7c:	18fb      	adds	r3, r7, r3
   28c7e:	781b      	ldrb	r3, [r3, #0]
   28c80:	e09f      	b.n	28dc2 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28c82:	2320      	movs	r3, #32
   28c84:	18fb      	adds	r3, r7, r3
   28c86:	0018      	movs	r0, r3
   28c88:	4b57      	ldr	r3, [pc, #348]	; (28de8 <usart_init+0x25c>)
   28c8a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28c8c:	2320      	movs	r3, #32
   28c8e:	18fb      	adds	r3, r7, r3
   28c90:	2200      	movs	r2, #0
   28c92:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28c94:	2320      	movs	r3, #32
   28c96:	18fb      	adds	r3, r7, r3
   28c98:	2200      	movs	r2, #0
   28c9a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28c9c:	687b      	ldr	r3, [r7, #4]
   28c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   28ca0:	2310      	movs	r3, #16
   28ca2:	18fb      	adds	r3, r7, r3
   28ca4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   28ca6:	687b      	ldr	r3, [r7, #4]
   28ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   28caa:	2310      	movs	r3, #16
   28cac:	18fb      	adds	r3, r7, r3
   28cae:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28cb0:	687b      	ldr	r3, [r7, #4]
   28cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   28cb4:	2310      	movs	r3, #16
   28cb6:	18fb      	adds	r3, r7, r3
   28cb8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   28cba:	687b      	ldr	r3, [r7, #4]
   28cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   28cbe:	2310      	movs	r3, #16
   28cc0:	18fb      	adds	r3, r7, r3
   28cc2:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28cc4:	2347      	movs	r3, #71	; 0x47
   28cc6:	18fb      	adds	r3, r7, r3
   28cc8:	2200      	movs	r2, #0
   28cca:	701a      	strb	r2, [r3, #0]
   28ccc:	e02c      	b.n	28d28 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   28cce:	2347      	movs	r3, #71	; 0x47
   28cd0:	18fb      	adds	r3, r7, r3
   28cd2:	781a      	ldrb	r2, [r3, #0]
   28cd4:	2310      	movs	r3, #16
   28cd6:	18fb      	adds	r3, r7, r3
   28cd8:	0092      	lsls	r2, r2, #2
   28cda:	58d3      	ldr	r3, [r2, r3]
   28cdc:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   28cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28ce0:	2b00      	cmp	r3, #0
   28ce2:	d109      	bne.n	28cf8 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28ce4:	2347      	movs	r3, #71	; 0x47
   28ce6:	18fb      	adds	r3, r7, r3
   28ce8:	781a      	ldrb	r2, [r3, #0]
   28cea:	68bb      	ldr	r3, [r7, #8]
   28cec:	0011      	movs	r1, r2
   28cee:	0018      	movs	r0, r3
   28cf0:	4b3e      	ldr	r3, [pc, #248]	; (28dec <usart_init+0x260>)
   28cf2:	4798      	blx	r3
   28cf4:	0003      	movs	r3, r0
   28cf6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28cfa:	3301      	adds	r3, #1
   28cfc:	d00d      	beq.n	28d1a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   28cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28d00:	b2da      	uxtb	r2, r3
   28d02:	2320      	movs	r3, #32
   28d04:	18fb      	adds	r3, r7, r3
   28d06:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28d0a:	0c1b      	lsrs	r3, r3, #16
   28d0c:	b2db      	uxtb	r3, r3
   28d0e:	2220      	movs	r2, #32
   28d10:	18ba      	adds	r2, r7, r2
   28d12:	0011      	movs	r1, r2
   28d14:	0018      	movs	r0, r3
   28d16:	4b36      	ldr	r3, [pc, #216]	; (28df0 <usart_init+0x264>)
   28d18:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   28d1a:	2347      	movs	r3, #71	; 0x47
   28d1c:	18fb      	adds	r3, r7, r3
   28d1e:	781a      	ldrb	r2, [r3, #0]
   28d20:	2347      	movs	r3, #71	; 0x47
   28d22:	18fb      	adds	r3, r7, r3
   28d24:	3201      	adds	r2, #1
   28d26:	701a      	strb	r2, [r3, #0]
   28d28:	2347      	movs	r3, #71	; 0x47
   28d2a:	18fb      	adds	r3, r7, r3
   28d2c:	781b      	ldrb	r3, [r3, #0]
   28d2e:	2b03      	cmp	r3, #3
   28d30:	d9cd      	bls.n	28cce <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28d32:	2300      	movs	r3, #0
   28d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   28d36:	e00a      	b.n	28d4e <usart_init+0x1c2>
		module->callback[i]            = NULL;
   28d38:	68fa      	ldr	r2, [r7, #12]
   28d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28d3c:	3302      	adds	r3, #2
   28d3e:	009b      	lsls	r3, r3, #2
   28d40:	18d3      	adds	r3, r2, r3
   28d42:	3304      	adds	r3, #4
   28d44:	2200      	movs	r2, #0
   28d46:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28d4a:	3301      	adds	r3, #1
   28d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   28d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28d50:	2b05      	cmp	r3, #5
   28d52:	d9f1      	bls.n	28d38 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   28d54:	68fb      	ldr	r3, [r7, #12]
   28d56:	2200      	movs	r2, #0
   28d58:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   28d5a:	68fb      	ldr	r3, [r7, #12]
   28d5c:	2200      	movs	r2, #0
   28d5e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   28d60:	68fb      	ldr	r3, [r7, #12]
   28d62:	2200      	movs	r2, #0
   28d64:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   28d66:	68fb      	ldr	r3, [r7, #12]
   28d68:	2200      	movs	r2, #0
   28d6a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   28d6c:	68fb      	ldr	r3, [r7, #12]
   28d6e:	2230      	movs	r2, #48	; 0x30
   28d70:	2100      	movs	r1, #0
   28d72:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   28d74:	68fb      	ldr	r3, [r7, #12]
   28d76:	2231      	movs	r2, #49	; 0x31
   28d78:	2100      	movs	r1, #0
   28d7a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   28d7c:	68fb      	ldr	r3, [r7, #12]
   28d7e:	2232      	movs	r2, #50	; 0x32
   28d80:	2100      	movs	r1, #0
   28d82:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   28d84:	68fb      	ldr	r3, [r7, #12]
   28d86:	2233      	movs	r2, #51	; 0x33
   28d88:	2100      	movs	r1, #0
   28d8a:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   28d8c:	68fb      	ldr	r3, [r7, #12]
   28d8e:	681b      	ldr	r3, [r3, #0]
   28d90:	2227      	movs	r2, #39	; 0x27
   28d92:	18bc      	adds	r4, r7, r2
   28d94:	0018      	movs	r0, r3
   28d96:	4b0d      	ldr	r3, [pc, #52]	; (28dcc <usart_init+0x240>)
   28d98:	4798      	blx	r3
   28d9a:	0003      	movs	r3, r0
   28d9c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   28d9e:	4a15      	ldr	r2, [pc, #84]	; (28df4 <usart_init+0x268>)
   28da0:	2327      	movs	r3, #39	; 0x27
   28da2:	18fb      	adds	r3, r7, r3
   28da4:	781b      	ldrb	r3, [r3, #0]
   28da6:	0011      	movs	r1, r2
   28da8:	0018      	movs	r0, r3
   28daa:	4b13      	ldr	r3, [pc, #76]	; (28df8 <usart_init+0x26c>)
   28dac:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28dae:	2327      	movs	r3, #39	; 0x27
   28db0:	18fb      	adds	r3, r7, r3
   28db2:	781a      	ldrb	r2, [r3, #0]
   28db4:	4b11      	ldr	r3, [pc, #68]	; (28dfc <usart_init+0x270>)
   28db6:	0092      	lsls	r2, r2, #2
   28db8:	68f9      	ldr	r1, [r7, #12]
   28dba:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   28dbc:	233b      	movs	r3, #59	; 0x3b
   28dbe:	18fb      	adds	r3, r7, r3
   28dc0:	781b      	ldrb	r3, [r3, #0]
}
   28dc2:	0018      	movs	r0, r3
   28dc4:	46bd      	mov	sp, r7
   28dc6:	b013      	add	sp, #76	; 0x4c
   28dc8:	bd90      	pop	{r4, r7, pc}
   28dca:	46c0      	nop			; (mov r8, r8)
   28dcc:	00027659 	.word	0x00027659
   28dd0:	000287c9 	.word	0x000287c9
   28dd4:	000287b1 	.word	0x000287b1
   28dd8:	00029ee9 	.word	0x00029ee9
   28ddc:	00029f2d 	.word	0x00029f2d
   28de0:	00027411 	.word	0x00027411
   28de4:	000288b1 	.word	0x000288b1
   28de8:	00028825 	.word	0x00028825
   28dec:	0002749d 	.word	0x0002749d
   28df0:	0002a249 	.word	0x0002a249
   28df4:	00029069 	.word	0x00029069
   28df8:	000276bd 	.word	0x000276bd
   28dfc:	20005a88 	.word	0x20005a88

00028e00 <system_interrupt_enter_critical_section>:
{
   28e00:	b580      	push	{r7, lr}
   28e02:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28e04:	4b02      	ldr	r3, [pc, #8]	; (28e10 <system_interrupt_enter_critical_section+0x10>)
   28e06:	4798      	blx	r3
}
   28e08:	46c0      	nop			; (mov r8, r8)
   28e0a:	46bd      	mov	sp, r7
   28e0c:	bd80      	pop	{r7, pc}
   28e0e:	46c0      	nop			; (mov r8, r8)
   28e10:	00026255 	.word	0x00026255

00028e14 <system_interrupt_leave_critical_section>:
{
   28e14:	b580      	push	{r7, lr}
   28e16:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   28e18:	4b02      	ldr	r3, [pc, #8]	; (28e24 <system_interrupt_leave_critical_section+0x10>)
   28e1a:	4798      	blx	r3
}
   28e1c:	46c0      	nop			; (mov r8, r8)
   28e1e:	46bd      	mov	sp, r7
   28e20:	bd80      	pop	{r7, pc}
   28e22:	46c0      	nop			; (mov r8, r8)
   28e24:	000262a9 	.word	0x000262a9

00028e28 <usart_is_syncing>:
{
   28e28:	b580      	push	{r7, lr}
   28e2a:	b084      	sub	sp, #16
   28e2c:	af00      	add	r7, sp, #0
   28e2e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   28e30:	687b      	ldr	r3, [r7, #4]
   28e32:	681b      	ldr	r3, [r3, #0]
   28e34:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   28e36:	68fb      	ldr	r3, [r7, #12]
   28e38:	69db      	ldr	r3, [r3, #28]
   28e3a:	1e5a      	subs	r2, r3, #1
   28e3c:	4193      	sbcs	r3, r2
   28e3e:	b2db      	uxtb	r3, r3
}
   28e40:	0018      	movs	r0, r3
   28e42:	46bd      	mov	sp, r7
   28e44:	b004      	add	sp, #16
   28e46:	bd80      	pop	{r7, pc}

00028e48 <_usart_wait_for_sync>:
{
   28e48:	b580      	push	{r7, lr}
   28e4a:	b082      	sub	sp, #8
   28e4c:	af00      	add	r7, sp, #0
   28e4e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   28e50:	46c0      	nop			; (mov r8, r8)
   28e52:	687b      	ldr	r3, [r7, #4]
   28e54:	0018      	movs	r0, r3
   28e56:	4b04      	ldr	r3, [pc, #16]	; (28e68 <_usart_wait_for_sync+0x20>)
   28e58:	4798      	blx	r3
   28e5a:	1e03      	subs	r3, r0, #0
   28e5c:	d1f9      	bne.n	28e52 <_usart_wait_for_sync+0xa>
}
   28e5e:	46c0      	nop			; (mov r8, r8)
   28e60:	46bd      	mov	sp, r7
   28e62:	b002      	add	sp, #8
   28e64:	bd80      	pop	{r7, pc}
   28e66:	46c0      	nop			; (mov r8, r8)
   28e68:	00028e29 	.word	0x00028e29

00028e6c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   28e6c:	b580      	push	{r7, lr}
   28e6e:	b086      	sub	sp, #24
   28e70:	af00      	add	r7, sp, #0
   28e72:	60f8      	str	r0, [r7, #12]
   28e74:	60b9      	str	r1, [r7, #8]
   28e76:	1dbb      	adds	r3, r7, #6
   28e78:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28e7a:	68fb      	ldr	r3, [r7, #12]
   28e7c:	681b      	ldr	r3, [r3, #0]
   28e7e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28e80:	4b0f      	ldr	r3, [pc, #60]	; (28ec0 <_usart_write_buffer+0x54>)
   28e82:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   28e84:	68fb      	ldr	r3, [r7, #12]
   28e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28e88:	b29b      	uxth	r3, r3
   28e8a:	2b00      	cmp	r3, #0
   28e8c:	d003      	beq.n	28e96 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   28e8e:	4b0d      	ldr	r3, [pc, #52]	; (28ec4 <_usart_write_buffer+0x58>)
   28e90:	4798      	blx	r3
		return STATUS_BUSY;
   28e92:	2305      	movs	r3, #5
   28e94:	e010      	b.n	28eb8 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   28e96:	68fb      	ldr	r3, [r7, #12]
   28e98:	1dba      	adds	r2, r7, #6
   28e9a:	8812      	ldrh	r2, [r2, #0]
   28e9c:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   28e9e:	4b09      	ldr	r3, [pc, #36]	; (28ec4 <_usart_write_buffer+0x58>)
   28ea0:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   28ea2:	68fb      	ldr	r3, [r7, #12]
   28ea4:	68ba      	ldr	r2, [r7, #8]
   28ea6:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   28ea8:	68fb      	ldr	r3, [r7, #12]
   28eaa:	2233      	movs	r2, #51	; 0x33
   28eac:	2105      	movs	r1, #5
   28eae:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   28eb0:	697b      	ldr	r3, [r7, #20]
   28eb2:	2201      	movs	r2, #1
   28eb4:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   28eb6:	2300      	movs	r3, #0
}
   28eb8:	0018      	movs	r0, r3
   28eba:	46bd      	mov	sp, r7
   28ebc:	b006      	add	sp, #24
   28ebe:	bd80      	pop	{r7, pc}
   28ec0:	00028e01 	.word	0x00028e01
   28ec4:	00028e15 	.word	0x00028e15

00028ec8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28ec8:	b580      	push	{r7, lr}
   28eca:	b086      	sub	sp, #24
   28ecc:	af00      	add	r7, sp, #0
   28ece:	60f8      	str	r0, [r7, #12]
   28ed0:	60b9      	str	r1, [r7, #8]
   28ed2:	1dbb      	adds	r3, r7, #6
   28ed4:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28ed6:	68fb      	ldr	r3, [r7, #12]
   28ed8:	681b      	ldr	r3, [r3, #0]
   28eda:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28edc:	4b16      	ldr	r3, [pc, #88]	; (28f38 <_usart_read_buffer+0x70>)
   28ede:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   28ee0:	68fb      	ldr	r3, [r7, #12]
   28ee2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28ee4:	b29b      	uxth	r3, r3
   28ee6:	2b00      	cmp	r3, #0
   28ee8:	d003      	beq.n	28ef2 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   28eea:	4b14      	ldr	r3, [pc, #80]	; (28f3c <_usart_read_buffer+0x74>)
   28eec:	4798      	blx	r3
		return STATUS_BUSY;
   28eee:	2305      	movs	r3, #5
   28ef0:	e01e      	b.n	28f30 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   28ef2:	68fb      	ldr	r3, [r7, #12]
   28ef4:	1dba      	adds	r2, r7, #6
   28ef6:	8812      	ldrh	r2, [r2, #0]
   28ef8:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   28efa:	4b10      	ldr	r3, [pc, #64]	; (28f3c <_usart_read_buffer+0x74>)
   28efc:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   28efe:	68fb      	ldr	r3, [r7, #12]
   28f00:	68ba      	ldr	r2, [r7, #8]
   28f02:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   28f04:	68fb      	ldr	r3, [r7, #12]
   28f06:	2232      	movs	r2, #50	; 0x32
   28f08:	2105      	movs	r1, #5
   28f0a:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   28f0c:	697b      	ldr	r3, [r7, #20]
   28f0e:	2204      	movs	r2, #4
   28f10:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   28f12:	68fb      	ldr	r3, [r7, #12]
   28f14:	7a1b      	ldrb	r3, [r3, #8]
   28f16:	2b00      	cmp	r3, #0
   28f18:	d002      	beq.n	28f20 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   28f1a:	697b      	ldr	r3, [r7, #20]
   28f1c:	2220      	movs	r2, #32
   28f1e:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   28f20:	68fb      	ldr	r3, [r7, #12]
   28f22:	7a5b      	ldrb	r3, [r3, #9]
   28f24:	2b00      	cmp	r3, #0
   28f26:	d002      	beq.n	28f2e <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   28f28:	697b      	ldr	r3, [r7, #20]
   28f2a:	2208      	movs	r2, #8
   28f2c:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   28f2e:	2300      	movs	r3, #0
}
   28f30:	0018      	movs	r0, r3
   28f32:	46bd      	mov	sp, r7
   28f34:	b006      	add	sp, #24
   28f36:	bd80      	pop	{r7, pc}
   28f38:	00028e01 	.word	0x00028e01
   28f3c:	00028e15 	.word	0x00028e15

00028f40 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   28f40:	b580      	push	{r7, lr}
   28f42:	b084      	sub	sp, #16
   28f44:	af00      	add	r7, sp, #0
   28f46:	60f8      	str	r0, [r7, #12]
   28f48:	60b9      	str	r1, [r7, #8]
   28f4a:	1dfb      	adds	r3, r7, #7
   28f4c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   28f4e:	1dfb      	adds	r3, r7, #7
   28f50:	781b      	ldrb	r3, [r3, #0]
   28f52:	68fa      	ldr	r2, [r7, #12]
   28f54:	3302      	adds	r3, #2
   28f56:	009b      	lsls	r3, r3, #2
   28f58:	18d3      	adds	r3, r2, r3
   28f5a:	3304      	adds	r3, #4
   28f5c:	68ba      	ldr	r2, [r7, #8]
   28f5e:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   28f60:	68fb      	ldr	r3, [r7, #12]
   28f62:	2230      	movs	r2, #48	; 0x30
   28f64:	5c9b      	ldrb	r3, [r3, r2]
   28f66:	b25a      	sxtb	r2, r3
   28f68:	1dfb      	adds	r3, r7, #7
   28f6a:	781b      	ldrb	r3, [r3, #0]
   28f6c:	2101      	movs	r1, #1
   28f6e:	4099      	lsls	r1, r3
   28f70:	000b      	movs	r3, r1
   28f72:	b25b      	sxtb	r3, r3
   28f74:	4313      	orrs	r3, r2
   28f76:	b25b      	sxtb	r3, r3
   28f78:	b2d9      	uxtb	r1, r3
   28f7a:	68fb      	ldr	r3, [r7, #12]
   28f7c:	2230      	movs	r2, #48	; 0x30
   28f7e:	5499      	strb	r1, [r3, r2]
}
   28f80:	46c0      	nop			; (mov r8, r8)
   28f82:	46bd      	mov	sp, r7
   28f84:	b004      	add	sp, #16
   28f86:	bd80      	pop	{r7, pc}

00028f88 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   28f88:	b580      	push	{r7, lr}
   28f8a:	b084      	sub	sp, #16
   28f8c:	af00      	add	r7, sp, #0
   28f8e:	60f8      	str	r0, [r7, #12]
   28f90:	60b9      	str	r1, [r7, #8]
   28f92:	1dbb      	adds	r3, r7, #6
   28f94:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   28f96:	1dbb      	adds	r3, r7, #6
   28f98:	881b      	ldrh	r3, [r3, #0]
   28f9a:	2b00      	cmp	r3, #0
   28f9c:	d101      	bne.n	28fa2 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28f9e:	2317      	movs	r3, #23
   28fa0:	e010      	b.n	28fc4 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   28fa2:	68fb      	ldr	r3, [r7, #12]
   28fa4:	79db      	ldrb	r3, [r3, #7]
   28fa6:	2201      	movs	r2, #1
   28fa8:	4053      	eors	r3, r2
   28faa:	b2db      	uxtb	r3, r3
   28fac:	2b00      	cmp	r3, #0
   28fae:	d001      	beq.n	28fb4 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28fb0:	231c      	movs	r3, #28
   28fb2:	e007      	b.n	28fc4 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   28fb4:	1dbb      	adds	r3, r7, #6
   28fb6:	881a      	ldrh	r2, [r3, #0]
   28fb8:	68b9      	ldr	r1, [r7, #8]
   28fba:	68fb      	ldr	r3, [r7, #12]
   28fbc:	0018      	movs	r0, r3
   28fbe:	4b03      	ldr	r3, [pc, #12]	; (28fcc <usart_write_buffer_job+0x44>)
   28fc0:	4798      	blx	r3
   28fc2:	0003      	movs	r3, r0
}
   28fc4:	0018      	movs	r0, r3
   28fc6:	46bd      	mov	sp, r7
   28fc8:	b004      	add	sp, #16
   28fca:	bd80      	pop	{r7, pc}
   28fcc:	00028e6d 	.word	0x00028e6d

00028fd0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28fd0:	b580      	push	{r7, lr}
   28fd2:	b084      	sub	sp, #16
   28fd4:	af00      	add	r7, sp, #0
   28fd6:	60f8      	str	r0, [r7, #12]
   28fd8:	60b9      	str	r1, [r7, #8]
   28fda:	1dbb      	adds	r3, r7, #6
   28fdc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   28fde:	1dbb      	adds	r3, r7, #6
   28fe0:	881b      	ldrh	r3, [r3, #0]
   28fe2:	2b00      	cmp	r3, #0
   28fe4:	d101      	bne.n	28fea <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28fe6:	2317      	movs	r3, #23
   28fe8:	e010      	b.n	2900c <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   28fea:	68fb      	ldr	r3, [r7, #12]
   28fec:	799b      	ldrb	r3, [r3, #6]
   28fee:	2201      	movs	r2, #1
   28ff0:	4053      	eors	r3, r2
   28ff2:	b2db      	uxtb	r3, r3
   28ff4:	2b00      	cmp	r3, #0
   28ff6:	d001      	beq.n	28ffc <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28ff8:	231c      	movs	r3, #28
   28ffa:	e007      	b.n	2900c <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   28ffc:	1dbb      	adds	r3, r7, #6
   28ffe:	881a      	ldrh	r2, [r3, #0]
   29000:	68b9      	ldr	r1, [r7, #8]
   29002:	68fb      	ldr	r3, [r7, #12]
   29004:	0018      	movs	r0, r3
   29006:	4b03      	ldr	r3, [pc, #12]	; (29014 <usart_read_buffer_job+0x44>)
   29008:	4798      	blx	r3
   2900a:	0003      	movs	r3, r0
}
   2900c:	0018      	movs	r0, r3
   2900e:	46bd      	mov	sp, r7
   29010:	b004      	add	sp, #16
   29012:	bd80      	pop	{r7, pc}
   29014:	00028ec9 	.word	0x00028ec9

00029018 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   29018:	b580      	push	{r7, lr}
   2901a:	b084      	sub	sp, #16
   2901c:	af00      	add	r7, sp, #0
   2901e:	6078      	str	r0, [r7, #4]
   29020:	000a      	movs	r2, r1
   29022:	1cfb      	adds	r3, r7, #3
   29024:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   29026:	1cfb      	adds	r3, r7, #3
   29028:	781b      	ldrb	r3, [r3, #0]
   2902a:	2b00      	cmp	r3, #0
   2902c:	d002      	beq.n	29034 <usart_get_job_status+0x1c>
   2902e:	2b01      	cmp	r3, #1
   29030:	d007      	beq.n	29042 <usart_get_job_status+0x2a>
   29032:	e00d      	b.n	29050 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   29034:	230f      	movs	r3, #15
   29036:	18fb      	adds	r3, r7, r3
   29038:	687a      	ldr	r2, [r7, #4]
   2903a:	2132      	movs	r1, #50	; 0x32
   2903c:	5c52      	ldrb	r2, [r2, r1]
   2903e:	701a      	strb	r2, [r3, #0]
			break;
   29040:	e00b      	b.n	2905a <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   29042:	230f      	movs	r3, #15
   29044:	18fb      	adds	r3, r7, r3
   29046:	687a      	ldr	r2, [r7, #4]
   29048:	2133      	movs	r1, #51	; 0x33
   2904a:	5c52      	ldrb	r2, [r2, r1]
   2904c:	701a      	strb	r2, [r3, #0]
			break;
   2904e:	e004      	b.n	2905a <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   29050:	230f      	movs	r3, #15
   29052:	18fb      	adds	r3, r7, r3
   29054:	2217      	movs	r2, #23
   29056:	701a      	strb	r2, [r3, #0]
			break;
   29058:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   2905a:	230f      	movs	r3, #15
   2905c:	18fb      	adds	r3, r7, r3
   2905e:	781b      	ldrb	r3, [r3, #0]
}
   29060:	0018      	movs	r0, r3
   29062:	46bd      	mov	sp, r7
   29064:	b004      	add	sp, #16
   29066:	bd80      	pop	{r7, pc}

00029068 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   29068:	b580      	push	{r7, lr}
   2906a:	b088      	sub	sp, #32
   2906c:	af00      	add	r7, sp, #0
   2906e:	0002      	movs	r2, r0
   29070:	1dfb      	adds	r3, r7, #7
   29072:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   29074:	1dfb      	adds	r3, r7, #7
   29076:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   29078:	4ba3      	ldr	r3, [pc, #652]	; (29308 <_usart_interrupt_handler+0x2a0>)
   2907a:	0092      	lsls	r2, r2, #2
   2907c:	58d3      	ldr	r3, [r2, r3]
   2907e:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   29080:	69bb      	ldr	r3, [r7, #24]
   29082:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   29084:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   29086:	69bb      	ldr	r3, [r7, #24]
   29088:	0018      	movs	r0, r3
   2908a:	4ba0      	ldr	r3, [pc, #640]	; (2930c <_usart_interrupt_handler+0x2a4>)
   2908c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   2908e:	697b      	ldr	r3, [r7, #20]
   29090:	7e1b      	ldrb	r3, [r3, #24]
   29092:	b2da      	uxtb	r2, r3
   29094:	2312      	movs	r3, #18
   29096:	18fb      	adds	r3, r7, r3
   29098:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   2909a:	697b      	ldr	r3, [r7, #20]
   2909c:	7d9b      	ldrb	r3, [r3, #22]
   2909e:	b2db      	uxtb	r3, r3
   290a0:	b29a      	uxth	r2, r3
   290a2:	2312      	movs	r3, #18
   290a4:	18fb      	adds	r3, r7, r3
   290a6:	2112      	movs	r1, #18
   290a8:	1879      	adds	r1, r7, r1
   290aa:	8809      	ldrh	r1, [r1, #0]
   290ac:	400a      	ands	r2, r1
   290ae:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   290b0:	69bb      	ldr	r3, [r7, #24]
   290b2:	2230      	movs	r2, #48	; 0x30
   290b4:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   290b6:	69ba      	ldr	r2, [r7, #24]
   290b8:	2131      	movs	r1, #49	; 0x31
   290ba:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   290bc:	4013      	ands	r3, r2
   290be:	b2da      	uxtb	r2, r3
   290c0:	2310      	movs	r3, #16
   290c2:	18fb      	adds	r3, r7, r3
   290c4:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   290c6:	2312      	movs	r3, #18
   290c8:	18fb      	adds	r3, r7, r3
   290ca:	881b      	ldrh	r3, [r3, #0]
   290cc:	2201      	movs	r2, #1
   290ce:	4013      	ands	r3, r2
   290d0:	d044      	beq.n	2915c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   290d2:	69bb      	ldr	r3, [r7, #24]
   290d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   290d6:	b29b      	uxth	r3, r3
   290d8:	2b00      	cmp	r3, #0
   290da:	d03c      	beq.n	29156 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   290dc:	69bb      	ldr	r3, [r7, #24]
   290de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   290e0:	781b      	ldrb	r3, [r3, #0]
   290e2:	b2da      	uxtb	r2, r3
   290e4:	231c      	movs	r3, #28
   290e6:	18fb      	adds	r3, r7, r3
   290e8:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   290ea:	69bb      	ldr	r3, [r7, #24]
   290ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   290ee:	1c5a      	adds	r2, r3, #1
   290f0:	69bb      	ldr	r3, [r7, #24]
   290f2:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   290f4:	69bb      	ldr	r3, [r7, #24]
   290f6:	795b      	ldrb	r3, [r3, #5]
   290f8:	2b01      	cmp	r3, #1
   290fa:	d113      	bne.n	29124 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   290fc:	69bb      	ldr	r3, [r7, #24]
   290fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29100:	781b      	ldrb	r3, [r3, #0]
   29102:	b2db      	uxtb	r3, r3
   29104:	021b      	lsls	r3, r3, #8
   29106:	b21a      	sxth	r2, r3
   29108:	231c      	movs	r3, #28
   2910a:	18fb      	adds	r3, r7, r3
   2910c:	2100      	movs	r1, #0
   2910e:	5e5b      	ldrsh	r3, [r3, r1]
   29110:	4313      	orrs	r3, r2
   29112:	b21a      	sxth	r2, r3
   29114:	231c      	movs	r3, #28
   29116:	18fb      	adds	r3, r7, r3
   29118:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2911a:	69bb      	ldr	r3, [r7, #24]
   2911c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2911e:	1c5a      	adds	r2, r3, #1
   29120:	69bb      	ldr	r3, [r7, #24]
   29122:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   29124:	231c      	movs	r3, #28
   29126:	18fb      	adds	r3, r7, r3
   29128:	881b      	ldrh	r3, [r3, #0]
   2912a:	05db      	lsls	r3, r3, #23
   2912c:	0ddb      	lsrs	r3, r3, #23
   2912e:	b29a      	uxth	r2, r3
   29130:	697b      	ldr	r3, [r7, #20]
   29132:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   29134:	69bb      	ldr	r3, [r7, #24]
   29136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29138:	b29b      	uxth	r3, r3
   2913a:	3b01      	subs	r3, #1
   2913c:	b29b      	uxth	r3, r3
   2913e:	69ba      	ldr	r2, [r7, #24]
   29140:	1c19      	adds	r1, r3, #0
   29142:	85d1      	strh	r1, [r2, #46]	; 0x2e
   29144:	2b00      	cmp	r3, #0
   29146:	d109      	bne.n	2915c <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29148:	697b      	ldr	r3, [r7, #20]
   2914a:	2201      	movs	r2, #1
   2914c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   2914e:	697b      	ldr	r3, [r7, #20]
   29150:	2202      	movs	r2, #2
   29152:	759a      	strb	r2, [r3, #22]
   29154:	e002      	b.n	2915c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29156:	697b      	ldr	r3, [r7, #20]
   29158:	2201      	movs	r2, #1
   2915a:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   2915c:	2312      	movs	r3, #18
   2915e:	18fb      	adds	r3, r7, r3
   29160:	881b      	ldrh	r3, [r3, #0]
   29162:	2202      	movs	r2, #2
   29164:	4013      	ands	r3, r2
   29166:	d011      	beq.n	2918c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   29168:	697b      	ldr	r3, [r7, #20]
   2916a:	2202      	movs	r2, #2
   2916c:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   2916e:	69bb      	ldr	r3, [r7, #24]
   29170:	2233      	movs	r2, #51	; 0x33
   29172:	2100      	movs	r1, #0
   29174:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   29176:	2310      	movs	r3, #16
   29178:	18fb      	adds	r3, r7, r3
   2917a:	881b      	ldrh	r3, [r3, #0]
   2917c:	2201      	movs	r2, #1
   2917e:	4013      	ands	r3, r2
   29180:	d004      	beq.n	2918c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   29182:	69bb      	ldr	r3, [r7, #24]
   29184:	68db      	ldr	r3, [r3, #12]
   29186:	69ba      	ldr	r2, [r7, #24]
   29188:	0010      	movs	r0, r2
   2918a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   2918c:	2312      	movs	r3, #18
   2918e:	18fb      	adds	r3, r7, r3
   29190:	881b      	ldrh	r3, [r3, #0]
   29192:	2204      	movs	r2, #4
   29194:	4013      	ands	r3, r2
   29196:	d100      	bne.n	2919a <_usart_interrupt_handler+0x132>
   29198:	e0bd      	b.n	29316 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2919a:	69bb      	ldr	r3, [r7, #24]
   2919c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2919e:	b29b      	uxth	r3, r3
   291a0:	2b00      	cmp	r3, #0
   291a2:	d100      	bne.n	291a6 <_usart_interrupt_handler+0x13e>
   291a4:	e0b4      	b.n	29310 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   291a6:	697b      	ldr	r3, [r7, #20]
   291a8:	8b5b      	ldrh	r3, [r3, #26]
   291aa:	b29b      	uxth	r3, r3
   291ac:	b2da      	uxtb	r2, r3
   291ae:	231f      	movs	r3, #31
   291b0:	18fb      	adds	r3, r7, r3
   291b2:	213f      	movs	r1, #63	; 0x3f
   291b4:	400a      	ands	r2, r1
   291b6:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   291b8:	231f      	movs	r3, #31
   291ba:	18fb      	adds	r3, r7, r3
   291bc:	781b      	ldrb	r3, [r3, #0]
   291be:	2208      	movs	r2, #8
   291c0:	4013      	ands	r3, r2
   291c2:	d007      	beq.n	291d4 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   291c4:	231f      	movs	r3, #31
   291c6:	18fb      	adds	r3, r7, r3
   291c8:	221f      	movs	r2, #31
   291ca:	18ba      	adds	r2, r7, r2
   291cc:	7812      	ldrb	r2, [r2, #0]
   291ce:	2108      	movs	r1, #8
   291d0:	438a      	bics	r2, r1
   291d2:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   291d4:	231f      	movs	r3, #31
   291d6:	18fb      	adds	r3, r7, r3
   291d8:	781b      	ldrb	r3, [r3, #0]
   291da:	2b00      	cmp	r3, #0
   291dc:	d050      	beq.n	29280 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   291de:	231f      	movs	r3, #31
   291e0:	18fb      	adds	r3, r7, r3
   291e2:	781b      	ldrb	r3, [r3, #0]
   291e4:	2202      	movs	r2, #2
   291e6:	4013      	ands	r3, r2
   291e8:	d007      	beq.n	291fa <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   291ea:	69bb      	ldr	r3, [r7, #24]
   291ec:	2232      	movs	r2, #50	; 0x32
   291ee:	211a      	movs	r1, #26
   291f0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   291f2:	697b      	ldr	r3, [r7, #20]
   291f4:	2202      	movs	r2, #2
   291f6:	835a      	strh	r2, [r3, #26]
   291f8:	e036      	b.n	29268 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   291fa:	231f      	movs	r3, #31
   291fc:	18fb      	adds	r3, r7, r3
   291fe:	781b      	ldrb	r3, [r3, #0]
   29200:	2204      	movs	r2, #4
   29202:	4013      	ands	r3, r2
   29204:	d007      	beq.n	29216 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   29206:	69bb      	ldr	r3, [r7, #24]
   29208:	2232      	movs	r2, #50	; 0x32
   2920a:	211e      	movs	r1, #30
   2920c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   2920e:	697b      	ldr	r3, [r7, #20]
   29210:	2204      	movs	r2, #4
   29212:	835a      	strh	r2, [r3, #26]
   29214:	e028      	b.n	29268 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   29216:	231f      	movs	r3, #31
   29218:	18fb      	adds	r3, r7, r3
   2921a:	781b      	ldrb	r3, [r3, #0]
   2921c:	2201      	movs	r2, #1
   2921e:	4013      	ands	r3, r2
   29220:	d007      	beq.n	29232 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   29222:	69bb      	ldr	r3, [r7, #24]
   29224:	2232      	movs	r2, #50	; 0x32
   29226:	2113      	movs	r1, #19
   29228:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2922a:	697b      	ldr	r3, [r7, #20]
   2922c:	2201      	movs	r2, #1
   2922e:	835a      	strh	r2, [r3, #26]
   29230:	e01a      	b.n	29268 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   29232:	231f      	movs	r3, #31
   29234:	18fb      	adds	r3, r7, r3
   29236:	781b      	ldrb	r3, [r3, #0]
   29238:	2210      	movs	r2, #16
   2923a:	4013      	ands	r3, r2
   2923c:	d007      	beq.n	2924e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   2923e:	69bb      	ldr	r3, [r7, #24]
   29240:	2232      	movs	r2, #50	; 0x32
   29242:	2142      	movs	r1, #66	; 0x42
   29244:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   29246:	697b      	ldr	r3, [r7, #20]
   29248:	2210      	movs	r2, #16
   2924a:	835a      	strh	r2, [r3, #26]
   2924c:	e00c      	b.n	29268 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   2924e:	231f      	movs	r3, #31
   29250:	18fb      	adds	r3, r7, r3
   29252:	781b      	ldrb	r3, [r3, #0]
   29254:	2220      	movs	r2, #32
   29256:	4013      	ands	r3, r2
   29258:	d006      	beq.n	29268 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2925a:	69bb      	ldr	r3, [r7, #24]
   2925c:	2232      	movs	r2, #50	; 0x32
   2925e:	2141      	movs	r1, #65	; 0x41
   29260:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   29262:	697b      	ldr	r3, [r7, #20]
   29264:	2220      	movs	r2, #32
   29266:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   29268:	2310      	movs	r3, #16
   2926a:	18fb      	adds	r3, r7, r3
   2926c:	881b      	ldrh	r3, [r3, #0]
   2926e:	2204      	movs	r2, #4
   29270:	4013      	ands	r3, r2
				if (callback_status
   29272:	d050      	beq.n	29316 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   29274:	69bb      	ldr	r3, [r7, #24]
   29276:	695b      	ldr	r3, [r3, #20]
   29278:	69ba      	ldr	r2, [r7, #24]
   2927a:	0010      	movs	r0, r2
   2927c:	4798      	blx	r3
   2927e:	e04a      	b.n	29316 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   29280:	697b      	ldr	r3, [r7, #20]
   29282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   29284:	b29a      	uxth	r2, r3
   29286:	230e      	movs	r3, #14
   29288:	18fb      	adds	r3, r7, r3
   2928a:	05d2      	lsls	r2, r2, #23
   2928c:	0dd2      	lsrs	r2, r2, #23
   2928e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   29290:	69bb      	ldr	r3, [r7, #24]
   29292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29294:	220e      	movs	r2, #14
   29296:	18ba      	adds	r2, r7, r2
   29298:	8812      	ldrh	r2, [r2, #0]
   2929a:	b2d2      	uxtb	r2, r2
   2929c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   2929e:	69bb      	ldr	r3, [r7, #24]
   292a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   292a2:	1c5a      	adds	r2, r3, #1
   292a4:	69bb      	ldr	r3, [r7, #24]
   292a6:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   292a8:	69bb      	ldr	r3, [r7, #24]
   292aa:	795b      	ldrb	r3, [r3, #5]
   292ac:	2b01      	cmp	r3, #1
   292ae:	d10d      	bne.n	292cc <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   292b0:	69bb      	ldr	r3, [r7, #24]
   292b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   292b4:	220e      	movs	r2, #14
   292b6:	18ba      	adds	r2, r7, r2
   292b8:	8812      	ldrh	r2, [r2, #0]
   292ba:	0a12      	lsrs	r2, r2, #8
   292bc:	b292      	uxth	r2, r2
   292be:	b2d2      	uxtb	r2, r2
   292c0:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   292c2:	69bb      	ldr	r3, [r7, #24]
   292c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   292c6:	1c5a      	adds	r2, r3, #1
   292c8:	69bb      	ldr	r3, [r7, #24]
   292ca:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   292cc:	69bb      	ldr	r3, [r7, #24]
   292ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   292d0:	b29b      	uxth	r3, r3
   292d2:	3b01      	subs	r3, #1
   292d4:	b29b      	uxth	r3, r3
   292d6:	69ba      	ldr	r2, [r7, #24]
   292d8:	1c19      	adds	r1, r3, #0
   292da:	8591      	strh	r1, [r2, #44]	; 0x2c
   292dc:	2b00      	cmp	r3, #0
   292de:	d11a      	bne.n	29316 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   292e0:	697b      	ldr	r3, [r7, #20]
   292e2:	2204      	movs	r2, #4
   292e4:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   292e6:	69bb      	ldr	r3, [r7, #24]
   292e8:	2232      	movs	r2, #50	; 0x32
   292ea:	2100      	movs	r1, #0
   292ec:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   292ee:	2310      	movs	r3, #16
   292f0:	18fb      	adds	r3, r7, r3
   292f2:	881b      	ldrh	r3, [r3, #0]
   292f4:	2202      	movs	r2, #2
   292f6:	4013      	ands	r3, r2
					if (callback_status
   292f8:	d00d      	beq.n	29316 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   292fa:	69bb      	ldr	r3, [r7, #24]
   292fc:	691b      	ldr	r3, [r3, #16]
   292fe:	69ba      	ldr	r2, [r7, #24]
   29300:	0010      	movs	r0, r2
   29302:	4798      	blx	r3
   29304:	e007      	b.n	29316 <_usart_interrupt_handler+0x2ae>
   29306:	46c0      	nop			; (mov r8, r8)
   29308:	20005a88 	.word	0x20005a88
   2930c:	00028e49 	.word	0x00028e49
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29310:	697b      	ldr	r3, [r7, #20]
   29312:	2204      	movs	r2, #4
   29314:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   29316:	2312      	movs	r3, #18
   29318:	18fb      	adds	r3, r7, r3
   2931a:	881b      	ldrh	r3, [r3, #0]
   2931c:	2210      	movs	r2, #16
   2931e:	4013      	ands	r3, r2
   29320:	d010      	beq.n	29344 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   29322:	697b      	ldr	r3, [r7, #20]
   29324:	2210      	movs	r2, #16
   29326:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   29328:	697b      	ldr	r3, [r7, #20]
   2932a:	2210      	movs	r2, #16
   2932c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   2932e:	2310      	movs	r3, #16
   29330:	18fb      	adds	r3, r7, r3
   29332:	881b      	ldrh	r3, [r3, #0]
   29334:	2210      	movs	r2, #16
   29336:	4013      	ands	r3, r2
   29338:	d004      	beq.n	29344 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2933a:	69bb      	ldr	r3, [r7, #24]
   2933c:	69db      	ldr	r3, [r3, #28]
   2933e:	69ba      	ldr	r2, [r7, #24]
   29340:	0010      	movs	r0, r2
   29342:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   29344:	2312      	movs	r3, #18
   29346:	18fb      	adds	r3, r7, r3
   29348:	881b      	ldrh	r3, [r3, #0]
   2934a:	2220      	movs	r2, #32
   2934c:	4013      	ands	r3, r2
   2934e:	d010      	beq.n	29372 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   29350:	697b      	ldr	r3, [r7, #20]
   29352:	2220      	movs	r2, #32
   29354:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   29356:	697b      	ldr	r3, [r7, #20]
   29358:	2220      	movs	r2, #32
   2935a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   2935c:	2310      	movs	r3, #16
   2935e:	18fb      	adds	r3, r7, r3
   29360:	881b      	ldrh	r3, [r3, #0]
   29362:	2208      	movs	r2, #8
   29364:	4013      	ands	r3, r2
   29366:	d004      	beq.n	29372 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   29368:	69bb      	ldr	r3, [r7, #24]
   2936a:	699b      	ldr	r3, [r3, #24]
   2936c:	69ba      	ldr	r2, [r7, #24]
   2936e:	0010      	movs	r0, r2
   29370:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   29372:	2312      	movs	r3, #18
   29374:	18fb      	adds	r3, r7, r3
   29376:	881b      	ldrh	r3, [r3, #0]
   29378:	2208      	movs	r2, #8
   2937a:	4013      	ands	r3, r2
   2937c:	d010      	beq.n	293a0 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   2937e:	697b      	ldr	r3, [r7, #20]
   29380:	2208      	movs	r2, #8
   29382:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   29384:	697b      	ldr	r3, [r7, #20]
   29386:	2208      	movs	r2, #8
   29388:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2938a:	2310      	movs	r3, #16
   2938c:	18fb      	adds	r3, r7, r3
   2938e:	881b      	ldrh	r3, [r3, #0]
   29390:	2220      	movs	r2, #32
   29392:	4013      	ands	r3, r2
   29394:	d004      	beq.n	293a0 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   29396:	69bb      	ldr	r3, [r7, #24]
   29398:	6a1b      	ldr	r3, [r3, #32]
   2939a:	69ba      	ldr	r2, [r7, #24]
   2939c:	0010      	movs	r0, r2
   2939e:	4798      	blx	r3
		}
	}
#endif
}
   293a0:	46c0      	nop			; (mov r8, r8)
   293a2:	46bd      	mov	sp, r7
   293a4:	b008      	add	sp, #32
   293a6:	bd80      	pop	{r7, pc}

000293a8 <system_gclk_gen_get_config_defaults>:
{
   293a8:	b580      	push	{r7, lr}
   293aa:	b082      	sub	sp, #8
   293ac:	af00      	add	r7, sp, #0
   293ae:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   293b0:	687b      	ldr	r3, [r7, #4]
   293b2:	2201      	movs	r2, #1
   293b4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   293b6:	687b      	ldr	r3, [r7, #4]
   293b8:	2200      	movs	r2, #0
   293ba:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   293bc:	687b      	ldr	r3, [r7, #4]
   293be:	2206      	movs	r2, #6
   293c0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   293c2:	687b      	ldr	r3, [r7, #4]
   293c4:	2200      	movs	r2, #0
   293c6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   293c8:	687b      	ldr	r3, [r7, #4]
   293ca:	2200      	movs	r2, #0
   293cc:	725a      	strb	r2, [r3, #9]
}
   293ce:	46c0      	nop			; (mov r8, r8)
   293d0:	46bd      	mov	sp, r7
   293d2:	b002      	add	sp, #8
   293d4:	bd80      	pop	{r7, pc}

000293d6 <system_gclk_chan_get_config_defaults>:
{
   293d6:	b580      	push	{r7, lr}
   293d8:	b082      	sub	sp, #8
   293da:	af00      	add	r7, sp, #0
   293dc:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   293de:	687b      	ldr	r3, [r7, #4]
   293e0:	2200      	movs	r2, #0
   293e2:	701a      	strb	r2, [r3, #0]
}
   293e4:	46c0      	nop			; (mov r8, r8)
   293e6:	46bd      	mov	sp, r7
   293e8:	b002      	add	sp, #8
   293ea:	bd80      	pop	{r7, pc}

000293ec <system_clock_source_osc8m_get_config_defaults>:
{
   293ec:	b580      	push	{r7, lr}
   293ee:	b082      	sub	sp, #8
   293f0:	af00      	add	r7, sp, #0
   293f2:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   293f4:	687b      	ldr	r3, [r7, #4]
   293f6:	2203      	movs	r2, #3
   293f8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   293fa:	687b      	ldr	r3, [r7, #4]
   293fc:	2200      	movs	r2, #0
   293fe:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   29400:	687b      	ldr	r3, [r7, #4]
   29402:	2201      	movs	r2, #1
   29404:	709a      	strb	r2, [r3, #2]
}
   29406:	46c0      	nop			; (mov r8, r8)
   29408:	46bd      	mov	sp, r7
   2940a:	b002      	add	sp, #8
   2940c:	bd80      	pop	{r7, pc}
	...

00029410 <system_cpu_clock_set_divider>:
{
   29410:	b580      	push	{r7, lr}
   29412:	b082      	sub	sp, #8
   29414:	af00      	add	r7, sp, #0
   29416:	0002      	movs	r2, r0
   29418:	1dfb      	adds	r3, r7, #7
   2941a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   2941c:	4a03      	ldr	r2, [pc, #12]	; (2942c <system_cpu_clock_set_divider+0x1c>)
   2941e:	1dfb      	adds	r3, r7, #7
   29420:	781b      	ldrb	r3, [r3, #0]
   29422:	7213      	strb	r3, [r2, #8]
}
   29424:	46c0      	nop			; (mov r8, r8)
   29426:	46bd      	mov	sp, r7
   29428:	b002      	add	sp, #8
   2942a:	bd80      	pop	{r7, pc}
   2942c:	40000400 	.word	0x40000400

00029430 <system_apb_clock_set_divider>:
{
   29430:	b580      	push	{r7, lr}
   29432:	b082      	sub	sp, #8
   29434:	af00      	add	r7, sp, #0
   29436:	0002      	movs	r2, r0
   29438:	1dfb      	adds	r3, r7, #7
   2943a:	701a      	strb	r2, [r3, #0]
   2943c:	1dbb      	adds	r3, r7, #6
   2943e:	1c0a      	adds	r2, r1, #0
   29440:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29442:	1dfb      	adds	r3, r7, #7
   29444:	781b      	ldrb	r3, [r3, #0]
   29446:	2b01      	cmp	r3, #1
   29448:	d008      	beq.n	2945c <system_apb_clock_set_divider+0x2c>
   2944a:	2b02      	cmp	r3, #2
   2944c:	d00b      	beq.n	29466 <system_apb_clock_set_divider+0x36>
   2944e:	2b00      	cmp	r3, #0
   29450:	d10e      	bne.n	29470 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   29452:	4a0b      	ldr	r2, [pc, #44]	; (29480 <system_apb_clock_set_divider+0x50>)
   29454:	1dbb      	adds	r3, r7, #6
   29456:	781b      	ldrb	r3, [r3, #0]
   29458:	7253      	strb	r3, [r2, #9]
			break;
   2945a:	e00b      	b.n	29474 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   2945c:	4a08      	ldr	r2, [pc, #32]	; (29480 <system_apb_clock_set_divider+0x50>)
   2945e:	1dbb      	adds	r3, r7, #6
   29460:	781b      	ldrb	r3, [r3, #0]
   29462:	7293      	strb	r3, [r2, #10]
			break;
   29464:	e006      	b.n	29474 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   29466:	4a06      	ldr	r2, [pc, #24]	; (29480 <system_apb_clock_set_divider+0x50>)
   29468:	1dbb      	adds	r3, r7, #6
   2946a:	781b      	ldrb	r3, [r3, #0]
   2946c:	72d3      	strb	r3, [r2, #11]
			break;
   2946e:	e001      	b.n	29474 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   29470:	2317      	movs	r3, #23
   29472:	e000      	b.n	29476 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   29474:	2300      	movs	r3, #0
}
   29476:	0018      	movs	r0, r3
   29478:	46bd      	mov	sp, r7
   2947a:	b002      	add	sp, #8
   2947c:	bd80      	pop	{r7, pc}
   2947e:	46c0      	nop			; (mov r8, r8)
   29480:	40000400 	.word	0x40000400

00029484 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   29484:	b580      	push	{r7, lr}
   29486:	b082      	sub	sp, #8
   29488:	af00      	add	r7, sp, #0
   2948a:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   2948c:	687b      	ldr	r3, [r7, #4]
   2948e:	2201      	movs	r2, #1
   29490:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   29492:	687b      	ldr	r3, [r7, #4]
   29494:	2200      	movs	r2, #0
   29496:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   29498:	687b      	ldr	r3, [r7, #4]
   2949a:	2200      	movs	r2, #0
   2949c:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2949e:	687b      	ldr	r3, [r7, #4]
   294a0:	2200      	movs	r2, #0
   294a2:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   294a4:	687b      	ldr	r3, [r7, #4]
   294a6:	2200      	movs	r2, #0
   294a8:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   294aa:	687b      	ldr	r3, [r7, #4]
   294ac:	4a0a      	ldr	r2, [pc, #40]	; (294d8 <system_clock_source_dpll_get_config_defaults+0x54>)
   294ae:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   294b0:	687b      	ldr	r3, [r7, #4]
   294b2:	2280      	movs	r2, #128	; 0x80
   294b4:	0212      	lsls	r2, r2, #8
   294b6:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   294b8:	687b      	ldr	r3, [r7, #4]
   294ba:	2201      	movs	r2, #1
   294bc:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   294be:	687b      	ldr	r3, [r7, #4]
   294c0:	2200      	movs	r2, #0
   294c2:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   294c4:	687b      	ldr	r3, [r7, #4]
   294c6:	2200      	movs	r2, #0
   294c8:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   294ca:	687b      	ldr	r3, [r7, #4]
   294cc:	2200      	movs	r2, #0
   294ce:	749a      	strb	r2, [r3, #18]
};
   294d0:	46c0      	nop			; (mov r8, r8)
   294d2:	46bd      	mov	sp, r7
   294d4:	b002      	add	sp, #8
   294d6:	bd80      	pop	{r7, pc}
   294d8:	02dc6c00 	.word	0x02dc6c00

000294dc <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   294dc:	b580      	push	{r7, lr}
   294de:	b082      	sub	sp, #8
   294e0:	af00      	add	r7, sp, #0
   294e2:	0002      	movs	r2, r0
   294e4:	1dfb      	adds	r3, r7, #7
   294e6:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   294e8:	4a08      	ldr	r2, [pc, #32]	; (2950c <system_flash_set_waitstates+0x30>)
   294ea:	1dfb      	adds	r3, r7, #7
   294ec:	781b      	ldrb	r3, [r3, #0]
   294ee:	210f      	movs	r1, #15
   294f0:	400b      	ands	r3, r1
   294f2:	b2d9      	uxtb	r1, r3
   294f4:	6853      	ldr	r3, [r2, #4]
   294f6:	200f      	movs	r0, #15
   294f8:	4001      	ands	r1, r0
   294fa:	0049      	lsls	r1, r1, #1
   294fc:	201e      	movs	r0, #30
   294fe:	4383      	bics	r3, r0
   29500:	430b      	orrs	r3, r1
   29502:	6053      	str	r3, [r2, #4]
}
   29504:	46c0      	nop			; (mov r8, r8)
   29506:	46bd      	mov	sp, r7
   29508:	b002      	add	sp, #8
   2950a:	bd80      	pop	{r7, pc}
   2950c:	41004000 	.word	0x41004000

00029510 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   29510:	b580      	push	{r7, lr}
   29512:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   29514:	46c0      	nop			; (mov r8, r8)
   29516:	4b04      	ldr	r3, [pc, #16]	; (29528 <_system_dfll_wait_for_sync+0x18>)
   29518:	68db      	ldr	r3, [r3, #12]
   2951a:	2210      	movs	r2, #16
   2951c:	4013      	ands	r3, r2
   2951e:	d0fa      	beq.n	29516 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   29520:	46c0      	nop			; (mov r8, r8)
   29522:	46bd      	mov	sp, r7
   29524:	bd80      	pop	{r7, pc}
   29526:	46c0      	nop			; (mov r8, r8)
   29528:	40000800 	.word	0x40000800

0002952c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   2952c:	b580      	push	{r7, lr}
   2952e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   29530:	4b0c      	ldr	r3, [pc, #48]	; (29564 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29532:	2202      	movs	r2, #2
   29534:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   29536:	4b0c      	ldr	r3, [pc, #48]	; (29568 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   29538:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2953a:	4a0a      	ldr	r2, [pc, #40]	; (29564 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2953c:	4b0b      	ldr	r3, [pc, #44]	; (2956c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2953e:	689b      	ldr	r3, [r3, #8]
   29540:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   29542:	4a08      	ldr	r2, [pc, #32]	; (29564 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29544:	4b09      	ldr	r3, [pc, #36]	; (2956c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29546:	685b      	ldr	r3, [r3, #4]
   29548:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2954a:	4b06      	ldr	r3, [pc, #24]	; (29564 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2954c:	2200      	movs	r2, #0
   2954e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   29550:	4b05      	ldr	r3, [pc, #20]	; (29568 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   29552:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   29554:	4a03      	ldr	r2, [pc, #12]	; (29564 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29556:	4b05      	ldr	r3, [pc, #20]	; (2956c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29558:	681b      	ldr	r3, [r3, #0]
   2955a:	b29b      	uxth	r3, r3
   2955c:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2955e:	46c0      	nop			; (mov r8, r8)
   29560:	46bd      	mov	sp, r7
   29562:	bd80      	pop	{r7, pc}
   29564:	40000800 	.word	0x40000800
   29568:	00029511 	.word	0x00029511
   2956c:	2000415c 	.word	0x2000415c

00029570 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   29570:	b580      	push	{r7, lr}
   29572:	b082      	sub	sp, #8
   29574:	af00      	add	r7, sp, #0
   29576:	0002      	movs	r2, r0
   29578:	1dfb      	adds	r3, r7, #7
   2957a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2957c:	1dfb      	adds	r3, r7, #7
   2957e:	781b      	ldrb	r3, [r3, #0]
   29580:	2b08      	cmp	r3, #8
   29582:	d841      	bhi.n	29608 <system_clock_source_get_hz+0x98>
   29584:	009a      	lsls	r2, r3, #2
   29586:	4b23      	ldr	r3, [pc, #140]	; (29614 <system_clock_source_get_hz+0xa4>)
   29588:	18d3      	adds	r3, r2, r3
   2958a:	681b      	ldr	r3, [r3, #0]
   2958c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2958e:	4b22      	ldr	r3, [pc, #136]	; (29618 <system_clock_source_get_hz+0xa8>)
   29590:	691b      	ldr	r3, [r3, #16]
   29592:	e03a      	b.n	2960a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   29594:	4b21      	ldr	r3, [pc, #132]	; (2961c <system_clock_source_get_hz+0xac>)
   29596:	6a1b      	ldr	r3, [r3, #32]
   29598:	059b      	lsls	r3, r3, #22
   2959a:	0f9b      	lsrs	r3, r3, #30
   2959c:	b2db      	uxtb	r3, r3
   2959e:	001a      	movs	r2, r3
   295a0:	4b1f      	ldr	r3, [pc, #124]	; (29620 <system_clock_source_get_hz+0xb0>)
   295a2:	40d3      	lsrs	r3, r2
   295a4:	e031      	b.n	2960a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   295a6:	2380      	movs	r3, #128	; 0x80
   295a8:	021b      	lsls	r3, r3, #8
   295aa:	e02e      	b.n	2960a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   295ac:	2380      	movs	r3, #128	; 0x80
   295ae:	021b      	lsls	r3, r3, #8
   295b0:	e02b      	b.n	2960a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   295b2:	4b19      	ldr	r3, [pc, #100]	; (29618 <system_clock_source_get_hz+0xa8>)
   295b4:	695b      	ldr	r3, [r3, #20]
   295b6:	e028      	b.n	2960a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   295b8:	4b17      	ldr	r3, [pc, #92]	; (29618 <system_clock_source_get_hz+0xa8>)
   295ba:	681b      	ldr	r3, [r3, #0]
   295bc:	2202      	movs	r2, #2
   295be:	4013      	ands	r3, r2
   295c0:	d101      	bne.n	295c6 <system_clock_source_get_hz+0x56>
			return 0;
   295c2:	2300      	movs	r3, #0
   295c4:	e021      	b.n	2960a <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   295c6:	4b17      	ldr	r3, [pc, #92]	; (29624 <system_clock_source_get_hz+0xb4>)
   295c8:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   295ca:	4b13      	ldr	r3, [pc, #76]	; (29618 <system_clock_source_get_hz+0xa8>)
   295cc:	681b      	ldr	r3, [r3, #0]
   295ce:	2224      	movs	r2, #36	; 0x24
   295d0:	4013      	ands	r3, r2
   295d2:	2b04      	cmp	r3, #4
   295d4:	d109      	bne.n	295ea <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   295d6:	2000      	movs	r0, #0
   295d8:	4b13      	ldr	r3, [pc, #76]	; (29628 <system_clock_source_get_hz+0xb8>)
   295da:	4798      	blx	r3
   295dc:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   295de:	4b0e      	ldr	r3, [pc, #56]	; (29618 <system_clock_source_get_hz+0xa8>)
   295e0:	689b      	ldr	r3, [r3, #8]
   295e2:	041b      	lsls	r3, r3, #16
   295e4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   295e6:	4353      	muls	r3, r2
   295e8:	e00f      	b.n	2960a <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   295ea:	4b10      	ldr	r3, [pc, #64]	; (2962c <system_clock_source_get_hz+0xbc>)
   295ec:	e00d      	b.n	2960a <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   295ee:	4a0b      	ldr	r2, [pc, #44]	; (2961c <system_clock_source_get_hz+0xac>)
   295f0:	2350      	movs	r3, #80	; 0x50
   295f2:	5cd3      	ldrb	r3, [r2, r3]
   295f4:	b2db      	uxtb	r3, r3
   295f6:	001a      	movs	r2, r3
   295f8:	2304      	movs	r3, #4
   295fa:	4013      	ands	r3, r2
   295fc:	d101      	bne.n	29602 <system_clock_source_get_hz+0x92>
			return 0;
   295fe:	2300      	movs	r3, #0
   29600:	e003      	b.n	2960a <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   29602:	4b05      	ldr	r3, [pc, #20]	; (29618 <system_clock_source_get_hz+0xa8>)
   29604:	68db      	ldr	r3, [r3, #12]
   29606:	e000      	b.n	2960a <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   29608:	2300      	movs	r3, #0
	}
}
   2960a:	0018      	movs	r0, r3
   2960c:	46bd      	mov	sp, r7
   2960e:	b002      	add	sp, #8
   29610:	bd80      	pop	{r7, pc}
   29612:	46c0      	nop			; (mov r8, r8)
   29614:	00039614 	.word	0x00039614
   29618:	2000415c 	.word	0x2000415c
   2961c:	40000800 	.word	0x40000800
   29620:	007a1200 	.word	0x007a1200
   29624:	00029511 	.word	0x00029511
   29628:	0002a00d 	.word	0x0002a00d
   2962c:	02dc6c00 	.word	0x02dc6c00

00029630 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   29630:	b580      	push	{r7, lr}
   29632:	b084      	sub	sp, #16
   29634:	af00      	add	r7, sp, #0
   29636:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   29638:	4b1a      	ldr	r3, [pc, #104]	; (296a4 <system_clock_source_osc8m_set_config+0x74>)
   2963a:	6a1b      	ldr	r3, [r3, #32]
   2963c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2963e:	687b      	ldr	r3, [r7, #4]
   29640:	781b      	ldrb	r3, [r3, #0]
   29642:	1c1a      	adds	r2, r3, #0
   29644:	2303      	movs	r3, #3
   29646:	4013      	ands	r3, r2
   29648:	b2da      	uxtb	r2, r3
   2964a:	230d      	movs	r3, #13
   2964c:	18fb      	adds	r3, r7, r3
   2964e:	2103      	movs	r1, #3
   29650:	400a      	ands	r2, r1
   29652:	0010      	movs	r0, r2
   29654:	781a      	ldrb	r2, [r3, #0]
   29656:	2103      	movs	r1, #3
   29658:	438a      	bics	r2, r1
   2965a:	1c11      	adds	r1, r2, #0
   2965c:	1c02      	adds	r2, r0, #0
   2965e:	430a      	orrs	r2, r1
   29660:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   29662:	687b      	ldr	r3, [r7, #4]
   29664:	789a      	ldrb	r2, [r3, #2]
   29666:	230c      	movs	r3, #12
   29668:	18fb      	adds	r3, r7, r3
   2966a:	01d0      	lsls	r0, r2, #7
   2966c:	781a      	ldrb	r2, [r3, #0]
   2966e:	217f      	movs	r1, #127	; 0x7f
   29670:	400a      	ands	r2, r1
   29672:	1c11      	adds	r1, r2, #0
   29674:	1c02      	adds	r2, r0, #0
   29676:	430a      	orrs	r2, r1
   29678:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2967a:	687b      	ldr	r3, [r7, #4]
   2967c:	785a      	ldrb	r2, [r3, #1]
   2967e:	230c      	movs	r3, #12
   29680:	18fb      	adds	r3, r7, r3
   29682:	2101      	movs	r1, #1
   29684:	400a      	ands	r2, r1
   29686:	0190      	lsls	r0, r2, #6
   29688:	781a      	ldrb	r2, [r3, #0]
   2968a:	2140      	movs	r1, #64	; 0x40
   2968c:	438a      	bics	r2, r1
   2968e:	1c11      	adds	r1, r2, #0
   29690:	1c02      	adds	r2, r0, #0
   29692:	430a      	orrs	r2, r1
   29694:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   29696:	4b03      	ldr	r3, [pc, #12]	; (296a4 <system_clock_source_osc8m_set_config+0x74>)
   29698:	68fa      	ldr	r2, [r7, #12]
   2969a:	621a      	str	r2, [r3, #32]
}
   2969c:	46c0      	nop			; (mov r8, r8)
   2969e:	46bd      	mov	sp, r7
   296a0:	b004      	add	sp, #16
   296a2:	bd80      	pop	{r7, pc}
   296a4:	40000800 	.word	0x40000800

000296a8 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   296a8:	b580      	push	{r7, lr}
   296aa:	b086      	sub	sp, #24
   296ac:	af00      	add	r7, sp, #0
   296ae:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   296b0:	687b      	ldr	r3, [r7, #4]
   296b2:	68db      	ldr	r3, [r3, #12]
   296b4:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   296b6:	687b      	ldr	r3, [r7, #4]
   296b8:	7d1b      	ldrb	r3, [r3, #20]
   296ba:	2b01      	cmp	r3, #1
   296bc:	d10a      	bne.n	296d4 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   296be:	687b      	ldr	r3, [r7, #4]
   296c0:	8a1b      	ldrh	r3, [r3, #16]
   296c2:	3301      	adds	r3, #1
   296c4:	005b      	lsls	r3, r3, #1
   296c6:	001a      	movs	r2, r3
   296c8:	4b36      	ldr	r3, [pc, #216]	; (297a4 <system_clock_source_dpll_set_config+0xfc>)
   296ca:	0011      	movs	r1, r2
   296cc:	6978      	ldr	r0, [r7, #20]
   296ce:	4798      	blx	r3
   296d0:	0003      	movs	r3, r0
   296d2:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   296d4:	687b      	ldr	r3, [r7, #4]
   296d6:	689b      	ldr	r3, [r3, #8]
   296d8:	011a      	lsls	r2, r3, #4
   296da:	4b32      	ldr	r3, [pc, #200]	; (297a4 <system_clock_source_dpll_set_config+0xfc>)
   296dc:	6979      	ldr	r1, [r7, #20]
   296de:	0010      	movs	r0, r2
   296e0:	4798      	blx	r3
   296e2:	0003      	movs	r3, r0
   296e4:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   296e6:	693b      	ldr	r3, [r7, #16]
   296e8:	b2da      	uxtb	r2, r3
   296ea:	230f      	movs	r3, #15
   296ec:	18fb      	adds	r3, r7, r3
   296ee:	210f      	movs	r1, #15
   296f0:	400a      	ands	r2, r1
   296f2:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   296f4:	693b      	ldr	r3, [r7, #16]
   296f6:	091b      	lsrs	r3, r3, #4
   296f8:	3b01      	subs	r3, #1
   296fa:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   296fc:	492a      	ldr	r1, [pc, #168]	; (297a8 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   296fe:	687b      	ldr	r3, [r7, #4]
   29700:	781b      	ldrb	r3, [r3, #0]
   29702:	01db      	lsls	r3, r3, #7
   29704:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   29706:	687b      	ldr	r3, [r7, #4]
   29708:	785b      	ldrb	r3, [r3, #1]
   2970a:	019b      	lsls	r3, r3, #6
   2970c:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2970e:	4313      	orrs	r3, r2
   29710:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   29712:	2344      	movs	r3, #68	; 0x44
   29714:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   29716:	4b24      	ldr	r3, [pc, #144]	; (297a8 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   29718:	220f      	movs	r2, #15
   2971a:	18ba      	adds	r2, r7, r2
   2971c:	7812      	ldrb	r2, [r2, #0]
   2971e:	0412      	lsls	r2, r2, #16
   29720:	0011      	movs	r1, r2
   29722:	22f0      	movs	r2, #240	; 0xf0
   29724:	0312      	lsls	r2, r2, #12
   29726:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   29728:	693a      	ldr	r2, [r7, #16]
   2972a:	0512      	lsls	r2, r2, #20
   2972c:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2972e:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   29730:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   29732:	4b1d      	ldr	r3, [pc, #116]	; (297a8 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   29734:	687a      	ldr	r2, [r7, #4]
   29736:	8a12      	ldrh	r2, [r2, #16]
   29738:	0412      	lsls	r2, r2, #16
   2973a:	0011      	movs	r1, r2
   2973c:	4a1b      	ldr	r2, [pc, #108]	; (297ac <system_clock_source_dpll_set_config+0x104>)
   2973e:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   29740:	687a      	ldr	r2, [r7, #4]
   29742:	7892      	ldrb	r2, [r2, #2]
   29744:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   29746:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   29748:	687a      	ldr	r2, [r7, #4]
   2974a:	7cd2      	ldrb	r2, [r2, #19]
   2974c:	0212      	lsls	r2, r2, #8
   2974e:	0010      	movs	r0, r2
   29750:	22e0      	movs	r2, #224	; 0xe0
   29752:	00d2      	lsls	r2, r2, #3
   29754:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   29756:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   29758:	687a      	ldr	r2, [r7, #4]
   2975a:	7d12      	ldrb	r2, [r2, #20]
   2975c:	0112      	lsls	r2, r2, #4
   2975e:	0010      	movs	r0, r2
   29760:	2230      	movs	r2, #48	; 0x30
   29762:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   29764:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   29766:	687a      	ldr	r2, [r7, #4]
   29768:	78d2      	ldrb	r2, [r2, #3]
   2976a:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2976c:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2976e:	687a      	ldr	r2, [r7, #4]
   29770:	7912      	ldrb	r2, [r2, #4]
   29772:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   29774:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   29776:	687a      	ldr	r2, [r7, #4]
   29778:	7c92      	ldrb	r2, [r2, #18]
   2977a:	0010      	movs	r0, r2
   2977c:	2203      	movs	r2, #3
   2977e:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29780:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   29782:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   29784:	693b      	ldr	r3, [r7, #16]
   29786:	3301      	adds	r3, #1
   29788:	011a      	lsls	r2, r3, #4
   2978a:	230f      	movs	r3, #15
   2978c:	18fb      	adds	r3, r7, r3
   2978e:	781b      	ldrb	r3, [r3, #0]
   29790:	18d3      	adds	r3, r2, r3
   29792:	697a      	ldr	r2, [r7, #20]
   29794:	4353      	muls	r3, r2
   29796:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   29798:	4b05      	ldr	r3, [pc, #20]	; (297b0 <system_clock_source_dpll_set_config+0x108>)
   2979a:	60da      	str	r2, [r3, #12]
}
   2979c:	46c0      	nop			; (mov r8, r8)
   2979e:	46bd      	mov	sp, r7
   297a0:	b006      	add	sp, #24
   297a2:	bd80      	pop	{r7, pc}
   297a4:	00032a85 	.word	0x00032a85
   297a8:	40000800 	.word	0x40000800
   297ac:	07ff0000 	.word	0x07ff0000
   297b0:	2000415c 	.word	0x2000415c

000297b4 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   297b4:	b580      	push	{r7, lr}
   297b6:	b082      	sub	sp, #8
   297b8:	af00      	add	r7, sp, #0
   297ba:	0002      	movs	r2, r0
   297bc:	1dfb      	adds	r3, r7, #7
   297be:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   297c0:	1dfb      	adds	r3, r7, #7
   297c2:	781b      	ldrb	r3, [r3, #0]
   297c4:	2b08      	cmp	r3, #8
   297c6:	d83b      	bhi.n	29840 <system_clock_source_enable+0x8c>
   297c8:	009a      	lsls	r2, r3, #2
   297ca:	4b21      	ldr	r3, [pc, #132]	; (29850 <system_clock_source_enable+0x9c>)
   297cc:	18d3      	adds	r3, r2, r3
   297ce:	681b      	ldr	r3, [r3, #0]
   297d0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   297d2:	4b20      	ldr	r3, [pc, #128]	; (29854 <system_clock_source_enable+0xa0>)
   297d4:	4a1f      	ldr	r2, [pc, #124]	; (29854 <system_clock_source_enable+0xa0>)
   297d6:	6a12      	ldr	r2, [r2, #32]
   297d8:	2102      	movs	r1, #2
   297da:	430a      	orrs	r2, r1
   297dc:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   297de:	2300      	movs	r3, #0
   297e0:	e031      	b.n	29846 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   297e2:	4b1c      	ldr	r3, [pc, #112]	; (29854 <system_clock_source_enable+0xa0>)
   297e4:	4a1b      	ldr	r2, [pc, #108]	; (29854 <system_clock_source_enable+0xa0>)
   297e6:	6992      	ldr	r2, [r2, #24]
   297e8:	2102      	movs	r1, #2
   297ea:	430a      	orrs	r2, r1
   297ec:	619a      	str	r2, [r3, #24]
		break;
   297ee:	e029      	b.n	29844 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   297f0:	4a18      	ldr	r2, [pc, #96]	; (29854 <system_clock_source_enable+0xa0>)
   297f2:	4b18      	ldr	r3, [pc, #96]	; (29854 <system_clock_source_enable+0xa0>)
   297f4:	8a1b      	ldrh	r3, [r3, #16]
   297f6:	b29b      	uxth	r3, r3
   297f8:	2102      	movs	r1, #2
   297fa:	430b      	orrs	r3, r1
   297fc:	b29b      	uxth	r3, r3
   297fe:	8213      	strh	r3, [r2, #16]
		break;
   29800:	e020      	b.n	29844 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   29802:	4a14      	ldr	r2, [pc, #80]	; (29854 <system_clock_source_enable+0xa0>)
   29804:	4b13      	ldr	r3, [pc, #76]	; (29854 <system_clock_source_enable+0xa0>)
   29806:	8a9b      	ldrh	r3, [r3, #20]
   29808:	b29b      	uxth	r3, r3
   2980a:	2102      	movs	r1, #2
   2980c:	430b      	orrs	r3, r1
   2980e:	b29b      	uxth	r3, r3
   29810:	8293      	strh	r3, [r2, #20]
		break;
   29812:	e017      	b.n	29844 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   29814:	4b10      	ldr	r3, [pc, #64]	; (29858 <system_clock_source_enable+0xa4>)
   29816:	681b      	ldr	r3, [r3, #0]
   29818:	2202      	movs	r2, #2
   2981a:	431a      	orrs	r2, r3
   2981c:	4b0e      	ldr	r3, [pc, #56]	; (29858 <system_clock_source_enable+0xa4>)
   2981e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   29820:	4b0e      	ldr	r3, [pc, #56]	; (2985c <system_clock_source_enable+0xa8>)
   29822:	4798      	blx	r3
		break;
   29824:	e00e      	b.n	29844 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   29826:	4a0b      	ldr	r2, [pc, #44]	; (29854 <system_clock_source_enable+0xa0>)
   29828:	490a      	ldr	r1, [pc, #40]	; (29854 <system_clock_source_enable+0xa0>)
   2982a:	2344      	movs	r3, #68	; 0x44
   2982c:	5ccb      	ldrb	r3, [r1, r3]
   2982e:	b2db      	uxtb	r3, r3
   29830:	2102      	movs	r1, #2
   29832:	430b      	orrs	r3, r1
   29834:	b2d9      	uxtb	r1, r3
   29836:	2344      	movs	r3, #68	; 0x44
   29838:	54d1      	strb	r1, [r2, r3]
		break;
   2983a:	e003      	b.n	29844 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2983c:	2300      	movs	r3, #0
   2983e:	e002      	b.n	29846 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   29840:	2317      	movs	r3, #23
   29842:	e000      	b.n	29846 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   29844:	2300      	movs	r3, #0
}
   29846:	0018      	movs	r0, r3
   29848:	46bd      	mov	sp, r7
   2984a:	b002      	add	sp, #8
   2984c:	bd80      	pop	{r7, pc}
   2984e:	46c0      	nop			; (mov r8, r8)
   29850:	00039638 	.word	0x00039638
   29854:	40000800 	.word	0x40000800
   29858:	2000415c 	.word	0x2000415c
   2985c:	0002952d 	.word	0x0002952d

00029860 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   29860:	b580      	push	{r7, lr}
   29862:	b084      	sub	sp, #16
   29864:	af00      	add	r7, sp, #0
   29866:	0002      	movs	r2, r0
   29868:	1dfb      	adds	r3, r7, #7
   2986a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2986c:	2300      	movs	r3, #0
   2986e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   29870:	1dfb      	adds	r3, r7, #7
   29872:	781b      	ldrb	r3, [r3, #0]
   29874:	2b08      	cmp	r3, #8
   29876:	d821      	bhi.n	298bc <system_clock_source_is_ready+0x5c>
   29878:	009a      	lsls	r2, r3, #2
   2987a:	4b18      	ldr	r3, [pc, #96]	; (298dc <system_clock_source_is_ready+0x7c>)
   2987c:	18d3      	adds	r3, r2, r3
   2987e:	681b      	ldr	r3, [r3, #0]
   29880:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   29882:	2308      	movs	r3, #8
   29884:	60fb      	str	r3, [r7, #12]
		break;
   29886:	e01b      	b.n	298c0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   29888:	2304      	movs	r3, #4
   2988a:	60fb      	str	r3, [r7, #12]
		break;
   2988c:	e018      	b.n	298c0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2988e:	2301      	movs	r3, #1
   29890:	60fb      	str	r3, [r7, #12]
		break;
   29892:	e015      	b.n	298c0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   29894:	2302      	movs	r3, #2
   29896:	60fb      	str	r3, [r7, #12]
		break;
   29898:	e012      	b.n	298c0 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2989a:	2310      	movs	r3, #16
   2989c:	60fb      	str	r3, [r7, #12]
		}
		break;
   2989e:	e00f      	b.n	298c0 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   298a0:	4a0f      	ldr	r2, [pc, #60]	; (298e0 <system_clock_source_is_ready+0x80>)
   298a2:	2350      	movs	r3, #80	; 0x50
   298a4:	5cd3      	ldrb	r3, [r2, r3]
   298a6:	b2db      	uxtb	r3, r3
   298a8:	001a      	movs	r2, r3
   298aa:	2303      	movs	r3, #3
   298ac:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   298ae:	3b03      	subs	r3, #3
   298b0:	425a      	negs	r2, r3
   298b2:	4153      	adcs	r3, r2
   298b4:	b2db      	uxtb	r3, r3
   298b6:	e00c      	b.n	298d2 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   298b8:	2301      	movs	r3, #1
   298ba:	e00a      	b.n	298d2 <system_clock_source_is_ready+0x72>

	default:
		return false;
   298bc:	2300      	movs	r3, #0
   298be:	e008      	b.n	298d2 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   298c0:	4b07      	ldr	r3, [pc, #28]	; (298e0 <system_clock_source_is_ready+0x80>)
   298c2:	68db      	ldr	r3, [r3, #12]
   298c4:	68fa      	ldr	r2, [r7, #12]
   298c6:	401a      	ands	r2, r3
   298c8:	68fb      	ldr	r3, [r7, #12]
   298ca:	1ad3      	subs	r3, r2, r3
   298cc:	425a      	negs	r2, r3
   298ce:	4153      	adcs	r3, r2
   298d0:	b2db      	uxtb	r3, r3
}
   298d2:	0018      	movs	r0, r3
   298d4:	46bd      	mov	sp, r7
   298d6:	b004      	add	sp, #16
   298d8:	bd80      	pop	{r7, pc}
   298da:	46c0      	nop			; (mov r8, r8)
   298dc:	0003965c 	.word	0x0003965c
   298e0:	40000800 	.word	0x40000800

000298e4 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   298e4:	b580      	push	{r7, lr}
   298e6:	b082      	sub	sp, #8
   298e8:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   298ea:	003b      	movs	r3, r7
   298ec:	2203      	movs	r2, #3
   298ee:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   298f0:	2300      	movs	r3, #0
   298f2:	607b      	str	r3, [r7, #4]
   298f4:	e009      	b.n	2990a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   298f6:	687b      	ldr	r3, [r7, #4]
   298f8:	b2db      	uxtb	r3, r3
   298fa:	003a      	movs	r2, r7
   298fc:	0011      	movs	r1, r2
   298fe:	0018      	movs	r0, r3
   29900:	4b05      	ldr	r3, [pc, #20]	; (29918 <_switch_peripheral_gclk+0x34>)
   29902:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29904:	687b      	ldr	r3, [r7, #4]
   29906:	3301      	adds	r3, #1
   29908:	607b      	str	r3, [r7, #4]
   2990a:	687b      	ldr	r3, [r7, #4]
   2990c:	2b24      	cmp	r3, #36	; 0x24
   2990e:	d9f2      	bls.n	298f6 <_switch_peripheral_gclk+0x12>
	}
}
   29910:	46c0      	nop			; (mov r8, r8)
   29912:	46bd      	mov	sp, r7
   29914:	b002      	add	sp, #8
   29916:	bd80      	pop	{r7, pc}
   29918:	00029ee9 	.word	0x00029ee9

0002991c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2991c:	b580      	push	{r7, lr}
   2991e:	b0a6      	sub	sp, #152	; 0x98
   29920:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   29922:	4b92      	ldr	r3, [pc, #584]	; (29b6c <system_clock_init+0x250>)
   29924:	22c2      	movs	r2, #194	; 0xc2
   29926:	00d2      	lsls	r2, r2, #3
   29928:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2992a:	2003      	movs	r0, #3
   2992c:	4b90      	ldr	r3, [pc, #576]	; (29b70 <system_clock_init+0x254>)
   2992e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   29930:	4b90      	ldr	r3, [pc, #576]	; (29b74 <system_clock_init+0x258>)
   29932:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   29934:	2394      	movs	r3, #148	; 0x94
   29936:	18fb      	adds	r3, r7, r3
   29938:	0018      	movs	r0, r3
   2993a:	4b8f      	ldr	r3, [pc, #572]	; (29b78 <system_clock_init+0x25c>)
   2993c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2993e:	2394      	movs	r3, #148	; 0x94
   29940:	18fb      	adds	r3, r7, r3
   29942:	2200      	movs	r2, #0
   29944:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   29946:	2394      	movs	r3, #148	; 0x94
   29948:	18fb      	adds	r3, r7, r3
   2994a:	2201      	movs	r2, #1
   2994c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2994e:	2394      	movs	r3, #148	; 0x94
   29950:	18fb      	adds	r3, r7, r3
   29952:	2200      	movs	r2, #0
   29954:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   29956:	2394      	movs	r3, #148	; 0x94
   29958:	18fb      	adds	r3, r7, r3
   2995a:	0018      	movs	r0, r3
   2995c:	4b87      	ldr	r3, [pc, #540]	; (29b7c <system_clock_init+0x260>)
   2995e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   29960:	2006      	movs	r0, #6
   29962:	4b87      	ldr	r3, [pc, #540]	; (29b80 <system_clock_init+0x264>)
   29964:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   29966:	4b87      	ldr	r3, [pc, #540]	; (29b84 <system_clock_init+0x268>)
   29968:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2996a:	2360      	movs	r3, #96	; 0x60
   2996c:	18fb      	adds	r3, r7, r3
   2996e:	0018      	movs	r0, r3
   29970:	4b85      	ldr	r3, [pc, #532]	; (29b88 <system_clock_init+0x26c>)
   29972:	4798      	blx	r3
   29974:	2360      	movs	r3, #96	; 0x60
   29976:	18fb      	adds	r3, r7, r3
   29978:	2206      	movs	r2, #6
   2997a:	701a      	strb	r2, [r3, #0]
   2997c:	2360      	movs	r3, #96	; 0x60
   2997e:	18fb      	adds	r3, r7, r3
   29980:	2208      	movs	r2, #8
   29982:	605a      	str	r2, [r3, #4]
   29984:	2360      	movs	r3, #96	; 0x60
   29986:	18fb      	adds	r3, r7, r3
   29988:	2200      	movs	r2, #0
   2998a:	721a      	strb	r2, [r3, #8]
   2998c:	2360      	movs	r3, #96	; 0x60
   2998e:	18fb      	adds	r3, r7, r3
   29990:	2200      	movs	r2, #0
   29992:	725a      	strb	r2, [r3, #9]
   29994:	2360      	movs	r3, #96	; 0x60
   29996:	18fb      	adds	r3, r7, r3
   29998:	0019      	movs	r1, r3
   2999a:	2001      	movs	r0, #1
   2999c:	4b7b      	ldr	r3, [pc, #492]	; (29b8c <system_clock_init+0x270>)
   2999e:	4798      	blx	r3
   299a0:	2001      	movs	r0, #1
   299a2:	4b7b      	ldr	r3, [pc, #492]	; (29b90 <system_clock_init+0x274>)
   299a4:	4798      	blx	r3
   299a6:	2354      	movs	r3, #84	; 0x54
   299a8:	18fb      	adds	r3, r7, r3
   299aa:	0018      	movs	r0, r3
   299ac:	4b76      	ldr	r3, [pc, #472]	; (29b88 <system_clock_init+0x26c>)
   299ae:	4798      	blx	r3
   299b0:	2354      	movs	r3, #84	; 0x54
   299b2:	18fb      	adds	r3, r7, r3
   299b4:	2203      	movs	r2, #3
   299b6:	701a      	strb	r2, [r3, #0]
   299b8:	2354      	movs	r3, #84	; 0x54
   299ba:	18fb      	adds	r3, r7, r3
   299bc:	2201      	movs	r2, #1
   299be:	605a      	str	r2, [r3, #4]
   299c0:	2354      	movs	r3, #84	; 0x54
   299c2:	18fb      	adds	r3, r7, r3
   299c4:	2201      	movs	r2, #1
   299c6:	721a      	strb	r2, [r3, #8]
   299c8:	2354      	movs	r3, #84	; 0x54
   299ca:	18fb      	adds	r3, r7, r3
   299cc:	2200      	movs	r2, #0
   299ce:	725a      	strb	r2, [r3, #9]
   299d0:	2354      	movs	r3, #84	; 0x54
   299d2:	18fb      	adds	r3, r7, r3
   299d4:	0019      	movs	r1, r3
   299d6:	2002      	movs	r0, #2
   299d8:	4b6c      	ldr	r3, [pc, #432]	; (29b8c <system_clock_init+0x270>)
   299da:	4798      	blx	r3
   299dc:	2002      	movs	r0, #2
   299de:	4b6c      	ldr	r3, [pc, #432]	; (29b90 <system_clock_init+0x274>)
   299e0:	4798      	blx	r3
   299e2:	233c      	movs	r3, #60	; 0x3c
   299e4:	18fb      	adds	r3, r7, r3
   299e6:	0018      	movs	r0, r3
   299e8:	4b67      	ldr	r3, [pc, #412]	; (29b88 <system_clock_init+0x26c>)
   299ea:	4798      	blx	r3
   299ec:	233c      	movs	r3, #60	; 0x3c
   299ee:	18fb      	adds	r3, r7, r3
   299f0:	2203      	movs	r2, #3
   299f2:	701a      	strb	r2, [r3, #0]
   299f4:	233c      	movs	r3, #60	; 0x3c
   299f6:	18fb      	adds	r3, r7, r3
   299f8:	2220      	movs	r2, #32
   299fa:	605a      	str	r2, [r3, #4]
   299fc:	233c      	movs	r3, #60	; 0x3c
   299fe:	18fb      	adds	r3, r7, r3
   29a00:	2200      	movs	r2, #0
   29a02:	721a      	strb	r2, [r3, #8]
   29a04:	233c      	movs	r3, #60	; 0x3c
   29a06:	18fb      	adds	r3, r7, r3
   29a08:	2200      	movs	r2, #0
   29a0a:	725a      	strb	r2, [r3, #9]
   29a0c:	233c      	movs	r3, #60	; 0x3c
   29a0e:	18fb      	adds	r3, r7, r3
   29a10:	0019      	movs	r1, r3
   29a12:	2004      	movs	r0, #4
   29a14:	4b5d      	ldr	r3, [pc, #372]	; (29b8c <system_clock_init+0x270>)
   29a16:	4798      	blx	r3
   29a18:	2004      	movs	r0, #4
   29a1a:	4b5d      	ldr	r3, [pc, #372]	; (29b90 <system_clock_init+0x274>)
   29a1c:	4798      	blx	r3
   29a1e:	2330      	movs	r3, #48	; 0x30
   29a20:	18fb      	adds	r3, r7, r3
   29a22:	0018      	movs	r0, r3
   29a24:	4b58      	ldr	r3, [pc, #352]	; (29b88 <system_clock_init+0x26c>)
   29a26:	4798      	blx	r3
   29a28:	2330      	movs	r3, #48	; 0x30
   29a2a:	18fb      	adds	r3, r7, r3
   29a2c:	2206      	movs	r2, #6
   29a2e:	701a      	strb	r2, [r3, #0]
   29a30:	2330      	movs	r3, #48	; 0x30
   29a32:	18fb      	adds	r3, r7, r3
   29a34:	2201      	movs	r2, #1
   29a36:	605a      	str	r2, [r3, #4]
   29a38:	2330      	movs	r3, #48	; 0x30
   29a3a:	18fb      	adds	r3, r7, r3
   29a3c:	2200      	movs	r2, #0
   29a3e:	721a      	strb	r2, [r3, #8]
   29a40:	2330      	movs	r3, #48	; 0x30
   29a42:	18fb      	adds	r3, r7, r3
   29a44:	2200      	movs	r2, #0
   29a46:	725a      	strb	r2, [r3, #9]
   29a48:	2330      	movs	r3, #48	; 0x30
   29a4a:	18fb      	adds	r3, r7, r3
   29a4c:	0019      	movs	r1, r3
   29a4e:	2005      	movs	r0, #5
   29a50:	4b4e      	ldr	r3, [pc, #312]	; (29b8c <system_clock_init+0x270>)
   29a52:	4798      	blx	r3
   29a54:	2005      	movs	r0, #5
   29a56:	4b4e      	ldr	r3, [pc, #312]	; (29b90 <system_clock_init+0x274>)
   29a58:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   29a5a:	2390      	movs	r3, #144	; 0x90
   29a5c:	18fb      	adds	r3, r7, r3
   29a5e:	0018      	movs	r0, r3
   29a60:	4b4c      	ldr	r3, [pc, #304]	; (29b94 <system_clock_init+0x278>)
   29a62:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   29a64:	2390      	movs	r3, #144	; 0x90
   29a66:	18fb      	adds	r3, r7, r3
   29a68:	2201      	movs	r2, #1
   29a6a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   29a6c:	2390      	movs	r3, #144	; 0x90
   29a6e:	18fb      	adds	r3, r7, r3
   29a70:	0019      	movs	r1, r3
   29a72:	2001      	movs	r0, #1
   29a74:	4b48      	ldr	r3, [pc, #288]	; (29b98 <system_clock_init+0x27c>)
   29a76:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   29a78:	2001      	movs	r0, #1
   29a7a:	4b48      	ldr	r3, [pc, #288]	; (29b9c <system_clock_init+0x280>)
   29a7c:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   29a7e:	2378      	movs	r3, #120	; 0x78
   29a80:	18fb      	adds	r3, r7, r3
   29a82:	0018      	movs	r0, r3
   29a84:	4b46      	ldr	r3, [pc, #280]	; (29ba0 <system_clock_init+0x284>)
   29a86:	4798      	blx	r3

	dpll_config.on_demand        = false;
   29a88:	2378      	movs	r3, #120	; 0x78
   29a8a:	18fb      	adds	r3, r7, r3
   29a8c:	2200      	movs	r2, #0
   29a8e:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   29a90:	2378      	movs	r3, #120	; 0x78
   29a92:	18fb      	adds	r3, r7, r3
   29a94:	2200      	movs	r2, #0
   29a96:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   29a98:	2378      	movs	r3, #120	; 0x78
   29a9a:	18fb      	adds	r3, r7, r3
   29a9c:	2200      	movs	r2, #0
   29a9e:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   29aa0:	2378      	movs	r3, #120	; 0x78
   29aa2:	18fb      	adds	r3, r7, r3
   29aa4:	2200      	movs	r2, #0
   29aa6:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   29aa8:	2378      	movs	r3, #120	; 0x78
   29aaa:	18fb      	adds	r3, r7, r3
   29aac:	2200      	movs	r2, #0
   29aae:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   29ab0:	2378      	movs	r3, #120	; 0x78
   29ab2:	18fb      	adds	r3, r7, r3
   29ab4:	2200      	movs	r2, #0
   29ab6:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   29ab8:	2378      	movs	r3, #120	; 0x78
   29aba:	18fb      	adds	r3, r7, r3
   29abc:	2200      	movs	r2, #0
   29abe:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   29ac0:	2378      	movs	r3, #120	; 0x78
   29ac2:	18fb      	adds	r3, r7, r3
   29ac4:	2202      	movs	r2, #2
   29ac6:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   29ac8:	2378      	movs	r3, #120	; 0x78
   29aca:	18fb      	adds	r3, r7, r3
   29acc:	4a35      	ldr	r2, [pc, #212]	; (29ba4 <system_clock_init+0x288>)
   29ace:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   29ad0:	2378      	movs	r3, #120	; 0x78
   29ad2:	18fb      	adds	r3, r7, r3
   29ad4:	2201      	movs	r2, #1
   29ad6:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   29ad8:	2378      	movs	r3, #120	; 0x78
   29ada:	18fb      	adds	r3, r7, r3
   29adc:	4a32      	ldr	r2, [pc, #200]	; (29ba8 <system_clock_init+0x28c>)
   29ade:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   29ae0:	2378      	movs	r3, #120	; 0x78
   29ae2:	18fb      	adds	r3, r7, r3
   29ae4:	0018      	movs	r0, r3
   29ae6:	4b31      	ldr	r3, [pc, #196]	; (29bac <system_clock_init+0x290>)
   29ae8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   29aea:	2008      	movs	r0, #8
   29aec:	4b24      	ldr	r3, [pc, #144]	; (29b80 <system_clock_init+0x264>)
   29aee:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   29af0:	46c0      	nop			; (mov r8, r8)
   29af2:	2008      	movs	r0, #8
   29af4:	4b2e      	ldr	r3, [pc, #184]	; (29bb0 <system_clock_init+0x294>)
   29af6:	4798      	blx	r3
   29af8:	0003      	movs	r3, r0
   29afa:	001a      	movs	r2, r3
   29afc:	2301      	movs	r3, #1
   29afe:	4053      	eors	r3, r2
   29b00:	b2db      	uxtb	r3, r3
   29b02:	2b00      	cmp	r3, #0
   29b04:	d1f5      	bne.n	29af2 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   29b06:	4919      	ldr	r1, [pc, #100]	; (29b6c <system_clock_init+0x250>)
   29b08:	2244      	movs	r2, #68	; 0x44
   29b0a:	5c8b      	ldrb	r3, [r1, r2]
   29b0c:	2080      	movs	r0, #128	; 0x80
   29b0e:	4240      	negs	r0, r0
   29b10:	4303      	orrs	r3, r0
   29b12:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   29b14:	2000      	movs	r0, #0
   29b16:	4b27      	ldr	r3, [pc, #156]	; (29bb4 <system_clock_init+0x298>)
   29b18:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   29b1a:	2100      	movs	r1, #0
   29b1c:	2000      	movs	r0, #0
   29b1e:	4b26      	ldr	r3, [pc, #152]	; (29bb8 <system_clock_init+0x29c>)
   29b20:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   29b22:	2100      	movs	r1, #0
   29b24:	2001      	movs	r0, #1
   29b26:	4b24      	ldr	r3, [pc, #144]	; (29bb8 <system_clock_init+0x29c>)
   29b28:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   29b2a:	2100      	movs	r1, #0
   29b2c:	2002      	movs	r0, #2
   29b2e:	4b22      	ldr	r3, [pc, #136]	; (29bb8 <system_clock_init+0x29c>)
   29b30:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   29b32:	003b      	movs	r3, r7
   29b34:	0018      	movs	r0, r3
   29b36:	4b14      	ldr	r3, [pc, #80]	; (29b88 <system_clock_init+0x26c>)
   29b38:	4798      	blx	r3
   29b3a:	003b      	movs	r3, r7
   29b3c:	2208      	movs	r2, #8
   29b3e:	701a      	strb	r2, [r3, #0]
   29b40:	003b      	movs	r3, r7
   29b42:	2201      	movs	r2, #1
   29b44:	605a      	str	r2, [r3, #4]
   29b46:	003b      	movs	r3, r7
   29b48:	2200      	movs	r2, #0
   29b4a:	721a      	strb	r2, [r3, #8]
   29b4c:	003b      	movs	r3, r7
   29b4e:	2201      	movs	r2, #1
   29b50:	725a      	strb	r2, [r3, #9]
   29b52:	003b      	movs	r3, r7
   29b54:	0019      	movs	r1, r3
   29b56:	2000      	movs	r0, #0
   29b58:	4b0c      	ldr	r3, [pc, #48]	; (29b8c <system_clock_init+0x270>)
   29b5a:	4798      	blx	r3
   29b5c:	2000      	movs	r0, #0
   29b5e:	4b0c      	ldr	r3, [pc, #48]	; (29b90 <system_clock_init+0x274>)
   29b60:	4798      	blx	r3
#endif
}
   29b62:	46c0      	nop			; (mov r8, r8)
   29b64:	46bd      	mov	sp, r7
   29b66:	b026      	add	sp, #152	; 0x98
   29b68:	bd80      	pop	{r7, pc}
   29b6a:	46c0      	nop			; (mov r8, r8)
   29b6c:	40000800 	.word	0x40000800
   29b70:	000294dd 	.word	0x000294dd
   29b74:	000298e5 	.word	0x000298e5
   29b78:	000293ed 	.word	0x000293ed
   29b7c:	00029631 	.word	0x00029631
   29b80:	000297b5 	.word	0x000297b5
   29b84:	00029c61 	.word	0x00029c61
   29b88:	000293a9 	.word	0x000293a9
   29b8c:	00029c91 	.word	0x00029c91
   29b90:	00029db5 	.word	0x00029db5
   29b94:	000293d7 	.word	0x000293d7
   29b98:	00029ee9 	.word	0x00029ee9
   29b9c:	00029f2d 	.word	0x00029f2d
   29ba0:	00029485 	.word	0x00029485
   29ba4:	000f4240 	.word	0x000f4240
   29ba8:	02dc6c00 	.word	0x02dc6c00
   29bac:	000296a9 	.word	0x000296a9
   29bb0:	00029861 	.word	0x00029861
   29bb4:	00029411 	.word	0x00029411
   29bb8:	00029431 	.word	0x00029431

00029bbc <system_apb_clock_set_mask>:
{
   29bbc:	b580      	push	{r7, lr}
   29bbe:	b082      	sub	sp, #8
   29bc0:	af00      	add	r7, sp, #0
   29bc2:	0002      	movs	r2, r0
   29bc4:	6039      	str	r1, [r7, #0]
   29bc6:	1dfb      	adds	r3, r7, #7
   29bc8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29bca:	1dfb      	adds	r3, r7, #7
   29bcc:	781b      	ldrb	r3, [r3, #0]
   29bce:	2b01      	cmp	r3, #1
   29bd0:	d00a      	beq.n	29be8 <system_apb_clock_set_mask+0x2c>
   29bd2:	2b02      	cmp	r3, #2
   29bd4:	d00f      	beq.n	29bf6 <system_apb_clock_set_mask+0x3a>
   29bd6:	2b00      	cmp	r3, #0
   29bd8:	d114      	bne.n	29c04 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29bda:	4b0e      	ldr	r3, [pc, #56]	; (29c14 <system_apb_clock_set_mask+0x58>)
   29bdc:	4a0d      	ldr	r2, [pc, #52]	; (29c14 <system_apb_clock_set_mask+0x58>)
   29bde:	6991      	ldr	r1, [r2, #24]
   29be0:	683a      	ldr	r2, [r7, #0]
   29be2:	430a      	orrs	r2, r1
   29be4:	619a      	str	r2, [r3, #24]
			break;
   29be6:	e00f      	b.n	29c08 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29be8:	4b0a      	ldr	r3, [pc, #40]	; (29c14 <system_apb_clock_set_mask+0x58>)
   29bea:	4a0a      	ldr	r2, [pc, #40]	; (29c14 <system_apb_clock_set_mask+0x58>)
   29bec:	69d1      	ldr	r1, [r2, #28]
   29bee:	683a      	ldr	r2, [r7, #0]
   29bf0:	430a      	orrs	r2, r1
   29bf2:	61da      	str	r2, [r3, #28]
			break;
   29bf4:	e008      	b.n	29c08 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29bf6:	4b07      	ldr	r3, [pc, #28]	; (29c14 <system_apb_clock_set_mask+0x58>)
   29bf8:	4a06      	ldr	r2, [pc, #24]	; (29c14 <system_apb_clock_set_mask+0x58>)
   29bfa:	6a11      	ldr	r1, [r2, #32]
   29bfc:	683a      	ldr	r2, [r7, #0]
   29bfe:	430a      	orrs	r2, r1
   29c00:	621a      	str	r2, [r3, #32]
			break;
   29c02:	e001      	b.n	29c08 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29c04:	2317      	movs	r3, #23
   29c06:	e000      	b.n	29c0a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29c08:	2300      	movs	r3, #0
}
   29c0a:	0018      	movs	r0, r3
   29c0c:	46bd      	mov	sp, r7
   29c0e:	b002      	add	sp, #8
   29c10:	bd80      	pop	{r7, pc}
   29c12:	46c0      	nop			; (mov r8, r8)
   29c14:	40000400 	.word	0x40000400

00029c18 <system_interrupt_enter_critical_section>:
{
   29c18:	b580      	push	{r7, lr}
   29c1a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   29c1c:	4b02      	ldr	r3, [pc, #8]	; (29c28 <system_interrupt_enter_critical_section+0x10>)
   29c1e:	4798      	blx	r3
}
   29c20:	46c0      	nop			; (mov r8, r8)
   29c22:	46bd      	mov	sp, r7
   29c24:	bd80      	pop	{r7, pc}
   29c26:	46c0      	nop			; (mov r8, r8)
   29c28:	00026255 	.word	0x00026255

00029c2c <system_interrupt_leave_critical_section>:
{
   29c2c:	b580      	push	{r7, lr}
   29c2e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   29c30:	4b02      	ldr	r3, [pc, #8]	; (29c3c <system_interrupt_leave_critical_section+0x10>)
   29c32:	4798      	blx	r3
}
   29c34:	46c0      	nop			; (mov r8, r8)
   29c36:	46bd      	mov	sp, r7
   29c38:	bd80      	pop	{r7, pc}
   29c3a:	46c0      	nop			; (mov r8, r8)
   29c3c:	000262a9 	.word	0x000262a9

00029c40 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   29c40:	b580      	push	{r7, lr}
   29c42:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   29c44:	4b05      	ldr	r3, [pc, #20]	; (29c5c <system_gclk_is_syncing+0x1c>)
   29c46:	785b      	ldrb	r3, [r3, #1]
   29c48:	b2db      	uxtb	r3, r3
   29c4a:	b25b      	sxtb	r3, r3
   29c4c:	2b00      	cmp	r3, #0
   29c4e:	da01      	bge.n	29c54 <system_gclk_is_syncing+0x14>
		return true;
   29c50:	2301      	movs	r3, #1
   29c52:	e000      	b.n	29c56 <system_gclk_is_syncing+0x16>
	}

	return false;
   29c54:	2300      	movs	r3, #0
}
   29c56:	0018      	movs	r0, r3
   29c58:	46bd      	mov	sp, r7
   29c5a:	bd80      	pop	{r7, pc}
   29c5c:	40000c00 	.word	0x40000c00

00029c60 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   29c60:	b580      	push	{r7, lr}
   29c62:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   29c64:	2108      	movs	r1, #8
   29c66:	2000      	movs	r0, #0
   29c68:	4b07      	ldr	r3, [pc, #28]	; (29c88 <system_gclk_init+0x28>)
   29c6a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   29c6c:	4b07      	ldr	r3, [pc, #28]	; (29c8c <system_gclk_init+0x2c>)
   29c6e:	2201      	movs	r2, #1
   29c70:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   29c72:	46c0      	nop			; (mov r8, r8)
   29c74:	4b05      	ldr	r3, [pc, #20]	; (29c8c <system_gclk_init+0x2c>)
   29c76:	781b      	ldrb	r3, [r3, #0]
   29c78:	b2db      	uxtb	r3, r3
   29c7a:	001a      	movs	r2, r3
   29c7c:	2301      	movs	r3, #1
   29c7e:	4013      	ands	r3, r2
   29c80:	d1f8      	bne.n	29c74 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   29c82:	46c0      	nop			; (mov r8, r8)
   29c84:	46bd      	mov	sp, r7
   29c86:	bd80      	pop	{r7, pc}
   29c88:	00029bbd 	.word	0x00029bbd
   29c8c:	40000c00 	.word	0x40000c00

00029c90 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   29c90:	b580      	push	{r7, lr}
   29c92:	b086      	sub	sp, #24
   29c94:	af00      	add	r7, sp, #0
   29c96:	0002      	movs	r2, r0
   29c98:	6039      	str	r1, [r7, #0]
   29c9a:	1dfb      	adds	r3, r7, #7
   29c9c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   29c9e:	1dfb      	adds	r3, r7, #7
   29ca0:	781b      	ldrb	r3, [r3, #0]
   29ca2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   29ca4:	1dfb      	adds	r3, r7, #7
   29ca6:	781b      	ldrb	r3, [r3, #0]
   29ca8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   29caa:	683b      	ldr	r3, [r7, #0]
   29cac:	781b      	ldrb	r3, [r3, #0]
   29cae:	021b      	lsls	r3, r3, #8
   29cb0:	001a      	movs	r2, r3
   29cb2:	697b      	ldr	r3, [r7, #20]
   29cb4:	4313      	orrs	r3, r2
   29cb6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   29cb8:	683b      	ldr	r3, [r7, #0]
   29cba:	785b      	ldrb	r3, [r3, #1]
   29cbc:	2b00      	cmp	r3, #0
   29cbe:	d004      	beq.n	29cca <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   29cc0:	697b      	ldr	r3, [r7, #20]
   29cc2:	2280      	movs	r2, #128	; 0x80
   29cc4:	02d2      	lsls	r2, r2, #11
   29cc6:	4313      	orrs	r3, r2
   29cc8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   29cca:	683b      	ldr	r3, [r7, #0]
   29ccc:	7a5b      	ldrb	r3, [r3, #9]
   29cce:	2b00      	cmp	r3, #0
   29cd0:	d004      	beq.n	29cdc <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   29cd2:	697b      	ldr	r3, [r7, #20]
   29cd4:	2280      	movs	r2, #128	; 0x80
   29cd6:	0312      	lsls	r2, r2, #12
   29cd8:	4313      	orrs	r3, r2
   29cda:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   29cdc:	683b      	ldr	r3, [r7, #0]
   29cde:	685b      	ldr	r3, [r3, #4]
   29ce0:	2b01      	cmp	r3, #1
   29ce2:	d92c      	bls.n	29d3e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   29ce4:	683b      	ldr	r3, [r7, #0]
   29ce6:	685a      	ldr	r2, [r3, #4]
   29ce8:	683b      	ldr	r3, [r7, #0]
   29cea:	685b      	ldr	r3, [r3, #4]
   29cec:	3b01      	subs	r3, #1
   29cee:	4013      	ands	r3, r2
   29cf0:	d11a      	bne.n	29d28 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   29cf2:	2300      	movs	r3, #0
   29cf4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   29cf6:	2302      	movs	r3, #2
   29cf8:	60bb      	str	r3, [r7, #8]
   29cfa:	e005      	b.n	29d08 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   29cfc:	68fb      	ldr	r3, [r7, #12]
   29cfe:	3301      	adds	r3, #1
   29d00:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   29d02:	68bb      	ldr	r3, [r7, #8]
   29d04:	005b      	lsls	r3, r3, #1
   29d06:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   29d08:	683b      	ldr	r3, [r7, #0]
   29d0a:	685a      	ldr	r2, [r3, #4]
   29d0c:	68bb      	ldr	r3, [r7, #8]
   29d0e:	429a      	cmp	r2, r3
   29d10:	d8f4      	bhi.n	29cfc <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   29d12:	68fb      	ldr	r3, [r7, #12]
   29d14:	021b      	lsls	r3, r3, #8
   29d16:	693a      	ldr	r2, [r7, #16]
   29d18:	4313      	orrs	r3, r2
   29d1a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   29d1c:	697b      	ldr	r3, [r7, #20]
   29d1e:	2280      	movs	r2, #128	; 0x80
   29d20:	0352      	lsls	r2, r2, #13
   29d22:	4313      	orrs	r3, r2
   29d24:	617b      	str	r3, [r7, #20]
   29d26:	e00a      	b.n	29d3e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   29d28:	683b      	ldr	r3, [r7, #0]
   29d2a:	685b      	ldr	r3, [r3, #4]
   29d2c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   29d2e:	693a      	ldr	r2, [r7, #16]
   29d30:	4313      	orrs	r3, r2
   29d32:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   29d34:	697b      	ldr	r3, [r7, #20]
   29d36:	2280      	movs	r2, #128	; 0x80
   29d38:	0292      	lsls	r2, r2, #10
   29d3a:	4313      	orrs	r3, r2
   29d3c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   29d3e:	683b      	ldr	r3, [r7, #0]
   29d40:	7a1b      	ldrb	r3, [r3, #8]
   29d42:	2b00      	cmp	r3, #0
   29d44:	d004      	beq.n	29d50 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   29d46:	697b      	ldr	r3, [r7, #20]
   29d48:	2280      	movs	r2, #128	; 0x80
   29d4a:	0392      	lsls	r2, r2, #14
   29d4c:	4313      	orrs	r3, r2
   29d4e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   29d50:	46c0      	nop			; (mov r8, r8)
   29d52:	4b13      	ldr	r3, [pc, #76]	; (29da0 <system_gclk_gen_set_config+0x110>)
   29d54:	4798      	blx	r3
   29d56:	1e03      	subs	r3, r0, #0
   29d58:	d1fb      	bne.n	29d52 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29d5a:	4b12      	ldr	r3, [pc, #72]	; (29da4 <system_gclk_gen_set_config+0x114>)
   29d5c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   29d5e:	4a12      	ldr	r2, [pc, #72]	; (29da8 <system_gclk_gen_set_config+0x118>)
   29d60:	1dfb      	adds	r3, r7, #7
   29d62:	781b      	ldrb	r3, [r3, #0]
   29d64:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   29d66:	46c0      	nop			; (mov r8, r8)
   29d68:	4b0d      	ldr	r3, [pc, #52]	; (29da0 <system_gclk_gen_set_config+0x110>)
   29d6a:	4798      	blx	r3
   29d6c:	1e03      	subs	r3, r0, #0
   29d6e:	d1fb      	bne.n	29d68 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   29d70:	4b0e      	ldr	r3, [pc, #56]	; (29dac <system_gclk_gen_set_config+0x11c>)
   29d72:	693a      	ldr	r2, [r7, #16]
   29d74:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   29d76:	46c0      	nop			; (mov r8, r8)
   29d78:	4b09      	ldr	r3, [pc, #36]	; (29da0 <system_gclk_gen_set_config+0x110>)
   29d7a:	4798      	blx	r3
   29d7c:	1e03      	subs	r3, r0, #0
   29d7e:	d1fb      	bne.n	29d78 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   29d80:	4b0a      	ldr	r3, [pc, #40]	; (29dac <system_gclk_gen_set_config+0x11c>)
   29d82:	4a0a      	ldr	r2, [pc, #40]	; (29dac <system_gclk_gen_set_config+0x11c>)
   29d84:	6851      	ldr	r1, [r2, #4]
   29d86:	2280      	movs	r2, #128	; 0x80
   29d88:	0252      	lsls	r2, r2, #9
   29d8a:	4011      	ands	r1, r2
   29d8c:	697a      	ldr	r2, [r7, #20]
   29d8e:	430a      	orrs	r2, r1
   29d90:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29d92:	4b07      	ldr	r3, [pc, #28]	; (29db0 <system_gclk_gen_set_config+0x120>)
   29d94:	4798      	blx	r3
}
   29d96:	46c0      	nop			; (mov r8, r8)
   29d98:	46bd      	mov	sp, r7
   29d9a:	b006      	add	sp, #24
   29d9c:	bd80      	pop	{r7, pc}
   29d9e:	46c0      	nop			; (mov r8, r8)
   29da0:	00029c41 	.word	0x00029c41
   29da4:	00029c19 	.word	0x00029c19
   29da8:	40000c08 	.word	0x40000c08
   29dac:	40000c00 	.word	0x40000c00
   29db0:	00029c2d 	.word	0x00029c2d

00029db4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   29db4:	b580      	push	{r7, lr}
   29db6:	b082      	sub	sp, #8
   29db8:	af00      	add	r7, sp, #0
   29dba:	0002      	movs	r2, r0
   29dbc:	1dfb      	adds	r3, r7, #7
   29dbe:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29dc0:	46c0      	nop			; (mov r8, r8)
   29dc2:	4b0e      	ldr	r3, [pc, #56]	; (29dfc <system_gclk_gen_enable+0x48>)
   29dc4:	4798      	blx	r3
   29dc6:	1e03      	subs	r3, r0, #0
   29dc8:	d1fb      	bne.n	29dc2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29dca:	4b0d      	ldr	r3, [pc, #52]	; (29e00 <system_gclk_gen_enable+0x4c>)
   29dcc:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29dce:	4a0d      	ldr	r2, [pc, #52]	; (29e04 <system_gclk_gen_enable+0x50>)
   29dd0:	1dfb      	adds	r3, r7, #7
   29dd2:	781b      	ldrb	r3, [r3, #0]
   29dd4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29dd6:	46c0      	nop			; (mov r8, r8)
   29dd8:	4b08      	ldr	r3, [pc, #32]	; (29dfc <system_gclk_gen_enable+0x48>)
   29dda:	4798      	blx	r3
   29ddc:	1e03      	subs	r3, r0, #0
   29dde:	d1fb      	bne.n	29dd8 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   29de0:	4b09      	ldr	r3, [pc, #36]	; (29e08 <system_gclk_gen_enable+0x54>)
   29de2:	4a09      	ldr	r2, [pc, #36]	; (29e08 <system_gclk_gen_enable+0x54>)
   29de4:	6852      	ldr	r2, [r2, #4]
   29de6:	2180      	movs	r1, #128	; 0x80
   29de8:	0249      	lsls	r1, r1, #9
   29dea:	430a      	orrs	r2, r1
   29dec:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29dee:	4b07      	ldr	r3, [pc, #28]	; (29e0c <system_gclk_gen_enable+0x58>)
   29df0:	4798      	blx	r3
}
   29df2:	46c0      	nop			; (mov r8, r8)
   29df4:	46bd      	mov	sp, r7
   29df6:	b002      	add	sp, #8
   29df8:	bd80      	pop	{r7, pc}
   29dfa:	46c0      	nop			; (mov r8, r8)
   29dfc:	00029c41 	.word	0x00029c41
   29e00:	00029c19 	.word	0x00029c19
   29e04:	40000c04 	.word	0x40000c04
   29e08:	40000c00 	.word	0x40000c00
   29e0c:	00029c2d 	.word	0x00029c2d

00029e10 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   29e10:	b580      	push	{r7, lr}
   29e12:	b086      	sub	sp, #24
   29e14:	af00      	add	r7, sp, #0
   29e16:	0002      	movs	r2, r0
   29e18:	1dfb      	adds	r3, r7, #7
   29e1a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29e1c:	46c0      	nop			; (mov r8, r8)
   29e1e:	4b2a      	ldr	r3, [pc, #168]	; (29ec8 <system_gclk_gen_get_hz+0xb8>)
   29e20:	4798      	blx	r3
   29e22:	1e03      	subs	r3, r0, #0
   29e24:	d1fb      	bne.n	29e1e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29e26:	4b29      	ldr	r3, [pc, #164]	; (29ecc <system_gclk_gen_get_hz+0xbc>)
   29e28:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29e2a:	4a29      	ldr	r2, [pc, #164]	; (29ed0 <system_gclk_gen_get_hz+0xc0>)
   29e2c:	1dfb      	adds	r3, r7, #7
   29e2e:	781b      	ldrb	r3, [r3, #0]
   29e30:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29e32:	46c0      	nop			; (mov r8, r8)
   29e34:	4b24      	ldr	r3, [pc, #144]	; (29ec8 <system_gclk_gen_get_hz+0xb8>)
   29e36:	4798      	blx	r3
   29e38:	1e03      	subs	r3, r0, #0
   29e3a:	d1fb      	bne.n	29e34 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   29e3c:	4b25      	ldr	r3, [pc, #148]	; (29ed4 <system_gclk_gen_get_hz+0xc4>)
   29e3e:	685b      	ldr	r3, [r3, #4]
   29e40:	04db      	lsls	r3, r3, #19
   29e42:	0edb      	lsrs	r3, r3, #27
   29e44:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   29e46:	0018      	movs	r0, r3
   29e48:	4b23      	ldr	r3, [pc, #140]	; (29ed8 <system_gclk_gen_get_hz+0xc8>)
   29e4a:	4798      	blx	r3
   29e4c:	0003      	movs	r3, r0
   29e4e:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29e50:	4a1f      	ldr	r2, [pc, #124]	; (29ed0 <system_gclk_gen_get_hz+0xc0>)
   29e52:	1dfb      	adds	r3, r7, #7
   29e54:	781b      	ldrb	r3, [r3, #0]
   29e56:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   29e58:	4b1e      	ldr	r3, [pc, #120]	; (29ed4 <system_gclk_gen_get_hz+0xc4>)
   29e5a:	685b      	ldr	r3, [r3, #4]
   29e5c:	02db      	lsls	r3, r3, #11
   29e5e:	0fdb      	lsrs	r3, r3, #31
   29e60:	b2da      	uxtb	r2, r3
   29e62:	2313      	movs	r3, #19
   29e64:	18fb      	adds	r3, r7, r3
   29e66:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   29e68:	4a1c      	ldr	r2, [pc, #112]	; (29edc <system_gclk_gen_get_hz+0xcc>)
   29e6a:	1dfb      	adds	r3, r7, #7
   29e6c:	781b      	ldrb	r3, [r3, #0]
   29e6e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29e70:	46c0      	nop			; (mov r8, r8)
   29e72:	4b15      	ldr	r3, [pc, #84]	; (29ec8 <system_gclk_gen_get_hz+0xb8>)
   29e74:	4798      	blx	r3
   29e76:	1e03      	subs	r3, r0, #0
   29e78:	d1fb      	bne.n	29e72 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   29e7a:	4b16      	ldr	r3, [pc, #88]	; (29ed4 <system_gclk_gen_get_hz+0xc4>)
   29e7c:	689b      	ldr	r3, [r3, #8]
   29e7e:	021b      	lsls	r3, r3, #8
   29e80:	0c1b      	lsrs	r3, r3, #16
   29e82:	b29b      	uxth	r3, r3
   29e84:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   29e86:	4b16      	ldr	r3, [pc, #88]	; (29ee0 <system_gclk_gen_get_hz+0xd0>)
   29e88:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   29e8a:	2313      	movs	r3, #19
   29e8c:	18fb      	adds	r3, r7, r3
   29e8e:	781b      	ldrb	r3, [r3, #0]
   29e90:	2b00      	cmp	r3, #0
   29e92:	d109      	bne.n	29ea8 <system_gclk_gen_get_hz+0x98>
   29e94:	68fb      	ldr	r3, [r7, #12]
   29e96:	2b01      	cmp	r3, #1
   29e98:	d906      	bls.n	29ea8 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   29e9a:	4b12      	ldr	r3, [pc, #72]	; (29ee4 <system_gclk_gen_get_hz+0xd4>)
   29e9c:	68f9      	ldr	r1, [r7, #12]
   29e9e:	6978      	ldr	r0, [r7, #20]
   29ea0:	4798      	blx	r3
   29ea2:	0003      	movs	r3, r0
   29ea4:	617b      	str	r3, [r7, #20]
   29ea6:	e00a      	b.n	29ebe <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   29ea8:	2313      	movs	r3, #19
   29eaa:	18fb      	adds	r3, r7, r3
   29eac:	781b      	ldrb	r3, [r3, #0]
   29eae:	2b00      	cmp	r3, #0
   29eb0:	d005      	beq.n	29ebe <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   29eb2:	68fb      	ldr	r3, [r7, #12]
   29eb4:	3301      	adds	r3, #1
   29eb6:	697a      	ldr	r2, [r7, #20]
   29eb8:	40da      	lsrs	r2, r3
   29eba:	0013      	movs	r3, r2
   29ebc:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   29ebe:	697b      	ldr	r3, [r7, #20]
}
   29ec0:	0018      	movs	r0, r3
   29ec2:	46bd      	mov	sp, r7
   29ec4:	b006      	add	sp, #24
   29ec6:	bd80      	pop	{r7, pc}
   29ec8:	00029c41 	.word	0x00029c41
   29ecc:	00029c19 	.word	0x00029c19
   29ed0:	40000c04 	.word	0x40000c04
   29ed4:	40000c00 	.word	0x40000c00
   29ed8:	00029571 	.word	0x00029571
   29edc:	40000c08 	.word	0x40000c08
   29ee0:	00029c2d 	.word	0x00029c2d
   29ee4:	00032a85 	.word	0x00032a85

00029ee8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   29ee8:	b580      	push	{r7, lr}
   29eea:	b084      	sub	sp, #16
   29eec:	af00      	add	r7, sp, #0
   29eee:	0002      	movs	r2, r0
   29ef0:	6039      	str	r1, [r7, #0]
   29ef2:	1dfb      	adds	r3, r7, #7
   29ef4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   29ef6:	1dfb      	adds	r3, r7, #7
   29ef8:	781b      	ldrb	r3, [r3, #0]
   29efa:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   29efc:	683b      	ldr	r3, [r7, #0]
   29efe:	781b      	ldrb	r3, [r3, #0]
   29f00:	021b      	lsls	r3, r3, #8
   29f02:	001a      	movs	r2, r3
   29f04:	68fb      	ldr	r3, [r7, #12]
   29f06:	4313      	orrs	r3, r2
   29f08:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   29f0a:	1dfb      	adds	r3, r7, #7
   29f0c:	781b      	ldrb	r3, [r3, #0]
   29f0e:	0018      	movs	r0, r3
   29f10:	4b04      	ldr	r3, [pc, #16]	; (29f24 <system_gclk_chan_set_config+0x3c>)
   29f12:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   29f14:	4b04      	ldr	r3, [pc, #16]	; (29f28 <system_gclk_chan_set_config+0x40>)
   29f16:	68fa      	ldr	r2, [r7, #12]
   29f18:	b292      	uxth	r2, r2
   29f1a:	805a      	strh	r2, [r3, #2]
}
   29f1c:	46c0      	nop			; (mov r8, r8)
   29f1e:	46bd      	mov	sp, r7
   29f20:	b004      	add	sp, #16
   29f22:	bd80      	pop	{r7, pc}
   29f24:	00029f75 	.word	0x00029f75
   29f28:	40000c00 	.word	0x40000c00

00029f2c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   29f2c:	b580      	push	{r7, lr}
   29f2e:	b082      	sub	sp, #8
   29f30:	af00      	add	r7, sp, #0
   29f32:	0002      	movs	r2, r0
   29f34:	1dfb      	adds	r3, r7, #7
   29f36:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29f38:	4b0a      	ldr	r3, [pc, #40]	; (29f64 <system_gclk_chan_enable+0x38>)
   29f3a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29f3c:	4a0a      	ldr	r2, [pc, #40]	; (29f68 <system_gclk_chan_enable+0x3c>)
   29f3e:	1dfb      	adds	r3, r7, #7
   29f40:	781b      	ldrb	r3, [r3, #0]
   29f42:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   29f44:	4909      	ldr	r1, [pc, #36]	; (29f6c <system_gclk_chan_enable+0x40>)
   29f46:	4b09      	ldr	r3, [pc, #36]	; (29f6c <system_gclk_chan_enable+0x40>)
   29f48:	885b      	ldrh	r3, [r3, #2]
   29f4a:	b29b      	uxth	r3, r3
   29f4c:	2280      	movs	r2, #128	; 0x80
   29f4e:	01d2      	lsls	r2, r2, #7
   29f50:	4313      	orrs	r3, r2
   29f52:	b29b      	uxth	r3, r3
   29f54:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   29f56:	4b06      	ldr	r3, [pc, #24]	; (29f70 <system_gclk_chan_enable+0x44>)
   29f58:	4798      	blx	r3
}
   29f5a:	46c0      	nop			; (mov r8, r8)
   29f5c:	46bd      	mov	sp, r7
   29f5e:	b002      	add	sp, #8
   29f60:	bd80      	pop	{r7, pc}
   29f62:	46c0      	nop			; (mov r8, r8)
   29f64:	00029c19 	.word	0x00029c19
   29f68:	40000c02 	.word	0x40000c02
   29f6c:	40000c00 	.word	0x40000c00
   29f70:	00029c2d 	.word	0x00029c2d

00029f74 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   29f74:	b580      	push	{r7, lr}
   29f76:	b084      	sub	sp, #16
   29f78:	af00      	add	r7, sp, #0
   29f7a:	0002      	movs	r2, r0
   29f7c:	1dfb      	adds	r3, r7, #7
   29f7e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29f80:	4b1c      	ldr	r3, [pc, #112]	; (29ff4 <system_gclk_chan_disable+0x80>)
   29f82:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29f84:	4a1c      	ldr	r2, [pc, #112]	; (29ff8 <system_gclk_chan_disable+0x84>)
   29f86:	1dfb      	adds	r3, r7, #7
   29f88:	781b      	ldrb	r3, [r3, #0]
   29f8a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   29f8c:	4b1b      	ldr	r3, [pc, #108]	; (29ffc <system_gclk_chan_disable+0x88>)
   29f8e:	885b      	ldrh	r3, [r3, #2]
   29f90:	051b      	lsls	r3, r3, #20
   29f92:	0f1b      	lsrs	r3, r3, #28
   29f94:	b2db      	uxtb	r3, r3
   29f96:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   29f98:	4a18      	ldr	r2, [pc, #96]	; (29ffc <system_gclk_chan_disable+0x88>)
   29f9a:	8853      	ldrh	r3, [r2, #2]
   29f9c:	4918      	ldr	r1, [pc, #96]	; (2a000 <system_gclk_chan_disable+0x8c>)
   29f9e:	400b      	ands	r3, r1
   29fa0:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   29fa2:	4a16      	ldr	r2, [pc, #88]	; (29ffc <system_gclk_chan_disable+0x88>)
   29fa4:	4b15      	ldr	r3, [pc, #84]	; (29ffc <system_gclk_chan_disable+0x88>)
   29fa6:	885b      	ldrh	r3, [r3, #2]
   29fa8:	b29b      	uxth	r3, r3
   29faa:	4916      	ldr	r1, [pc, #88]	; (2a004 <system_gclk_chan_disable+0x90>)
   29fac:	400b      	ands	r3, r1
   29fae:	b29b      	uxth	r3, r3
   29fb0:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   29fb2:	46c0      	nop			; (mov r8, r8)
   29fb4:	4b11      	ldr	r3, [pc, #68]	; (29ffc <system_gclk_chan_disable+0x88>)
   29fb6:	885b      	ldrh	r3, [r3, #2]
   29fb8:	b29b      	uxth	r3, r3
   29fba:	001a      	movs	r2, r3
   29fbc:	2380      	movs	r3, #128	; 0x80
   29fbe:	01db      	lsls	r3, r3, #7
   29fc0:	4013      	ands	r3, r2
   29fc2:	d1f7      	bne.n	29fb4 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   29fc4:	4a0d      	ldr	r2, [pc, #52]	; (29ffc <system_gclk_chan_disable+0x88>)
   29fc6:	68fb      	ldr	r3, [r7, #12]
   29fc8:	b2db      	uxtb	r3, r3
   29fca:	1c19      	adds	r1, r3, #0
   29fcc:	230f      	movs	r3, #15
   29fce:	400b      	ands	r3, r1
   29fd0:	b2d9      	uxtb	r1, r3
   29fd2:	8853      	ldrh	r3, [r2, #2]
   29fd4:	1c08      	adds	r0, r1, #0
   29fd6:	210f      	movs	r1, #15
   29fd8:	4001      	ands	r1, r0
   29fda:	0208      	lsls	r0, r1, #8
   29fdc:	4908      	ldr	r1, [pc, #32]	; (2a000 <system_gclk_chan_disable+0x8c>)
   29fde:	400b      	ands	r3, r1
   29fe0:	1c19      	adds	r1, r3, #0
   29fe2:	1c03      	adds	r3, r0, #0
   29fe4:	430b      	orrs	r3, r1
   29fe6:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   29fe8:	4b07      	ldr	r3, [pc, #28]	; (2a008 <system_gclk_chan_disable+0x94>)
   29fea:	4798      	blx	r3
}
   29fec:	46c0      	nop			; (mov r8, r8)
   29fee:	46bd      	mov	sp, r7
   29ff0:	b004      	add	sp, #16
   29ff2:	bd80      	pop	{r7, pc}
   29ff4:	00029c19 	.word	0x00029c19
   29ff8:	40000c02 	.word	0x40000c02
   29ffc:	40000c00 	.word	0x40000c00
   2a000:	fffff0ff 	.word	0xfffff0ff
   2a004:	ffffbfff 	.word	0xffffbfff
   2a008:	00029c2d 	.word	0x00029c2d

0002a00c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2a00c:	b580      	push	{r7, lr}
   2a00e:	b084      	sub	sp, #16
   2a010:	af00      	add	r7, sp, #0
   2a012:	0002      	movs	r2, r0
   2a014:	1dfb      	adds	r3, r7, #7
   2a016:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2a018:	4b0d      	ldr	r3, [pc, #52]	; (2a050 <system_gclk_chan_get_hz+0x44>)
   2a01a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2a01c:	4a0d      	ldr	r2, [pc, #52]	; (2a054 <system_gclk_chan_get_hz+0x48>)
   2a01e:	1dfb      	adds	r3, r7, #7
   2a020:	781b      	ldrb	r3, [r3, #0]
   2a022:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2a024:	4b0c      	ldr	r3, [pc, #48]	; (2a058 <system_gclk_chan_get_hz+0x4c>)
   2a026:	885b      	ldrh	r3, [r3, #2]
   2a028:	051b      	lsls	r3, r3, #20
   2a02a:	0f1b      	lsrs	r3, r3, #28
   2a02c:	b2da      	uxtb	r2, r3
   2a02e:	230f      	movs	r3, #15
   2a030:	18fb      	adds	r3, r7, r3
   2a032:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2a034:	4b09      	ldr	r3, [pc, #36]	; (2a05c <system_gclk_chan_get_hz+0x50>)
   2a036:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2a038:	230f      	movs	r3, #15
   2a03a:	18fb      	adds	r3, r7, r3
   2a03c:	781b      	ldrb	r3, [r3, #0]
   2a03e:	0018      	movs	r0, r3
   2a040:	4b07      	ldr	r3, [pc, #28]	; (2a060 <system_gclk_chan_get_hz+0x54>)
   2a042:	4798      	blx	r3
   2a044:	0003      	movs	r3, r0
}
   2a046:	0018      	movs	r0, r3
   2a048:	46bd      	mov	sp, r7
   2a04a:	b004      	add	sp, #16
   2a04c:	bd80      	pop	{r7, pc}
   2a04e:	46c0      	nop			; (mov r8, r8)
   2a050:	00029c19 	.word	0x00029c19
   2a054:	40000c02 	.word	0x40000c02
   2a058:	40000c00 	.word	0x40000c00
   2a05c:	00029c2d 	.word	0x00029c2d
   2a060:	00029e11 	.word	0x00029e11

0002a064 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2a064:	b580      	push	{r7, lr}
   2a066:	b084      	sub	sp, #16
   2a068:	af00      	add	r7, sp, #0
   2a06a:	0002      	movs	r2, r0
   2a06c:	1dfb      	adds	r3, r7, #7
   2a06e:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2a070:	230f      	movs	r3, #15
   2a072:	18fb      	adds	r3, r7, r3
   2a074:	2200      	movs	r2, #0
   2a076:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2a078:	1dfb      	adds	r3, r7, #7
   2a07a:	781b      	ldrb	r3, [r3, #0]
   2a07c:	2b7f      	cmp	r3, #127	; 0x7f
   2a07e:	d80b      	bhi.n	2a098 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2a080:	4a13      	ldr	r2, [pc, #76]	; (2a0d0 <system_interrupt_clear_pending+0x6c>)
   2a082:	1dfb      	adds	r3, r7, #7
   2a084:	781b      	ldrb	r3, [r3, #0]
   2a086:	b25b      	sxtb	r3, r3
   2a088:	2101      	movs	r1, #1
   2a08a:	4099      	lsls	r1, r3
   2a08c:	000b      	movs	r3, r1
   2a08e:	0019      	movs	r1, r3
   2a090:	23c0      	movs	r3, #192	; 0xc0
   2a092:	005b      	lsls	r3, r3, #1
   2a094:	50d1      	str	r1, [r2, r3]
   2a096:	e014      	b.n	2a0c2 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2a098:	1dfb      	adds	r3, r7, #7
   2a09a:	781b      	ldrb	r3, [r3, #0]
   2a09c:	b25b      	sxtb	r3, r3
   2a09e:	330e      	adds	r3, #14
   2a0a0:	d101      	bne.n	2a0a6 <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2a0a2:	2317      	movs	r3, #23
   2a0a4:	e010      	b.n	2a0c8 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2a0a6:	1dfb      	adds	r3, r7, #7
   2a0a8:	781b      	ldrb	r3, [r3, #0]
   2a0aa:	b25b      	sxtb	r3, r3
   2a0ac:	3301      	adds	r3, #1
   2a0ae:	d104      	bne.n	2a0ba <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2a0b0:	4b08      	ldr	r3, [pc, #32]	; (2a0d4 <system_interrupt_clear_pending+0x70>)
   2a0b2:	2280      	movs	r2, #128	; 0x80
   2a0b4:	0492      	lsls	r2, r2, #18
   2a0b6:	605a      	str	r2, [r3, #4]
   2a0b8:	e003      	b.n	2a0c2 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2a0ba:	230f      	movs	r3, #15
   2a0bc:	18fb      	adds	r3, r7, r3
   2a0be:	2217      	movs	r2, #23
   2a0c0:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2a0c2:	230f      	movs	r3, #15
   2a0c4:	18fb      	adds	r3, r7, r3
   2a0c6:	781b      	ldrb	r3, [r3, #0]
}
   2a0c8:	0018      	movs	r0, r3
   2a0ca:	46bd      	mov	sp, r7
   2a0cc:	b004      	add	sp, #16
   2a0ce:	bd80      	pop	{r7, pc}
   2a0d0:	e000e100 	.word	0xe000e100
   2a0d4:	e000ed00 	.word	0xe000ed00

0002a0d8 <system_pinmux_get_group_from_gpio_pin>:
{
   2a0d8:	b580      	push	{r7, lr}
   2a0da:	b084      	sub	sp, #16
   2a0dc:	af00      	add	r7, sp, #0
   2a0de:	0002      	movs	r2, r0
   2a0e0:	1dfb      	adds	r3, r7, #7
   2a0e2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2a0e4:	230f      	movs	r3, #15
   2a0e6:	18fb      	adds	r3, r7, r3
   2a0e8:	1dfa      	adds	r2, r7, #7
   2a0ea:	7812      	ldrb	r2, [r2, #0]
   2a0ec:	09d2      	lsrs	r2, r2, #7
   2a0ee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2a0f0:	230e      	movs	r3, #14
   2a0f2:	18fb      	adds	r3, r7, r3
   2a0f4:	1dfa      	adds	r2, r7, #7
   2a0f6:	7812      	ldrb	r2, [r2, #0]
   2a0f8:	0952      	lsrs	r2, r2, #5
   2a0fa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2a0fc:	4b0d      	ldr	r3, [pc, #52]	; (2a134 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2a0fe:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2a100:	230f      	movs	r3, #15
   2a102:	18fb      	adds	r3, r7, r3
   2a104:	781b      	ldrb	r3, [r3, #0]
   2a106:	2b00      	cmp	r3, #0
   2a108:	d10f      	bne.n	2a12a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2a10a:	230f      	movs	r3, #15
   2a10c:	18fb      	adds	r3, r7, r3
   2a10e:	781b      	ldrb	r3, [r3, #0]
   2a110:	009b      	lsls	r3, r3, #2
   2a112:	2210      	movs	r2, #16
   2a114:	4694      	mov	ip, r2
   2a116:	44bc      	add	ip, r7
   2a118:	4463      	add	r3, ip
   2a11a:	3b08      	subs	r3, #8
   2a11c:	681a      	ldr	r2, [r3, #0]
   2a11e:	230e      	movs	r3, #14
   2a120:	18fb      	adds	r3, r7, r3
   2a122:	781b      	ldrb	r3, [r3, #0]
   2a124:	01db      	lsls	r3, r3, #7
   2a126:	18d3      	adds	r3, r2, r3
   2a128:	e000      	b.n	2a12c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2a12a:	2300      	movs	r3, #0
}
   2a12c:	0018      	movs	r0, r3
   2a12e:	46bd      	mov	sp, r7
   2a130:	b004      	add	sp, #16
   2a132:	bd80      	pop	{r7, pc}
   2a134:	41004400 	.word	0x41004400

0002a138 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2a138:	b580      	push	{r7, lr}
   2a13a:	b088      	sub	sp, #32
   2a13c:	af00      	add	r7, sp, #0
   2a13e:	60f8      	str	r0, [r7, #12]
   2a140:	60b9      	str	r1, [r7, #8]
   2a142:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2a144:	2300      	movs	r3, #0
   2a146:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2a148:	687b      	ldr	r3, [r7, #4]
   2a14a:	78db      	ldrb	r3, [r3, #3]
   2a14c:	2201      	movs	r2, #1
   2a14e:	4053      	eors	r3, r2
   2a150:	b2db      	uxtb	r3, r3
   2a152:	2b00      	cmp	r3, #0
   2a154:	d035      	beq.n	2a1c2 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2a156:	687b      	ldr	r3, [r7, #4]
   2a158:	781b      	ldrb	r3, [r3, #0]
   2a15a:	2b80      	cmp	r3, #128	; 0x80
   2a15c:	d00b      	beq.n	2a176 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2a15e:	69fb      	ldr	r3, [r7, #28]
   2a160:	2280      	movs	r2, #128	; 0x80
   2a162:	0252      	lsls	r2, r2, #9
   2a164:	4313      	orrs	r3, r2
   2a166:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2a168:	687b      	ldr	r3, [r7, #4]
   2a16a:	781b      	ldrb	r3, [r3, #0]
   2a16c:	061b      	lsls	r3, r3, #24
   2a16e:	001a      	movs	r2, r3
   2a170:	69fb      	ldr	r3, [r7, #28]
   2a172:	4313      	orrs	r3, r2
   2a174:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2a176:	687b      	ldr	r3, [r7, #4]
   2a178:	785b      	ldrb	r3, [r3, #1]
   2a17a:	2b00      	cmp	r3, #0
   2a17c:	d003      	beq.n	2a186 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a17e:	687b      	ldr	r3, [r7, #4]
   2a180:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2a182:	2b02      	cmp	r3, #2
   2a184:	d110      	bne.n	2a1a8 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2a186:	69fb      	ldr	r3, [r7, #28]
   2a188:	2280      	movs	r2, #128	; 0x80
   2a18a:	0292      	lsls	r2, r2, #10
   2a18c:	4313      	orrs	r3, r2
   2a18e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2a190:	687b      	ldr	r3, [r7, #4]
   2a192:	789b      	ldrb	r3, [r3, #2]
   2a194:	2b00      	cmp	r3, #0
   2a196:	d004      	beq.n	2a1a2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2a198:	69fb      	ldr	r3, [r7, #28]
   2a19a:	2280      	movs	r2, #128	; 0x80
   2a19c:	02d2      	lsls	r2, r2, #11
   2a19e:	4313      	orrs	r3, r2
   2a1a0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2a1a2:	68fb      	ldr	r3, [r7, #12]
   2a1a4:	68ba      	ldr	r2, [r7, #8]
   2a1a6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a1a8:	687b      	ldr	r3, [r7, #4]
   2a1aa:	785b      	ldrb	r3, [r3, #1]
   2a1ac:	2b01      	cmp	r3, #1
   2a1ae:	d003      	beq.n	2a1b8 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a1b0:	687b      	ldr	r3, [r7, #4]
   2a1b2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a1b4:	2b02      	cmp	r3, #2
   2a1b6:	d107      	bne.n	2a1c8 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2a1b8:	69fb      	ldr	r3, [r7, #28]
   2a1ba:	4a22      	ldr	r2, [pc, #136]	; (2a244 <_system_pinmux_config+0x10c>)
   2a1bc:	4013      	ands	r3, r2
   2a1be:	61fb      	str	r3, [r7, #28]
   2a1c0:	e002      	b.n	2a1c8 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2a1c2:	68fb      	ldr	r3, [r7, #12]
   2a1c4:	68ba      	ldr	r2, [r7, #8]
   2a1c6:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2a1c8:	68bb      	ldr	r3, [r7, #8]
   2a1ca:	041b      	lsls	r3, r3, #16
   2a1cc:	0c1b      	lsrs	r3, r3, #16
   2a1ce:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2a1d0:	68bb      	ldr	r3, [r7, #8]
   2a1d2:	0c1b      	lsrs	r3, r3, #16
   2a1d4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a1d6:	69ba      	ldr	r2, [r7, #24]
   2a1d8:	69fb      	ldr	r3, [r7, #28]
   2a1da:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2a1dc:	22a0      	movs	r2, #160	; 0xa0
   2a1de:	05d2      	lsls	r2, r2, #23
   2a1e0:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a1e2:	68fb      	ldr	r3, [r7, #12]
   2a1e4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a1e6:	697a      	ldr	r2, [r7, #20]
   2a1e8:	69fb      	ldr	r3, [r7, #28]
   2a1ea:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2a1ec:	22d0      	movs	r2, #208	; 0xd0
   2a1ee:	0612      	lsls	r2, r2, #24
   2a1f0:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a1f2:	68fb      	ldr	r3, [r7, #12]
   2a1f4:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2a1f6:	687b      	ldr	r3, [r7, #4]
   2a1f8:	78db      	ldrb	r3, [r3, #3]
   2a1fa:	2201      	movs	r2, #1
   2a1fc:	4053      	eors	r3, r2
   2a1fe:	b2db      	uxtb	r3, r3
   2a200:	2b00      	cmp	r3, #0
   2a202:	d01a      	beq.n	2a23a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2a204:	69fa      	ldr	r2, [r7, #28]
   2a206:	2380      	movs	r3, #128	; 0x80
   2a208:	02db      	lsls	r3, r3, #11
   2a20a:	4013      	ands	r3, r2
   2a20c:	d00a      	beq.n	2a224 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2a20e:	687b      	ldr	r3, [r7, #4]
   2a210:	789b      	ldrb	r3, [r3, #2]
   2a212:	2b01      	cmp	r3, #1
   2a214:	d103      	bne.n	2a21e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2a216:	68fb      	ldr	r3, [r7, #12]
   2a218:	68ba      	ldr	r2, [r7, #8]
   2a21a:	619a      	str	r2, [r3, #24]
   2a21c:	e002      	b.n	2a224 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2a21e:	68fb      	ldr	r3, [r7, #12]
   2a220:	68ba      	ldr	r2, [r7, #8]
   2a222:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a224:	687b      	ldr	r3, [r7, #4]
   2a226:	785b      	ldrb	r3, [r3, #1]
   2a228:	2b01      	cmp	r3, #1
   2a22a:	d003      	beq.n	2a234 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a22c:	687b      	ldr	r3, [r7, #4]
   2a22e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a230:	2b02      	cmp	r3, #2
   2a232:	d102      	bne.n	2a23a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2a234:	68fb      	ldr	r3, [r7, #12]
   2a236:	68ba      	ldr	r2, [r7, #8]
   2a238:	609a      	str	r2, [r3, #8]
		}
	}
}
   2a23a:	46c0      	nop			; (mov r8, r8)
   2a23c:	46bd      	mov	sp, r7
   2a23e:	b008      	add	sp, #32
   2a240:	bd80      	pop	{r7, pc}
   2a242:	46c0      	nop			; (mov r8, r8)
   2a244:	fffbffff 	.word	0xfffbffff

0002a248 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2a248:	b580      	push	{r7, lr}
   2a24a:	b084      	sub	sp, #16
   2a24c:	af00      	add	r7, sp, #0
   2a24e:	0002      	movs	r2, r0
   2a250:	6039      	str	r1, [r7, #0]
   2a252:	1dfb      	adds	r3, r7, #7
   2a254:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2a256:	1dfb      	adds	r3, r7, #7
   2a258:	781b      	ldrb	r3, [r3, #0]
   2a25a:	0018      	movs	r0, r3
   2a25c:	4b0a      	ldr	r3, [pc, #40]	; (2a288 <system_pinmux_pin_set_config+0x40>)
   2a25e:	4798      	blx	r3
   2a260:	0003      	movs	r3, r0
   2a262:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2a264:	1dfb      	adds	r3, r7, #7
   2a266:	781b      	ldrb	r3, [r3, #0]
   2a268:	221f      	movs	r2, #31
   2a26a:	4013      	ands	r3, r2
   2a26c:	2201      	movs	r2, #1
   2a26e:	409a      	lsls	r2, r3
   2a270:	0013      	movs	r3, r2
   2a272:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2a274:	683a      	ldr	r2, [r7, #0]
   2a276:	68b9      	ldr	r1, [r7, #8]
   2a278:	68fb      	ldr	r3, [r7, #12]
   2a27a:	0018      	movs	r0, r3
   2a27c:	4b03      	ldr	r3, [pc, #12]	; (2a28c <system_pinmux_pin_set_config+0x44>)
   2a27e:	4798      	blx	r3
}
   2a280:	46c0      	nop			; (mov r8, r8)
   2a282:	46bd      	mov	sp, r7
   2a284:	b004      	add	sp, #16
   2a286:	bd80      	pop	{r7, pc}
   2a288:	0002a0d9 	.word	0x0002a0d9
   2a28c:	0002a139 	.word	0x0002a139

0002a290 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2a290:	b580      	push	{r7, lr}
   2a292:	af00      	add	r7, sp, #0
	return;
   2a294:	46c0      	nop			; (mov r8, r8)
}
   2a296:	46bd      	mov	sp, r7
   2a298:	bd80      	pop	{r7, pc}
	...

0002a29c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2a29c:	b580      	push	{r7, lr}
   2a29e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2a2a0:	4b06      	ldr	r3, [pc, #24]	; (2a2bc <system_init+0x20>)
   2a2a2:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2a2a4:	4b06      	ldr	r3, [pc, #24]	; (2a2c0 <system_init+0x24>)
   2a2a6:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2a2a8:	4b06      	ldr	r3, [pc, #24]	; (2a2c4 <system_init+0x28>)
   2a2aa:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2a2ac:	4b06      	ldr	r3, [pc, #24]	; (2a2c8 <system_init+0x2c>)
   2a2ae:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2a2b0:	4b06      	ldr	r3, [pc, #24]	; (2a2cc <system_init+0x30>)
   2a2b2:	4798      	blx	r3
}
   2a2b4:	46c0      	nop			; (mov r8, r8)
   2a2b6:	46bd      	mov	sp, r7
   2a2b8:	bd80      	pop	{r7, pc}
   2a2ba:	46c0      	nop			; (mov r8, r8)
   2a2bc:	0002991d 	.word	0x0002991d
   2a2c0:	000263e5 	.word	0x000263e5
   2a2c4:	00012669 	.word	0x00012669
   2a2c8:	000267bd 	.word	0x000267bd
   2a2cc:	0002a291 	.word	0x0002a291

0002a2d0 <system_gclk_chan_get_config_defaults>:
{
   2a2d0:	b580      	push	{r7, lr}
   2a2d2:	b082      	sub	sp, #8
   2a2d4:	af00      	add	r7, sp, #0
   2a2d6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a2d8:	687b      	ldr	r3, [r7, #4]
   2a2da:	2200      	movs	r2, #0
   2a2dc:	701a      	strb	r2, [r3, #0]
}
   2a2de:	46c0      	nop			; (mov r8, r8)
   2a2e0:	46bd      	mov	sp, r7
   2a2e2:	b002      	add	sp, #8
   2a2e4:	bd80      	pop	{r7, pc}
	...

0002a2e8 <system_apb_clock_set_mask>:
{
   2a2e8:	b580      	push	{r7, lr}
   2a2ea:	b082      	sub	sp, #8
   2a2ec:	af00      	add	r7, sp, #0
   2a2ee:	0002      	movs	r2, r0
   2a2f0:	6039      	str	r1, [r7, #0]
   2a2f2:	1dfb      	adds	r3, r7, #7
   2a2f4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a2f6:	1dfb      	adds	r3, r7, #7
   2a2f8:	781b      	ldrb	r3, [r3, #0]
   2a2fa:	2b01      	cmp	r3, #1
   2a2fc:	d00a      	beq.n	2a314 <system_apb_clock_set_mask+0x2c>
   2a2fe:	2b02      	cmp	r3, #2
   2a300:	d00f      	beq.n	2a322 <system_apb_clock_set_mask+0x3a>
   2a302:	2b00      	cmp	r3, #0
   2a304:	d114      	bne.n	2a330 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a306:	4b0e      	ldr	r3, [pc, #56]	; (2a340 <system_apb_clock_set_mask+0x58>)
   2a308:	4a0d      	ldr	r2, [pc, #52]	; (2a340 <system_apb_clock_set_mask+0x58>)
   2a30a:	6991      	ldr	r1, [r2, #24]
   2a30c:	683a      	ldr	r2, [r7, #0]
   2a30e:	430a      	orrs	r2, r1
   2a310:	619a      	str	r2, [r3, #24]
			break;
   2a312:	e00f      	b.n	2a334 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a314:	4b0a      	ldr	r3, [pc, #40]	; (2a340 <system_apb_clock_set_mask+0x58>)
   2a316:	4a0a      	ldr	r2, [pc, #40]	; (2a340 <system_apb_clock_set_mask+0x58>)
   2a318:	69d1      	ldr	r1, [r2, #28]
   2a31a:	683a      	ldr	r2, [r7, #0]
   2a31c:	430a      	orrs	r2, r1
   2a31e:	61da      	str	r2, [r3, #28]
			break;
   2a320:	e008      	b.n	2a334 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a322:	4b07      	ldr	r3, [pc, #28]	; (2a340 <system_apb_clock_set_mask+0x58>)
   2a324:	4a06      	ldr	r2, [pc, #24]	; (2a340 <system_apb_clock_set_mask+0x58>)
   2a326:	6a11      	ldr	r1, [r2, #32]
   2a328:	683a      	ldr	r2, [r7, #0]
   2a32a:	430a      	orrs	r2, r1
   2a32c:	621a      	str	r2, [r3, #32]
			break;
   2a32e:	e001      	b.n	2a334 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a330:	2317      	movs	r3, #23
   2a332:	e000      	b.n	2a336 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a334:	2300      	movs	r3, #0
}
   2a336:	0018      	movs	r0, r3
   2a338:	46bd      	mov	sp, r7
   2a33a:	b002      	add	sp, #8
   2a33c:	bd80      	pop	{r7, pc}
   2a33e:	46c0      	nop			; (mov r8, r8)
   2a340:	40000400 	.word	0x40000400

0002a344 <system_pinmux_get_config_defaults>:
{
   2a344:	b580      	push	{r7, lr}
   2a346:	b082      	sub	sp, #8
   2a348:	af00      	add	r7, sp, #0
   2a34a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2a34c:	687b      	ldr	r3, [r7, #4]
   2a34e:	2280      	movs	r2, #128	; 0x80
   2a350:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a352:	687b      	ldr	r3, [r7, #4]
   2a354:	2200      	movs	r2, #0
   2a356:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2a358:	687b      	ldr	r3, [r7, #4]
   2a35a:	2201      	movs	r2, #1
   2a35c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2a35e:	687b      	ldr	r3, [r7, #4]
   2a360:	2200      	movs	r2, #0
   2a362:	70da      	strb	r2, [r3, #3]
}
   2a364:	46c0      	nop			; (mov r8, r8)
   2a366:	46bd      	mov	sp, r7
   2a368:	b002      	add	sp, #8
   2a36a:	bd80      	pop	{r7, pc}

0002a36c <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2a36c:	b580      	push	{r7, lr}
   2a36e:	b084      	sub	sp, #16
   2a370:	af00      	add	r7, sp, #0
   2a372:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a374:	2300      	movs	r3, #0
   2a376:	60fb      	str	r3, [r7, #12]
   2a378:	e00c      	b.n	2a394 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2a37a:	4b0a      	ldr	r3, [pc, #40]	; (2a3a4 <_tcc_get_inst_index+0x38>)
   2a37c:	68fa      	ldr	r2, [r7, #12]
   2a37e:	0092      	lsls	r2, r2, #2
   2a380:	58d2      	ldr	r2, [r2, r3]
   2a382:	687b      	ldr	r3, [r7, #4]
   2a384:	429a      	cmp	r2, r3
   2a386:	d102      	bne.n	2a38e <_tcc_get_inst_index+0x22>
			return i;
   2a388:	68fb      	ldr	r3, [r7, #12]
   2a38a:	b2db      	uxtb	r3, r3
   2a38c:	e006      	b.n	2a39c <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a38e:	68fb      	ldr	r3, [r7, #12]
   2a390:	3301      	adds	r3, #1
   2a392:	60fb      	str	r3, [r7, #12]
   2a394:	68fb      	ldr	r3, [r7, #12]
   2a396:	2b02      	cmp	r3, #2
   2a398:	d9ef      	bls.n	2a37a <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2a39a:	2300      	movs	r3, #0
}
   2a39c:	0018      	movs	r0, r3
   2a39e:	46bd      	mov	sp, r7
   2a3a0:	b004      	add	sp, #16
   2a3a2:	bd80      	pop	{r7, pc}
   2a3a4:	00039680 	.word	0x00039680

0002a3a8 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2a3a8:	b590      	push	{r4, r7, lr}
   2a3aa:	b085      	sub	sp, #20
   2a3ac:	af00      	add	r7, sp, #0
   2a3ae:	6078      	str	r0, [r7, #4]
   2a3b0:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a3b2:	230f      	movs	r3, #15
   2a3b4:	18fc      	adds	r4, r7, r3
   2a3b6:	683b      	ldr	r3, [r7, #0]
   2a3b8:	0018      	movs	r0, r3
   2a3ba:	4bad      	ldr	r3, [pc, #692]	; (2a670 <tcc_get_config_defaults+0x2c8>)
   2a3bc:	4798      	blx	r3
   2a3be:	0003      	movs	r3, r0
   2a3c0:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2a3c2:	687b      	ldr	r3, [r7, #4]
   2a3c4:	2200      	movs	r2, #0
   2a3c6:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2a3c8:	230f      	movs	r3, #15
   2a3ca:	18fb      	adds	r3, r7, r3
   2a3cc:	781a      	ldrb	r2, [r3, #0]
   2a3ce:	4ba9      	ldr	r3, [pc, #676]	; (2a674 <tcc_get_config_defaults+0x2cc>)
   2a3d0:	0092      	lsls	r2, r2, #2
   2a3d2:	58d2      	ldr	r2, [r2, r3]
   2a3d4:	687b      	ldr	r3, [r7, #4]
   2a3d6:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2a3d8:	687b      	ldr	r3, [r7, #4]
   2a3da:	2200      	movs	r2, #0
   2a3dc:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2a3de:	687b      	ldr	r3, [r7, #4]
   2a3e0:	2200      	movs	r2, #0
   2a3e2:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2a3e4:	687b      	ldr	r3, [r7, #4]
   2a3e6:	2200      	movs	r2, #0
   2a3e8:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2a3ea:	687b      	ldr	r3, [r7, #4]
   2a3ec:	2200      	movs	r2, #0
   2a3ee:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2a3f0:	687b      	ldr	r3, [r7, #4]
   2a3f2:	2200      	movs	r2, #0
   2a3f4:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a3f6:	687b      	ldr	r3, [r7, #4]
   2a3f8:	2200      	movs	r2, #0
   2a3fa:	61da      	str	r2, [r3, #28]
   2a3fc:	687b      	ldr	r3, [r7, #4]
   2a3fe:	2200      	movs	r2, #0
   2a400:	621a      	str	r2, [r3, #32]
   2a402:	687b      	ldr	r3, [r7, #4]
   2a404:	2200      	movs	r2, #0
   2a406:	625a      	str	r2, [r3, #36]	; 0x24
   2a408:	687b      	ldr	r3, [r7, #4]
   2a40a:	2200      	movs	r2, #0
   2a40c:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a40e:	687b      	ldr	r3, [r7, #4]
   2a410:	2200      	movs	r2, #0
   2a412:	751a      	strb	r2, [r3, #20]
   2a414:	687b      	ldr	r3, [r7, #4]
   2a416:	2200      	movs	r2, #0
   2a418:	755a      	strb	r2, [r3, #21]
   2a41a:	687b      	ldr	r3, [r7, #4]
   2a41c:	2200      	movs	r2, #0
   2a41e:	759a      	strb	r2, [r3, #22]
   2a420:	687b      	ldr	r3, [r7, #4]
   2a422:	2200      	movs	r2, #0
   2a424:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2a426:	687b      	ldr	r3, [r7, #4]
   2a428:	2200      	movs	r2, #0
   2a42a:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2a42c:	687b      	ldr	r3, [r7, #4]
   2a42e:	2200      	movs	r2, #0
   2a430:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a432:	687b      	ldr	r3, [r7, #4]
   2a434:	2200      	movs	r2, #0
   2a436:	741a      	strb	r2, [r3, #16]
   2a438:	687b      	ldr	r3, [r7, #4]
   2a43a:	2200      	movs	r2, #0
   2a43c:	745a      	strb	r2, [r3, #17]
   2a43e:	687b      	ldr	r3, [r7, #4]
   2a440:	2200      	movs	r2, #0
   2a442:	749a      	strb	r2, [r3, #18]
   2a444:	687b      	ldr	r3, [r7, #4]
   2a446:	2200      	movs	r2, #0
   2a448:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2a44a:	687b      	ldr	r3, [r7, #4]
   2a44c:	222c      	movs	r2, #44	; 0x2c
   2a44e:	2100      	movs	r1, #0
   2a450:	5499      	strb	r1, [r3, r2]
   2a452:	687b      	ldr	r3, [r7, #4]
   2a454:	222d      	movs	r2, #45	; 0x2d
   2a456:	2100      	movs	r1, #0
   2a458:	5499      	strb	r1, [r3, r2]
   2a45a:	687b      	ldr	r3, [r7, #4]
   2a45c:	222e      	movs	r2, #46	; 0x2e
   2a45e:	2100      	movs	r1, #0
   2a460:	5499      	strb	r1, [r3, r2]
   2a462:	687b      	ldr	r3, [r7, #4]
   2a464:	222f      	movs	r2, #47	; 0x2f
   2a466:	2100      	movs	r1, #0
   2a468:	5499      	strb	r1, [r3, r2]
   2a46a:	687b      	ldr	r3, [r7, #4]
   2a46c:	2230      	movs	r2, #48	; 0x30
   2a46e:	2100      	movs	r1, #0
   2a470:	5499      	strb	r1, [r3, r2]
   2a472:	687b      	ldr	r3, [r7, #4]
   2a474:	2231      	movs	r2, #49	; 0x31
   2a476:	2100      	movs	r1, #0
   2a478:	5499      	strb	r1, [r3, r2]
   2a47a:	687b      	ldr	r3, [r7, #4]
   2a47c:	2232      	movs	r2, #50	; 0x32
   2a47e:	2100      	movs	r1, #0
   2a480:	5499      	strb	r1, [r3, r2]
   2a482:	687b      	ldr	r3, [r7, #4]
   2a484:	2233      	movs	r2, #51	; 0x33
   2a486:	2100      	movs	r1, #0
   2a488:	5499      	strb	r1, [r3, r2]
   2a48a:	687b      	ldr	r3, [r7, #4]
   2a48c:	2234      	movs	r2, #52	; 0x34
   2a48e:	2100      	movs	r1, #0
   2a490:	5499      	strb	r1, [r3, r2]
   2a492:	687b      	ldr	r3, [r7, #4]
   2a494:	2235      	movs	r2, #53	; 0x35
   2a496:	2100      	movs	r1, #0
   2a498:	5499      	strb	r1, [r3, r2]
   2a49a:	687b      	ldr	r3, [r7, #4]
   2a49c:	2236      	movs	r2, #54	; 0x36
   2a49e:	2100      	movs	r1, #0
   2a4a0:	5499      	strb	r1, [r3, r2]
   2a4a2:	687b      	ldr	r3, [r7, #4]
   2a4a4:	2237      	movs	r2, #55	; 0x37
   2a4a6:	2100      	movs	r1, #0
   2a4a8:	5499      	strb	r1, [r3, r2]
   2a4aa:	687b      	ldr	r3, [r7, #4]
   2a4ac:	2238      	movs	r2, #56	; 0x38
   2a4ae:	2100      	movs	r1, #0
   2a4b0:	5499      	strb	r1, [r3, r2]
   2a4b2:	687b      	ldr	r3, [r7, #4]
   2a4b4:	2239      	movs	r2, #57	; 0x39
   2a4b6:	2100      	movs	r1, #0
   2a4b8:	5499      	strb	r1, [r3, r2]
   2a4ba:	687b      	ldr	r3, [r7, #4]
   2a4bc:	223a      	movs	r2, #58	; 0x3a
   2a4be:	2100      	movs	r1, #0
   2a4c0:	5499      	strb	r1, [r3, r2]
   2a4c2:	687b      	ldr	r3, [r7, #4]
   2a4c4:	223b      	movs	r2, #59	; 0x3b
   2a4c6:	2100      	movs	r1, #0
   2a4c8:	5499      	strb	r1, [r3, r2]
   2a4ca:	687b      	ldr	r3, [r7, #4]
   2a4cc:	223c      	movs	r2, #60	; 0x3c
   2a4ce:	2100      	movs	r1, #0
   2a4d0:	5499      	strb	r1, [r3, r2]
   2a4d2:	687b      	ldr	r3, [r7, #4]
   2a4d4:	223d      	movs	r2, #61	; 0x3d
   2a4d6:	2100      	movs	r1, #0
   2a4d8:	5499      	strb	r1, [r3, r2]
   2a4da:	687b      	ldr	r3, [r7, #4]
   2a4dc:	223e      	movs	r2, #62	; 0x3e
   2a4de:	2100      	movs	r1, #0
   2a4e0:	5499      	strb	r1, [r3, r2]
   2a4e2:	687b      	ldr	r3, [r7, #4]
   2a4e4:	223f      	movs	r2, #63	; 0x3f
   2a4e6:	2100      	movs	r1, #0
   2a4e8:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2a4ea:	687b      	ldr	r3, [r7, #4]
   2a4ec:	2240      	movs	r2, #64	; 0x40
   2a4ee:	2100      	movs	r1, #0
   2a4f0:	5499      	strb	r1, [r3, r2]
   2a4f2:	687b      	ldr	r3, [r7, #4]
   2a4f4:	2241      	movs	r2, #65	; 0x41
   2a4f6:	2100      	movs	r1, #0
   2a4f8:	5499      	strb	r1, [r3, r2]
   2a4fa:	687b      	ldr	r3, [r7, #4]
   2a4fc:	2242      	movs	r2, #66	; 0x42
   2a4fe:	2100      	movs	r1, #0
   2a500:	5499      	strb	r1, [r3, r2]
   2a502:	687b      	ldr	r3, [r7, #4]
   2a504:	2243      	movs	r2, #67	; 0x43
   2a506:	2100      	movs	r1, #0
   2a508:	5499      	strb	r1, [r3, r2]
   2a50a:	687b      	ldr	r3, [r7, #4]
   2a50c:	2244      	movs	r2, #68	; 0x44
   2a50e:	2100      	movs	r1, #0
   2a510:	5499      	strb	r1, [r3, r2]
   2a512:	687b      	ldr	r3, [r7, #4]
   2a514:	2245      	movs	r2, #69	; 0x45
   2a516:	2100      	movs	r1, #0
   2a518:	5499      	strb	r1, [r3, r2]
   2a51a:	687b      	ldr	r3, [r7, #4]
   2a51c:	2246      	movs	r2, #70	; 0x46
   2a51e:	2100      	movs	r1, #0
   2a520:	5499      	strb	r1, [r3, r2]
   2a522:	687b      	ldr	r3, [r7, #4]
   2a524:	2247      	movs	r2, #71	; 0x47
   2a526:	2100      	movs	r1, #0
   2a528:	5499      	strb	r1, [r3, r2]
   2a52a:	687b      	ldr	r3, [r7, #4]
   2a52c:	2248      	movs	r2, #72	; 0x48
   2a52e:	2100      	movs	r1, #0
   2a530:	5499      	strb	r1, [r3, r2]
   2a532:	687b      	ldr	r3, [r7, #4]
   2a534:	2249      	movs	r2, #73	; 0x49
   2a536:	2100      	movs	r1, #0
   2a538:	5499      	strb	r1, [r3, r2]
   2a53a:	687b      	ldr	r3, [r7, #4]
   2a53c:	224a      	movs	r2, #74	; 0x4a
   2a53e:	2100      	movs	r1, #0
   2a540:	5499      	strb	r1, [r3, r2]
   2a542:	687b      	ldr	r3, [r7, #4]
   2a544:	224b      	movs	r2, #75	; 0x4b
   2a546:	2100      	movs	r1, #0
   2a548:	5499      	strb	r1, [r3, r2]
   2a54a:	687b      	ldr	r3, [r7, #4]
   2a54c:	224c      	movs	r2, #76	; 0x4c
   2a54e:	2100      	movs	r1, #0
   2a550:	5499      	strb	r1, [r3, r2]
   2a552:	687b      	ldr	r3, [r7, #4]
   2a554:	224d      	movs	r2, #77	; 0x4d
   2a556:	2100      	movs	r1, #0
   2a558:	5499      	strb	r1, [r3, r2]
   2a55a:	687b      	ldr	r3, [r7, #4]
   2a55c:	224e      	movs	r2, #78	; 0x4e
   2a55e:	2100      	movs	r1, #0
   2a560:	5499      	strb	r1, [r3, r2]
   2a562:	687b      	ldr	r3, [r7, #4]
   2a564:	224f      	movs	r2, #79	; 0x4f
   2a566:	2100      	movs	r1, #0
   2a568:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2a56a:	687b      	ldr	r3, [r7, #4]
   2a56c:	2250      	movs	r2, #80	; 0x50
   2a56e:	2100      	movs	r1, #0
   2a570:	5499      	strb	r1, [r3, r2]
   2a572:	687b      	ldr	r3, [r7, #4]
   2a574:	2251      	movs	r2, #81	; 0x51
   2a576:	2100      	movs	r1, #0
   2a578:	5499      	strb	r1, [r3, r2]
   2a57a:	687b      	ldr	r3, [r7, #4]
   2a57c:	2252      	movs	r2, #82	; 0x52
   2a57e:	2100      	movs	r1, #0
   2a580:	5499      	strb	r1, [r3, r2]
   2a582:	687b      	ldr	r3, [r7, #4]
   2a584:	2253      	movs	r2, #83	; 0x53
   2a586:	2100      	movs	r1, #0
   2a588:	5499      	strb	r1, [r3, r2]
   2a58a:	687b      	ldr	r3, [r7, #4]
   2a58c:	2254      	movs	r2, #84	; 0x54
   2a58e:	2100      	movs	r1, #0
   2a590:	5499      	strb	r1, [r3, r2]
   2a592:	687b      	ldr	r3, [r7, #4]
   2a594:	2255      	movs	r2, #85	; 0x55
   2a596:	2100      	movs	r1, #0
   2a598:	5499      	strb	r1, [r3, r2]
   2a59a:	687b      	ldr	r3, [r7, #4]
   2a59c:	2256      	movs	r2, #86	; 0x56
   2a59e:	2100      	movs	r1, #0
   2a5a0:	5499      	strb	r1, [r3, r2]
   2a5a2:	687b      	ldr	r3, [r7, #4]
   2a5a4:	2257      	movs	r2, #87	; 0x57
   2a5a6:	2100      	movs	r1, #0
   2a5a8:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2a5aa:	687b      	ldr	r3, [r7, #4]
   2a5ac:	2298      	movs	r2, #152	; 0x98
   2a5ae:	2100      	movs	r1, #0
   2a5b0:	5499      	strb	r1, [r3, r2]
   2a5b2:	687b      	ldr	r3, [r7, #4]
   2a5b4:	2200      	movs	r2, #0
   2a5b6:	659a      	str	r2, [r3, #88]	; 0x58
   2a5b8:	687b      	ldr	r3, [r7, #4]
   2a5ba:	2200      	movs	r2, #0
   2a5bc:	679a      	str	r2, [r3, #120]	; 0x78
   2a5be:	687b      	ldr	r3, [r7, #4]
   2a5c0:	2299      	movs	r2, #153	; 0x99
   2a5c2:	2100      	movs	r1, #0
   2a5c4:	5499      	strb	r1, [r3, r2]
   2a5c6:	687b      	ldr	r3, [r7, #4]
   2a5c8:	2200      	movs	r2, #0
   2a5ca:	65da      	str	r2, [r3, #92]	; 0x5c
   2a5cc:	687b      	ldr	r3, [r7, #4]
   2a5ce:	2200      	movs	r2, #0
   2a5d0:	67da      	str	r2, [r3, #124]	; 0x7c
   2a5d2:	687b      	ldr	r3, [r7, #4]
   2a5d4:	229a      	movs	r2, #154	; 0x9a
   2a5d6:	2100      	movs	r1, #0
   2a5d8:	5499      	strb	r1, [r3, r2]
   2a5da:	687b      	ldr	r3, [r7, #4]
   2a5dc:	2200      	movs	r2, #0
   2a5de:	661a      	str	r2, [r3, #96]	; 0x60
   2a5e0:	687b      	ldr	r3, [r7, #4]
   2a5e2:	2280      	movs	r2, #128	; 0x80
   2a5e4:	2100      	movs	r1, #0
   2a5e6:	5099      	str	r1, [r3, r2]
   2a5e8:	687b      	ldr	r3, [r7, #4]
   2a5ea:	229b      	movs	r2, #155	; 0x9b
   2a5ec:	2100      	movs	r1, #0
   2a5ee:	5499      	strb	r1, [r3, r2]
   2a5f0:	687b      	ldr	r3, [r7, #4]
   2a5f2:	2200      	movs	r2, #0
   2a5f4:	665a      	str	r2, [r3, #100]	; 0x64
   2a5f6:	687b      	ldr	r3, [r7, #4]
   2a5f8:	2284      	movs	r2, #132	; 0x84
   2a5fa:	2100      	movs	r1, #0
   2a5fc:	5099      	str	r1, [r3, r2]
   2a5fe:	687b      	ldr	r3, [r7, #4]
   2a600:	229c      	movs	r2, #156	; 0x9c
   2a602:	2100      	movs	r1, #0
   2a604:	5499      	strb	r1, [r3, r2]
   2a606:	687b      	ldr	r3, [r7, #4]
   2a608:	2200      	movs	r2, #0
   2a60a:	669a      	str	r2, [r3, #104]	; 0x68
   2a60c:	687b      	ldr	r3, [r7, #4]
   2a60e:	2288      	movs	r2, #136	; 0x88
   2a610:	2100      	movs	r1, #0
   2a612:	5099      	str	r1, [r3, r2]
   2a614:	687b      	ldr	r3, [r7, #4]
   2a616:	229d      	movs	r2, #157	; 0x9d
   2a618:	2100      	movs	r1, #0
   2a61a:	5499      	strb	r1, [r3, r2]
   2a61c:	687b      	ldr	r3, [r7, #4]
   2a61e:	2200      	movs	r2, #0
   2a620:	66da      	str	r2, [r3, #108]	; 0x6c
   2a622:	687b      	ldr	r3, [r7, #4]
   2a624:	228c      	movs	r2, #140	; 0x8c
   2a626:	2100      	movs	r1, #0
   2a628:	5099      	str	r1, [r3, r2]
   2a62a:	687b      	ldr	r3, [r7, #4]
   2a62c:	229e      	movs	r2, #158	; 0x9e
   2a62e:	2100      	movs	r1, #0
   2a630:	5499      	strb	r1, [r3, r2]
   2a632:	687b      	ldr	r3, [r7, #4]
   2a634:	2200      	movs	r2, #0
   2a636:	671a      	str	r2, [r3, #112]	; 0x70
   2a638:	687b      	ldr	r3, [r7, #4]
   2a63a:	2290      	movs	r2, #144	; 0x90
   2a63c:	2100      	movs	r1, #0
   2a63e:	5099      	str	r1, [r3, r2]
   2a640:	687b      	ldr	r3, [r7, #4]
   2a642:	229f      	movs	r2, #159	; 0x9f
   2a644:	2100      	movs	r1, #0
   2a646:	5499      	strb	r1, [r3, r2]
   2a648:	687b      	ldr	r3, [r7, #4]
   2a64a:	2200      	movs	r2, #0
   2a64c:	675a      	str	r2, [r3, #116]	; 0x74
   2a64e:	687b      	ldr	r3, [r7, #4]
   2a650:	2294      	movs	r2, #148	; 0x94
   2a652:	2100      	movs	r1, #0
   2a654:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2a656:	687b      	ldr	r3, [r7, #4]
   2a658:	22a0      	movs	r2, #160	; 0xa0
   2a65a:	2101      	movs	r1, #1
   2a65c:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2a65e:	687b      	ldr	r3, [r7, #4]
   2a660:	22a1      	movs	r2, #161	; 0xa1
   2a662:	2100      	movs	r1, #0
   2a664:	5499      	strb	r1, [r3, r2]
}
   2a666:	46c0      	nop			; (mov r8, r8)
   2a668:	46bd      	mov	sp, r7
   2a66a:	b005      	add	sp, #20
   2a66c:	bd90      	pop	{r4, r7, pc}
   2a66e:	46c0      	nop			; (mov r8, r8)
   2a670:	0002a36d 	.word	0x0002a36d
   2a674:	0003969c 	.word	0x0003969c

0002a678 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a678:	b580      	push	{r7, lr}
   2a67a:	b086      	sub	sp, #24
   2a67c:	af00      	add	r7, sp, #0
   2a67e:	60b9      	str	r1, [r7, #8]
   2a680:	607a      	str	r2, [r7, #4]
   2a682:	230f      	movs	r3, #15
   2a684:	18fb      	adds	r3, r7, r3
   2a686:	1c02      	adds	r2, r0, #0
   2a688:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2a68a:	2300      	movs	r3, #0
   2a68c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a68e:	2300      	movs	r3, #0
   2a690:	613b      	str	r3, [r7, #16]
   2a692:	e01d      	b.n	2a6d0 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2a694:	68ba      	ldr	r2, [r7, #8]
   2a696:	693b      	ldr	r3, [r7, #16]
   2a698:	18d3      	adds	r3, r2, r3
   2a69a:	3310      	adds	r3, #16
   2a69c:	781b      	ldrb	r3, [r3, #0]
   2a69e:	2b01      	cmp	r3, #1
   2a6a0:	d113      	bne.n	2a6ca <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2a6a2:	230f      	movs	r3, #15
   2a6a4:	18fb      	adds	r3, r7, r3
   2a6a6:	781b      	ldrb	r3, [r3, #0]
   2a6a8:	4a1b      	ldr	r2, [pc, #108]	; (2a718 <_tcc_build_ctrla+0xa0>)
   2a6aa:	5cd3      	ldrb	r3, [r2, r3]
   2a6ac:	001a      	movs	r2, r3
   2a6ae:	693b      	ldr	r3, [r7, #16]
   2a6b0:	429a      	cmp	r2, r3
   2a6b2:	da01      	bge.n	2a6b8 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2a6b4:	2317      	movs	r3, #23
   2a6b6:	e02a      	b.n	2a70e <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2a6b8:	2380      	movs	r3, #128	; 0x80
   2a6ba:	045a      	lsls	r2, r3, #17
   2a6bc:	693b      	ldr	r3, [r7, #16]
   2a6be:	409a      	lsls	r2, r3
   2a6c0:	0013      	movs	r3, r2
   2a6c2:	001a      	movs	r2, r3
   2a6c4:	697b      	ldr	r3, [r7, #20]
   2a6c6:	4313      	orrs	r3, r2
   2a6c8:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a6ca:	693b      	ldr	r3, [r7, #16]
   2a6cc:	3301      	adds	r3, #1
   2a6ce:	613b      	str	r3, [r7, #16]
   2a6d0:	693b      	ldr	r3, [r7, #16]
   2a6d2:	2b03      	cmp	r3, #3
   2a6d4:	ddde      	ble.n	2a694 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2a6d6:	68bb      	ldr	r3, [r7, #8]
   2a6d8:	22a1      	movs	r2, #161	; 0xa1
   2a6da:	5c9b      	ldrb	r3, [r3, r2]
   2a6dc:	2b00      	cmp	r3, #0
   2a6de:	d004      	beq.n	2a6ea <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2a6e0:	697b      	ldr	r3, [r7, #20]
   2a6e2:	2280      	movs	r2, #128	; 0x80
   2a6e4:	0112      	lsls	r2, r2, #4
   2a6e6:	4313      	orrs	r3, r2
   2a6e8:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2a6ea:	68bb      	ldr	r3, [r7, #8]
   2a6ec:	7b1b      	ldrb	r3, [r3, #12]
   2a6ee:	031b      	lsls	r3, r3, #12
   2a6f0:	001a      	movs	r2, r3
   2a6f2:	697b      	ldr	r3, [r7, #20]
   2a6f4:	4313      	orrs	r3, r2
   2a6f6:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2a6f8:	68bb      	ldr	r3, [r7, #8]
   2a6fa:	7adb      	ldrb	r3, [r3, #11]
   2a6fc:	021b      	lsls	r3, r3, #8
   2a6fe:	001a      	movs	r2, r3
   2a700:	697b      	ldr	r3, [r7, #20]
   2a702:	4313      	orrs	r3, r2
   2a704:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2a706:	687b      	ldr	r3, [r7, #4]
   2a708:	697a      	ldr	r2, [r7, #20]
   2a70a:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a70c:	2300      	movs	r3, #0
}
   2a70e:	0018      	movs	r0, r3
   2a710:	46bd      	mov	sp, r7
   2a712:	b006      	add	sp, #24
   2a714:	bd80      	pop	{r7, pc}
   2a716:	46c0      	nop			; (mov r8, r8)
   2a718:	000396a8 	.word	0x000396a8

0002a71c <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2a71c:	b580      	push	{r7, lr}
   2a71e:	b086      	sub	sp, #24
   2a720:	af00      	add	r7, sp, #0
   2a722:	60b9      	str	r1, [r7, #8]
   2a724:	607a      	str	r2, [r7, #4]
   2a726:	230f      	movs	r3, #15
   2a728:	18fb      	adds	r3, r7, r3
   2a72a:	1c02      	adds	r2, r0, #0
   2a72c:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2a72e:	2317      	movs	r3, #23
   2a730:	18fb      	adds	r3, r7, r3
   2a732:	2200      	movs	r2, #0
   2a734:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2a736:	68bb      	ldr	r3, [r7, #8]
   2a738:	7a1b      	ldrb	r3, [r3, #8]
   2a73a:	2b00      	cmp	r3, #0
   2a73c:	d007      	beq.n	2a74e <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2a73e:	2317      	movs	r3, #23
   2a740:	18fb      	adds	r3, r7, r3
   2a742:	2217      	movs	r2, #23
   2a744:	18ba      	adds	r2, r7, r2
   2a746:	7812      	ldrb	r2, [r2, #0]
   2a748:	2104      	movs	r1, #4
   2a74a:	430a      	orrs	r2, r1
   2a74c:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2a74e:	68bb      	ldr	r3, [r7, #8]
   2a750:	7a5b      	ldrb	r3, [r3, #9]
   2a752:	2b01      	cmp	r3, #1
   2a754:	d107      	bne.n	2a766 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2a756:	2317      	movs	r3, #23
   2a758:	18fb      	adds	r3, r7, r3
   2a75a:	2217      	movs	r2, #23
   2a75c:	18ba      	adds	r2, r7, r2
   2a75e:	7812      	ldrb	r2, [r2, #0]
   2a760:	2101      	movs	r1, #1
   2a762:	430a      	orrs	r2, r1
   2a764:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2a766:	687b      	ldr	r3, [r7, #4]
   2a768:	2217      	movs	r2, #23
   2a76a:	18ba      	adds	r2, r7, r2
   2a76c:	7812      	ldrb	r2, [r2, #0]
   2a76e:	701a      	strb	r2, [r3, #0]
}
   2a770:	46c0      	nop			; (mov r8, r8)
   2a772:	46bd      	mov	sp, r7
   2a774:	b006      	add	sp, #24
   2a776:	bd80      	pop	{r7, pc}

0002a778 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a778:	b580      	push	{r7, lr}
   2a77a:	b088      	sub	sp, #32
   2a77c:	af00      	add	r7, sp, #0
   2a77e:	60b9      	str	r1, [r7, #8]
   2a780:	607a      	str	r2, [r7, #4]
   2a782:	230f      	movs	r3, #15
   2a784:	18fb      	adds	r3, r7, r3
   2a786:	1c02      	adds	r2, r0, #0
   2a788:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a78a:	230f      	movs	r3, #15
   2a78c:	18fb      	adds	r3, r7, r3
   2a78e:	781a      	ldrb	r2, [r3, #0]
   2a790:	231b      	movs	r3, #27
   2a792:	18fb      	adds	r3, r7, r3
   2a794:	493e      	ldr	r1, [pc, #248]	; (2a890 <_tcc_build_faults+0x118>)
   2a796:	5c8a      	ldrb	r2, [r1, r2]
   2a798:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a79a:	2300      	movs	r3, #0
   2a79c:	61fb      	str	r3, [r7, #28]
   2a79e:	e06e      	b.n	2a87e <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2a7a0:	69fa      	ldr	r2, [r7, #28]
   2a7a2:	0013      	movs	r3, r2
   2a7a4:	009b      	lsls	r3, r3, #2
   2a7a6:	189b      	adds	r3, r3, r2
   2a7a8:	005b      	lsls	r3, r3, #1
   2a7aa:	3328      	adds	r3, #40	; 0x28
   2a7ac:	68ba      	ldr	r2, [r7, #8]
   2a7ae:	18d3      	adds	r3, r2, r3
   2a7b0:	3304      	adds	r3, #4
   2a7b2:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2a7b4:	697b      	ldr	r3, [r7, #20]
   2a7b6:	7a5b      	ldrb	r3, [r3, #9]
   2a7b8:	221b      	movs	r2, #27
   2a7ba:	18ba      	adds	r2, r7, r2
   2a7bc:	7812      	ldrb	r2, [r2, #0]
   2a7be:	429a      	cmp	r2, r3
   2a7c0:	d801      	bhi.n	2a7c6 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2a7c2:	2317      	movs	r3, #23
   2a7c4:	e05f      	b.n	2a886 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2a7c6:	697b      	ldr	r3, [r7, #20]
   2a7c8:	781b      	ldrb	r3, [r3, #0]
   2a7ca:	2b0f      	cmp	r3, #15
   2a7cc:	d901      	bls.n	2a7d2 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2a7ce:	2317      	movs	r3, #23
   2a7d0:	e059      	b.n	2a886 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a7d2:	697b      	ldr	r3, [r7, #20]
   2a7d4:	781b      	ldrb	r3, [r3, #0]
   2a7d6:	061b      	lsls	r3, r3, #24
   2a7d8:	001a      	movs	r2, r3
   2a7da:	23f0      	movs	r3, #240	; 0xf0
   2a7dc:	051b      	lsls	r3, r3, #20
   2a7de:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2a7e0:	697b      	ldr	r3, [r7, #20]
   2a7e2:	785b      	ldrb	r3, [r3, #1]
   2a7e4:	041b      	lsls	r3, r3, #16
   2a7e6:	0019      	movs	r1, r3
   2a7e8:	23ff      	movs	r3, #255	; 0xff
   2a7ea:	041b      	lsls	r3, r3, #16
   2a7ec:	400b      	ands	r3, r1
   2a7ee:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2a7f0:	697b      	ldr	r3, [r7, #20]
   2a7f2:	789b      	ldrb	r3, [r3, #2]
   2a7f4:	2b00      	cmp	r3, #0
   2a7f6:	d001      	beq.n	2a7fc <_tcc_build_faults+0x84>
   2a7f8:	2380      	movs	r3, #128	; 0x80
   2a7fa:	e000      	b.n	2a7fe <_tcc_build_faults+0x86>
   2a7fc:	2300      	movs	r3, #0
   2a7fe:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2a800:	697b      	ldr	r3, [r7, #20]
   2a802:	78db      	ldrb	r3, [r3, #3]
   2a804:	2b00      	cmp	r3, #0
   2a806:	d001      	beq.n	2a80c <_tcc_build_faults+0x94>
   2a808:	2308      	movs	r3, #8
   2a80a:	e000      	b.n	2a80e <_tcc_build_faults+0x96>
   2a80c:	2300      	movs	r3, #0
   2a80e:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2a810:	697b      	ldr	r3, [r7, #20]
   2a812:	791b      	ldrb	r3, [r3, #4]
   2a814:	2b00      	cmp	r3, #0
   2a816:	d001      	beq.n	2a81c <_tcc_build_faults+0xa4>
   2a818:	2310      	movs	r3, #16
   2a81a:	e000      	b.n	2a81e <_tcc_build_faults+0xa6>
   2a81c:	2300      	movs	r3, #0
   2a81e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2a820:	697b      	ldr	r3, [r7, #20]
   2a822:	795b      	ldrb	r3, [r3, #5]
   2a824:	0019      	movs	r1, r3
   2a826:	2303      	movs	r3, #3
   2a828:	400b      	ands	r3, r1
   2a82a:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2a82c:	697b      	ldr	r3, [r7, #20]
   2a82e:	799b      	ldrb	r3, [r3, #6]
   2a830:	015b      	lsls	r3, r3, #5
   2a832:	0019      	movs	r1, r3
   2a834:	2360      	movs	r3, #96	; 0x60
   2a836:	400b      	ands	r3, r1
   2a838:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2a83a:	697b      	ldr	r3, [r7, #20]
   2a83c:	79db      	ldrb	r3, [r3, #7]
   2a83e:	021b      	lsls	r3, r3, #8
   2a840:	0019      	movs	r1, r3
   2a842:	23c0      	movs	r3, #192	; 0xc0
   2a844:	009b      	lsls	r3, r3, #2
   2a846:	400b      	ands	r3, r1
   2a848:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2a84a:	697b      	ldr	r3, [r7, #20]
   2a84c:	7a1b      	ldrb	r3, [r3, #8]
   2a84e:	031b      	lsls	r3, r3, #12
   2a850:	0019      	movs	r1, r3
   2a852:	23e0      	movs	r3, #224	; 0xe0
   2a854:	01db      	lsls	r3, r3, #7
   2a856:	400b      	ands	r3, r1
   2a858:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2a85a:	697b      	ldr	r3, [r7, #20]
   2a85c:	7a5b      	ldrb	r3, [r3, #9]
   2a85e:	029b      	lsls	r3, r3, #10
   2a860:	0019      	movs	r1, r3
   2a862:	23c0      	movs	r3, #192	; 0xc0
   2a864:	011b      	lsls	r3, r3, #4
   2a866:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a868:	4313      	orrs	r3, r2
   2a86a:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2a86c:	69fb      	ldr	r3, [r7, #28]
   2a86e:	009b      	lsls	r3, r3, #2
   2a870:	687a      	ldr	r2, [r7, #4]
   2a872:	18d3      	adds	r3, r2, r3
   2a874:	693a      	ldr	r2, [r7, #16]
   2a876:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a878:	69fb      	ldr	r3, [r7, #28]
   2a87a:	3301      	adds	r3, #1
   2a87c:	61fb      	str	r3, [r7, #28]
   2a87e:	69fb      	ldr	r3, [r7, #28]
   2a880:	2b01      	cmp	r3, #1
   2a882:	dd8d      	ble.n	2a7a0 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2a884:	2300      	movs	r3, #0
}
   2a886:	0018      	movs	r0, r3
   2a888:	46bd      	mov	sp, r7
   2a88a:	b008      	add	sp, #32
   2a88c:	bd80      	pop	{r7, pc}
   2a88e:	46c0      	nop			; (mov r8, r8)
   2a890:	000396a8 	.word	0x000396a8

0002a894 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a894:	b580      	push	{r7, lr}
   2a896:	b088      	sub	sp, #32
   2a898:	af00      	add	r7, sp, #0
   2a89a:	60b9      	str	r1, [r7, #8]
   2a89c:	607a      	str	r2, [r7, #4]
   2a89e:	230f      	movs	r3, #15
   2a8a0:	18fb      	adds	r3, r7, r3
   2a8a2:	1c02      	adds	r2, r0, #0
   2a8a4:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2a8a6:	230f      	movs	r3, #15
   2a8a8:	18fb      	adds	r3, r7, r3
   2a8aa:	781a      	ldrb	r2, [r3, #0]
   2a8ac:	2317      	movs	r3, #23
   2a8ae:	18fb      	adds	r3, r7, r3
   2a8b0:	492d      	ldr	r1, [pc, #180]	; (2a968 <_tcc_build_drvctrl+0xd4>)
   2a8b2:	5c8a      	ldrb	r2, [r1, r2]
   2a8b4:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2a8b6:	2300      	movs	r3, #0
   2a8b8:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a8ba:	2300      	movs	r3, #0
   2a8bc:	61fb      	str	r3, [r7, #28]
   2a8be:	e048      	b.n	2a952 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2a8c0:	68ba      	ldr	r2, [r7, #8]
   2a8c2:	2150      	movs	r1, #80	; 0x50
   2a8c4:	69fb      	ldr	r3, [r7, #28]
   2a8c6:	18d3      	adds	r3, r2, r3
   2a8c8:	185b      	adds	r3, r3, r1
   2a8ca:	781b      	ldrb	r3, [r3, #0]
   2a8cc:	2b00      	cmp	r3, #0
   2a8ce:	d010      	beq.n	2a8f2 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2a8d0:	2317      	movs	r3, #23
   2a8d2:	18fb      	adds	r3, r7, r3
   2a8d4:	781a      	ldrb	r2, [r3, #0]
   2a8d6:	69fb      	ldr	r3, [r7, #28]
   2a8d8:	429a      	cmp	r2, r3
   2a8da:	d801      	bhi.n	2a8e0 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2a8dc:	2317      	movs	r3, #23
   2a8de:	e03f      	b.n	2a960 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2a8e0:	2380      	movs	r3, #128	; 0x80
   2a8e2:	025a      	lsls	r2, r3, #9
   2a8e4:	69fb      	ldr	r3, [r7, #28]
   2a8e6:	409a      	lsls	r2, r3
   2a8e8:	0013      	movs	r3, r2
   2a8ea:	001a      	movs	r2, r3
   2a8ec:	69bb      	ldr	r3, [r7, #24]
   2a8ee:	4313      	orrs	r3, r2
   2a8f0:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2a8f2:	68ba      	ldr	r2, [r7, #8]
   2a8f4:	69fb      	ldr	r3, [r7, #28]
   2a8f6:	331c      	adds	r3, #28
   2a8f8:	005b      	lsls	r3, r3, #1
   2a8fa:	18d3      	adds	r3, r2, r3
   2a8fc:	3309      	adds	r3, #9
   2a8fe:	781b      	ldrb	r3, [r3, #0]
   2a900:	2b00      	cmp	r3, #0
   2a902:	d023      	beq.n	2a94c <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2a904:	2317      	movs	r3, #23
   2a906:	18fb      	adds	r3, r7, r3
   2a908:	781a      	ldrb	r2, [r3, #0]
   2a90a:	69fb      	ldr	r3, [r7, #28]
   2a90c:	429a      	cmp	r2, r3
   2a90e:	d801      	bhi.n	2a914 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2a910:	2317      	movs	r3, #23
   2a912:	e025      	b.n	2a960 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2a914:	68ba      	ldr	r2, [r7, #8]
   2a916:	69fb      	ldr	r3, [r7, #28]
   2a918:	331c      	adds	r3, #28
   2a91a:	005b      	lsls	r3, r3, #1
   2a91c:	18d3      	adds	r3, r2, r3
   2a91e:	3309      	adds	r3, #9
   2a920:	781b      	ldrb	r3, [r3, #0]
   2a922:	2b02      	cmp	r3, #2
   2a924:	d10a      	bne.n	2a93c <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2a926:	2302      	movs	r3, #2
   2a928:	33ff      	adds	r3, #255	; 0xff
   2a92a:	001a      	movs	r2, r3
   2a92c:	69fb      	ldr	r3, [r7, #28]
   2a92e:	409a      	lsls	r2, r3
   2a930:	0013      	movs	r3, r2
   2a932:	001a      	movs	r2, r3
   2a934:	69bb      	ldr	r3, [r7, #24]
   2a936:	4313      	orrs	r3, r2
   2a938:	61bb      	str	r3, [r7, #24]
   2a93a:	e007      	b.n	2a94c <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2a93c:	2201      	movs	r2, #1
   2a93e:	69fb      	ldr	r3, [r7, #28]
   2a940:	409a      	lsls	r2, r3
   2a942:	0013      	movs	r3, r2
   2a944:	001a      	movs	r2, r3
   2a946:	69bb      	ldr	r3, [r7, #24]
   2a948:	4313      	orrs	r3, r2
   2a94a:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a94c:	69fb      	ldr	r3, [r7, #28]
   2a94e:	3301      	adds	r3, #1
   2a950:	61fb      	str	r3, [r7, #28]
   2a952:	69fb      	ldr	r3, [r7, #28]
   2a954:	2b07      	cmp	r3, #7
   2a956:	d9b3      	bls.n	2a8c0 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2a958:	687b      	ldr	r3, [r7, #4]
   2a95a:	69ba      	ldr	r2, [r7, #24]
   2a95c:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a95e:	2300      	movs	r3, #0
}
   2a960:	0018      	movs	r0, r3
   2a962:	46bd      	mov	sp, r7
   2a964:	b008      	add	sp, #32
   2a966:	bd80      	pop	{r7, pc}
   2a968:	000396ac 	.word	0x000396ac

0002a96c <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a96c:	b580      	push	{r7, lr}
   2a96e:	b088      	sub	sp, #32
   2a970:	af00      	add	r7, sp, #0
   2a972:	60b9      	str	r1, [r7, #8]
   2a974:	607a      	str	r2, [r7, #4]
   2a976:	230f      	movs	r3, #15
   2a978:	18fb      	adds	r3, r7, r3
   2a97a:	1c02      	adds	r2, r0, #0
   2a97c:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a97e:	230f      	movs	r3, #15
   2a980:	18fb      	adds	r3, r7, r3
   2a982:	781a      	ldrb	r2, [r3, #0]
   2a984:	2317      	movs	r3, #23
   2a986:	18fb      	adds	r3, r7, r3
   2a988:	491d      	ldr	r1, [pc, #116]	; (2aa00 <_tcc_build_waves+0x94>)
   2a98a:	5c8a      	ldrb	r2, [r1, r2]
   2a98c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2a98e:	68bb      	ldr	r3, [r7, #8]
   2a990:	3310      	adds	r3, #16
   2a992:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a994:	693b      	ldr	r3, [r7, #16]
   2a996:	7a5b      	ldrb	r3, [r3, #9]
   2a998:	011b      	lsls	r3, r3, #4
   2a99a:	001a      	movs	r2, r3
   2a99c:	2330      	movs	r3, #48	; 0x30
   2a99e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2a9a0:	693b      	ldr	r3, [r7, #16]
   2a9a2:	7a1b      	ldrb	r3, [r3, #8]
   2a9a4:	0019      	movs	r1, r3
   2a9a6:	2307      	movs	r3, #7
   2a9a8:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a9aa:	4313      	orrs	r3, r2
   2a9ac:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a9ae:	2300      	movs	r3, #0
   2a9b0:	61fb      	str	r3, [r7, #28]
   2a9b2:	e01a      	b.n	2a9ea <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2a9b4:	693a      	ldr	r2, [r7, #16]
   2a9b6:	69fb      	ldr	r3, [r7, #28]
   2a9b8:	18d3      	adds	r3, r2, r3
   2a9ba:	3304      	adds	r3, #4
   2a9bc:	781b      	ldrb	r3, [r3, #0]
   2a9be:	2b00      	cmp	r3, #0
   2a9c0:	d010      	beq.n	2a9e4 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2a9c2:	2317      	movs	r3, #23
   2a9c4:	18fb      	adds	r3, r7, r3
   2a9c6:	781a      	ldrb	r2, [r3, #0]
   2a9c8:	69fb      	ldr	r3, [r7, #28]
   2a9ca:	429a      	cmp	r2, r3
   2a9cc:	dc01      	bgt.n	2a9d2 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2a9ce:	2317      	movs	r3, #23
   2a9d0:	e012      	b.n	2a9f8 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2a9d2:	2380      	movs	r3, #128	; 0x80
   2a9d4:	025a      	lsls	r2, r3, #9
   2a9d6:	69fb      	ldr	r3, [r7, #28]
   2a9d8:	409a      	lsls	r2, r3
   2a9da:	0013      	movs	r3, r2
   2a9dc:	001a      	movs	r2, r3
   2a9de:	69bb      	ldr	r3, [r7, #24]
   2a9e0:	4313      	orrs	r3, r2
   2a9e2:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a9e4:	69fb      	ldr	r3, [r7, #28]
   2a9e6:	3301      	adds	r3, #1
   2a9e8:	61fb      	str	r3, [r7, #28]
   2a9ea:	69fb      	ldr	r3, [r7, #28]
   2a9ec:	2b03      	cmp	r3, #3
   2a9ee:	dde1      	ble.n	2a9b4 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2a9f0:	687b      	ldr	r3, [r7, #4]
   2a9f2:	69ba      	ldr	r2, [r7, #24]
   2a9f4:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2a9f6:	2300      	movs	r3, #0
}
   2a9f8:	0018      	movs	r0, r3
   2a9fa:	46bd      	mov	sp, r7
   2a9fc:	b008      	add	sp, #32
   2a9fe:	bd80      	pop	{r7, pc}
   2aa00:	000396a8 	.word	0x000396a8

0002aa04 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2aa04:	b590      	push	{r4, r7, lr}
   2aa06:	b091      	sub	sp, #68	; 0x44
   2aa08:	af00      	add	r7, sp, #0
   2aa0a:	60f8      	str	r0, [r7, #12]
   2aa0c:	60b9      	str	r1, [r7, #8]
   2aa0e:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2aa10:	233b      	movs	r3, #59	; 0x3b
   2aa12:	18fc      	adds	r4, r7, r3
   2aa14:	68bb      	ldr	r3, [r7, #8]
   2aa16:	0018      	movs	r0, r3
   2aa18:	4bc4      	ldr	r3, [pc, #784]	; (2ad2c <tcc_init+0x328>)
   2aa1a:	4798      	blx	r3
   2aa1c:	0003      	movs	r3, r0
   2aa1e:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2aa20:	233b      	movs	r3, #59	; 0x3b
   2aa22:	18fb      	adds	r3, r7, r3
   2aa24:	781a      	ldrb	r2, [r3, #0]
   2aa26:	4bc2      	ldr	r3, [pc, #776]	; (2ad30 <tcc_init+0x32c>)
   2aa28:	0092      	lsls	r2, r2, #2
   2aa2a:	58d3      	ldr	r3, [r2, r3]
   2aa2c:	0019      	movs	r1, r3
   2aa2e:	2002      	movs	r0, #2
   2aa30:	4bc0      	ldr	r3, [pc, #768]	; (2ad34 <tcc_init+0x330>)
   2aa32:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2aa34:	68bb      	ldr	r3, [r7, #8]
   2aa36:	681b      	ldr	r3, [r3, #0]
   2aa38:	2202      	movs	r2, #2
   2aa3a:	4013      	ands	r3, r2
   2aa3c:	d001      	beq.n	2aa42 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2aa3e:	231c      	movs	r3, #28
   2aa40:	e1be      	b.n	2adc0 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2aa42:	68bb      	ldr	r3, [r7, #8]
   2aa44:	681b      	ldr	r3, [r3, #0]
   2aa46:	2201      	movs	r2, #1
   2aa48:	4013      	ands	r3, r2
   2aa4a:	d001      	beq.n	2aa50 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2aa4c:	231c      	movs	r3, #28
   2aa4e:	e1b7      	b.n	2adc0 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2aa50:	233b      	movs	r3, #59	; 0x3b
   2aa52:	18fb      	adds	r3, r7, r3
   2aa54:	781a      	ldrb	r2, [r3, #0]
   2aa56:	4bb8      	ldr	r3, [pc, #736]	; (2ad38 <tcc_init+0x334>)
   2aa58:	0092      	lsls	r2, r2, #2
   2aa5a:	58d3      	ldr	r3, [r2, r3]
   2aa5c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2aa5e:	687b      	ldr	r3, [r7, #4]
   2aa60:	681a      	ldr	r2, [r3, #0]
   2aa62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2aa64:	429a      	cmp	r2, r3
   2aa66:	d804      	bhi.n	2aa72 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2aa68:	687b      	ldr	r3, [r7, #4]
   2aa6a:	685a      	ldr	r2, [r3, #4]
   2aa6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2aa6e:	429a      	cmp	r2, r3
   2aa70:	d901      	bls.n	2aa76 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2aa72:	2317      	movs	r3, #23
   2aa74:	e1a4      	b.n	2adc0 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2aa76:	2300      	movs	r3, #0
   2aa78:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aa7a:	e00e      	b.n	2aa9a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2aa7c:	687a      	ldr	r2, [r7, #4]
   2aa7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa80:	3306      	adds	r3, #6
   2aa82:	009b      	lsls	r3, r3, #2
   2aa84:	18d3      	adds	r3, r2, r3
   2aa86:	3304      	adds	r3, #4
   2aa88:	681a      	ldr	r2, [r3, #0]
   2aa8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2aa8c:	429a      	cmp	r2, r3
   2aa8e:	d901      	bls.n	2aa94 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2aa90:	2317      	movs	r3, #23
   2aa92:	e195      	b.n	2adc0 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2aa94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa96:	3301      	adds	r3, #1
   2aa98:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aa9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa9c:	2b03      	cmp	r3, #3
   2aa9e:	dded      	ble.n	2aa7c <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2aaa0:	2300      	movs	r3, #0
   2aaa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aaa4:	e019      	b.n	2aada <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2aaa6:	687a      	ldr	r2, [r7, #4]
   2aaa8:	2198      	movs	r1, #152	; 0x98
   2aaaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aaac:	18d3      	adds	r3, r2, r3
   2aaae:	185b      	adds	r3, r3, r1
   2aab0:	781b      	ldrb	r3, [r3, #0]
   2aab2:	2201      	movs	r2, #1
   2aab4:	4053      	eors	r3, r2
   2aab6:	b2db      	uxtb	r3, r3
   2aab8:	2b00      	cmp	r3, #0
   2aaba:	d10a      	bne.n	2aad2 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2aabc:	233b      	movs	r3, #59	; 0x3b
   2aabe:	18fb      	adds	r3, r7, r3
   2aac0:	781b      	ldrb	r3, [r3, #0]
   2aac2:	4a9e      	ldr	r2, [pc, #632]	; (2ad3c <tcc_init+0x338>)
   2aac4:	5cd3      	ldrb	r3, [r2, r3]
   2aac6:	001a      	movs	r2, r3
   2aac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aaca:	429a      	cmp	r2, r3
   2aacc:	dc02      	bgt.n	2aad4 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2aace:	2317      	movs	r3, #23
   2aad0:	e176      	b.n	2adc0 <tcc_init+0x3bc>
			continue;
   2aad2:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2aad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aad6:	3301      	adds	r3, #1
   2aad8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aadc:	2b07      	cmp	r3, #7
   2aade:	dde2      	ble.n	2aaa6 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2aae0:	2300      	movs	r3, #0
   2aae2:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2aae4:	2333      	movs	r3, #51	; 0x33
   2aae6:	18fc      	adds	r4, r7, r3
   2aae8:	232c      	movs	r3, #44	; 0x2c
   2aaea:	18fa      	adds	r2, r7, r3
   2aaec:	6879      	ldr	r1, [r7, #4]
   2aaee:	233b      	movs	r3, #59	; 0x3b
   2aaf0:	18fb      	adds	r3, r7, r3
   2aaf2:	781b      	ldrb	r3, [r3, #0]
   2aaf4:	0018      	movs	r0, r3
   2aaf6:	4b92      	ldr	r3, [pc, #584]	; (2ad40 <tcc_init+0x33c>)
   2aaf8:	4798      	blx	r3
   2aafa:	0003      	movs	r3, r0
   2aafc:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2aafe:	2333      	movs	r3, #51	; 0x33
   2ab00:	18fb      	adds	r3, r7, r3
   2ab02:	781b      	ldrb	r3, [r3, #0]
   2ab04:	2b00      	cmp	r3, #0
   2ab06:	d003      	beq.n	2ab10 <tcc_init+0x10c>
		return status;
   2ab08:	2333      	movs	r3, #51	; 0x33
   2ab0a:	18fb      	adds	r3, r7, r3
   2ab0c:	781b      	ldrb	r3, [r3, #0]
   2ab0e:	e157      	b.n	2adc0 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2ab10:	232b      	movs	r3, #43	; 0x2b
   2ab12:	18fa      	adds	r2, r7, r3
   2ab14:	6879      	ldr	r1, [r7, #4]
   2ab16:	233b      	movs	r3, #59	; 0x3b
   2ab18:	18fb      	adds	r3, r7, r3
   2ab1a:	781b      	ldrb	r3, [r3, #0]
   2ab1c:	0018      	movs	r0, r3
   2ab1e:	4b89      	ldr	r3, [pc, #548]	; (2ad44 <tcc_init+0x340>)
   2ab20:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2ab22:	2333      	movs	r3, #51	; 0x33
   2ab24:	18fc      	adds	r4, r7, r3
   2ab26:	2320      	movs	r3, #32
   2ab28:	18fa      	adds	r2, r7, r3
   2ab2a:	6879      	ldr	r1, [r7, #4]
   2ab2c:	233b      	movs	r3, #59	; 0x3b
   2ab2e:	18fb      	adds	r3, r7, r3
   2ab30:	781b      	ldrb	r3, [r3, #0]
   2ab32:	0018      	movs	r0, r3
   2ab34:	4b84      	ldr	r3, [pc, #528]	; (2ad48 <tcc_init+0x344>)
   2ab36:	4798      	blx	r3
   2ab38:	0003      	movs	r3, r0
   2ab3a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2ab3c:	2333      	movs	r3, #51	; 0x33
   2ab3e:	18fb      	adds	r3, r7, r3
   2ab40:	781b      	ldrb	r3, [r3, #0]
   2ab42:	2b00      	cmp	r3, #0
   2ab44:	d003      	beq.n	2ab4e <tcc_init+0x14a>
		return status;
   2ab46:	2333      	movs	r3, #51	; 0x33
   2ab48:	18fb      	adds	r3, r7, r3
   2ab4a:	781b      	ldrb	r3, [r3, #0]
   2ab4c:	e138      	b.n	2adc0 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2ab4e:	2300      	movs	r3, #0
   2ab50:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2ab52:	2333      	movs	r3, #51	; 0x33
   2ab54:	18fc      	adds	r4, r7, r3
   2ab56:	231c      	movs	r3, #28
   2ab58:	18fa      	adds	r2, r7, r3
   2ab5a:	6879      	ldr	r1, [r7, #4]
   2ab5c:	233b      	movs	r3, #59	; 0x3b
   2ab5e:	18fb      	adds	r3, r7, r3
   2ab60:	781b      	ldrb	r3, [r3, #0]
   2ab62:	0018      	movs	r0, r3
   2ab64:	4b79      	ldr	r3, [pc, #484]	; (2ad4c <tcc_init+0x348>)
   2ab66:	4798      	blx	r3
   2ab68:	0003      	movs	r3, r0
   2ab6a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2ab6c:	2333      	movs	r3, #51	; 0x33
   2ab6e:	18fb      	adds	r3, r7, r3
   2ab70:	781b      	ldrb	r3, [r3, #0]
   2ab72:	2b00      	cmp	r3, #0
   2ab74:	d003      	beq.n	2ab7e <tcc_init+0x17a>
		return status;
   2ab76:	2333      	movs	r3, #51	; 0x33
   2ab78:	18fb      	adds	r3, r7, r3
   2ab7a:	781b      	ldrb	r3, [r3, #0]
   2ab7c:	e120      	b.n	2adc0 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2ab7e:	2333      	movs	r3, #51	; 0x33
   2ab80:	18fc      	adds	r4, r7, r3
   2ab82:	2318      	movs	r3, #24
   2ab84:	18fa      	adds	r2, r7, r3
   2ab86:	6879      	ldr	r1, [r7, #4]
   2ab88:	233b      	movs	r3, #59	; 0x3b
   2ab8a:	18fb      	adds	r3, r7, r3
   2ab8c:	781b      	ldrb	r3, [r3, #0]
   2ab8e:	0018      	movs	r0, r3
   2ab90:	4b6f      	ldr	r3, [pc, #444]	; (2ad50 <tcc_init+0x34c>)
   2ab92:	4798      	blx	r3
   2ab94:	0003      	movs	r3, r0
   2ab96:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2ab98:	2333      	movs	r3, #51	; 0x33
   2ab9a:	18fb      	adds	r3, r7, r3
   2ab9c:	781b      	ldrb	r3, [r3, #0]
   2ab9e:	2b00      	cmp	r3, #0
   2aba0:	d003      	beq.n	2abaa <tcc_init+0x1a6>
		return status;
   2aba2:	2333      	movs	r3, #51	; 0x33
   2aba4:	18fb      	adds	r3, r7, r3
   2aba6:	781b      	ldrb	r3, [r3, #0]
   2aba8:	e10a      	b.n	2adc0 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2abaa:	2300      	movs	r3, #0
   2abac:	63fb      	str	r3, [r7, #60]	; 0x3c
   2abae:	e009      	b.n	2abc4 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2abb0:	68fa      	ldr	r2, [r7, #12]
   2abb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2abb4:	009b      	lsls	r3, r3, #2
   2abb6:	18d3      	adds	r3, r2, r3
   2abb8:	3304      	adds	r3, #4
   2abba:	2200      	movs	r2, #0
   2abbc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2abbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2abc0:	3301      	adds	r3, #1
   2abc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   2abc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2abc6:	2b0b      	cmp	r3, #11
   2abc8:	ddf2      	ble.n	2abb0 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2abca:	68fb      	ldr	r3, [r7, #12]
   2abcc:	2200      	movs	r2, #0
   2abce:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2abd0:	68fb      	ldr	r3, [r7, #12]
   2abd2:	2200      	movs	r2, #0
   2abd4:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2abd6:	233b      	movs	r3, #59	; 0x3b
   2abd8:	18fb      	adds	r3, r7, r3
   2abda:	781a      	ldrb	r2, [r3, #0]
   2abdc:	4b5d      	ldr	r3, [pc, #372]	; (2ad54 <tcc_init+0x350>)
   2abde:	0092      	lsls	r2, r2, #2
   2abe0:	68f9      	ldr	r1, [r7, #12]
   2abe2:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2abe4:	68fb      	ldr	r3, [r7, #12]
   2abe6:	68ba      	ldr	r2, [r7, #8]
   2abe8:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2abea:	687b      	ldr	r3, [r7, #4]
   2abec:	22a0      	movs	r2, #160	; 0xa0
   2abee:	5c99      	ldrb	r1, [r3, r2]
   2abf0:	68fb      	ldr	r3, [r7, #12]
   2abf2:	223c      	movs	r2, #60	; 0x3c
   2abf4:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2abf6:	2314      	movs	r3, #20
   2abf8:	18fb      	adds	r3, r7, r3
   2abfa:	0018      	movs	r0, r3
   2abfc:	4b56      	ldr	r3, [pc, #344]	; (2ad58 <tcc_init+0x354>)
   2abfe:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2ac00:	687b      	ldr	r3, [r7, #4]
   2ac02:	7a9a      	ldrb	r2, [r3, #10]
   2ac04:	2314      	movs	r3, #20
   2ac06:	18fb      	adds	r3, r7, r3
   2ac08:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2ac0a:	233b      	movs	r3, #59	; 0x3b
   2ac0c:	18fb      	adds	r3, r7, r3
   2ac0e:	781b      	ldrb	r3, [r3, #0]
   2ac10:	4a52      	ldr	r2, [pc, #328]	; (2ad5c <tcc_init+0x358>)
   2ac12:	5cd3      	ldrb	r3, [r2, r3]
   2ac14:	2214      	movs	r2, #20
   2ac16:	18ba      	adds	r2, r7, r2
   2ac18:	0011      	movs	r1, r2
   2ac1a:	0018      	movs	r0, r3
   2ac1c:	4b50      	ldr	r3, [pc, #320]	; (2ad60 <tcc_init+0x35c>)
   2ac1e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2ac20:	233b      	movs	r3, #59	; 0x3b
   2ac22:	18fb      	adds	r3, r7, r3
   2ac24:	781b      	ldrb	r3, [r3, #0]
   2ac26:	4a4d      	ldr	r2, [pc, #308]	; (2ad5c <tcc_init+0x358>)
   2ac28:	5cd3      	ldrb	r3, [r2, r3]
   2ac2a:	0018      	movs	r0, r3
   2ac2c:	4b4d      	ldr	r3, [pc, #308]	; (2ad64 <tcc_init+0x360>)
   2ac2e:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2ac30:	2300      	movs	r3, #0
   2ac32:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ac34:	e02d      	b.n	2ac92 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2ac36:	687a      	ldr	r2, [r7, #4]
   2ac38:	2198      	movs	r1, #152	; 0x98
   2ac3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ac3c:	18d3      	adds	r3, r2, r3
   2ac3e:	185b      	adds	r3, r3, r1
   2ac40:	781b      	ldrb	r3, [r3, #0]
   2ac42:	2201      	movs	r2, #1
   2ac44:	4053      	eors	r3, r2
   2ac46:	b2db      	uxtb	r3, r3
   2ac48:	2b00      	cmp	r3, #0
   2ac4a:	d11e      	bne.n	2ac8a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2ac4c:	2310      	movs	r3, #16
   2ac4e:	18fb      	adds	r3, r7, r3
   2ac50:	0018      	movs	r0, r3
   2ac52:	4b45      	ldr	r3, [pc, #276]	; (2ad68 <tcc_init+0x364>)
   2ac54:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2ac56:	687b      	ldr	r3, [r7, #4]
   2ac58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ac5a:	321e      	adds	r2, #30
   2ac5c:	0092      	lsls	r2, r2, #2
   2ac5e:	58d3      	ldr	r3, [r2, r3]
   2ac60:	b2da      	uxtb	r2, r3
   2ac62:	2310      	movs	r3, #16
   2ac64:	18fb      	adds	r3, r7, r3
   2ac66:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2ac68:	2310      	movs	r3, #16
   2ac6a:	18fb      	adds	r3, r7, r3
   2ac6c:	2201      	movs	r2, #1
   2ac6e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2ac70:	687b      	ldr	r3, [r7, #4]
   2ac72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ac74:	3216      	adds	r2, #22
   2ac76:	0092      	lsls	r2, r2, #2
   2ac78:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2ac7a:	b2db      	uxtb	r3, r3
   2ac7c:	2210      	movs	r2, #16
   2ac7e:	18ba      	adds	r2, r7, r2
   2ac80:	0011      	movs	r1, r2
   2ac82:	0018      	movs	r0, r3
   2ac84:	4b39      	ldr	r3, [pc, #228]	; (2ad6c <tcc_init+0x368>)
   2ac86:	4798      	blx	r3
   2ac88:	e000      	b.n	2ac8c <tcc_init+0x288>
			continue;
   2ac8a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2ac8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ac8e:	3301      	adds	r3, #1
   2ac90:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ac92:	233b      	movs	r3, #59	; 0x3b
   2ac94:	18fb      	adds	r3, r7, r3
   2ac96:	781b      	ldrb	r3, [r3, #0]
   2ac98:	4a28      	ldr	r2, [pc, #160]	; (2ad3c <tcc_init+0x338>)
   2ac9a:	5cd3      	ldrb	r3, [r2, r3]
   2ac9c:	001a      	movs	r2, r3
   2ac9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aca0:	429a      	cmp	r2, r3
   2aca2:	dcc8      	bgt.n	2ac36 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2aca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2aca6:	68bb      	ldr	r3, [r7, #8]
   2aca8:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2acaa:	46c0      	nop			; (mov r8, r8)
   2acac:	68bb      	ldr	r3, [r7, #8]
   2acae:	689b      	ldr	r3, [r3, #8]
   2acb0:	2204      	movs	r2, #4
   2acb2:	4013      	ands	r3, r2
   2acb4:	d1fa      	bne.n	2acac <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2acb6:	68bb      	ldr	r3, [r7, #8]
   2acb8:	22ff      	movs	r2, #255	; 0xff
   2acba:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2acbc:	46c0      	nop			; (mov r8, r8)
   2acbe:	68bb      	ldr	r3, [r7, #8]
   2acc0:	689b      	ldr	r3, [r3, #8]
   2acc2:	2204      	movs	r2, #4
   2acc4:	4013      	ands	r3, r2
   2acc6:	d1fa      	bne.n	2acbe <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2acc8:	232b      	movs	r3, #43	; 0x2b
   2acca:	18fb      	adds	r3, r7, r3
   2accc:	781a      	ldrb	r2, [r3, #0]
   2acce:	68bb      	ldr	r3, [r7, #8]
   2acd0:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2acd2:	2320      	movs	r3, #32
   2acd4:	18fb      	adds	r3, r7, r3
   2acd6:	681a      	ldr	r2, [r3, #0]
   2acd8:	68bb      	ldr	r3, [r7, #8]
   2acda:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2acdc:	2320      	movs	r3, #32
   2acde:	18fb      	adds	r3, r7, r3
   2ace0:	685a      	ldr	r2, [r3, #4]
   2ace2:	68bb      	ldr	r3, [r7, #8]
   2ace4:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2ace6:	69fa      	ldr	r2, [r7, #28]
   2ace8:	68bb      	ldr	r3, [r7, #8]
   2acea:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2acec:	46c0      	nop			; (mov r8, r8)
   2acee:	68bb      	ldr	r3, [r7, #8]
   2acf0:	689b      	ldr	r3, [r3, #8]
   2acf2:	4a1f      	ldr	r2, [pc, #124]	; (2ad70 <tcc_init+0x36c>)
   2acf4:	4013      	ands	r3, r2
   2acf6:	d1fa      	bne.n	2acee <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2acf8:	69ba      	ldr	r2, [r7, #24]
   2acfa:	68bb      	ldr	r3, [r7, #8]
   2acfc:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2acfe:	46c0      	nop			; (mov r8, r8)
   2ad00:	68bb      	ldr	r3, [r7, #8]
   2ad02:	689b      	ldr	r3, [r3, #8]
   2ad04:	2210      	movs	r2, #16
   2ad06:	4013      	ands	r3, r2
   2ad08:	d1fa      	bne.n	2ad00 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2ad0a:	687b      	ldr	r3, [r7, #4]
   2ad0c:	681a      	ldr	r2, [r3, #0]
   2ad0e:	68bb      	ldr	r3, [r7, #8]
   2ad10:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2ad12:	46c0      	nop			; (mov r8, r8)
   2ad14:	68bb      	ldr	r3, [r7, #8]
   2ad16:	689b      	ldr	r3, [r3, #8]
   2ad18:	4a16      	ldr	r2, [pc, #88]	; (2ad74 <tcc_init+0x370>)
   2ad1a:	4013      	ands	r3, r2
   2ad1c:	d1fa      	bne.n	2ad14 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2ad1e:	687b      	ldr	r3, [r7, #4]
   2ad20:	685a      	ldr	r2, [r3, #4]
   2ad22:	68bb      	ldr	r3, [r7, #8]
   2ad24:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2ad26:	2300      	movs	r3, #0
   2ad28:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ad2a:	e03f      	b.n	2adac <tcc_init+0x3a8>
   2ad2c:	0002a36d 	.word	0x0002a36d
   2ad30:	00039690 	.word	0x00039690
   2ad34:	0002a2e9 	.word	0x0002a2e9
   2ad38:	0003969c 	.word	0x0003969c
   2ad3c:	000396ac 	.word	0x000396ac
   2ad40:	0002a679 	.word	0x0002a679
   2ad44:	0002a71d 	.word	0x0002a71d
   2ad48:	0002a779 	.word	0x0002a779
   2ad4c:	0002a895 	.word	0x0002a895
   2ad50:	0002a96d 	.word	0x0002a96d
   2ad54:	20005aa4 	.word	0x20005aa4
   2ad58:	0002a2d1 	.word	0x0002a2d1
   2ad5c:	0003968c 	.word	0x0003968c
   2ad60:	00029ee9 	.word	0x00029ee9
   2ad64:	00029f2d 	.word	0x00029f2d
   2ad68:	0002a345 	.word	0x0002a345
   2ad6c:	0002a249 	.word	0x0002a249
   2ad70:	00020040 	.word	0x00020040
   2ad74:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2ad78:	46c0      	nop			; (mov r8, r8)
   2ad7a:	68bb      	ldr	r3, [r7, #8]
   2ad7c:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2ad7e:	4912      	ldr	r1, [pc, #72]	; (2adc8 <tcc_init+0x3c4>)
   2ad80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ad82:	4091      	lsls	r1, r2
   2ad84:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2ad86:	4013      	ands	r3, r2
   2ad88:	d1f7      	bne.n	2ad7a <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2ad8a:	687a      	ldr	r2, [r7, #4]
   2ad8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ad8e:	3306      	adds	r3, #6
   2ad90:	009b      	lsls	r3, r3, #2
   2ad92:	18d3      	adds	r3, r2, r3
   2ad94:	3304      	adds	r3, #4
   2ad96:	681a      	ldr	r2, [r3, #0]
   2ad98:	68b9      	ldr	r1, [r7, #8]
   2ad9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ad9c:	3310      	adds	r3, #16
   2ad9e:	009b      	lsls	r3, r3, #2
   2ada0:	18cb      	adds	r3, r1, r3
   2ada2:	3304      	adds	r3, #4
   2ada4:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2ada6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ada8:	3301      	adds	r3, #1
   2adaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   2adac:	233b      	movs	r3, #59	; 0x3b
   2adae:	18fb      	adds	r3, r7, r3
   2adb0:	781b      	ldrb	r3, [r3, #0]
   2adb2:	4a06      	ldr	r2, [pc, #24]	; (2adcc <tcc_init+0x3c8>)
   2adb4:	5cd3      	ldrb	r3, [r2, r3]
   2adb6:	001a      	movs	r2, r3
   2adb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2adba:	429a      	cmp	r2, r3
   2adbc:	dcdc      	bgt.n	2ad78 <tcc_init+0x374>
	}

	return STATUS_OK;
   2adbe:	2300      	movs	r3, #0
}
   2adc0:	0018      	movs	r0, r3
   2adc2:	46bd      	mov	sp, r7
   2adc4:	b011      	add	sp, #68	; 0x44
   2adc6:	bd90      	pop	{r4, r7, pc}
   2adc8:	00080100 	.word	0x00080100
   2adcc:	000396a8 	.word	0x000396a8

0002add0 <system_interrupt_enable>:
{
   2add0:	b580      	push	{r7, lr}
   2add2:	b082      	sub	sp, #8
   2add4:	af00      	add	r7, sp, #0
   2add6:	0002      	movs	r2, r0
   2add8:	1dfb      	adds	r3, r7, #7
   2adda:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2addc:	4b06      	ldr	r3, [pc, #24]	; (2adf8 <system_interrupt_enable+0x28>)
   2adde:	1dfa      	adds	r2, r7, #7
   2ade0:	7812      	ldrb	r2, [r2, #0]
   2ade2:	0011      	movs	r1, r2
   2ade4:	221f      	movs	r2, #31
   2ade6:	400a      	ands	r2, r1
   2ade8:	2101      	movs	r1, #1
   2adea:	4091      	lsls	r1, r2
   2adec:	000a      	movs	r2, r1
   2adee:	601a      	str	r2, [r3, #0]
}
   2adf0:	46c0      	nop			; (mov r8, r8)
   2adf2:	46bd      	mov	sp, r7
   2adf4:	b002      	add	sp, #8
   2adf6:	bd80      	pop	{r7, pc}
   2adf8:	e000e100 	.word	0xe000e100

0002adfc <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2adfc:	b580      	push	{r7, lr}
   2adfe:	b082      	sub	sp, #8
   2ae00:	af00      	add	r7, sp, #0
   2ae02:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2ae04:	4a04      	ldr	r2, [pc, #16]	; (2ae18 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2ae06:	687b      	ldr	r3, [r7, #4]
   2ae08:	18d3      	adds	r3, r2, r3
   2ae0a:	781b      	ldrb	r3, [r3, #0]
   2ae0c:	b25b      	sxtb	r3, r3
}
   2ae0e:	0018      	movs	r0, r3
   2ae10:	46bd      	mov	sp, r7
   2ae12:	b002      	add	sp, #8
   2ae14:	bd80      	pop	{r7, pc}
   2ae16:	46c0      	nop			; (mov r8, r8)
   2ae18:	2000011c 	.word	0x2000011c

0002ae1c <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2ae1c:	b580      	push	{r7, lr}
   2ae1e:	b084      	sub	sp, #16
   2ae20:	af00      	add	r7, sp, #0
   2ae22:	60f8      	str	r0, [r7, #12]
   2ae24:	60b9      	str	r1, [r7, #8]
   2ae26:	1dfb      	adds	r3, r7, #7
   2ae28:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2ae2a:	1dfb      	adds	r3, r7, #7
   2ae2c:	781b      	ldrb	r3, [r3, #0]
   2ae2e:	68fa      	ldr	r2, [r7, #12]
   2ae30:	009b      	lsls	r3, r3, #2
   2ae32:	18d3      	adds	r3, r2, r3
   2ae34:	3304      	adds	r3, #4
   2ae36:	68ba      	ldr	r2, [r7, #8]
   2ae38:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2ae3a:	68fb      	ldr	r3, [r7, #12]
   2ae3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2ae3e:	1dfb      	adds	r3, r7, #7
   2ae40:	7819      	ldrb	r1, [r3, #0]
   2ae42:	4b05      	ldr	r3, [pc, #20]	; (2ae58 <tcc_register_callback+0x3c>)
   2ae44:	0089      	lsls	r1, r1, #2
   2ae46:	58cb      	ldr	r3, [r1, r3]
   2ae48:	431a      	orrs	r2, r3
   2ae4a:	68fb      	ldr	r3, [r7, #12]
   2ae4c:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2ae4e:	2300      	movs	r3, #0
}
   2ae50:	0018      	movs	r0, r3
   2ae52:	46bd      	mov	sp, r7
   2ae54:	b004      	add	sp, #16
   2ae56:	bd80      	pop	{r7, pc}
   2ae58:	000396b0 	.word	0x000396b0

0002ae5c <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2ae5c:	b580      	push	{r7, lr}
   2ae5e:	b082      	sub	sp, #8
   2ae60:	af00      	add	r7, sp, #0
   2ae62:	6078      	str	r0, [r7, #4]
   2ae64:	000a      	movs	r2, r1
   2ae66:	1cfb      	adds	r3, r7, #3
   2ae68:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2ae6a:	687b      	ldr	r3, [r7, #4]
   2ae6c:	681b      	ldr	r3, [r3, #0]
   2ae6e:	0018      	movs	r0, r3
   2ae70:	4b0f      	ldr	r3, [pc, #60]	; (2aeb0 <tcc_enable_callback+0x54>)
   2ae72:	4798      	blx	r3
   2ae74:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2ae76:	0018      	movs	r0, r3
   2ae78:	4b0e      	ldr	r3, [pc, #56]	; (2aeb4 <tcc_enable_callback+0x58>)
   2ae7a:	4798      	blx	r3
   2ae7c:	0003      	movs	r3, r0
   2ae7e:	0018      	movs	r0, r3
   2ae80:	4b0d      	ldr	r3, [pc, #52]	; (2aeb8 <tcc_enable_callback+0x5c>)
   2ae82:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2ae84:	687b      	ldr	r3, [r7, #4]
   2ae86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2ae88:	1cfb      	adds	r3, r7, #3
   2ae8a:	7819      	ldrb	r1, [r3, #0]
   2ae8c:	4b0b      	ldr	r3, [pc, #44]	; (2aebc <tcc_enable_callback+0x60>)
   2ae8e:	0089      	lsls	r1, r1, #2
   2ae90:	58cb      	ldr	r3, [r1, r3]
   2ae92:	431a      	orrs	r2, r3
   2ae94:	687b      	ldr	r3, [r7, #4]
   2ae96:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2ae98:	687b      	ldr	r3, [r7, #4]
   2ae9a:	681b      	ldr	r3, [r3, #0]
   2ae9c:	1cfa      	adds	r2, r7, #3
   2ae9e:	7811      	ldrb	r1, [r2, #0]
   2aea0:	4a06      	ldr	r2, [pc, #24]	; (2aebc <tcc_enable_callback+0x60>)
   2aea2:	0089      	lsls	r1, r1, #2
   2aea4:	588a      	ldr	r2, [r1, r2]
   2aea6:	629a      	str	r2, [r3, #40]	; 0x28
}
   2aea8:	46c0      	nop			; (mov r8, r8)
   2aeaa:	46bd      	mov	sp, r7
   2aeac:	b002      	add	sp, #8
   2aeae:	bd80      	pop	{r7, pc}
   2aeb0:	0002a36d 	.word	0x0002a36d
   2aeb4:	0002adfd 	.word	0x0002adfd
   2aeb8:	0002add1 	.word	0x0002add1
   2aebc:	000396b0 	.word	0x000396b0

0002aec0 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2aec0:	b580      	push	{r7, lr}
   2aec2:	af00      	add	r7, sp, #0
   2aec4:	2000      	movs	r0, #0
   2aec6:	4b02      	ldr	r3, [pc, #8]	; (2aed0 <TCC0_Handler+0x10>)
   2aec8:	4798      	blx	r3
   2aeca:	46c0      	nop			; (mov r8, r8)
   2aecc:	46bd      	mov	sp, r7
   2aece:	bd80      	pop	{r7, pc}
   2aed0:	0002aefd 	.word	0x0002aefd

0002aed4 <TCC1_Handler>:
   2aed4:	b580      	push	{r7, lr}
   2aed6:	af00      	add	r7, sp, #0
   2aed8:	2001      	movs	r0, #1
   2aeda:	4b02      	ldr	r3, [pc, #8]	; (2aee4 <TCC1_Handler+0x10>)
   2aedc:	4798      	blx	r3
   2aede:	46c0      	nop			; (mov r8, r8)
   2aee0:	46bd      	mov	sp, r7
   2aee2:	bd80      	pop	{r7, pc}
   2aee4:	0002aefd 	.word	0x0002aefd

0002aee8 <TCC2_Handler>:
   2aee8:	b580      	push	{r7, lr}
   2aeea:	af00      	add	r7, sp, #0
   2aeec:	2002      	movs	r0, #2
   2aeee:	4b02      	ldr	r3, [pc, #8]	; (2aef8 <TCC2_Handler+0x10>)
   2aef0:	4798      	blx	r3
   2aef2:	46c0      	nop			; (mov r8, r8)
   2aef4:	46bd      	mov	sp, r7
   2aef6:	bd80      	pop	{r7, pc}
   2aef8:	0002aefd 	.word	0x0002aefd

0002aefc <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2aefc:	b580      	push	{r7, lr}
   2aefe:	b086      	sub	sp, #24
   2af00:	af00      	add	r7, sp, #0
   2af02:	0002      	movs	r2, r0
   2af04:	1dfb      	adds	r3, r7, #7
   2af06:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2af08:	1dfb      	adds	r3, r7, #7
   2af0a:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2af0c:	4b18      	ldr	r3, [pc, #96]	; (2af70 <_tcc_interrupt_handler+0x74>)
   2af0e:	0092      	lsls	r2, r2, #2
   2af10:	58d3      	ldr	r3, [r2, r3]
   2af12:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2af14:	693b      	ldr	r3, [r7, #16]
   2af16:	681b      	ldr	r3, [r3, #0]
   2af18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2af1a:	693b      	ldr	r3, [r7, #16]
   2af1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2af1e:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2af20:	693b      	ldr	r3, [r7, #16]
   2af22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2af24:	4013      	ands	r3, r2
   2af26:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2af28:	2300      	movs	r3, #0
   2af2a:	617b      	str	r3, [r7, #20]
   2af2c:	e019      	b.n	2af62 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2af2e:	4b11      	ldr	r3, [pc, #68]	; (2af74 <_tcc_interrupt_handler+0x78>)
   2af30:	697a      	ldr	r2, [r7, #20]
   2af32:	0092      	lsls	r2, r2, #2
   2af34:	58d3      	ldr	r3, [r2, r3]
   2af36:	68fa      	ldr	r2, [r7, #12]
   2af38:	4013      	ands	r3, r2
   2af3a:	d00f      	beq.n	2af5c <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2af3c:	693a      	ldr	r2, [r7, #16]
   2af3e:	697b      	ldr	r3, [r7, #20]
   2af40:	009b      	lsls	r3, r3, #2
   2af42:	18d3      	adds	r3, r2, r3
   2af44:	3304      	adds	r3, #4
   2af46:	681b      	ldr	r3, [r3, #0]
   2af48:	693a      	ldr	r2, [r7, #16]
   2af4a:	0010      	movs	r0, r2
   2af4c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2af4e:	693b      	ldr	r3, [r7, #16]
   2af50:	681b      	ldr	r3, [r3, #0]
   2af52:	4a08      	ldr	r2, [pc, #32]	; (2af74 <_tcc_interrupt_handler+0x78>)
   2af54:	6979      	ldr	r1, [r7, #20]
   2af56:	0089      	lsls	r1, r1, #2
   2af58:	588a      	ldr	r2, [r1, r2]
   2af5a:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2af5c:	697b      	ldr	r3, [r7, #20]
   2af5e:	3301      	adds	r3, #1
   2af60:	617b      	str	r3, [r7, #20]
   2af62:	697b      	ldr	r3, [r7, #20]
   2af64:	2b0b      	cmp	r3, #11
   2af66:	dde2      	ble.n	2af2e <_tcc_interrupt_handler+0x32>
		}
	}
}
   2af68:	46c0      	nop			; (mov r8, r8)
   2af6a:	46bd      	mov	sp, r7
   2af6c:	b006      	add	sp, #24
   2af6e:	bd80      	pop	{r7, pc}
   2af70:	20005aa4 	.word	0x20005aa4
   2af74:	000396b0 	.word	0x000396b0

0002af78 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2af78:	b580      	push	{r7, lr}
   2af7a:	b082      	sub	sp, #8
   2af7c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2af7e:	4b2f      	ldr	r3, [pc, #188]	; (2b03c <Reset_Handler+0xc4>)
   2af80:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2af82:	4b2f      	ldr	r3, [pc, #188]	; (2b040 <Reset_Handler+0xc8>)
   2af84:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2af86:	687a      	ldr	r2, [r7, #4]
   2af88:	683b      	ldr	r3, [r7, #0]
   2af8a:	429a      	cmp	r2, r3
   2af8c:	d00c      	beq.n	2afa8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2af8e:	e007      	b.n	2afa0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2af90:	683b      	ldr	r3, [r7, #0]
   2af92:	1d1a      	adds	r2, r3, #4
   2af94:	603a      	str	r2, [r7, #0]
   2af96:	687a      	ldr	r2, [r7, #4]
   2af98:	1d11      	adds	r1, r2, #4
   2af9a:	6079      	str	r1, [r7, #4]
   2af9c:	6812      	ldr	r2, [r2, #0]
   2af9e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2afa0:	683a      	ldr	r2, [r7, #0]
   2afa2:	4b28      	ldr	r3, [pc, #160]	; (2b044 <Reset_Handler+0xcc>)
   2afa4:	429a      	cmp	r2, r3
   2afa6:	d3f3      	bcc.n	2af90 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2afa8:	4b27      	ldr	r3, [pc, #156]	; (2b048 <Reset_Handler+0xd0>)
   2afaa:	603b      	str	r3, [r7, #0]
   2afac:	e004      	b.n	2afb8 <Reset_Handler+0x40>
                *pDest++ = 0;
   2afae:	683b      	ldr	r3, [r7, #0]
   2afb0:	1d1a      	adds	r2, r3, #4
   2afb2:	603a      	str	r2, [r7, #0]
   2afb4:	2200      	movs	r2, #0
   2afb6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2afb8:	683a      	ldr	r2, [r7, #0]
   2afba:	4b24      	ldr	r3, [pc, #144]	; (2b04c <Reset_Handler+0xd4>)
   2afbc:	429a      	cmp	r2, r3
   2afbe:	d3f6      	bcc.n	2afae <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2afc0:	4b23      	ldr	r3, [pc, #140]	; (2b050 <Reset_Handler+0xd8>)
   2afc2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2afc4:	4b23      	ldr	r3, [pc, #140]	; (2b054 <Reset_Handler+0xdc>)
   2afc6:	687a      	ldr	r2, [r7, #4]
   2afc8:	21ff      	movs	r1, #255	; 0xff
   2afca:	438a      	bics	r2, r1
   2afcc:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2afce:	4a22      	ldr	r2, [pc, #136]	; (2b058 <Reset_Handler+0xe0>)
   2afd0:	2390      	movs	r3, #144	; 0x90
   2afd2:	005b      	lsls	r3, r3, #1
   2afd4:	2102      	movs	r1, #2
   2afd6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2afd8:	4a20      	ldr	r2, [pc, #128]	; (2b05c <Reset_Handler+0xe4>)
   2afda:	78d3      	ldrb	r3, [r2, #3]
   2afdc:	2103      	movs	r1, #3
   2afde:	438b      	bics	r3, r1
   2afe0:	1c19      	adds	r1, r3, #0
   2afe2:	2302      	movs	r3, #2
   2afe4:	430b      	orrs	r3, r1
   2afe6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2afe8:	4a1c      	ldr	r2, [pc, #112]	; (2b05c <Reset_Handler+0xe4>)
   2afea:	78d3      	ldrb	r3, [r2, #3]
   2afec:	210c      	movs	r1, #12
   2afee:	438b      	bics	r3, r1
   2aff0:	1c19      	adds	r1, r3, #0
   2aff2:	2308      	movs	r3, #8
   2aff4:	430b      	orrs	r3, r1
   2aff6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2aff8:	4a19      	ldr	r2, [pc, #100]	; (2b060 <Reset_Handler+0xe8>)
   2affa:	7b93      	ldrb	r3, [r2, #14]
   2affc:	2130      	movs	r1, #48	; 0x30
   2affe:	438b      	bics	r3, r1
   2b000:	1c19      	adds	r1, r3, #0
   2b002:	2320      	movs	r3, #32
   2b004:	430b      	orrs	r3, r1
   2b006:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2b008:	4a15      	ldr	r2, [pc, #84]	; (2b060 <Reset_Handler+0xe8>)
   2b00a:	7b93      	ldrb	r3, [r2, #14]
   2b00c:	210c      	movs	r1, #12
   2b00e:	438b      	bics	r3, r1
   2b010:	1c19      	adds	r1, r3, #0
   2b012:	2308      	movs	r3, #8
   2b014:	430b      	orrs	r3, r1
   2b016:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2b018:	4a11      	ldr	r2, [pc, #68]	; (2b060 <Reset_Handler+0xe8>)
   2b01a:	7b93      	ldrb	r3, [r2, #14]
   2b01c:	2103      	movs	r1, #3
   2b01e:	438b      	bics	r3, r1
   2b020:	1c19      	adds	r1, r3, #0
   2b022:	2302      	movs	r3, #2
   2b024:	430b      	orrs	r3, r1
   2b026:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2b028:	4a0e      	ldr	r2, [pc, #56]	; (2b064 <Reset_Handler+0xec>)
   2b02a:	6853      	ldr	r3, [r2, #4]
   2b02c:	2180      	movs	r1, #128	; 0x80
   2b02e:	430b      	orrs	r3, r1
   2b030:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2b032:	4b0d      	ldr	r3, [pc, #52]	; (2b068 <Reset_Handler+0xf0>)
   2b034:	4798      	blx	r3

        /* Branch to main function */
        main();
   2b036:	4b0d      	ldr	r3, [pc, #52]	; (2b06c <Reset_Handler+0xf4>)
   2b038:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2b03a:	e7fe      	b.n	2b03a <Reset_Handler+0xc2>
   2b03c:	0003a468 	.word	0x0003a468
   2b040:	20000000 	.word	0x20000000
   2b044:	200002f4 	.word	0x200002f4
   2b048:	20000300 	.word	0x20000300
   2b04c:	20005b14 	.word	0x20005b14
   2b050:	00012000 	.word	0x00012000
   2b054:	e000ed00 	.word	0xe000ed00
   2b058:	41007000 	.word	0x41007000
   2b05c:	41005000 	.word	0x41005000
   2b060:	41004800 	.word	0x41004800
   2b064:	41004000 	.word	0x41004000
   2b068:	000349b9 	.word	0x000349b9
   2b06c:	000327ad 	.word	0x000327ad

0002b070 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2b070:	b580      	push	{r7, lr}
   2b072:	af00      	add	r7, sp, #0
  __asm volatile (
   2b074:	2004      	movs	r0, #4
   2b076:	4671      	mov	r1, lr
   2b078:	4208      	tst	r0, r1
   2b07a:	d002      	beq.n	2b082 <_MSP>
   2b07c:	f3ef 8009 	mrs	r0, PSP
   2b080:	e001      	b.n	2b086 <_HALT>

0002b082 <_MSP>:
   2b082:	f3ef 8008 	mrs	r0, MSP

0002b086 <_HALT>:
   2b086:	6941      	ldr	r1, [r0, #20]
   2b088:	e004      	b.n	2b094 <HardFault_HandlerC>
   2b08a:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2b08c:	46c0      	nop			; (mov r8, r8)
   2b08e:	46bd      	mov	sp, r7
   2b090:	bd80      	pop	{r7, pc}
	...

0002b094 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2b094:	b580      	push	{r7, lr}
   2b096:	b090      	sub	sp, #64	; 0x40
   2b098:	af00      	add	r7, sp, #0
   2b09a:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2b09c:	687b      	ldr	r3, [r7, #4]
   2b09e:	681b      	ldr	r3, [r3, #0]
   2b0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2b0a2:	687b      	ldr	r3, [r7, #4]
   2b0a4:	685b      	ldr	r3, [r3, #4]
   2b0a6:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2b0a8:	687b      	ldr	r3, [r7, #4]
   2b0aa:	689b      	ldr	r3, [r3, #8]
   2b0ac:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2b0ae:	687b      	ldr	r3, [r7, #4]
   2b0b0:	68db      	ldr	r3, [r3, #12]
   2b0b2:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2b0b4:	687b      	ldr	r3, [r7, #4]
   2b0b6:	691b      	ldr	r3, [r3, #16]
   2b0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2b0ba:	687b      	ldr	r3, [r7, #4]
   2b0bc:	695b      	ldr	r3, [r3, #20]
   2b0be:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2b0c0:	687b      	ldr	r3, [r7, #4]
   2b0c2:	699b      	ldr	r3, [r3, #24]
   2b0c4:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2b0c6:	687b      	ldr	r3, [r7, #4]
   2b0c8:	69db      	ldr	r3, [r3, #28]
   2b0ca:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2b0cc:	4b0b      	ldr	r3, [pc, #44]	; (2b0fc <HardFault_HandlerC+0x68>)
   2b0ce:	681b      	ldr	r3, [r3, #0]
   2b0d0:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2b0d2:	4b0b      	ldr	r3, [pc, #44]	; (2b100 <HardFault_HandlerC+0x6c>)
   2b0d4:	681b      	ldr	r3, [r3, #0]
   2b0d6:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2b0d8:	4b0a      	ldr	r3, [pc, #40]	; (2b104 <HardFault_HandlerC+0x70>)
   2b0da:	681b      	ldr	r3, [r3, #0]
   2b0dc:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2b0de:	4b0a      	ldr	r3, [pc, #40]	; (2b108 <HardFault_HandlerC+0x74>)
   2b0e0:	681b      	ldr	r3, [r3, #0]
   2b0e2:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2b0e4:	4b09      	ldr	r3, [pc, #36]	; (2b10c <HardFault_HandlerC+0x78>)
   2b0e6:	681b      	ldr	r3, [r3, #0]
   2b0e8:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2b0ea:	4b09      	ldr	r3, [pc, #36]	; (2b110 <HardFault_HandlerC+0x7c>)
   2b0ec:	681b      	ldr	r3, [r3, #0]
   2b0ee:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2b0f0:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2b0f2:	46c0      	nop			; (mov r8, r8)
   2b0f4:	46bd      	mov	sp, r7
   2b0f6:	b010      	add	sp, #64	; 0x40
   2b0f8:	bd80      	pop	{r7, pc}
   2b0fa:	46c0      	nop			; (mov r8, r8)
   2b0fc:	e000ed28 	.word	0xe000ed28
   2b100:	e000ed2c 	.word	0xe000ed2c
   2b104:	e000ed30 	.word	0xe000ed30
   2b108:	e000ed3c 	.word	0xe000ed3c
   2b10c:	e000ed34 	.word	0xe000ed34
   2b110:	e000ed38 	.word	0xe000ed38

0002b114 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2b114:	b580      	push	{r7, lr}
   2b116:	b086      	sub	sp, #24
   2b118:	af00      	add	r7, sp, #0
   2b11a:	60f8      	str	r0, [r7, #12]
   2b11c:	60b9      	str	r1, [r7, #8]
   2b11e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2b120:	2300      	movs	r3, #0
   2b122:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2b124:	68fb      	ldr	r3, [r7, #12]
   2b126:	2b00      	cmp	r3, #0
   2b128:	d012      	beq.n	2b150 <_read+0x3c>
		return -1;
   2b12a:	2301      	movs	r3, #1
   2b12c:	425b      	negs	r3, r3
   2b12e:	e013      	b.n	2b158 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2b130:	4b0b      	ldr	r3, [pc, #44]	; (2b160 <_read+0x4c>)
   2b132:	681a      	ldr	r2, [r3, #0]
   2b134:	4b0b      	ldr	r3, [pc, #44]	; (2b164 <_read+0x50>)
   2b136:	681b      	ldr	r3, [r3, #0]
   2b138:	68b9      	ldr	r1, [r7, #8]
   2b13a:	0018      	movs	r0, r3
   2b13c:	4790      	blx	r2
		ptr++;
   2b13e:	68bb      	ldr	r3, [r7, #8]
   2b140:	3301      	adds	r3, #1
   2b142:	60bb      	str	r3, [r7, #8]
		nChars++;
   2b144:	697b      	ldr	r3, [r7, #20]
   2b146:	3301      	adds	r3, #1
   2b148:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2b14a:	687b      	ldr	r3, [r7, #4]
   2b14c:	3b01      	subs	r3, #1
   2b14e:	607b      	str	r3, [r7, #4]
   2b150:	687b      	ldr	r3, [r7, #4]
   2b152:	2b00      	cmp	r3, #0
   2b154:	dcec      	bgt.n	2b130 <_read+0x1c>
	}
	return nChars;
   2b156:	697b      	ldr	r3, [r7, #20]
}
   2b158:	0018      	movs	r0, r3
   2b15a:	46bd      	mov	sp, r7
   2b15c:	b006      	add	sp, #24
   2b15e:	bd80      	pop	{r7, pc}
   2b160:	20005ab0 	.word	0x20005ab0
   2b164:	20005ab8 	.word	0x20005ab8

0002b168 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2b168:	b580      	push	{r7, lr}
   2b16a:	b086      	sub	sp, #24
   2b16c:	af00      	add	r7, sp, #0
   2b16e:	60f8      	str	r0, [r7, #12]
   2b170:	60b9      	str	r1, [r7, #8]
   2b172:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2b174:	2300      	movs	r3, #0
   2b176:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2b178:	68fb      	ldr	r3, [r7, #12]
   2b17a:	2b01      	cmp	r3, #1
   2b17c:	d01d      	beq.n	2b1ba <_write+0x52>
   2b17e:	68fb      	ldr	r3, [r7, #12]
   2b180:	2b02      	cmp	r3, #2
   2b182:	d01a      	beq.n	2b1ba <_write+0x52>
   2b184:	68fb      	ldr	r3, [r7, #12]
   2b186:	2b03      	cmp	r3, #3
   2b188:	d017      	beq.n	2b1ba <_write+0x52>
		return -1;
   2b18a:	2301      	movs	r3, #1
   2b18c:	425b      	negs	r3, r3
   2b18e:	e018      	b.n	2b1c2 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2b190:	4b0e      	ldr	r3, [pc, #56]	; (2b1cc <_write+0x64>)
   2b192:	681a      	ldr	r2, [r3, #0]
   2b194:	4b0e      	ldr	r3, [pc, #56]	; (2b1d0 <_write+0x68>)
   2b196:	6818      	ldr	r0, [r3, #0]
   2b198:	68bb      	ldr	r3, [r7, #8]
   2b19a:	1c59      	adds	r1, r3, #1
   2b19c:	60b9      	str	r1, [r7, #8]
   2b19e:	781b      	ldrb	r3, [r3, #0]
   2b1a0:	0019      	movs	r1, r3
   2b1a2:	4790      	blx	r2
   2b1a4:	1e03      	subs	r3, r0, #0
   2b1a6:	da02      	bge.n	2b1ae <_write+0x46>
			return -1;
   2b1a8:	2301      	movs	r3, #1
   2b1aa:	425b      	negs	r3, r3
   2b1ac:	e009      	b.n	2b1c2 <_write+0x5a>
		}
		++nChars;
   2b1ae:	697b      	ldr	r3, [r7, #20]
   2b1b0:	3301      	adds	r3, #1
   2b1b2:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2b1b4:	687b      	ldr	r3, [r7, #4]
   2b1b6:	3b01      	subs	r3, #1
   2b1b8:	607b      	str	r3, [r7, #4]
   2b1ba:	687b      	ldr	r3, [r7, #4]
   2b1bc:	2b00      	cmp	r3, #0
   2b1be:	d1e7      	bne.n	2b190 <_write+0x28>
	}
	return nChars;
   2b1c0:	697b      	ldr	r3, [r7, #20]
}
   2b1c2:	0018      	movs	r0, r3
   2b1c4:	46bd      	mov	sp, r7
   2b1c6:	b006      	add	sp, #24
   2b1c8:	bd80      	pop	{r7, pc}
   2b1ca:	46c0      	nop			; (mov r8, r8)
   2b1cc:	20005ab4 	.word	0x20005ab4
   2b1d0:	20005ab8 	.word	0x20005ab8

0002b1d4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2b1d4:	b580      	push	{r7, lr}
   2b1d6:	b084      	sub	sp, #16
   2b1d8:	af00      	add	r7, sp, #0
   2b1da:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2b1dc:	4b0a      	ldr	r3, [pc, #40]	; (2b208 <_sbrk+0x34>)
   2b1de:	681b      	ldr	r3, [r3, #0]
   2b1e0:	2b00      	cmp	r3, #0
   2b1e2:	d102      	bne.n	2b1ea <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2b1e4:	4b08      	ldr	r3, [pc, #32]	; (2b208 <_sbrk+0x34>)
   2b1e6:	4a09      	ldr	r2, [pc, #36]	; (2b20c <_sbrk+0x38>)
   2b1e8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2b1ea:	4b07      	ldr	r3, [pc, #28]	; (2b208 <_sbrk+0x34>)
   2b1ec:	681b      	ldr	r3, [r3, #0]
   2b1ee:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2b1f0:	4b05      	ldr	r3, [pc, #20]	; (2b208 <_sbrk+0x34>)
   2b1f2:	681a      	ldr	r2, [r3, #0]
   2b1f4:	687b      	ldr	r3, [r7, #4]
   2b1f6:	18d2      	adds	r2, r2, r3
   2b1f8:	4b03      	ldr	r3, [pc, #12]	; (2b208 <_sbrk+0x34>)
   2b1fa:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2b1fc:	68fb      	ldr	r3, [r7, #12]
}
   2b1fe:	0018      	movs	r0, r3
   2b200:	46bd      	mov	sp, r7
   2b202:	b004      	add	sp, #16
   2b204:	bd80      	pop	{r7, pc}
   2b206:	46c0      	nop			; (mov r8, r8)
   2b208:	20004174 	.word	0x20004174
   2b20c:	20007b18 	.word	0x20007b18

0002b210 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2b210:	b580      	push	{r7, lr}
   2b212:	b082      	sub	sp, #8
   2b214:	af00      	add	r7, sp, #0
   2b216:	6078      	str	r0, [r7, #4]
	return -1;
   2b218:	2301      	movs	r3, #1
   2b21a:	425b      	negs	r3, r3
}
   2b21c:	0018      	movs	r0, r3
   2b21e:	46bd      	mov	sp, r7
   2b220:	b002      	add	sp, #8
   2b222:	bd80      	pop	{r7, pc}

0002b224 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2b224:	b580      	push	{r7, lr}
   2b226:	b082      	sub	sp, #8
   2b228:	af00      	add	r7, sp, #0
   2b22a:	6078      	str	r0, [r7, #4]
   2b22c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2b22e:	683b      	ldr	r3, [r7, #0]
   2b230:	2280      	movs	r2, #128	; 0x80
   2b232:	0192      	lsls	r2, r2, #6
   2b234:	605a      	str	r2, [r3, #4]

	return 0;
   2b236:	2300      	movs	r3, #0
}
   2b238:	0018      	movs	r0, r3
   2b23a:	46bd      	mov	sp, r7
   2b23c:	b002      	add	sp, #8
   2b23e:	bd80      	pop	{r7, pc}

0002b240 <_isatty>:

extern int _isatty(int file)
{
   2b240:	b580      	push	{r7, lr}
   2b242:	b082      	sub	sp, #8
   2b244:	af00      	add	r7, sp, #0
   2b246:	6078      	str	r0, [r7, #4]
	return 1;
   2b248:	2301      	movs	r3, #1
}
   2b24a:	0018      	movs	r0, r3
   2b24c:	46bd      	mov	sp, r7
   2b24e:	b002      	add	sp, #8
   2b250:	bd80      	pop	{r7, pc}

0002b252 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2b252:	b580      	push	{r7, lr}
   2b254:	b084      	sub	sp, #16
   2b256:	af00      	add	r7, sp, #0
   2b258:	60f8      	str	r0, [r7, #12]
   2b25a:	60b9      	str	r1, [r7, #8]
   2b25c:	607a      	str	r2, [r7, #4]
	return 0;
   2b25e:	2300      	movs	r3, #0
}
   2b260:	0018      	movs	r0, r3
   2b262:	46bd      	mov	sp, r7
   2b264:	b004      	add	sp, #16
   2b266:	bd80      	pop	{r7, pc}

0002b268 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2b268:	b580      	push	{r7, lr}
   2b26a:	b082      	sub	sp, #8
   2b26c:	af00      	add	r7, sp, #0
   2b26e:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2b270:	687b      	ldr	r3, [r7, #4]
   2b272:	2200      	movs	r2, #0
   2b274:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2b276:	687b      	ldr	r3, [r7, #4]
   2b278:	2200      	movs	r2, #0
   2b27a:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2b27c:	687b      	ldr	r3, [r7, #4]
   2b27e:	2200      	movs	r2, #0
   2b280:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2b282:	687b      	ldr	r3, [r7, #4]
   2b284:	2200      	movs	r2, #0
   2b286:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2b288:	687b      	ldr	r3, [r7, #4]
   2b28a:	2201      	movs	r2, #1
   2b28c:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2b28e:	687b      	ldr	r3, [r7, #4]
   2b290:	2201      	movs	r2, #1
   2b292:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2b294:	687b      	ldr	r3, [r7, #4]
   2b296:	22fa      	movs	r2, #250	; 0xfa
   2b298:	00d2      	lsls	r2, r2, #3
   2b29a:	80da      	strh	r2, [r3, #6]
}
   2b29c:	46c0      	nop			; (mov r8, r8)
   2b29e:	46bd      	mov	sp, r7
   2b2a0:	b002      	add	sp, #8
   2b2a2:	bd80      	pop	{r7, pc}

0002b2a4 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2b2a4:	b580      	push	{r7, lr}
   2b2a6:	b086      	sub	sp, #24
   2b2a8:	af00      	add	r7, sp, #0
   2b2aa:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2b2ac:	230c      	movs	r3, #12
   2b2ae:	18fb      	adds	r3, r7, r3
   2b2b0:	0018      	movs	r0, r3
   2b2b2:	4b23      	ldr	r3, [pc, #140]	; (2b340 <rtc_calendar_get_config_defaults+0x9c>)
   2b2b4:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2b2b6:	687b      	ldr	r3, [r7, #4]
   2b2b8:	22a0      	movs	r2, #160	; 0xa0
   2b2ba:	0112      	lsls	r2, r2, #4
   2b2bc:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2b2be:	687b      	ldr	r3, [r7, #4]
   2b2c0:	2200      	movs	r2, #0
   2b2c2:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2b2c4:	687b      	ldr	r3, [r7, #4]
   2b2c6:	2200      	movs	r2, #0
   2b2c8:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2b2ca:	687b      	ldr	r3, [r7, #4]
   2b2cc:	2200      	movs	r2, #0
   2b2ce:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2b2d0:	687b      	ldr	r3, [r7, #4]
   2b2d2:	22fa      	movs	r2, #250	; 0xfa
   2b2d4:	00d2      	lsls	r2, r2, #3
   2b2d6:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2b2d8:	2317      	movs	r3, #23
   2b2da:	18fb      	adds	r3, r7, r3
   2b2dc:	2200      	movs	r2, #0
   2b2de:	701a      	strb	r2, [r3, #0]
   2b2e0:	e025      	b.n	2b32e <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2b2e2:	2317      	movs	r3, #23
   2b2e4:	18fb      	adds	r3, r7, r3
   2b2e6:	781a      	ldrb	r2, [r3, #0]
   2b2e8:	6879      	ldr	r1, [r7, #4]
   2b2ea:	2008      	movs	r0, #8
   2b2ec:	0013      	movs	r3, r2
   2b2ee:	009b      	lsls	r3, r3, #2
   2b2f0:	189b      	adds	r3, r3, r2
   2b2f2:	005b      	lsls	r3, r3, #1
   2b2f4:	18cb      	adds	r3, r1, r3
   2b2f6:	181a      	adds	r2, r3, r0
   2b2f8:	230c      	movs	r3, #12
   2b2fa:	18fb      	adds	r3, r7, r3
   2b2fc:	0010      	movs	r0, r2
   2b2fe:	0019      	movs	r1, r3
   2b300:	2308      	movs	r3, #8
   2b302:	001a      	movs	r2, r3
   2b304:	4b0f      	ldr	r3, [pc, #60]	; (2b344 <rtc_calendar_get_config_defaults+0xa0>)
   2b306:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b308:	2317      	movs	r3, #23
   2b30a:	18fb      	adds	r3, r7, r3
   2b30c:	781a      	ldrb	r2, [r3, #0]
   2b30e:	6879      	ldr	r1, [r7, #4]
   2b310:	0013      	movs	r3, r2
   2b312:	009b      	lsls	r3, r3, #2
   2b314:	189b      	adds	r3, r3, r2
   2b316:	005b      	lsls	r3, r3, #1
   2b318:	18cb      	adds	r3, r1, r3
   2b31a:	3310      	adds	r3, #16
   2b31c:	2206      	movs	r2, #6
   2b31e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2b320:	2317      	movs	r3, #23
   2b322:	18fb      	adds	r3, r7, r3
   2b324:	781a      	ldrb	r2, [r3, #0]
   2b326:	2317      	movs	r3, #23
   2b328:	18fb      	adds	r3, r7, r3
   2b32a:	3201      	adds	r2, #1
   2b32c:	701a      	strb	r2, [r3, #0]
   2b32e:	2317      	movs	r3, #23
   2b330:	18fb      	adds	r3, r7, r3
   2b332:	781b      	ldrb	r3, [r3, #0]
   2b334:	2b00      	cmp	r3, #0
   2b336:	d0d4      	beq.n	2b2e2 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2b338:	46c0      	nop			; (mov r8, r8)
   2b33a:	46bd      	mov	sp, r7
   2b33c:	b006      	add	sp, #24
   2b33e:	bd80      	pop	{r7, pc}
   2b340:	0002b269 	.word	0x0002b269
   2b344:	00034a29 	.word	0x00034a29

0002b348 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2b348:	b580      	push	{r7, lr}
   2b34a:	b088      	sub	sp, #32
   2b34c:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2b34e:	230c      	movs	r3, #12
   2b350:	18fb      	adds	r3, r7, r3
   2b352:	0018      	movs	r0, r3
   2b354:	4b1a      	ldr	r3, [pc, #104]	; (2b3c0 <configure_rtc_calendar+0x78>)
   2b356:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2b358:	1d3b      	adds	r3, r7, #4
   2b35a:	0018      	movs	r0, r3
   2b35c:	4b19      	ldr	r3, [pc, #100]	; (2b3c4 <configure_rtc_calendar+0x7c>)
   2b35e:	4798      	blx	r3
	init_time.year   = 2014;
   2b360:	1d3b      	adds	r3, r7, #4
   2b362:	4a19      	ldr	r2, [pc, #100]	; (2b3c8 <configure_rtc_calendar+0x80>)
   2b364:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2b366:	1d3b      	adds	r3, r7, #4
   2b368:	2201      	movs	r2, #1
   2b36a:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2b36c:	1d3b      	adds	r3, r7, #4
   2b36e:	2201      	movs	r2, #1
   2b370:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2b372:	1d3b      	adds	r3, r7, #4
   2b374:	2200      	movs	r2, #0
   2b376:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2b378:	1d3b      	adds	r3, r7, #4
   2b37a:	2200      	movs	r2, #0
   2b37c:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2b37e:	1d3b      	adds	r3, r7, #4
   2b380:	2204      	movs	r2, #4
   2b382:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2b384:	230c      	movs	r3, #12
   2b386:	18fb      	adds	r3, r7, r3
   2b388:	2201      	movs	r2, #1
   2b38a:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2b38c:	230c      	movs	r3, #12
   2b38e:	18fb      	adds	r3, r7, r3
   2b390:	1d3a      	adds	r2, r7, #4
   2b392:	3308      	adds	r3, #8
   2b394:	ca03      	ldmia	r2!, {r0, r1}
   2b396:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b398:	230c      	movs	r3, #12
   2b39a:	18fb      	adds	r3, r7, r3
   2b39c:	2206      	movs	r2, #6
   2b39e:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2b3a0:	230c      	movs	r3, #12
   2b3a2:	18fa      	adds	r2, r7, r3
   2b3a4:	4909      	ldr	r1, [pc, #36]	; (2b3cc <configure_rtc_calendar+0x84>)
   2b3a6:	4b0a      	ldr	r3, [pc, #40]	; (2b3d0 <configure_rtc_calendar+0x88>)
   2b3a8:	0018      	movs	r0, r3
   2b3aa:	4b0a      	ldr	r3, [pc, #40]	; (2b3d4 <configure_rtc_calendar+0x8c>)
   2b3ac:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2b3ae:	4b08      	ldr	r3, [pc, #32]	; (2b3d0 <configure_rtc_calendar+0x88>)
   2b3b0:	0018      	movs	r0, r3
   2b3b2:	4b09      	ldr	r3, [pc, #36]	; (2b3d8 <configure_rtc_calendar+0x90>)
   2b3b4:	4798      	blx	r3
}
   2b3b6:	46c0      	nop			; (mov r8, r8)
   2b3b8:	46bd      	mov	sp, r7
   2b3ba:	b008      	add	sp, #32
   2b3bc:	bd80      	pop	{r7, pc}
   2b3be:	46c0      	nop			; (mov r8, r8)
   2b3c0:	0002b2a5 	.word	0x0002b2a5
   2b3c4:	0002b269 	.word	0x0002b269
   2b3c8:	000007de 	.word	0x000007de
   2b3cc:	40001400 	.word	0x40001400
   2b3d0:	20005abc 	.word	0x20005abc
   2b3d4:	00026e85 	.word	0x00026e85
   2b3d8:	00026bb1 	.word	0x00026bb1

0002b3dc <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2b3dc:	b590      	push	{r4, r7, lr}
   2b3de:	b085      	sub	sp, #20
   2b3e0:	af00      	add	r7, sp, #0
   2b3e2:	0002      	movs	r2, r0
   2b3e4:	1dfb      	adds	r3, r7, #7
   2b3e6:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2b3e8:	4b1a      	ldr	r3, [pc, #104]	; (2b454 <disk_initialize+0x78>)
   2b3ea:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2b3ec:	1dfb      	adds	r3, r7, #7
   2b3ee:	781b      	ldrb	r3, [r3, #0]
   2b3f0:	2b01      	cmp	r3, #1
   2b3f2:	d901      	bls.n	2b3f8 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2b3f4:	2301      	movs	r3, #1
   2b3f6:	e029      	b.n	2b44c <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2b3f8:	2300      	movs	r3, #0
   2b3fa:	60fb      	str	r3, [r7, #12]
   2b3fc:	e010      	b.n	2b420 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2b3fe:	230b      	movs	r3, #11
   2b400:	18fc      	adds	r4, r7, r3
   2b402:	1dfb      	adds	r3, r7, #7
   2b404:	781b      	ldrb	r3, [r3, #0]
   2b406:	0018      	movs	r0, r3
   2b408:	4b13      	ldr	r3, [pc, #76]	; (2b458 <disk_initialize+0x7c>)
   2b40a:	4798      	blx	r3
   2b40c:	0003      	movs	r3, r0
   2b40e:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2b410:	230b      	movs	r3, #11
   2b412:	18fb      	adds	r3, r7, r3
   2b414:	781b      	ldrb	r3, [r3, #0]
   2b416:	2b03      	cmp	r3, #3
   2b418:	d106      	bne.n	2b428 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2b41a:	68fb      	ldr	r3, [r7, #12]
   2b41c:	3301      	adds	r3, #1
   2b41e:	60fb      	str	r3, [r7, #12]
   2b420:	68fb      	ldr	r3, [r7, #12]
   2b422:	2b01      	cmp	r3, #1
   2b424:	ddeb      	ble.n	2b3fe <disk_initialize+0x22>
   2b426:	e000      	b.n	2b42a <disk_initialize+0x4e>
			break;
   2b428:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2b42a:	230b      	movs	r3, #11
   2b42c:	18fb      	adds	r3, r7, r3
   2b42e:	781b      	ldrb	r3, [r3, #0]
   2b430:	2b00      	cmp	r3, #0
   2b432:	d001      	beq.n	2b438 <disk_initialize+0x5c>
		return STA_NOINIT;
   2b434:	2301      	movs	r3, #1
   2b436:	e009      	b.n	2b44c <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2b438:	1dfb      	adds	r3, r7, #7
   2b43a:	781b      	ldrb	r3, [r3, #0]
   2b43c:	0018      	movs	r0, r3
   2b43e:	4b07      	ldr	r3, [pc, #28]	; (2b45c <disk_initialize+0x80>)
   2b440:	4798      	blx	r3
   2b442:	1e03      	subs	r3, r0, #0
   2b444:	d001      	beq.n	2b44a <disk_initialize+0x6e>
		return STA_PROTECT;
   2b446:	2304      	movs	r3, #4
   2b448:	e000      	b.n	2b44c <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2b44a:	2300      	movs	r3, #0
}
   2b44c:	0018      	movs	r0, r3
   2b44e:	46bd      	mov	sp, r7
   2b450:	b005      	add	sp, #20
   2b452:	bd90      	pop	{r4, r7, pc}
   2b454:	0002b349 	.word	0x0002b349
   2b458:	000260ad 	.word	0x000260ad
   2b45c:	00026165 	.word	0x00026165

0002b460 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2b460:	b580      	push	{r7, lr}
   2b462:	b082      	sub	sp, #8
   2b464:	af00      	add	r7, sp, #0
   2b466:	0002      	movs	r2, r0
   2b468:	1dfb      	adds	r3, r7, #7
   2b46a:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2b46c:	1dfb      	adds	r3, r7, #7
   2b46e:	781b      	ldrb	r3, [r3, #0]
   2b470:	0018      	movs	r0, r3
   2b472:	4b08      	ldr	r3, [pc, #32]	; (2b494 <disk_status+0x34>)
   2b474:	4798      	blx	r3
   2b476:	1e03      	subs	r3, r0, #0
   2b478:	d002      	beq.n	2b480 <disk_status+0x20>
   2b47a:	2b02      	cmp	r3, #2
   2b47c:	d002      	beq.n	2b484 <disk_status+0x24>
   2b47e:	e003      	b.n	2b488 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2b480:	2300      	movs	r3, #0
   2b482:	e002      	b.n	2b48a <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2b484:	2303      	movs	r3, #3
   2b486:	e000      	b.n	2b48a <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2b488:	2301      	movs	r3, #1
	}
}
   2b48a:	0018      	movs	r0, r3
   2b48c:	46bd      	mov	sp, r7
   2b48e:	b002      	add	sp, #8
   2b490:	bd80      	pop	{r7, pc}
   2b492:	46c0      	nop			; (mov r8, r8)
   2b494:	000260ad 	.word	0x000260ad

0002b498 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2b498:	b590      	push	{r4, r7, lr}
   2b49a:	b089      	sub	sp, #36	; 0x24
   2b49c:	af00      	add	r7, sp, #0
   2b49e:	60b9      	str	r1, [r7, #8]
   2b4a0:	607a      	str	r2, [r7, #4]
   2b4a2:	0019      	movs	r1, r3
   2b4a4:	230f      	movs	r3, #15
   2b4a6:	18fb      	adds	r3, r7, r3
   2b4a8:	1c02      	adds	r2, r0, #0
   2b4aa:	701a      	strb	r2, [r3, #0]
   2b4ac:	230e      	movs	r3, #14
   2b4ae:	18fb      	adds	r3, r7, r3
   2b4b0:	1c0a      	adds	r2, r1, #0
   2b4b2:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b4b4:	231b      	movs	r3, #27
   2b4b6:	18fc      	adds	r4, r7, r3
   2b4b8:	230f      	movs	r3, #15
   2b4ba:	18fb      	adds	r3, r7, r3
   2b4bc:	781b      	ldrb	r3, [r3, #0]
   2b4be:	0018      	movs	r0, r3
   2b4c0:	4b28      	ldr	r3, [pc, #160]	; (2b564 <disk_read+0xcc>)
   2b4c2:	4798      	blx	r3
   2b4c4:	0003      	movs	r3, r0
   2b4c6:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b4c8:	231b      	movs	r3, #27
   2b4ca:	18fb      	adds	r3, r7, r3
   2b4cc:	781b      	ldrb	r3, [r3, #0]
   2b4ce:	2b00      	cmp	r3, #0
   2b4d0:	d101      	bne.n	2b4d6 <disk_read+0x3e>
		return RES_ERROR;
   2b4d2:	2301      	movs	r3, #1
   2b4d4:	e042      	b.n	2b55c <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b4d6:	2314      	movs	r3, #20
   2b4d8:	18fa      	adds	r2, r7, r3
   2b4da:	230f      	movs	r3, #15
   2b4dc:	18fb      	adds	r3, r7, r3
   2b4de:	781b      	ldrb	r3, [r3, #0]
   2b4e0:	0011      	movs	r1, r2
   2b4e2:	0018      	movs	r0, r3
   2b4e4:	4b20      	ldr	r3, [pc, #128]	; (2b568 <disk_read+0xd0>)
   2b4e6:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b4e8:	230e      	movs	r3, #14
   2b4ea:	18fb      	adds	r3, r7, r3
   2b4ec:	781b      	ldrb	r3, [r3, #0]
   2b4ee:	221b      	movs	r2, #27
   2b4f0:	18ba      	adds	r2, r7, r2
   2b4f2:	7812      	ldrb	r2, [r2, #0]
   2b4f4:	4353      	muls	r3, r2
   2b4f6:	001a      	movs	r2, r3
   2b4f8:	687b      	ldr	r3, [r7, #4]
   2b4fa:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2b4fc:	697b      	ldr	r3, [r7, #20]
   2b4fe:	3301      	adds	r3, #1
   2b500:	211b      	movs	r1, #27
   2b502:	1879      	adds	r1, r7, r1
   2b504:	7809      	ldrb	r1, [r1, #0]
   2b506:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2b508:	429a      	cmp	r2, r3
   2b50a:	d901      	bls.n	2b510 <disk_read+0x78>
		return RES_PARERR;
   2b50c:	2304      	movs	r3, #4
   2b50e:	e025      	b.n	2b55c <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2b510:	2300      	movs	r3, #0
   2b512:	61fb      	str	r3, [r7, #28]
   2b514:	e01b      	b.n	2b54e <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2b516:	231b      	movs	r3, #27
   2b518:	18fb      	adds	r3, r7, r3
   2b51a:	781b      	ldrb	r3, [r3, #0]
   2b51c:	69fa      	ldr	r2, [r7, #28]
   2b51e:	435a      	muls	r2, r3
   2b520:	687b      	ldr	r3, [r7, #4]
   2b522:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2b524:	231b      	movs	r3, #27
   2b526:	18fb      	adds	r3, r7, r3
   2b528:	781b      	ldrb	r3, [r3, #0]
   2b52a:	69fa      	ldr	r2, [r7, #28]
   2b52c:	4353      	muls	r3, r2
   2b52e:	025b      	lsls	r3, r3, #9
   2b530:	68ba      	ldr	r2, [r7, #8]
   2b532:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2b534:	230f      	movs	r3, #15
   2b536:	18fb      	adds	r3, r7, r3
   2b538:	781b      	ldrb	r3, [r3, #0]
   2b53a:	0018      	movs	r0, r3
   2b53c:	4b0b      	ldr	r3, [pc, #44]	; (2b56c <disk_read+0xd4>)
   2b53e:	4798      	blx	r3
   2b540:	1e03      	subs	r3, r0, #0
   2b542:	d001      	beq.n	2b548 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2b544:	2301      	movs	r3, #1
   2b546:	e009      	b.n	2b55c <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2b548:	69fb      	ldr	r3, [r7, #28]
   2b54a:	3301      	adds	r3, #1
   2b54c:	61fb      	str	r3, [r7, #28]
   2b54e:	230e      	movs	r3, #14
   2b550:	18fb      	adds	r3, r7, r3
   2b552:	781a      	ldrb	r2, [r3, #0]
   2b554:	69fb      	ldr	r3, [r7, #28]
   2b556:	429a      	cmp	r2, r3
   2b558:	d8dd      	bhi.n	2b516 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2b55a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2b55c:	0018      	movs	r0, r3
   2b55e:	46bd      	mov	sp, r7
   2b560:	b009      	add	sp, #36	; 0x24
   2b562:	bd90      	pop	{r4, r7, pc}
   2b564:	00026139 	.word	0x00026139
   2b568:	000260ed 	.word	0x000260ed
   2b56c:	000261ad 	.word	0x000261ad

0002b570 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2b570:	b590      	push	{r4, r7, lr}
   2b572:	b089      	sub	sp, #36	; 0x24
   2b574:	af00      	add	r7, sp, #0
   2b576:	60b9      	str	r1, [r7, #8]
   2b578:	607a      	str	r2, [r7, #4]
   2b57a:	0019      	movs	r1, r3
   2b57c:	230f      	movs	r3, #15
   2b57e:	18fb      	adds	r3, r7, r3
   2b580:	1c02      	adds	r2, r0, #0
   2b582:	701a      	strb	r2, [r3, #0]
   2b584:	230e      	movs	r3, #14
   2b586:	18fb      	adds	r3, r7, r3
   2b588:	1c0a      	adds	r2, r1, #0
   2b58a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b58c:	231b      	movs	r3, #27
   2b58e:	18fc      	adds	r4, r7, r3
   2b590:	230f      	movs	r3, #15
   2b592:	18fb      	adds	r3, r7, r3
   2b594:	781b      	ldrb	r3, [r3, #0]
   2b596:	0018      	movs	r0, r3
   2b598:	4b28      	ldr	r3, [pc, #160]	; (2b63c <disk_write+0xcc>)
   2b59a:	4798      	blx	r3
   2b59c:	0003      	movs	r3, r0
   2b59e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b5a0:	231b      	movs	r3, #27
   2b5a2:	18fb      	adds	r3, r7, r3
   2b5a4:	781b      	ldrb	r3, [r3, #0]
   2b5a6:	2b00      	cmp	r3, #0
   2b5a8:	d101      	bne.n	2b5ae <disk_write+0x3e>
		return RES_ERROR;
   2b5aa:	2301      	movs	r3, #1
   2b5ac:	e042      	b.n	2b634 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b5ae:	2314      	movs	r3, #20
   2b5b0:	18fa      	adds	r2, r7, r3
   2b5b2:	230f      	movs	r3, #15
   2b5b4:	18fb      	adds	r3, r7, r3
   2b5b6:	781b      	ldrb	r3, [r3, #0]
   2b5b8:	0011      	movs	r1, r2
   2b5ba:	0018      	movs	r0, r3
   2b5bc:	4b20      	ldr	r3, [pc, #128]	; (2b640 <disk_write+0xd0>)
   2b5be:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b5c0:	230e      	movs	r3, #14
   2b5c2:	18fb      	adds	r3, r7, r3
   2b5c4:	781b      	ldrb	r3, [r3, #0]
   2b5c6:	221b      	movs	r2, #27
   2b5c8:	18ba      	adds	r2, r7, r2
   2b5ca:	7812      	ldrb	r2, [r2, #0]
   2b5cc:	4353      	muls	r3, r2
   2b5ce:	001a      	movs	r2, r3
   2b5d0:	687b      	ldr	r3, [r7, #4]
   2b5d2:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2b5d4:	697b      	ldr	r3, [r7, #20]
   2b5d6:	3301      	adds	r3, #1
   2b5d8:	211b      	movs	r1, #27
   2b5da:	1879      	adds	r1, r7, r1
   2b5dc:	7809      	ldrb	r1, [r1, #0]
   2b5de:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2b5e0:	429a      	cmp	r2, r3
   2b5e2:	d901      	bls.n	2b5e8 <disk_write+0x78>
		return RES_PARERR;
   2b5e4:	2304      	movs	r3, #4
   2b5e6:	e025      	b.n	2b634 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2b5e8:	2300      	movs	r3, #0
   2b5ea:	61fb      	str	r3, [r7, #28]
   2b5ec:	e01b      	b.n	2b626 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2b5ee:	231b      	movs	r3, #27
   2b5f0:	18fb      	adds	r3, r7, r3
   2b5f2:	781b      	ldrb	r3, [r3, #0]
   2b5f4:	69fa      	ldr	r2, [r7, #28]
   2b5f6:	435a      	muls	r2, r3
   2b5f8:	687b      	ldr	r3, [r7, #4]
   2b5fa:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2b5fc:	231b      	movs	r3, #27
   2b5fe:	18fb      	adds	r3, r7, r3
   2b600:	781b      	ldrb	r3, [r3, #0]
   2b602:	69fa      	ldr	r2, [r7, #28]
   2b604:	4353      	muls	r3, r2
   2b606:	025b      	lsls	r3, r3, #9
   2b608:	68ba      	ldr	r2, [r7, #8]
   2b60a:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2b60c:	230f      	movs	r3, #15
   2b60e:	18fb      	adds	r3, r7, r3
   2b610:	781b      	ldrb	r3, [r3, #0]
   2b612:	0018      	movs	r0, r3
   2b614:	4b0b      	ldr	r3, [pc, #44]	; (2b644 <disk_write+0xd4>)
   2b616:	4798      	blx	r3
   2b618:	1e03      	subs	r3, r0, #0
   2b61a:	d001      	beq.n	2b620 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2b61c:	2301      	movs	r3, #1
   2b61e:	e009      	b.n	2b634 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2b620:	69fb      	ldr	r3, [r7, #28]
   2b622:	3301      	adds	r3, #1
   2b624:	61fb      	str	r3, [r7, #28]
   2b626:	230e      	movs	r3, #14
   2b628:	18fb      	adds	r3, r7, r3
   2b62a:	781a      	ldrb	r2, [r3, #0]
   2b62c:	69fb      	ldr	r3, [r7, #28]
   2b62e:	429a      	cmp	r2, r3
   2b630:	d8dd      	bhi.n	2b5ee <disk_write+0x7e>
		}
	}

	return RES_OK;
   2b632:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2b634:	0018      	movs	r0, r3
   2b636:	46bd      	mov	sp, r7
   2b638:	b009      	add	sp, #36	; 0x24
   2b63a:	bd90      	pop	{r4, r7, pc}
   2b63c:	00026139 	.word	0x00026139
   2b640:	000260ed 	.word	0x000260ed
   2b644:	00026201 	.word	0x00026201

0002b648 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2b648:	b590      	push	{r4, r7, lr}
   2b64a:	b085      	sub	sp, #20
   2b64c:	af00      	add	r7, sp, #0
   2b64e:	603a      	str	r2, [r7, #0]
   2b650:	1dfb      	adds	r3, r7, #7
   2b652:	1c02      	adds	r2, r0, #0
   2b654:	701a      	strb	r2, [r3, #0]
   2b656:	1dbb      	adds	r3, r7, #6
   2b658:	1c0a      	adds	r2, r1, #0
   2b65a:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2b65c:	230f      	movs	r3, #15
   2b65e:	18fb      	adds	r3, r7, r3
   2b660:	2204      	movs	r2, #4
   2b662:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2b664:	1dbb      	adds	r3, r7, #6
   2b666:	781b      	ldrb	r3, [r3, #0]
   2b668:	2b01      	cmp	r3, #1
   2b66a:	d00f      	beq.n	2b68c <disk_ioctl+0x44>
   2b66c:	dc02      	bgt.n	2b674 <disk_ioctl+0x2c>
   2b66e:	2b00      	cmp	r3, #0
   2b670:	d044      	beq.n	2b6fc <disk_ioctl+0xb4>
   2b672:	e054      	b.n	2b71e <disk_ioctl+0xd6>
   2b674:	2b02      	cmp	r3, #2
   2b676:	d01a      	beq.n	2b6ae <disk_ioctl+0x66>
   2b678:	2b03      	cmp	r3, #3
   2b67a:	d150      	bne.n	2b71e <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2b67c:	683b      	ldr	r3, [r7, #0]
   2b67e:	2201      	movs	r2, #1
   2b680:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2b682:	230f      	movs	r3, #15
   2b684:	18fb      	adds	r3, r7, r3
   2b686:	2200      	movs	r2, #0
   2b688:	701a      	strb	r2, [r3, #0]
		break;
   2b68a:	e04c      	b.n	2b726 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2b68c:	2308      	movs	r3, #8
   2b68e:	18fa      	adds	r2, r7, r3
   2b690:	1dfb      	adds	r3, r7, #7
   2b692:	781b      	ldrb	r3, [r3, #0]
   2b694:	0011      	movs	r1, r2
   2b696:	0018      	movs	r0, r3
   2b698:	4b26      	ldr	r3, [pc, #152]	; (2b734 <disk_ioctl+0xec>)
   2b69a:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2b69c:	68bb      	ldr	r3, [r7, #8]
   2b69e:	1c5a      	adds	r2, r3, #1
   2b6a0:	683b      	ldr	r3, [r7, #0]
   2b6a2:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2b6a4:	230f      	movs	r3, #15
   2b6a6:	18fb      	adds	r3, r7, r3
   2b6a8:	2200      	movs	r2, #0
   2b6aa:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b6ac:	e03b      	b.n	2b726 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2b6ae:	230e      	movs	r3, #14
   2b6b0:	18fc      	adds	r4, r7, r3
   2b6b2:	1dfb      	adds	r3, r7, #7
   2b6b4:	781b      	ldrb	r3, [r3, #0]
   2b6b6:	0018      	movs	r0, r3
   2b6b8:	4b1f      	ldr	r3, [pc, #124]	; (2b738 <disk_ioctl+0xf0>)
   2b6ba:	4798      	blx	r3
   2b6bc:	0003      	movs	r3, r0
   2b6be:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2b6c0:	230e      	movs	r3, #14
   2b6c2:	18fb      	adds	r3, r7, r3
   2b6c4:	781b      	ldrb	r3, [r3, #0]
   2b6c6:	2b01      	cmp	r3, #1
   2b6c8:	d010      	beq.n	2b6ec <disk_ioctl+0xa4>
   2b6ca:	230e      	movs	r3, #14
   2b6cc:	18fb      	adds	r3, r7, r3
   2b6ce:	781b      	ldrb	r3, [r3, #0]
   2b6d0:	2b02      	cmp	r3, #2
   2b6d2:	d00b      	beq.n	2b6ec <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2b6d4:	230e      	movs	r3, #14
   2b6d6:	18fb      	adds	r3, r7, r3
   2b6d8:	781b      	ldrb	r3, [r3, #0]
   2b6da:	2b04      	cmp	r3, #4
   2b6dc:	d006      	beq.n	2b6ec <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2b6de:	230e      	movs	r3, #14
   2b6e0:	18fb      	adds	r3, r7, r3
   2b6e2:	781b      	ldrb	r3, [r3, #0]
   2b6e4:	2b08      	cmp	r3, #8
   2b6e6:	d001      	beq.n	2b6ec <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2b6e8:	2301      	movs	r3, #1
   2b6ea:	e01f      	b.n	2b72c <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2b6ec:	683b      	ldr	r3, [r7, #0]
   2b6ee:	2200      	movs	r2, #0
   2b6f0:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2b6f2:	230f      	movs	r3, #15
   2b6f4:	18fb      	adds	r3, r7, r3
   2b6f6:	2200      	movs	r2, #0
   2b6f8:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b6fa:	e014      	b.n	2b726 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2b6fc:	1dfb      	adds	r3, r7, #7
   2b6fe:	781b      	ldrb	r3, [r3, #0]
   2b700:	0018      	movs	r0, r3
   2b702:	4b0e      	ldr	r3, [pc, #56]	; (2b73c <disk_ioctl+0xf4>)
   2b704:	4798      	blx	r3
   2b706:	1e03      	subs	r3, r0, #0
   2b708:	d104      	bne.n	2b714 <disk_ioctl+0xcc>
			res = RES_OK;
   2b70a:	230f      	movs	r3, #15
   2b70c:	18fb      	adds	r3, r7, r3
   2b70e:	2200      	movs	r2, #0
   2b710:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2b712:	e008      	b.n	2b726 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2b714:	230f      	movs	r3, #15
   2b716:	18fb      	adds	r3, r7, r3
   2b718:	2203      	movs	r2, #3
   2b71a:	701a      	strb	r2, [r3, #0]
		break;
   2b71c:	e003      	b.n	2b726 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2b71e:	230f      	movs	r3, #15
   2b720:	18fb      	adds	r3, r7, r3
   2b722:	2204      	movs	r2, #4
   2b724:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b726:	230f      	movs	r3, #15
   2b728:	18fb      	adds	r3, r7, r3
   2b72a:	781b      	ldrb	r3, [r3, #0]
}
   2b72c:	0018      	movs	r0, r3
   2b72e:	46bd      	mov	sp, r7
   2b730:	b005      	add	sp, #20
   2b732:	bd90      	pop	{r4, r7, pc}
   2b734:	000260ed 	.word	0x000260ed
   2b738:	00026139 	.word	0x00026139
   2b73c:	000260ad 	.word	0x000260ad

0002b740 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2b740:	b580      	push	{r7, lr}
   2b742:	b084      	sub	sp, #16
   2b744:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2b746:	1d3a      	adds	r2, r7, #4
   2b748:	4b12      	ldr	r3, [pc, #72]	; (2b794 <get_fattime+0x54>)
   2b74a:	0011      	movs	r1, r2
   2b74c:	0018      	movs	r0, r3
   2b74e:	4b12      	ldr	r3, [pc, #72]	; (2b798 <get_fattime+0x58>)
   2b750:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2b752:	1d3b      	adds	r3, r7, #4
   2b754:	88db      	ldrh	r3, [r3, #6]
   2b756:	4a11      	ldr	r2, [pc, #68]	; (2b79c <get_fattime+0x5c>)
   2b758:	4694      	mov	ip, r2
   2b75a:	4463      	add	r3, ip
   2b75c:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2b75e:	1d3b      	adds	r3, r7, #4
   2b760:	795b      	ldrb	r3, [r3, #5]
   2b762:	055b      	lsls	r3, r3, #21
   2b764:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2b766:	1d3b      	adds	r3, r7, #4
   2b768:	791b      	ldrb	r3, [r3, #4]
   2b76a:	041b      	lsls	r3, r3, #16
   2b76c:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2b76e:	1d3b      	adds	r3, r7, #4
   2b770:	789b      	ldrb	r3, [r3, #2]
   2b772:	02db      	lsls	r3, r3, #11
   2b774:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2b776:	1d3b      	adds	r3, r7, #4
   2b778:	785b      	ldrb	r3, [r3, #1]
   2b77a:	015b      	lsls	r3, r3, #5
   2b77c:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2b77e:	1d3a      	adds	r2, r7, #4
   2b780:	7812      	ldrb	r2, [r2, #0]
   2b782:	0852      	lsrs	r2, r2, #1
   2b784:	b2d2      	uxtb	r2, r2
   2b786:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2b788:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2b78a:	68fb      	ldr	r3, [r7, #12]
}
   2b78c:	0018      	movs	r0, r3
   2b78e:	46bd      	mov	sp, r7
   2b790:	b004      	add	sp, #16
   2b792:	bd80      	pop	{r7, pc}
   2b794:	20005abc 	.word	0x20005abc
   2b798:	00026f19 	.word	0x00026f19
   2b79c:	fffff844 	.word	0xfffff844

0002b7a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2b7a0:	b580      	push	{r7, lr}
   2b7a2:	b086      	sub	sp, #24
   2b7a4:	af00      	add	r7, sp, #0
   2b7a6:	60f8      	str	r0, [r7, #12]
   2b7a8:	60b9      	str	r1, [r7, #8]
   2b7aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b7ac:	68fb      	ldr	r3, [r7, #12]
   2b7ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2b7b0:	68bb      	ldr	r3, [r7, #8]
   2b7b2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2b7b4:	e007      	b.n	2b7c6 <mem_cpy+0x26>
		*d++ = *s++;
   2b7b6:	697b      	ldr	r3, [r7, #20]
   2b7b8:	1c5a      	adds	r2, r3, #1
   2b7ba:	617a      	str	r2, [r7, #20]
   2b7bc:	693a      	ldr	r2, [r7, #16]
   2b7be:	1c51      	adds	r1, r2, #1
   2b7c0:	6139      	str	r1, [r7, #16]
   2b7c2:	7812      	ldrb	r2, [r2, #0]
   2b7c4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b7c6:	687b      	ldr	r3, [r7, #4]
   2b7c8:	1e5a      	subs	r2, r3, #1
   2b7ca:	607a      	str	r2, [r7, #4]
   2b7cc:	2b00      	cmp	r3, #0
   2b7ce:	d1f2      	bne.n	2b7b6 <mem_cpy+0x16>
}
   2b7d0:	46c0      	nop			; (mov r8, r8)
   2b7d2:	46bd      	mov	sp, r7
   2b7d4:	b006      	add	sp, #24
   2b7d6:	bd80      	pop	{r7, pc}

0002b7d8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2b7d8:	b580      	push	{r7, lr}
   2b7da:	b086      	sub	sp, #24
   2b7dc:	af00      	add	r7, sp, #0
   2b7de:	60f8      	str	r0, [r7, #12]
   2b7e0:	60b9      	str	r1, [r7, #8]
   2b7e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b7e4:	68fb      	ldr	r3, [r7, #12]
   2b7e6:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2b7e8:	e005      	b.n	2b7f6 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2b7ea:	697b      	ldr	r3, [r7, #20]
   2b7ec:	1c5a      	adds	r2, r3, #1
   2b7ee:	617a      	str	r2, [r7, #20]
   2b7f0:	68ba      	ldr	r2, [r7, #8]
   2b7f2:	b2d2      	uxtb	r2, r2
   2b7f4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b7f6:	687b      	ldr	r3, [r7, #4]
   2b7f8:	1e5a      	subs	r2, r3, #1
   2b7fa:	607a      	str	r2, [r7, #4]
   2b7fc:	2b00      	cmp	r3, #0
   2b7fe:	d1f4      	bne.n	2b7ea <mem_set+0x12>
}
   2b800:	46c0      	nop			; (mov r8, r8)
   2b802:	46bd      	mov	sp, r7
   2b804:	b006      	add	sp, #24
   2b806:	bd80      	pop	{r7, pc}

0002b808 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2b808:	b580      	push	{r7, lr}
   2b80a:	b088      	sub	sp, #32
   2b80c:	af00      	add	r7, sp, #0
   2b80e:	60f8      	str	r0, [r7, #12]
   2b810:	60b9      	str	r1, [r7, #8]
   2b812:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2b814:	68fb      	ldr	r3, [r7, #12]
   2b816:	61fb      	str	r3, [r7, #28]
   2b818:	68bb      	ldr	r3, [r7, #8]
   2b81a:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2b81c:	2300      	movs	r3, #0
   2b81e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2b820:	46c0      	nop			; (mov r8, r8)
   2b822:	687b      	ldr	r3, [r7, #4]
   2b824:	1e5a      	subs	r2, r3, #1
   2b826:	607a      	str	r2, [r7, #4]
   2b828:	2b00      	cmp	r3, #0
   2b82a:	d00d      	beq.n	2b848 <mem_cmp+0x40>
   2b82c:	69fb      	ldr	r3, [r7, #28]
   2b82e:	1c5a      	adds	r2, r3, #1
   2b830:	61fa      	str	r2, [r7, #28]
   2b832:	781b      	ldrb	r3, [r3, #0]
   2b834:	0019      	movs	r1, r3
   2b836:	69bb      	ldr	r3, [r7, #24]
   2b838:	1c5a      	adds	r2, r3, #1
   2b83a:	61ba      	str	r2, [r7, #24]
   2b83c:	781b      	ldrb	r3, [r3, #0]
   2b83e:	1acb      	subs	r3, r1, r3
   2b840:	617b      	str	r3, [r7, #20]
   2b842:	697b      	ldr	r3, [r7, #20]
   2b844:	2b00      	cmp	r3, #0
   2b846:	d0ec      	beq.n	2b822 <mem_cmp+0x1a>
	return r;
   2b848:	697b      	ldr	r3, [r7, #20]
}
   2b84a:	0018      	movs	r0, r3
   2b84c:	46bd      	mov	sp, r7
   2b84e:	b008      	add	sp, #32
   2b850:	bd80      	pop	{r7, pc}

0002b852 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2b852:	b580      	push	{r7, lr}
   2b854:	b082      	sub	sp, #8
   2b856:	af00      	add	r7, sp, #0
   2b858:	6078      	str	r0, [r7, #4]
   2b85a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2b85c:	e002      	b.n	2b864 <chk_chr+0x12>
   2b85e:	687b      	ldr	r3, [r7, #4]
   2b860:	3301      	adds	r3, #1
   2b862:	607b      	str	r3, [r7, #4]
   2b864:	687b      	ldr	r3, [r7, #4]
   2b866:	781b      	ldrb	r3, [r3, #0]
   2b868:	2b00      	cmp	r3, #0
   2b86a:	d005      	beq.n	2b878 <chk_chr+0x26>
   2b86c:	687b      	ldr	r3, [r7, #4]
   2b86e:	781b      	ldrb	r3, [r3, #0]
   2b870:	001a      	movs	r2, r3
   2b872:	683b      	ldr	r3, [r7, #0]
   2b874:	429a      	cmp	r2, r3
   2b876:	d1f2      	bne.n	2b85e <chk_chr+0xc>
	return *str;
   2b878:	687b      	ldr	r3, [r7, #4]
   2b87a:	781b      	ldrb	r3, [r3, #0]
}
   2b87c:	0018      	movs	r0, r3
   2b87e:	46bd      	mov	sp, r7
   2b880:	b002      	add	sp, #8
   2b882:	bd80      	pop	{r7, pc}

0002b884 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2b884:	b590      	push	{r4, r7, lr}
   2b886:	b085      	sub	sp, #20
   2b888:	af00      	add	r7, sp, #0
   2b88a:	6078      	str	r0, [r7, #4]
   2b88c:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2b88e:	687b      	ldr	r3, [r7, #4]
   2b890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b892:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2b894:	68fa      	ldr	r2, [r7, #12]
   2b896:	683b      	ldr	r3, [r7, #0]
   2b898:	429a      	cmp	r2, r3
   2b89a:	d04e      	beq.n	2b93a <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2b89c:	687b      	ldr	r3, [r7, #4]
   2b89e:	791b      	ldrb	r3, [r3, #4]
   2b8a0:	2b00      	cmp	r3, #0
   2b8a2:	d037      	beq.n	2b914 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2b8a4:	687b      	ldr	r3, [r7, #4]
   2b8a6:	7858      	ldrb	r0, [r3, #1]
   2b8a8:	687b      	ldr	r3, [r7, #4]
   2b8aa:	3330      	adds	r3, #48	; 0x30
   2b8ac:	0019      	movs	r1, r3
   2b8ae:	68fa      	ldr	r2, [r7, #12]
   2b8b0:	2301      	movs	r3, #1
   2b8b2:	4c24      	ldr	r4, [pc, #144]	; (2b944 <move_window+0xc0>)
   2b8b4:	47a0      	blx	r4
   2b8b6:	1e03      	subs	r3, r0, #0
   2b8b8:	d001      	beq.n	2b8be <move_window+0x3a>
				return FR_DISK_ERR;
   2b8ba:	2301      	movs	r3, #1
   2b8bc:	e03e      	b.n	2b93c <move_window+0xb8>
			fs->wflag = 0;
   2b8be:	687b      	ldr	r3, [r7, #4]
   2b8c0:	2200      	movs	r2, #0
   2b8c2:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2b8c4:	687b      	ldr	r3, [r7, #4]
   2b8c6:	6a1a      	ldr	r2, [r3, #32]
   2b8c8:	687b      	ldr	r3, [r7, #4]
   2b8ca:	69db      	ldr	r3, [r3, #28]
   2b8cc:	18d2      	adds	r2, r2, r3
   2b8ce:	68fb      	ldr	r3, [r7, #12]
   2b8d0:	429a      	cmp	r2, r3
   2b8d2:	d91f      	bls.n	2b914 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b8d4:	230b      	movs	r3, #11
   2b8d6:	18fb      	adds	r3, r7, r3
   2b8d8:	687a      	ldr	r2, [r7, #4]
   2b8da:	78d2      	ldrb	r2, [r2, #3]
   2b8dc:	701a      	strb	r2, [r3, #0]
   2b8de:	e014      	b.n	2b90a <move_window+0x86>
					wsect += fs->fsize;
   2b8e0:	687b      	ldr	r3, [r7, #4]
   2b8e2:	69db      	ldr	r3, [r3, #28]
   2b8e4:	68fa      	ldr	r2, [r7, #12]
   2b8e6:	18d3      	adds	r3, r2, r3
   2b8e8:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2b8ea:	687b      	ldr	r3, [r7, #4]
   2b8ec:	7858      	ldrb	r0, [r3, #1]
   2b8ee:	687b      	ldr	r3, [r7, #4]
   2b8f0:	3330      	adds	r3, #48	; 0x30
   2b8f2:	0019      	movs	r1, r3
   2b8f4:	68fa      	ldr	r2, [r7, #12]
   2b8f6:	2301      	movs	r3, #1
   2b8f8:	4c12      	ldr	r4, [pc, #72]	; (2b944 <move_window+0xc0>)
   2b8fa:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b8fc:	230b      	movs	r3, #11
   2b8fe:	18fb      	adds	r3, r7, r3
   2b900:	781a      	ldrb	r2, [r3, #0]
   2b902:	230b      	movs	r3, #11
   2b904:	18fb      	adds	r3, r7, r3
   2b906:	3a01      	subs	r2, #1
   2b908:	701a      	strb	r2, [r3, #0]
   2b90a:	230b      	movs	r3, #11
   2b90c:	18fb      	adds	r3, r7, r3
   2b90e:	781b      	ldrb	r3, [r3, #0]
   2b910:	2b01      	cmp	r3, #1
   2b912:	d8e5      	bhi.n	2b8e0 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2b914:	683b      	ldr	r3, [r7, #0]
   2b916:	2b00      	cmp	r3, #0
   2b918:	d00f      	beq.n	2b93a <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2b91a:	687b      	ldr	r3, [r7, #4]
   2b91c:	7858      	ldrb	r0, [r3, #1]
   2b91e:	687b      	ldr	r3, [r7, #4]
   2b920:	3330      	adds	r3, #48	; 0x30
   2b922:	0019      	movs	r1, r3
   2b924:	683a      	ldr	r2, [r7, #0]
   2b926:	2301      	movs	r3, #1
   2b928:	4c07      	ldr	r4, [pc, #28]	; (2b948 <move_window+0xc4>)
   2b92a:	47a0      	blx	r4
   2b92c:	1e03      	subs	r3, r0, #0
   2b92e:	d001      	beq.n	2b934 <move_window+0xb0>
				return FR_DISK_ERR;
   2b930:	2301      	movs	r3, #1
   2b932:	e003      	b.n	2b93c <move_window+0xb8>
			fs->winsect = sector;
   2b934:	687b      	ldr	r3, [r7, #4]
   2b936:	683a      	ldr	r2, [r7, #0]
   2b938:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2b93a:	2300      	movs	r3, #0
}
   2b93c:	0018      	movs	r0, r3
   2b93e:	46bd      	mov	sp, r7
   2b940:	b005      	add	sp, #20
   2b942:	bd90      	pop	{r4, r7, pc}
   2b944:	0002b571 	.word	0x0002b571
   2b948:	0002b499 	.word	0x0002b499

0002b94c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2b94c:	b590      	push	{r4, r7, lr}
   2b94e:	b085      	sub	sp, #20
   2b950:	af00      	add	r7, sp, #0
   2b952:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2b954:	230f      	movs	r3, #15
   2b956:	18fc      	adds	r4, r7, r3
   2b958:	687b      	ldr	r3, [r7, #4]
   2b95a:	2100      	movs	r1, #0
   2b95c:	0018      	movs	r0, r3
   2b95e:	4b52      	ldr	r3, [pc, #328]	; (2baa8 <sync+0x15c>)
   2b960:	4798      	blx	r3
   2b962:	0003      	movs	r3, r0
   2b964:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2b966:	230f      	movs	r3, #15
   2b968:	18fb      	adds	r3, r7, r3
   2b96a:	781b      	ldrb	r3, [r3, #0]
   2b96c:	2b00      	cmp	r3, #0
   2b96e:	d000      	beq.n	2b972 <sync+0x26>
   2b970:	e093      	b.n	2ba9a <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2b972:	687b      	ldr	r3, [r7, #4]
   2b974:	781b      	ldrb	r3, [r3, #0]
   2b976:	2b03      	cmp	r3, #3
   2b978:	d000      	beq.n	2b97c <sync+0x30>
   2b97a:	e081      	b.n	2ba80 <sync+0x134>
   2b97c:	687b      	ldr	r3, [r7, #4]
   2b97e:	795b      	ldrb	r3, [r3, #5]
   2b980:	2b00      	cmp	r3, #0
   2b982:	d07d      	beq.n	2ba80 <sync+0x134>
			fs->winsect = 0;
   2b984:	687b      	ldr	r3, [r7, #4]
   2b986:	2200      	movs	r2, #0
   2b988:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2b98a:	687b      	ldr	r3, [r7, #4]
   2b98c:	3330      	adds	r3, #48	; 0x30
   2b98e:	0018      	movs	r0, r3
   2b990:	2380      	movs	r3, #128	; 0x80
   2b992:	009b      	lsls	r3, r3, #2
   2b994:	001a      	movs	r2, r3
   2b996:	2100      	movs	r1, #0
   2b998:	4b44      	ldr	r3, [pc, #272]	; (2baac <sync+0x160>)
   2b99a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2b99c:	687b      	ldr	r3, [r7, #4]
   2b99e:	4a44      	ldr	r2, [pc, #272]	; (2bab0 <sync+0x164>)
   2b9a0:	2155      	movs	r1, #85	; 0x55
   2b9a2:	5499      	strb	r1, [r3, r2]
   2b9a4:	687b      	ldr	r3, [r7, #4]
   2b9a6:	4a43      	ldr	r2, [pc, #268]	; (2bab4 <sync+0x168>)
   2b9a8:	21aa      	movs	r1, #170	; 0xaa
   2b9aa:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2b9ac:	687b      	ldr	r3, [r7, #4]
   2b9ae:	2230      	movs	r2, #48	; 0x30
   2b9b0:	2152      	movs	r1, #82	; 0x52
   2b9b2:	5499      	strb	r1, [r3, r2]
   2b9b4:	687b      	ldr	r3, [r7, #4]
   2b9b6:	2231      	movs	r2, #49	; 0x31
   2b9b8:	2152      	movs	r1, #82	; 0x52
   2b9ba:	5499      	strb	r1, [r3, r2]
   2b9bc:	687b      	ldr	r3, [r7, #4]
   2b9be:	2232      	movs	r2, #50	; 0x32
   2b9c0:	2161      	movs	r1, #97	; 0x61
   2b9c2:	5499      	strb	r1, [r3, r2]
   2b9c4:	687b      	ldr	r3, [r7, #4]
   2b9c6:	2233      	movs	r2, #51	; 0x33
   2b9c8:	2141      	movs	r1, #65	; 0x41
   2b9ca:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2b9cc:	687a      	ldr	r2, [r7, #4]
   2b9ce:	2385      	movs	r3, #133	; 0x85
   2b9d0:	009b      	lsls	r3, r3, #2
   2b9d2:	2172      	movs	r1, #114	; 0x72
   2b9d4:	54d1      	strb	r1, [r2, r3]
   2b9d6:	687b      	ldr	r3, [r7, #4]
   2b9d8:	4a37      	ldr	r2, [pc, #220]	; (2bab8 <sync+0x16c>)
   2b9da:	2172      	movs	r1, #114	; 0x72
   2b9dc:	5499      	strb	r1, [r3, r2]
   2b9de:	687b      	ldr	r3, [r7, #4]
   2b9e0:	4a36      	ldr	r2, [pc, #216]	; (2babc <sync+0x170>)
   2b9e2:	2141      	movs	r1, #65	; 0x41
   2b9e4:	5499      	strb	r1, [r3, r2]
   2b9e6:	687b      	ldr	r3, [r7, #4]
   2b9e8:	4a35      	ldr	r2, [pc, #212]	; (2bac0 <sync+0x174>)
   2b9ea:	2161      	movs	r1, #97	; 0x61
   2b9ec:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2b9ee:	687b      	ldr	r3, [r7, #4]
   2b9f0:	691b      	ldr	r3, [r3, #16]
   2b9f2:	b2d9      	uxtb	r1, r3
   2b9f4:	687a      	ldr	r2, [r7, #4]
   2b9f6:	2386      	movs	r3, #134	; 0x86
   2b9f8:	009b      	lsls	r3, r3, #2
   2b9fa:	54d1      	strb	r1, [r2, r3]
   2b9fc:	687b      	ldr	r3, [r7, #4]
   2b9fe:	691b      	ldr	r3, [r3, #16]
   2ba00:	b29b      	uxth	r3, r3
   2ba02:	0a1b      	lsrs	r3, r3, #8
   2ba04:	b29b      	uxth	r3, r3
   2ba06:	b2d9      	uxtb	r1, r3
   2ba08:	687b      	ldr	r3, [r7, #4]
   2ba0a:	4a2e      	ldr	r2, [pc, #184]	; (2bac4 <sync+0x178>)
   2ba0c:	5499      	strb	r1, [r3, r2]
   2ba0e:	687b      	ldr	r3, [r7, #4]
   2ba10:	691b      	ldr	r3, [r3, #16]
   2ba12:	0c1b      	lsrs	r3, r3, #16
   2ba14:	b2d9      	uxtb	r1, r3
   2ba16:	687b      	ldr	r3, [r7, #4]
   2ba18:	4a2b      	ldr	r2, [pc, #172]	; (2bac8 <sync+0x17c>)
   2ba1a:	5499      	strb	r1, [r3, r2]
   2ba1c:	687b      	ldr	r3, [r7, #4]
   2ba1e:	691b      	ldr	r3, [r3, #16]
   2ba20:	0e1b      	lsrs	r3, r3, #24
   2ba22:	b2d9      	uxtb	r1, r3
   2ba24:	687b      	ldr	r3, [r7, #4]
   2ba26:	4a29      	ldr	r2, [pc, #164]	; (2bacc <sync+0x180>)
   2ba28:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2ba2a:	687b      	ldr	r3, [r7, #4]
   2ba2c:	68db      	ldr	r3, [r3, #12]
   2ba2e:	b2d9      	uxtb	r1, r3
   2ba30:	687a      	ldr	r2, [r7, #4]
   2ba32:	2387      	movs	r3, #135	; 0x87
   2ba34:	009b      	lsls	r3, r3, #2
   2ba36:	54d1      	strb	r1, [r2, r3]
   2ba38:	687b      	ldr	r3, [r7, #4]
   2ba3a:	68db      	ldr	r3, [r3, #12]
   2ba3c:	b29b      	uxth	r3, r3
   2ba3e:	0a1b      	lsrs	r3, r3, #8
   2ba40:	b29b      	uxth	r3, r3
   2ba42:	b2d9      	uxtb	r1, r3
   2ba44:	687b      	ldr	r3, [r7, #4]
   2ba46:	4a22      	ldr	r2, [pc, #136]	; (2bad0 <sync+0x184>)
   2ba48:	5499      	strb	r1, [r3, r2]
   2ba4a:	687b      	ldr	r3, [r7, #4]
   2ba4c:	68db      	ldr	r3, [r3, #12]
   2ba4e:	0c1b      	lsrs	r3, r3, #16
   2ba50:	b2d9      	uxtb	r1, r3
   2ba52:	687b      	ldr	r3, [r7, #4]
   2ba54:	4a1f      	ldr	r2, [pc, #124]	; (2bad4 <sync+0x188>)
   2ba56:	5499      	strb	r1, [r3, r2]
   2ba58:	687b      	ldr	r3, [r7, #4]
   2ba5a:	68db      	ldr	r3, [r3, #12]
   2ba5c:	0e1b      	lsrs	r3, r3, #24
   2ba5e:	b2d9      	uxtb	r1, r3
   2ba60:	687b      	ldr	r3, [r7, #4]
   2ba62:	4a1d      	ldr	r2, [pc, #116]	; (2bad8 <sync+0x18c>)
   2ba64:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2ba66:	687b      	ldr	r3, [r7, #4]
   2ba68:	7858      	ldrb	r0, [r3, #1]
   2ba6a:	687b      	ldr	r3, [r7, #4]
   2ba6c:	3330      	adds	r3, #48	; 0x30
   2ba6e:	0019      	movs	r1, r3
   2ba70:	687b      	ldr	r3, [r7, #4]
   2ba72:	695a      	ldr	r2, [r3, #20]
   2ba74:	2301      	movs	r3, #1
   2ba76:	4c19      	ldr	r4, [pc, #100]	; (2badc <sync+0x190>)
   2ba78:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2ba7a:	687b      	ldr	r3, [r7, #4]
   2ba7c:	2200      	movs	r2, #0
   2ba7e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2ba80:	687b      	ldr	r3, [r7, #4]
   2ba82:	785b      	ldrb	r3, [r3, #1]
   2ba84:	2200      	movs	r2, #0
   2ba86:	2100      	movs	r1, #0
   2ba88:	0018      	movs	r0, r3
   2ba8a:	4b15      	ldr	r3, [pc, #84]	; (2bae0 <sync+0x194>)
   2ba8c:	4798      	blx	r3
   2ba8e:	1e03      	subs	r3, r0, #0
   2ba90:	d003      	beq.n	2ba9a <sync+0x14e>
			res = FR_DISK_ERR;
   2ba92:	230f      	movs	r3, #15
   2ba94:	18fb      	adds	r3, r7, r3
   2ba96:	2201      	movs	r2, #1
   2ba98:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2ba9a:	230f      	movs	r3, #15
   2ba9c:	18fb      	adds	r3, r7, r3
   2ba9e:	781b      	ldrb	r3, [r3, #0]
}
   2baa0:	0018      	movs	r0, r3
   2baa2:	46bd      	mov	sp, r7
   2baa4:	b005      	add	sp, #20
   2baa6:	bd90      	pop	{r4, r7, pc}
   2baa8:	0002b885 	.word	0x0002b885
   2baac:	0002b7d9 	.word	0x0002b7d9
   2bab0:	0000022e 	.word	0x0000022e
   2bab4:	0000022f 	.word	0x0000022f
   2bab8:	00000215 	.word	0x00000215
   2babc:	00000216 	.word	0x00000216
   2bac0:	00000217 	.word	0x00000217
   2bac4:	00000219 	.word	0x00000219
   2bac8:	0000021a 	.word	0x0000021a
   2bacc:	0000021b 	.word	0x0000021b
   2bad0:	0000021d 	.word	0x0000021d
   2bad4:	0000021e 	.word	0x0000021e
   2bad8:	0000021f 	.word	0x0000021f
   2badc:	0002b571 	.word	0x0002b571
   2bae0:	0002b649 	.word	0x0002b649

0002bae4 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2bae4:	b580      	push	{r7, lr}
   2bae6:	b082      	sub	sp, #8
   2bae8:	af00      	add	r7, sp, #0
   2baea:	6078      	str	r0, [r7, #4]
   2baec:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2baee:	683b      	ldr	r3, [r7, #0]
   2baf0:	3b02      	subs	r3, #2
   2baf2:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2baf4:	687b      	ldr	r3, [r7, #4]
   2baf6:	699b      	ldr	r3, [r3, #24]
   2baf8:	1e9a      	subs	r2, r3, #2
   2bafa:	683b      	ldr	r3, [r7, #0]
   2bafc:	429a      	cmp	r2, r3
   2bafe:	d801      	bhi.n	2bb04 <clust2sect+0x20>
   2bb00:	2300      	movs	r3, #0
   2bb02:	e007      	b.n	2bb14 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2bb04:	687b      	ldr	r3, [r7, #4]
   2bb06:	789b      	ldrb	r3, [r3, #2]
   2bb08:	001a      	movs	r2, r3
   2bb0a:	683b      	ldr	r3, [r7, #0]
   2bb0c:	435a      	muls	r2, r3
   2bb0e:	687b      	ldr	r3, [r7, #4]
   2bb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2bb12:	18d3      	adds	r3, r2, r3
}
   2bb14:	0018      	movs	r0, r3
   2bb16:	46bd      	mov	sp, r7
   2bb18:	b002      	add	sp, #8
   2bb1a:	bd80      	pop	{r7, pc}

0002bb1c <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2bb1c:	b580      	push	{r7, lr}
   2bb1e:	b086      	sub	sp, #24
   2bb20:	af00      	add	r7, sp, #0
   2bb22:	6078      	str	r0, [r7, #4]
   2bb24:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2bb26:	683b      	ldr	r3, [r7, #0]
   2bb28:	2b01      	cmp	r3, #1
   2bb2a:	d904      	bls.n	2bb36 <get_fat+0x1a>
   2bb2c:	687b      	ldr	r3, [r7, #4]
   2bb2e:	699a      	ldr	r2, [r3, #24]
   2bb30:	683b      	ldr	r3, [r7, #0]
   2bb32:	429a      	cmp	r2, r3
   2bb34:	d801      	bhi.n	2bb3a <get_fat+0x1e>
		return 1;
   2bb36:	2301      	movs	r3, #1
   2bb38:	e09f      	b.n	2bc7a <get_fat+0x15e>

	switch (fs->fs_type) {
   2bb3a:	687b      	ldr	r3, [r7, #4]
   2bb3c:	781b      	ldrb	r3, [r3, #0]
   2bb3e:	2b02      	cmp	r3, #2
   2bb40:	d048      	beq.n	2bbd4 <get_fat+0xb8>
   2bb42:	2b03      	cmp	r3, #3
   2bb44:	d067      	beq.n	2bc16 <get_fat+0xfa>
   2bb46:	2b01      	cmp	r3, #1
   2bb48:	d000      	beq.n	2bb4c <get_fat+0x30>
   2bb4a:	e094      	b.n	2bc76 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2bb4c:	683b      	ldr	r3, [r7, #0]
   2bb4e:	617b      	str	r3, [r7, #20]
   2bb50:	697b      	ldr	r3, [r7, #20]
   2bb52:	085b      	lsrs	r3, r3, #1
   2bb54:	697a      	ldr	r2, [r7, #20]
   2bb56:	18d3      	adds	r3, r2, r3
   2bb58:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2bb5a:	687b      	ldr	r3, [r7, #4]
   2bb5c:	6a1a      	ldr	r2, [r3, #32]
   2bb5e:	697b      	ldr	r3, [r7, #20]
   2bb60:	0a5b      	lsrs	r3, r3, #9
   2bb62:	18d2      	adds	r2, r2, r3
   2bb64:	687b      	ldr	r3, [r7, #4]
   2bb66:	0011      	movs	r1, r2
   2bb68:	0018      	movs	r0, r3
   2bb6a:	4b46      	ldr	r3, [pc, #280]	; (2bc84 <get_fat+0x168>)
   2bb6c:	4798      	blx	r3
   2bb6e:	1e03      	subs	r3, r0, #0
   2bb70:	d000      	beq.n	2bb74 <get_fat+0x58>
   2bb72:	e079      	b.n	2bc68 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2bb74:	697b      	ldr	r3, [r7, #20]
   2bb76:	05db      	lsls	r3, r3, #23
   2bb78:	0ddb      	lsrs	r3, r3, #23
   2bb7a:	687a      	ldr	r2, [r7, #4]
   2bb7c:	2130      	movs	r1, #48	; 0x30
   2bb7e:	18d3      	adds	r3, r2, r3
   2bb80:	185b      	adds	r3, r3, r1
   2bb82:	781b      	ldrb	r3, [r3, #0]
   2bb84:	613b      	str	r3, [r7, #16]
   2bb86:	697b      	ldr	r3, [r7, #20]
   2bb88:	3301      	adds	r3, #1
   2bb8a:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2bb8c:	687b      	ldr	r3, [r7, #4]
   2bb8e:	6a1a      	ldr	r2, [r3, #32]
   2bb90:	697b      	ldr	r3, [r7, #20]
   2bb92:	0a5b      	lsrs	r3, r3, #9
   2bb94:	18d2      	adds	r2, r2, r3
   2bb96:	687b      	ldr	r3, [r7, #4]
   2bb98:	0011      	movs	r1, r2
   2bb9a:	0018      	movs	r0, r3
   2bb9c:	4b39      	ldr	r3, [pc, #228]	; (2bc84 <get_fat+0x168>)
   2bb9e:	4798      	blx	r3
   2bba0:	1e03      	subs	r3, r0, #0
   2bba2:	d163      	bne.n	2bc6c <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2bba4:	697b      	ldr	r3, [r7, #20]
   2bba6:	05db      	lsls	r3, r3, #23
   2bba8:	0ddb      	lsrs	r3, r3, #23
   2bbaa:	687a      	ldr	r2, [r7, #4]
   2bbac:	2130      	movs	r1, #48	; 0x30
   2bbae:	18d3      	adds	r3, r2, r3
   2bbb0:	185b      	adds	r3, r3, r1
   2bbb2:	781b      	ldrb	r3, [r3, #0]
   2bbb4:	021b      	lsls	r3, r3, #8
   2bbb6:	001a      	movs	r2, r3
   2bbb8:	693b      	ldr	r3, [r7, #16]
   2bbba:	4313      	orrs	r3, r2
   2bbbc:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2bbbe:	683b      	ldr	r3, [r7, #0]
   2bbc0:	2201      	movs	r2, #1
   2bbc2:	4013      	ands	r3, r2
   2bbc4:	d002      	beq.n	2bbcc <get_fat+0xb0>
   2bbc6:	693b      	ldr	r3, [r7, #16]
   2bbc8:	091b      	lsrs	r3, r3, #4
   2bbca:	e056      	b.n	2bc7a <get_fat+0x15e>
   2bbcc:	693b      	ldr	r3, [r7, #16]
   2bbce:	051b      	lsls	r3, r3, #20
   2bbd0:	0d1b      	lsrs	r3, r3, #20
   2bbd2:	e052      	b.n	2bc7a <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2bbd4:	687b      	ldr	r3, [r7, #4]
   2bbd6:	6a1a      	ldr	r2, [r3, #32]
   2bbd8:	683b      	ldr	r3, [r7, #0]
   2bbda:	0a1b      	lsrs	r3, r3, #8
   2bbdc:	18d2      	adds	r2, r2, r3
   2bbde:	687b      	ldr	r3, [r7, #4]
   2bbe0:	0011      	movs	r1, r2
   2bbe2:	0018      	movs	r0, r3
   2bbe4:	4b27      	ldr	r3, [pc, #156]	; (2bc84 <get_fat+0x168>)
   2bbe6:	4798      	blx	r3
   2bbe8:	1e03      	subs	r3, r0, #0
   2bbea:	d141      	bne.n	2bc70 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2bbec:	683b      	ldr	r3, [r7, #0]
   2bbee:	005a      	lsls	r2, r3, #1
   2bbf0:	23ff      	movs	r3, #255	; 0xff
   2bbf2:	005b      	lsls	r3, r3, #1
   2bbf4:	4013      	ands	r3, r2
   2bbf6:	3330      	adds	r3, #48	; 0x30
   2bbf8:	687a      	ldr	r2, [r7, #4]
   2bbfa:	18d3      	adds	r3, r2, r3
   2bbfc:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2bbfe:	68fb      	ldr	r3, [r7, #12]
   2bc00:	3301      	adds	r3, #1
   2bc02:	781b      	ldrb	r3, [r3, #0]
   2bc04:	021b      	lsls	r3, r3, #8
   2bc06:	b21a      	sxth	r2, r3
   2bc08:	68fb      	ldr	r3, [r7, #12]
   2bc0a:	781b      	ldrb	r3, [r3, #0]
   2bc0c:	b21b      	sxth	r3, r3
   2bc0e:	4313      	orrs	r3, r2
   2bc10:	b21b      	sxth	r3, r3
   2bc12:	b29b      	uxth	r3, r3
   2bc14:	e031      	b.n	2bc7a <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2bc16:	687b      	ldr	r3, [r7, #4]
   2bc18:	6a1a      	ldr	r2, [r3, #32]
   2bc1a:	683b      	ldr	r3, [r7, #0]
   2bc1c:	09db      	lsrs	r3, r3, #7
   2bc1e:	18d2      	adds	r2, r2, r3
   2bc20:	687b      	ldr	r3, [r7, #4]
   2bc22:	0011      	movs	r1, r2
   2bc24:	0018      	movs	r0, r3
   2bc26:	4b17      	ldr	r3, [pc, #92]	; (2bc84 <get_fat+0x168>)
   2bc28:	4798      	blx	r3
   2bc2a:	1e03      	subs	r3, r0, #0
   2bc2c:	d122      	bne.n	2bc74 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2bc2e:	683b      	ldr	r3, [r7, #0]
   2bc30:	009a      	lsls	r2, r3, #2
   2bc32:	23fe      	movs	r3, #254	; 0xfe
   2bc34:	005b      	lsls	r3, r3, #1
   2bc36:	4013      	ands	r3, r2
   2bc38:	3330      	adds	r3, #48	; 0x30
   2bc3a:	687a      	ldr	r2, [r7, #4]
   2bc3c:	18d3      	adds	r3, r2, r3
   2bc3e:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2bc40:	68fb      	ldr	r3, [r7, #12]
   2bc42:	3303      	adds	r3, #3
   2bc44:	781b      	ldrb	r3, [r3, #0]
   2bc46:	061a      	lsls	r2, r3, #24
   2bc48:	68fb      	ldr	r3, [r7, #12]
   2bc4a:	3302      	adds	r3, #2
   2bc4c:	781b      	ldrb	r3, [r3, #0]
   2bc4e:	041b      	lsls	r3, r3, #16
   2bc50:	4313      	orrs	r3, r2
   2bc52:	68fa      	ldr	r2, [r7, #12]
   2bc54:	3201      	adds	r2, #1
   2bc56:	7812      	ldrb	r2, [r2, #0]
   2bc58:	0212      	lsls	r2, r2, #8
   2bc5a:	4313      	orrs	r3, r2
   2bc5c:	68fa      	ldr	r2, [r7, #12]
   2bc5e:	7812      	ldrb	r2, [r2, #0]
   2bc60:	4313      	orrs	r3, r2
   2bc62:	011b      	lsls	r3, r3, #4
   2bc64:	091b      	lsrs	r3, r3, #4
   2bc66:	e008      	b.n	2bc7a <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2bc68:	46c0      	nop			; (mov r8, r8)
   2bc6a:	e004      	b.n	2bc76 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2bc6c:	46c0      	nop			; (mov r8, r8)
   2bc6e:	e002      	b.n	2bc76 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2bc70:	46c0      	nop			; (mov r8, r8)
   2bc72:	e000      	b.n	2bc76 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2bc74:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2bc76:	2301      	movs	r3, #1
   2bc78:	425b      	negs	r3, r3
}
   2bc7a:	0018      	movs	r0, r3
   2bc7c:	46bd      	mov	sp, r7
   2bc7e:	b006      	add	sp, #24
   2bc80:	bd80      	pop	{r7, pc}
   2bc82:	46c0      	nop			; (mov r8, r8)
   2bc84:	0002b885 	.word	0x0002b885

0002bc88 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2bc88:	b590      	push	{r4, r7, lr}
   2bc8a:	b089      	sub	sp, #36	; 0x24
   2bc8c:	af00      	add	r7, sp, #0
   2bc8e:	60f8      	str	r0, [r7, #12]
   2bc90:	60b9      	str	r1, [r7, #8]
   2bc92:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2bc94:	68bb      	ldr	r3, [r7, #8]
   2bc96:	2b01      	cmp	r3, #1
   2bc98:	d904      	bls.n	2bca4 <put_fat+0x1c>
   2bc9a:	68fb      	ldr	r3, [r7, #12]
   2bc9c:	699a      	ldr	r2, [r3, #24]
   2bc9e:	68bb      	ldr	r3, [r7, #8]
   2bca0:	429a      	cmp	r2, r3
   2bca2:	d804      	bhi.n	2bcae <put_fat+0x26>
		res = FR_INT_ERR;
   2bca4:	231f      	movs	r3, #31
   2bca6:	18fb      	adds	r3, r7, r3
   2bca8:	2202      	movs	r2, #2
   2bcaa:	701a      	strb	r2, [r3, #0]
   2bcac:	e100      	b.n	2beb0 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2bcae:	68fb      	ldr	r3, [r7, #12]
   2bcb0:	781b      	ldrb	r3, [r3, #0]
   2bcb2:	2b02      	cmp	r3, #2
   2bcb4:	d100      	bne.n	2bcb8 <put_fat+0x30>
   2bcb6:	e078      	b.n	2bdaa <put_fat+0x122>
   2bcb8:	2b03      	cmp	r3, #3
   2bcba:	d100      	bne.n	2bcbe <put_fat+0x36>
   2bcbc:	e09e      	b.n	2bdfc <put_fat+0x174>
   2bcbe:	2b01      	cmp	r3, #1
   2bcc0:	d000      	beq.n	2bcc4 <put_fat+0x3c>
   2bcc2:	e0e6      	b.n	2be92 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2bcc4:	68bb      	ldr	r3, [r7, #8]
   2bcc6:	61bb      	str	r3, [r7, #24]
   2bcc8:	69bb      	ldr	r3, [r7, #24]
   2bcca:	085b      	lsrs	r3, r3, #1
   2bccc:	69ba      	ldr	r2, [r7, #24]
   2bcce:	18d3      	adds	r3, r2, r3
   2bcd0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2bcd2:	68fb      	ldr	r3, [r7, #12]
   2bcd4:	6a1a      	ldr	r2, [r3, #32]
   2bcd6:	69bb      	ldr	r3, [r7, #24]
   2bcd8:	0a5b      	lsrs	r3, r3, #9
   2bcda:	18d2      	adds	r2, r2, r3
   2bcdc:	231f      	movs	r3, #31
   2bcde:	18fc      	adds	r4, r7, r3
   2bce0:	68fb      	ldr	r3, [r7, #12]
   2bce2:	0011      	movs	r1, r2
   2bce4:	0018      	movs	r0, r3
   2bce6:	4b76      	ldr	r3, [pc, #472]	; (2bec0 <put_fat+0x238>)
   2bce8:	4798      	blx	r3
   2bcea:	0003      	movs	r3, r0
   2bcec:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bcee:	231f      	movs	r3, #31
   2bcf0:	18fb      	adds	r3, r7, r3
   2bcf2:	781b      	ldrb	r3, [r3, #0]
   2bcf4:	2b00      	cmp	r3, #0
   2bcf6:	d000      	beq.n	2bcfa <put_fat+0x72>
   2bcf8:	e0d0      	b.n	2be9c <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2bcfa:	69bb      	ldr	r3, [r7, #24]
   2bcfc:	05db      	lsls	r3, r3, #23
   2bcfe:	0ddb      	lsrs	r3, r3, #23
   2bd00:	3330      	adds	r3, #48	; 0x30
   2bd02:	68fa      	ldr	r2, [r7, #12]
   2bd04:	18d3      	adds	r3, r2, r3
   2bd06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2bd08:	68bb      	ldr	r3, [r7, #8]
   2bd0a:	2201      	movs	r2, #1
   2bd0c:	4013      	ands	r3, r2
   2bd0e:	d00d      	beq.n	2bd2c <put_fat+0xa4>
   2bd10:	697b      	ldr	r3, [r7, #20]
   2bd12:	781b      	ldrb	r3, [r3, #0]
   2bd14:	b25b      	sxtb	r3, r3
   2bd16:	220f      	movs	r2, #15
   2bd18:	4013      	ands	r3, r2
   2bd1a:	b25a      	sxtb	r2, r3
   2bd1c:	687b      	ldr	r3, [r7, #4]
   2bd1e:	b2db      	uxtb	r3, r3
   2bd20:	011b      	lsls	r3, r3, #4
   2bd22:	b25b      	sxtb	r3, r3
   2bd24:	4313      	orrs	r3, r2
   2bd26:	b25b      	sxtb	r3, r3
   2bd28:	b2db      	uxtb	r3, r3
   2bd2a:	e001      	b.n	2bd30 <put_fat+0xa8>
   2bd2c:	687b      	ldr	r3, [r7, #4]
   2bd2e:	b2db      	uxtb	r3, r3
   2bd30:	697a      	ldr	r2, [r7, #20]
   2bd32:	7013      	strb	r3, [r2, #0]
			bc++;
   2bd34:	69bb      	ldr	r3, [r7, #24]
   2bd36:	3301      	adds	r3, #1
   2bd38:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2bd3a:	68fb      	ldr	r3, [r7, #12]
   2bd3c:	2201      	movs	r2, #1
   2bd3e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2bd40:	68fb      	ldr	r3, [r7, #12]
   2bd42:	6a1a      	ldr	r2, [r3, #32]
   2bd44:	69bb      	ldr	r3, [r7, #24]
   2bd46:	0a5b      	lsrs	r3, r3, #9
   2bd48:	18d2      	adds	r2, r2, r3
   2bd4a:	231f      	movs	r3, #31
   2bd4c:	18fc      	adds	r4, r7, r3
   2bd4e:	68fb      	ldr	r3, [r7, #12]
   2bd50:	0011      	movs	r1, r2
   2bd52:	0018      	movs	r0, r3
   2bd54:	4b5a      	ldr	r3, [pc, #360]	; (2bec0 <put_fat+0x238>)
   2bd56:	4798      	blx	r3
   2bd58:	0003      	movs	r3, r0
   2bd5a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bd5c:	231f      	movs	r3, #31
   2bd5e:	18fb      	adds	r3, r7, r3
   2bd60:	781b      	ldrb	r3, [r3, #0]
   2bd62:	2b00      	cmp	r3, #0
   2bd64:	d000      	beq.n	2bd68 <put_fat+0xe0>
   2bd66:	e09b      	b.n	2bea0 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2bd68:	69bb      	ldr	r3, [r7, #24]
   2bd6a:	05db      	lsls	r3, r3, #23
   2bd6c:	0ddb      	lsrs	r3, r3, #23
   2bd6e:	3330      	adds	r3, #48	; 0x30
   2bd70:	68fa      	ldr	r2, [r7, #12]
   2bd72:	18d3      	adds	r3, r2, r3
   2bd74:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2bd76:	68bb      	ldr	r3, [r7, #8]
   2bd78:	2201      	movs	r2, #1
   2bd7a:	4013      	ands	r3, r2
   2bd7c:	d003      	beq.n	2bd86 <put_fat+0xfe>
   2bd7e:	687b      	ldr	r3, [r7, #4]
   2bd80:	091b      	lsrs	r3, r3, #4
   2bd82:	b2db      	uxtb	r3, r3
   2bd84:	e00e      	b.n	2bda4 <put_fat+0x11c>
   2bd86:	697b      	ldr	r3, [r7, #20]
   2bd88:	781b      	ldrb	r3, [r3, #0]
   2bd8a:	b25b      	sxtb	r3, r3
   2bd8c:	220f      	movs	r2, #15
   2bd8e:	4393      	bics	r3, r2
   2bd90:	b25a      	sxtb	r2, r3
   2bd92:	687b      	ldr	r3, [r7, #4]
   2bd94:	0a1b      	lsrs	r3, r3, #8
   2bd96:	b25b      	sxtb	r3, r3
   2bd98:	210f      	movs	r1, #15
   2bd9a:	400b      	ands	r3, r1
   2bd9c:	b25b      	sxtb	r3, r3
   2bd9e:	4313      	orrs	r3, r2
   2bda0:	b25b      	sxtb	r3, r3
   2bda2:	b2db      	uxtb	r3, r3
   2bda4:	697a      	ldr	r2, [r7, #20]
   2bda6:	7013      	strb	r3, [r2, #0]
			break;
   2bda8:	e07f      	b.n	2beaa <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2bdaa:	68fb      	ldr	r3, [r7, #12]
   2bdac:	6a1a      	ldr	r2, [r3, #32]
   2bdae:	68bb      	ldr	r3, [r7, #8]
   2bdb0:	0a1b      	lsrs	r3, r3, #8
   2bdb2:	18d2      	adds	r2, r2, r3
   2bdb4:	231f      	movs	r3, #31
   2bdb6:	18fc      	adds	r4, r7, r3
   2bdb8:	68fb      	ldr	r3, [r7, #12]
   2bdba:	0011      	movs	r1, r2
   2bdbc:	0018      	movs	r0, r3
   2bdbe:	4b40      	ldr	r3, [pc, #256]	; (2bec0 <put_fat+0x238>)
   2bdc0:	4798      	blx	r3
   2bdc2:	0003      	movs	r3, r0
   2bdc4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bdc6:	231f      	movs	r3, #31
   2bdc8:	18fb      	adds	r3, r7, r3
   2bdca:	781b      	ldrb	r3, [r3, #0]
   2bdcc:	2b00      	cmp	r3, #0
   2bdce:	d169      	bne.n	2bea4 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2bdd0:	68bb      	ldr	r3, [r7, #8]
   2bdd2:	005a      	lsls	r2, r3, #1
   2bdd4:	23ff      	movs	r3, #255	; 0xff
   2bdd6:	005b      	lsls	r3, r3, #1
   2bdd8:	4013      	ands	r3, r2
   2bdda:	3330      	adds	r3, #48	; 0x30
   2bddc:	68fa      	ldr	r2, [r7, #12]
   2bdde:	18d3      	adds	r3, r2, r3
   2bde0:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2bde2:	687b      	ldr	r3, [r7, #4]
   2bde4:	b2da      	uxtb	r2, r3
   2bde6:	697b      	ldr	r3, [r7, #20]
   2bde8:	701a      	strb	r2, [r3, #0]
   2bdea:	697b      	ldr	r3, [r7, #20]
   2bdec:	3301      	adds	r3, #1
   2bdee:	687a      	ldr	r2, [r7, #4]
   2bdf0:	b292      	uxth	r2, r2
   2bdf2:	0a12      	lsrs	r2, r2, #8
   2bdf4:	b292      	uxth	r2, r2
   2bdf6:	b2d2      	uxtb	r2, r2
   2bdf8:	701a      	strb	r2, [r3, #0]
			break;
   2bdfa:	e056      	b.n	2beaa <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2bdfc:	68fb      	ldr	r3, [r7, #12]
   2bdfe:	6a1a      	ldr	r2, [r3, #32]
   2be00:	68bb      	ldr	r3, [r7, #8]
   2be02:	09db      	lsrs	r3, r3, #7
   2be04:	18d2      	adds	r2, r2, r3
   2be06:	231f      	movs	r3, #31
   2be08:	18fc      	adds	r4, r7, r3
   2be0a:	68fb      	ldr	r3, [r7, #12]
   2be0c:	0011      	movs	r1, r2
   2be0e:	0018      	movs	r0, r3
   2be10:	4b2b      	ldr	r3, [pc, #172]	; (2bec0 <put_fat+0x238>)
   2be12:	4798      	blx	r3
   2be14:	0003      	movs	r3, r0
   2be16:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2be18:	231f      	movs	r3, #31
   2be1a:	18fb      	adds	r3, r7, r3
   2be1c:	781b      	ldrb	r3, [r3, #0]
   2be1e:	2b00      	cmp	r3, #0
   2be20:	d142      	bne.n	2bea8 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2be22:	68bb      	ldr	r3, [r7, #8]
   2be24:	009a      	lsls	r2, r3, #2
   2be26:	23fe      	movs	r3, #254	; 0xfe
   2be28:	005b      	lsls	r3, r3, #1
   2be2a:	4013      	ands	r3, r2
   2be2c:	3330      	adds	r3, #48	; 0x30
   2be2e:	68fa      	ldr	r2, [r7, #12]
   2be30:	18d3      	adds	r3, r2, r3
   2be32:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2be34:	697b      	ldr	r3, [r7, #20]
   2be36:	3303      	adds	r3, #3
   2be38:	781b      	ldrb	r3, [r3, #0]
   2be3a:	061a      	lsls	r2, r3, #24
   2be3c:	697b      	ldr	r3, [r7, #20]
   2be3e:	3302      	adds	r3, #2
   2be40:	781b      	ldrb	r3, [r3, #0]
   2be42:	041b      	lsls	r3, r3, #16
   2be44:	4313      	orrs	r3, r2
   2be46:	697a      	ldr	r2, [r7, #20]
   2be48:	3201      	adds	r2, #1
   2be4a:	7812      	ldrb	r2, [r2, #0]
   2be4c:	0212      	lsls	r2, r2, #8
   2be4e:	4313      	orrs	r3, r2
   2be50:	697a      	ldr	r2, [r7, #20]
   2be52:	7812      	ldrb	r2, [r2, #0]
   2be54:	4313      	orrs	r3, r2
   2be56:	0f1b      	lsrs	r3, r3, #28
   2be58:	071b      	lsls	r3, r3, #28
   2be5a:	687a      	ldr	r2, [r7, #4]
   2be5c:	4313      	orrs	r3, r2
   2be5e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2be60:	687b      	ldr	r3, [r7, #4]
   2be62:	b2da      	uxtb	r2, r3
   2be64:	697b      	ldr	r3, [r7, #20]
   2be66:	701a      	strb	r2, [r3, #0]
   2be68:	697b      	ldr	r3, [r7, #20]
   2be6a:	3301      	adds	r3, #1
   2be6c:	687a      	ldr	r2, [r7, #4]
   2be6e:	b292      	uxth	r2, r2
   2be70:	0a12      	lsrs	r2, r2, #8
   2be72:	b292      	uxth	r2, r2
   2be74:	b2d2      	uxtb	r2, r2
   2be76:	701a      	strb	r2, [r3, #0]
   2be78:	697b      	ldr	r3, [r7, #20]
   2be7a:	3302      	adds	r3, #2
   2be7c:	687a      	ldr	r2, [r7, #4]
   2be7e:	0c12      	lsrs	r2, r2, #16
   2be80:	b2d2      	uxtb	r2, r2
   2be82:	701a      	strb	r2, [r3, #0]
   2be84:	697b      	ldr	r3, [r7, #20]
   2be86:	3303      	adds	r3, #3
   2be88:	687a      	ldr	r2, [r7, #4]
   2be8a:	0e12      	lsrs	r2, r2, #24
   2be8c:	b2d2      	uxtb	r2, r2
   2be8e:	701a      	strb	r2, [r3, #0]
			break;
   2be90:	e00b      	b.n	2beaa <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2be92:	231f      	movs	r3, #31
   2be94:	18fb      	adds	r3, r7, r3
   2be96:	2202      	movs	r2, #2
   2be98:	701a      	strb	r2, [r3, #0]
   2be9a:	e006      	b.n	2beaa <put_fat+0x222>
			if (res != FR_OK) break;
   2be9c:	46c0      	nop			; (mov r8, r8)
   2be9e:	e004      	b.n	2beaa <put_fat+0x222>
			if (res != FR_OK) break;
   2bea0:	46c0      	nop			; (mov r8, r8)
   2bea2:	e002      	b.n	2beaa <put_fat+0x222>
			if (res != FR_OK) break;
   2bea4:	46c0      	nop			; (mov r8, r8)
   2bea6:	e000      	b.n	2beaa <put_fat+0x222>
			if (res != FR_OK) break;
   2bea8:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2beaa:	68fb      	ldr	r3, [r7, #12]
   2beac:	2201      	movs	r2, #1
   2beae:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2beb0:	231f      	movs	r3, #31
   2beb2:	18fb      	adds	r3, r7, r3
   2beb4:	781b      	ldrb	r3, [r3, #0]
}
   2beb6:	0018      	movs	r0, r3
   2beb8:	46bd      	mov	sp, r7
   2beba:	b009      	add	sp, #36	; 0x24
   2bebc:	bd90      	pop	{r4, r7, pc}
   2bebe:	46c0      	nop			; (mov r8, r8)
   2bec0:	0002b885 	.word	0x0002b885

0002bec4 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2bec4:	b590      	push	{r4, r7, lr}
   2bec6:	b085      	sub	sp, #20
   2bec8:	af00      	add	r7, sp, #0
   2beca:	6078      	str	r0, [r7, #4]
   2becc:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2bece:	683b      	ldr	r3, [r7, #0]
   2bed0:	2b01      	cmp	r3, #1
   2bed2:	d904      	bls.n	2bede <remove_chain+0x1a>
   2bed4:	687b      	ldr	r3, [r7, #4]
   2bed6:	699a      	ldr	r2, [r3, #24]
   2bed8:	683b      	ldr	r3, [r7, #0]
   2beda:	429a      	cmp	r2, r3
   2bedc:	d804      	bhi.n	2bee8 <remove_chain+0x24>
		res = FR_INT_ERR;
   2bede:	230f      	movs	r3, #15
   2bee0:	18fb      	adds	r3, r7, r3
   2bee2:	2202      	movs	r2, #2
   2bee4:	701a      	strb	r2, [r3, #0]
   2bee6:	e045      	b.n	2bf74 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2bee8:	230f      	movs	r3, #15
   2beea:	18fb      	adds	r3, r7, r3
   2beec:	2200      	movs	r2, #0
   2beee:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2bef0:	e037      	b.n	2bf62 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2bef2:	683a      	ldr	r2, [r7, #0]
   2bef4:	687b      	ldr	r3, [r7, #4]
   2bef6:	0011      	movs	r1, r2
   2bef8:	0018      	movs	r0, r3
   2befa:	4b22      	ldr	r3, [pc, #136]	; (2bf84 <remove_chain+0xc0>)
   2befc:	4798      	blx	r3
   2befe:	0003      	movs	r3, r0
   2bf00:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2bf02:	68bb      	ldr	r3, [r7, #8]
   2bf04:	2b00      	cmp	r3, #0
   2bf06:	d032      	beq.n	2bf6e <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2bf08:	68bb      	ldr	r3, [r7, #8]
   2bf0a:	2b01      	cmp	r3, #1
   2bf0c:	d104      	bne.n	2bf18 <remove_chain+0x54>
   2bf0e:	230f      	movs	r3, #15
   2bf10:	18fb      	adds	r3, r7, r3
   2bf12:	2202      	movs	r2, #2
   2bf14:	701a      	strb	r2, [r3, #0]
   2bf16:	e02d      	b.n	2bf74 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2bf18:	68bb      	ldr	r3, [r7, #8]
   2bf1a:	3301      	adds	r3, #1
   2bf1c:	d104      	bne.n	2bf28 <remove_chain+0x64>
   2bf1e:	230f      	movs	r3, #15
   2bf20:	18fb      	adds	r3, r7, r3
   2bf22:	2201      	movs	r2, #1
   2bf24:	701a      	strb	r2, [r3, #0]
   2bf26:	e025      	b.n	2bf74 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2bf28:	230f      	movs	r3, #15
   2bf2a:	18fc      	adds	r4, r7, r3
   2bf2c:	6839      	ldr	r1, [r7, #0]
   2bf2e:	687b      	ldr	r3, [r7, #4]
   2bf30:	2200      	movs	r2, #0
   2bf32:	0018      	movs	r0, r3
   2bf34:	4b14      	ldr	r3, [pc, #80]	; (2bf88 <remove_chain+0xc4>)
   2bf36:	4798      	blx	r3
   2bf38:	0003      	movs	r3, r0
   2bf3a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bf3c:	230f      	movs	r3, #15
   2bf3e:	18fb      	adds	r3, r7, r3
   2bf40:	781b      	ldrb	r3, [r3, #0]
   2bf42:	2b00      	cmp	r3, #0
   2bf44:	d115      	bne.n	2bf72 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2bf46:	687b      	ldr	r3, [r7, #4]
   2bf48:	691b      	ldr	r3, [r3, #16]
   2bf4a:	3301      	adds	r3, #1
   2bf4c:	d007      	beq.n	2bf5e <remove_chain+0x9a>
				fs->free_clust++;
   2bf4e:	687b      	ldr	r3, [r7, #4]
   2bf50:	691b      	ldr	r3, [r3, #16]
   2bf52:	1c5a      	adds	r2, r3, #1
   2bf54:	687b      	ldr	r3, [r7, #4]
   2bf56:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2bf58:	687b      	ldr	r3, [r7, #4]
   2bf5a:	2201      	movs	r2, #1
   2bf5c:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2bf5e:	68bb      	ldr	r3, [r7, #8]
   2bf60:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2bf62:	687b      	ldr	r3, [r7, #4]
   2bf64:	699a      	ldr	r2, [r3, #24]
   2bf66:	683b      	ldr	r3, [r7, #0]
   2bf68:	429a      	cmp	r2, r3
   2bf6a:	d8c2      	bhi.n	2bef2 <remove_chain+0x2e>
   2bf6c:	e002      	b.n	2bf74 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2bf6e:	46c0      	nop			; (mov r8, r8)
   2bf70:	e000      	b.n	2bf74 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2bf72:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2bf74:	230f      	movs	r3, #15
   2bf76:	18fb      	adds	r3, r7, r3
   2bf78:	781b      	ldrb	r3, [r3, #0]
}
   2bf7a:	0018      	movs	r0, r3
   2bf7c:	46bd      	mov	sp, r7
   2bf7e:	b005      	add	sp, #20
   2bf80:	bd90      	pop	{r4, r7, pc}
   2bf82:	46c0      	nop			; (mov r8, r8)
   2bf84:	0002bb1d 	.word	0x0002bb1d
   2bf88:	0002bc89 	.word	0x0002bc89

0002bf8c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2bf8c:	b590      	push	{r4, r7, lr}
   2bf8e:	b087      	sub	sp, #28
   2bf90:	af00      	add	r7, sp, #0
   2bf92:	6078      	str	r0, [r7, #4]
   2bf94:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2bf96:	683b      	ldr	r3, [r7, #0]
   2bf98:	2b00      	cmp	r3, #0
   2bf9a:	d10d      	bne.n	2bfb8 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2bf9c:	687b      	ldr	r3, [r7, #4]
   2bf9e:	68db      	ldr	r3, [r3, #12]
   2bfa0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2bfa2:	693b      	ldr	r3, [r7, #16]
   2bfa4:	2b00      	cmp	r3, #0
   2bfa6:	d004      	beq.n	2bfb2 <create_chain+0x26>
   2bfa8:	687b      	ldr	r3, [r7, #4]
   2bfaa:	699a      	ldr	r2, [r3, #24]
   2bfac:	693b      	ldr	r3, [r7, #16]
   2bfae:	429a      	cmp	r2, r3
   2bfb0:	d818      	bhi.n	2bfe4 <create_chain+0x58>
   2bfb2:	2301      	movs	r3, #1
   2bfb4:	613b      	str	r3, [r7, #16]
   2bfb6:	e015      	b.n	2bfe4 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2bfb8:	683a      	ldr	r2, [r7, #0]
   2bfba:	687b      	ldr	r3, [r7, #4]
   2bfbc:	0011      	movs	r1, r2
   2bfbe:	0018      	movs	r0, r3
   2bfc0:	4b3e      	ldr	r3, [pc, #248]	; (2c0bc <create_chain+0x130>)
   2bfc2:	4798      	blx	r3
   2bfc4:	0003      	movs	r3, r0
   2bfc6:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2bfc8:	68bb      	ldr	r3, [r7, #8]
   2bfca:	2b01      	cmp	r3, #1
   2bfcc:	d801      	bhi.n	2bfd2 <create_chain+0x46>
   2bfce:	2301      	movs	r3, #1
   2bfd0:	e070      	b.n	2c0b4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2bfd2:	687b      	ldr	r3, [r7, #4]
   2bfd4:	699a      	ldr	r2, [r3, #24]
   2bfd6:	68bb      	ldr	r3, [r7, #8]
   2bfd8:	429a      	cmp	r2, r3
   2bfda:	d901      	bls.n	2bfe0 <create_chain+0x54>
   2bfdc:	68bb      	ldr	r3, [r7, #8]
   2bfde:	e069      	b.n	2c0b4 <create_chain+0x128>
		scl = clst;
   2bfe0:	683b      	ldr	r3, [r7, #0]
   2bfe2:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2bfe4:	693b      	ldr	r3, [r7, #16]
   2bfe6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2bfe8:	697b      	ldr	r3, [r7, #20]
   2bfea:	3301      	adds	r3, #1
   2bfec:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2bfee:	687b      	ldr	r3, [r7, #4]
   2bff0:	699a      	ldr	r2, [r3, #24]
   2bff2:	697b      	ldr	r3, [r7, #20]
   2bff4:	429a      	cmp	r2, r3
   2bff6:	d807      	bhi.n	2c008 <create_chain+0x7c>
			ncl = 2;
   2bff8:	2302      	movs	r3, #2
   2bffa:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2bffc:	697a      	ldr	r2, [r7, #20]
   2bffe:	693b      	ldr	r3, [r7, #16]
   2c000:	429a      	cmp	r2, r3
   2c002:	d901      	bls.n	2c008 <create_chain+0x7c>
   2c004:	2300      	movs	r3, #0
   2c006:	e055      	b.n	2c0b4 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2c008:	697a      	ldr	r2, [r7, #20]
   2c00a:	687b      	ldr	r3, [r7, #4]
   2c00c:	0011      	movs	r1, r2
   2c00e:	0018      	movs	r0, r3
   2c010:	4b2a      	ldr	r3, [pc, #168]	; (2c0bc <create_chain+0x130>)
   2c012:	4798      	blx	r3
   2c014:	0003      	movs	r3, r0
   2c016:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2c018:	68bb      	ldr	r3, [r7, #8]
   2c01a:	2b00      	cmp	r3, #0
   2c01c:	d00d      	beq.n	2c03a <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2c01e:	68bb      	ldr	r3, [r7, #8]
   2c020:	3301      	adds	r3, #1
   2c022:	d002      	beq.n	2c02a <create_chain+0x9e>
   2c024:	68bb      	ldr	r3, [r7, #8]
   2c026:	2b01      	cmp	r3, #1
   2c028:	d101      	bne.n	2c02e <create_chain+0xa2>
			return cs;
   2c02a:	68bb      	ldr	r3, [r7, #8]
   2c02c:	e042      	b.n	2c0b4 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2c02e:	697a      	ldr	r2, [r7, #20]
   2c030:	693b      	ldr	r3, [r7, #16]
   2c032:	429a      	cmp	r2, r3
   2c034:	d1d8      	bne.n	2bfe8 <create_chain+0x5c>
   2c036:	2300      	movs	r3, #0
   2c038:	e03c      	b.n	2c0b4 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2c03a:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2c03c:	230f      	movs	r3, #15
   2c03e:	18fc      	adds	r4, r7, r3
   2c040:	4a1f      	ldr	r2, [pc, #124]	; (2c0c0 <create_chain+0x134>)
   2c042:	6979      	ldr	r1, [r7, #20]
   2c044:	687b      	ldr	r3, [r7, #4]
   2c046:	0018      	movs	r0, r3
   2c048:	4b1e      	ldr	r3, [pc, #120]	; (2c0c4 <create_chain+0x138>)
   2c04a:	4798      	blx	r3
   2c04c:	0003      	movs	r3, r0
   2c04e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2c050:	230f      	movs	r3, #15
   2c052:	18fb      	adds	r3, r7, r3
   2c054:	781b      	ldrb	r3, [r3, #0]
   2c056:	2b00      	cmp	r3, #0
   2c058:	d10c      	bne.n	2c074 <create_chain+0xe8>
   2c05a:	683b      	ldr	r3, [r7, #0]
   2c05c:	2b00      	cmp	r3, #0
   2c05e:	d009      	beq.n	2c074 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2c060:	230f      	movs	r3, #15
   2c062:	18fc      	adds	r4, r7, r3
   2c064:	697a      	ldr	r2, [r7, #20]
   2c066:	6839      	ldr	r1, [r7, #0]
   2c068:	687b      	ldr	r3, [r7, #4]
   2c06a:	0018      	movs	r0, r3
   2c06c:	4b15      	ldr	r3, [pc, #84]	; (2c0c4 <create_chain+0x138>)
   2c06e:	4798      	blx	r3
   2c070:	0003      	movs	r3, r0
   2c072:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2c074:	230f      	movs	r3, #15
   2c076:	18fb      	adds	r3, r7, r3
   2c078:	781b      	ldrb	r3, [r3, #0]
   2c07a:	2b00      	cmp	r3, #0
   2c07c:	d10f      	bne.n	2c09e <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2c07e:	687b      	ldr	r3, [r7, #4]
   2c080:	697a      	ldr	r2, [r7, #20]
   2c082:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2c084:	687b      	ldr	r3, [r7, #4]
   2c086:	691b      	ldr	r3, [r3, #16]
   2c088:	3301      	adds	r3, #1
   2c08a:	d012      	beq.n	2c0b2 <create_chain+0x126>
			fs->free_clust--;
   2c08c:	687b      	ldr	r3, [r7, #4]
   2c08e:	691b      	ldr	r3, [r3, #16]
   2c090:	1e5a      	subs	r2, r3, #1
   2c092:	687b      	ldr	r3, [r7, #4]
   2c094:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2c096:	687b      	ldr	r3, [r7, #4]
   2c098:	2201      	movs	r2, #1
   2c09a:	715a      	strb	r2, [r3, #5]
   2c09c:	e009      	b.n	2c0b2 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2c09e:	230f      	movs	r3, #15
   2c0a0:	18fb      	adds	r3, r7, r3
   2c0a2:	781b      	ldrb	r3, [r3, #0]
   2c0a4:	2b01      	cmp	r3, #1
   2c0a6:	d102      	bne.n	2c0ae <create_chain+0x122>
   2c0a8:	2301      	movs	r3, #1
   2c0aa:	425b      	negs	r3, r3
   2c0ac:	e000      	b.n	2c0b0 <create_chain+0x124>
   2c0ae:	2301      	movs	r3, #1
   2c0b0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2c0b2:	697b      	ldr	r3, [r7, #20]
}
   2c0b4:	0018      	movs	r0, r3
   2c0b6:	46bd      	mov	sp, r7
   2c0b8:	b007      	add	sp, #28
   2c0ba:	bd90      	pop	{r4, r7, pc}
   2c0bc:	0002bb1d 	.word	0x0002bb1d
   2c0c0:	0fffffff 	.word	0x0fffffff
   2c0c4:	0002bc89 	.word	0x0002bc89

0002c0c8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2c0c8:	b580      	push	{r7, lr}
   2c0ca:	b084      	sub	sp, #16
   2c0cc:	af00      	add	r7, sp, #0
   2c0ce:	6078      	str	r0, [r7, #4]
   2c0d0:	000a      	movs	r2, r1
   2c0d2:	1cbb      	adds	r3, r7, #2
   2c0d4:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2c0d6:	687b      	ldr	r3, [r7, #4]
   2c0d8:	1cba      	adds	r2, r7, #2
   2c0da:	8812      	ldrh	r2, [r2, #0]
   2c0dc:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2c0de:	687b      	ldr	r3, [r7, #4]
   2c0e0:	689b      	ldr	r3, [r3, #8]
   2c0e2:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2c0e4:	68fb      	ldr	r3, [r7, #12]
   2c0e6:	2b01      	cmp	r3, #1
   2c0e8:	d005      	beq.n	2c0f6 <dir_sdi+0x2e>
   2c0ea:	687b      	ldr	r3, [r7, #4]
   2c0ec:	681b      	ldr	r3, [r3, #0]
   2c0ee:	699a      	ldr	r2, [r3, #24]
   2c0f0:	68fb      	ldr	r3, [r7, #12]
   2c0f2:	429a      	cmp	r2, r3
   2c0f4:	d801      	bhi.n	2c0fa <dir_sdi+0x32>
		return FR_INT_ERR;
   2c0f6:	2302      	movs	r3, #2
   2c0f8:	e075      	b.n	2c1e6 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2c0fa:	68fb      	ldr	r3, [r7, #12]
   2c0fc:	2b00      	cmp	r3, #0
   2c0fe:	d108      	bne.n	2c112 <dir_sdi+0x4a>
   2c100:	687b      	ldr	r3, [r7, #4]
   2c102:	681b      	ldr	r3, [r3, #0]
   2c104:	781b      	ldrb	r3, [r3, #0]
   2c106:	2b03      	cmp	r3, #3
   2c108:	d103      	bne.n	2c112 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2c10a:	687b      	ldr	r3, [r7, #4]
   2c10c:	681b      	ldr	r3, [r3, #0]
   2c10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c110:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2c112:	68fb      	ldr	r3, [r7, #12]
   2c114:	2b00      	cmp	r3, #0
   2c116:	d116      	bne.n	2c146 <dir_sdi+0x7e>
		dj->clust = clst;
   2c118:	687b      	ldr	r3, [r7, #4]
   2c11a:	68fa      	ldr	r2, [r7, #12]
   2c11c:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2c11e:	687b      	ldr	r3, [r7, #4]
   2c120:	681b      	ldr	r3, [r3, #0]
   2c122:	891b      	ldrh	r3, [r3, #8]
   2c124:	1cba      	adds	r2, r7, #2
   2c126:	8812      	ldrh	r2, [r2, #0]
   2c128:	429a      	cmp	r2, r3
   2c12a:	d301      	bcc.n	2c130 <dir_sdi+0x68>
			return FR_INT_ERR;
   2c12c:	2302      	movs	r3, #2
   2c12e:	e05a      	b.n	2c1e6 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2c130:	687b      	ldr	r3, [r7, #4]
   2c132:	681b      	ldr	r3, [r3, #0]
   2c134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c136:	1cba      	adds	r2, r7, #2
   2c138:	8812      	ldrh	r2, [r2, #0]
   2c13a:	0912      	lsrs	r2, r2, #4
   2c13c:	b292      	uxth	r2, r2
   2c13e:	189a      	adds	r2, r3, r2
   2c140:	687b      	ldr	r3, [r7, #4]
   2c142:	611a      	str	r2, [r3, #16]
   2c144:	e042      	b.n	2c1cc <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2c146:	687b      	ldr	r3, [r7, #4]
   2c148:	681b      	ldr	r3, [r3, #0]
   2c14a:	789b      	ldrb	r3, [r3, #2]
   2c14c:	b29a      	uxth	r2, r3
   2c14e:	230a      	movs	r3, #10
   2c150:	18fb      	adds	r3, r7, r3
   2c152:	0112      	lsls	r2, r2, #4
   2c154:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2c156:	e020      	b.n	2c19a <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2c158:	687b      	ldr	r3, [r7, #4]
   2c15a:	681b      	ldr	r3, [r3, #0]
   2c15c:	68fa      	ldr	r2, [r7, #12]
   2c15e:	0011      	movs	r1, r2
   2c160:	0018      	movs	r0, r3
   2c162:	4b23      	ldr	r3, [pc, #140]	; (2c1f0 <dir_sdi+0x128>)
   2c164:	4798      	blx	r3
   2c166:	0003      	movs	r3, r0
   2c168:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2c16a:	68fb      	ldr	r3, [r7, #12]
   2c16c:	3301      	adds	r3, #1
   2c16e:	d101      	bne.n	2c174 <dir_sdi+0xac>
   2c170:	2301      	movs	r3, #1
   2c172:	e038      	b.n	2c1e6 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2c174:	68fb      	ldr	r3, [r7, #12]
   2c176:	2b01      	cmp	r3, #1
   2c178:	d905      	bls.n	2c186 <dir_sdi+0xbe>
   2c17a:	687b      	ldr	r3, [r7, #4]
   2c17c:	681b      	ldr	r3, [r3, #0]
   2c17e:	699a      	ldr	r2, [r3, #24]
   2c180:	68fb      	ldr	r3, [r7, #12]
   2c182:	429a      	cmp	r2, r3
   2c184:	d801      	bhi.n	2c18a <dir_sdi+0xc2>
				return FR_INT_ERR;
   2c186:	2302      	movs	r3, #2
   2c188:	e02d      	b.n	2c1e6 <dir_sdi+0x11e>
			idx -= ic;
   2c18a:	1cbb      	adds	r3, r7, #2
   2c18c:	1cb9      	adds	r1, r7, #2
   2c18e:	220a      	movs	r2, #10
   2c190:	18ba      	adds	r2, r7, r2
   2c192:	8809      	ldrh	r1, [r1, #0]
   2c194:	8812      	ldrh	r2, [r2, #0]
   2c196:	1a8a      	subs	r2, r1, r2
   2c198:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2c19a:	1cba      	adds	r2, r7, #2
   2c19c:	230a      	movs	r3, #10
   2c19e:	18fb      	adds	r3, r7, r3
   2c1a0:	8812      	ldrh	r2, [r2, #0]
   2c1a2:	881b      	ldrh	r3, [r3, #0]
   2c1a4:	429a      	cmp	r2, r3
   2c1a6:	d2d7      	bcs.n	2c158 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2c1a8:	687b      	ldr	r3, [r7, #4]
   2c1aa:	68fa      	ldr	r2, [r7, #12]
   2c1ac:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2c1ae:	687b      	ldr	r3, [r7, #4]
   2c1b0:	681b      	ldr	r3, [r3, #0]
   2c1b2:	68fa      	ldr	r2, [r7, #12]
   2c1b4:	0011      	movs	r1, r2
   2c1b6:	0018      	movs	r0, r3
   2c1b8:	4b0e      	ldr	r3, [pc, #56]	; (2c1f4 <dir_sdi+0x12c>)
   2c1ba:	4798      	blx	r3
   2c1bc:	0002      	movs	r2, r0
   2c1be:	1cbb      	adds	r3, r7, #2
   2c1c0:	881b      	ldrh	r3, [r3, #0]
   2c1c2:	091b      	lsrs	r3, r3, #4
   2c1c4:	b29b      	uxth	r3, r3
   2c1c6:	18d2      	adds	r2, r2, r3
   2c1c8:	687b      	ldr	r3, [r7, #4]
   2c1ca:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2c1cc:	687b      	ldr	r3, [r7, #4]
   2c1ce:	681b      	ldr	r3, [r3, #0]
   2c1d0:	3330      	adds	r3, #48	; 0x30
   2c1d2:	001a      	movs	r2, r3
   2c1d4:	1cbb      	adds	r3, r7, #2
   2c1d6:	881b      	ldrh	r3, [r3, #0]
   2c1d8:	210f      	movs	r1, #15
   2c1da:	400b      	ands	r3, r1
   2c1dc:	015b      	lsls	r3, r3, #5
   2c1de:	18d2      	adds	r2, r2, r3
   2c1e0:	687b      	ldr	r3, [r7, #4]
   2c1e2:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2c1e4:	2300      	movs	r3, #0
}
   2c1e6:	0018      	movs	r0, r3
   2c1e8:	46bd      	mov	sp, r7
   2c1ea:	b004      	add	sp, #16
   2c1ec:	bd80      	pop	{r7, pc}
   2c1ee:	46c0      	nop			; (mov r8, r8)
   2c1f0:	0002bb1d 	.word	0x0002bb1d
   2c1f4:	0002bae5 	.word	0x0002bae5

0002c1f8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2c1f8:	b590      	push	{r4, r7, lr}
   2c1fa:	b085      	sub	sp, #20
   2c1fc:	af00      	add	r7, sp, #0
   2c1fe:	6078      	str	r0, [r7, #4]
   2c200:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2c202:	687b      	ldr	r3, [r7, #4]
   2c204:	88da      	ldrh	r2, [r3, #6]
   2c206:	2308      	movs	r3, #8
   2c208:	18fb      	adds	r3, r7, r3
   2c20a:	3201      	adds	r2, #1
   2c20c:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2c20e:	2308      	movs	r3, #8
   2c210:	18fb      	adds	r3, r7, r3
   2c212:	881b      	ldrh	r3, [r3, #0]
   2c214:	2b00      	cmp	r3, #0
   2c216:	d003      	beq.n	2c220 <dir_next+0x28>
   2c218:	687b      	ldr	r3, [r7, #4]
   2c21a:	691b      	ldr	r3, [r3, #16]
   2c21c:	2b00      	cmp	r3, #0
   2c21e:	d101      	bne.n	2c224 <dir_next+0x2c>
		return FR_NO_FILE;
   2c220:	2304      	movs	r3, #4
   2c222:	e0d2      	b.n	2c3ca <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2c224:	2308      	movs	r3, #8
   2c226:	18fb      	adds	r3, r7, r3
   2c228:	881b      	ldrh	r3, [r3, #0]
   2c22a:	220f      	movs	r2, #15
   2c22c:	4013      	ands	r3, r2
   2c22e:	b29b      	uxth	r3, r3
   2c230:	2b00      	cmp	r3, #0
   2c232:	d000      	beq.n	2c236 <dir_next+0x3e>
   2c234:	e0b6      	b.n	2c3a4 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2c236:	687b      	ldr	r3, [r7, #4]
   2c238:	691b      	ldr	r3, [r3, #16]
   2c23a:	1c5a      	adds	r2, r3, #1
   2c23c:	687b      	ldr	r3, [r7, #4]
   2c23e:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2c240:	687b      	ldr	r3, [r7, #4]
   2c242:	68db      	ldr	r3, [r3, #12]
   2c244:	2b00      	cmp	r3, #0
   2c246:	d10a      	bne.n	2c25e <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2c248:	687b      	ldr	r3, [r7, #4]
   2c24a:	681b      	ldr	r3, [r3, #0]
   2c24c:	891b      	ldrh	r3, [r3, #8]
   2c24e:	2208      	movs	r2, #8
   2c250:	18ba      	adds	r2, r7, r2
   2c252:	8812      	ldrh	r2, [r2, #0]
   2c254:	429a      	cmp	r2, r3
   2c256:	d200      	bcs.n	2c25a <dir_next+0x62>
   2c258:	e0a4      	b.n	2c3a4 <dir_next+0x1ac>
				return FR_NO_FILE;
   2c25a:	2304      	movs	r3, #4
   2c25c:	e0b5      	b.n	2c3ca <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2c25e:	2308      	movs	r3, #8
   2c260:	18fb      	adds	r3, r7, r3
   2c262:	881b      	ldrh	r3, [r3, #0]
   2c264:	091b      	lsrs	r3, r3, #4
   2c266:	b29b      	uxth	r3, r3
   2c268:	001a      	movs	r2, r3
   2c26a:	687b      	ldr	r3, [r7, #4]
   2c26c:	681b      	ldr	r3, [r3, #0]
   2c26e:	789b      	ldrb	r3, [r3, #2]
   2c270:	3b01      	subs	r3, #1
   2c272:	4013      	ands	r3, r2
   2c274:	d000      	beq.n	2c278 <dir_next+0x80>
   2c276:	e095      	b.n	2c3a4 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2c278:	687b      	ldr	r3, [r7, #4]
   2c27a:	681a      	ldr	r2, [r3, #0]
   2c27c:	687b      	ldr	r3, [r7, #4]
   2c27e:	68db      	ldr	r3, [r3, #12]
   2c280:	0019      	movs	r1, r3
   2c282:	0010      	movs	r0, r2
   2c284:	4b53      	ldr	r3, [pc, #332]	; (2c3d4 <dir_next+0x1dc>)
   2c286:	4798      	blx	r3
   2c288:	0003      	movs	r3, r0
   2c28a:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2c28c:	68fb      	ldr	r3, [r7, #12]
   2c28e:	2b01      	cmp	r3, #1
   2c290:	d801      	bhi.n	2c296 <dir_next+0x9e>
   2c292:	2302      	movs	r3, #2
   2c294:	e099      	b.n	2c3ca <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2c296:	68fb      	ldr	r3, [r7, #12]
   2c298:	3301      	adds	r3, #1
   2c29a:	d101      	bne.n	2c2a0 <dir_next+0xa8>
   2c29c:	2301      	movs	r3, #1
   2c29e:	e094      	b.n	2c3ca <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2c2a0:	687b      	ldr	r3, [r7, #4]
   2c2a2:	681b      	ldr	r3, [r3, #0]
   2c2a4:	699a      	ldr	r2, [r3, #24]
   2c2a6:	68fb      	ldr	r3, [r7, #12]
   2c2a8:	429a      	cmp	r2, r3
   2c2aa:	d900      	bls.n	2c2ae <dir_next+0xb6>
   2c2ac:	e06d      	b.n	2c38a <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2c2ae:	683b      	ldr	r3, [r7, #0]
   2c2b0:	2b00      	cmp	r3, #0
   2c2b2:	d101      	bne.n	2c2b8 <dir_next+0xc0>
   2c2b4:	2304      	movs	r3, #4
   2c2b6:	e088      	b.n	2c3ca <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2c2b8:	687b      	ldr	r3, [r7, #4]
   2c2ba:	681a      	ldr	r2, [r3, #0]
   2c2bc:	687b      	ldr	r3, [r7, #4]
   2c2be:	68db      	ldr	r3, [r3, #12]
   2c2c0:	0019      	movs	r1, r3
   2c2c2:	0010      	movs	r0, r2
   2c2c4:	4b44      	ldr	r3, [pc, #272]	; (2c3d8 <dir_next+0x1e0>)
   2c2c6:	4798      	blx	r3
   2c2c8:	0003      	movs	r3, r0
   2c2ca:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2c2cc:	68fb      	ldr	r3, [r7, #12]
   2c2ce:	2b00      	cmp	r3, #0
   2c2d0:	d101      	bne.n	2c2d6 <dir_next+0xde>
   2c2d2:	2307      	movs	r3, #7
   2c2d4:	e079      	b.n	2c3ca <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2c2d6:	68fb      	ldr	r3, [r7, #12]
   2c2d8:	2b01      	cmp	r3, #1
   2c2da:	d101      	bne.n	2c2e0 <dir_next+0xe8>
   2c2dc:	2302      	movs	r3, #2
   2c2de:	e074      	b.n	2c3ca <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2c2e0:	68fb      	ldr	r3, [r7, #12]
   2c2e2:	3301      	adds	r3, #1
   2c2e4:	d101      	bne.n	2c2ea <dir_next+0xf2>
   2c2e6:	2301      	movs	r3, #1
   2c2e8:	e06f      	b.n	2c3ca <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2c2ea:	687b      	ldr	r3, [r7, #4]
   2c2ec:	681b      	ldr	r3, [r3, #0]
   2c2ee:	2100      	movs	r1, #0
   2c2f0:	0018      	movs	r0, r3
   2c2f2:	4b3a      	ldr	r3, [pc, #232]	; (2c3dc <dir_next+0x1e4>)
   2c2f4:	4798      	blx	r3
   2c2f6:	1e03      	subs	r3, r0, #0
   2c2f8:	d001      	beq.n	2c2fe <dir_next+0x106>
   2c2fa:	2301      	movs	r3, #1
   2c2fc:	e065      	b.n	2c3ca <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2c2fe:	687b      	ldr	r3, [r7, #4]
   2c300:	681b      	ldr	r3, [r3, #0]
   2c302:	3330      	adds	r3, #48	; 0x30
   2c304:	0018      	movs	r0, r3
   2c306:	2380      	movs	r3, #128	; 0x80
   2c308:	009b      	lsls	r3, r3, #2
   2c30a:	001a      	movs	r2, r3
   2c30c:	2100      	movs	r1, #0
   2c30e:	4b34      	ldr	r3, [pc, #208]	; (2c3e0 <dir_next+0x1e8>)
   2c310:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2c312:	687b      	ldr	r3, [r7, #4]
   2c314:	681c      	ldr	r4, [r3, #0]
   2c316:	687b      	ldr	r3, [r7, #4]
   2c318:	681b      	ldr	r3, [r3, #0]
   2c31a:	68fa      	ldr	r2, [r7, #12]
   2c31c:	0011      	movs	r1, r2
   2c31e:	0018      	movs	r0, r3
   2c320:	4b30      	ldr	r3, [pc, #192]	; (2c3e4 <dir_next+0x1ec>)
   2c322:	4798      	blx	r3
   2c324:	0003      	movs	r3, r0
   2c326:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2c328:	230b      	movs	r3, #11
   2c32a:	18fb      	adds	r3, r7, r3
   2c32c:	2200      	movs	r2, #0
   2c32e:	701a      	strb	r2, [r3, #0]
   2c330:	e019      	b.n	2c366 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2c332:	687b      	ldr	r3, [r7, #4]
   2c334:	681b      	ldr	r3, [r3, #0]
   2c336:	2201      	movs	r2, #1
   2c338:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2c33a:	687b      	ldr	r3, [r7, #4]
   2c33c:	681b      	ldr	r3, [r3, #0]
   2c33e:	2100      	movs	r1, #0
   2c340:	0018      	movs	r0, r3
   2c342:	4b26      	ldr	r3, [pc, #152]	; (2c3dc <dir_next+0x1e4>)
   2c344:	4798      	blx	r3
   2c346:	1e03      	subs	r3, r0, #0
   2c348:	d001      	beq.n	2c34e <dir_next+0x156>
   2c34a:	2301      	movs	r3, #1
   2c34c:	e03d      	b.n	2c3ca <dir_next+0x1d2>
						dj->fs->winsect++;
   2c34e:	687b      	ldr	r3, [r7, #4]
   2c350:	681b      	ldr	r3, [r3, #0]
   2c352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c354:	3201      	adds	r2, #1
   2c356:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2c358:	230b      	movs	r3, #11
   2c35a:	18fb      	adds	r3, r7, r3
   2c35c:	781a      	ldrb	r2, [r3, #0]
   2c35e:	230b      	movs	r3, #11
   2c360:	18fb      	adds	r3, r7, r3
   2c362:	3201      	adds	r2, #1
   2c364:	701a      	strb	r2, [r3, #0]
   2c366:	687b      	ldr	r3, [r7, #4]
   2c368:	681b      	ldr	r3, [r3, #0]
   2c36a:	789b      	ldrb	r3, [r3, #2]
   2c36c:	220b      	movs	r2, #11
   2c36e:	18ba      	adds	r2, r7, r2
   2c370:	7812      	ldrb	r2, [r2, #0]
   2c372:	429a      	cmp	r2, r3
   2c374:	d3dd      	bcc.n	2c332 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2c376:	687b      	ldr	r3, [r7, #4]
   2c378:	681b      	ldr	r3, [r3, #0]
   2c37a:	687a      	ldr	r2, [r7, #4]
   2c37c:	6812      	ldr	r2, [r2, #0]
   2c37e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2c380:	220b      	movs	r2, #11
   2c382:	18ba      	adds	r2, r7, r2
   2c384:	7812      	ldrb	r2, [r2, #0]
   2c386:	1a8a      	subs	r2, r1, r2
   2c388:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2c38a:	687b      	ldr	r3, [r7, #4]
   2c38c:	68fa      	ldr	r2, [r7, #12]
   2c38e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2c390:	687b      	ldr	r3, [r7, #4]
   2c392:	681b      	ldr	r3, [r3, #0]
   2c394:	68fa      	ldr	r2, [r7, #12]
   2c396:	0011      	movs	r1, r2
   2c398:	0018      	movs	r0, r3
   2c39a:	4b12      	ldr	r3, [pc, #72]	; (2c3e4 <dir_next+0x1ec>)
   2c39c:	4798      	blx	r3
   2c39e:	0002      	movs	r2, r0
   2c3a0:	687b      	ldr	r3, [r7, #4]
   2c3a2:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2c3a4:	687b      	ldr	r3, [r7, #4]
   2c3a6:	2208      	movs	r2, #8
   2c3a8:	18ba      	adds	r2, r7, r2
   2c3aa:	8812      	ldrh	r2, [r2, #0]
   2c3ac:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2c3ae:	687b      	ldr	r3, [r7, #4]
   2c3b0:	681b      	ldr	r3, [r3, #0]
   2c3b2:	3330      	adds	r3, #48	; 0x30
   2c3b4:	001a      	movs	r2, r3
   2c3b6:	2308      	movs	r3, #8
   2c3b8:	18fb      	adds	r3, r7, r3
   2c3ba:	881b      	ldrh	r3, [r3, #0]
   2c3bc:	210f      	movs	r1, #15
   2c3be:	400b      	ands	r3, r1
   2c3c0:	015b      	lsls	r3, r3, #5
   2c3c2:	18d2      	adds	r2, r2, r3
   2c3c4:	687b      	ldr	r3, [r7, #4]
   2c3c6:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2c3c8:	2300      	movs	r3, #0
}
   2c3ca:	0018      	movs	r0, r3
   2c3cc:	46bd      	mov	sp, r7
   2c3ce:	b005      	add	sp, #20
   2c3d0:	bd90      	pop	{r4, r7, pc}
   2c3d2:	46c0      	nop			; (mov r8, r8)
   2c3d4:	0002bb1d 	.word	0x0002bb1d
   2c3d8:	0002bf8d 	.word	0x0002bf8d
   2c3dc:	0002b885 	.word	0x0002b885
   2c3e0:	0002b7d9 	.word	0x0002b7d9
   2c3e4:	0002bae5 	.word	0x0002bae5

0002c3e8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2c3e8:	b590      	push	{r4, r7, lr}
   2c3ea:	b087      	sub	sp, #28
   2c3ec:	af00      	add	r7, sp, #0
   2c3ee:	6078      	str	r0, [r7, #4]
   2c3f0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2c3f2:	683b      	ldr	r3, [r7, #0]
   2c3f4:	781b      	ldrb	r3, [r3, #0]
   2c3f6:	001a      	movs	r2, r3
   2c3f8:	2340      	movs	r3, #64	; 0x40
   2c3fa:	439a      	bics	r2, r3
   2c3fc:	0013      	movs	r3, r2
   2c3fe:	1e5a      	subs	r2, r3, #1
   2c400:	0013      	movs	r3, r2
   2c402:	005b      	lsls	r3, r3, #1
   2c404:	189b      	adds	r3, r3, r2
   2c406:	009b      	lsls	r3, r3, #2
   2c408:	189b      	adds	r3, r3, r2
   2c40a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2c40c:	2300      	movs	r3, #0
   2c40e:	613b      	str	r3, [r7, #16]
   2c410:	230e      	movs	r3, #14
   2c412:	18fb      	adds	r3, r7, r3
   2c414:	2201      	movs	r2, #1
   2c416:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2c418:	4a31      	ldr	r2, [pc, #196]	; (2c4e0 <cmp_lfn+0xf8>)
   2c41a:	693b      	ldr	r3, [r7, #16]
   2c41c:	18d3      	adds	r3, r2, r3
   2c41e:	781b      	ldrb	r3, [r3, #0]
   2c420:	3301      	adds	r3, #1
   2c422:	683a      	ldr	r2, [r7, #0]
   2c424:	18d3      	adds	r3, r2, r3
   2c426:	781b      	ldrb	r3, [r3, #0]
   2c428:	021b      	lsls	r3, r3, #8
   2c42a:	b21a      	sxth	r2, r3
   2c42c:	492c      	ldr	r1, [pc, #176]	; (2c4e0 <cmp_lfn+0xf8>)
   2c42e:	693b      	ldr	r3, [r7, #16]
   2c430:	18cb      	adds	r3, r1, r3
   2c432:	781b      	ldrb	r3, [r3, #0]
   2c434:	0019      	movs	r1, r3
   2c436:	683b      	ldr	r3, [r7, #0]
   2c438:	185b      	adds	r3, r3, r1
   2c43a:	781b      	ldrb	r3, [r3, #0]
   2c43c:	b21b      	sxth	r3, r3
   2c43e:	4313      	orrs	r3, r2
   2c440:	b21a      	sxth	r2, r3
   2c442:	230c      	movs	r3, #12
   2c444:	18fb      	adds	r3, r7, r3
   2c446:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2c448:	230e      	movs	r3, #14
   2c44a:	18fb      	adds	r3, r7, r3
   2c44c:	881b      	ldrh	r3, [r3, #0]
   2c44e:	2b00      	cmp	r3, #0
   2c450:	d01f      	beq.n	2c492 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2c452:	230e      	movs	r3, #14
   2c454:	18fc      	adds	r4, r7, r3
   2c456:	230c      	movs	r3, #12
   2c458:	18fb      	adds	r3, r7, r3
   2c45a:	881b      	ldrh	r3, [r3, #0]
   2c45c:	0018      	movs	r0, r3
   2c45e:	4b21      	ldr	r3, [pc, #132]	; (2c4e4 <cmp_lfn+0xfc>)
   2c460:	4798      	blx	r3
   2c462:	0003      	movs	r3, r0
   2c464:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2c466:	697b      	ldr	r3, [r7, #20]
   2c468:	2bfe      	cmp	r3, #254	; 0xfe
   2c46a:	d810      	bhi.n	2c48e <cmp_lfn+0xa6>
   2c46c:	697b      	ldr	r3, [r7, #20]
   2c46e:	1c5a      	adds	r2, r3, #1
   2c470:	617a      	str	r2, [r7, #20]
   2c472:	005b      	lsls	r3, r3, #1
   2c474:	687a      	ldr	r2, [r7, #4]
   2c476:	18d3      	adds	r3, r2, r3
   2c478:	881b      	ldrh	r3, [r3, #0]
   2c47a:	0018      	movs	r0, r3
   2c47c:	4b19      	ldr	r3, [pc, #100]	; (2c4e4 <cmp_lfn+0xfc>)
   2c47e:	4798      	blx	r3
   2c480:	0003      	movs	r3, r0
   2c482:	001a      	movs	r2, r3
   2c484:	230e      	movs	r3, #14
   2c486:	18fb      	adds	r3, r7, r3
   2c488:	881b      	ldrh	r3, [r3, #0]
   2c48a:	4293      	cmp	r3, r2
   2c48c:	d009      	beq.n	2c4a2 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2c48e:	2300      	movs	r3, #0
   2c490:	e022      	b.n	2c4d8 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2c492:	230c      	movs	r3, #12
   2c494:	18fb      	adds	r3, r7, r3
   2c496:	881b      	ldrh	r3, [r3, #0]
   2c498:	4a13      	ldr	r2, [pc, #76]	; (2c4e8 <cmp_lfn+0x100>)
   2c49a:	4293      	cmp	r3, r2
   2c49c:	d001      	beq.n	2c4a2 <cmp_lfn+0xba>
   2c49e:	2300      	movs	r3, #0
   2c4a0:	e01a      	b.n	2c4d8 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2c4a2:	693b      	ldr	r3, [r7, #16]
   2c4a4:	3301      	adds	r3, #1
   2c4a6:	613b      	str	r3, [r7, #16]
   2c4a8:	693b      	ldr	r3, [r7, #16]
   2c4aa:	2b0c      	cmp	r3, #12
   2c4ac:	d9b4      	bls.n	2c418 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2c4ae:	683b      	ldr	r3, [r7, #0]
   2c4b0:	781b      	ldrb	r3, [r3, #0]
   2c4b2:	001a      	movs	r2, r3
   2c4b4:	2340      	movs	r3, #64	; 0x40
   2c4b6:	4013      	ands	r3, r2
   2c4b8:	d00d      	beq.n	2c4d6 <cmp_lfn+0xee>
   2c4ba:	230e      	movs	r3, #14
   2c4bc:	18fb      	adds	r3, r7, r3
   2c4be:	881b      	ldrh	r3, [r3, #0]
   2c4c0:	2b00      	cmp	r3, #0
   2c4c2:	d008      	beq.n	2c4d6 <cmp_lfn+0xee>
   2c4c4:	697b      	ldr	r3, [r7, #20]
   2c4c6:	005b      	lsls	r3, r3, #1
   2c4c8:	687a      	ldr	r2, [r7, #4]
   2c4ca:	18d3      	adds	r3, r2, r3
   2c4cc:	881b      	ldrh	r3, [r3, #0]
   2c4ce:	2b00      	cmp	r3, #0
   2c4d0:	d001      	beq.n	2c4d6 <cmp_lfn+0xee>
		return 0;
   2c4d2:	2300      	movs	r3, #0
   2c4d4:	e000      	b.n	2c4d8 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2c4d6:	2301      	movs	r3, #1
}
   2c4d8:	0018      	movs	r0, r3
   2c4da:	46bd      	mov	sp, r7
   2c4dc:	b007      	add	sp, #28
   2c4de:	bd90      	pop	{r4, r7, pc}
   2c4e0:	000396e0 	.word	0x000396e0
   2c4e4:	0002e495 	.word	0x0002e495
   2c4e8:	0000ffff 	.word	0x0000ffff

0002c4ec <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2c4ec:	b580      	push	{r7, lr}
   2c4ee:	b088      	sub	sp, #32
   2c4f0:	af00      	add	r7, sp, #0
   2c4f2:	60f8      	str	r0, [r7, #12]
   2c4f4:	60b9      	str	r1, [r7, #8]
   2c4f6:	0019      	movs	r1, r3
   2c4f8:	1dfb      	adds	r3, r7, #7
   2c4fa:	701a      	strb	r2, [r3, #0]
   2c4fc:	1dbb      	adds	r3, r7, #6
   2c4fe:	1c0a      	adds	r2, r1, #0
   2c500:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2c502:	68bb      	ldr	r3, [r7, #8]
   2c504:	330d      	adds	r3, #13
   2c506:	1dba      	adds	r2, r7, #6
   2c508:	7812      	ldrb	r2, [r2, #0]
   2c50a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2c50c:	68bb      	ldr	r3, [r7, #8]
   2c50e:	330b      	adds	r3, #11
   2c510:	220f      	movs	r2, #15
   2c512:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2c514:	68bb      	ldr	r3, [r7, #8]
   2c516:	330c      	adds	r3, #12
   2c518:	2200      	movs	r2, #0
   2c51a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2c51c:	68bb      	ldr	r3, [r7, #8]
   2c51e:	331a      	adds	r3, #26
   2c520:	2200      	movs	r2, #0
   2c522:	701a      	strb	r2, [r3, #0]
   2c524:	68bb      	ldr	r3, [r7, #8]
   2c526:	331b      	adds	r3, #27
   2c528:	2200      	movs	r2, #0
   2c52a:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2c52c:	1dfb      	adds	r3, r7, #7
   2c52e:	781b      	ldrb	r3, [r3, #0]
   2c530:	1e5a      	subs	r2, r3, #1
   2c532:	0013      	movs	r3, r2
   2c534:	005b      	lsls	r3, r3, #1
   2c536:	189b      	adds	r3, r3, r2
   2c538:	009b      	lsls	r3, r3, #2
   2c53a:	189b      	adds	r3, r3, r2
   2c53c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2c53e:	2316      	movs	r3, #22
   2c540:	18fb      	adds	r3, r7, r3
   2c542:	2200      	movs	r2, #0
   2c544:	801a      	strh	r2, [r3, #0]
   2c546:	2300      	movs	r3, #0
   2c548:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2c54a:	2316      	movs	r3, #22
   2c54c:	18fb      	adds	r3, r7, r3
   2c54e:	881b      	ldrh	r3, [r3, #0]
   2c550:	4a28      	ldr	r2, [pc, #160]	; (2c5f4 <fit_lfn+0x108>)
   2c552:	4293      	cmp	r3, r2
   2c554:	d009      	beq.n	2c56a <fit_lfn+0x7e>
   2c556:	69fb      	ldr	r3, [r7, #28]
   2c558:	1c5a      	adds	r2, r3, #1
   2c55a:	61fa      	str	r2, [r7, #28]
   2c55c:	005b      	lsls	r3, r3, #1
   2c55e:	68fa      	ldr	r2, [r7, #12]
   2c560:	18d2      	adds	r2, r2, r3
   2c562:	2316      	movs	r3, #22
   2c564:	18fb      	adds	r3, r7, r3
   2c566:	8812      	ldrh	r2, [r2, #0]
   2c568:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2c56a:	4a23      	ldr	r2, [pc, #140]	; (2c5f8 <fit_lfn+0x10c>)
   2c56c:	69bb      	ldr	r3, [r7, #24]
   2c56e:	18d3      	adds	r3, r2, r3
   2c570:	781b      	ldrb	r3, [r3, #0]
   2c572:	001a      	movs	r2, r3
   2c574:	68bb      	ldr	r3, [r7, #8]
   2c576:	189b      	adds	r3, r3, r2
   2c578:	2216      	movs	r2, #22
   2c57a:	18ba      	adds	r2, r7, r2
   2c57c:	8812      	ldrh	r2, [r2, #0]
   2c57e:	b2d2      	uxtb	r2, r2
   2c580:	701a      	strb	r2, [r3, #0]
   2c582:	4a1d      	ldr	r2, [pc, #116]	; (2c5f8 <fit_lfn+0x10c>)
   2c584:	69bb      	ldr	r3, [r7, #24]
   2c586:	18d3      	adds	r3, r2, r3
   2c588:	781b      	ldrb	r3, [r3, #0]
   2c58a:	3301      	adds	r3, #1
   2c58c:	68ba      	ldr	r2, [r7, #8]
   2c58e:	18d3      	adds	r3, r2, r3
   2c590:	2216      	movs	r2, #22
   2c592:	18ba      	adds	r2, r7, r2
   2c594:	8812      	ldrh	r2, [r2, #0]
   2c596:	0a12      	lsrs	r2, r2, #8
   2c598:	b292      	uxth	r2, r2
   2c59a:	b2d2      	uxtb	r2, r2
   2c59c:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2c59e:	2316      	movs	r3, #22
   2c5a0:	18fb      	adds	r3, r7, r3
   2c5a2:	881b      	ldrh	r3, [r3, #0]
   2c5a4:	2b00      	cmp	r3, #0
   2c5a6:	d104      	bne.n	2c5b2 <fit_lfn+0xc6>
   2c5a8:	2316      	movs	r3, #22
   2c5aa:	18fb      	adds	r3, r7, r3
   2c5ac:	2201      	movs	r2, #1
   2c5ae:	4252      	negs	r2, r2
   2c5b0:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2c5b2:	69bb      	ldr	r3, [r7, #24]
   2c5b4:	3301      	adds	r3, #1
   2c5b6:	61bb      	str	r3, [r7, #24]
   2c5b8:	69bb      	ldr	r3, [r7, #24]
   2c5ba:	2b0c      	cmp	r3, #12
   2c5bc:	d9c5      	bls.n	2c54a <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2c5be:	2316      	movs	r3, #22
   2c5c0:	18fb      	adds	r3, r7, r3
   2c5c2:	881b      	ldrh	r3, [r3, #0]
   2c5c4:	4a0b      	ldr	r2, [pc, #44]	; (2c5f4 <fit_lfn+0x108>)
   2c5c6:	4293      	cmp	r3, r2
   2c5c8:	d006      	beq.n	2c5d8 <fit_lfn+0xec>
   2c5ca:	69fb      	ldr	r3, [r7, #28]
   2c5cc:	005b      	lsls	r3, r3, #1
   2c5ce:	68fa      	ldr	r2, [r7, #12]
   2c5d0:	18d3      	adds	r3, r2, r3
   2c5d2:	881b      	ldrh	r3, [r3, #0]
   2c5d4:	2b00      	cmp	r3, #0
   2c5d6:	d105      	bne.n	2c5e4 <fit_lfn+0xf8>
   2c5d8:	1dfb      	adds	r3, r7, #7
   2c5da:	1dfa      	adds	r2, r7, #7
   2c5dc:	7812      	ldrb	r2, [r2, #0]
   2c5de:	2140      	movs	r1, #64	; 0x40
   2c5e0:	430a      	orrs	r2, r1
   2c5e2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2c5e4:	68bb      	ldr	r3, [r7, #8]
   2c5e6:	1dfa      	adds	r2, r7, #7
   2c5e8:	7812      	ldrb	r2, [r2, #0]
   2c5ea:	701a      	strb	r2, [r3, #0]
}
   2c5ec:	46c0      	nop			; (mov r8, r8)
   2c5ee:	46bd      	mov	sp, r7
   2c5f0:	b008      	add	sp, #32
   2c5f2:	bd80      	pop	{r7, pc}
   2c5f4:	0000ffff 	.word	0x0000ffff
   2c5f8:	000396e0 	.word	0x000396e0

0002c5fc <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2c5fc:	b580      	push	{r7, lr}
   2c5fe:	b08a      	sub	sp, #40	; 0x28
   2c600:	af00      	add	r7, sp, #0
   2c602:	60f8      	str	r0, [r7, #12]
   2c604:	60b9      	str	r1, [r7, #8]
   2c606:	607a      	str	r2, [r7, #4]
   2c608:	001a      	movs	r2, r3
   2c60a:	1cbb      	adds	r3, r7, #2
   2c60c:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2c60e:	68b9      	ldr	r1, [r7, #8]
   2c610:	68fb      	ldr	r3, [r7, #12]
   2c612:	220b      	movs	r2, #11
   2c614:	0018      	movs	r0, r3
   2c616:	4b38      	ldr	r3, [pc, #224]	; (2c6f8 <gen_numname+0xfc>)
   2c618:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2c61a:	1cbb      	adds	r3, r7, #2
   2c61c:	881b      	ldrh	r3, [r3, #0]
   2c61e:	2b05      	cmp	r3, #5
   2c620:	d911      	bls.n	2c646 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2c622:	1cbb      	adds	r3, r7, #2
   2c624:	881b      	ldrh	r3, [r3, #0]
   2c626:	b29a      	uxth	r2, r3
   2c628:	0852      	lsrs	r2, r2, #1
   2c62a:	03db      	lsls	r3, r3, #15
   2c62c:	4313      	orrs	r3, r2
   2c62e:	b299      	uxth	r1, r3
   2c630:	687b      	ldr	r3, [r7, #4]
   2c632:	1c9a      	adds	r2, r3, #2
   2c634:	607a      	str	r2, [r7, #4]
   2c636:	881a      	ldrh	r2, [r3, #0]
   2c638:	1cbb      	adds	r3, r7, #2
   2c63a:	188a      	adds	r2, r1, r2
   2c63c:	801a      	strh	r2, [r3, #0]
   2c63e:	687b      	ldr	r3, [r7, #4]
   2c640:	881b      	ldrh	r3, [r3, #0]
   2c642:	2b00      	cmp	r3, #0
   2c644:	d1ed      	bne.n	2c622 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2c646:	2307      	movs	r3, #7
   2c648:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2c64a:	1cbb      	adds	r3, r7, #2
   2c64c:	881b      	ldrh	r3, [r3, #0]
   2c64e:	b2db      	uxtb	r3, r3
   2c650:	220f      	movs	r2, #15
   2c652:	4013      	ands	r3, r2
   2c654:	b2da      	uxtb	r2, r3
   2c656:	2327      	movs	r3, #39	; 0x27
   2c658:	18fb      	adds	r3, r7, r3
   2c65a:	3230      	adds	r2, #48	; 0x30
   2c65c:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2c65e:	2327      	movs	r3, #39	; 0x27
   2c660:	18fb      	adds	r3, r7, r3
   2c662:	781b      	ldrb	r3, [r3, #0]
   2c664:	2b39      	cmp	r3, #57	; 0x39
   2c666:	d906      	bls.n	2c676 <gen_numname+0x7a>
   2c668:	2327      	movs	r3, #39	; 0x27
   2c66a:	18fb      	adds	r3, r7, r3
   2c66c:	2227      	movs	r2, #39	; 0x27
   2c66e:	18ba      	adds	r2, r7, r2
   2c670:	7812      	ldrb	r2, [r2, #0]
   2c672:	3207      	adds	r2, #7
   2c674:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2c676:	6a3b      	ldr	r3, [r7, #32]
   2c678:	1e5a      	subs	r2, r3, #1
   2c67a:	623a      	str	r2, [r7, #32]
   2c67c:	2214      	movs	r2, #20
   2c67e:	18ba      	adds	r2, r7, r2
   2c680:	2127      	movs	r1, #39	; 0x27
   2c682:	1879      	adds	r1, r7, r1
   2c684:	7809      	ldrb	r1, [r1, #0]
   2c686:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2c688:	1cbb      	adds	r3, r7, #2
   2c68a:	1cba      	adds	r2, r7, #2
   2c68c:	8812      	ldrh	r2, [r2, #0]
   2c68e:	0912      	lsrs	r2, r2, #4
   2c690:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2c692:	1cbb      	adds	r3, r7, #2
   2c694:	881b      	ldrh	r3, [r3, #0]
   2c696:	2b00      	cmp	r3, #0
   2c698:	d1d7      	bne.n	2c64a <gen_numname+0x4e>
	ns[i] = '~';
   2c69a:	2314      	movs	r3, #20
   2c69c:	18fa      	adds	r2, r7, r3
   2c69e:	6a3b      	ldr	r3, [r7, #32]
   2c6a0:	18d3      	adds	r3, r2, r3
   2c6a2:	227e      	movs	r2, #126	; 0x7e
   2c6a4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2c6a6:	2300      	movs	r3, #0
   2c6a8:	61fb      	str	r3, [r7, #28]
   2c6aa:	e002      	b.n	2c6b2 <gen_numname+0xb6>
   2c6ac:	69fb      	ldr	r3, [r7, #28]
   2c6ae:	3301      	adds	r3, #1
   2c6b0:	61fb      	str	r3, [r7, #28]
   2c6b2:	69fa      	ldr	r2, [r7, #28]
   2c6b4:	6a3b      	ldr	r3, [r7, #32]
   2c6b6:	429a      	cmp	r2, r3
   2c6b8:	d205      	bcs.n	2c6c6 <gen_numname+0xca>
   2c6ba:	68fa      	ldr	r2, [r7, #12]
   2c6bc:	69fb      	ldr	r3, [r7, #28]
   2c6be:	18d3      	adds	r3, r2, r3
   2c6c0:	781b      	ldrb	r3, [r3, #0]
   2c6c2:	2b20      	cmp	r3, #32
   2c6c4:	d1f2      	bne.n	2c6ac <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2c6c6:	69fb      	ldr	r3, [r7, #28]
   2c6c8:	1c5a      	adds	r2, r3, #1
   2c6ca:	61fa      	str	r2, [r7, #28]
   2c6cc:	68fa      	ldr	r2, [r7, #12]
   2c6ce:	18d2      	adds	r2, r2, r3
   2c6d0:	6a3b      	ldr	r3, [r7, #32]
   2c6d2:	2b07      	cmp	r3, #7
   2c6d4:	d806      	bhi.n	2c6e4 <gen_numname+0xe8>
   2c6d6:	6a3b      	ldr	r3, [r7, #32]
   2c6d8:	1c59      	adds	r1, r3, #1
   2c6da:	6239      	str	r1, [r7, #32]
   2c6dc:	2114      	movs	r1, #20
   2c6de:	1879      	adds	r1, r7, r1
   2c6e0:	5ccb      	ldrb	r3, [r1, r3]
   2c6e2:	e000      	b.n	2c6e6 <gen_numname+0xea>
   2c6e4:	2320      	movs	r3, #32
   2c6e6:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2c6e8:	69fb      	ldr	r3, [r7, #28]
   2c6ea:	2b07      	cmp	r3, #7
   2c6ec:	d9eb      	bls.n	2c6c6 <gen_numname+0xca>
}
   2c6ee:	46c0      	nop			; (mov r8, r8)
   2c6f0:	46bd      	mov	sp, r7
   2c6f2:	b00a      	add	sp, #40	; 0x28
   2c6f4:	bd80      	pop	{r7, pc}
   2c6f6:	46c0      	nop			; (mov r8, r8)
   2c6f8:	0002b7a1 	.word	0x0002b7a1

0002c6fc <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2c6fc:	b580      	push	{r7, lr}
   2c6fe:	b084      	sub	sp, #16
   2c700:	af00      	add	r7, sp, #0
   2c702:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2c704:	230f      	movs	r3, #15
   2c706:	18fb      	adds	r3, r7, r3
   2c708:	2200      	movs	r2, #0
   2c70a:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2c70c:	230b      	movs	r3, #11
   2c70e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2c710:	230f      	movs	r3, #15
   2c712:	18fb      	adds	r3, r7, r3
   2c714:	781b      	ldrb	r3, [r3, #0]
   2c716:	b2da      	uxtb	r2, r3
   2c718:	0852      	lsrs	r2, r2, #1
   2c71a:	01db      	lsls	r3, r3, #7
   2c71c:	4313      	orrs	r3, r2
   2c71e:	b2d9      	uxtb	r1, r3
   2c720:	687b      	ldr	r3, [r7, #4]
   2c722:	1c5a      	adds	r2, r3, #1
   2c724:	607a      	str	r2, [r7, #4]
   2c726:	781a      	ldrb	r2, [r3, #0]
   2c728:	230f      	movs	r3, #15
   2c72a:	18fb      	adds	r3, r7, r3
   2c72c:	188a      	adds	r2, r1, r2
   2c72e:	701a      	strb	r2, [r3, #0]
   2c730:	68bb      	ldr	r3, [r7, #8]
   2c732:	3b01      	subs	r3, #1
   2c734:	60bb      	str	r3, [r7, #8]
   2c736:	68bb      	ldr	r3, [r7, #8]
   2c738:	2b00      	cmp	r3, #0
   2c73a:	d1e9      	bne.n	2c710 <sum_sfn+0x14>
	return sum;
   2c73c:	230f      	movs	r3, #15
   2c73e:	18fb      	adds	r3, r7, r3
   2c740:	781b      	ldrb	r3, [r3, #0]
}
   2c742:	0018      	movs	r0, r3
   2c744:	46bd      	mov	sp, r7
   2c746:	b004      	add	sp, #16
   2c748:	bd80      	pop	{r7, pc}
	...

0002c74c <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2c74c:	b590      	push	{r4, r7, lr}
   2c74e:	b087      	sub	sp, #28
   2c750:	af00      	add	r7, sp, #0
   2c752:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2c754:	2317      	movs	r3, #23
   2c756:	18fc      	adds	r4, r7, r3
   2c758:	687b      	ldr	r3, [r7, #4]
   2c75a:	2100      	movs	r1, #0
   2c75c:	0018      	movs	r0, r3
   2c75e:	4b74      	ldr	r3, [pc, #464]	; (2c930 <dir_find+0x1e4>)
   2c760:	4798      	blx	r3
   2c762:	0003      	movs	r3, r0
   2c764:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c766:	2317      	movs	r3, #23
   2c768:	18fb      	adds	r3, r7, r3
   2c76a:	781b      	ldrb	r3, [r3, #0]
   2c76c:	2b00      	cmp	r3, #0
   2c76e:	d003      	beq.n	2c778 <dir_find+0x2c>
   2c770:	2317      	movs	r3, #23
   2c772:	18fb      	adds	r3, r7, r3
   2c774:	781b      	ldrb	r3, [r3, #0]
   2c776:	e0d6      	b.n	2c926 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2c778:	2314      	movs	r3, #20
   2c77a:	18fb      	adds	r3, r7, r3
   2c77c:	22ff      	movs	r2, #255	; 0xff
   2c77e:	701a      	strb	r2, [r3, #0]
   2c780:	2315      	movs	r3, #21
   2c782:	18fb      	adds	r3, r7, r3
   2c784:	2214      	movs	r2, #20
   2c786:	18ba      	adds	r2, r7, r2
   2c788:	7812      	ldrb	r2, [r2, #0]
   2c78a:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2c78c:	687b      	ldr	r3, [r7, #4]
   2c78e:	681a      	ldr	r2, [r3, #0]
   2c790:	687b      	ldr	r3, [r7, #4]
   2c792:	691b      	ldr	r3, [r3, #16]
   2c794:	2117      	movs	r1, #23
   2c796:	187c      	adds	r4, r7, r1
   2c798:	0019      	movs	r1, r3
   2c79a:	0010      	movs	r0, r2
   2c79c:	4b65      	ldr	r3, [pc, #404]	; (2c934 <dir_find+0x1e8>)
   2c79e:	4798      	blx	r3
   2c7a0:	0003      	movs	r3, r0
   2c7a2:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c7a4:	2317      	movs	r3, #23
   2c7a6:	18fb      	adds	r3, r7, r3
   2c7a8:	781b      	ldrb	r3, [r3, #0]
   2c7aa:	2b00      	cmp	r3, #0
   2c7ac:	d000      	beq.n	2c7b0 <dir_find+0x64>
   2c7ae:	e0b2      	b.n	2c916 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2c7b0:	687b      	ldr	r3, [r7, #4]
   2c7b2:	695b      	ldr	r3, [r3, #20]
   2c7b4:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2c7b6:	2316      	movs	r3, #22
   2c7b8:	18fb      	adds	r3, r7, r3
   2c7ba:	693a      	ldr	r2, [r7, #16]
   2c7bc:	7812      	ldrb	r2, [r2, #0]
   2c7be:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2c7c0:	2316      	movs	r3, #22
   2c7c2:	18fb      	adds	r3, r7, r3
   2c7c4:	781b      	ldrb	r3, [r3, #0]
   2c7c6:	2b00      	cmp	r3, #0
   2c7c8:	d104      	bne.n	2c7d4 <dir_find+0x88>
   2c7ca:	2317      	movs	r3, #23
   2c7cc:	18fb      	adds	r3, r7, r3
   2c7ce:	2204      	movs	r2, #4
   2c7d0:	701a      	strb	r2, [r3, #0]
   2c7d2:	e0a5      	b.n	2c920 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2c7d4:	693b      	ldr	r3, [r7, #16]
   2c7d6:	330b      	adds	r3, #11
   2c7d8:	781a      	ldrb	r2, [r3, #0]
   2c7da:	230f      	movs	r3, #15
   2c7dc:	18fb      	adds	r3, r7, r3
   2c7de:	213f      	movs	r1, #63	; 0x3f
   2c7e0:	400a      	ands	r2, r1
   2c7e2:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2c7e4:	2316      	movs	r3, #22
   2c7e6:	18fb      	adds	r3, r7, r3
   2c7e8:	781b      	ldrb	r3, [r3, #0]
   2c7ea:	2be5      	cmp	r3, #229	; 0xe5
   2c7ec:	d00a      	beq.n	2c804 <dir_find+0xb8>
   2c7ee:	230f      	movs	r3, #15
   2c7f0:	18fb      	adds	r3, r7, r3
   2c7f2:	781b      	ldrb	r3, [r3, #0]
   2c7f4:	2208      	movs	r2, #8
   2c7f6:	4013      	ands	r3, r2
   2c7f8:	d009      	beq.n	2c80e <dir_find+0xc2>
   2c7fa:	230f      	movs	r3, #15
   2c7fc:	18fb      	adds	r3, r7, r3
   2c7fe:	781b      	ldrb	r3, [r3, #0]
   2c800:	2b0f      	cmp	r3, #15
   2c802:	d004      	beq.n	2c80e <dir_find+0xc2>
			ord = 0xFF;
   2c804:	2315      	movs	r3, #21
   2c806:	18fb      	adds	r3, r7, r3
   2c808:	22ff      	movs	r2, #255	; 0xff
   2c80a:	701a      	strb	r2, [r3, #0]
   2c80c:	e073      	b.n	2c8f6 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2c80e:	230f      	movs	r3, #15
   2c810:	18fb      	adds	r3, r7, r3
   2c812:	781b      	ldrb	r3, [r3, #0]
   2c814:	2b0f      	cmp	r3, #15
   2c816:	d145      	bne.n	2c8a4 <dir_find+0x158>
				if (dj->lfn) {
   2c818:	687b      	ldr	r3, [r7, #4]
   2c81a:	69db      	ldr	r3, [r3, #28]
   2c81c:	2b00      	cmp	r3, #0
   2c81e:	d100      	bne.n	2c822 <dir_find+0xd6>
   2c820:	e069      	b.n	2c8f6 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2c822:	2316      	movs	r3, #22
   2c824:	18fb      	adds	r3, r7, r3
   2c826:	781b      	ldrb	r3, [r3, #0]
   2c828:	2240      	movs	r2, #64	; 0x40
   2c82a:	4013      	ands	r3, r2
   2c82c:	d016      	beq.n	2c85c <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2c82e:	2314      	movs	r3, #20
   2c830:	18fb      	adds	r3, r7, r3
   2c832:	693a      	ldr	r2, [r7, #16]
   2c834:	7b52      	ldrb	r2, [r2, #13]
   2c836:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2c838:	2316      	movs	r3, #22
   2c83a:	18fb      	adds	r3, r7, r3
   2c83c:	2216      	movs	r2, #22
   2c83e:	18ba      	adds	r2, r7, r2
   2c840:	7812      	ldrb	r2, [r2, #0]
   2c842:	2140      	movs	r1, #64	; 0x40
   2c844:	438a      	bics	r2, r1
   2c846:	701a      	strb	r2, [r3, #0]
   2c848:	2315      	movs	r3, #21
   2c84a:	18fb      	adds	r3, r7, r3
   2c84c:	2216      	movs	r2, #22
   2c84e:	18ba      	adds	r2, r7, r2
   2c850:	7812      	ldrb	r2, [r2, #0]
   2c852:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2c854:	687b      	ldr	r3, [r7, #4]
   2c856:	88da      	ldrh	r2, [r3, #6]
   2c858:	687b      	ldr	r3, [r7, #4]
   2c85a:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2c85c:	2316      	movs	r3, #22
   2c85e:	18fa      	adds	r2, r7, r3
   2c860:	2315      	movs	r3, #21
   2c862:	18fb      	adds	r3, r7, r3
   2c864:	7812      	ldrb	r2, [r2, #0]
   2c866:	781b      	ldrb	r3, [r3, #0]
   2c868:	429a      	cmp	r2, r3
   2c86a:	d116      	bne.n	2c89a <dir_find+0x14e>
   2c86c:	693b      	ldr	r3, [r7, #16]
   2c86e:	330d      	adds	r3, #13
   2c870:	781b      	ldrb	r3, [r3, #0]
   2c872:	2214      	movs	r2, #20
   2c874:	18ba      	adds	r2, r7, r2
   2c876:	7812      	ldrb	r2, [r2, #0]
   2c878:	429a      	cmp	r2, r3
   2c87a:	d10e      	bne.n	2c89a <dir_find+0x14e>
   2c87c:	687b      	ldr	r3, [r7, #4]
   2c87e:	69db      	ldr	r3, [r3, #28]
   2c880:	693a      	ldr	r2, [r7, #16]
   2c882:	0011      	movs	r1, r2
   2c884:	0018      	movs	r0, r3
   2c886:	4b2c      	ldr	r3, [pc, #176]	; (2c938 <dir_find+0x1ec>)
   2c888:	4798      	blx	r3
   2c88a:	1e03      	subs	r3, r0, #0
   2c88c:	d005      	beq.n	2c89a <dir_find+0x14e>
   2c88e:	2315      	movs	r3, #21
   2c890:	18fb      	adds	r3, r7, r3
   2c892:	781b      	ldrb	r3, [r3, #0]
   2c894:	3b01      	subs	r3, #1
   2c896:	b2da      	uxtb	r2, r3
   2c898:	e000      	b.n	2c89c <dir_find+0x150>
   2c89a:	22ff      	movs	r2, #255	; 0xff
   2c89c:	2315      	movs	r3, #21
   2c89e:	18fb      	adds	r3, r7, r3
   2c8a0:	701a      	strb	r2, [r3, #0]
   2c8a2:	e028      	b.n	2c8f6 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c8a4:	2315      	movs	r3, #21
   2c8a6:	18fb      	adds	r3, r7, r3
   2c8a8:	781b      	ldrb	r3, [r3, #0]
   2c8aa:	2b00      	cmp	r3, #0
   2c8ac:	d10a      	bne.n	2c8c4 <dir_find+0x178>
   2c8ae:	693b      	ldr	r3, [r7, #16]
   2c8b0:	0018      	movs	r0, r3
   2c8b2:	4b22      	ldr	r3, [pc, #136]	; (2c93c <dir_find+0x1f0>)
   2c8b4:	4798      	blx	r3
   2c8b6:	0003      	movs	r3, r0
   2c8b8:	001a      	movs	r2, r3
   2c8ba:	2314      	movs	r3, #20
   2c8bc:	18fb      	adds	r3, r7, r3
   2c8be:	781b      	ldrb	r3, [r3, #0]
   2c8c0:	4293      	cmp	r3, r2
   2c8c2:	d02a      	beq.n	2c91a <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2c8c4:	2315      	movs	r3, #21
   2c8c6:	18fb      	adds	r3, r7, r3
   2c8c8:	22ff      	movs	r2, #255	; 0xff
   2c8ca:	701a      	strb	r2, [r3, #0]
   2c8cc:	687b      	ldr	r3, [r7, #4]
   2c8ce:	2201      	movs	r2, #1
   2c8d0:	4252      	negs	r2, r2
   2c8d2:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c8d4:	687b      	ldr	r3, [r7, #4]
   2c8d6:	699b      	ldr	r3, [r3, #24]
   2c8d8:	330b      	adds	r3, #11
   2c8da:	781b      	ldrb	r3, [r3, #0]
   2c8dc:	001a      	movs	r2, r3
   2c8de:	2301      	movs	r3, #1
   2c8e0:	4013      	ands	r3, r2
   2c8e2:	d108      	bne.n	2c8f6 <dir_find+0x1aa>
   2c8e4:	687b      	ldr	r3, [r7, #4]
   2c8e6:	6999      	ldr	r1, [r3, #24]
   2c8e8:	693b      	ldr	r3, [r7, #16]
   2c8ea:	220b      	movs	r2, #11
   2c8ec:	0018      	movs	r0, r3
   2c8ee:	4b14      	ldr	r3, [pc, #80]	; (2c940 <dir_find+0x1f4>)
   2c8f0:	4798      	blx	r3
   2c8f2:	1e03      	subs	r3, r0, #0
   2c8f4:	d013      	beq.n	2c91e <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2c8f6:	2317      	movs	r3, #23
   2c8f8:	18fc      	adds	r4, r7, r3
   2c8fa:	687b      	ldr	r3, [r7, #4]
   2c8fc:	2100      	movs	r1, #0
   2c8fe:	0018      	movs	r0, r3
   2c900:	4b10      	ldr	r3, [pc, #64]	; (2c944 <dir_find+0x1f8>)
   2c902:	4798      	blx	r3
   2c904:	0003      	movs	r3, r0
   2c906:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c908:	2317      	movs	r3, #23
   2c90a:	18fb      	adds	r3, r7, r3
   2c90c:	781b      	ldrb	r3, [r3, #0]
   2c90e:	2b00      	cmp	r3, #0
   2c910:	d100      	bne.n	2c914 <dir_find+0x1c8>
   2c912:	e73b      	b.n	2c78c <dir_find+0x40>
   2c914:	e004      	b.n	2c920 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2c916:	46c0      	nop			; (mov r8, r8)
   2c918:	e002      	b.n	2c920 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c91a:	46c0      	nop			; (mov r8, r8)
   2c91c:	e000      	b.n	2c920 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c91e:	46c0      	nop			; (mov r8, r8)

	return res;
   2c920:	2317      	movs	r3, #23
   2c922:	18fb      	adds	r3, r7, r3
   2c924:	781b      	ldrb	r3, [r3, #0]
}
   2c926:	0018      	movs	r0, r3
   2c928:	46bd      	mov	sp, r7
   2c92a:	b007      	add	sp, #28
   2c92c:	bd90      	pop	{r4, r7, pc}
   2c92e:	46c0      	nop			; (mov r8, r8)
   2c930:	0002c0c9 	.word	0x0002c0c9
   2c934:	0002b885 	.word	0x0002b885
   2c938:	0002c3e9 	.word	0x0002c3e9
   2c93c:	0002c6fd 	.word	0x0002c6fd
   2c940:	0002b809 	.word	0x0002b809
   2c944:	0002c1f9 	.word	0x0002c1f9

0002c948 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2c948:	b590      	push	{r4, r7, lr}
   2c94a:	b08d      	sub	sp, #52	; 0x34
   2c94c:	af00      	add	r7, sp, #0
   2c94e:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2c950:	687b      	ldr	r3, [r7, #4]
   2c952:	699b      	ldr	r3, [r3, #24]
   2c954:	627b      	str	r3, [r7, #36]	; 0x24
   2c956:	687b      	ldr	r3, [r7, #4]
   2c958:	69db      	ldr	r3, [r3, #28]
   2c95a:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2c95c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2c95e:	230c      	movs	r3, #12
   2c960:	18fb      	adds	r3, r7, r3
   2c962:	220c      	movs	r2, #12
   2c964:	0018      	movs	r0, r3
   2c966:	4bc8      	ldr	r3, [pc, #800]	; (2cc88 <dir_register+0x340>)
   2c968:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2c96a:	230c      	movs	r3, #12
   2c96c:	18fb      	adds	r3, r7, r3
   2c96e:	7adb      	ldrb	r3, [r3, #11]
   2c970:	001a      	movs	r2, r3
   2c972:	2301      	movs	r3, #1
   2c974:	4013      	ands	r3, r2
   2c976:	d048      	beq.n	2ca0a <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c97a:	330b      	adds	r3, #11
   2c97c:	2200      	movs	r2, #0
   2c97e:	701a      	strb	r2, [r3, #0]
   2c980:	687b      	ldr	r3, [r7, #4]
   2c982:	2200      	movs	r2, #0
   2c984:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2c986:	232c      	movs	r3, #44	; 0x2c
   2c988:	18fb      	adds	r3, r7, r3
   2c98a:	2201      	movs	r2, #1
   2c98c:	801a      	strh	r2, [r3, #0]
   2c98e:	e01c      	b.n	2c9ca <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2c990:	232c      	movs	r3, #44	; 0x2c
   2c992:	18fb      	adds	r3, r7, r3
   2c994:	881b      	ldrh	r3, [r3, #0]
   2c996:	6a3a      	ldr	r2, [r7, #32]
   2c998:	210c      	movs	r1, #12
   2c99a:	1879      	adds	r1, r7, r1
   2c99c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2c99e:	4cbb      	ldr	r4, [pc, #748]	; (2cc8c <dir_register+0x344>)
   2c9a0:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2c9a2:	232f      	movs	r3, #47	; 0x2f
   2c9a4:	18fc      	adds	r4, r7, r3
   2c9a6:	687b      	ldr	r3, [r7, #4]
   2c9a8:	0018      	movs	r0, r3
   2c9aa:	4bb9      	ldr	r3, [pc, #740]	; (2cc90 <dir_register+0x348>)
   2c9ac:	4798      	blx	r3
   2c9ae:	0003      	movs	r3, r0
   2c9b0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c9b2:	232f      	movs	r3, #47	; 0x2f
   2c9b4:	18fb      	adds	r3, r7, r3
   2c9b6:	781b      	ldrb	r3, [r3, #0]
   2c9b8:	2b00      	cmp	r3, #0
   2c9ba:	d10c      	bne.n	2c9d6 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2c9bc:	232c      	movs	r3, #44	; 0x2c
   2c9be:	18fb      	adds	r3, r7, r3
   2c9c0:	881a      	ldrh	r2, [r3, #0]
   2c9c2:	232c      	movs	r3, #44	; 0x2c
   2c9c4:	18fb      	adds	r3, r7, r3
   2c9c6:	3201      	adds	r2, #1
   2c9c8:	801a      	strh	r2, [r3, #0]
   2c9ca:	232c      	movs	r3, #44	; 0x2c
   2c9cc:	18fb      	adds	r3, r7, r3
   2c9ce:	881b      	ldrh	r3, [r3, #0]
   2c9d0:	2b63      	cmp	r3, #99	; 0x63
   2c9d2:	d9dd      	bls.n	2c990 <dir_register+0x48>
   2c9d4:	e000      	b.n	2c9d8 <dir_register+0x90>
			if (res != FR_OK) break;
   2c9d6:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2c9d8:	232c      	movs	r3, #44	; 0x2c
   2c9da:	18fb      	adds	r3, r7, r3
   2c9dc:	881b      	ldrh	r3, [r3, #0]
   2c9de:	2b64      	cmp	r3, #100	; 0x64
   2c9e0:	d101      	bne.n	2c9e6 <dir_register+0x9e>
   2c9e2:	2307      	movs	r3, #7
   2c9e4:	e14c      	b.n	2cc80 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2c9e6:	232f      	movs	r3, #47	; 0x2f
   2c9e8:	18fb      	adds	r3, r7, r3
   2c9ea:	781b      	ldrb	r3, [r3, #0]
   2c9ec:	2b04      	cmp	r3, #4
   2c9ee:	d003      	beq.n	2c9f8 <dir_register+0xb0>
   2c9f0:	232f      	movs	r3, #47	; 0x2f
   2c9f2:	18fb      	adds	r3, r7, r3
   2c9f4:	781b      	ldrb	r3, [r3, #0]
   2c9f6:	e143      	b.n	2cc80 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c9fa:	330b      	adds	r3, #11
   2c9fc:	220c      	movs	r2, #12
   2c9fe:	18ba      	adds	r2, r7, r2
   2ca00:	7ad2      	ldrb	r2, [r2, #11]
   2ca02:	701a      	strb	r2, [r3, #0]
   2ca04:	687b      	ldr	r3, [r7, #4]
   2ca06:	6a3a      	ldr	r2, [r7, #32]
   2ca08:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2ca0a:	230c      	movs	r3, #12
   2ca0c:	18fb      	adds	r3, r7, r3
   2ca0e:	7adb      	ldrb	r3, [r3, #11]
   2ca10:	001a      	movs	r2, r3
   2ca12:	2302      	movs	r3, #2
   2ca14:	4013      	ands	r3, r2
   2ca16:	d023      	beq.n	2ca60 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2ca18:	232a      	movs	r3, #42	; 0x2a
   2ca1a:	18fb      	adds	r3, r7, r3
   2ca1c:	2200      	movs	r2, #0
   2ca1e:	801a      	strh	r2, [r3, #0]
   2ca20:	e006      	b.n	2ca30 <dir_register+0xe8>
   2ca22:	232a      	movs	r3, #42	; 0x2a
   2ca24:	18fb      	adds	r3, r7, r3
   2ca26:	881a      	ldrh	r2, [r3, #0]
   2ca28:	232a      	movs	r3, #42	; 0x2a
   2ca2a:	18fb      	adds	r3, r7, r3
   2ca2c:	3201      	adds	r2, #1
   2ca2e:	801a      	strh	r2, [r3, #0]
   2ca30:	232a      	movs	r3, #42	; 0x2a
   2ca32:	18fb      	adds	r3, r7, r3
   2ca34:	881b      	ldrh	r3, [r3, #0]
   2ca36:	005b      	lsls	r3, r3, #1
   2ca38:	6a3a      	ldr	r2, [r7, #32]
   2ca3a:	18d3      	adds	r3, r2, r3
   2ca3c:	881b      	ldrh	r3, [r3, #0]
   2ca3e:	2b00      	cmp	r3, #0
   2ca40:	d1ef      	bne.n	2ca22 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2ca42:	232a      	movs	r3, #42	; 0x2a
   2ca44:	18fb      	adds	r3, r7, r3
   2ca46:	881b      	ldrh	r3, [r3, #0]
   2ca48:	3319      	adds	r3, #25
   2ca4a:	001a      	movs	r2, r3
   2ca4c:	4b91      	ldr	r3, [pc, #580]	; (2cc94 <dir_register+0x34c>)
   2ca4e:	210d      	movs	r1, #13
   2ca50:	0010      	movs	r0, r2
   2ca52:	4798      	blx	r3
   2ca54:	0003      	movs	r3, r0
   2ca56:	001a      	movs	r2, r3
   2ca58:	232a      	movs	r3, #42	; 0x2a
   2ca5a:	18fb      	adds	r3, r7, r3
   2ca5c:	801a      	strh	r2, [r3, #0]
   2ca5e:	e003      	b.n	2ca68 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2ca60:	232a      	movs	r3, #42	; 0x2a
   2ca62:	18fb      	adds	r3, r7, r3
   2ca64:	2201      	movs	r2, #1
   2ca66:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2ca68:	232f      	movs	r3, #47	; 0x2f
   2ca6a:	18fc      	adds	r4, r7, r3
   2ca6c:	687b      	ldr	r3, [r7, #4]
   2ca6e:	2100      	movs	r1, #0
   2ca70:	0018      	movs	r0, r3
   2ca72:	4b89      	ldr	r3, [pc, #548]	; (2cc98 <dir_register+0x350>)
   2ca74:	4798      	blx	r3
   2ca76:	0003      	movs	r3, r0
   2ca78:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2ca7a:	232f      	movs	r3, #47	; 0x2f
   2ca7c:	18fb      	adds	r3, r7, r3
   2ca7e:	781b      	ldrb	r3, [r3, #0]
   2ca80:	2b00      	cmp	r3, #0
   2ca82:	d003      	beq.n	2ca8c <dir_register+0x144>
   2ca84:	232f      	movs	r3, #47	; 0x2f
   2ca86:	18fb      	adds	r3, r7, r3
   2ca88:	781b      	ldrb	r3, [r3, #0]
   2ca8a:	e0f9      	b.n	2cc80 <dir_register+0x338>
	n = is = 0;
   2ca8c:	2328      	movs	r3, #40	; 0x28
   2ca8e:	18fb      	adds	r3, r7, r3
   2ca90:	2200      	movs	r2, #0
   2ca92:	801a      	strh	r2, [r3, #0]
   2ca94:	232c      	movs	r3, #44	; 0x2c
   2ca96:	18fb      	adds	r3, r7, r3
   2ca98:	2228      	movs	r2, #40	; 0x28
   2ca9a:	18ba      	adds	r2, r7, r2
   2ca9c:	8812      	ldrh	r2, [r2, #0]
   2ca9e:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2caa0:	687b      	ldr	r3, [r7, #4]
   2caa2:	681a      	ldr	r2, [r3, #0]
   2caa4:	687b      	ldr	r3, [r7, #4]
   2caa6:	691b      	ldr	r3, [r3, #16]
   2caa8:	212f      	movs	r1, #47	; 0x2f
   2caaa:	187c      	adds	r4, r7, r1
   2caac:	0019      	movs	r1, r3
   2caae:	0010      	movs	r0, r2
   2cab0:	4b7a      	ldr	r3, [pc, #488]	; (2cc9c <dir_register+0x354>)
   2cab2:	4798      	blx	r3
   2cab4:	0003      	movs	r3, r0
   2cab6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2cab8:	232f      	movs	r3, #47	; 0x2f
   2caba:	18fb      	adds	r3, r7, r3
   2cabc:	781b      	ldrb	r3, [r3, #0]
   2cabe:	2b00      	cmp	r3, #0
   2cac0:	d13c      	bne.n	2cb3c <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2cac2:	687b      	ldr	r3, [r7, #4]
   2cac4:	695a      	ldr	r2, [r3, #20]
   2cac6:	231f      	movs	r3, #31
   2cac8:	18fb      	adds	r3, r7, r3
   2caca:	7812      	ldrb	r2, [r2, #0]
   2cacc:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2cace:	231f      	movs	r3, #31
   2cad0:	18fb      	adds	r3, r7, r3
   2cad2:	781b      	ldrb	r3, [r3, #0]
   2cad4:	2be5      	cmp	r3, #229	; 0xe5
   2cad6:	d004      	beq.n	2cae2 <dir_register+0x19a>
   2cad8:	231f      	movs	r3, #31
   2cada:	18fb      	adds	r3, r7, r3
   2cadc:	781b      	ldrb	r3, [r3, #0]
   2cade:	2b00      	cmp	r3, #0
   2cae0:	d119      	bne.n	2cb16 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2cae2:	232c      	movs	r3, #44	; 0x2c
   2cae4:	18fb      	adds	r3, r7, r3
   2cae6:	881b      	ldrh	r3, [r3, #0]
   2cae8:	2b00      	cmp	r3, #0
   2caea:	d104      	bne.n	2caf6 <dir_register+0x1ae>
   2caec:	2328      	movs	r3, #40	; 0x28
   2caee:	18fb      	adds	r3, r7, r3
   2caf0:	687a      	ldr	r2, [r7, #4]
   2caf2:	88d2      	ldrh	r2, [r2, #6]
   2caf4:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2caf6:	232c      	movs	r3, #44	; 0x2c
   2caf8:	18fb      	adds	r3, r7, r3
   2cafa:	222c      	movs	r2, #44	; 0x2c
   2cafc:	18ba      	adds	r2, r7, r2
   2cafe:	8812      	ldrh	r2, [r2, #0]
   2cb00:	3201      	adds	r2, #1
   2cb02:	801a      	strh	r2, [r3, #0]
   2cb04:	232c      	movs	r3, #44	; 0x2c
   2cb06:	18fa      	adds	r2, r7, r3
   2cb08:	232a      	movs	r3, #42	; 0x2a
   2cb0a:	18fb      	adds	r3, r7, r3
   2cb0c:	8812      	ldrh	r2, [r2, #0]
   2cb0e:	881b      	ldrh	r3, [r3, #0]
   2cb10:	429a      	cmp	r2, r3
   2cb12:	d104      	bne.n	2cb1e <dir_register+0x1d6>
   2cb14:	e013      	b.n	2cb3e <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2cb16:	232c      	movs	r3, #44	; 0x2c
   2cb18:	18fb      	adds	r3, r7, r3
   2cb1a:	2200      	movs	r2, #0
   2cb1c:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2cb1e:	232f      	movs	r3, #47	; 0x2f
   2cb20:	18fc      	adds	r4, r7, r3
   2cb22:	687b      	ldr	r3, [r7, #4]
   2cb24:	2101      	movs	r1, #1
   2cb26:	0018      	movs	r0, r3
   2cb28:	4b5d      	ldr	r3, [pc, #372]	; (2cca0 <dir_register+0x358>)
   2cb2a:	4798      	blx	r3
   2cb2c:	0003      	movs	r3, r0
   2cb2e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2cb30:	232f      	movs	r3, #47	; 0x2f
   2cb32:	18fb      	adds	r3, r7, r3
   2cb34:	781b      	ldrb	r3, [r3, #0]
   2cb36:	2b00      	cmp	r3, #0
   2cb38:	d0b2      	beq.n	2caa0 <dir_register+0x158>
   2cb3a:	e000      	b.n	2cb3e <dir_register+0x1f6>
		if (res != FR_OK) break;
   2cb3c:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2cb3e:	232f      	movs	r3, #47	; 0x2f
   2cb40:	18fb      	adds	r3, r7, r3
   2cb42:	781b      	ldrb	r3, [r3, #0]
   2cb44:	2b00      	cmp	r3, #0
   2cb46:	d163      	bne.n	2cc10 <dir_register+0x2c8>
   2cb48:	232a      	movs	r3, #42	; 0x2a
   2cb4a:	18fb      	adds	r3, r7, r3
   2cb4c:	881b      	ldrh	r3, [r3, #0]
   2cb4e:	2b01      	cmp	r3, #1
   2cb50:	d95e      	bls.n	2cc10 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2cb52:	232f      	movs	r3, #47	; 0x2f
   2cb54:	18fc      	adds	r4, r7, r3
   2cb56:	2328      	movs	r3, #40	; 0x28
   2cb58:	18fb      	adds	r3, r7, r3
   2cb5a:	881a      	ldrh	r2, [r3, #0]
   2cb5c:	687b      	ldr	r3, [r7, #4]
   2cb5e:	0011      	movs	r1, r2
   2cb60:	0018      	movs	r0, r3
   2cb62:	4b4d      	ldr	r3, [pc, #308]	; (2cc98 <dir_register+0x350>)
   2cb64:	4798      	blx	r3
   2cb66:	0003      	movs	r3, r0
   2cb68:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2cb6a:	232f      	movs	r3, #47	; 0x2f
   2cb6c:	18fb      	adds	r3, r7, r3
   2cb6e:	781b      	ldrb	r3, [r3, #0]
   2cb70:	2b00      	cmp	r3, #0
   2cb72:	d14d      	bne.n	2cc10 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2cb74:	687b      	ldr	r3, [r7, #4]
   2cb76:	699b      	ldr	r3, [r3, #24]
   2cb78:	221e      	movs	r2, #30
   2cb7a:	18bc      	adds	r4, r7, r2
   2cb7c:	0018      	movs	r0, r3
   2cb7e:	4b49      	ldr	r3, [pc, #292]	; (2cca4 <dir_register+0x35c>)
   2cb80:	4798      	blx	r3
   2cb82:	0003      	movs	r3, r0
   2cb84:	7023      	strb	r3, [r4, #0]
			ne--;
   2cb86:	232a      	movs	r3, #42	; 0x2a
   2cb88:	18fb      	adds	r3, r7, r3
   2cb8a:	881a      	ldrh	r2, [r3, #0]
   2cb8c:	232a      	movs	r3, #42	; 0x2a
   2cb8e:	18fb      	adds	r3, r7, r3
   2cb90:	3a01      	subs	r2, #1
   2cb92:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2cb94:	687b      	ldr	r3, [r7, #4]
   2cb96:	681a      	ldr	r2, [r3, #0]
   2cb98:	687b      	ldr	r3, [r7, #4]
   2cb9a:	691b      	ldr	r3, [r3, #16]
   2cb9c:	212f      	movs	r1, #47	; 0x2f
   2cb9e:	187c      	adds	r4, r7, r1
   2cba0:	0019      	movs	r1, r3
   2cba2:	0010      	movs	r0, r2
   2cba4:	4b3d      	ldr	r3, [pc, #244]	; (2cc9c <dir_register+0x354>)
   2cba6:	4798      	blx	r3
   2cba8:	0003      	movs	r3, r0
   2cbaa:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2cbac:	232f      	movs	r3, #47	; 0x2f
   2cbae:	18fb      	adds	r3, r7, r3
   2cbb0:	781b      	ldrb	r3, [r3, #0]
   2cbb2:	2b00      	cmp	r3, #0
   2cbb4:	d12b      	bne.n	2cc0e <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2cbb6:	687b      	ldr	r3, [r7, #4]
   2cbb8:	69d8      	ldr	r0, [r3, #28]
   2cbba:	687b      	ldr	r3, [r7, #4]
   2cbbc:	6959      	ldr	r1, [r3, #20]
   2cbbe:	232a      	movs	r3, #42	; 0x2a
   2cbc0:	18fb      	adds	r3, r7, r3
   2cbc2:	881b      	ldrh	r3, [r3, #0]
   2cbc4:	b2da      	uxtb	r2, r3
   2cbc6:	231e      	movs	r3, #30
   2cbc8:	18fb      	adds	r3, r7, r3
   2cbca:	781b      	ldrb	r3, [r3, #0]
   2cbcc:	4c36      	ldr	r4, [pc, #216]	; (2cca8 <dir_register+0x360>)
   2cbce:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2cbd0:	687b      	ldr	r3, [r7, #4]
   2cbd2:	681b      	ldr	r3, [r3, #0]
   2cbd4:	2201      	movs	r2, #1
   2cbd6:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2cbd8:	232f      	movs	r3, #47	; 0x2f
   2cbda:	18fc      	adds	r4, r7, r3
   2cbdc:	687b      	ldr	r3, [r7, #4]
   2cbde:	2100      	movs	r1, #0
   2cbe0:	0018      	movs	r0, r3
   2cbe2:	4b2f      	ldr	r3, [pc, #188]	; (2cca0 <dir_register+0x358>)
   2cbe4:	4798      	blx	r3
   2cbe6:	0003      	movs	r3, r0
   2cbe8:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2cbea:	232f      	movs	r3, #47	; 0x2f
   2cbec:	18fb      	adds	r3, r7, r3
   2cbee:	781b      	ldrb	r3, [r3, #0]
   2cbf0:	2b00      	cmp	r3, #0
   2cbf2:	d10d      	bne.n	2cc10 <dir_register+0x2c8>
   2cbf4:	232a      	movs	r3, #42	; 0x2a
   2cbf6:	18fb      	adds	r3, r7, r3
   2cbf8:	222a      	movs	r2, #42	; 0x2a
   2cbfa:	18ba      	adds	r2, r7, r2
   2cbfc:	8812      	ldrh	r2, [r2, #0]
   2cbfe:	3a01      	subs	r2, #1
   2cc00:	801a      	strh	r2, [r3, #0]
   2cc02:	232a      	movs	r3, #42	; 0x2a
   2cc04:	18fb      	adds	r3, r7, r3
   2cc06:	881b      	ldrh	r3, [r3, #0]
   2cc08:	2b00      	cmp	r3, #0
   2cc0a:	d1c3      	bne.n	2cb94 <dir_register+0x24c>
   2cc0c:	e000      	b.n	2cc10 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2cc0e:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2cc10:	232f      	movs	r3, #47	; 0x2f
   2cc12:	18fb      	adds	r3, r7, r3
   2cc14:	781b      	ldrb	r3, [r3, #0]
   2cc16:	2b00      	cmp	r3, #0
   2cc18:	d12f      	bne.n	2cc7a <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2cc1a:	687b      	ldr	r3, [r7, #4]
   2cc1c:	681a      	ldr	r2, [r3, #0]
   2cc1e:	687b      	ldr	r3, [r7, #4]
   2cc20:	691b      	ldr	r3, [r3, #16]
   2cc22:	212f      	movs	r1, #47	; 0x2f
   2cc24:	187c      	adds	r4, r7, r1
   2cc26:	0019      	movs	r1, r3
   2cc28:	0010      	movs	r0, r2
   2cc2a:	4b1c      	ldr	r3, [pc, #112]	; (2cc9c <dir_register+0x354>)
   2cc2c:	4798      	blx	r3
   2cc2e:	0003      	movs	r3, r0
   2cc30:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2cc32:	232f      	movs	r3, #47	; 0x2f
   2cc34:	18fb      	adds	r3, r7, r3
   2cc36:	781b      	ldrb	r3, [r3, #0]
   2cc38:	2b00      	cmp	r3, #0
   2cc3a:	d11e      	bne.n	2cc7a <dir_register+0x332>
			dir = dj->dir;
   2cc3c:	687b      	ldr	r3, [r7, #4]
   2cc3e:	695b      	ldr	r3, [r3, #20]
   2cc40:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2cc42:	69bb      	ldr	r3, [r7, #24]
   2cc44:	2220      	movs	r2, #32
   2cc46:	2100      	movs	r1, #0
   2cc48:	0018      	movs	r0, r3
   2cc4a:	4b18      	ldr	r3, [pc, #96]	; (2ccac <dir_register+0x364>)
   2cc4c:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2cc4e:	687b      	ldr	r3, [r7, #4]
   2cc50:	6999      	ldr	r1, [r3, #24]
   2cc52:	69bb      	ldr	r3, [r7, #24]
   2cc54:	220b      	movs	r2, #11
   2cc56:	0018      	movs	r0, r3
   2cc58:	4b0b      	ldr	r3, [pc, #44]	; (2cc88 <dir_register+0x340>)
   2cc5a:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2cc5c:	69bb      	ldr	r3, [r7, #24]
   2cc5e:	330c      	adds	r3, #12
   2cc60:	001a      	movs	r2, r3
   2cc62:	687b      	ldr	r3, [r7, #4]
   2cc64:	699b      	ldr	r3, [r3, #24]
   2cc66:	330b      	adds	r3, #11
   2cc68:	781b      	ldrb	r3, [r3, #0]
   2cc6a:	2118      	movs	r1, #24
   2cc6c:	400b      	ands	r3, r1
   2cc6e:	b2db      	uxtb	r3, r3
   2cc70:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2cc72:	687b      	ldr	r3, [r7, #4]
   2cc74:	681b      	ldr	r3, [r3, #0]
   2cc76:	2201      	movs	r2, #1
   2cc78:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2cc7a:	232f      	movs	r3, #47	; 0x2f
   2cc7c:	18fb      	adds	r3, r7, r3
   2cc7e:	781b      	ldrb	r3, [r3, #0]
}
   2cc80:	0018      	movs	r0, r3
   2cc82:	46bd      	mov	sp, r7
   2cc84:	b00d      	add	sp, #52	; 0x34
   2cc86:	bd90      	pop	{r4, r7, pc}
   2cc88:	0002b7a1 	.word	0x0002b7a1
   2cc8c:	0002c5fd 	.word	0x0002c5fd
   2cc90:	0002c74d 	.word	0x0002c74d
   2cc94:	00032b99 	.word	0x00032b99
   2cc98:	0002c0c9 	.word	0x0002c0c9
   2cc9c:	0002b885 	.word	0x0002b885
   2cca0:	0002c1f9 	.word	0x0002c1f9
   2cca4:	0002c6fd 	.word	0x0002c6fd
   2cca8:	0002c4ed 	.word	0x0002c4ed
   2ccac:	0002b7d9 	.word	0x0002b7d9

0002ccb0 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2ccb0:	b590      	push	{r4, r7, lr}
   2ccb2:	b08b      	sub	sp, #44	; 0x2c
   2ccb4:	af00      	add	r7, sp, #0
   2ccb6:	6078      	str	r0, [r7, #4]
   2ccb8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2ccba:	683b      	ldr	r3, [r7, #0]
   2ccbc:	681b      	ldr	r3, [r3, #0]
   2ccbe:	613b      	str	r3, [r7, #16]
   2ccc0:	e002      	b.n	2ccc8 <create_name+0x18>
   2ccc2:	693b      	ldr	r3, [r7, #16]
   2ccc4:	3301      	adds	r3, #1
   2ccc6:	613b      	str	r3, [r7, #16]
   2ccc8:	693b      	ldr	r3, [r7, #16]
   2ccca:	781b      	ldrb	r3, [r3, #0]
   2cccc:	2b2f      	cmp	r3, #47	; 0x2f
   2ccce:	d0f8      	beq.n	2ccc2 <create_name+0x12>
   2ccd0:	693b      	ldr	r3, [r7, #16]
   2ccd2:	781b      	ldrb	r3, [r3, #0]
   2ccd4:	2b5c      	cmp	r3, #92	; 0x5c
   2ccd6:	d0f4      	beq.n	2ccc2 <create_name+0x12>
	lfn = dj->lfn;
   2ccd8:	687b      	ldr	r3, [r7, #4]
   2ccda:	69db      	ldr	r3, [r3, #28]
   2ccdc:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2ccde:	2300      	movs	r3, #0
   2cce0:	617b      	str	r3, [r7, #20]
   2cce2:	697b      	ldr	r3, [r7, #20]
   2cce4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2cce6:	69bb      	ldr	r3, [r7, #24]
   2cce8:	1c5a      	adds	r2, r3, #1
   2ccea:	61ba      	str	r2, [r7, #24]
   2ccec:	693a      	ldr	r2, [r7, #16]
   2ccee:	18d3      	adds	r3, r2, r3
   2ccf0:	781a      	ldrb	r2, [r3, #0]
   2ccf2:	2324      	movs	r3, #36	; 0x24
   2ccf4:	18fb      	adds	r3, r7, r3
   2ccf6:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2ccf8:	2324      	movs	r3, #36	; 0x24
   2ccfa:	18fb      	adds	r3, r7, r3
   2ccfc:	881b      	ldrh	r3, [r3, #0]
   2ccfe:	2b1f      	cmp	r3, #31
   2cd00:	d944      	bls.n	2cd8c <create_name+0xdc>
   2cd02:	2324      	movs	r3, #36	; 0x24
   2cd04:	18fb      	adds	r3, r7, r3
   2cd06:	881b      	ldrh	r3, [r3, #0]
   2cd08:	2b2f      	cmp	r3, #47	; 0x2f
   2cd0a:	d03f      	beq.n	2cd8c <create_name+0xdc>
   2cd0c:	2324      	movs	r3, #36	; 0x24
   2cd0e:	18fb      	adds	r3, r7, r3
   2cd10:	881b      	ldrh	r3, [r3, #0]
   2cd12:	2b5c      	cmp	r3, #92	; 0x5c
   2cd14:	d03a      	beq.n	2cd8c <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2cd16:	697b      	ldr	r3, [r7, #20]
   2cd18:	2bfe      	cmp	r3, #254	; 0xfe
   2cd1a:	d901      	bls.n	2cd20 <create_name+0x70>
			return FR_INVALID_NAME;
   2cd1c:	2306      	movs	r3, #6
   2cd1e:	e1e7      	b.n	2d0f0 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2cd20:	2324      	movs	r3, #36	; 0x24
   2cd22:	18fb      	adds	r3, r7, r3
   2cd24:	2224      	movs	r2, #36	; 0x24
   2cd26:	18ba      	adds	r2, r7, r2
   2cd28:	8812      	ldrh	r2, [r2, #0]
   2cd2a:	21ff      	movs	r1, #255	; 0xff
   2cd2c:	400a      	ands	r2, r1
   2cd2e:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2cd30:	2324      	movs	r3, #36	; 0x24
   2cd32:	18fc      	adds	r4, r7, r3
   2cd34:	2324      	movs	r3, #36	; 0x24
   2cd36:	18fb      	adds	r3, r7, r3
   2cd38:	881b      	ldrh	r3, [r3, #0]
   2cd3a:	2101      	movs	r1, #1
   2cd3c:	0018      	movs	r0, r3
   2cd3e:	4bba      	ldr	r3, [pc, #744]	; (2d028 <create_name+0x378>)
   2cd40:	4798      	blx	r3
   2cd42:	0003      	movs	r3, r0
   2cd44:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2cd46:	2324      	movs	r3, #36	; 0x24
   2cd48:	18fb      	adds	r3, r7, r3
   2cd4a:	881b      	ldrh	r3, [r3, #0]
   2cd4c:	2b00      	cmp	r3, #0
   2cd4e:	d101      	bne.n	2cd54 <create_name+0xa4>
   2cd50:	2306      	movs	r3, #6
   2cd52:	e1cd      	b.n	2d0f0 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2cd54:	2324      	movs	r3, #36	; 0x24
   2cd56:	18fb      	adds	r3, r7, r3
   2cd58:	881b      	ldrh	r3, [r3, #0]
   2cd5a:	2b7f      	cmp	r3, #127	; 0x7f
   2cd5c:	d80b      	bhi.n	2cd76 <create_name+0xc6>
   2cd5e:	2324      	movs	r3, #36	; 0x24
   2cd60:	18fb      	adds	r3, r7, r3
   2cd62:	881a      	ldrh	r2, [r3, #0]
   2cd64:	4bb1      	ldr	r3, [pc, #708]	; (2d02c <create_name+0x37c>)
   2cd66:	0011      	movs	r1, r2
   2cd68:	0018      	movs	r0, r3
   2cd6a:	4bb1      	ldr	r3, [pc, #708]	; (2d030 <create_name+0x380>)
   2cd6c:	4798      	blx	r3
   2cd6e:	1e03      	subs	r3, r0, #0
   2cd70:	d001      	beq.n	2cd76 <create_name+0xc6>
			return FR_INVALID_NAME;
   2cd72:	2306      	movs	r3, #6
   2cd74:	e1bc      	b.n	2d0f0 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2cd76:	697b      	ldr	r3, [r7, #20]
   2cd78:	1c5a      	adds	r2, r3, #1
   2cd7a:	617a      	str	r2, [r7, #20]
   2cd7c:	005b      	lsls	r3, r3, #1
   2cd7e:	68fa      	ldr	r2, [r7, #12]
   2cd80:	18d3      	adds	r3, r2, r3
   2cd82:	2224      	movs	r2, #36	; 0x24
   2cd84:	18ba      	adds	r2, r7, r2
   2cd86:	8812      	ldrh	r2, [r2, #0]
   2cd88:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2cd8a:	e7ac      	b.n	2cce6 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2cd8c:	693a      	ldr	r2, [r7, #16]
   2cd8e:	69bb      	ldr	r3, [r7, #24]
   2cd90:	18d2      	adds	r2, r2, r3
   2cd92:	683b      	ldr	r3, [r7, #0]
   2cd94:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2cd96:	2324      	movs	r3, #36	; 0x24
   2cd98:	18fb      	adds	r3, r7, r3
   2cd9a:	881b      	ldrh	r3, [r3, #0]
   2cd9c:	2b1f      	cmp	r3, #31
   2cd9e:	d801      	bhi.n	2cda4 <create_name+0xf4>
   2cda0:	2204      	movs	r2, #4
   2cda2:	e000      	b.n	2cda6 <create_name+0xf6>
   2cda4:	2200      	movs	r2, #0
   2cda6:	2326      	movs	r3, #38	; 0x26
   2cda8:	18fb      	adds	r3, r7, r3
   2cdaa:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2cdac:	e017      	b.n	2cdde <create_name+0x12e>
		w = lfn[di-1];
   2cdae:	697b      	ldr	r3, [r7, #20]
   2cdb0:	4aa0      	ldr	r2, [pc, #640]	; (2d034 <create_name+0x384>)
   2cdb2:	4694      	mov	ip, r2
   2cdb4:	4463      	add	r3, ip
   2cdb6:	005b      	lsls	r3, r3, #1
   2cdb8:	68fa      	ldr	r2, [r7, #12]
   2cdba:	18d2      	adds	r2, r2, r3
   2cdbc:	2324      	movs	r3, #36	; 0x24
   2cdbe:	18fb      	adds	r3, r7, r3
   2cdc0:	8812      	ldrh	r2, [r2, #0]
   2cdc2:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2cdc4:	2324      	movs	r3, #36	; 0x24
   2cdc6:	18fb      	adds	r3, r7, r3
   2cdc8:	881b      	ldrh	r3, [r3, #0]
   2cdca:	2b20      	cmp	r3, #32
   2cdcc:	d004      	beq.n	2cdd8 <create_name+0x128>
   2cdce:	2324      	movs	r3, #36	; 0x24
   2cdd0:	18fb      	adds	r3, r7, r3
   2cdd2:	881b      	ldrh	r3, [r3, #0]
   2cdd4:	2b2e      	cmp	r3, #46	; 0x2e
   2cdd6:	d106      	bne.n	2cde6 <create_name+0x136>
		di--;
   2cdd8:	697b      	ldr	r3, [r7, #20]
   2cdda:	3b01      	subs	r3, #1
   2cddc:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2cdde:	697b      	ldr	r3, [r7, #20]
   2cde0:	2b00      	cmp	r3, #0
   2cde2:	d1e4      	bne.n	2cdae <create_name+0xfe>
   2cde4:	e000      	b.n	2cde8 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2cde6:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2cde8:	697b      	ldr	r3, [r7, #20]
   2cdea:	2b00      	cmp	r3, #0
   2cdec:	d101      	bne.n	2cdf2 <create_name+0x142>
   2cdee:	2306      	movs	r3, #6
   2cdf0:	e17e      	b.n	2d0f0 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2cdf2:	697b      	ldr	r3, [r7, #20]
   2cdf4:	005b      	lsls	r3, r3, #1
   2cdf6:	68fa      	ldr	r2, [r7, #12]
   2cdf8:	18d3      	adds	r3, r2, r3
   2cdfa:	2200      	movs	r2, #0
   2cdfc:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2cdfe:	687b      	ldr	r3, [r7, #4]
   2ce00:	699b      	ldr	r3, [r3, #24]
   2ce02:	220b      	movs	r2, #11
   2ce04:	2120      	movs	r1, #32
   2ce06:	0018      	movs	r0, r3
   2ce08:	4b8b      	ldr	r3, [pc, #556]	; (2d038 <create_name+0x388>)
   2ce0a:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2ce0c:	2300      	movs	r3, #0
   2ce0e:	61bb      	str	r3, [r7, #24]
   2ce10:	e002      	b.n	2ce18 <create_name+0x168>
   2ce12:	69bb      	ldr	r3, [r7, #24]
   2ce14:	3301      	adds	r3, #1
   2ce16:	61bb      	str	r3, [r7, #24]
   2ce18:	69bb      	ldr	r3, [r7, #24]
   2ce1a:	005b      	lsls	r3, r3, #1
   2ce1c:	68fa      	ldr	r2, [r7, #12]
   2ce1e:	18d3      	adds	r3, r2, r3
   2ce20:	881b      	ldrh	r3, [r3, #0]
   2ce22:	2b20      	cmp	r3, #32
   2ce24:	d0f5      	beq.n	2ce12 <create_name+0x162>
   2ce26:	69bb      	ldr	r3, [r7, #24]
   2ce28:	005b      	lsls	r3, r3, #1
   2ce2a:	68fa      	ldr	r2, [r7, #12]
   2ce2c:	18d3      	adds	r3, r2, r3
   2ce2e:	881b      	ldrh	r3, [r3, #0]
   2ce30:	2b2e      	cmp	r3, #46	; 0x2e
   2ce32:	d0ee      	beq.n	2ce12 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2ce34:	69bb      	ldr	r3, [r7, #24]
   2ce36:	2b00      	cmp	r3, #0
   2ce38:	d00b      	beq.n	2ce52 <create_name+0x1a2>
   2ce3a:	2326      	movs	r3, #38	; 0x26
   2ce3c:	18fb      	adds	r3, r7, r3
   2ce3e:	2226      	movs	r2, #38	; 0x26
   2ce40:	18ba      	adds	r2, r7, r2
   2ce42:	7812      	ldrb	r2, [r2, #0]
   2ce44:	2103      	movs	r1, #3
   2ce46:	430a      	orrs	r2, r1
   2ce48:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2ce4a:	e002      	b.n	2ce52 <create_name+0x1a2>
   2ce4c:	697b      	ldr	r3, [r7, #20]
   2ce4e:	3b01      	subs	r3, #1
   2ce50:	617b      	str	r3, [r7, #20]
   2ce52:	697b      	ldr	r3, [r7, #20]
   2ce54:	2b00      	cmp	r3, #0
   2ce56:	d009      	beq.n	2ce6c <create_name+0x1bc>
   2ce58:	697b      	ldr	r3, [r7, #20]
   2ce5a:	4a76      	ldr	r2, [pc, #472]	; (2d034 <create_name+0x384>)
   2ce5c:	4694      	mov	ip, r2
   2ce5e:	4463      	add	r3, ip
   2ce60:	005b      	lsls	r3, r3, #1
   2ce62:	68fa      	ldr	r2, [r7, #12]
   2ce64:	18d3      	adds	r3, r2, r3
   2ce66:	881b      	ldrh	r3, [r3, #0]
   2ce68:	2b2e      	cmp	r3, #46	; 0x2e
   2ce6a:	d1ef      	bne.n	2ce4c <create_name+0x19c>

	b = i = 0; ni = 8;
   2ce6c:	2300      	movs	r3, #0
   2ce6e:	623b      	str	r3, [r7, #32]
   2ce70:	2327      	movs	r3, #39	; 0x27
   2ce72:	18fb      	adds	r3, r7, r3
   2ce74:	2200      	movs	r2, #0
   2ce76:	701a      	strb	r2, [r3, #0]
   2ce78:	2308      	movs	r3, #8
   2ce7a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2ce7c:	69bb      	ldr	r3, [r7, #24]
   2ce7e:	1c5a      	adds	r2, r3, #1
   2ce80:	61ba      	str	r2, [r7, #24]
   2ce82:	005b      	lsls	r3, r3, #1
   2ce84:	68fa      	ldr	r2, [r7, #12]
   2ce86:	18d2      	adds	r2, r2, r3
   2ce88:	2324      	movs	r3, #36	; 0x24
   2ce8a:	18fb      	adds	r3, r7, r3
   2ce8c:	8812      	ldrh	r2, [r2, #0]
   2ce8e:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2ce90:	2324      	movs	r3, #36	; 0x24
   2ce92:	18fb      	adds	r3, r7, r3
   2ce94:	881b      	ldrh	r3, [r3, #0]
   2ce96:	2b00      	cmp	r3, #0
   2ce98:	d100      	bne.n	2ce9c <create_name+0x1ec>
   2ce9a:	e0c3      	b.n	2d024 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2ce9c:	2324      	movs	r3, #36	; 0x24
   2ce9e:	18fb      	adds	r3, r7, r3
   2cea0:	881b      	ldrh	r3, [r3, #0]
   2cea2:	2b20      	cmp	r3, #32
   2cea4:	d008      	beq.n	2ceb8 <create_name+0x208>
   2cea6:	2324      	movs	r3, #36	; 0x24
   2cea8:	18fb      	adds	r3, r7, r3
   2ceaa:	881b      	ldrh	r3, [r3, #0]
   2ceac:	2b2e      	cmp	r3, #46	; 0x2e
   2ceae:	d10c      	bne.n	2ceca <create_name+0x21a>
   2ceb0:	69ba      	ldr	r2, [r7, #24]
   2ceb2:	697b      	ldr	r3, [r7, #20]
   2ceb4:	429a      	cmp	r2, r3
   2ceb6:	d008      	beq.n	2ceca <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2ceb8:	2326      	movs	r3, #38	; 0x26
   2ceba:	18fb      	adds	r3, r7, r3
   2cebc:	2226      	movs	r2, #38	; 0x26
   2cebe:	18ba      	adds	r2, r7, r2
   2cec0:	7812      	ldrb	r2, [r2, #0]
   2cec2:	2103      	movs	r1, #3
   2cec4:	430a      	orrs	r2, r1
   2cec6:	701a      	strb	r2, [r3, #0]
   2cec8:	e0ab      	b.n	2d022 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2ceca:	6a3a      	ldr	r2, [r7, #32]
   2cecc:	69fb      	ldr	r3, [r7, #28]
   2cece:	429a      	cmp	r2, r3
   2ced0:	d203      	bcs.n	2ceda <create_name+0x22a>
   2ced2:	69ba      	ldr	r2, [r7, #24]
   2ced4:	697b      	ldr	r3, [r7, #20]
   2ced6:	429a      	cmp	r2, r3
   2ced8:	d12a      	bne.n	2cf30 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2ceda:	69fb      	ldr	r3, [r7, #28]
   2cedc:	2b0b      	cmp	r3, #11
   2cede:	d108      	bne.n	2cef2 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2cee0:	2326      	movs	r3, #38	; 0x26
   2cee2:	18fb      	adds	r3, r7, r3
   2cee4:	2226      	movs	r2, #38	; 0x26
   2cee6:	18ba      	adds	r2, r7, r2
   2cee8:	7812      	ldrb	r2, [r2, #0]
   2ceea:	2103      	movs	r1, #3
   2ceec:	430a      	orrs	r2, r1
   2ceee:	701a      	strb	r2, [r3, #0]
   2cef0:	e0a9      	b.n	2d046 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2cef2:	69ba      	ldr	r2, [r7, #24]
   2cef4:	697b      	ldr	r3, [r7, #20]
   2cef6:	429a      	cmp	r2, r3
   2cef8:	d007      	beq.n	2cf0a <create_name+0x25a>
   2cefa:	2326      	movs	r3, #38	; 0x26
   2cefc:	18fb      	adds	r3, r7, r3
   2cefe:	2226      	movs	r2, #38	; 0x26
   2cf00:	18ba      	adds	r2, r7, r2
   2cf02:	7812      	ldrb	r2, [r2, #0]
   2cf04:	2103      	movs	r1, #3
   2cf06:	430a      	orrs	r2, r1
   2cf08:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2cf0a:	69ba      	ldr	r2, [r7, #24]
   2cf0c:	697b      	ldr	r3, [r7, #20]
   2cf0e:	429a      	cmp	r2, r3
   2cf10:	d900      	bls.n	2cf14 <create_name+0x264>
   2cf12:	e097      	b.n	2d044 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2cf14:	697b      	ldr	r3, [r7, #20]
   2cf16:	61bb      	str	r3, [r7, #24]
   2cf18:	2308      	movs	r3, #8
   2cf1a:	623b      	str	r3, [r7, #32]
   2cf1c:	230b      	movs	r3, #11
   2cf1e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2cf20:	2327      	movs	r3, #39	; 0x27
   2cf22:	18fb      	adds	r3, r7, r3
   2cf24:	2227      	movs	r2, #39	; 0x27
   2cf26:	18ba      	adds	r2, r7, r2
   2cf28:	7812      	ldrb	r2, [r2, #0]
   2cf2a:	0092      	lsls	r2, r2, #2
   2cf2c:	701a      	strb	r2, [r3, #0]
   2cf2e:	e078      	b.n	2d022 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2cf30:	2324      	movs	r3, #36	; 0x24
   2cf32:	18fb      	adds	r3, r7, r3
   2cf34:	881b      	ldrh	r3, [r3, #0]
   2cf36:	2b7f      	cmp	r3, #127	; 0x7f
   2cf38:	d920      	bls.n	2cf7c <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2cf3a:	2324      	movs	r3, #36	; 0x24
   2cf3c:	18fc      	adds	r4, r7, r3
   2cf3e:	2324      	movs	r3, #36	; 0x24
   2cf40:	18fb      	adds	r3, r7, r3
   2cf42:	881b      	ldrh	r3, [r3, #0]
   2cf44:	2100      	movs	r1, #0
   2cf46:	0018      	movs	r0, r3
   2cf48:	4b37      	ldr	r3, [pc, #220]	; (2d028 <create_name+0x378>)
   2cf4a:	4798      	blx	r3
   2cf4c:	0003      	movs	r3, r0
   2cf4e:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2cf50:	2324      	movs	r3, #36	; 0x24
   2cf52:	18fb      	adds	r3, r7, r3
   2cf54:	881b      	ldrh	r3, [r3, #0]
   2cf56:	2b00      	cmp	r3, #0
   2cf58:	d008      	beq.n	2cf6c <create_name+0x2bc>
   2cf5a:	2324      	movs	r3, #36	; 0x24
   2cf5c:	18fb      	adds	r3, r7, r3
   2cf5e:	881b      	ldrh	r3, [r3, #0]
   2cf60:	3b80      	subs	r3, #128	; 0x80
   2cf62:	4a36      	ldr	r2, [pc, #216]	; (2d03c <create_name+0x38c>)
   2cf64:	5cd2      	ldrb	r2, [r2, r3]
   2cf66:	2324      	movs	r3, #36	; 0x24
   2cf68:	18fb      	adds	r3, r7, r3
   2cf6a:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2cf6c:	2326      	movs	r3, #38	; 0x26
   2cf6e:	18fb      	adds	r3, r7, r3
   2cf70:	2226      	movs	r2, #38	; 0x26
   2cf72:	18ba      	adds	r2, r7, r2
   2cf74:	7812      	ldrb	r2, [r2, #0]
   2cf76:	2102      	movs	r1, #2
   2cf78:	430a      	orrs	r2, r1
   2cf7a:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2cf7c:	2324      	movs	r3, #36	; 0x24
   2cf7e:	18fb      	adds	r3, r7, r3
   2cf80:	881b      	ldrh	r3, [r3, #0]
   2cf82:	2b00      	cmp	r3, #0
   2cf84:	d009      	beq.n	2cf9a <create_name+0x2ea>
   2cf86:	2324      	movs	r3, #36	; 0x24
   2cf88:	18fb      	adds	r3, r7, r3
   2cf8a:	881a      	ldrh	r2, [r3, #0]
   2cf8c:	4b2c      	ldr	r3, [pc, #176]	; (2d040 <create_name+0x390>)
   2cf8e:	0011      	movs	r1, r2
   2cf90:	0018      	movs	r0, r3
   2cf92:	4b27      	ldr	r3, [pc, #156]	; (2d030 <create_name+0x380>)
   2cf94:	4798      	blx	r3
   2cf96:	1e03      	subs	r3, r0, #0
   2cf98:	d00c      	beq.n	2cfb4 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2cf9a:	2324      	movs	r3, #36	; 0x24
   2cf9c:	18fb      	adds	r3, r7, r3
   2cf9e:	225f      	movs	r2, #95	; 0x5f
   2cfa0:	801a      	strh	r2, [r3, #0]
   2cfa2:	2326      	movs	r3, #38	; 0x26
   2cfa4:	18fb      	adds	r3, r7, r3
   2cfa6:	2226      	movs	r2, #38	; 0x26
   2cfa8:	18ba      	adds	r2, r7, r2
   2cfaa:	7812      	ldrb	r2, [r2, #0]
   2cfac:	2103      	movs	r1, #3
   2cfae:	430a      	orrs	r2, r1
   2cfb0:	701a      	strb	r2, [r3, #0]
   2cfb2:	e02b      	b.n	2d00c <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2cfb4:	2324      	movs	r3, #36	; 0x24
   2cfb6:	18fb      	adds	r3, r7, r3
   2cfb8:	881b      	ldrh	r3, [r3, #0]
   2cfba:	2b40      	cmp	r3, #64	; 0x40
   2cfbc:	d90d      	bls.n	2cfda <create_name+0x32a>
   2cfbe:	2324      	movs	r3, #36	; 0x24
   2cfc0:	18fb      	adds	r3, r7, r3
   2cfc2:	881b      	ldrh	r3, [r3, #0]
   2cfc4:	2b5a      	cmp	r3, #90	; 0x5a
   2cfc6:	d808      	bhi.n	2cfda <create_name+0x32a>
					b |= 2;
   2cfc8:	2327      	movs	r3, #39	; 0x27
   2cfca:	18fb      	adds	r3, r7, r3
   2cfcc:	2227      	movs	r2, #39	; 0x27
   2cfce:	18ba      	adds	r2, r7, r2
   2cfd0:	7812      	ldrb	r2, [r2, #0]
   2cfd2:	2102      	movs	r1, #2
   2cfd4:	430a      	orrs	r2, r1
   2cfd6:	701a      	strb	r2, [r3, #0]
   2cfd8:	e018      	b.n	2d00c <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2cfda:	2324      	movs	r3, #36	; 0x24
   2cfdc:	18fb      	adds	r3, r7, r3
   2cfde:	881b      	ldrh	r3, [r3, #0]
   2cfe0:	2b60      	cmp	r3, #96	; 0x60
   2cfe2:	d913      	bls.n	2d00c <create_name+0x35c>
   2cfe4:	2324      	movs	r3, #36	; 0x24
   2cfe6:	18fb      	adds	r3, r7, r3
   2cfe8:	881b      	ldrh	r3, [r3, #0]
   2cfea:	2b7a      	cmp	r3, #122	; 0x7a
   2cfec:	d80e      	bhi.n	2d00c <create_name+0x35c>
						b |= 1; w -= 0x20;
   2cfee:	2327      	movs	r3, #39	; 0x27
   2cff0:	18fb      	adds	r3, r7, r3
   2cff2:	2227      	movs	r2, #39	; 0x27
   2cff4:	18ba      	adds	r2, r7, r2
   2cff6:	7812      	ldrb	r2, [r2, #0]
   2cff8:	2101      	movs	r1, #1
   2cffa:	430a      	orrs	r2, r1
   2cffc:	701a      	strb	r2, [r3, #0]
   2cffe:	2324      	movs	r3, #36	; 0x24
   2d000:	18fb      	adds	r3, r7, r3
   2d002:	2224      	movs	r2, #36	; 0x24
   2d004:	18ba      	adds	r2, r7, r2
   2d006:	8812      	ldrh	r2, [r2, #0]
   2d008:	3a20      	subs	r2, #32
   2d00a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2d00c:	687b      	ldr	r3, [r7, #4]
   2d00e:	699a      	ldr	r2, [r3, #24]
   2d010:	6a3b      	ldr	r3, [r7, #32]
   2d012:	1c59      	adds	r1, r3, #1
   2d014:	6239      	str	r1, [r7, #32]
   2d016:	18d3      	adds	r3, r2, r3
   2d018:	2224      	movs	r2, #36	; 0x24
   2d01a:	18ba      	adds	r2, r7, r2
   2d01c:	8812      	ldrh	r2, [r2, #0]
   2d01e:	b2d2      	uxtb	r2, r2
   2d020:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2d022:	e72b      	b.n	2ce7c <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2d024:	46c0      	nop			; (mov r8, r8)
   2d026:	e00e      	b.n	2d046 <create_name+0x396>
   2d028:	0002e3e9 	.word	0x0002e3e9
   2d02c:	000396f0 	.word	0x000396f0
   2d030:	0002b853 	.word	0x0002b853
   2d034:	7fffffff 	.word	0x7fffffff
   2d038:	0002b7d9 	.word	0x0002b7d9
   2d03c:	00039738 	.word	0x00039738
   2d040:	000396fc 	.word	0x000396fc
			if (si > di) break;			/* No extension */
   2d044:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2d046:	687b      	ldr	r3, [r7, #4]
   2d048:	699b      	ldr	r3, [r3, #24]
   2d04a:	781b      	ldrb	r3, [r3, #0]
   2d04c:	2be5      	cmp	r3, #229	; 0xe5
   2d04e:	d103      	bne.n	2d058 <create_name+0x3a8>
   2d050:	687b      	ldr	r3, [r7, #4]
   2d052:	699b      	ldr	r3, [r3, #24]
   2d054:	2205      	movs	r2, #5
   2d056:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2d058:	69fb      	ldr	r3, [r7, #28]
   2d05a:	2b08      	cmp	r3, #8
   2d05c:	d106      	bne.n	2d06c <create_name+0x3bc>
   2d05e:	2327      	movs	r3, #39	; 0x27
   2d060:	18fb      	adds	r3, r7, r3
   2d062:	2227      	movs	r2, #39	; 0x27
   2d064:	18ba      	adds	r2, r7, r2
   2d066:	7812      	ldrb	r2, [r2, #0]
   2d068:	0092      	lsls	r2, r2, #2
   2d06a:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2d06c:	2327      	movs	r3, #39	; 0x27
   2d06e:	18fb      	adds	r3, r7, r3
   2d070:	781b      	ldrb	r3, [r3, #0]
   2d072:	220c      	movs	r2, #12
   2d074:	4013      	ands	r3, r2
   2d076:	2b0c      	cmp	r3, #12
   2d078:	d006      	beq.n	2d088 <create_name+0x3d8>
   2d07a:	2327      	movs	r3, #39	; 0x27
   2d07c:	18fb      	adds	r3, r7, r3
   2d07e:	781b      	ldrb	r3, [r3, #0]
   2d080:	2203      	movs	r2, #3
   2d082:	4013      	ands	r3, r2
   2d084:	2b03      	cmp	r3, #3
   2d086:	d107      	bne.n	2d098 <create_name+0x3e8>
		cf |= NS_LFN;
   2d088:	2326      	movs	r3, #38	; 0x26
   2d08a:	18fb      	adds	r3, r7, r3
   2d08c:	2226      	movs	r2, #38	; 0x26
   2d08e:	18ba      	adds	r2, r7, r2
   2d090:	7812      	ldrb	r2, [r2, #0]
   2d092:	2102      	movs	r1, #2
   2d094:	430a      	orrs	r2, r1
   2d096:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2d098:	2326      	movs	r3, #38	; 0x26
   2d09a:	18fb      	adds	r3, r7, r3
   2d09c:	781b      	ldrb	r3, [r3, #0]
   2d09e:	2202      	movs	r2, #2
   2d0a0:	4013      	ands	r3, r2
   2d0a2:	d11d      	bne.n	2d0e0 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2d0a4:	2327      	movs	r3, #39	; 0x27
   2d0a6:	18fb      	adds	r3, r7, r3
   2d0a8:	781b      	ldrb	r3, [r3, #0]
   2d0aa:	2203      	movs	r2, #3
   2d0ac:	4013      	ands	r3, r2
   2d0ae:	2b01      	cmp	r3, #1
   2d0b0:	d107      	bne.n	2d0c2 <create_name+0x412>
   2d0b2:	2326      	movs	r3, #38	; 0x26
   2d0b4:	18fb      	adds	r3, r7, r3
   2d0b6:	2226      	movs	r2, #38	; 0x26
   2d0b8:	18ba      	adds	r2, r7, r2
   2d0ba:	7812      	ldrb	r2, [r2, #0]
   2d0bc:	2110      	movs	r1, #16
   2d0be:	430a      	orrs	r2, r1
   2d0c0:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2d0c2:	2327      	movs	r3, #39	; 0x27
   2d0c4:	18fb      	adds	r3, r7, r3
   2d0c6:	781b      	ldrb	r3, [r3, #0]
   2d0c8:	220c      	movs	r2, #12
   2d0ca:	4013      	ands	r3, r2
   2d0cc:	2b04      	cmp	r3, #4
   2d0ce:	d107      	bne.n	2d0e0 <create_name+0x430>
   2d0d0:	2326      	movs	r3, #38	; 0x26
   2d0d2:	18fb      	adds	r3, r7, r3
   2d0d4:	2226      	movs	r2, #38	; 0x26
   2d0d6:	18ba      	adds	r2, r7, r2
   2d0d8:	7812      	ldrb	r2, [r2, #0]
   2d0da:	2108      	movs	r1, #8
   2d0dc:	430a      	orrs	r2, r1
   2d0de:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2d0e0:	687b      	ldr	r3, [r7, #4]
   2d0e2:	699b      	ldr	r3, [r3, #24]
   2d0e4:	330b      	adds	r3, #11
   2d0e6:	2226      	movs	r2, #38	; 0x26
   2d0e8:	18ba      	adds	r2, r7, r2
   2d0ea:	7812      	ldrb	r2, [r2, #0]
   2d0ec:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2d0ee:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2d0f0:	0018      	movs	r0, r3
   2d0f2:	46bd      	mov	sp, r7
   2d0f4:	b00b      	add	sp, #44	; 0x2c
   2d0f6:	bd90      	pop	{r4, r7, pc}

0002d0f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2d0f8:	b590      	push	{r4, r7, lr}
   2d0fa:	b085      	sub	sp, #20
   2d0fc:	af00      	add	r7, sp, #0
   2d0fe:	6078      	str	r0, [r7, #4]
   2d100:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2d102:	683b      	ldr	r3, [r7, #0]
   2d104:	781b      	ldrb	r3, [r3, #0]
   2d106:	2b2f      	cmp	r3, #47	; 0x2f
   2d108:	d003      	beq.n	2d112 <follow_path+0x1a>
   2d10a:	683b      	ldr	r3, [r7, #0]
   2d10c:	781b      	ldrb	r3, [r3, #0]
   2d10e:	2b5c      	cmp	r3, #92	; 0x5c
   2d110:	d102      	bne.n	2d118 <follow_path+0x20>
		path++;
   2d112:	683b      	ldr	r3, [r7, #0]
   2d114:	3301      	adds	r3, #1
   2d116:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2d118:	687b      	ldr	r3, [r7, #4]
   2d11a:	2200      	movs	r2, #0
   2d11c:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2d11e:	683b      	ldr	r3, [r7, #0]
   2d120:	781b      	ldrb	r3, [r3, #0]
   2d122:	2b1f      	cmp	r3, #31
   2d124:	d80c      	bhi.n	2d140 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2d126:	230f      	movs	r3, #15
   2d128:	18fc      	adds	r4, r7, r3
   2d12a:	687b      	ldr	r3, [r7, #4]
   2d12c:	2100      	movs	r1, #0
   2d12e:	0018      	movs	r0, r3
   2d130:	4b3c      	ldr	r3, [pc, #240]	; (2d224 <follow_path+0x12c>)
   2d132:	4798      	blx	r3
   2d134:	0003      	movs	r3, r0
   2d136:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2d138:	687b      	ldr	r3, [r7, #4]
   2d13a:	2200      	movs	r2, #0
   2d13c:	615a      	str	r2, [r3, #20]
   2d13e:	e06a      	b.n	2d216 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2d140:	230f      	movs	r3, #15
   2d142:	18fc      	adds	r4, r7, r3
   2d144:	003a      	movs	r2, r7
   2d146:	687b      	ldr	r3, [r7, #4]
   2d148:	0011      	movs	r1, r2
   2d14a:	0018      	movs	r0, r3
   2d14c:	4b36      	ldr	r3, [pc, #216]	; (2d228 <follow_path+0x130>)
   2d14e:	4798      	blx	r3
   2d150:	0003      	movs	r3, r0
   2d152:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2d154:	230f      	movs	r3, #15
   2d156:	18fb      	adds	r3, r7, r3
   2d158:	781b      	ldrb	r3, [r3, #0]
   2d15a:	2b00      	cmp	r3, #0
   2d15c:	d154      	bne.n	2d208 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2d15e:	230f      	movs	r3, #15
   2d160:	18fc      	adds	r4, r7, r3
   2d162:	687b      	ldr	r3, [r7, #4]
   2d164:	0018      	movs	r0, r3
   2d166:	4b31      	ldr	r3, [pc, #196]	; (2d22c <follow_path+0x134>)
   2d168:	4798      	blx	r3
   2d16a:	0003      	movs	r3, r0
   2d16c:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2d16e:	687b      	ldr	r3, [r7, #4]
   2d170:	699a      	ldr	r2, [r3, #24]
   2d172:	230e      	movs	r3, #14
   2d174:	18fb      	adds	r3, r7, r3
   2d176:	7ad2      	ldrb	r2, [r2, #11]
   2d178:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2d17a:	230f      	movs	r3, #15
   2d17c:	18fb      	adds	r3, r7, r3
   2d17e:	781b      	ldrb	r3, [r3, #0]
   2d180:	2b00      	cmp	r3, #0
   2d182:	d00f      	beq.n	2d1a4 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2d184:	230f      	movs	r3, #15
   2d186:	18fb      	adds	r3, r7, r3
   2d188:	781b      	ldrb	r3, [r3, #0]
   2d18a:	2b04      	cmp	r3, #4
   2d18c:	d13e      	bne.n	2d20c <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2d18e:	230e      	movs	r3, #14
   2d190:	18fb      	adds	r3, r7, r3
   2d192:	781b      	ldrb	r3, [r3, #0]
   2d194:	2204      	movs	r2, #4
   2d196:	4013      	ands	r3, r2
   2d198:	d13a      	bne.n	2d210 <follow_path+0x118>
   2d19a:	230f      	movs	r3, #15
   2d19c:	18fb      	adds	r3, r7, r3
   2d19e:	2205      	movs	r2, #5
   2d1a0:	701a      	strb	r2, [r3, #0]
				}
				break;
   2d1a2:	e035      	b.n	2d210 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2d1a4:	230e      	movs	r3, #14
   2d1a6:	18fb      	adds	r3, r7, r3
   2d1a8:	781b      	ldrb	r3, [r3, #0]
   2d1aa:	2204      	movs	r2, #4
   2d1ac:	4013      	ands	r3, r2
   2d1ae:	d131      	bne.n	2d214 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2d1b0:	687b      	ldr	r3, [r7, #4]
   2d1b2:	695b      	ldr	r3, [r3, #20]
   2d1b4:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2d1b6:	68bb      	ldr	r3, [r7, #8]
   2d1b8:	330b      	adds	r3, #11
   2d1ba:	781b      	ldrb	r3, [r3, #0]
   2d1bc:	001a      	movs	r2, r3
   2d1be:	2310      	movs	r3, #16
   2d1c0:	4013      	ands	r3, r2
   2d1c2:	d104      	bne.n	2d1ce <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2d1c4:	230f      	movs	r3, #15
   2d1c6:	18fb      	adds	r3, r7, r3
   2d1c8:	2205      	movs	r2, #5
   2d1ca:	701a      	strb	r2, [r3, #0]
   2d1cc:	e023      	b.n	2d216 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2d1ce:	68bb      	ldr	r3, [r7, #8]
   2d1d0:	3315      	adds	r3, #21
   2d1d2:	781b      	ldrb	r3, [r3, #0]
   2d1d4:	021b      	lsls	r3, r3, #8
   2d1d6:	b21a      	sxth	r2, r3
   2d1d8:	68bb      	ldr	r3, [r7, #8]
   2d1da:	3314      	adds	r3, #20
   2d1dc:	781b      	ldrb	r3, [r3, #0]
   2d1de:	b21b      	sxth	r3, r3
   2d1e0:	4313      	orrs	r3, r2
   2d1e2:	b21b      	sxth	r3, r3
   2d1e4:	b29b      	uxth	r3, r3
   2d1e6:	041b      	lsls	r3, r3, #16
   2d1e8:	68ba      	ldr	r2, [r7, #8]
   2d1ea:	321b      	adds	r2, #27
   2d1ec:	7812      	ldrb	r2, [r2, #0]
   2d1ee:	0212      	lsls	r2, r2, #8
   2d1f0:	b211      	sxth	r1, r2
   2d1f2:	68ba      	ldr	r2, [r7, #8]
   2d1f4:	321a      	adds	r2, #26
   2d1f6:	7812      	ldrb	r2, [r2, #0]
   2d1f8:	b212      	sxth	r2, r2
   2d1fa:	430a      	orrs	r2, r1
   2d1fc:	b212      	sxth	r2, r2
   2d1fe:	b292      	uxth	r2, r2
   2d200:	431a      	orrs	r2, r3
   2d202:	687b      	ldr	r3, [r7, #4]
   2d204:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2d206:	e79b      	b.n	2d140 <follow_path+0x48>
			if (res != FR_OK) break;
   2d208:	46c0      	nop			; (mov r8, r8)
   2d20a:	e004      	b.n	2d216 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2d20c:	46c0      	nop			; (mov r8, r8)
   2d20e:	e002      	b.n	2d216 <follow_path+0x11e>
				break;
   2d210:	46c0      	nop			; (mov r8, r8)
   2d212:	e000      	b.n	2d216 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2d214:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2d216:	230f      	movs	r3, #15
   2d218:	18fb      	adds	r3, r7, r3
   2d21a:	781b      	ldrb	r3, [r3, #0]
}
   2d21c:	0018      	movs	r0, r3
   2d21e:	46bd      	mov	sp, r7
   2d220:	b005      	add	sp, #20
   2d222:	bd90      	pop	{r4, r7, pc}
   2d224:	0002c0c9 	.word	0x0002c0c9
   2d228:	0002ccb1 	.word	0x0002ccb1
   2d22c:	0002c74d 	.word	0x0002c74d

0002d230 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2d230:	b590      	push	{r4, r7, lr}
   2d232:	b083      	sub	sp, #12
   2d234:	af00      	add	r7, sp, #0
   2d236:	6078      	str	r0, [r7, #4]
   2d238:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2d23a:	687b      	ldr	r3, [r7, #4]
   2d23c:	7858      	ldrb	r0, [r3, #1]
   2d23e:	687b      	ldr	r3, [r7, #4]
   2d240:	3330      	adds	r3, #48	; 0x30
   2d242:	0019      	movs	r1, r3
   2d244:	683a      	ldr	r2, [r7, #0]
   2d246:	2301      	movs	r3, #1
   2d248:	4c2a      	ldr	r4, [pc, #168]	; (2d2f4 <check_fs+0xc4>)
   2d24a:	47a0      	blx	r4
   2d24c:	1e03      	subs	r3, r0, #0
   2d24e:	d001      	beq.n	2d254 <check_fs+0x24>
		return 3;
   2d250:	2303      	movs	r3, #3
   2d252:	e04b      	b.n	2d2ec <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2d254:	687b      	ldr	r3, [r7, #4]
   2d256:	4a28      	ldr	r2, [pc, #160]	; (2d2f8 <check_fs+0xc8>)
   2d258:	4694      	mov	ip, r2
   2d25a:	4463      	add	r3, ip
   2d25c:	3301      	adds	r3, #1
   2d25e:	781b      	ldrb	r3, [r3, #0]
   2d260:	021b      	lsls	r3, r3, #8
   2d262:	b21a      	sxth	r2, r3
   2d264:	687b      	ldr	r3, [r7, #4]
   2d266:	4924      	ldr	r1, [pc, #144]	; (2d2f8 <check_fs+0xc8>)
   2d268:	5c5b      	ldrb	r3, [r3, r1]
   2d26a:	b21b      	sxth	r3, r3
   2d26c:	4313      	orrs	r3, r2
   2d26e:	b21b      	sxth	r3, r3
   2d270:	4a22      	ldr	r2, [pc, #136]	; (2d2fc <check_fs+0xcc>)
   2d272:	4293      	cmp	r3, r2
   2d274:	d001      	beq.n	2d27a <check_fs+0x4a>
		return 2;
   2d276:	2302      	movs	r3, #2
   2d278:	e038      	b.n	2d2ec <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2d27a:	687b      	ldr	r3, [r7, #4]
   2d27c:	3366      	adds	r3, #102	; 0x66
   2d27e:	3303      	adds	r3, #3
   2d280:	781b      	ldrb	r3, [r3, #0]
   2d282:	061a      	lsls	r2, r3, #24
   2d284:	687b      	ldr	r3, [r7, #4]
   2d286:	3366      	adds	r3, #102	; 0x66
   2d288:	3302      	adds	r3, #2
   2d28a:	781b      	ldrb	r3, [r3, #0]
   2d28c:	041b      	lsls	r3, r3, #16
   2d28e:	4313      	orrs	r3, r2
   2d290:	687a      	ldr	r2, [r7, #4]
   2d292:	3266      	adds	r2, #102	; 0x66
   2d294:	3201      	adds	r2, #1
   2d296:	7812      	ldrb	r2, [r2, #0]
   2d298:	0212      	lsls	r2, r2, #8
   2d29a:	4313      	orrs	r3, r2
   2d29c:	687a      	ldr	r2, [r7, #4]
   2d29e:	2166      	movs	r1, #102	; 0x66
   2d2a0:	5c52      	ldrb	r2, [r2, r1]
   2d2a2:	4313      	orrs	r3, r2
   2d2a4:	021b      	lsls	r3, r3, #8
   2d2a6:	0a1b      	lsrs	r3, r3, #8
   2d2a8:	4a15      	ldr	r2, [pc, #84]	; (2d300 <check_fs+0xd0>)
   2d2aa:	4293      	cmp	r3, r2
   2d2ac:	d101      	bne.n	2d2b2 <check_fs+0x82>
		return 0;
   2d2ae:	2300      	movs	r3, #0
   2d2b0:	e01c      	b.n	2d2ec <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2d2b2:	687b      	ldr	r3, [r7, #4]
   2d2b4:	3382      	adds	r3, #130	; 0x82
   2d2b6:	3303      	adds	r3, #3
   2d2b8:	781b      	ldrb	r3, [r3, #0]
   2d2ba:	061a      	lsls	r2, r3, #24
   2d2bc:	687b      	ldr	r3, [r7, #4]
   2d2be:	3382      	adds	r3, #130	; 0x82
   2d2c0:	3302      	adds	r3, #2
   2d2c2:	781b      	ldrb	r3, [r3, #0]
   2d2c4:	041b      	lsls	r3, r3, #16
   2d2c6:	4313      	orrs	r3, r2
   2d2c8:	687a      	ldr	r2, [r7, #4]
   2d2ca:	3282      	adds	r2, #130	; 0x82
   2d2cc:	3201      	adds	r2, #1
   2d2ce:	7812      	ldrb	r2, [r2, #0]
   2d2d0:	0212      	lsls	r2, r2, #8
   2d2d2:	4313      	orrs	r3, r2
   2d2d4:	687a      	ldr	r2, [r7, #4]
   2d2d6:	2182      	movs	r1, #130	; 0x82
   2d2d8:	5c52      	ldrb	r2, [r2, r1]
   2d2da:	4313      	orrs	r3, r2
   2d2dc:	021b      	lsls	r3, r3, #8
   2d2de:	0a1b      	lsrs	r3, r3, #8
   2d2e0:	4a07      	ldr	r2, [pc, #28]	; (2d300 <check_fs+0xd0>)
   2d2e2:	4293      	cmp	r3, r2
   2d2e4:	d101      	bne.n	2d2ea <check_fs+0xba>
		return 0;
   2d2e6:	2300      	movs	r3, #0
   2d2e8:	e000      	b.n	2d2ec <check_fs+0xbc>

	return 1;
   2d2ea:	2301      	movs	r3, #1
}
   2d2ec:	0018      	movs	r0, r3
   2d2ee:	46bd      	mov	sp, r7
   2d2f0:	b003      	add	sp, #12
   2d2f2:	bd90      	pop	{r4, r7, pc}
   2d2f4:	0002b499 	.word	0x0002b499
   2d2f8:	0000022e 	.word	0x0000022e
   2d2fc:	ffffaa55 	.word	0xffffaa55
   2d300:	00544146 	.word	0x00544146

0002d304 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2d304:	b590      	push	{r4, r7, lr}
   2d306:	b093      	sub	sp, #76	; 0x4c
   2d308:	af00      	add	r7, sp, #0
   2d30a:	60f8      	str	r0, [r7, #12]
   2d30c:	60b9      	str	r1, [r7, #8]
   2d30e:	1dfb      	adds	r3, r7, #7
   2d310:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2d312:	68fb      	ldr	r3, [r7, #12]
   2d314:	681b      	ldr	r3, [r3, #0]
   2d316:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2d318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d31a:	781b      	ldrb	r3, [r3, #0]
   2d31c:	3b30      	subs	r3, #48	; 0x30
   2d31e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2d320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d322:	2b09      	cmp	r3, #9
   2d324:	d80b      	bhi.n	2d33e <chk_mounted+0x3a>
   2d326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d328:	3301      	adds	r3, #1
   2d32a:	781b      	ldrb	r3, [r3, #0]
   2d32c:	2b3a      	cmp	r3, #58	; 0x3a
   2d32e:	d106      	bne.n	2d33e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2d330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d332:	3302      	adds	r3, #2
   2d334:	62fb      	str	r3, [r7, #44]	; 0x2c
   2d336:	68fb      	ldr	r3, [r7, #12]
   2d338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2d33a:	601a      	str	r2, [r3, #0]
   2d33c:	e001      	b.n	2d342 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2d33e:	2300      	movs	r3, #0
   2d340:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2d342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d344:	2b07      	cmp	r3, #7
   2d346:	d901      	bls.n	2d34c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2d348:	230b      	movs	r3, #11
   2d34a:	e2af      	b.n	2d8ac <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2d34c:	4bc5      	ldr	r3, [pc, #788]	; (2d664 <chk_mounted+0x360>)
   2d34e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2d350:	0092      	lsls	r2, r2, #2
   2d352:	58d3      	ldr	r3, [r2, r3]
   2d354:	62bb      	str	r3, [r7, #40]	; 0x28
   2d356:	68bb      	ldr	r3, [r7, #8]
   2d358:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d35a:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2d35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d35e:	2b00      	cmp	r3, #0
   2d360:	d101      	bne.n	2d366 <chk_mounted+0x62>
   2d362:	230c      	movs	r3, #12
   2d364:	e2a2      	b.n	2d8ac <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2d366:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d368:	781b      	ldrb	r3, [r3, #0]
   2d36a:	2b00      	cmp	r3, #0
   2d36c:	d01c      	beq.n	2d3a8 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2d36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d370:	785b      	ldrb	r3, [r3, #1]
   2d372:	2227      	movs	r2, #39	; 0x27
   2d374:	18bc      	adds	r4, r7, r2
   2d376:	0018      	movs	r0, r3
   2d378:	4bbb      	ldr	r3, [pc, #748]	; (2d668 <chk_mounted+0x364>)
   2d37a:	4798      	blx	r3
   2d37c:	0003      	movs	r3, r0
   2d37e:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2d380:	2327      	movs	r3, #39	; 0x27
   2d382:	18fb      	adds	r3, r7, r3
   2d384:	781b      	ldrb	r3, [r3, #0]
   2d386:	2201      	movs	r2, #1
   2d388:	4013      	ands	r3, r2
   2d38a:	d10d      	bne.n	2d3a8 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2d38c:	1dfb      	adds	r3, r7, #7
   2d38e:	781b      	ldrb	r3, [r3, #0]
   2d390:	2b00      	cmp	r3, #0
   2d392:	d007      	beq.n	2d3a4 <chk_mounted+0xa0>
   2d394:	2327      	movs	r3, #39	; 0x27
   2d396:	18fb      	adds	r3, r7, r3
   2d398:	781b      	ldrb	r3, [r3, #0]
   2d39a:	2204      	movs	r2, #4
   2d39c:	4013      	ands	r3, r2
   2d39e:	d001      	beq.n	2d3a4 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2d3a0:	230a      	movs	r3, #10
   2d3a2:	e283      	b.n	2d8ac <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2d3a4:	2300      	movs	r3, #0
   2d3a6:	e281      	b.n	2d8ac <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2d3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3aa:	2200      	movs	r2, #0
   2d3ac:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2d3ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d3b0:	b2da      	uxtb	r2, r3
   2d3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3b4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2d3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3b8:	785b      	ldrb	r3, [r3, #1]
   2d3ba:	2227      	movs	r2, #39	; 0x27
   2d3bc:	18bc      	adds	r4, r7, r2
   2d3be:	0018      	movs	r0, r3
   2d3c0:	4baa      	ldr	r3, [pc, #680]	; (2d66c <chk_mounted+0x368>)
   2d3c2:	4798      	blx	r3
   2d3c4:	0003      	movs	r3, r0
   2d3c6:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2d3c8:	2327      	movs	r3, #39	; 0x27
   2d3ca:	18fb      	adds	r3, r7, r3
   2d3cc:	781b      	ldrb	r3, [r3, #0]
   2d3ce:	2201      	movs	r2, #1
   2d3d0:	4013      	ands	r3, r2
   2d3d2:	d001      	beq.n	2d3d8 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2d3d4:	2303      	movs	r3, #3
   2d3d6:	e269      	b.n	2d8ac <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2d3d8:	1dfb      	adds	r3, r7, #7
   2d3da:	781b      	ldrb	r3, [r3, #0]
   2d3dc:	2b00      	cmp	r3, #0
   2d3de:	d007      	beq.n	2d3f0 <chk_mounted+0xec>
   2d3e0:	2327      	movs	r3, #39	; 0x27
   2d3e2:	18fb      	adds	r3, r7, r3
   2d3e4:	781b      	ldrb	r3, [r3, #0]
   2d3e6:	2204      	movs	r2, #4
   2d3e8:	4013      	ands	r3, r2
   2d3ea:	d001      	beq.n	2d3f0 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2d3ec:	230a      	movs	r3, #10
   2d3ee:	e25d      	b.n	2d8ac <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2d3f0:	2300      	movs	r3, #0
   2d3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d3f4:	2347      	movs	r3, #71	; 0x47
   2d3f6:	18fc      	adds	r4, r7, r3
   2d3f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3fc:	0011      	movs	r1, r2
   2d3fe:	0018      	movs	r0, r3
   2d400:	4b9b      	ldr	r3, [pc, #620]	; (2d670 <chk_mounted+0x36c>)
   2d402:	4798      	blx	r3
   2d404:	0003      	movs	r3, r0
   2d406:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2d408:	2347      	movs	r3, #71	; 0x47
   2d40a:	18fb      	adds	r3, r7, r3
   2d40c:	781b      	ldrb	r3, [r3, #0]
   2d40e:	2b01      	cmp	r3, #1
   2d410:	d13b      	bne.n	2d48a <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2d412:	2346      	movs	r3, #70	; 0x46
   2d414:	18fb      	adds	r3, r7, r3
   2d416:	2200      	movs	r2, #0
   2d418:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2d41a:	2346      	movs	r3, #70	; 0x46
   2d41c:	18fb      	adds	r3, r7, r3
   2d41e:	781b      	ldrb	r3, [r3, #0]
   2d420:	2b00      	cmp	r3, #0
   2d422:	d006      	beq.n	2d432 <chk_mounted+0x12e>
   2d424:	2346      	movs	r3, #70	; 0x46
   2d426:	18fb      	adds	r3, r7, r3
   2d428:	781a      	ldrb	r2, [r3, #0]
   2d42a:	2346      	movs	r3, #70	; 0x46
   2d42c:	18fb      	adds	r3, r7, r3
   2d42e:	3a01      	subs	r2, #1
   2d430:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2d432:	2346      	movs	r3, #70	; 0x46
   2d434:	18fb      	adds	r3, r7, r3
   2d436:	781b      	ldrb	r3, [r3, #0]
   2d438:	011b      	lsls	r3, r3, #4
   2d43a:	33bf      	adds	r3, #191	; 0xbf
   2d43c:	33ff      	adds	r3, #255	; 0xff
   2d43e:	3330      	adds	r3, #48	; 0x30
   2d440:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d442:	18d3      	adds	r3, r2, r3
   2d444:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2d446:	6a3b      	ldr	r3, [r7, #32]
   2d448:	3304      	adds	r3, #4
   2d44a:	781b      	ldrb	r3, [r3, #0]
   2d44c:	2b00      	cmp	r3, #0
   2d44e:	d01c      	beq.n	2d48a <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2d450:	6a3b      	ldr	r3, [r7, #32]
   2d452:	330b      	adds	r3, #11
   2d454:	781b      	ldrb	r3, [r3, #0]
   2d456:	061a      	lsls	r2, r3, #24
   2d458:	6a3b      	ldr	r3, [r7, #32]
   2d45a:	330a      	adds	r3, #10
   2d45c:	781b      	ldrb	r3, [r3, #0]
   2d45e:	041b      	lsls	r3, r3, #16
   2d460:	4313      	orrs	r3, r2
   2d462:	6a3a      	ldr	r2, [r7, #32]
   2d464:	3209      	adds	r2, #9
   2d466:	7812      	ldrb	r2, [r2, #0]
   2d468:	0212      	lsls	r2, r2, #8
   2d46a:	4313      	orrs	r3, r2
   2d46c:	6a3a      	ldr	r2, [r7, #32]
   2d46e:	3208      	adds	r2, #8
   2d470:	7812      	ldrb	r2, [r2, #0]
   2d472:	4313      	orrs	r3, r2
   2d474:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2d476:	2347      	movs	r3, #71	; 0x47
   2d478:	18fc      	adds	r4, r7, r3
   2d47a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d47e:	0011      	movs	r1, r2
   2d480:	0018      	movs	r0, r3
   2d482:	4b7b      	ldr	r3, [pc, #492]	; (2d670 <chk_mounted+0x36c>)
   2d484:	4798      	blx	r3
   2d486:	0003      	movs	r3, r0
   2d488:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2d48a:	2347      	movs	r3, #71	; 0x47
   2d48c:	18fb      	adds	r3, r7, r3
   2d48e:	781b      	ldrb	r3, [r3, #0]
   2d490:	2b03      	cmp	r3, #3
   2d492:	d101      	bne.n	2d498 <chk_mounted+0x194>
   2d494:	2301      	movs	r3, #1
   2d496:	e209      	b.n	2d8ac <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2d498:	2347      	movs	r3, #71	; 0x47
   2d49a:	18fb      	adds	r3, r7, r3
   2d49c:	781b      	ldrb	r3, [r3, #0]
   2d49e:	2b00      	cmp	r3, #0
   2d4a0:	d001      	beq.n	2d4a6 <chk_mounted+0x1a2>
   2d4a2:	230d      	movs	r3, #13
   2d4a4:	e202      	b.n	2d8ac <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2d4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4a8:	223c      	movs	r2, #60	; 0x3c
   2d4aa:	5c9b      	ldrb	r3, [r3, r2]
   2d4ac:	021b      	lsls	r3, r3, #8
   2d4ae:	b21a      	sxth	r2, r3
   2d4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4b2:	213b      	movs	r1, #59	; 0x3b
   2d4b4:	5c5b      	ldrb	r3, [r3, r1]
   2d4b6:	b21b      	sxth	r3, r3
   2d4b8:	4313      	orrs	r3, r2
   2d4ba:	b21a      	sxth	r2, r3
   2d4bc:	2380      	movs	r3, #128	; 0x80
   2d4be:	009b      	lsls	r3, r3, #2
   2d4c0:	429a      	cmp	r2, r3
   2d4c2:	d001      	beq.n	2d4c8 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2d4c4:	230d      	movs	r3, #13
   2d4c6:	e1f1      	b.n	2d8ac <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2d4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4ca:	2247      	movs	r2, #71	; 0x47
   2d4cc:	5c9b      	ldrb	r3, [r3, r2]
   2d4ce:	021b      	lsls	r3, r3, #8
   2d4d0:	b21a      	sxth	r2, r3
   2d4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4d4:	2146      	movs	r1, #70	; 0x46
   2d4d6:	5c5b      	ldrb	r3, [r3, r1]
   2d4d8:	b21b      	sxth	r3, r3
   2d4da:	4313      	orrs	r3, r2
   2d4dc:	b21b      	sxth	r3, r3
   2d4de:	b29b      	uxth	r3, r3
   2d4e0:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2d4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d4e4:	2b00      	cmp	r3, #0
   2d4e6:	d112      	bne.n	2d50e <chk_mounted+0x20a>
   2d4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4ea:	2257      	movs	r2, #87	; 0x57
   2d4ec:	5c9b      	ldrb	r3, [r3, r2]
   2d4ee:	061a      	lsls	r2, r3, #24
   2d4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4f2:	2156      	movs	r1, #86	; 0x56
   2d4f4:	5c5b      	ldrb	r3, [r3, r1]
   2d4f6:	041b      	lsls	r3, r3, #16
   2d4f8:	4313      	orrs	r3, r2
   2d4fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d4fc:	2155      	movs	r1, #85	; 0x55
   2d4fe:	5c52      	ldrb	r2, [r2, r1]
   2d500:	0212      	lsls	r2, r2, #8
   2d502:	4313      	orrs	r3, r2
   2d504:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d506:	2154      	movs	r1, #84	; 0x54
   2d508:	5c52      	ldrb	r2, [r2, r1]
   2d50a:	4313      	orrs	r3, r2
   2d50c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2d50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d510:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2d512:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2d514:	231f      	movs	r3, #31
   2d516:	18fb      	adds	r3, r7, r3
   2d518:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d51a:	2140      	movs	r1, #64	; 0x40
   2d51c:	5c52      	ldrb	r2, [r2, r1]
   2d51e:	701a      	strb	r2, [r3, #0]
   2d520:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d522:	221f      	movs	r2, #31
   2d524:	18ba      	adds	r2, r7, r2
   2d526:	7812      	ldrb	r2, [r2, #0]
   2d528:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2d52a:	231f      	movs	r3, #31
   2d52c:	18fb      	adds	r3, r7, r3
   2d52e:	781b      	ldrb	r3, [r3, #0]
   2d530:	2b01      	cmp	r3, #1
   2d532:	d006      	beq.n	2d542 <chk_mounted+0x23e>
   2d534:	231f      	movs	r3, #31
   2d536:	18fb      	adds	r3, r7, r3
   2d538:	781b      	ldrb	r3, [r3, #0]
   2d53a:	2b02      	cmp	r3, #2
   2d53c:	d001      	beq.n	2d542 <chk_mounted+0x23e>
   2d53e:	230d      	movs	r3, #13
   2d540:	e1b4      	b.n	2d8ac <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2d542:	231f      	movs	r3, #31
   2d544:	18fb      	adds	r3, r7, r3
   2d546:	781a      	ldrb	r2, [r3, #0]
   2d548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d54a:	4353      	muls	r3, r2
   2d54c:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2d54e:	231f      	movs	r3, #31
   2d550:	18fb      	adds	r3, r7, r3
   2d552:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d554:	213d      	movs	r1, #61	; 0x3d
   2d556:	5c52      	ldrb	r2, [r2, r1]
   2d558:	701a      	strb	r2, [r3, #0]
   2d55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d55c:	221f      	movs	r2, #31
   2d55e:	18ba      	adds	r2, r7, r2
   2d560:	7812      	ldrb	r2, [r2, #0]
   2d562:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2d564:	231f      	movs	r3, #31
   2d566:	18fb      	adds	r3, r7, r3
   2d568:	781b      	ldrb	r3, [r3, #0]
   2d56a:	2b00      	cmp	r3, #0
   2d56c:	d008      	beq.n	2d580 <chk_mounted+0x27c>
   2d56e:	231f      	movs	r3, #31
   2d570:	18fb      	adds	r3, r7, r3
   2d572:	781b      	ldrb	r3, [r3, #0]
   2d574:	221f      	movs	r2, #31
   2d576:	18ba      	adds	r2, r7, r2
   2d578:	7812      	ldrb	r2, [r2, #0]
   2d57a:	3a01      	subs	r2, #1
   2d57c:	4013      	ands	r3, r2
   2d57e:	d001      	beq.n	2d584 <chk_mounted+0x280>
   2d580:	230d      	movs	r3, #13
   2d582:	e193      	b.n	2d8ac <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2d584:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d586:	2242      	movs	r2, #66	; 0x42
   2d588:	5c9b      	ldrb	r3, [r3, r2]
   2d58a:	021b      	lsls	r3, r3, #8
   2d58c:	b21a      	sxth	r2, r3
   2d58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d590:	2141      	movs	r1, #65	; 0x41
   2d592:	5c5b      	ldrb	r3, [r3, r1]
   2d594:	b21b      	sxth	r3, r3
   2d596:	4313      	orrs	r3, r2
   2d598:	b21b      	sxth	r3, r3
   2d59a:	b29a      	uxth	r2, r3
   2d59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d59e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2d5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5a2:	891b      	ldrh	r3, [r3, #8]
   2d5a4:	220f      	movs	r2, #15
   2d5a6:	4013      	ands	r3, r2
   2d5a8:	b29b      	uxth	r3, r3
   2d5aa:	2b00      	cmp	r3, #0
   2d5ac:	d001      	beq.n	2d5b2 <chk_mounted+0x2ae>
   2d5ae:	230d      	movs	r3, #13
   2d5b0:	e17c      	b.n	2d8ac <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2d5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5b4:	2244      	movs	r2, #68	; 0x44
   2d5b6:	5c9b      	ldrb	r3, [r3, r2]
   2d5b8:	021b      	lsls	r3, r3, #8
   2d5ba:	b21a      	sxth	r2, r3
   2d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5be:	2143      	movs	r1, #67	; 0x43
   2d5c0:	5c5b      	ldrb	r3, [r3, r1]
   2d5c2:	b21b      	sxth	r3, r3
   2d5c4:	4313      	orrs	r3, r2
   2d5c6:	b21b      	sxth	r3, r3
   2d5c8:	b29b      	uxth	r3, r3
   2d5ca:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2d5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d5ce:	2b00      	cmp	r3, #0
   2d5d0:	d112      	bne.n	2d5f8 <chk_mounted+0x2f4>
   2d5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5d4:	2253      	movs	r2, #83	; 0x53
   2d5d6:	5c9b      	ldrb	r3, [r3, r2]
   2d5d8:	061a      	lsls	r2, r3, #24
   2d5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5dc:	2152      	movs	r1, #82	; 0x52
   2d5de:	5c5b      	ldrb	r3, [r3, r1]
   2d5e0:	041b      	lsls	r3, r3, #16
   2d5e2:	4313      	orrs	r3, r2
   2d5e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d5e6:	2151      	movs	r1, #81	; 0x51
   2d5e8:	5c52      	ldrb	r2, [r2, r1]
   2d5ea:	0212      	lsls	r2, r2, #8
   2d5ec:	4313      	orrs	r3, r2
   2d5ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d5f0:	2150      	movs	r1, #80	; 0x50
   2d5f2:	5c52      	ldrb	r2, [r2, r1]
   2d5f4:	4313      	orrs	r3, r2
   2d5f6:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2d5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5fa:	223f      	movs	r2, #63	; 0x3f
   2d5fc:	5c9b      	ldrb	r3, [r3, r2]
   2d5fe:	021b      	lsls	r3, r3, #8
   2d600:	b21a      	sxth	r2, r3
   2d602:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d604:	213e      	movs	r1, #62	; 0x3e
   2d606:	5c5b      	ldrb	r3, [r3, r1]
   2d608:	b21b      	sxth	r3, r3
   2d60a:	4313      	orrs	r3, r2
   2d60c:	b21a      	sxth	r2, r3
   2d60e:	231c      	movs	r3, #28
   2d610:	18fb      	adds	r3, r7, r3
   2d612:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2d614:	231c      	movs	r3, #28
   2d616:	18fb      	adds	r3, r7, r3
   2d618:	881b      	ldrh	r3, [r3, #0]
   2d61a:	2b00      	cmp	r3, #0
   2d61c:	d101      	bne.n	2d622 <chk_mounted+0x31e>
   2d61e:	230d      	movs	r3, #13
   2d620:	e144      	b.n	2d8ac <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2d622:	231c      	movs	r3, #28
   2d624:	18fb      	adds	r3, r7, r3
   2d626:	881a      	ldrh	r2, [r3, #0]
   2d628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d62a:	18d3      	adds	r3, r2, r3
   2d62c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d62e:	8912      	ldrh	r2, [r2, #8]
   2d630:	0912      	lsrs	r2, r2, #4
   2d632:	b292      	uxth	r2, r2
   2d634:	189b      	adds	r3, r3, r2
   2d636:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2d638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2d63a:	69bb      	ldr	r3, [r7, #24]
   2d63c:	429a      	cmp	r2, r3
   2d63e:	d201      	bcs.n	2d644 <chk_mounted+0x340>
   2d640:	230d      	movs	r3, #13
   2d642:	e133      	b.n	2d8ac <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2d644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2d646:	69bb      	ldr	r3, [r7, #24]
   2d648:	1ad2      	subs	r2, r2, r3
   2d64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d64c:	789b      	ldrb	r3, [r3, #2]
   2d64e:	0019      	movs	r1, r3
   2d650:	4b08      	ldr	r3, [pc, #32]	; (2d674 <chk_mounted+0x370>)
   2d652:	0010      	movs	r0, r2
   2d654:	4798      	blx	r3
   2d656:	0003      	movs	r3, r0
   2d658:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2d65a:	697b      	ldr	r3, [r7, #20]
   2d65c:	2b00      	cmp	r3, #0
   2d65e:	d10b      	bne.n	2d678 <chk_mounted+0x374>
   2d660:	230d      	movs	r3, #13
   2d662:	e123      	b.n	2d8ac <chk_mounted+0x5a8>
   2d664:	20004178 	.word	0x20004178
   2d668:	0002b461 	.word	0x0002b461
   2d66c:	0002b3dd 	.word	0x0002b3dd
   2d670:	0002d231 	.word	0x0002d231
   2d674:	00032a85 	.word	0x00032a85
	fmt = FS_FAT12;
   2d678:	2347      	movs	r3, #71	; 0x47
   2d67a:	18fb      	adds	r3, r7, r3
   2d67c:	2201      	movs	r2, #1
   2d67e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2d680:	697b      	ldr	r3, [r7, #20]
   2d682:	4a8c      	ldr	r2, [pc, #560]	; (2d8b4 <chk_mounted+0x5b0>)
   2d684:	4293      	cmp	r3, r2
   2d686:	d903      	bls.n	2d690 <chk_mounted+0x38c>
   2d688:	2347      	movs	r3, #71	; 0x47
   2d68a:	18fb      	adds	r3, r7, r3
   2d68c:	2202      	movs	r2, #2
   2d68e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2d690:	697b      	ldr	r3, [r7, #20]
   2d692:	4a89      	ldr	r2, [pc, #548]	; (2d8b8 <chk_mounted+0x5b4>)
   2d694:	4293      	cmp	r3, r2
   2d696:	d903      	bls.n	2d6a0 <chk_mounted+0x39c>
   2d698:	2347      	movs	r3, #71	; 0x47
   2d69a:	18fb      	adds	r3, r7, r3
   2d69c:	2203      	movs	r2, #3
   2d69e:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2d6a0:	697b      	ldr	r3, [r7, #20]
   2d6a2:	1c9a      	adds	r2, r3, #2
   2d6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6a6:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2d6a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d6aa:	69bb      	ldr	r3, [r7, #24]
   2d6ac:	18d2      	adds	r2, r2, r3
   2d6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6b0:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2d6b2:	231c      	movs	r3, #28
   2d6b4:	18fb      	adds	r3, r7, r3
   2d6b6:	881a      	ldrh	r2, [r3, #0]
   2d6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d6ba:	18d2      	adds	r2, r2, r3
   2d6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6be:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2d6c0:	2347      	movs	r3, #71	; 0x47
   2d6c2:	18fb      	adds	r3, r7, r3
   2d6c4:	781b      	ldrb	r3, [r3, #0]
   2d6c6:	2b03      	cmp	r3, #3
   2d6c8:	d11e      	bne.n	2d708 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2d6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6cc:	891b      	ldrh	r3, [r3, #8]
   2d6ce:	2b00      	cmp	r3, #0
   2d6d0:	d001      	beq.n	2d6d6 <chk_mounted+0x3d2>
   2d6d2:	230d      	movs	r3, #13
   2d6d4:	e0ea      	b.n	2d8ac <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2d6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6d8:	225f      	movs	r2, #95	; 0x5f
   2d6da:	5c9b      	ldrb	r3, [r3, r2]
   2d6dc:	061a      	lsls	r2, r3, #24
   2d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6e0:	215e      	movs	r1, #94	; 0x5e
   2d6e2:	5c5b      	ldrb	r3, [r3, r1]
   2d6e4:	041b      	lsls	r3, r3, #16
   2d6e6:	4313      	orrs	r3, r2
   2d6e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d6ea:	215d      	movs	r1, #93	; 0x5d
   2d6ec:	5c52      	ldrb	r2, [r2, r1]
   2d6ee:	0212      	lsls	r2, r2, #8
   2d6f0:	4313      	orrs	r3, r2
   2d6f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d6f4:	215c      	movs	r1, #92	; 0x5c
   2d6f6:	5c52      	ldrb	r2, [r2, r1]
   2d6f8:	431a      	orrs	r2, r3
   2d6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6fc:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2d6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d700:	699b      	ldr	r3, [r3, #24]
   2d702:	009b      	lsls	r3, r3, #2
   2d704:	633b      	str	r3, [r7, #48]	; 0x30
   2d706:	e020      	b.n	2d74a <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d70a:	891b      	ldrh	r3, [r3, #8]
   2d70c:	2b00      	cmp	r3, #0
   2d70e:	d101      	bne.n	2d714 <chk_mounted+0x410>
   2d710:	230d      	movs	r3, #13
   2d712:	e0cb      	b.n	2d8ac <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2d714:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d716:	6a1a      	ldr	r2, [r3, #32]
   2d718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d71a:	18d2      	adds	r2, r2, r3
   2d71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d71e:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2d720:	2347      	movs	r3, #71	; 0x47
   2d722:	18fb      	adds	r3, r7, r3
   2d724:	781b      	ldrb	r3, [r3, #0]
   2d726:	2b02      	cmp	r3, #2
   2d728:	d103      	bne.n	2d732 <chk_mounted+0x42e>
   2d72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d72c:	699b      	ldr	r3, [r3, #24]
   2d72e:	005b      	lsls	r3, r3, #1
   2d730:	e00a      	b.n	2d748 <chk_mounted+0x444>
   2d732:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d734:	699a      	ldr	r2, [r3, #24]
   2d736:	0013      	movs	r3, r2
   2d738:	005b      	lsls	r3, r3, #1
   2d73a:	189b      	adds	r3, r3, r2
   2d73c:	085a      	lsrs	r2, r3, #1
   2d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d740:	699b      	ldr	r3, [r3, #24]
   2d742:	2101      	movs	r1, #1
   2d744:	400b      	ands	r3, r1
   2d746:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2d748:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2d74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d74c:	69da      	ldr	r2, [r3, #28]
   2d74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d750:	495a      	ldr	r1, [pc, #360]	; (2d8bc <chk_mounted+0x5b8>)
   2d752:	468c      	mov	ip, r1
   2d754:	4463      	add	r3, ip
   2d756:	0a5b      	lsrs	r3, r3, #9
   2d758:	429a      	cmp	r2, r3
   2d75a:	d201      	bcs.n	2d760 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2d75c:	230d      	movs	r3, #13
   2d75e:	e0a5      	b.n	2d8ac <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2d760:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d762:	2201      	movs	r2, #1
   2d764:	4252      	negs	r2, r2
   2d766:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2d768:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d76a:	2200      	movs	r2, #0
   2d76c:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2d76e:	2347      	movs	r3, #71	; 0x47
   2d770:	18fb      	adds	r3, r7, r3
   2d772:	781b      	ldrb	r3, [r3, #0]
   2d774:	2b03      	cmp	r3, #3
   2d776:	d000      	beq.n	2d77a <chk_mounted+0x476>
   2d778:	e082      	b.n	2d880 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2d77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d77c:	2200      	movs	r2, #0
   2d77e:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2d780:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d782:	2261      	movs	r2, #97	; 0x61
   2d784:	5c9b      	ldrb	r3, [r3, r2]
   2d786:	021b      	lsls	r3, r3, #8
   2d788:	b21a      	sxth	r2, r3
   2d78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d78c:	2160      	movs	r1, #96	; 0x60
   2d78e:	5c5b      	ldrb	r3, [r3, r1]
   2d790:	b21b      	sxth	r3, r3
   2d792:	4313      	orrs	r3, r2
   2d794:	b21b      	sxth	r3, r3
   2d796:	b29b      	uxth	r3, r3
   2d798:	001a      	movs	r2, r3
   2d79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d79c:	18d2      	adds	r2, r2, r3
   2d79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7a0:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7a4:	7858      	ldrb	r0, [r3, #1]
   2d7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7a8:	3330      	adds	r3, #48	; 0x30
   2d7aa:	0019      	movs	r1, r3
   2d7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7ae:	695a      	ldr	r2, [r3, #20]
   2d7b0:	2301      	movs	r3, #1
   2d7b2:	4c43      	ldr	r4, [pc, #268]	; (2d8c0 <chk_mounted+0x5bc>)
   2d7b4:	47a0      	blx	r4
   2d7b6:	1e03      	subs	r3, r0, #0
   2d7b8:	d162      	bne.n	2d880 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7bc:	4a41      	ldr	r2, [pc, #260]	; (2d8c4 <chk_mounted+0x5c0>)
   2d7be:	5c9b      	ldrb	r3, [r3, r2]
   2d7c0:	021b      	lsls	r3, r3, #8
   2d7c2:	b21a      	sxth	r2, r3
   2d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7c6:	4940      	ldr	r1, [pc, #256]	; (2d8c8 <chk_mounted+0x5c4>)
   2d7c8:	5c5b      	ldrb	r3, [r3, r1]
   2d7ca:	b21b      	sxth	r3, r3
   2d7cc:	4313      	orrs	r3, r2
   2d7ce:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d7d0:	4a3e      	ldr	r2, [pc, #248]	; (2d8cc <chk_mounted+0x5c8>)
   2d7d2:	4293      	cmp	r3, r2
   2d7d4:	d154      	bne.n	2d880 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7d8:	2233      	movs	r2, #51	; 0x33
   2d7da:	5c9b      	ldrb	r3, [r3, r2]
   2d7dc:	061a      	lsls	r2, r3, #24
   2d7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7e0:	2132      	movs	r1, #50	; 0x32
   2d7e2:	5c5b      	ldrb	r3, [r3, r1]
   2d7e4:	041b      	lsls	r3, r3, #16
   2d7e6:	4313      	orrs	r3, r2
   2d7e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d7ea:	2131      	movs	r1, #49	; 0x31
   2d7ec:	5c52      	ldrb	r2, [r2, r1]
   2d7ee:	0212      	lsls	r2, r2, #8
   2d7f0:	4313      	orrs	r3, r2
   2d7f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d7f4:	2130      	movs	r1, #48	; 0x30
   2d7f6:	5c52      	ldrb	r2, [r2, r1]
   2d7f8:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d7fa:	4a35      	ldr	r2, [pc, #212]	; (2d8d0 <chk_mounted+0x5cc>)
   2d7fc:	4293      	cmp	r3, r2
   2d7fe:	d13f      	bne.n	2d880 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2d800:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d802:	4a34      	ldr	r2, [pc, #208]	; (2d8d4 <chk_mounted+0x5d0>)
   2d804:	5c9b      	ldrb	r3, [r3, r2]
   2d806:	061a      	lsls	r2, r3, #24
   2d808:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d80a:	4933      	ldr	r1, [pc, #204]	; (2d8d8 <chk_mounted+0x5d4>)
   2d80c:	5c5b      	ldrb	r3, [r3, r1]
   2d80e:	041b      	lsls	r3, r3, #16
   2d810:	4313      	orrs	r3, r2
   2d812:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d814:	4931      	ldr	r1, [pc, #196]	; (2d8dc <chk_mounted+0x5d8>)
   2d816:	5c52      	ldrb	r2, [r2, r1]
   2d818:	0212      	lsls	r2, r2, #8
   2d81a:	4313      	orrs	r3, r2
   2d81c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d81e:	2285      	movs	r2, #133	; 0x85
   2d820:	0092      	lsls	r2, r2, #2
   2d822:	5c8a      	ldrb	r2, [r1, r2]
   2d824:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d826:	4a2e      	ldr	r2, [pc, #184]	; (2d8e0 <chk_mounted+0x5dc>)
   2d828:	4293      	cmp	r3, r2
   2d82a:	d129      	bne.n	2d880 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2d82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d82e:	4a2d      	ldr	r2, [pc, #180]	; (2d8e4 <chk_mounted+0x5e0>)
   2d830:	5c9b      	ldrb	r3, [r3, r2]
   2d832:	061a      	lsls	r2, r3, #24
   2d834:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d836:	492c      	ldr	r1, [pc, #176]	; (2d8e8 <chk_mounted+0x5e4>)
   2d838:	5c5b      	ldrb	r3, [r3, r1]
   2d83a:	041b      	lsls	r3, r3, #16
   2d83c:	4313      	orrs	r3, r2
   2d83e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d840:	492a      	ldr	r1, [pc, #168]	; (2d8ec <chk_mounted+0x5e8>)
   2d842:	5c52      	ldrb	r2, [r2, r1]
   2d844:	0212      	lsls	r2, r2, #8
   2d846:	4313      	orrs	r3, r2
   2d848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d84a:	2287      	movs	r2, #135	; 0x87
   2d84c:	0092      	lsls	r2, r2, #2
   2d84e:	5c8a      	ldrb	r2, [r1, r2]
   2d850:	431a      	orrs	r2, r3
   2d852:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d854:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2d856:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d858:	4a25      	ldr	r2, [pc, #148]	; (2d8f0 <chk_mounted+0x5ec>)
   2d85a:	5c9b      	ldrb	r3, [r3, r2]
   2d85c:	061a      	lsls	r2, r3, #24
   2d85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d860:	4924      	ldr	r1, [pc, #144]	; (2d8f4 <chk_mounted+0x5f0>)
   2d862:	5c5b      	ldrb	r3, [r3, r1]
   2d864:	041b      	lsls	r3, r3, #16
   2d866:	4313      	orrs	r3, r2
   2d868:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d86a:	4923      	ldr	r1, [pc, #140]	; (2d8f8 <chk_mounted+0x5f4>)
   2d86c:	5c52      	ldrb	r2, [r2, r1]
   2d86e:	0212      	lsls	r2, r2, #8
   2d870:	4313      	orrs	r3, r2
   2d872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d874:	2286      	movs	r2, #134	; 0x86
   2d876:	0092      	lsls	r2, r2, #2
   2d878:	5c8a      	ldrb	r2, [r1, r2]
   2d87a:	431a      	orrs	r2, r3
   2d87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d87e:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2d880:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d882:	2247      	movs	r2, #71	; 0x47
   2d884:	18ba      	adds	r2, r7, r2
   2d886:	7812      	ldrb	r2, [r2, #0]
   2d888:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2d88a:	4b1c      	ldr	r3, [pc, #112]	; (2d8fc <chk_mounted+0x5f8>)
   2d88c:	881b      	ldrh	r3, [r3, #0]
   2d88e:	3301      	adds	r3, #1
   2d890:	b29a      	uxth	r2, r3
   2d892:	4b1a      	ldr	r3, [pc, #104]	; (2d8fc <chk_mounted+0x5f8>)
   2d894:	801a      	strh	r2, [r3, #0]
   2d896:	4b19      	ldr	r3, [pc, #100]	; (2d8fc <chk_mounted+0x5f8>)
   2d898:	881a      	ldrh	r2, [r3, #0]
   2d89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d89c:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2d89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d8a0:	2200      	movs	r2, #0
   2d8a2:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2d8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d8a6:	2200      	movs	r2, #0
   2d8a8:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2d8aa:	2300      	movs	r3, #0
}
   2d8ac:	0018      	movs	r0, r3
   2d8ae:	46bd      	mov	sp, r7
   2d8b0:	b013      	add	sp, #76	; 0x4c
   2d8b2:	bd90      	pop	{r4, r7, pc}
   2d8b4:	00000ff5 	.word	0x00000ff5
   2d8b8:	0000fff5 	.word	0x0000fff5
   2d8bc:	000001ff 	.word	0x000001ff
   2d8c0:	0002b499 	.word	0x0002b499
   2d8c4:	0000022f 	.word	0x0000022f
   2d8c8:	0000022e 	.word	0x0000022e
   2d8cc:	ffffaa55 	.word	0xffffaa55
   2d8d0:	41615252 	.word	0x41615252
   2d8d4:	00000217 	.word	0x00000217
   2d8d8:	00000216 	.word	0x00000216
   2d8dc:	00000215 	.word	0x00000215
   2d8e0:	61417272 	.word	0x61417272
   2d8e4:	0000021f 	.word	0x0000021f
   2d8e8:	0000021e 	.word	0x0000021e
   2d8ec:	0000021d 	.word	0x0000021d
   2d8f0:	0000021b 	.word	0x0000021b
   2d8f4:	0000021a 	.word	0x0000021a
   2d8f8:	00000219 	.word	0x00000219
   2d8fc:	20004198 	.word	0x20004198

0002d900 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2d900:	b580      	push	{r7, lr}
   2d902:	b082      	sub	sp, #8
   2d904:	af00      	add	r7, sp, #0
   2d906:	6078      	str	r0, [r7, #4]
   2d908:	000a      	movs	r2, r1
   2d90a:	1cbb      	adds	r3, r7, #2
   2d90c:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2d90e:	687b      	ldr	r3, [r7, #4]
   2d910:	2b00      	cmp	r3, #0
   2d912:	d009      	beq.n	2d928 <validate+0x28>
   2d914:	687b      	ldr	r3, [r7, #4]
   2d916:	781b      	ldrb	r3, [r3, #0]
   2d918:	2b00      	cmp	r3, #0
   2d91a:	d005      	beq.n	2d928 <validate+0x28>
   2d91c:	687b      	ldr	r3, [r7, #4]
   2d91e:	88db      	ldrh	r3, [r3, #6]
   2d920:	1cba      	adds	r2, r7, #2
   2d922:	8812      	ldrh	r2, [r2, #0]
   2d924:	429a      	cmp	r2, r3
   2d926:	d001      	beq.n	2d92c <validate+0x2c>
		return FR_INVALID_OBJECT;
   2d928:	2309      	movs	r3, #9
   2d92a:	e00c      	b.n	2d946 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2d92c:	687b      	ldr	r3, [r7, #4]
   2d92e:	785b      	ldrb	r3, [r3, #1]
   2d930:	0018      	movs	r0, r3
   2d932:	4b07      	ldr	r3, [pc, #28]	; (2d950 <validate+0x50>)
   2d934:	4798      	blx	r3
   2d936:	0003      	movs	r3, r0
   2d938:	001a      	movs	r2, r3
   2d93a:	2301      	movs	r3, #1
   2d93c:	4013      	ands	r3, r2
   2d93e:	d001      	beq.n	2d944 <validate+0x44>
		return FR_NOT_READY;
   2d940:	2303      	movs	r3, #3
   2d942:	e000      	b.n	2d946 <validate+0x46>

	return FR_OK;
   2d944:	2300      	movs	r3, #0
}
   2d946:	0018      	movs	r0, r3
   2d948:	46bd      	mov	sp, r7
   2d94a:	b002      	add	sp, #8
   2d94c:	bd80      	pop	{r7, pc}
   2d94e:	46c0      	nop			; (mov r8, r8)
   2d950:	0002b461 	.word	0x0002b461

0002d954 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2d954:	b580      	push	{r7, lr}
   2d956:	b084      	sub	sp, #16
   2d958:	af00      	add	r7, sp, #0
   2d95a:	0002      	movs	r2, r0
   2d95c:	6039      	str	r1, [r7, #0]
   2d95e:	1dfb      	adds	r3, r7, #7
   2d960:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2d962:	1dfb      	adds	r3, r7, #7
   2d964:	781b      	ldrb	r3, [r3, #0]
   2d966:	2b07      	cmp	r3, #7
   2d968:	d901      	bls.n	2d96e <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2d96a:	230b      	movs	r3, #11
   2d96c:	e018      	b.n	2d9a0 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2d96e:	1dfb      	adds	r3, r7, #7
   2d970:	781a      	ldrb	r2, [r3, #0]
   2d972:	4b0d      	ldr	r3, [pc, #52]	; (2d9a8 <f_mount+0x54>)
   2d974:	0092      	lsls	r2, r2, #2
   2d976:	58d3      	ldr	r3, [r2, r3]
   2d978:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2d97a:	68fb      	ldr	r3, [r7, #12]
   2d97c:	2b00      	cmp	r3, #0
   2d97e:	d002      	beq.n	2d986 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2d980:	68fb      	ldr	r3, [r7, #12]
   2d982:	2200      	movs	r2, #0
   2d984:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2d986:	683b      	ldr	r3, [r7, #0]
   2d988:	2b00      	cmp	r3, #0
   2d98a:	d002      	beq.n	2d992 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2d98c:	683b      	ldr	r3, [r7, #0]
   2d98e:	2200      	movs	r2, #0
   2d990:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2d992:	1dfb      	adds	r3, r7, #7
   2d994:	781a      	ldrb	r2, [r3, #0]
   2d996:	4b04      	ldr	r3, [pc, #16]	; (2d9a8 <f_mount+0x54>)
   2d998:	0092      	lsls	r2, r2, #2
   2d99a:	6839      	ldr	r1, [r7, #0]
   2d99c:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2d99e:	2300      	movs	r3, #0
}
   2d9a0:	0018      	movs	r0, r3
   2d9a2:	46bd      	mov	sp, r7
   2d9a4:	b004      	add	sp, #16
   2d9a6:	bd80      	pop	{r7, pc}
   2d9a8:	20004178 	.word	0x20004178

0002d9ac <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2d9ac:	b590      	push	{r4, r7, lr}
   2d9ae:	4ce5      	ldr	r4, [pc, #916]	; (2dd44 <f_open+0x398>)
   2d9b0:	44a5      	add	sp, r4
   2d9b2:	af00      	add	r7, sp, #0
   2d9b4:	60f8      	str	r0, [r7, #12]
   2d9b6:	60b9      	str	r1, [r7, #8]
   2d9b8:	4be3      	ldr	r3, [pc, #908]	; (2dd48 <f_open+0x39c>)
   2d9ba:	2194      	movs	r1, #148	; 0x94
   2d9bc:	0089      	lsls	r1, r1, #2
   2d9be:	468c      	mov	ip, r1
   2d9c0:	44bc      	add	ip, r7
   2d9c2:	4463      	add	r3, ip
   2d9c4:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2d9c6:	68fb      	ldr	r3, [r7, #12]
   2d9c8:	2200      	movs	r2, #0
   2d9ca:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2d9cc:	4bde      	ldr	r3, [pc, #888]	; (2dd48 <f_open+0x39c>)
   2d9ce:	2294      	movs	r2, #148	; 0x94
   2d9d0:	0092      	lsls	r2, r2, #2
   2d9d2:	4694      	mov	ip, r2
   2d9d4:	44bc      	add	ip, r7
   2d9d6:	4463      	add	r3, ip
   2d9d8:	4adb      	ldr	r2, [pc, #876]	; (2dd48 <f_open+0x39c>)
   2d9da:	2194      	movs	r1, #148	; 0x94
   2d9dc:	0089      	lsls	r1, r1, #2
   2d9de:	468c      	mov	ip, r1
   2d9e0:	44bc      	add	ip, r7
   2d9e2:	4462      	add	r2, ip
   2d9e4:	7812      	ldrb	r2, [r2, #0]
   2d9e6:	211f      	movs	r1, #31
   2d9e8:	400a      	ands	r2, r1
   2d9ea:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2d9ec:	4bd6      	ldr	r3, [pc, #856]	; (2dd48 <f_open+0x39c>)
   2d9ee:	2294      	movs	r2, #148	; 0x94
   2d9f0:	0092      	lsls	r2, r2, #2
   2d9f2:	4694      	mov	ip, r2
   2d9f4:	44bc      	add	ip, r7
   2d9f6:	4463      	add	r3, ip
   2d9f8:	781b      	ldrb	r3, [r3, #0]
   2d9fa:	2201      	movs	r2, #1
   2d9fc:	4393      	bics	r3, r2
   2d9fe:	b2da      	uxtb	r2, r3
   2da00:	4bd2      	ldr	r3, [pc, #840]	; (2dd4c <f_open+0x3a0>)
   2da02:	18fc      	adds	r4, r7, r3
   2da04:	2387      	movs	r3, #135	; 0x87
   2da06:	009b      	lsls	r3, r3, #2
   2da08:	18f9      	adds	r1, r7, r3
   2da0a:	2308      	movs	r3, #8
   2da0c:	18fb      	adds	r3, r7, r3
   2da0e:	0018      	movs	r0, r3
   2da10:	4bcf      	ldr	r3, [pc, #828]	; (2dd50 <f_open+0x3a4>)
   2da12:	4798      	blx	r3
   2da14:	0003      	movs	r3, r0
   2da16:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2da18:	2387      	movs	r3, #135	; 0x87
   2da1a:	009b      	lsls	r3, r3, #2
   2da1c:	18fb      	adds	r3, r7, r3
   2da1e:	2284      	movs	r2, #132	; 0x84
   2da20:	0092      	lsls	r2, r2, #2
   2da22:	18ba      	adds	r2, r7, r2
   2da24:	619a      	str	r2, [r3, #24]
   2da26:	2387      	movs	r3, #135	; 0x87
   2da28:	009b      	lsls	r3, r3, #2
   2da2a:	18fb      	adds	r3, r7, r3
   2da2c:	2210      	movs	r2, #16
   2da2e:	18ba      	adds	r2, r7, r2
   2da30:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2da32:	4bc6      	ldr	r3, [pc, #792]	; (2dd4c <f_open+0x3a0>)
   2da34:	18fb      	adds	r3, r7, r3
   2da36:	781b      	ldrb	r3, [r3, #0]
   2da38:	2b00      	cmp	r3, #0
   2da3a:	d10b      	bne.n	2da54 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2da3c:	68ba      	ldr	r2, [r7, #8]
   2da3e:	4bc3      	ldr	r3, [pc, #780]	; (2dd4c <f_open+0x3a0>)
   2da40:	18fc      	adds	r4, r7, r3
   2da42:	2387      	movs	r3, #135	; 0x87
   2da44:	009b      	lsls	r3, r3, #2
   2da46:	18fb      	adds	r3, r7, r3
   2da48:	0011      	movs	r1, r2
   2da4a:	0018      	movs	r0, r3
   2da4c:	4bc1      	ldr	r3, [pc, #772]	; (2dd54 <f_open+0x3a8>)
   2da4e:	4798      	blx	r3
   2da50:	0003      	movs	r3, r0
   2da52:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2da54:	2387      	movs	r3, #135	; 0x87
   2da56:	009b      	lsls	r3, r3, #2
   2da58:	18fb      	adds	r3, r7, r3
   2da5a:	695b      	ldr	r3, [r3, #20]
   2da5c:	2292      	movs	r2, #146	; 0x92
   2da5e:	0092      	lsls	r2, r2, #2
   2da60:	18ba      	adds	r2, r7, r2
   2da62:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2da64:	4bb9      	ldr	r3, [pc, #740]	; (2dd4c <f_open+0x3a0>)
   2da66:	18fb      	adds	r3, r7, r3
   2da68:	781b      	ldrb	r3, [r3, #0]
   2da6a:	2b00      	cmp	r3, #0
   2da6c:	d109      	bne.n	2da82 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2da6e:	2392      	movs	r3, #146	; 0x92
   2da70:	009b      	lsls	r3, r3, #2
   2da72:	18fb      	adds	r3, r7, r3
   2da74:	681b      	ldr	r3, [r3, #0]
   2da76:	2b00      	cmp	r3, #0
   2da78:	d103      	bne.n	2da82 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2da7a:	4bb4      	ldr	r3, [pc, #720]	; (2dd4c <f_open+0x3a0>)
   2da7c:	18fb      	adds	r3, r7, r3
   2da7e:	2206      	movs	r2, #6
   2da80:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2da82:	4bb1      	ldr	r3, [pc, #708]	; (2dd48 <f_open+0x39c>)
   2da84:	2294      	movs	r2, #148	; 0x94
   2da86:	0092      	lsls	r2, r2, #2
   2da88:	4694      	mov	ip, r2
   2da8a:	44bc      	add	ip, r7
   2da8c:	4463      	add	r3, ip
   2da8e:	781b      	ldrb	r3, [r3, #0]
   2da90:	221c      	movs	r2, #28
   2da92:	4013      	ands	r3, r2
   2da94:	d100      	bne.n	2da98 <f_open+0xec>
   2da96:	e141      	b.n	2dd1c <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2da98:	4bac      	ldr	r3, [pc, #688]	; (2dd4c <f_open+0x3a0>)
   2da9a:	18fb      	adds	r3, r7, r3
   2da9c:	781b      	ldrb	r3, [r3, #0]
   2da9e:	2b00      	cmp	r3, #0
   2daa0:	d027      	beq.n	2daf2 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2daa2:	4baa      	ldr	r3, [pc, #680]	; (2dd4c <f_open+0x3a0>)
   2daa4:	18fb      	adds	r3, r7, r3
   2daa6:	781b      	ldrb	r3, [r3, #0]
   2daa8:	2b04      	cmp	r3, #4
   2daaa:	d109      	bne.n	2dac0 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2daac:	4ba7      	ldr	r3, [pc, #668]	; (2dd4c <f_open+0x3a0>)
   2daae:	18fc      	adds	r4, r7, r3
   2dab0:	2387      	movs	r3, #135	; 0x87
   2dab2:	009b      	lsls	r3, r3, #2
   2dab4:	18fb      	adds	r3, r7, r3
   2dab6:	0018      	movs	r0, r3
   2dab8:	4ba7      	ldr	r3, [pc, #668]	; (2dd58 <f_open+0x3ac>)
   2daba:	4798      	blx	r3
   2dabc:	0003      	movs	r3, r0
   2dabe:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2dac0:	4ba1      	ldr	r3, [pc, #644]	; (2dd48 <f_open+0x39c>)
   2dac2:	2294      	movs	r2, #148	; 0x94
   2dac4:	0092      	lsls	r2, r2, #2
   2dac6:	4694      	mov	ip, r2
   2dac8:	44bc      	add	ip, r7
   2daca:	4463      	add	r3, ip
   2dacc:	4a9e      	ldr	r2, [pc, #632]	; (2dd48 <f_open+0x39c>)
   2dace:	2194      	movs	r1, #148	; 0x94
   2dad0:	0089      	lsls	r1, r1, #2
   2dad2:	468c      	mov	ip, r1
   2dad4:	44bc      	add	ip, r7
   2dad6:	4462      	add	r2, ip
   2dad8:	7812      	ldrb	r2, [r2, #0]
   2dada:	2108      	movs	r1, #8
   2dadc:	430a      	orrs	r2, r1
   2dade:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2dae0:	2387      	movs	r3, #135	; 0x87
   2dae2:	009b      	lsls	r3, r3, #2
   2dae4:	18fb      	adds	r3, r7, r3
   2dae6:	695b      	ldr	r3, [r3, #20]
   2dae8:	2292      	movs	r2, #146	; 0x92
   2daea:	0092      	lsls	r2, r2, #2
   2daec:	18ba      	adds	r2, r7, r2
   2daee:	6013      	str	r3, [r2, #0]
   2daf0:	e01c      	b.n	2db2c <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2daf2:	2392      	movs	r3, #146	; 0x92
   2daf4:	009b      	lsls	r3, r3, #2
   2daf6:	18fb      	adds	r3, r7, r3
   2daf8:	681b      	ldr	r3, [r3, #0]
   2dafa:	330b      	adds	r3, #11
   2dafc:	781b      	ldrb	r3, [r3, #0]
   2dafe:	001a      	movs	r2, r3
   2db00:	2311      	movs	r3, #17
   2db02:	4013      	ands	r3, r2
   2db04:	d004      	beq.n	2db10 <f_open+0x164>
				res = FR_DENIED;
   2db06:	4b91      	ldr	r3, [pc, #580]	; (2dd4c <f_open+0x3a0>)
   2db08:	18fb      	adds	r3, r7, r3
   2db0a:	2207      	movs	r2, #7
   2db0c:	701a      	strb	r2, [r3, #0]
   2db0e:	e00d      	b.n	2db2c <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2db10:	4b8d      	ldr	r3, [pc, #564]	; (2dd48 <f_open+0x39c>)
   2db12:	2294      	movs	r2, #148	; 0x94
   2db14:	0092      	lsls	r2, r2, #2
   2db16:	4694      	mov	ip, r2
   2db18:	44bc      	add	ip, r7
   2db1a:	4463      	add	r3, ip
   2db1c:	781b      	ldrb	r3, [r3, #0]
   2db1e:	2204      	movs	r2, #4
   2db20:	4013      	ands	r3, r2
   2db22:	d003      	beq.n	2db2c <f_open+0x180>
					res = FR_EXIST;
   2db24:	4b89      	ldr	r3, [pc, #548]	; (2dd4c <f_open+0x3a0>)
   2db26:	18fb      	adds	r3, r7, r3
   2db28:	2208      	movs	r2, #8
   2db2a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2db2c:	4b87      	ldr	r3, [pc, #540]	; (2dd4c <f_open+0x3a0>)
   2db2e:	18fb      	adds	r3, r7, r3
   2db30:	781b      	ldrb	r3, [r3, #0]
   2db32:	2b00      	cmp	r3, #0
   2db34:	d000      	beq.n	2db38 <f_open+0x18c>
   2db36:	e12f      	b.n	2dd98 <f_open+0x3ec>
   2db38:	4b83      	ldr	r3, [pc, #524]	; (2dd48 <f_open+0x39c>)
   2db3a:	2294      	movs	r2, #148	; 0x94
   2db3c:	0092      	lsls	r2, r2, #2
   2db3e:	4694      	mov	ip, r2
   2db40:	44bc      	add	ip, r7
   2db42:	4463      	add	r3, ip
   2db44:	781b      	ldrb	r3, [r3, #0]
   2db46:	2208      	movs	r2, #8
   2db48:	4013      	ands	r3, r2
   2db4a:	d100      	bne.n	2db4e <f_open+0x1a2>
   2db4c:	e124      	b.n	2dd98 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2db4e:	4b83      	ldr	r3, [pc, #524]	; (2dd5c <f_open+0x3b0>)
   2db50:	4798      	blx	r3
   2db52:	0003      	movs	r3, r0
   2db54:	2291      	movs	r2, #145	; 0x91
   2db56:	0092      	lsls	r2, r2, #2
   2db58:	18ba      	adds	r2, r7, r2
   2db5a:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2db5c:	2392      	movs	r3, #146	; 0x92
   2db5e:	009b      	lsls	r3, r3, #2
   2db60:	18fb      	adds	r3, r7, r3
   2db62:	681b      	ldr	r3, [r3, #0]
   2db64:	330e      	adds	r3, #14
   2db66:	2291      	movs	r2, #145	; 0x91
   2db68:	0092      	lsls	r2, r2, #2
   2db6a:	18ba      	adds	r2, r7, r2
   2db6c:	6812      	ldr	r2, [r2, #0]
   2db6e:	b2d2      	uxtb	r2, r2
   2db70:	701a      	strb	r2, [r3, #0]
   2db72:	2392      	movs	r3, #146	; 0x92
   2db74:	009b      	lsls	r3, r3, #2
   2db76:	18fb      	adds	r3, r7, r3
   2db78:	681b      	ldr	r3, [r3, #0]
   2db7a:	330f      	adds	r3, #15
   2db7c:	2291      	movs	r2, #145	; 0x91
   2db7e:	0092      	lsls	r2, r2, #2
   2db80:	18ba      	adds	r2, r7, r2
   2db82:	6812      	ldr	r2, [r2, #0]
   2db84:	b292      	uxth	r2, r2
   2db86:	0a12      	lsrs	r2, r2, #8
   2db88:	b292      	uxth	r2, r2
   2db8a:	b2d2      	uxtb	r2, r2
   2db8c:	701a      	strb	r2, [r3, #0]
   2db8e:	2392      	movs	r3, #146	; 0x92
   2db90:	009b      	lsls	r3, r3, #2
   2db92:	18fb      	adds	r3, r7, r3
   2db94:	681b      	ldr	r3, [r3, #0]
   2db96:	3310      	adds	r3, #16
   2db98:	2291      	movs	r2, #145	; 0x91
   2db9a:	0092      	lsls	r2, r2, #2
   2db9c:	18ba      	adds	r2, r7, r2
   2db9e:	6812      	ldr	r2, [r2, #0]
   2dba0:	0c12      	lsrs	r2, r2, #16
   2dba2:	b2d2      	uxtb	r2, r2
   2dba4:	701a      	strb	r2, [r3, #0]
   2dba6:	2392      	movs	r3, #146	; 0x92
   2dba8:	009b      	lsls	r3, r3, #2
   2dbaa:	18fb      	adds	r3, r7, r3
   2dbac:	681b      	ldr	r3, [r3, #0]
   2dbae:	3311      	adds	r3, #17
   2dbb0:	2291      	movs	r2, #145	; 0x91
   2dbb2:	0092      	lsls	r2, r2, #2
   2dbb4:	18ba      	adds	r2, r7, r2
   2dbb6:	6812      	ldr	r2, [r2, #0]
   2dbb8:	0e12      	lsrs	r2, r2, #24
   2dbba:	b2d2      	uxtb	r2, r2
   2dbbc:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2dbbe:	2392      	movs	r3, #146	; 0x92
   2dbc0:	009b      	lsls	r3, r3, #2
   2dbc2:	18fb      	adds	r3, r7, r3
   2dbc4:	681b      	ldr	r3, [r3, #0]
   2dbc6:	330b      	adds	r3, #11
   2dbc8:	2200      	movs	r2, #0
   2dbca:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2dbcc:	2392      	movs	r3, #146	; 0x92
   2dbce:	009b      	lsls	r3, r3, #2
   2dbd0:	18fb      	adds	r3, r7, r3
   2dbd2:	681b      	ldr	r3, [r3, #0]
   2dbd4:	331c      	adds	r3, #28
   2dbd6:	2200      	movs	r2, #0
   2dbd8:	701a      	strb	r2, [r3, #0]
   2dbda:	2392      	movs	r3, #146	; 0x92
   2dbdc:	009b      	lsls	r3, r3, #2
   2dbde:	18fb      	adds	r3, r7, r3
   2dbe0:	681b      	ldr	r3, [r3, #0]
   2dbe2:	331d      	adds	r3, #29
   2dbe4:	2200      	movs	r2, #0
   2dbe6:	701a      	strb	r2, [r3, #0]
   2dbe8:	2392      	movs	r3, #146	; 0x92
   2dbea:	009b      	lsls	r3, r3, #2
   2dbec:	18fb      	adds	r3, r7, r3
   2dbee:	681b      	ldr	r3, [r3, #0]
   2dbf0:	331e      	adds	r3, #30
   2dbf2:	2200      	movs	r2, #0
   2dbf4:	701a      	strb	r2, [r3, #0]
   2dbf6:	2392      	movs	r3, #146	; 0x92
   2dbf8:	009b      	lsls	r3, r3, #2
   2dbfa:	18fb      	adds	r3, r7, r3
   2dbfc:	681b      	ldr	r3, [r3, #0]
   2dbfe:	331f      	adds	r3, #31
   2dc00:	2200      	movs	r2, #0
   2dc02:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2dc04:	2392      	movs	r3, #146	; 0x92
   2dc06:	009b      	lsls	r3, r3, #2
   2dc08:	18fb      	adds	r3, r7, r3
   2dc0a:	681b      	ldr	r3, [r3, #0]
   2dc0c:	3315      	adds	r3, #21
   2dc0e:	781b      	ldrb	r3, [r3, #0]
   2dc10:	021b      	lsls	r3, r3, #8
   2dc12:	b21a      	sxth	r2, r3
   2dc14:	2392      	movs	r3, #146	; 0x92
   2dc16:	009b      	lsls	r3, r3, #2
   2dc18:	18fb      	adds	r3, r7, r3
   2dc1a:	681b      	ldr	r3, [r3, #0]
   2dc1c:	3314      	adds	r3, #20
   2dc1e:	781b      	ldrb	r3, [r3, #0]
   2dc20:	b21b      	sxth	r3, r3
   2dc22:	4313      	orrs	r3, r2
   2dc24:	b21b      	sxth	r3, r3
   2dc26:	b29b      	uxth	r3, r3
   2dc28:	041b      	lsls	r3, r3, #16
   2dc2a:	2292      	movs	r2, #146	; 0x92
   2dc2c:	0092      	lsls	r2, r2, #2
   2dc2e:	18ba      	adds	r2, r7, r2
   2dc30:	6812      	ldr	r2, [r2, #0]
   2dc32:	321b      	adds	r2, #27
   2dc34:	7812      	ldrb	r2, [r2, #0]
   2dc36:	0212      	lsls	r2, r2, #8
   2dc38:	b211      	sxth	r1, r2
   2dc3a:	2292      	movs	r2, #146	; 0x92
   2dc3c:	0092      	lsls	r2, r2, #2
   2dc3e:	18ba      	adds	r2, r7, r2
   2dc40:	6812      	ldr	r2, [r2, #0]
   2dc42:	321a      	adds	r2, #26
   2dc44:	7812      	ldrb	r2, [r2, #0]
   2dc46:	b212      	sxth	r2, r2
   2dc48:	430a      	orrs	r2, r1
   2dc4a:	b212      	sxth	r2, r2
   2dc4c:	b292      	uxth	r2, r2
   2dc4e:	4313      	orrs	r3, r2
   2dc50:	2290      	movs	r2, #144	; 0x90
   2dc52:	0092      	lsls	r2, r2, #2
   2dc54:	18ba      	adds	r2, r7, r2
   2dc56:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2dc58:	2392      	movs	r3, #146	; 0x92
   2dc5a:	009b      	lsls	r3, r3, #2
   2dc5c:	18fb      	adds	r3, r7, r3
   2dc5e:	681b      	ldr	r3, [r3, #0]
   2dc60:	331a      	adds	r3, #26
   2dc62:	2200      	movs	r2, #0
   2dc64:	701a      	strb	r2, [r3, #0]
   2dc66:	2392      	movs	r3, #146	; 0x92
   2dc68:	009b      	lsls	r3, r3, #2
   2dc6a:	18fb      	adds	r3, r7, r3
   2dc6c:	681b      	ldr	r3, [r3, #0]
   2dc6e:	331b      	adds	r3, #27
   2dc70:	2200      	movs	r2, #0
   2dc72:	701a      	strb	r2, [r3, #0]
   2dc74:	2392      	movs	r3, #146	; 0x92
   2dc76:	009b      	lsls	r3, r3, #2
   2dc78:	18fb      	adds	r3, r7, r3
   2dc7a:	681b      	ldr	r3, [r3, #0]
   2dc7c:	3314      	adds	r3, #20
   2dc7e:	2200      	movs	r2, #0
   2dc80:	701a      	strb	r2, [r3, #0]
   2dc82:	2392      	movs	r3, #146	; 0x92
   2dc84:	009b      	lsls	r3, r3, #2
   2dc86:	18fb      	adds	r3, r7, r3
   2dc88:	681b      	ldr	r3, [r3, #0]
   2dc8a:	3315      	adds	r3, #21
   2dc8c:	2200      	movs	r2, #0
   2dc8e:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2dc90:	2387      	movs	r3, #135	; 0x87
   2dc92:	009b      	lsls	r3, r3, #2
   2dc94:	18fb      	adds	r3, r7, r3
   2dc96:	681b      	ldr	r3, [r3, #0]
   2dc98:	2201      	movs	r2, #1
   2dc9a:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2dc9c:	2390      	movs	r3, #144	; 0x90
   2dc9e:	009b      	lsls	r3, r3, #2
   2dca0:	18fb      	adds	r3, r7, r3
   2dca2:	681b      	ldr	r3, [r3, #0]
   2dca4:	2b00      	cmp	r3, #0
   2dca6:	d100      	bne.n	2dcaa <f_open+0x2fe>
   2dca8:	e076      	b.n	2dd98 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2dcaa:	2387      	movs	r3, #135	; 0x87
   2dcac:	009b      	lsls	r3, r3, #2
   2dcae:	18fb      	adds	r3, r7, r3
   2dcb0:	681b      	ldr	r3, [r3, #0]
   2dcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2dcb4:	2291      	movs	r2, #145	; 0x91
   2dcb6:	0092      	lsls	r2, r2, #2
   2dcb8:	18ba      	adds	r2, r7, r2
   2dcba:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2dcbc:	2387      	movs	r3, #135	; 0x87
   2dcbe:	009b      	lsls	r3, r3, #2
   2dcc0:	18fb      	adds	r3, r7, r3
   2dcc2:	681b      	ldr	r3, [r3, #0]
   2dcc4:	4a21      	ldr	r2, [pc, #132]	; (2dd4c <f_open+0x3a0>)
   2dcc6:	18bc      	adds	r4, r7, r2
   2dcc8:	2290      	movs	r2, #144	; 0x90
   2dcca:	0092      	lsls	r2, r2, #2
   2dccc:	18ba      	adds	r2, r7, r2
   2dcce:	6812      	ldr	r2, [r2, #0]
   2dcd0:	0011      	movs	r1, r2
   2dcd2:	0018      	movs	r0, r3
   2dcd4:	4b22      	ldr	r3, [pc, #136]	; (2dd60 <f_open+0x3b4>)
   2dcd6:	4798      	blx	r3
   2dcd8:	0003      	movs	r3, r0
   2dcda:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2dcdc:	4b1b      	ldr	r3, [pc, #108]	; (2dd4c <f_open+0x3a0>)
   2dcde:	18fb      	adds	r3, r7, r3
   2dce0:	781b      	ldrb	r3, [r3, #0]
   2dce2:	2b00      	cmp	r3, #0
   2dce4:	d158      	bne.n	2dd98 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2dce6:	2387      	movs	r3, #135	; 0x87
   2dce8:	009b      	lsls	r3, r3, #2
   2dcea:	18fb      	adds	r3, r7, r3
   2dcec:	681b      	ldr	r3, [r3, #0]
   2dcee:	2290      	movs	r2, #144	; 0x90
   2dcf0:	0092      	lsls	r2, r2, #2
   2dcf2:	18ba      	adds	r2, r7, r2
   2dcf4:	6812      	ldr	r2, [r2, #0]
   2dcf6:	3a01      	subs	r2, #1
   2dcf8:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2dcfa:	2387      	movs	r3, #135	; 0x87
   2dcfc:	009b      	lsls	r3, r3, #2
   2dcfe:	18fb      	adds	r3, r7, r3
   2dd00:	681b      	ldr	r3, [r3, #0]
   2dd02:	4a12      	ldr	r2, [pc, #72]	; (2dd4c <f_open+0x3a0>)
   2dd04:	18bc      	adds	r4, r7, r2
   2dd06:	2291      	movs	r2, #145	; 0x91
   2dd08:	0092      	lsls	r2, r2, #2
   2dd0a:	18ba      	adds	r2, r7, r2
   2dd0c:	6812      	ldr	r2, [r2, #0]
   2dd0e:	0011      	movs	r1, r2
   2dd10:	0018      	movs	r0, r3
   2dd12:	4b14      	ldr	r3, [pc, #80]	; (2dd64 <f_open+0x3b8>)
   2dd14:	4798      	blx	r3
   2dd16:	0003      	movs	r3, r0
   2dd18:	7023      	strb	r3, [r4, #0]
   2dd1a:	e03d      	b.n	2dd98 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2dd1c:	4b0b      	ldr	r3, [pc, #44]	; (2dd4c <f_open+0x3a0>)
   2dd1e:	18fb      	adds	r3, r7, r3
   2dd20:	781b      	ldrb	r3, [r3, #0]
   2dd22:	2b00      	cmp	r3, #0
   2dd24:	d138      	bne.n	2dd98 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2dd26:	2392      	movs	r3, #146	; 0x92
   2dd28:	009b      	lsls	r3, r3, #2
   2dd2a:	18fb      	adds	r3, r7, r3
   2dd2c:	681b      	ldr	r3, [r3, #0]
   2dd2e:	330b      	adds	r3, #11
   2dd30:	781b      	ldrb	r3, [r3, #0]
   2dd32:	001a      	movs	r2, r3
   2dd34:	2310      	movs	r3, #16
   2dd36:	4013      	ands	r3, r2
   2dd38:	d016      	beq.n	2dd68 <f_open+0x3bc>
				res = FR_NO_FILE;
   2dd3a:	4b04      	ldr	r3, [pc, #16]	; (2dd4c <f_open+0x3a0>)
   2dd3c:	18fb      	adds	r3, r7, r3
   2dd3e:	2204      	movs	r2, #4
   2dd40:	701a      	strb	r2, [r3, #0]
   2dd42:	e029      	b.n	2dd98 <f_open+0x3ec>
   2dd44:	fffffdac 	.word	0xfffffdac
   2dd48:	fffffdb7 	.word	0xfffffdb7
   2dd4c:	0000024f 	.word	0x0000024f
   2dd50:	0002d305 	.word	0x0002d305
   2dd54:	0002d0f9 	.word	0x0002d0f9
   2dd58:	0002c949 	.word	0x0002c949
   2dd5c:	0002b741 	.word	0x0002b741
   2dd60:	0002bec5 	.word	0x0002bec5
   2dd64:	0002b885 	.word	0x0002b885
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2dd68:	4b5a      	ldr	r3, [pc, #360]	; (2ded4 <f_open+0x528>)
   2dd6a:	2294      	movs	r2, #148	; 0x94
   2dd6c:	0092      	lsls	r2, r2, #2
   2dd6e:	4694      	mov	ip, r2
   2dd70:	44bc      	add	ip, r7
   2dd72:	4463      	add	r3, ip
   2dd74:	781b      	ldrb	r3, [r3, #0]
   2dd76:	2202      	movs	r2, #2
   2dd78:	4013      	ands	r3, r2
   2dd7a:	d00d      	beq.n	2dd98 <f_open+0x3ec>
   2dd7c:	2392      	movs	r3, #146	; 0x92
   2dd7e:	009b      	lsls	r3, r3, #2
   2dd80:	18fb      	adds	r3, r7, r3
   2dd82:	681b      	ldr	r3, [r3, #0]
   2dd84:	330b      	adds	r3, #11
   2dd86:	781b      	ldrb	r3, [r3, #0]
   2dd88:	001a      	movs	r2, r3
   2dd8a:	2301      	movs	r3, #1
   2dd8c:	4013      	ands	r3, r2
   2dd8e:	d003      	beq.n	2dd98 <f_open+0x3ec>
					res = FR_DENIED;
   2dd90:	4b51      	ldr	r3, [pc, #324]	; (2ded8 <f_open+0x52c>)
   2dd92:	18fb      	adds	r3, r7, r3
   2dd94:	2207      	movs	r2, #7
   2dd96:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2dd98:	4b4f      	ldr	r3, [pc, #316]	; (2ded8 <f_open+0x52c>)
   2dd9a:	18fb      	adds	r3, r7, r3
   2dd9c:	781b      	ldrb	r3, [r3, #0]
   2dd9e:	2b00      	cmp	r3, #0
   2dda0:	d126      	bne.n	2ddf0 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2dda2:	4b4c      	ldr	r3, [pc, #304]	; (2ded4 <f_open+0x528>)
   2dda4:	2294      	movs	r2, #148	; 0x94
   2dda6:	0092      	lsls	r2, r2, #2
   2dda8:	4694      	mov	ip, r2
   2ddaa:	44bc      	add	ip, r7
   2ddac:	4463      	add	r3, ip
   2ddae:	781b      	ldrb	r3, [r3, #0]
   2ddb0:	2208      	movs	r2, #8
   2ddb2:	4013      	ands	r3, r2
   2ddb4:	d00f      	beq.n	2ddd6 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2ddb6:	4b47      	ldr	r3, [pc, #284]	; (2ded4 <f_open+0x528>)
   2ddb8:	2294      	movs	r2, #148	; 0x94
   2ddba:	0092      	lsls	r2, r2, #2
   2ddbc:	4694      	mov	ip, r2
   2ddbe:	44bc      	add	ip, r7
   2ddc0:	4463      	add	r3, ip
   2ddc2:	4a44      	ldr	r2, [pc, #272]	; (2ded4 <f_open+0x528>)
   2ddc4:	2194      	movs	r1, #148	; 0x94
   2ddc6:	0089      	lsls	r1, r1, #2
   2ddc8:	468c      	mov	ip, r1
   2ddca:	44bc      	add	ip, r7
   2ddcc:	4462      	add	r2, ip
   2ddce:	7812      	ldrb	r2, [r2, #0]
   2ddd0:	2120      	movs	r1, #32
   2ddd2:	430a      	orrs	r2, r1
   2ddd4:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2ddd6:	2387      	movs	r3, #135	; 0x87
   2ddd8:	009b      	lsls	r3, r3, #2
   2ddda:	18fb      	adds	r3, r7, r3
   2dddc:	681b      	ldr	r3, [r3, #0]
   2ddde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2dde0:	68fb      	ldr	r3, [r7, #12]
   2dde2:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2dde4:	68fb      	ldr	r3, [r7, #12]
   2dde6:	2292      	movs	r2, #146	; 0x92
   2dde8:	0092      	lsls	r2, r2, #2
   2ddea:	18ba      	adds	r2, r7, r2
   2ddec:	6812      	ldr	r2, [r2, #0]
   2ddee:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2ddf0:	4b39      	ldr	r3, [pc, #228]	; (2ded8 <f_open+0x52c>)
   2ddf2:	18fb      	adds	r3, r7, r3
   2ddf4:	781b      	ldrb	r3, [r3, #0]
   2ddf6:	2b00      	cmp	r3, #0
   2ddf8:	d163      	bne.n	2dec2 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2ddfa:	68fb      	ldr	r3, [r7, #12]
   2ddfc:	4a35      	ldr	r2, [pc, #212]	; (2ded4 <f_open+0x528>)
   2ddfe:	2194      	movs	r1, #148	; 0x94
   2de00:	0089      	lsls	r1, r1, #2
   2de02:	468c      	mov	ip, r1
   2de04:	44bc      	add	ip, r7
   2de06:	4462      	add	r2, ip
   2de08:	7812      	ldrb	r2, [r2, #0]
   2de0a:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2de0c:	2392      	movs	r3, #146	; 0x92
   2de0e:	009b      	lsls	r3, r3, #2
   2de10:	18fb      	adds	r3, r7, r3
   2de12:	681b      	ldr	r3, [r3, #0]
   2de14:	3315      	adds	r3, #21
   2de16:	781b      	ldrb	r3, [r3, #0]
   2de18:	021b      	lsls	r3, r3, #8
   2de1a:	b21a      	sxth	r2, r3
   2de1c:	2392      	movs	r3, #146	; 0x92
   2de1e:	009b      	lsls	r3, r3, #2
   2de20:	18fb      	adds	r3, r7, r3
   2de22:	681b      	ldr	r3, [r3, #0]
   2de24:	3314      	adds	r3, #20
   2de26:	781b      	ldrb	r3, [r3, #0]
   2de28:	b21b      	sxth	r3, r3
   2de2a:	4313      	orrs	r3, r2
   2de2c:	b21b      	sxth	r3, r3
   2de2e:	b29b      	uxth	r3, r3
   2de30:	041b      	lsls	r3, r3, #16
   2de32:	2292      	movs	r2, #146	; 0x92
   2de34:	0092      	lsls	r2, r2, #2
   2de36:	18ba      	adds	r2, r7, r2
   2de38:	6812      	ldr	r2, [r2, #0]
   2de3a:	321b      	adds	r2, #27
   2de3c:	7812      	ldrb	r2, [r2, #0]
   2de3e:	0212      	lsls	r2, r2, #8
   2de40:	b211      	sxth	r1, r2
   2de42:	2292      	movs	r2, #146	; 0x92
   2de44:	0092      	lsls	r2, r2, #2
   2de46:	18ba      	adds	r2, r7, r2
   2de48:	6812      	ldr	r2, [r2, #0]
   2de4a:	321a      	adds	r2, #26
   2de4c:	7812      	ldrb	r2, [r2, #0]
   2de4e:	b212      	sxth	r2, r2
   2de50:	430a      	orrs	r2, r1
   2de52:	b212      	sxth	r2, r2
   2de54:	b292      	uxth	r2, r2
   2de56:	431a      	orrs	r2, r3
   2de58:	68fb      	ldr	r3, [r7, #12]
   2de5a:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2de5c:	2392      	movs	r3, #146	; 0x92
   2de5e:	009b      	lsls	r3, r3, #2
   2de60:	18fb      	adds	r3, r7, r3
   2de62:	681b      	ldr	r3, [r3, #0]
   2de64:	331f      	adds	r3, #31
   2de66:	781b      	ldrb	r3, [r3, #0]
   2de68:	061a      	lsls	r2, r3, #24
   2de6a:	2392      	movs	r3, #146	; 0x92
   2de6c:	009b      	lsls	r3, r3, #2
   2de6e:	18fb      	adds	r3, r7, r3
   2de70:	681b      	ldr	r3, [r3, #0]
   2de72:	331e      	adds	r3, #30
   2de74:	781b      	ldrb	r3, [r3, #0]
   2de76:	041b      	lsls	r3, r3, #16
   2de78:	4313      	orrs	r3, r2
   2de7a:	2292      	movs	r2, #146	; 0x92
   2de7c:	0092      	lsls	r2, r2, #2
   2de7e:	18ba      	adds	r2, r7, r2
   2de80:	6812      	ldr	r2, [r2, #0]
   2de82:	321d      	adds	r2, #29
   2de84:	7812      	ldrb	r2, [r2, #0]
   2de86:	0212      	lsls	r2, r2, #8
   2de88:	4313      	orrs	r3, r2
   2de8a:	2292      	movs	r2, #146	; 0x92
   2de8c:	0092      	lsls	r2, r2, #2
   2de8e:	18ba      	adds	r2, r7, r2
   2de90:	6812      	ldr	r2, [r2, #0]
   2de92:	321c      	adds	r2, #28
   2de94:	7812      	ldrb	r2, [r2, #0]
   2de96:	431a      	orrs	r2, r3
   2de98:	68fb      	ldr	r3, [r7, #12]
   2de9a:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2de9c:	68fb      	ldr	r3, [r7, #12]
   2de9e:	2200      	movs	r2, #0
   2dea0:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2dea2:	68fb      	ldr	r3, [r7, #12]
   2dea4:	2200      	movs	r2, #0
   2dea6:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2dea8:	2387      	movs	r3, #135	; 0x87
   2deaa:	009b      	lsls	r3, r3, #2
   2deac:	18fb      	adds	r3, r7, r3
   2deae:	681a      	ldr	r2, [r3, #0]
   2deb0:	68fb      	ldr	r3, [r7, #12]
   2deb2:	601a      	str	r2, [r3, #0]
   2deb4:	2387      	movs	r3, #135	; 0x87
   2deb6:	009b      	lsls	r3, r3, #2
   2deb8:	18fb      	adds	r3, r7, r3
   2deba:	681b      	ldr	r3, [r3, #0]
   2debc:	88da      	ldrh	r2, [r3, #6]
   2debe:	68fb      	ldr	r3, [r7, #12]
   2dec0:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2dec2:	4b05      	ldr	r3, [pc, #20]	; (2ded8 <f_open+0x52c>)
   2dec4:	18fb      	adds	r3, r7, r3
   2dec6:	781b      	ldrb	r3, [r3, #0]
}
   2dec8:	0018      	movs	r0, r3
   2deca:	46bd      	mov	sp, r7
   2decc:	2395      	movs	r3, #149	; 0x95
   2dece:	009b      	lsls	r3, r3, #2
   2ded0:	449d      	add	sp, r3
   2ded2:	bd90      	pop	{r4, r7, pc}
   2ded4:	fffffdb7 	.word	0xfffffdb7
   2ded8:	0000024f 	.word	0x0000024f

0002dedc <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2dedc:	b590      	push	{r4, r7, lr}
   2dede:	b08b      	sub	sp, #44	; 0x2c
   2dee0:	af00      	add	r7, sp, #0
   2dee2:	60f8      	str	r0, [r7, #12]
   2dee4:	60b9      	str	r1, [r7, #8]
   2dee6:	607a      	str	r2, [r7, #4]
   2dee8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2deea:	68bb      	ldr	r3, [r7, #8]
   2deec:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2deee:	683b      	ldr	r3, [r7, #0]
   2def0:	2200      	movs	r2, #0
   2def2:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2def4:	68fb      	ldr	r3, [r7, #12]
   2def6:	681a      	ldr	r2, [r3, #0]
   2def8:	68fb      	ldr	r3, [r7, #12]
   2defa:	889b      	ldrh	r3, [r3, #4]
   2defc:	2117      	movs	r1, #23
   2defe:	187c      	adds	r4, r7, r1
   2df00:	0019      	movs	r1, r3
   2df02:	0010      	movs	r0, r2
   2df04:	4bc3      	ldr	r3, [pc, #780]	; (2e214 <f_write+0x338>)
   2df06:	4798      	blx	r3
   2df08:	0003      	movs	r3, r0
   2df0a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2df0c:	2317      	movs	r3, #23
   2df0e:	18fb      	adds	r3, r7, r3
   2df10:	781b      	ldrb	r3, [r3, #0]
   2df12:	2b00      	cmp	r3, #0
   2df14:	d003      	beq.n	2df1e <f_write+0x42>
   2df16:	2317      	movs	r3, #23
   2df18:	18fb      	adds	r3, r7, r3
   2df1a:	781b      	ldrb	r3, [r3, #0]
   2df1c:	e176      	b.n	2e20c <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2df1e:	68fb      	ldr	r3, [r7, #12]
   2df20:	799b      	ldrb	r3, [r3, #6]
   2df22:	b25b      	sxtb	r3, r3
   2df24:	2b00      	cmp	r3, #0
   2df26:	da01      	bge.n	2df2c <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2df28:	2302      	movs	r3, #2
   2df2a:	e16f      	b.n	2e20c <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2df2c:	68fb      	ldr	r3, [r7, #12]
   2df2e:	799b      	ldrb	r3, [r3, #6]
   2df30:	001a      	movs	r2, r3
   2df32:	2302      	movs	r3, #2
   2df34:	4013      	ands	r3, r2
   2df36:	d101      	bne.n	2df3c <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2df38:	2307      	movs	r3, #7
   2df3a:	e167      	b.n	2e20c <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2df3c:	68fb      	ldr	r3, [r7, #12]
   2df3e:	68da      	ldr	r2, [r3, #12]
   2df40:	687b      	ldr	r3, [r7, #4]
   2df42:	18d2      	adds	r2, r2, r3
   2df44:	68fb      	ldr	r3, [r7, #12]
   2df46:	68db      	ldr	r3, [r3, #12]
   2df48:	429a      	cmp	r2, r3
   2df4a:	d300      	bcc.n	2df4e <f_write+0x72>
   2df4c:	e146      	b.n	2e1dc <f_write+0x300>
   2df4e:	2300      	movs	r3, #0
   2df50:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2df52:	e143      	b.n	2e1dc <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2df54:	68fb      	ldr	r3, [r7, #12]
   2df56:	689b      	ldr	r3, [r3, #8]
   2df58:	05db      	lsls	r3, r3, #23
   2df5a:	0ddb      	lsrs	r3, r3, #23
   2df5c:	d000      	beq.n	2df60 <f_write+0x84>
   2df5e:	e0f6      	b.n	2e14e <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2df60:	68fb      	ldr	r3, [r7, #12]
   2df62:	689b      	ldr	r3, [r3, #8]
   2df64:	0a5b      	lsrs	r3, r3, #9
   2df66:	b2da      	uxtb	r2, r3
   2df68:	68fb      	ldr	r3, [r7, #12]
   2df6a:	681b      	ldr	r3, [r3, #0]
   2df6c:	789b      	ldrb	r3, [r3, #2]
   2df6e:	3b01      	subs	r3, #1
   2df70:	b2d9      	uxtb	r1, r3
   2df72:	2316      	movs	r3, #22
   2df74:	18fb      	adds	r3, r7, r3
   2df76:	400a      	ands	r2, r1
   2df78:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2df7a:	2316      	movs	r3, #22
   2df7c:	18fb      	adds	r3, r7, r3
   2df7e:	781b      	ldrb	r3, [r3, #0]
   2df80:	2b00      	cmp	r3, #0
   2df82:	d140      	bne.n	2e006 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2df84:	68fb      	ldr	r3, [r7, #12]
   2df86:	689b      	ldr	r3, [r3, #8]
   2df88:	2b00      	cmp	r3, #0
   2df8a:	d111      	bne.n	2dfb0 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2df8c:	68fb      	ldr	r3, [r7, #12]
   2df8e:	691b      	ldr	r3, [r3, #16]
   2df90:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2df92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2df94:	2b00      	cmp	r3, #0
   2df96:	d115      	bne.n	2dfc4 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2df98:	68fb      	ldr	r3, [r7, #12]
   2df9a:	681b      	ldr	r3, [r3, #0]
   2df9c:	2100      	movs	r1, #0
   2df9e:	0018      	movs	r0, r3
   2dfa0:	4b9d      	ldr	r3, [pc, #628]	; (2e218 <f_write+0x33c>)
   2dfa2:	4798      	blx	r3
   2dfa4:	0003      	movs	r3, r0
   2dfa6:	627b      	str	r3, [r7, #36]	; 0x24
   2dfa8:	68fb      	ldr	r3, [r7, #12]
   2dfaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2dfac:	611a      	str	r2, [r3, #16]
   2dfae:	e009      	b.n	2dfc4 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2dfb0:	68fb      	ldr	r3, [r7, #12]
   2dfb2:	681a      	ldr	r2, [r3, #0]
   2dfb4:	68fb      	ldr	r3, [r7, #12]
   2dfb6:	695b      	ldr	r3, [r3, #20]
   2dfb8:	0019      	movs	r1, r3
   2dfba:	0010      	movs	r0, r2
   2dfbc:	4b96      	ldr	r3, [pc, #600]	; (2e218 <f_write+0x33c>)
   2dfbe:	4798      	blx	r3
   2dfc0:	0003      	movs	r3, r0
   2dfc2:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dfc6:	2b00      	cmp	r3, #0
   2dfc8:	d100      	bne.n	2dfcc <f_write+0xf0>
   2dfca:	e10c      	b.n	2e1e6 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2dfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dfce:	2b01      	cmp	r3, #1
   2dfd0:	d109      	bne.n	2dfe6 <f_write+0x10a>
   2dfd2:	68fb      	ldr	r3, [r7, #12]
   2dfd4:	799b      	ldrb	r3, [r3, #6]
   2dfd6:	2280      	movs	r2, #128	; 0x80
   2dfd8:	4252      	negs	r2, r2
   2dfda:	4313      	orrs	r3, r2
   2dfdc:	b2da      	uxtb	r2, r3
   2dfde:	68fb      	ldr	r3, [r7, #12]
   2dfe0:	719a      	strb	r2, [r3, #6]
   2dfe2:	2302      	movs	r3, #2
   2dfe4:	e112      	b.n	2e20c <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2dfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dfe8:	3301      	adds	r3, #1
   2dfea:	d109      	bne.n	2e000 <f_write+0x124>
   2dfec:	68fb      	ldr	r3, [r7, #12]
   2dfee:	799b      	ldrb	r3, [r3, #6]
   2dff0:	2280      	movs	r2, #128	; 0x80
   2dff2:	4252      	negs	r2, r2
   2dff4:	4313      	orrs	r3, r2
   2dff6:	b2da      	uxtb	r2, r3
   2dff8:	68fb      	ldr	r3, [r7, #12]
   2dffa:	719a      	strb	r2, [r3, #6]
   2dffc:	2301      	movs	r3, #1
   2dffe:	e105      	b.n	2e20c <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2e000:	68fb      	ldr	r3, [r7, #12]
   2e002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e004:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2e006:	68fb      	ldr	r3, [r7, #12]
   2e008:	681b      	ldr	r3, [r3, #0]
   2e00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e00c:	68fb      	ldr	r3, [r7, #12]
   2e00e:	699b      	ldr	r3, [r3, #24]
   2e010:	429a      	cmp	r2, r3
   2e012:	d111      	bne.n	2e038 <f_write+0x15c>
   2e014:	68fb      	ldr	r3, [r7, #12]
   2e016:	681b      	ldr	r3, [r3, #0]
   2e018:	2100      	movs	r1, #0
   2e01a:	0018      	movs	r0, r3
   2e01c:	4b7f      	ldr	r3, [pc, #508]	; (2e21c <f_write+0x340>)
   2e01e:	4798      	blx	r3
   2e020:	1e03      	subs	r3, r0, #0
   2e022:	d009      	beq.n	2e038 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2e024:	68fb      	ldr	r3, [r7, #12]
   2e026:	799b      	ldrb	r3, [r3, #6]
   2e028:	2280      	movs	r2, #128	; 0x80
   2e02a:	4252      	negs	r2, r2
   2e02c:	4313      	orrs	r3, r2
   2e02e:	b2da      	uxtb	r2, r3
   2e030:	68fb      	ldr	r3, [r7, #12]
   2e032:	719a      	strb	r2, [r3, #6]
   2e034:	2301      	movs	r3, #1
   2e036:	e0e9      	b.n	2e20c <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2e038:	68fb      	ldr	r3, [r7, #12]
   2e03a:	681a      	ldr	r2, [r3, #0]
   2e03c:	68fb      	ldr	r3, [r7, #12]
   2e03e:	695b      	ldr	r3, [r3, #20]
   2e040:	0019      	movs	r1, r3
   2e042:	0010      	movs	r0, r2
   2e044:	4b76      	ldr	r3, [pc, #472]	; (2e220 <f_write+0x344>)
   2e046:	4798      	blx	r3
   2e048:	0003      	movs	r3, r0
   2e04a:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2e04c:	693b      	ldr	r3, [r7, #16]
   2e04e:	2b00      	cmp	r3, #0
   2e050:	d109      	bne.n	2e066 <f_write+0x18a>
   2e052:	68fb      	ldr	r3, [r7, #12]
   2e054:	799b      	ldrb	r3, [r3, #6]
   2e056:	2280      	movs	r2, #128	; 0x80
   2e058:	4252      	negs	r2, r2
   2e05a:	4313      	orrs	r3, r2
   2e05c:	b2da      	uxtb	r2, r3
   2e05e:	68fb      	ldr	r3, [r7, #12]
   2e060:	719a      	strb	r2, [r3, #6]
   2e062:	2302      	movs	r3, #2
   2e064:	e0d2      	b.n	2e20c <f_write+0x330>
			sect += csect;
   2e066:	2316      	movs	r3, #22
   2e068:	18fb      	adds	r3, r7, r3
   2e06a:	781b      	ldrb	r3, [r3, #0]
   2e06c:	693a      	ldr	r2, [r7, #16]
   2e06e:	18d3      	adds	r3, r2, r3
   2e070:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2e072:	687b      	ldr	r3, [r7, #4]
   2e074:	0a5b      	lsrs	r3, r3, #9
   2e076:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2e078:	69fb      	ldr	r3, [r7, #28]
   2e07a:	2b00      	cmp	r3, #0
   2e07c:	d048      	beq.n	2e110 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2e07e:	2316      	movs	r3, #22
   2e080:	18fb      	adds	r3, r7, r3
   2e082:	781a      	ldrb	r2, [r3, #0]
   2e084:	69fb      	ldr	r3, [r7, #28]
   2e086:	18d2      	adds	r2, r2, r3
   2e088:	68fb      	ldr	r3, [r7, #12]
   2e08a:	681b      	ldr	r3, [r3, #0]
   2e08c:	789b      	ldrb	r3, [r3, #2]
   2e08e:	429a      	cmp	r2, r3
   2e090:	d908      	bls.n	2e0a4 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2e092:	68fb      	ldr	r3, [r7, #12]
   2e094:	681b      	ldr	r3, [r3, #0]
   2e096:	789b      	ldrb	r3, [r3, #2]
   2e098:	001a      	movs	r2, r3
   2e09a:	2316      	movs	r3, #22
   2e09c:	18fb      	adds	r3, r7, r3
   2e09e:	781b      	ldrb	r3, [r3, #0]
   2e0a0:	1ad3      	subs	r3, r2, r3
   2e0a2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2e0a4:	68fb      	ldr	r3, [r7, #12]
   2e0a6:	681b      	ldr	r3, [r3, #0]
   2e0a8:	7858      	ldrb	r0, [r3, #1]
   2e0aa:	69fb      	ldr	r3, [r7, #28]
   2e0ac:	b2db      	uxtb	r3, r3
   2e0ae:	693a      	ldr	r2, [r7, #16]
   2e0b0:	69b9      	ldr	r1, [r7, #24]
   2e0b2:	4c5c      	ldr	r4, [pc, #368]	; (2e224 <f_write+0x348>)
   2e0b4:	47a0      	blx	r4
   2e0b6:	1e03      	subs	r3, r0, #0
   2e0b8:	d009      	beq.n	2e0ce <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2e0ba:	68fb      	ldr	r3, [r7, #12]
   2e0bc:	799b      	ldrb	r3, [r3, #6]
   2e0be:	2280      	movs	r2, #128	; 0x80
   2e0c0:	4252      	negs	r2, r2
   2e0c2:	4313      	orrs	r3, r2
   2e0c4:	b2da      	uxtb	r2, r3
   2e0c6:	68fb      	ldr	r3, [r7, #12]
   2e0c8:	719a      	strb	r2, [r3, #6]
   2e0ca:	2301      	movs	r3, #1
   2e0cc:	e09e      	b.n	2e20c <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2e0ce:	68fb      	ldr	r3, [r7, #12]
   2e0d0:	681b      	ldr	r3, [r3, #0]
   2e0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e0d4:	693b      	ldr	r3, [r7, #16]
   2e0d6:	1ad2      	subs	r2, r2, r3
   2e0d8:	69fb      	ldr	r3, [r7, #28]
   2e0da:	429a      	cmp	r2, r3
   2e0dc:	d214      	bcs.n	2e108 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2e0de:	68fb      	ldr	r3, [r7, #12]
   2e0e0:	681b      	ldr	r3, [r3, #0]
   2e0e2:	3330      	adds	r3, #48	; 0x30
   2e0e4:	0018      	movs	r0, r3
   2e0e6:	68fb      	ldr	r3, [r7, #12]
   2e0e8:	681b      	ldr	r3, [r3, #0]
   2e0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e0ec:	693b      	ldr	r3, [r7, #16]
   2e0ee:	1ad3      	subs	r3, r2, r3
   2e0f0:	025b      	lsls	r3, r3, #9
   2e0f2:	69ba      	ldr	r2, [r7, #24]
   2e0f4:	18d1      	adds	r1, r2, r3
   2e0f6:	2380      	movs	r3, #128	; 0x80
   2e0f8:	009b      	lsls	r3, r3, #2
   2e0fa:	001a      	movs	r2, r3
   2e0fc:	4b4a      	ldr	r3, [pc, #296]	; (2e228 <f_write+0x34c>)
   2e0fe:	4798      	blx	r3
					fp->fs->wflag = 0;
   2e100:	68fb      	ldr	r3, [r7, #12]
   2e102:	681b      	ldr	r3, [r3, #0]
   2e104:	2200      	movs	r2, #0
   2e106:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2e108:	69fb      	ldr	r3, [r7, #28]
   2e10a:	025b      	lsls	r3, r3, #9
   2e10c:	623b      	str	r3, [r7, #32]
				continue;
   2e10e:	e051      	b.n	2e1b4 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2e110:	68fb      	ldr	r3, [r7, #12]
   2e112:	689a      	ldr	r2, [r3, #8]
   2e114:	68fb      	ldr	r3, [r7, #12]
   2e116:	68db      	ldr	r3, [r3, #12]
   2e118:	429a      	cmp	r2, r3
   2e11a:	d315      	bcc.n	2e148 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2e11c:	68fb      	ldr	r3, [r7, #12]
   2e11e:	681b      	ldr	r3, [r3, #0]
   2e120:	2100      	movs	r1, #0
   2e122:	0018      	movs	r0, r3
   2e124:	4b3d      	ldr	r3, [pc, #244]	; (2e21c <f_write+0x340>)
   2e126:	4798      	blx	r3
   2e128:	1e03      	subs	r3, r0, #0
   2e12a:	d009      	beq.n	2e140 <f_write+0x264>
   2e12c:	68fb      	ldr	r3, [r7, #12]
   2e12e:	799b      	ldrb	r3, [r3, #6]
   2e130:	2280      	movs	r2, #128	; 0x80
   2e132:	4252      	negs	r2, r2
   2e134:	4313      	orrs	r3, r2
   2e136:	b2da      	uxtb	r2, r3
   2e138:	68fb      	ldr	r3, [r7, #12]
   2e13a:	719a      	strb	r2, [r3, #6]
   2e13c:	2301      	movs	r3, #1
   2e13e:	e065      	b.n	2e20c <f_write+0x330>
				fp->fs->winsect = sect;
   2e140:	68fb      	ldr	r3, [r7, #12]
   2e142:	681b      	ldr	r3, [r3, #0]
   2e144:	693a      	ldr	r2, [r7, #16]
   2e146:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2e148:	68fb      	ldr	r3, [r7, #12]
   2e14a:	693a      	ldr	r2, [r7, #16]
   2e14c:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2e14e:	68fb      	ldr	r3, [r7, #12]
   2e150:	689b      	ldr	r3, [r3, #8]
   2e152:	05db      	lsls	r3, r3, #23
   2e154:	0ddb      	lsrs	r3, r3, #23
   2e156:	2280      	movs	r2, #128	; 0x80
   2e158:	0092      	lsls	r2, r2, #2
   2e15a:	1ad3      	subs	r3, r2, r3
   2e15c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2e15e:	6a3a      	ldr	r2, [r7, #32]
   2e160:	687b      	ldr	r3, [r7, #4]
   2e162:	429a      	cmp	r2, r3
   2e164:	d901      	bls.n	2e16a <f_write+0x28e>
   2e166:	687b      	ldr	r3, [r7, #4]
   2e168:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2e16a:	68fb      	ldr	r3, [r7, #12]
   2e16c:	681a      	ldr	r2, [r3, #0]
   2e16e:	68fb      	ldr	r3, [r7, #12]
   2e170:	699b      	ldr	r3, [r3, #24]
   2e172:	0019      	movs	r1, r3
   2e174:	0010      	movs	r0, r2
   2e176:	4b29      	ldr	r3, [pc, #164]	; (2e21c <f_write+0x340>)
   2e178:	4798      	blx	r3
   2e17a:	1e03      	subs	r3, r0, #0
   2e17c:	d009      	beq.n	2e192 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2e17e:	68fb      	ldr	r3, [r7, #12]
   2e180:	799b      	ldrb	r3, [r3, #6]
   2e182:	2280      	movs	r2, #128	; 0x80
   2e184:	4252      	negs	r2, r2
   2e186:	4313      	orrs	r3, r2
   2e188:	b2da      	uxtb	r2, r3
   2e18a:	68fb      	ldr	r3, [r7, #12]
   2e18c:	719a      	strb	r2, [r3, #6]
   2e18e:	2301      	movs	r3, #1
   2e190:	e03c      	b.n	2e20c <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2e192:	68fb      	ldr	r3, [r7, #12]
   2e194:	681a      	ldr	r2, [r3, #0]
   2e196:	68fb      	ldr	r3, [r7, #12]
   2e198:	689b      	ldr	r3, [r3, #8]
   2e19a:	05db      	lsls	r3, r3, #23
   2e19c:	0ddb      	lsrs	r3, r3, #23
   2e19e:	3330      	adds	r3, #48	; 0x30
   2e1a0:	18d3      	adds	r3, r2, r3
   2e1a2:	6a3a      	ldr	r2, [r7, #32]
   2e1a4:	69b9      	ldr	r1, [r7, #24]
   2e1a6:	0018      	movs	r0, r3
   2e1a8:	4b1f      	ldr	r3, [pc, #124]	; (2e228 <f_write+0x34c>)
   2e1aa:	4798      	blx	r3
		fp->fs->wflag = 1;
   2e1ac:	68fb      	ldr	r3, [r7, #12]
   2e1ae:	681b      	ldr	r3, [r3, #0]
   2e1b0:	2201      	movs	r2, #1
   2e1b2:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2e1b4:	69ba      	ldr	r2, [r7, #24]
   2e1b6:	6a3b      	ldr	r3, [r7, #32]
   2e1b8:	18d3      	adds	r3, r2, r3
   2e1ba:	61bb      	str	r3, [r7, #24]
   2e1bc:	68fb      	ldr	r3, [r7, #12]
   2e1be:	689a      	ldr	r2, [r3, #8]
   2e1c0:	6a3b      	ldr	r3, [r7, #32]
   2e1c2:	18d2      	adds	r2, r2, r3
   2e1c4:	68fb      	ldr	r3, [r7, #12]
   2e1c6:	609a      	str	r2, [r3, #8]
   2e1c8:	683b      	ldr	r3, [r7, #0]
   2e1ca:	681a      	ldr	r2, [r3, #0]
   2e1cc:	6a3b      	ldr	r3, [r7, #32]
   2e1ce:	18d2      	adds	r2, r2, r3
   2e1d0:	683b      	ldr	r3, [r7, #0]
   2e1d2:	601a      	str	r2, [r3, #0]
   2e1d4:	687a      	ldr	r2, [r7, #4]
   2e1d6:	6a3b      	ldr	r3, [r7, #32]
   2e1d8:	1ad3      	subs	r3, r2, r3
   2e1da:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2e1dc:	687b      	ldr	r3, [r7, #4]
   2e1de:	2b00      	cmp	r3, #0
   2e1e0:	d000      	beq.n	2e1e4 <f_write+0x308>
   2e1e2:	e6b7      	b.n	2df54 <f_write+0x78>
   2e1e4:	e000      	b.n	2e1e8 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2e1e6:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2e1e8:	68fb      	ldr	r3, [r7, #12]
   2e1ea:	689a      	ldr	r2, [r3, #8]
   2e1ec:	68fb      	ldr	r3, [r7, #12]
   2e1ee:	68db      	ldr	r3, [r3, #12]
   2e1f0:	429a      	cmp	r2, r3
   2e1f2:	d903      	bls.n	2e1fc <f_write+0x320>
   2e1f4:	68fb      	ldr	r3, [r7, #12]
   2e1f6:	689a      	ldr	r2, [r3, #8]
   2e1f8:	68fb      	ldr	r3, [r7, #12]
   2e1fa:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2e1fc:	68fb      	ldr	r3, [r7, #12]
   2e1fe:	799b      	ldrb	r3, [r3, #6]
   2e200:	2220      	movs	r2, #32
   2e202:	4313      	orrs	r3, r2
   2e204:	b2da      	uxtb	r2, r3
   2e206:	68fb      	ldr	r3, [r7, #12]
   2e208:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2e20a:	2300      	movs	r3, #0
}
   2e20c:	0018      	movs	r0, r3
   2e20e:	46bd      	mov	sp, r7
   2e210:	b00b      	add	sp, #44	; 0x2c
   2e212:	bd90      	pop	{r4, r7, pc}
   2e214:	0002d901 	.word	0x0002d901
   2e218:	0002bf8d 	.word	0x0002bf8d
   2e21c:	0002b885 	.word	0x0002b885
   2e220:	0002bae5 	.word	0x0002bae5
   2e224:	0002b571 	.word	0x0002b571
   2e228:	0002b7a1 	.word	0x0002b7a1

0002e22c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2e22c:	b590      	push	{r4, r7, lr}
   2e22e:	b087      	sub	sp, #28
   2e230:	af00      	add	r7, sp, #0
   2e232:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2e234:	687b      	ldr	r3, [r7, #4]
   2e236:	681a      	ldr	r2, [r3, #0]
   2e238:	687b      	ldr	r3, [r7, #4]
   2e23a:	889b      	ldrh	r3, [r3, #4]
   2e23c:	2117      	movs	r1, #23
   2e23e:	187c      	adds	r4, r7, r1
   2e240:	0019      	movs	r1, r3
   2e242:	0010      	movs	r0, r2
   2e244:	4b55      	ldr	r3, [pc, #340]	; (2e39c <f_sync+0x170>)
   2e246:	4798      	blx	r3
   2e248:	0003      	movs	r3, r0
   2e24a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2e24c:	2317      	movs	r3, #23
   2e24e:	18fb      	adds	r3, r7, r3
   2e250:	781b      	ldrb	r3, [r3, #0]
   2e252:	2b00      	cmp	r3, #0
   2e254:	d000      	beq.n	2e258 <f_sync+0x2c>
   2e256:	e09a      	b.n	2e38e <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2e258:	687b      	ldr	r3, [r7, #4]
   2e25a:	799b      	ldrb	r3, [r3, #6]
   2e25c:	001a      	movs	r2, r3
   2e25e:	2320      	movs	r3, #32
   2e260:	4013      	ands	r3, r2
   2e262:	d100      	bne.n	2e266 <f_sync+0x3a>
   2e264:	e093      	b.n	2e38e <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2e266:	687b      	ldr	r3, [r7, #4]
   2e268:	681a      	ldr	r2, [r3, #0]
   2e26a:	687b      	ldr	r3, [r7, #4]
   2e26c:	69db      	ldr	r3, [r3, #28]
   2e26e:	2117      	movs	r1, #23
   2e270:	187c      	adds	r4, r7, r1
   2e272:	0019      	movs	r1, r3
   2e274:	0010      	movs	r0, r2
   2e276:	4b4a      	ldr	r3, [pc, #296]	; (2e3a0 <f_sync+0x174>)
   2e278:	4798      	blx	r3
   2e27a:	0003      	movs	r3, r0
   2e27c:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2e27e:	2317      	movs	r3, #23
   2e280:	18fb      	adds	r3, r7, r3
   2e282:	781b      	ldrb	r3, [r3, #0]
   2e284:	2b00      	cmp	r3, #0
   2e286:	d000      	beq.n	2e28a <f_sync+0x5e>
   2e288:	e081      	b.n	2e38e <f_sync+0x162>
				dir = fp->dir_ptr;
   2e28a:	687b      	ldr	r3, [r7, #4]
   2e28c:	6a1b      	ldr	r3, [r3, #32]
   2e28e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2e290:	693b      	ldr	r3, [r7, #16]
   2e292:	330b      	adds	r3, #11
   2e294:	693a      	ldr	r2, [r7, #16]
   2e296:	320b      	adds	r2, #11
   2e298:	7812      	ldrb	r2, [r2, #0]
   2e29a:	2120      	movs	r1, #32
   2e29c:	430a      	orrs	r2, r1
   2e29e:	b2d2      	uxtb	r2, r2
   2e2a0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2e2a2:	693b      	ldr	r3, [r7, #16]
   2e2a4:	331c      	adds	r3, #28
   2e2a6:	001a      	movs	r2, r3
   2e2a8:	687b      	ldr	r3, [r7, #4]
   2e2aa:	68db      	ldr	r3, [r3, #12]
   2e2ac:	b2db      	uxtb	r3, r3
   2e2ae:	7013      	strb	r3, [r2, #0]
   2e2b0:	693b      	ldr	r3, [r7, #16]
   2e2b2:	331d      	adds	r3, #29
   2e2b4:	001a      	movs	r2, r3
   2e2b6:	687b      	ldr	r3, [r7, #4]
   2e2b8:	68db      	ldr	r3, [r3, #12]
   2e2ba:	b29b      	uxth	r3, r3
   2e2bc:	0a1b      	lsrs	r3, r3, #8
   2e2be:	b29b      	uxth	r3, r3
   2e2c0:	b2db      	uxtb	r3, r3
   2e2c2:	7013      	strb	r3, [r2, #0]
   2e2c4:	693b      	ldr	r3, [r7, #16]
   2e2c6:	331e      	adds	r3, #30
   2e2c8:	001a      	movs	r2, r3
   2e2ca:	687b      	ldr	r3, [r7, #4]
   2e2cc:	68db      	ldr	r3, [r3, #12]
   2e2ce:	0c1b      	lsrs	r3, r3, #16
   2e2d0:	b2db      	uxtb	r3, r3
   2e2d2:	7013      	strb	r3, [r2, #0]
   2e2d4:	693b      	ldr	r3, [r7, #16]
   2e2d6:	331f      	adds	r3, #31
   2e2d8:	001a      	movs	r2, r3
   2e2da:	687b      	ldr	r3, [r7, #4]
   2e2dc:	68db      	ldr	r3, [r3, #12]
   2e2de:	0e1b      	lsrs	r3, r3, #24
   2e2e0:	b2db      	uxtb	r3, r3
   2e2e2:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2e2e4:	693b      	ldr	r3, [r7, #16]
   2e2e6:	331a      	adds	r3, #26
   2e2e8:	001a      	movs	r2, r3
   2e2ea:	687b      	ldr	r3, [r7, #4]
   2e2ec:	691b      	ldr	r3, [r3, #16]
   2e2ee:	b2db      	uxtb	r3, r3
   2e2f0:	7013      	strb	r3, [r2, #0]
   2e2f2:	693b      	ldr	r3, [r7, #16]
   2e2f4:	331b      	adds	r3, #27
   2e2f6:	001a      	movs	r2, r3
   2e2f8:	687b      	ldr	r3, [r7, #4]
   2e2fa:	691b      	ldr	r3, [r3, #16]
   2e2fc:	b29b      	uxth	r3, r3
   2e2fe:	0a1b      	lsrs	r3, r3, #8
   2e300:	b29b      	uxth	r3, r3
   2e302:	b2db      	uxtb	r3, r3
   2e304:	7013      	strb	r3, [r2, #0]
   2e306:	693b      	ldr	r3, [r7, #16]
   2e308:	3314      	adds	r3, #20
   2e30a:	001a      	movs	r2, r3
   2e30c:	687b      	ldr	r3, [r7, #4]
   2e30e:	691b      	ldr	r3, [r3, #16]
   2e310:	0c1b      	lsrs	r3, r3, #16
   2e312:	b2db      	uxtb	r3, r3
   2e314:	7013      	strb	r3, [r2, #0]
   2e316:	693b      	ldr	r3, [r7, #16]
   2e318:	3315      	adds	r3, #21
   2e31a:	001a      	movs	r2, r3
   2e31c:	687b      	ldr	r3, [r7, #4]
   2e31e:	691b      	ldr	r3, [r3, #16]
   2e320:	0c1b      	lsrs	r3, r3, #16
   2e322:	b29b      	uxth	r3, r3
   2e324:	0a1b      	lsrs	r3, r3, #8
   2e326:	b29b      	uxth	r3, r3
   2e328:	b2db      	uxtb	r3, r3
   2e32a:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2e32c:	4b1d      	ldr	r3, [pc, #116]	; (2e3a4 <f_sync+0x178>)
   2e32e:	4798      	blx	r3
   2e330:	0003      	movs	r3, r0
   2e332:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2e334:	693b      	ldr	r3, [r7, #16]
   2e336:	3316      	adds	r3, #22
   2e338:	68fa      	ldr	r2, [r7, #12]
   2e33a:	b2d2      	uxtb	r2, r2
   2e33c:	701a      	strb	r2, [r3, #0]
   2e33e:	693b      	ldr	r3, [r7, #16]
   2e340:	3317      	adds	r3, #23
   2e342:	68fa      	ldr	r2, [r7, #12]
   2e344:	b292      	uxth	r2, r2
   2e346:	0a12      	lsrs	r2, r2, #8
   2e348:	b292      	uxth	r2, r2
   2e34a:	b2d2      	uxtb	r2, r2
   2e34c:	701a      	strb	r2, [r3, #0]
   2e34e:	693b      	ldr	r3, [r7, #16]
   2e350:	3318      	adds	r3, #24
   2e352:	68fa      	ldr	r2, [r7, #12]
   2e354:	0c12      	lsrs	r2, r2, #16
   2e356:	b2d2      	uxtb	r2, r2
   2e358:	701a      	strb	r2, [r3, #0]
   2e35a:	693b      	ldr	r3, [r7, #16]
   2e35c:	3319      	adds	r3, #25
   2e35e:	68fa      	ldr	r2, [r7, #12]
   2e360:	0e12      	lsrs	r2, r2, #24
   2e362:	b2d2      	uxtb	r2, r2
   2e364:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2e366:	687b      	ldr	r3, [r7, #4]
   2e368:	799b      	ldrb	r3, [r3, #6]
   2e36a:	2220      	movs	r2, #32
   2e36c:	4393      	bics	r3, r2
   2e36e:	b2da      	uxtb	r2, r3
   2e370:	687b      	ldr	r3, [r7, #4]
   2e372:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2e374:	687b      	ldr	r3, [r7, #4]
   2e376:	681b      	ldr	r3, [r3, #0]
   2e378:	2201      	movs	r2, #1
   2e37a:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2e37c:	687b      	ldr	r3, [r7, #4]
   2e37e:	681b      	ldr	r3, [r3, #0]
   2e380:	2217      	movs	r2, #23
   2e382:	18bc      	adds	r4, r7, r2
   2e384:	0018      	movs	r0, r3
   2e386:	4b08      	ldr	r3, [pc, #32]	; (2e3a8 <f_sync+0x17c>)
   2e388:	4798      	blx	r3
   2e38a:	0003      	movs	r3, r0
   2e38c:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2e38e:	2317      	movs	r3, #23
   2e390:	18fb      	adds	r3, r7, r3
   2e392:	781b      	ldrb	r3, [r3, #0]
}
   2e394:	0018      	movs	r0, r3
   2e396:	46bd      	mov	sp, r7
   2e398:	b007      	add	sp, #28
   2e39a:	bd90      	pop	{r4, r7, pc}
   2e39c:	0002d901 	.word	0x0002d901
   2e3a0:	0002b885 	.word	0x0002b885
   2e3a4:	0002b741 	.word	0x0002b741
   2e3a8:	0002b94d 	.word	0x0002b94d

0002e3ac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2e3ac:	b590      	push	{r4, r7, lr}
   2e3ae:	b085      	sub	sp, #20
   2e3b0:	af00      	add	r7, sp, #0
   2e3b2:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2e3b4:	230f      	movs	r3, #15
   2e3b6:	18fc      	adds	r4, r7, r3
   2e3b8:	687b      	ldr	r3, [r7, #4]
   2e3ba:	0018      	movs	r0, r3
   2e3bc:	4b09      	ldr	r3, [pc, #36]	; (2e3e4 <f_close+0x38>)
   2e3be:	4798      	blx	r3
   2e3c0:	0003      	movs	r3, r0
   2e3c2:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2e3c4:	230f      	movs	r3, #15
   2e3c6:	18fb      	adds	r3, r7, r3
   2e3c8:	781b      	ldrb	r3, [r3, #0]
   2e3ca:	2b00      	cmp	r3, #0
   2e3cc:	d102      	bne.n	2e3d4 <f_close+0x28>
   2e3ce:	687b      	ldr	r3, [r7, #4]
   2e3d0:	2200      	movs	r2, #0
   2e3d2:	601a      	str	r2, [r3, #0]
	return res;
   2e3d4:	230f      	movs	r3, #15
   2e3d6:	18fb      	adds	r3, r7, r3
   2e3d8:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2e3da:	0018      	movs	r0, r3
   2e3dc:	46bd      	mov	sp, r7
   2e3de:	b005      	add	sp, #20
   2e3e0:	bd90      	pop	{r4, r7, pc}
   2e3e2:	46c0      	nop			; (mov r8, r8)
   2e3e4:	0002e22d 	.word	0x0002e22d

0002e3e8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2e3e8:	b580      	push	{r7, lr}
   2e3ea:	b084      	sub	sp, #16
   2e3ec:	af00      	add	r7, sp, #0
   2e3ee:	0002      	movs	r2, r0
   2e3f0:	6039      	str	r1, [r7, #0]
   2e3f2:	1dbb      	adds	r3, r7, #6
   2e3f4:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2e3f6:	1dbb      	adds	r3, r7, #6
   2e3f8:	881b      	ldrh	r3, [r3, #0]
   2e3fa:	2b7f      	cmp	r3, #127	; 0x7f
   2e3fc:	d805      	bhi.n	2e40a <ff_convert+0x22>
		c = src;
   2e3fe:	230e      	movs	r3, #14
   2e400:	18fb      	adds	r3, r7, r3
   2e402:	1dba      	adds	r2, r7, #6
   2e404:	8812      	ldrh	r2, [r2, #0]
   2e406:	801a      	strh	r2, [r3, #0]
   2e408:	e03a      	b.n	2e480 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2e40a:	683b      	ldr	r3, [r7, #0]
   2e40c:	2b00      	cmp	r3, #0
   2e40e:	d010      	beq.n	2e432 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2e410:	1dbb      	adds	r3, r7, #6
   2e412:	881b      	ldrh	r3, [r3, #0]
   2e414:	2bff      	cmp	r3, #255	; 0xff
   2e416:	d807      	bhi.n	2e428 <ff_convert+0x40>
   2e418:	1dbb      	adds	r3, r7, #6
   2e41a:	881b      	ldrh	r3, [r3, #0]
   2e41c:	3b80      	subs	r3, #128	; 0x80
   2e41e:	001a      	movs	r2, r3
   2e420:	4b1b      	ldr	r3, [pc, #108]	; (2e490 <ff_convert+0xa8>)
   2e422:	0052      	lsls	r2, r2, #1
   2e424:	5ad2      	ldrh	r2, [r2, r3]
   2e426:	e000      	b.n	2e42a <ff_convert+0x42>
   2e428:	2200      	movs	r2, #0
   2e42a:	230e      	movs	r3, #14
   2e42c:	18fb      	adds	r3, r7, r3
   2e42e:	801a      	strh	r2, [r3, #0]
   2e430:	e026      	b.n	2e480 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2e432:	230e      	movs	r3, #14
   2e434:	18fb      	adds	r3, r7, r3
   2e436:	2200      	movs	r2, #0
   2e438:	801a      	strh	r2, [r3, #0]
   2e43a:	e010      	b.n	2e45e <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2e43c:	230e      	movs	r3, #14
   2e43e:	18fb      	adds	r3, r7, r3
   2e440:	881a      	ldrh	r2, [r3, #0]
   2e442:	4b13      	ldr	r3, [pc, #76]	; (2e490 <ff_convert+0xa8>)
   2e444:	0052      	lsls	r2, r2, #1
   2e446:	5ad3      	ldrh	r3, [r2, r3]
   2e448:	1dba      	adds	r2, r7, #6
   2e44a:	8812      	ldrh	r2, [r2, #0]
   2e44c:	429a      	cmp	r2, r3
   2e44e:	d00c      	beq.n	2e46a <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2e450:	230e      	movs	r3, #14
   2e452:	18fb      	adds	r3, r7, r3
   2e454:	881a      	ldrh	r2, [r3, #0]
   2e456:	230e      	movs	r3, #14
   2e458:	18fb      	adds	r3, r7, r3
   2e45a:	3201      	adds	r2, #1
   2e45c:	801a      	strh	r2, [r3, #0]
   2e45e:	230e      	movs	r3, #14
   2e460:	18fb      	adds	r3, r7, r3
   2e462:	881b      	ldrh	r3, [r3, #0]
   2e464:	2b7f      	cmp	r3, #127	; 0x7f
   2e466:	d9e9      	bls.n	2e43c <ff_convert+0x54>
   2e468:	e000      	b.n	2e46c <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2e46a:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2e46c:	230e      	movs	r3, #14
   2e46e:	18fb      	adds	r3, r7, r3
   2e470:	881b      	ldrh	r3, [r3, #0]
   2e472:	3380      	adds	r3, #128	; 0x80
   2e474:	b29a      	uxth	r2, r3
   2e476:	230e      	movs	r3, #14
   2e478:	18fb      	adds	r3, r7, r3
   2e47a:	21ff      	movs	r1, #255	; 0xff
   2e47c:	400a      	ands	r2, r1
   2e47e:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2e480:	230e      	movs	r3, #14
   2e482:	18fb      	adds	r3, r7, r3
   2e484:	881b      	ldrh	r3, [r3, #0]
}
   2e486:	0018      	movs	r0, r3
   2e488:	46bd      	mov	sp, r7
   2e48a:	b004      	add	sp, #16
   2e48c:	bd80      	pop	{r7, pc}
   2e48e:	46c0      	nop			; (mov r8, r8)
   2e490:	000397b8 	.word	0x000397b8

0002e494 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2e494:	b580      	push	{r7, lr}
   2e496:	b084      	sub	sp, #16
   2e498:	af00      	add	r7, sp, #0
   2e49a:	0002      	movs	r2, r0
   2e49c:	1dbb      	adds	r3, r7, #6
   2e49e:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2e4a0:	2300      	movs	r3, #0
   2e4a2:	60fb      	str	r3, [r7, #12]
   2e4a4:	e002      	b.n	2e4ac <ff_wtoupper+0x18>
   2e4a6:	68fb      	ldr	r3, [r7, #12]
   2e4a8:	3301      	adds	r3, #1
   2e4aa:	60fb      	str	r3, [r7, #12]
   2e4ac:	4b0f      	ldr	r3, [pc, #60]	; (2e4ec <ff_wtoupper+0x58>)
   2e4ae:	68fa      	ldr	r2, [r7, #12]
   2e4b0:	0052      	lsls	r2, r2, #1
   2e4b2:	5ad3      	ldrh	r3, [r2, r3]
   2e4b4:	2b00      	cmp	r3, #0
   2e4b6:	d007      	beq.n	2e4c8 <ff_wtoupper+0x34>
   2e4b8:	4b0c      	ldr	r3, [pc, #48]	; (2e4ec <ff_wtoupper+0x58>)
   2e4ba:	68fa      	ldr	r2, [r7, #12]
   2e4bc:	0052      	lsls	r2, r2, #1
   2e4be:	5ad3      	ldrh	r3, [r2, r3]
   2e4c0:	1dba      	adds	r2, r7, #6
   2e4c2:	8812      	ldrh	r2, [r2, #0]
   2e4c4:	429a      	cmp	r2, r3
   2e4c6:	d1ee      	bne.n	2e4a6 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2e4c8:	4b08      	ldr	r3, [pc, #32]	; (2e4ec <ff_wtoupper+0x58>)
   2e4ca:	68fa      	ldr	r2, [r7, #12]
   2e4cc:	0052      	lsls	r2, r2, #1
   2e4ce:	5ad3      	ldrh	r3, [r2, r3]
   2e4d0:	2b00      	cmp	r3, #0
   2e4d2:	d004      	beq.n	2e4de <ff_wtoupper+0x4a>
   2e4d4:	4b06      	ldr	r3, [pc, #24]	; (2e4f0 <ff_wtoupper+0x5c>)
   2e4d6:	68fa      	ldr	r2, [r7, #12]
   2e4d8:	0052      	lsls	r2, r2, #1
   2e4da:	5ad3      	ldrh	r3, [r2, r3]
   2e4dc:	e001      	b.n	2e4e2 <ff_wtoupper+0x4e>
   2e4de:	1dbb      	adds	r3, r7, #6
   2e4e0:	881b      	ldrh	r3, [r3, #0]
}
   2e4e2:	0018      	movs	r0, r3
   2e4e4:	46bd      	mov	sp, r7
   2e4e6:	b004      	add	sp, #16
   2e4e8:	bd80      	pop	{r7, pc}
   2e4ea:	46c0      	nop			; (mov r8, r8)
   2e4ec:	000398b8 	.word	0x000398b8
   2e4f0:	00039a98 	.word	0x00039a98

0002e4f4 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2e4f4:	b580      	push	{r7, lr}
   2e4f6:	b084      	sub	sp, #16
   2e4f8:	af00      	add	r7, sp, #0
   2e4fa:	60f8      	str	r0, [r7, #12]
   2e4fc:	60b9      	str	r1, [r7, #8]
   2e4fe:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2e500:	68fb      	ldr	r3, [r7, #12]
   2e502:	68ba      	ldr	r2, [r7, #8]
   2e504:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2e506:	68fb      	ldr	r3, [r7, #12]
   2e508:	687a      	ldr	r2, [r7, #4]
   2e50a:	601a      	str	r2, [r3, #0]
}
   2e50c:	46c0      	nop			; (mov r8, r8)
   2e50e:	46bd      	mov	sp, r7
   2e510:	b004      	add	sp, #16
   2e512:	bd80      	pop	{r7, pc}

0002e514 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2e514:	b580      	push	{r7, lr}
   2e516:	b082      	sub	sp, #8
   2e518:	af00      	add	r7, sp, #0
   2e51a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2e51c:	687b      	ldr	r3, [r7, #4]
   2e51e:	681b      	ldr	r3, [r3, #0]
   2e520:	4a07      	ldr	r2, [pc, #28]	; (2e540 <getNextPacketId+0x2c>)
   2e522:	4293      	cmp	r3, r2
   2e524:	d003      	beq.n	2e52e <getNextPacketId+0x1a>
   2e526:	687b      	ldr	r3, [r7, #4]
   2e528:	681b      	ldr	r3, [r3, #0]
   2e52a:	1c5a      	adds	r2, r3, #1
   2e52c:	e000      	b.n	2e530 <getNextPacketId+0x1c>
   2e52e:	2201      	movs	r2, #1
   2e530:	687b      	ldr	r3, [r7, #4]
   2e532:	601a      	str	r2, [r3, #0]
   2e534:	687b      	ldr	r3, [r7, #4]
   2e536:	681b      	ldr	r3, [r3, #0]
}
   2e538:	0018      	movs	r0, r3
   2e53a:	46bd      	mov	sp, r7
   2e53c:	b002      	add	sp, #8
   2e53e:	bd80      	pop	{r7, pc}
   2e540:	0000ffff 	.word	0x0000ffff

0002e544 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2e544:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e546:	b087      	sub	sp, #28
   2e548:	af00      	add	r7, sp, #0
   2e54a:	60f8      	str	r0, [r7, #12]
   2e54c:	60b9      	str	r1, [r7, #8]
   2e54e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2e550:	2301      	movs	r3, #1
   2e552:	425b      	negs	r3, r3
   2e554:	617b      	str	r3, [r7, #20]
        sent = 0;
   2e556:	2300      	movs	r3, #0
   2e558:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2e55a:	e01a      	b.n	2e592 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2e55c:	68fb      	ldr	r3, [r7, #12]
   2e55e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e560:	68dc      	ldr	r4, [r3, #12]
   2e562:	68fb      	ldr	r3, [r7, #12]
   2e564:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e566:	68fb      	ldr	r3, [r7, #12]
   2e568:	691a      	ldr	r2, [r3, #16]
   2e56a:	693b      	ldr	r3, [r7, #16]
   2e56c:	18d6      	adds	r6, r2, r3
   2e56e:	687b      	ldr	r3, [r7, #4]
   2e570:	0018      	movs	r0, r3
   2e572:	4b1a      	ldr	r3, [pc, #104]	; (2e5dc <sendPacket+0x98>)
   2e574:	4798      	blx	r3
   2e576:	0003      	movs	r3, r0
   2e578:	68ba      	ldr	r2, [r7, #8]
   2e57a:	0031      	movs	r1, r6
   2e57c:	0028      	movs	r0, r5
   2e57e:	47a0      	blx	r4
   2e580:	0003      	movs	r3, r0
   2e582:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2e584:	697b      	ldr	r3, [r7, #20]
   2e586:	2b00      	cmp	r3, #0
   2e588:	db0e      	blt.n	2e5a8 <sendPacket+0x64>
            break;
        sent += rc;
   2e58a:	693a      	ldr	r2, [r7, #16]
   2e58c:	697b      	ldr	r3, [r7, #20]
   2e58e:	18d3      	adds	r3, r2, r3
   2e590:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2e592:	693a      	ldr	r2, [r7, #16]
   2e594:	68bb      	ldr	r3, [r7, #8]
   2e596:	429a      	cmp	r2, r3
   2e598:	da07      	bge.n	2e5aa <sendPacket+0x66>
   2e59a:	687b      	ldr	r3, [r7, #4]
   2e59c:	0018      	movs	r0, r3
   2e59e:	4b10      	ldr	r3, [pc, #64]	; (2e5e0 <sendPacket+0x9c>)
   2e5a0:	4798      	blx	r3
   2e5a2:	1e03      	subs	r3, r0, #0
   2e5a4:	d0da      	beq.n	2e55c <sendPacket+0x18>
   2e5a6:	e000      	b.n	2e5aa <sendPacket+0x66>
            break;
   2e5a8:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2e5aa:	693a      	ldr	r2, [r7, #16]
   2e5ac:	68bb      	ldr	r3, [r7, #8]
   2e5ae:	429a      	cmp	r2, r3
   2e5b0:	d10b      	bne.n	2e5ca <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2e5b2:	68fb      	ldr	r3, [r7, #12]
   2e5b4:	3354      	adds	r3, #84	; 0x54
   2e5b6:	001a      	movs	r2, r3
   2e5b8:	68fb      	ldr	r3, [r7, #12]
   2e5ba:	699b      	ldr	r3, [r3, #24]
   2e5bc:	0019      	movs	r1, r3
   2e5be:	0010      	movs	r0, r2
   2e5c0:	4b08      	ldr	r3, [pc, #32]	; (2e5e4 <sendPacket+0xa0>)
   2e5c2:	4798      	blx	r3
        rc = SUCCESS;
   2e5c4:	2300      	movs	r3, #0
   2e5c6:	617b      	str	r3, [r7, #20]
   2e5c8:	e002      	b.n	2e5d0 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2e5ca:	2301      	movs	r3, #1
   2e5cc:	425b      	negs	r3, r3
   2e5ce:	617b      	str	r3, [r7, #20]
    return rc;
   2e5d0:	697b      	ldr	r3, [r7, #20]
}
   2e5d2:	0018      	movs	r0, r3
   2e5d4:	46bd      	mov	sp, r7
   2e5d6:	b007      	add	sp, #28
   2e5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e5da:	46c0      	nop			; (mov r8, r8)
   2e5dc:	0002f3a5 	.word	0x0002f3a5
   2e5e0:	0002f329 	.word	0x0002f329
   2e5e4:	0002f37d 	.word	0x0002f37d

0002e5e8 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2e5e8:	b580      	push	{r7, lr}
   2e5ea:	b086      	sub	sp, #24
   2e5ec:	af00      	add	r7, sp, #0
   2e5ee:	60f8      	str	r0, [r7, #12]
   2e5f0:	60b9      	str	r1, [r7, #8]
   2e5f2:	607a      	str	r2, [r7, #4]
   2e5f4:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2e5f6:	68fb      	ldr	r3, [r7, #12]
   2e5f8:	68ba      	ldr	r2, [r7, #8]
   2e5fa:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e5fc:	2300      	movs	r3, #0
   2e5fe:	617b      	str	r3, [r7, #20]
   2e600:	e00a      	b.n	2e618 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2e602:	68fa      	ldr	r2, [r7, #12]
   2e604:	697b      	ldr	r3, [r7, #20]
   2e606:	3304      	adds	r3, #4
   2e608:	00db      	lsls	r3, r3, #3
   2e60a:	18d3      	adds	r3, r2, r3
   2e60c:	3304      	adds	r3, #4
   2e60e:	2200      	movs	r2, #0
   2e610:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e612:	697b      	ldr	r3, [r7, #20]
   2e614:	3301      	adds	r3, #1
   2e616:	617b      	str	r3, [r7, #20]
   2e618:	697b      	ldr	r3, [r7, #20]
   2e61a:	2b04      	cmp	r3, #4
   2e61c:	ddf1      	ble.n	2e602 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2e61e:	68fb      	ldr	r3, [r7, #12]
   2e620:	687a      	ldr	r2, [r7, #4]
   2e622:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2e624:	68fb      	ldr	r3, [r7, #12]
   2e626:	683a      	ldr	r2, [r7, #0]
   2e628:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2e62a:	68fb      	ldr	r3, [r7, #12]
   2e62c:	6a3a      	ldr	r2, [r7, #32]
   2e62e:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2e630:	68fb      	ldr	r3, [r7, #12]
   2e632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e634:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2e636:	68fb      	ldr	r3, [r7, #12]
   2e638:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e63a:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2e63c:	68fb      	ldr	r3, [r7, #12]
   2e63e:	2200      	movs	r2, #0
   2e640:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2e642:	68fb      	ldr	r3, [r7, #12]
   2e644:	2200      	movs	r2, #0
   2e646:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2e648:	68fb      	ldr	r3, [r7, #12]
   2e64a:	2200      	movs	r2, #0
   2e64c:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2e64e:	68fb      	ldr	r3, [r7, #12]
   2e650:	2201      	movs	r2, #1
   2e652:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2e654:	68fb      	ldr	r3, [r7, #12]
   2e656:	3354      	adds	r3, #84	; 0x54
   2e658:	0018      	movs	r0, r3
   2e65a:	4b03      	ldr	r3, [pc, #12]	; (2e668 <MQTTClientInit+0x80>)
   2e65c:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2e65e:	46c0      	nop			; (mov r8, r8)
   2e660:	46bd      	mov	sp, r7
   2e662:	b006      	add	sp, #24
   2e664:	bd80      	pop	{r7, pc}
   2e666:	46c0      	nop			; (mov r8, r8)
   2e668:	0002f3cd 	.word	0x0002f3cd

0002e66c <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2e66c:	b590      	push	{r4, r7, lr}
   2e66e:	b08b      	sub	sp, #44	; 0x2c
   2e670:	af00      	add	r7, sp, #0
   2e672:	60f8      	str	r0, [r7, #12]
   2e674:	60b9      	str	r1, [r7, #8]
   2e676:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2e678:	2301      	movs	r3, #1
   2e67a:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2e67c:	2300      	movs	r3, #0
   2e67e:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2e680:	2304      	movs	r3, #4
   2e682:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2e684:	68bb      	ldr	r3, [r7, #8]
   2e686:	2200      	movs	r2, #0
   2e688:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2e68a:	2301      	movs	r3, #1
   2e68c:	425b      	negs	r3, r3
   2e68e:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2e690:	6a3b      	ldr	r3, [r7, #32]
   2e692:	3301      	adds	r3, #1
   2e694:	623b      	str	r3, [r7, #32]
   2e696:	6a3a      	ldr	r2, [r7, #32]
   2e698:	69fb      	ldr	r3, [r7, #28]
   2e69a:	429a      	cmp	r2, r3
   2e69c:	dd03      	ble.n	2e6a6 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2e69e:	2301      	movs	r3, #1
   2e6a0:	425b      	negs	r3, r3
   2e6a2:	61bb      	str	r3, [r7, #24]
            goto exit;
   2e6a4:	e026      	b.n	2e6f4 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2e6a6:	68fb      	ldr	r3, [r7, #12]
   2e6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e6aa:	689c      	ldr	r4, [r3, #8]
   2e6ac:	68fb      	ldr	r3, [r7, #12]
   2e6ae:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2e6b0:	687b      	ldr	r3, [r7, #4]
   2e6b2:	2217      	movs	r2, #23
   2e6b4:	18b9      	adds	r1, r7, r2
   2e6b6:	2201      	movs	r2, #1
   2e6b8:	47a0      	blx	r4
   2e6ba:	0003      	movs	r3, r0
   2e6bc:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2e6be:	69bb      	ldr	r3, [r7, #24]
   2e6c0:	2b01      	cmp	r3, #1
   2e6c2:	d116      	bne.n	2e6f2 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2e6c4:	68bb      	ldr	r3, [r7, #8]
   2e6c6:	681a      	ldr	r2, [r3, #0]
   2e6c8:	2317      	movs	r3, #23
   2e6ca:	18fb      	adds	r3, r7, r3
   2e6cc:	781b      	ldrb	r3, [r3, #0]
   2e6ce:	0019      	movs	r1, r3
   2e6d0:	237f      	movs	r3, #127	; 0x7f
   2e6d2:	400b      	ands	r3, r1
   2e6d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2e6d6:	434b      	muls	r3, r1
   2e6d8:	18d2      	adds	r2, r2, r3
   2e6da:	68bb      	ldr	r3, [r7, #8]
   2e6dc:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2e6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e6e0:	01db      	lsls	r3, r3, #7
   2e6e2:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2e6e4:	2317      	movs	r3, #23
   2e6e6:	18fb      	adds	r3, r7, r3
   2e6e8:	781b      	ldrb	r3, [r3, #0]
   2e6ea:	b25b      	sxtb	r3, r3
   2e6ec:	2b00      	cmp	r3, #0
   2e6ee:	dbcc      	blt.n	2e68a <decodePacket+0x1e>
   2e6f0:	e000      	b.n	2e6f4 <decodePacket+0x88>
            goto exit;
   2e6f2:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2e6f4:	6a3b      	ldr	r3, [r7, #32]
}
   2e6f6:	0018      	movs	r0, r3
   2e6f8:	46bd      	mov	sp, r7
   2e6fa:	b00b      	add	sp, #44	; 0x2c
   2e6fc:	bd90      	pop	{r4, r7, pc}
	...

0002e700 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2e700:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e702:	46c6      	mov	lr, r8
   2e704:	b500      	push	{lr}
   2e706:	b086      	sub	sp, #24
   2e708:	af00      	add	r7, sp, #0
   2e70a:	6078      	str	r0, [r7, #4]
   2e70c:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2e70e:	2301      	movs	r3, #1
   2e710:	425b      	negs	r3, r3
   2e712:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2e714:	2300      	movs	r3, #0
   2e716:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2e718:	2300      	movs	r3, #0
   2e71a:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2e71c:	2300      	movs	r3, #0
   2e71e:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2e720:	687b      	ldr	r3, [r7, #4]
   2e722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e724:	689c      	ldr	r4, [r3, #8]
   2e726:	687b      	ldr	r3, [r7, #4]
   2e728:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e72a:	687b      	ldr	r3, [r7, #4]
   2e72c:	695e      	ldr	r6, [r3, #20]
   2e72e:	683b      	ldr	r3, [r7, #0]
   2e730:	0018      	movs	r0, r3
   2e732:	4b2b      	ldr	r3, [pc, #172]	; (2e7e0 <readPacket+0xe0>)
   2e734:	4798      	blx	r3
   2e736:	0003      	movs	r3, r0
   2e738:	2201      	movs	r2, #1
   2e73a:	0031      	movs	r1, r6
   2e73c:	0028      	movs	r0, r5
   2e73e:	47a0      	blx	r4
   2e740:	0003      	movs	r3, r0
   2e742:	2b01      	cmp	r3, #1
   2e744:	d141      	bne.n	2e7ca <readPacket+0xca>
        goto exit;

    len = 1;
   2e746:	2301      	movs	r3, #1
   2e748:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2e74a:	683b      	ldr	r3, [r7, #0]
   2e74c:	0018      	movs	r0, r3
   2e74e:	4b24      	ldr	r3, [pc, #144]	; (2e7e0 <readPacket+0xe0>)
   2e750:	4798      	blx	r3
   2e752:	0002      	movs	r2, r0
   2e754:	2308      	movs	r3, #8
   2e756:	18f9      	adds	r1, r7, r3
   2e758:	687b      	ldr	r3, [r7, #4]
   2e75a:	0018      	movs	r0, r3
   2e75c:	4b21      	ldr	r3, [pc, #132]	; (2e7e4 <readPacket+0xe4>)
   2e75e:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2e760:	687b      	ldr	r3, [r7, #4]
   2e762:	695b      	ldr	r3, [r3, #20]
   2e764:	3301      	adds	r3, #1
   2e766:	68ba      	ldr	r2, [r7, #8]
   2e768:	0011      	movs	r1, r2
   2e76a:	0018      	movs	r0, r3
   2e76c:	4b1e      	ldr	r3, [pc, #120]	; (2e7e8 <readPacket+0xe8>)
   2e76e:	4798      	blx	r3
   2e770:	0002      	movs	r2, r0
   2e772:	693b      	ldr	r3, [r7, #16]
   2e774:	189b      	adds	r3, r3, r2
   2e776:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2e778:	68bb      	ldr	r3, [r7, #8]
   2e77a:	2b00      	cmp	r3, #0
   2e77c:	dd17      	ble.n	2e7ae <readPacket+0xae>
   2e77e:	687b      	ldr	r3, [r7, #4]
   2e780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e782:	689c      	ldr	r4, [r3, #8]
   2e784:	687b      	ldr	r3, [r7, #4]
   2e786:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e788:	687b      	ldr	r3, [r7, #4]
   2e78a:	695a      	ldr	r2, [r3, #20]
   2e78c:	693b      	ldr	r3, [r7, #16]
   2e78e:	18d6      	adds	r6, r2, r3
   2e790:	68bb      	ldr	r3, [r7, #8]
   2e792:	4698      	mov	r8, r3
   2e794:	683b      	ldr	r3, [r7, #0]
   2e796:	0018      	movs	r0, r3
   2e798:	4b11      	ldr	r3, [pc, #68]	; (2e7e0 <readPacket+0xe0>)
   2e79a:	4798      	blx	r3
   2e79c:	0003      	movs	r3, r0
   2e79e:	4642      	mov	r2, r8
   2e7a0:	0031      	movs	r1, r6
   2e7a2:	0028      	movs	r0, r5
   2e7a4:	47a0      	blx	r4
   2e7a6:	0002      	movs	r2, r0
   2e7a8:	68bb      	ldr	r3, [r7, #8]
   2e7aa:	429a      	cmp	r2, r3
   2e7ac:	d10f      	bne.n	2e7ce <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2e7ae:	687b      	ldr	r3, [r7, #4]
   2e7b0:	695b      	ldr	r3, [r3, #20]
   2e7b2:	781a      	ldrb	r2, [r3, #0]
   2e7b4:	230c      	movs	r3, #12
   2e7b6:	18fb      	adds	r3, r7, r3
   2e7b8:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2e7ba:	230c      	movs	r3, #12
   2e7bc:	18fb      	adds	r3, r7, r3
   2e7be:	781b      	ldrb	r3, [r3, #0]
   2e7c0:	061b      	lsls	r3, r3, #24
   2e7c2:	0f1b      	lsrs	r3, r3, #28
   2e7c4:	b2db      	uxtb	r3, r3
   2e7c6:	617b      	str	r3, [r7, #20]
   2e7c8:	e002      	b.n	2e7d0 <readPacket+0xd0>
        goto exit;
   2e7ca:	46c0      	nop			; (mov r8, r8)
   2e7cc:	e000      	b.n	2e7d0 <readPacket+0xd0>
        goto exit;
   2e7ce:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2e7d0:	697b      	ldr	r3, [r7, #20]
}
   2e7d2:	0018      	movs	r0, r3
   2e7d4:	46bd      	mov	sp, r7
   2e7d6:	b006      	add	sp, #24
   2e7d8:	bc04      	pop	{r2}
   2e7da:	4690      	mov	r8, r2
   2e7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e7de:	46c0      	nop			; (mov r8, r8)
   2e7e0:	0002f3a5 	.word	0x0002f3a5
   2e7e4:	0002e66d 	.word	0x0002e66d
   2e7e8:	0003017d 	.word	0x0003017d

0002e7ec <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2e7ec:	b580      	push	{r7, lr}
   2e7ee:	b086      	sub	sp, #24
   2e7f0:	af00      	add	r7, sp, #0
   2e7f2:	6078      	str	r0, [r7, #4]
   2e7f4:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2e7f6:	687b      	ldr	r3, [r7, #4]
   2e7f8:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2e7fa:	683b      	ldr	r3, [r7, #0]
   2e7fc:	689b      	ldr	r3, [r3, #8]
   2e7fe:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2e800:	683b      	ldr	r3, [r7, #0]
   2e802:	685b      	ldr	r3, [r3, #4]
   2e804:	001a      	movs	r2, r3
   2e806:	693b      	ldr	r3, [r7, #16]
   2e808:	189b      	adds	r3, r3, r2
   2e80a:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2e80c:	e039      	b.n	2e882 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2e80e:	693b      	ldr	r3, [r7, #16]
   2e810:	781b      	ldrb	r3, [r3, #0]
   2e812:	2b2f      	cmp	r3, #47	; 0x2f
   2e814:	d103      	bne.n	2e81e <isTopicMatched+0x32>
   2e816:	697b      	ldr	r3, [r7, #20]
   2e818:	781b      	ldrb	r3, [r3, #0]
   2e81a:	2b2f      	cmp	r3, #47	; 0x2f
   2e81c:	d13a      	bne.n	2e894 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2e81e:	697b      	ldr	r3, [r7, #20]
   2e820:	781b      	ldrb	r3, [r3, #0]
   2e822:	2b2b      	cmp	r3, #43	; 0x2b
   2e824:	d009      	beq.n	2e83a <isTopicMatched+0x4e>
   2e826:	697b      	ldr	r3, [r7, #20]
   2e828:	781b      	ldrb	r3, [r3, #0]
   2e82a:	2b23      	cmp	r3, #35	; 0x23
   2e82c:	d005      	beq.n	2e83a <isTopicMatched+0x4e>
   2e82e:	697b      	ldr	r3, [r7, #20]
   2e830:	781a      	ldrb	r2, [r3, #0]
   2e832:	693b      	ldr	r3, [r7, #16]
   2e834:	781b      	ldrb	r3, [r3, #0]
   2e836:	429a      	cmp	r2, r3
   2e838:	d12e      	bne.n	2e898 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2e83a:	697b      	ldr	r3, [r7, #20]
   2e83c:	781b      	ldrb	r3, [r3, #0]
   2e83e:	2b2b      	cmp	r3, #43	; 0x2b
   2e840:	d112      	bne.n	2e868 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2e842:	693b      	ldr	r3, [r7, #16]
   2e844:	3301      	adds	r3, #1
   2e846:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e848:	e005      	b.n	2e856 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2e84a:	693b      	ldr	r3, [r7, #16]
   2e84c:	3301      	adds	r3, #1
   2e84e:	613b      	str	r3, [r7, #16]
   2e850:	693b      	ldr	r3, [r7, #16]
   2e852:	3301      	adds	r3, #1
   2e854:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e856:	68fa      	ldr	r2, [r7, #12]
   2e858:	68bb      	ldr	r3, [r7, #8]
   2e85a:	429a      	cmp	r2, r3
   2e85c:	d20b      	bcs.n	2e876 <isTopicMatched+0x8a>
   2e85e:	68fb      	ldr	r3, [r7, #12]
   2e860:	781b      	ldrb	r3, [r3, #0]
   2e862:	2b2f      	cmp	r3, #47	; 0x2f
   2e864:	d1f1      	bne.n	2e84a <isTopicMatched+0x5e>
   2e866:	e006      	b.n	2e876 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2e868:	697b      	ldr	r3, [r7, #20]
   2e86a:	781b      	ldrb	r3, [r3, #0]
   2e86c:	2b23      	cmp	r3, #35	; 0x23
   2e86e:	d102      	bne.n	2e876 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2e870:	68bb      	ldr	r3, [r7, #8]
   2e872:	3b01      	subs	r3, #1
   2e874:	613b      	str	r3, [r7, #16]
        curf++;
   2e876:	697b      	ldr	r3, [r7, #20]
   2e878:	3301      	adds	r3, #1
   2e87a:	617b      	str	r3, [r7, #20]
        curn++;
   2e87c:	693b      	ldr	r3, [r7, #16]
   2e87e:	3301      	adds	r3, #1
   2e880:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2e882:	697b      	ldr	r3, [r7, #20]
   2e884:	781b      	ldrb	r3, [r3, #0]
   2e886:	2b00      	cmp	r3, #0
   2e888:	d007      	beq.n	2e89a <isTopicMatched+0xae>
   2e88a:	693a      	ldr	r2, [r7, #16]
   2e88c:	68bb      	ldr	r3, [r7, #8]
   2e88e:	429a      	cmp	r2, r3
   2e890:	d3bd      	bcc.n	2e80e <isTopicMatched+0x22>
   2e892:	e002      	b.n	2e89a <isTopicMatched+0xae>
            break;
   2e894:	46c0      	nop			; (mov r8, r8)
   2e896:	e000      	b.n	2e89a <isTopicMatched+0xae>
            break;
   2e898:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2e89a:	693a      	ldr	r2, [r7, #16]
   2e89c:	68bb      	ldr	r3, [r7, #8]
   2e89e:	429a      	cmp	r2, r3
   2e8a0:	d105      	bne.n	2e8ae <isTopicMatched+0xc2>
   2e8a2:	697b      	ldr	r3, [r7, #20]
   2e8a4:	781b      	ldrb	r3, [r3, #0]
   2e8a6:	2b00      	cmp	r3, #0
   2e8a8:	d101      	bne.n	2e8ae <isTopicMatched+0xc2>
   2e8aa:	2301      	movs	r3, #1
   2e8ac:	e000      	b.n	2e8b0 <isTopicMatched+0xc4>
   2e8ae:	2300      	movs	r3, #0
   2e8b0:	b2db      	uxtb	r3, r3
}
   2e8b2:	0018      	movs	r0, r3
   2e8b4:	46bd      	mov	sp, r7
   2e8b6:	b006      	add	sp, #24
   2e8b8:	bd80      	pop	{r7, pc}
	...

0002e8bc <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2e8bc:	b580      	push	{r7, lr}
   2e8be:	b08a      	sub	sp, #40	; 0x28
   2e8c0:	af00      	add	r7, sp, #0
   2e8c2:	60f8      	str	r0, [r7, #12]
   2e8c4:	60b9      	str	r1, [r7, #8]
   2e8c6:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2e8c8:	2301      	movs	r3, #1
   2e8ca:	425b      	negs	r3, r3
   2e8cc:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e8ce:	2300      	movs	r3, #0
   2e8d0:	627b      	str	r3, [r7, #36]	; 0x24
   2e8d2:	e044      	b.n	2e95e <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e8d4:	68fa      	ldr	r2, [r7, #12]
   2e8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e8d8:	3304      	adds	r3, #4
   2e8da:	00db      	lsls	r3, r3, #3
   2e8dc:	18d3      	adds	r3, r2, r3
   2e8de:	3304      	adds	r3, #4
   2e8e0:	681b      	ldr	r3, [r3, #0]
   2e8e2:	2b00      	cmp	r3, #0
   2e8e4:	d038      	beq.n	2e958 <deliverMessage+0x9c>
   2e8e6:	68fa      	ldr	r2, [r7, #12]
   2e8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e8ea:	3304      	adds	r3, #4
   2e8ec:	00db      	lsls	r3, r3, #3
   2e8ee:	18d3      	adds	r3, r2, r3
   2e8f0:	3304      	adds	r3, #4
   2e8f2:	681a      	ldr	r2, [r3, #0]
   2e8f4:	68bb      	ldr	r3, [r7, #8]
   2e8f6:	0011      	movs	r1, r2
   2e8f8:	0018      	movs	r0, r3
   2e8fa:	4b28      	ldr	r3, [pc, #160]	; (2e99c <deliverMessage+0xe0>)
   2e8fc:	4798      	blx	r3
   2e8fe:	1e03      	subs	r3, r0, #0
   2e900:	d10d      	bne.n	2e91e <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2e902:	68fa      	ldr	r2, [r7, #12]
   2e904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e906:	3304      	adds	r3, #4
   2e908:	00db      	lsls	r3, r3, #3
   2e90a:	18d3      	adds	r3, r2, r3
   2e90c:	3304      	adds	r3, #4
   2e90e:	681b      	ldr	r3, [r3, #0]
   2e910:	68ba      	ldr	r2, [r7, #8]
   2e912:	0011      	movs	r1, r2
   2e914:	0018      	movs	r0, r3
   2e916:	4b22      	ldr	r3, [pc, #136]	; (2e9a0 <deliverMessage+0xe4>)
   2e918:	4798      	blx	r3
   2e91a:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e91c:	d01c      	beq.n	2e958 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2e91e:	68fa      	ldr	r2, [r7, #12]
   2e920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e922:	3304      	adds	r3, #4
   2e924:	00db      	lsls	r3, r3, #3
   2e926:	18d3      	adds	r3, r2, r3
   2e928:	3308      	adds	r3, #8
   2e92a:	681b      	ldr	r3, [r3, #0]
   2e92c:	2b00      	cmp	r3, #0
   2e92e:	d013      	beq.n	2e958 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2e930:	687a      	ldr	r2, [r7, #4]
   2e932:	68b9      	ldr	r1, [r7, #8]
   2e934:	2318      	movs	r3, #24
   2e936:	18fb      	adds	r3, r7, r3
   2e938:	0018      	movs	r0, r3
   2e93a:	4b1a      	ldr	r3, [pc, #104]	; (2e9a4 <deliverMessage+0xe8>)
   2e93c:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2e93e:	68fa      	ldr	r2, [r7, #12]
   2e940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e942:	3304      	adds	r3, #4
   2e944:	00db      	lsls	r3, r3, #3
   2e946:	18d3      	adds	r3, r2, r3
   2e948:	3308      	adds	r3, #8
   2e94a:	681b      	ldr	r3, [r3, #0]
   2e94c:	2218      	movs	r2, #24
   2e94e:	18ba      	adds	r2, r7, r2
   2e950:	0010      	movs	r0, r2
   2e952:	4798      	blx	r3
                rc = SUCCESS;
   2e954:	2300      	movs	r3, #0
   2e956:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e95a:	3301      	adds	r3, #1
   2e95c:	627b      	str	r3, [r7, #36]	; 0x24
   2e95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e960:	2b04      	cmp	r3, #4
   2e962:	ddb7      	ble.n	2e8d4 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2e964:	6a3b      	ldr	r3, [r7, #32]
   2e966:	3301      	adds	r3, #1
   2e968:	d112      	bne.n	2e990 <deliverMessage+0xd4>
   2e96a:	68fb      	ldr	r3, [r7, #12]
   2e96c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e96e:	2b00      	cmp	r3, #0
   2e970:	d00e      	beq.n	2e990 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2e972:	687a      	ldr	r2, [r7, #4]
   2e974:	68b9      	ldr	r1, [r7, #8]
   2e976:	2310      	movs	r3, #16
   2e978:	18fb      	adds	r3, r7, r3
   2e97a:	0018      	movs	r0, r3
   2e97c:	4b09      	ldr	r3, [pc, #36]	; (2e9a4 <deliverMessage+0xe8>)
   2e97e:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2e980:	68fb      	ldr	r3, [r7, #12]
   2e982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e984:	2210      	movs	r2, #16
   2e986:	18ba      	adds	r2, r7, r2
   2e988:	0010      	movs	r0, r2
   2e98a:	4798      	blx	r3
        rc = SUCCESS;
   2e98c:	2300      	movs	r3, #0
   2e98e:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2e990:	6a3b      	ldr	r3, [r7, #32]
}
   2e992:	0018      	movs	r0, r3
   2e994:	46bd      	mov	sp, r7
   2e996:	b00a      	add	sp, #40	; 0x28
   2e998:	bd80      	pop	{r7, pc}
   2e99a:	46c0      	nop			; (mov r8, r8)
   2e99c:	00030591 	.word	0x00030591
   2e9a0:	0002e7ed 	.word	0x0002e7ed
   2e9a4:	0002e4f5 	.word	0x0002e4f5

0002e9a8 <keepalive>:


int keepalive(MQTTClient* c)
{
   2e9a8:	b580      	push	{r7, lr}
   2e9aa:	b088      	sub	sp, #32
   2e9ac:	af00      	add	r7, sp, #0
   2e9ae:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e9b0:	2301      	movs	r3, #1
   2e9b2:	425b      	negs	r3, r3
   2e9b4:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2e9b6:	687b      	ldr	r3, [r7, #4]
   2e9b8:	699b      	ldr	r3, [r3, #24]
   2e9ba:	2b00      	cmp	r3, #0
   2e9bc:	d102      	bne.n	2e9c4 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2e9be:	2300      	movs	r3, #0
   2e9c0:	61fb      	str	r3, [r7, #28]
        goto exit;
   2e9c2:	e033      	b.n	2ea2c <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2e9c4:	687b      	ldr	r3, [r7, #4]
   2e9c6:	3354      	adds	r3, #84	; 0x54
   2e9c8:	0018      	movs	r0, r3
   2e9ca:	4b1b      	ldr	r3, [pc, #108]	; (2ea38 <keepalive+0x90>)
   2e9cc:	4798      	blx	r3
   2e9ce:	1e03      	subs	r3, r0, #0
   2e9d0:	d02c      	beq.n	2ea2c <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2e9d2:	687b      	ldr	r3, [r7, #4]
   2e9d4:	7f1b      	ldrb	r3, [r3, #28]
   2e9d6:	2b00      	cmp	r3, #0
   2e9d8:	d128      	bne.n	2ea2c <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2e9da:	230c      	movs	r3, #12
   2e9dc:	18fb      	adds	r3, r7, r3
   2e9de:	0018      	movs	r0, r3
   2e9e0:	4b16      	ldr	r3, [pc, #88]	; (2ea3c <keepalive+0x94>)
   2e9e2:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2e9e4:	23fa      	movs	r3, #250	; 0xfa
   2e9e6:	009a      	lsls	r2, r3, #2
   2e9e8:	230c      	movs	r3, #12
   2e9ea:	18fb      	adds	r3, r7, r3
   2e9ec:	0011      	movs	r1, r2
   2e9ee:	0018      	movs	r0, r3
   2e9f0:	4b13      	ldr	r3, [pc, #76]	; (2ea40 <keepalive+0x98>)
   2e9f2:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2e9f4:	687b      	ldr	r3, [r7, #4]
   2e9f6:	691a      	ldr	r2, [r3, #16]
   2e9f8:	687b      	ldr	r3, [r7, #4]
   2e9fa:	689b      	ldr	r3, [r3, #8]
   2e9fc:	0019      	movs	r1, r3
   2e9fe:	0010      	movs	r0, r2
   2ea00:	4b10      	ldr	r3, [pc, #64]	; (2ea44 <keepalive+0x9c>)
   2ea02:	4798      	blx	r3
   2ea04:	0003      	movs	r3, r0
   2ea06:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2ea08:	69bb      	ldr	r3, [r7, #24]
   2ea0a:	2b00      	cmp	r3, #0
   2ea0c:	dd0e      	ble.n	2ea2c <keepalive+0x84>
   2ea0e:	230c      	movs	r3, #12
   2ea10:	18fa      	adds	r2, r7, r3
   2ea12:	69b9      	ldr	r1, [r7, #24]
   2ea14:	687b      	ldr	r3, [r7, #4]
   2ea16:	0018      	movs	r0, r3
   2ea18:	4b0b      	ldr	r3, [pc, #44]	; (2ea48 <keepalive+0xa0>)
   2ea1a:	4798      	blx	r3
   2ea1c:	0003      	movs	r3, r0
   2ea1e:	61fb      	str	r3, [r7, #28]
   2ea20:	69fb      	ldr	r3, [r7, #28]
   2ea22:	2b00      	cmp	r3, #0
   2ea24:	d102      	bne.n	2ea2c <keepalive+0x84>
                c->ping_outstanding = 1;
   2ea26:	687b      	ldr	r3, [r7, #4]
   2ea28:	2201      	movs	r2, #1
   2ea2a:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2ea2c:	69fb      	ldr	r3, [r7, #28]
}
   2ea2e:	0018      	movs	r0, r3
   2ea30:	46bd      	mov	sp, r7
   2ea32:	b008      	add	sp, #32
   2ea34:	bd80      	pop	{r7, pc}
   2ea36:	46c0      	nop			; (mov r8, r8)
   2ea38:	0002f329 	.word	0x0002f329
   2ea3c:	0002f3cd 	.word	0x0002f3cd
   2ea40:	0002f355 	.word	0x0002f355
   2ea44:	0002ffa1 	.word	0x0002ffa1
   2ea48:	0002e545 	.word	0x0002e545

0002ea4c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2ea4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ea4e:	b095      	sub	sp, #84	; 0x54
   2ea50:	af06      	add	r7, sp, #24
   2ea52:	6078      	str	r0, [r7, #4]
   2ea54:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2ea56:	683a      	ldr	r2, [r7, #0]
   2ea58:	687b      	ldr	r3, [r7, #4]
   2ea5a:	0011      	movs	r1, r2
   2ea5c:	0018      	movs	r0, r3
   2ea5e:	4b70      	ldr	r3, [pc, #448]	; (2ec20 <cycle+0x1d4>)
   2ea60:	4798      	blx	r3
   2ea62:	0002      	movs	r2, r0
   2ea64:	232e      	movs	r3, #46	; 0x2e
   2ea66:	18fb      	adds	r3, r7, r3
   2ea68:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2ea6a:	2300      	movs	r3, #0
   2ea6c:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2ea6e:	2300      	movs	r3, #0
   2ea70:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2ea72:	232e      	movs	r3, #46	; 0x2e
   2ea74:	18fb      	adds	r3, r7, r3
   2ea76:	881b      	ldrh	r3, [r3, #0]
   2ea78:	2b0d      	cmp	r3, #13
   2ea7a:	d900      	bls.n	2ea7e <cycle+0x32>
   2ea7c:	e0bd      	b.n	2ebfa <cycle+0x1ae>
   2ea7e:	009a      	lsls	r2, r3, #2
   2ea80:	4b68      	ldr	r3, [pc, #416]	; (2ec24 <cycle+0x1d8>)
   2ea82:	18d3      	adds	r3, r2, r3
   2ea84:	681b      	ldr	r3, [r3, #0]
   2ea86:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2ea88:	687b      	ldr	r3, [r7, #4]
   2ea8a:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2ea8c:	687b      	ldr	r3, [r7, #4]
   2ea8e:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2ea90:	001e      	movs	r6, r3
   2ea92:	2310      	movs	r3, #16
   2ea94:	18fb      	adds	r3, r7, r3
   2ea96:	1d1d      	adds	r5, r3, #4
   2ea98:	2310      	movs	r3, #16
   2ea9a:	18fb      	adds	r3, r7, r3
   2ea9c:	1c5c      	adds	r4, r3, #1
   2ea9e:	230c      	movs	r3, #12
   2eaa0:	18f9      	adds	r1, r7, r3
   2eaa2:	2310      	movs	r3, #16
   2eaa4:	18fb      	adds	r3, r7, r3
   2eaa6:	1c98      	adds	r0, r3, #2
   2eaa8:	9604      	str	r6, [sp, #16]
   2eaaa:	9203      	str	r2, [sp, #12]
   2eaac:	2310      	movs	r3, #16
   2eaae:	18fb      	adds	r3, r7, r3
   2eab0:	330c      	adds	r3, #12
   2eab2:	9302      	str	r3, [sp, #8]
   2eab4:	2310      	movs	r3, #16
   2eab6:	18fb      	adds	r3, r7, r3
   2eab8:	3308      	adds	r3, #8
   2eaba:	9301      	str	r3, [sp, #4]
   2eabc:	2320      	movs	r3, #32
   2eabe:	18fb      	adds	r3, r7, r3
   2eac0:	9300      	str	r3, [sp, #0]
   2eac2:	002b      	movs	r3, r5
   2eac4:	0022      	movs	r2, r4
   2eac6:	4c58      	ldr	r4, [pc, #352]	; (2ec28 <cycle+0x1dc>)
   2eac8:	47a0      	blx	r4
   2eaca:	0003      	movs	r3, r0
   2eacc:	2b01      	cmp	r3, #1
   2eace:	d000      	beq.n	2ead2 <cycle+0x86>
   2ead0:	e098      	b.n	2ec04 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2ead2:	68fb      	ldr	r3, [r7, #12]
   2ead4:	b2da      	uxtb	r2, r3
   2ead6:	2310      	movs	r3, #16
   2ead8:	18fb      	adds	r3, r7, r3
   2eada:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2eadc:	2310      	movs	r3, #16
   2eade:	18fa      	adds	r2, r7, r3
   2eae0:	2320      	movs	r3, #32
   2eae2:	18f9      	adds	r1, r7, r3
   2eae4:	687b      	ldr	r3, [r7, #4]
   2eae6:	0018      	movs	r0, r3
   2eae8:	4b50      	ldr	r3, [pc, #320]	; (2ec2c <cycle+0x1e0>)
   2eaea:	4798      	blx	r3
            if (msg.qos != QOS0)
   2eaec:	2310      	movs	r3, #16
   2eaee:	18fb      	adds	r3, r7, r3
   2eaf0:	781b      	ldrb	r3, [r3, #0]
   2eaf2:	2b00      	cmp	r3, #0
   2eaf4:	d100      	bne.n	2eaf8 <cycle+0xac>
   2eaf6:	e07d      	b.n	2ebf4 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2eaf8:	2310      	movs	r3, #16
   2eafa:	18fb      	adds	r3, r7, r3
   2eafc:	781b      	ldrb	r3, [r3, #0]
   2eafe:	2b01      	cmp	r3, #1
   2eb00:	d10f      	bne.n	2eb22 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2eb02:	687b      	ldr	r3, [r7, #4]
   2eb04:	6918      	ldr	r0, [r3, #16]
   2eb06:	687b      	ldr	r3, [r7, #4]
   2eb08:	689b      	ldr	r3, [r3, #8]
   2eb0a:	0019      	movs	r1, r3
   2eb0c:	2310      	movs	r3, #16
   2eb0e:	18fb      	adds	r3, r7, r3
   2eb10:	889b      	ldrh	r3, [r3, #4]
   2eb12:	9300      	str	r3, [sp, #0]
   2eb14:	2300      	movs	r3, #0
   2eb16:	2204      	movs	r2, #4
   2eb18:	4c45      	ldr	r4, [pc, #276]	; (2ec30 <cycle+0x1e4>)
   2eb1a:	47a0      	blx	r4
   2eb1c:	0003      	movs	r3, r0
   2eb1e:	637b      	str	r3, [r7, #52]	; 0x34
   2eb20:	e013      	b.n	2eb4a <cycle+0xfe>
                else if (msg.qos == QOS2)
   2eb22:	2310      	movs	r3, #16
   2eb24:	18fb      	adds	r3, r7, r3
   2eb26:	781b      	ldrb	r3, [r3, #0]
   2eb28:	2b02      	cmp	r3, #2
   2eb2a:	d10e      	bne.n	2eb4a <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2eb2c:	687b      	ldr	r3, [r7, #4]
   2eb2e:	6918      	ldr	r0, [r3, #16]
   2eb30:	687b      	ldr	r3, [r7, #4]
   2eb32:	689b      	ldr	r3, [r3, #8]
   2eb34:	0019      	movs	r1, r3
   2eb36:	2310      	movs	r3, #16
   2eb38:	18fb      	adds	r3, r7, r3
   2eb3a:	889b      	ldrh	r3, [r3, #4]
   2eb3c:	9300      	str	r3, [sp, #0]
   2eb3e:	2300      	movs	r3, #0
   2eb40:	2205      	movs	r2, #5
   2eb42:	4c3b      	ldr	r4, [pc, #236]	; (2ec30 <cycle+0x1e4>)
   2eb44:	47a0      	blx	r4
   2eb46:	0003      	movs	r3, r0
   2eb48:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2eb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2eb4c:	2b00      	cmp	r3, #0
   2eb4e:	dc03      	bgt.n	2eb58 <cycle+0x10c>
                    rc = FAILURE;
   2eb50:	2301      	movs	r3, #1
   2eb52:	425b      	negs	r3, r3
   2eb54:	633b      	str	r3, [r7, #48]	; 0x30
   2eb56:	e007      	b.n	2eb68 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2eb58:	683a      	ldr	r2, [r7, #0]
   2eb5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2eb5c:	687b      	ldr	r3, [r7, #4]
   2eb5e:	0018      	movs	r0, r3
   2eb60:	4b34      	ldr	r3, [pc, #208]	; (2ec34 <cycle+0x1e8>)
   2eb62:	4798      	blx	r3
   2eb64:	0003      	movs	r3, r0
   2eb66:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2eb6a:	3301      	adds	r3, #1
   2eb6c:	d142      	bne.n	2ebf4 <cycle+0x1a8>
                    goto exit; // there was a problem
   2eb6e:	46c0      	nop			; (mov r8, r8)
   2eb70:	e049      	b.n	2ec06 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2eb72:	687b      	ldr	r3, [r7, #4]
   2eb74:	695c      	ldr	r4, [r3, #20]
   2eb76:	687b      	ldr	r3, [r7, #4]
   2eb78:	68db      	ldr	r3, [r3, #12]
   2eb7a:	220a      	movs	r2, #10
   2eb7c:	18ba      	adds	r2, r7, r2
   2eb7e:	2109      	movs	r1, #9
   2eb80:	1879      	adds	r1, r7, r1
   2eb82:	2008      	movs	r0, #8
   2eb84:	1838      	adds	r0, r7, r0
   2eb86:	9300      	str	r3, [sp, #0]
   2eb88:	0023      	movs	r3, r4
   2eb8a:	4c2b      	ldr	r4, [pc, #172]	; (2ec38 <cycle+0x1ec>)
   2eb8c:	47a0      	blx	r4
   2eb8e:	0003      	movs	r3, r0
   2eb90:	2b01      	cmp	r3, #1
   2eb92:	d003      	beq.n	2eb9c <cycle+0x150>
                rc = FAILURE;
   2eb94:	2301      	movs	r3, #1
   2eb96:	425b      	negs	r3, r3
   2eb98:	633b      	str	r3, [r7, #48]	; 0x30
   2eb9a:	e023      	b.n	2ebe4 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2eb9c:	687b      	ldr	r3, [r7, #4]
   2eb9e:	6918      	ldr	r0, [r3, #16]
   2eba0:	687b      	ldr	r3, [r7, #4]
   2eba2:	689b      	ldr	r3, [r3, #8]
   2eba4:	0019      	movs	r1, r3
   2eba6:	230a      	movs	r3, #10
   2eba8:	18fb      	adds	r3, r7, r3
   2ebaa:	881b      	ldrh	r3, [r3, #0]
   2ebac:	9300      	str	r3, [sp, #0]
   2ebae:	2300      	movs	r3, #0
   2ebb0:	2206      	movs	r2, #6
   2ebb2:	4c1f      	ldr	r4, [pc, #124]	; (2ec30 <cycle+0x1e4>)
   2ebb4:	47a0      	blx	r4
   2ebb6:	0003      	movs	r3, r0
   2ebb8:	637b      	str	r3, [r7, #52]	; 0x34
   2ebba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ebbc:	2b00      	cmp	r3, #0
   2ebbe:	dc03      	bgt.n	2ebc8 <cycle+0x17c>
                rc = FAILURE;
   2ebc0:	2301      	movs	r3, #1
   2ebc2:	425b      	negs	r3, r3
   2ebc4:	633b      	str	r3, [r7, #48]	; 0x30
   2ebc6:	e00d      	b.n	2ebe4 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2ebc8:	683a      	ldr	r2, [r7, #0]
   2ebca:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2ebcc:	687b      	ldr	r3, [r7, #4]
   2ebce:	0018      	movs	r0, r3
   2ebd0:	4b18      	ldr	r3, [pc, #96]	; (2ec34 <cycle+0x1e8>)
   2ebd2:	4798      	blx	r3
   2ebd4:	0003      	movs	r3, r0
   2ebd6:	633b      	str	r3, [r7, #48]	; 0x30
   2ebd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ebda:	2b00      	cmp	r3, #0
   2ebdc:	d002      	beq.n	2ebe4 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2ebde:	2301      	movs	r3, #1
   2ebe0:	425b      	negs	r3, r3
   2ebe2:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2ebe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ebe6:	3301      	adds	r3, #1
   2ebe8:	d106      	bne.n	2ebf8 <cycle+0x1ac>
                goto exit; // there was a problem
   2ebea:	e00c      	b.n	2ec06 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2ebec:	687b      	ldr	r3, [r7, #4]
   2ebee:	2200      	movs	r2, #0
   2ebf0:	771a      	strb	r2, [r3, #28]
            break;
   2ebf2:	e002      	b.n	2ebfa <cycle+0x1ae>
            break;
   2ebf4:	46c0      	nop			; (mov r8, r8)
   2ebf6:	e000      	b.n	2ebfa <cycle+0x1ae>
            break;
   2ebf8:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2ebfa:	687b      	ldr	r3, [r7, #4]
   2ebfc:	0018      	movs	r0, r3
   2ebfe:	4b0f      	ldr	r3, [pc, #60]	; (2ec3c <cycle+0x1f0>)
   2ec00:	4798      	blx	r3
   2ec02:	e000      	b.n	2ec06 <cycle+0x1ba>
                goto exit;
   2ec04:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2ec06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ec08:	2b00      	cmp	r3, #0
   2ec0a:	d103      	bne.n	2ec14 <cycle+0x1c8>
        rc = packet_type;
   2ec0c:	232e      	movs	r3, #46	; 0x2e
   2ec0e:	18fb      	adds	r3, r7, r3
   2ec10:	881b      	ldrh	r3, [r3, #0]
   2ec12:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2ec14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2ec16:	0018      	movs	r0, r3
   2ec18:	46bd      	mov	sp, r7
   2ec1a:	b00f      	add	sp, #60	; 0x3c
   2ec1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ec1e:	46c0      	nop			; (mov r8, r8)
   2ec20:	0002e701 	.word	0x0002e701
   2ec24:	00039c78 	.word	0x00039c78
   2ec28:	0002ffc5 	.word	0x0002ffc5
   2ec2c:	0002e8bd 	.word	0x0002e8bd
   2ec30:	000307bd 	.word	0x000307bd
   2ec34:	0002e545 	.word	0x0002e545
   2ec38:	000300c9 	.word	0x000300c9
   2ec3c:	0002e9a9 	.word	0x0002e9a9

0002ec40 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2ec40:	b580      	push	{r7, lr}
   2ec42:	b086      	sub	sp, #24
   2ec44:	af00      	add	r7, sp, #0
   2ec46:	6078      	str	r0, [r7, #4]
   2ec48:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2ec4a:	2300      	movs	r3, #0
   2ec4c:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2ec4e:	2308      	movs	r3, #8
   2ec50:	18fb      	adds	r3, r7, r3
   2ec52:	0018      	movs	r0, r3
   2ec54:	4b11      	ldr	r3, [pc, #68]	; (2ec9c <MQTTYield+0x5c>)
   2ec56:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2ec58:	683a      	ldr	r2, [r7, #0]
   2ec5a:	2308      	movs	r3, #8
   2ec5c:	18fb      	adds	r3, r7, r3
   2ec5e:	0011      	movs	r1, r2
   2ec60:	0018      	movs	r0, r3
   2ec62:	4b0f      	ldr	r3, [pc, #60]	; (2eca0 <MQTTYield+0x60>)
   2ec64:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2ec66:	2308      	movs	r3, #8
   2ec68:	18fa      	adds	r2, r7, r3
   2ec6a:	687b      	ldr	r3, [r7, #4]
   2ec6c:	0011      	movs	r1, r2
   2ec6e:	0018      	movs	r0, r3
   2ec70:	4b0c      	ldr	r3, [pc, #48]	; (2eca4 <MQTTYield+0x64>)
   2ec72:	4798      	blx	r3
   2ec74:	0003      	movs	r3, r0
   2ec76:	3301      	adds	r3, #1
   2ec78:	d103      	bne.n	2ec82 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2ec7a:	2301      	movs	r3, #1
   2ec7c:	425b      	negs	r3, r3
   2ec7e:	617b      	str	r3, [r7, #20]
            break;
   2ec80:	e006      	b.n	2ec90 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2ec82:	2308      	movs	r3, #8
   2ec84:	18fb      	adds	r3, r7, r3
   2ec86:	0018      	movs	r0, r3
   2ec88:	4b07      	ldr	r3, [pc, #28]	; (2eca8 <MQTTYield+0x68>)
   2ec8a:	4798      	blx	r3
   2ec8c:	1e03      	subs	r3, r0, #0
   2ec8e:	d0ea      	beq.n	2ec66 <MQTTYield+0x26>
        
    return rc;
   2ec90:	697b      	ldr	r3, [r7, #20]
}
   2ec92:	0018      	movs	r0, r3
   2ec94:	46bd      	mov	sp, r7
   2ec96:	b006      	add	sp, #24
   2ec98:	bd80      	pop	{r7, pc}
   2ec9a:	46c0      	nop			; (mov r8, r8)
   2ec9c:	0002f3cd 	.word	0x0002f3cd
   2eca0:	0002f355 	.word	0x0002f355
   2eca4:	0002ea4d 	.word	0x0002ea4d
   2eca8:	0002f329 	.word	0x0002f329

0002ecac <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2ecac:	b580      	push	{r7, lr}
   2ecae:	b086      	sub	sp, #24
   2ecb0:	af00      	add	r7, sp, #0
   2ecb2:	60f8      	str	r0, [r7, #12]
   2ecb4:	60b9      	str	r1, [r7, #8]
   2ecb6:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2ecb8:	2301      	movs	r3, #1
   2ecba:	425b      	negs	r3, r3
   2ecbc:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2ecbe:	687b      	ldr	r3, [r7, #4]
   2ecc0:	0018      	movs	r0, r3
   2ecc2:	4b0b      	ldr	r3, [pc, #44]	; (2ecf0 <waitfor+0x44>)
   2ecc4:	4798      	blx	r3
   2ecc6:	1e03      	subs	r3, r0, #0
   2ecc8:	d10c      	bne.n	2ece4 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2ecca:	687a      	ldr	r2, [r7, #4]
   2eccc:	68fb      	ldr	r3, [r7, #12]
   2ecce:	0011      	movs	r1, r2
   2ecd0:	0018      	movs	r0, r3
   2ecd2:	4b08      	ldr	r3, [pc, #32]	; (2ecf4 <waitfor+0x48>)
   2ecd4:	4798      	blx	r3
   2ecd6:	0003      	movs	r3, r0
   2ecd8:	617b      	str	r3, [r7, #20]
   2ecda:	697a      	ldr	r2, [r7, #20]
   2ecdc:	68bb      	ldr	r3, [r7, #8]
   2ecde:	429a      	cmp	r2, r3
   2ece0:	d1ed      	bne.n	2ecbe <waitfor+0x12>
   2ece2:	e000      	b.n	2ece6 <waitfor+0x3a>
            break; // we timed out
   2ece4:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2ece6:	697b      	ldr	r3, [r7, #20]
}
   2ece8:	0018      	movs	r0, r3
   2ecea:	46bd      	mov	sp, r7
   2ecec:	b006      	add	sp, #24
   2ecee:	bd80      	pop	{r7, pc}
   2ecf0:	0002f329 	.word	0x0002f329
   2ecf4:	0002ea4d 	.word	0x0002ea4d

0002ecf8 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2ecf8:	b590      	push	{r4, r7, lr}
   2ecfa:	b09f      	sub	sp, #124	; 0x7c
   2ecfc:	af00      	add	r7, sp, #0
   2ecfe:	6078      	str	r0, [r7, #4]
   2ed00:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2ed02:	2301      	movs	r3, #1
   2ed04:	425b      	negs	r3, r3
   2ed06:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2ed08:	230c      	movs	r3, #12
   2ed0a:	18fa      	adds	r2, r7, r3
   2ed0c:	4b41      	ldr	r3, [pc, #260]	; (2ee14 <MQTTConnect+0x11c>)
   2ed0e:	0010      	movs	r0, r2
   2ed10:	0019      	movs	r1, r3
   2ed12:	2358      	movs	r3, #88	; 0x58
   2ed14:	001a      	movs	r2, r3
   2ed16:	4b40      	ldr	r3, [pc, #256]	; (2ee18 <MQTTConnect+0x120>)
   2ed18:	4798      	blx	r3
    int len = 0;
   2ed1a:	2300      	movs	r3, #0
   2ed1c:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2ed1e:	687b      	ldr	r3, [r7, #4]
   2ed20:	6a1b      	ldr	r3, [r3, #32]
   2ed22:	2b00      	cmp	r3, #0
   2ed24:	d166      	bne.n	2edf4 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2ed26:	2364      	movs	r3, #100	; 0x64
   2ed28:	18fb      	adds	r3, r7, r3
   2ed2a:	0018      	movs	r0, r3
   2ed2c:	4b3b      	ldr	r3, [pc, #236]	; (2ee1c <MQTTConnect+0x124>)
   2ed2e:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2ed30:	687b      	ldr	r3, [r7, #4]
   2ed32:	685a      	ldr	r2, [r3, #4]
   2ed34:	2364      	movs	r3, #100	; 0x64
   2ed36:	18fb      	adds	r3, r7, r3
   2ed38:	0011      	movs	r1, r2
   2ed3a:	0018      	movs	r0, r3
   2ed3c:	4b38      	ldr	r3, [pc, #224]	; (2ee20 <MQTTConnect+0x128>)
   2ed3e:	4798      	blx	r3

    if (options == 0)
   2ed40:	683b      	ldr	r3, [r7, #0]
   2ed42:	2b00      	cmp	r3, #0
   2ed44:	d102      	bne.n	2ed4c <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2ed46:	230c      	movs	r3, #12
   2ed48:	18fb      	adds	r3, r7, r3
   2ed4a:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2ed4c:	683b      	ldr	r3, [r7, #0]
   2ed4e:	8b1b      	ldrh	r3, [r3, #24]
   2ed50:	001a      	movs	r2, r3
   2ed52:	687b      	ldr	r3, [r7, #4]
   2ed54:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2ed56:	687b      	ldr	r3, [r7, #4]
   2ed58:	3354      	adds	r3, #84	; 0x54
   2ed5a:	001a      	movs	r2, r3
   2ed5c:	687b      	ldr	r3, [r7, #4]
   2ed5e:	699b      	ldr	r3, [r3, #24]
   2ed60:	0019      	movs	r1, r3
   2ed62:	0010      	movs	r0, r2
   2ed64:	4b2f      	ldr	r3, [pc, #188]	; (2ee24 <MQTTConnect+0x12c>)
   2ed66:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2ed68:	687b      	ldr	r3, [r7, #4]
   2ed6a:	6918      	ldr	r0, [r3, #16]
   2ed6c:	687b      	ldr	r3, [r7, #4]
   2ed6e:	689b      	ldr	r3, [r3, #8]
   2ed70:	0019      	movs	r1, r3
   2ed72:	683b      	ldr	r3, [r7, #0]
   2ed74:	001a      	movs	r2, r3
   2ed76:	4b2c      	ldr	r3, [pc, #176]	; (2ee28 <MQTTConnect+0x130>)
   2ed78:	4798      	blx	r3
   2ed7a:	0003      	movs	r3, r0
   2ed7c:	673b      	str	r3, [r7, #112]	; 0x70
   2ed7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2ed80:	2b00      	cmp	r3, #0
   2ed82:	dd39      	ble.n	2edf8 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2ed84:	2364      	movs	r3, #100	; 0x64
   2ed86:	18fa      	adds	r2, r7, r3
   2ed88:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2ed8a:	687b      	ldr	r3, [r7, #4]
   2ed8c:	0018      	movs	r0, r3
   2ed8e:	4b27      	ldr	r3, [pc, #156]	; (2ee2c <MQTTConnect+0x134>)
   2ed90:	4798      	blx	r3
   2ed92:	0003      	movs	r3, r0
   2ed94:	677b      	str	r3, [r7, #116]	; 0x74
   2ed96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ed98:	2b00      	cmp	r3, #0
   2ed9a:	d12f      	bne.n	2edfc <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2ed9c:	2364      	movs	r3, #100	; 0x64
   2ed9e:	18fa      	adds	r2, r7, r3
   2eda0:	687b      	ldr	r3, [r7, #4]
   2eda2:	2102      	movs	r1, #2
   2eda4:	0018      	movs	r0, r3
   2eda6:	4b22      	ldr	r3, [pc, #136]	; (2ee30 <MQTTConnect+0x138>)
   2eda8:	4798      	blx	r3
   2edaa:	0003      	movs	r3, r0
   2edac:	2b02      	cmp	r3, #2
   2edae:	d11d      	bne.n	2edec <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2edb0:	230b      	movs	r3, #11
   2edb2:	18fb      	adds	r3, r7, r3
   2edb4:	22ff      	movs	r2, #255	; 0xff
   2edb6:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2edb8:	230a      	movs	r3, #10
   2edba:	18fb      	adds	r3, r7, r3
   2edbc:	2200      	movs	r2, #0
   2edbe:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2edc0:	687b      	ldr	r3, [r7, #4]
   2edc2:	695a      	ldr	r2, [r3, #20]
   2edc4:	687b      	ldr	r3, [r7, #4]
   2edc6:	68db      	ldr	r3, [r3, #12]
   2edc8:	210b      	movs	r1, #11
   2edca:	1879      	adds	r1, r7, r1
   2edcc:	200a      	movs	r0, #10
   2edce:	1838      	adds	r0, r7, r0
   2edd0:	4c18      	ldr	r4, [pc, #96]	; (2ee34 <MQTTConnect+0x13c>)
   2edd2:	47a0      	blx	r4
   2edd4:	0003      	movs	r3, r0
   2edd6:	2b01      	cmp	r3, #1
   2edd8:	d104      	bne.n	2ede4 <MQTTConnect+0xec>
            rc = connack_rc;
   2edda:	230b      	movs	r3, #11
   2eddc:	18fb      	adds	r3, r7, r3
   2edde:	781b      	ldrb	r3, [r3, #0]
   2ede0:	677b      	str	r3, [r7, #116]	; 0x74
   2ede2:	e00c      	b.n	2edfe <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2ede4:	2301      	movs	r3, #1
   2ede6:	425b      	negs	r3, r3
   2ede8:	677b      	str	r3, [r7, #116]	; 0x74
   2edea:	e008      	b.n	2edfe <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2edec:	2301      	movs	r3, #1
   2edee:	425b      	negs	r3, r3
   2edf0:	677b      	str	r3, [r7, #116]	; 0x74
   2edf2:	e004      	b.n	2edfe <MQTTConnect+0x106>
		goto exit;
   2edf4:	46c0      	nop			; (mov r8, r8)
   2edf6:	e002      	b.n	2edfe <MQTTConnect+0x106>
        goto exit;
   2edf8:	46c0      	nop			; (mov r8, r8)
   2edfa:	e000      	b.n	2edfe <MQTTConnect+0x106>
        goto exit; // there was a problem
   2edfc:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2edfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ee00:	2b00      	cmp	r3, #0
   2ee02:	d102      	bne.n	2ee0a <MQTTConnect+0x112>
        c->isconnected = 1;
   2ee04:	687b      	ldr	r3, [r7, #4]
   2ee06:	2201      	movs	r2, #1
   2ee08:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2ee0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2ee0c:	0018      	movs	r0, r3
   2ee0e:	46bd      	mov	sp, r7
   2ee10:	b01f      	add	sp, #124	; 0x7c
   2ee12:	bd90      	pop	{r4, r7, pc}
   2ee14:	00039cb0 	.word	0x00039cb0
   2ee18:	00034a29 	.word	0x00034a29
   2ee1c:	0002f3cd 	.word	0x0002f3cd
   2ee20:	0002f355 	.word	0x0002f355
   2ee24:	0002f37d 	.word	0x0002f37d
   2ee28:	0002fba9 	.word	0x0002fba9
   2ee2c:	0002e545 	.word	0x0002e545
   2ee30:	0002ecad 	.word	0x0002ecad
   2ee34:	0002fe25 	.word	0x0002fe25

0002ee38 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2ee38:	b5b0      	push	{r4, r5, r7, lr}
   2ee3a:	b096      	sub	sp, #88	; 0x58
   2ee3c:	af04      	add	r7, sp, #16
   2ee3e:	60f8      	str	r0, [r7, #12]
   2ee40:	60b9      	str	r1, [r7, #8]
   2ee42:	603b      	str	r3, [r7, #0]
   2ee44:	1dfb      	adds	r3, r7, #7
   2ee46:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2ee48:	2301      	movs	r3, #1
   2ee4a:	425b      	negs	r3, r3
   2ee4c:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2ee4e:	2300      	movs	r3, #0
   2ee50:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2ee52:	2324      	movs	r3, #36	; 0x24
   2ee54:	18fb      	adds	r3, r7, r3
   2ee56:	2200      	movs	r2, #0
   2ee58:	601a      	str	r2, [r3, #0]
   2ee5a:	2324      	movs	r3, #36	; 0x24
   2ee5c:	18fb      	adds	r3, r7, r3
   2ee5e:	2200      	movs	r2, #0
   2ee60:	605a      	str	r2, [r3, #4]
   2ee62:	2324      	movs	r3, #36	; 0x24
   2ee64:	18fb      	adds	r3, r7, r3
   2ee66:	2200      	movs	r2, #0
   2ee68:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2ee6a:	1dfb      	adds	r3, r7, #7
   2ee6c:	781b      	ldrb	r3, [r3, #0]
   2ee6e:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2ee70:	2324      	movs	r3, #36	; 0x24
   2ee72:	18fb      	adds	r3, r7, r3
   2ee74:	68ba      	ldr	r2, [r7, #8]
   2ee76:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2ee78:	68fb      	ldr	r3, [r7, #12]
   2ee7a:	6a1b      	ldr	r3, [r3, #32]
   2ee7c:	2b00      	cmp	r3, #0
   2ee7e:	d100      	bne.n	2ee82 <MQTTSubscribe+0x4a>
   2ee80:	e088      	b.n	2ef94 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2ee82:	2330      	movs	r3, #48	; 0x30
   2ee84:	18fb      	adds	r3, r7, r3
   2ee86:	0018      	movs	r0, r3
   2ee88:	4b47      	ldr	r3, [pc, #284]	; (2efa8 <MQTTSubscribe+0x170>)
   2ee8a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2ee8c:	68fb      	ldr	r3, [r7, #12]
   2ee8e:	685a      	ldr	r2, [r3, #4]
   2ee90:	2330      	movs	r3, #48	; 0x30
   2ee92:	18fb      	adds	r3, r7, r3
   2ee94:	0011      	movs	r1, r2
   2ee96:	0018      	movs	r0, r3
   2ee98:	4b44      	ldr	r3, [pc, #272]	; (2efac <MQTTSubscribe+0x174>)
   2ee9a:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2ee9c:	68fb      	ldr	r3, [r7, #12]
   2ee9e:	691c      	ldr	r4, [r3, #16]
   2eea0:	68fb      	ldr	r3, [r7, #12]
   2eea2:	689b      	ldr	r3, [r3, #8]
   2eea4:	001d      	movs	r5, r3
   2eea6:	68fb      	ldr	r3, [r7, #12]
   2eea8:	0018      	movs	r0, r3
   2eeaa:	4b41      	ldr	r3, [pc, #260]	; (2efb0 <MQTTSubscribe+0x178>)
   2eeac:	4798      	blx	r3
   2eeae:	0003      	movs	r3, r0
   2eeb0:	b29a      	uxth	r2, r3
   2eeb2:	2320      	movs	r3, #32
   2eeb4:	18fb      	adds	r3, r7, r3
   2eeb6:	9302      	str	r3, [sp, #8]
   2eeb8:	2324      	movs	r3, #36	; 0x24
   2eeba:	18fb      	adds	r3, r7, r3
   2eebc:	9301      	str	r3, [sp, #4]
   2eebe:	2301      	movs	r3, #1
   2eec0:	9300      	str	r3, [sp, #0]
   2eec2:	0013      	movs	r3, r2
   2eec4:	2200      	movs	r2, #0
   2eec6:	0029      	movs	r1, r5
   2eec8:	0020      	movs	r0, r4
   2eeca:	4c3a      	ldr	r4, [pc, #232]	; (2efb4 <MQTTSubscribe+0x17c>)
   2eecc:	47a0      	blx	r4
   2eece:	0003      	movs	r3, r0
   2eed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2eed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2eed4:	2b00      	cmp	r3, #0
   2eed6:	dd5f      	ble.n	2ef98 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2eed8:	2330      	movs	r3, #48	; 0x30
   2eeda:	18fa      	adds	r2, r7, r3
   2eedc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2eede:	68fb      	ldr	r3, [r7, #12]
   2eee0:	0018      	movs	r0, r3
   2eee2:	4b35      	ldr	r3, [pc, #212]	; (2efb8 <MQTTSubscribe+0x180>)
   2eee4:	4798      	blx	r3
   2eee6:	0003      	movs	r3, r0
   2eee8:	647b      	str	r3, [r7, #68]	; 0x44
   2eeea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2eeec:	2b00      	cmp	r3, #0
   2eeee:	d155      	bne.n	2ef9c <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2eef0:	2330      	movs	r3, #48	; 0x30
   2eef2:	18fa      	adds	r2, r7, r3
   2eef4:	68fb      	ldr	r3, [r7, #12]
   2eef6:	2109      	movs	r1, #9
   2eef8:	0018      	movs	r0, r3
   2eefa:	4b30      	ldr	r3, [pc, #192]	; (2efbc <MQTTSubscribe+0x184>)
   2eefc:	4798      	blx	r3
   2eefe:	0003      	movs	r3, r0
   2ef00:	2b09      	cmp	r3, #9
   2ef02:	d143      	bne.n	2ef8c <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2ef04:	2300      	movs	r3, #0
   2ef06:	61fb      	str	r3, [r7, #28]
   2ef08:	2301      	movs	r3, #1
   2ef0a:	425b      	negs	r3, r3
   2ef0c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2ef0e:	68fb      	ldr	r3, [r7, #12]
   2ef10:	695a      	ldr	r2, [r3, #20]
   2ef12:	68fb      	ldr	r3, [r7, #12]
   2ef14:	68db      	ldr	r3, [r3, #12]
   2ef16:	001c      	movs	r4, r3
   2ef18:	2318      	movs	r3, #24
   2ef1a:	18fb      	adds	r3, r7, r3
   2ef1c:	211c      	movs	r1, #28
   2ef1e:	1879      	adds	r1, r7, r1
   2ef20:	2016      	movs	r0, #22
   2ef22:	1838      	adds	r0, r7, r0
   2ef24:	9401      	str	r4, [sp, #4]
   2ef26:	9200      	str	r2, [sp, #0]
   2ef28:	000a      	movs	r2, r1
   2ef2a:	2101      	movs	r1, #1
   2ef2c:	4c24      	ldr	r4, [pc, #144]	; (2efc0 <MQTTSubscribe+0x188>)
   2ef2e:	47a0      	blx	r4
   2ef30:	0003      	movs	r3, r0
   2ef32:	2b01      	cmp	r3, #1
   2ef34:	d101      	bne.n	2ef3a <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2ef36:	69bb      	ldr	r3, [r7, #24]
   2ef38:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2ef3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2ef3c:	2b80      	cmp	r3, #128	; 0x80
   2ef3e:	d02e      	beq.n	2ef9e <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ef40:	2300      	movs	r3, #0
   2ef42:	643b      	str	r3, [r7, #64]	; 0x40
   2ef44:	e01e      	b.n	2ef84 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2ef46:	68fa      	ldr	r2, [r7, #12]
   2ef48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ef4a:	3304      	adds	r3, #4
   2ef4c:	00db      	lsls	r3, r3, #3
   2ef4e:	18d3      	adds	r3, r2, r3
   2ef50:	3304      	adds	r3, #4
   2ef52:	681b      	ldr	r3, [r3, #0]
   2ef54:	2b00      	cmp	r3, #0
   2ef56:	d112      	bne.n	2ef7e <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2ef58:	68fa      	ldr	r2, [r7, #12]
   2ef5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ef5c:	3304      	adds	r3, #4
   2ef5e:	00db      	lsls	r3, r3, #3
   2ef60:	18d3      	adds	r3, r2, r3
   2ef62:	3304      	adds	r3, #4
   2ef64:	68ba      	ldr	r2, [r7, #8]
   2ef66:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2ef68:	68fa      	ldr	r2, [r7, #12]
   2ef6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ef6c:	3304      	adds	r3, #4
   2ef6e:	00db      	lsls	r3, r3, #3
   2ef70:	18d3      	adds	r3, r2, r3
   2ef72:	3308      	adds	r3, #8
   2ef74:	683a      	ldr	r2, [r7, #0]
   2ef76:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2ef78:	2300      	movs	r3, #0
   2ef7a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2ef7c:	e00f      	b.n	2ef9e <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ef7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ef80:	3301      	adds	r3, #1
   2ef82:	643b      	str	r3, [r7, #64]	; 0x40
   2ef84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ef86:	2b04      	cmp	r3, #4
   2ef88:	dddd      	ble.n	2ef46 <MQTTSubscribe+0x10e>
   2ef8a:	e008      	b.n	2ef9e <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2ef8c:	2301      	movs	r3, #1
   2ef8e:	425b      	negs	r3, r3
   2ef90:	647b      	str	r3, [r7, #68]	; 0x44
   2ef92:	e004      	b.n	2ef9e <MQTTSubscribe+0x166>
		goto exit;
   2ef94:	46c0      	nop			; (mov r8, r8)
   2ef96:	e002      	b.n	2ef9e <MQTTSubscribe+0x166>
        goto exit;
   2ef98:	46c0      	nop			; (mov r8, r8)
   2ef9a:	e000      	b.n	2ef9e <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2ef9c:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ef9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2efa0:	0018      	movs	r0, r3
   2efa2:	46bd      	mov	sp, r7
   2efa4:	b012      	add	sp, #72	; 0x48
   2efa6:	bdb0      	pop	{r4, r5, r7, pc}
   2efa8:	0002f3cd 	.word	0x0002f3cd
   2efac:	0002f355 	.word	0x0002f355
   2efb0:	0002e515 	.word	0x0002e515
   2efb4:	00030905 	.word	0x00030905
   2efb8:	0002e545 	.word	0x0002e545
   2efbc:	0002ecad 	.word	0x0002ecad
   2efc0:	00030a55 	.word	0x00030a55

0002efc4 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2efc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2efc6:	46ce      	mov	lr, r9
   2efc8:	4647      	mov	r7, r8
   2efca:	b580      	push	{r7, lr}
   2efcc:	b097      	sub	sp, #92	; 0x5c
   2efce:	af08      	add	r7, sp, #32
   2efd0:	60f8      	str	r0, [r7, #12]
   2efd2:	60b9      	str	r1, [r7, #8]
   2efd4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2efd6:	2301      	movs	r3, #1
   2efd8:	425b      	negs	r3, r3
   2efda:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2efdc:	2318      	movs	r3, #24
   2efde:	18fb      	adds	r3, r7, r3
   2efe0:	2200      	movs	r2, #0
   2efe2:	601a      	str	r2, [r3, #0]
   2efe4:	2318      	movs	r3, #24
   2efe6:	18fb      	adds	r3, r7, r3
   2efe8:	2200      	movs	r2, #0
   2efea:	605a      	str	r2, [r3, #4]
   2efec:	2318      	movs	r3, #24
   2efee:	18fb      	adds	r3, r7, r3
   2eff0:	2200      	movs	r2, #0
   2eff2:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2eff4:	2318      	movs	r3, #24
   2eff6:	18fb      	adds	r3, r7, r3
   2eff8:	68ba      	ldr	r2, [r7, #8]
   2effa:	601a      	str	r2, [r3, #0]
    int len = 0;
   2effc:	2300      	movs	r3, #0
   2effe:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2f000:	68fb      	ldr	r3, [r7, #12]
   2f002:	6a1b      	ldr	r3, [r3, #32]
   2f004:	2b00      	cmp	r3, #0
   2f006:	d100      	bne.n	2f00a <MQTTPublish+0x46>
   2f008:	e0a0      	b.n	2f14c <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2f00a:	2324      	movs	r3, #36	; 0x24
   2f00c:	18fb      	adds	r3, r7, r3
   2f00e:	0018      	movs	r0, r3
   2f010:	4b55      	ldr	r3, [pc, #340]	; (2f168 <MQTTPublish+0x1a4>)
   2f012:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f014:	68fb      	ldr	r3, [r7, #12]
   2f016:	685a      	ldr	r2, [r3, #4]
   2f018:	2324      	movs	r3, #36	; 0x24
   2f01a:	18fb      	adds	r3, r7, r3
   2f01c:	0011      	movs	r1, r2
   2f01e:	0018      	movs	r0, r3
   2f020:	4b52      	ldr	r3, [pc, #328]	; (2f16c <MQTTPublish+0x1a8>)
   2f022:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2f024:	687b      	ldr	r3, [r7, #4]
   2f026:	781b      	ldrb	r3, [r3, #0]
   2f028:	2b01      	cmp	r3, #1
   2f02a:	d003      	beq.n	2f034 <MQTTPublish+0x70>
   2f02c:	687b      	ldr	r3, [r7, #4]
   2f02e:	781b      	ldrb	r3, [r3, #0]
   2f030:	2b02      	cmp	r3, #2
   2f032:	d107      	bne.n	2f044 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2f034:	68fb      	ldr	r3, [r7, #12]
   2f036:	0018      	movs	r0, r3
   2f038:	4b4d      	ldr	r3, [pc, #308]	; (2f170 <MQTTPublish+0x1ac>)
   2f03a:	4798      	blx	r3
   2f03c:	0003      	movs	r3, r0
   2f03e:	b29a      	uxth	r2, r3
   2f040:	687b      	ldr	r3, [r7, #4]
   2f042:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2f044:	68fb      	ldr	r3, [r7, #12]
   2f046:	691b      	ldr	r3, [r3, #16]
   2f048:	469c      	mov	ip, r3
   2f04a:	68fb      	ldr	r3, [r7, #12]
   2f04c:	689b      	ldr	r3, [r3, #8]
   2f04e:	001d      	movs	r5, r3
   2f050:	687b      	ldr	r3, [r7, #4]
   2f052:	781b      	ldrb	r3, [r3, #0]
   2f054:	001e      	movs	r6, r3
   2f056:	687b      	ldr	r3, [r7, #4]
   2f058:	785b      	ldrb	r3, [r3, #1]
   2f05a:	4698      	mov	r8, r3
   2f05c:	687b      	ldr	r3, [r7, #4]
   2f05e:	889b      	ldrh	r3, [r3, #4]
   2f060:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2f062:	687b      	ldr	r3, [r7, #4]
   2f064:	689a      	ldr	r2, [r3, #8]
   2f066:	687b      	ldr	r3, [r7, #4]
   2f068:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2f06a:	9306      	str	r3, [sp, #24]
   2f06c:	9205      	str	r2, [sp, #20]
   2f06e:	2318      	movs	r3, #24
   2f070:	18fa      	adds	r2, r7, r3
   2f072:	2308      	movs	r3, #8
   2f074:	446b      	add	r3, sp
   2f076:	ca13      	ldmia	r2!, {r0, r1, r4}
   2f078:	c313      	stmia	r3!, {r0, r1, r4}
   2f07a:	464b      	mov	r3, r9
   2f07c:	9301      	str	r3, [sp, #4]
   2f07e:	4643      	mov	r3, r8
   2f080:	9300      	str	r3, [sp, #0]
   2f082:	0033      	movs	r3, r6
   2f084:	2200      	movs	r2, #0
   2f086:	0029      	movs	r1, r5
   2f088:	4660      	mov	r0, ip
   2f08a:	4c3a      	ldr	r4, [pc, #232]	; (2f174 <MQTTPublish+0x1b0>)
   2f08c:	47a0      	blx	r4
   2f08e:	0003      	movs	r3, r0
   2f090:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2f092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f094:	2b00      	cmp	r3, #0
   2f096:	dd5b      	ble.n	2f150 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2f098:	2324      	movs	r3, #36	; 0x24
   2f09a:	18fa      	adds	r2, r7, r3
   2f09c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2f09e:	68fb      	ldr	r3, [r7, #12]
   2f0a0:	0018      	movs	r0, r3
   2f0a2:	4b35      	ldr	r3, [pc, #212]	; (2f178 <MQTTPublish+0x1b4>)
   2f0a4:	4798      	blx	r3
   2f0a6:	0003      	movs	r3, r0
   2f0a8:	637b      	str	r3, [r7, #52]	; 0x34
   2f0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f0ac:	2b00      	cmp	r3, #0
   2f0ae:	d151      	bne.n	2f154 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2f0b0:	687b      	ldr	r3, [r7, #4]
   2f0b2:	781b      	ldrb	r3, [r3, #0]
   2f0b4:	2b01      	cmp	r3, #1
   2f0b6:	d122      	bne.n	2f0fe <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2f0b8:	2324      	movs	r3, #36	; 0x24
   2f0ba:	18fa      	adds	r2, r7, r3
   2f0bc:	68fb      	ldr	r3, [r7, #12]
   2f0be:	2104      	movs	r1, #4
   2f0c0:	0018      	movs	r0, r3
   2f0c2:	4b2e      	ldr	r3, [pc, #184]	; (2f17c <MQTTPublish+0x1b8>)
   2f0c4:	4798      	blx	r3
   2f0c6:	0003      	movs	r3, r0
   2f0c8:	2b04      	cmp	r3, #4
   2f0ca:	d114      	bne.n	2f0f6 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f0cc:	68fb      	ldr	r3, [r7, #12]
   2f0ce:	695c      	ldr	r4, [r3, #20]
   2f0d0:	68fb      	ldr	r3, [r7, #12]
   2f0d2:	68db      	ldr	r3, [r3, #12]
   2f0d4:	2216      	movs	r2, #22
   2f0d6:	18ba      	adds	r2, r7, r2
   2f0d8:	2115      	movs	r1, #21
   2f0da:	1879      	adds	r1, r7, r1
   2f0dc:	2014      	movs	r0, #20
   2f0de:	1838      	adds	r0, r7, r0
   2f0e0:	9300      	str	r3, [sp, #0]
   2f0e2:	0023      	movs	r3, r4
   2f0e4:	4c26      	ldr	r4, [pc, #152]	; (2f180 <MQTTPublish+0x1bc>)
   2f0e6:	47a0      	blx	r4
   2f0e8:	0003      	movs	r3, r0
   2f0ea:	2b01      	cmp	r3, #1
   2f0ec:	d033      	beq.n	2f156 <MQTTPublish+0x192>
                rc = FAILURE;
   2f0ee:	2301      	movs	r3, #1
   2f0f0:	425b      	negs	r3, r3
   2f0f2:	637b      	str	r3, [r7, #52]	; 0x34
   2f0f4:	e02f      	b.n	2f156 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2f0f6:	2301      	movs	r3, #1
   2f0f8:	425b      	negs	r3, r3
   2f0fa:	637b      	str	r3, [r7, #52]	; 0x34
   2f0fc:	e02b      	b.n	2f156 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2f0fe:	687b      	ldr	r3, [r7, #4]
   2f100:	781b      	ldrb	r3, [r3, #0]
   2f102:	2b02      	cmp	r3, #2
   2f104:	d127      	bne.n	2f156 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2f106:	2324      	movs	r3, #36	; 0x24
   2f108:	18fa      	adds	r2, r7, r3
   2f10a:	68fb      	ldr	r3, [r7, #12]
   2f10c:	2107      	movs	r1, #7
   2f10e:	0018      	movs	r0, r3
   2f110:	4b1a      	ldr	r3, [pc, #104]	; (2f17c <MQTTPublish+0x1b8>)
   2f112:	4798      	blx	r3
   2f114:	0003      	movs	r3, r0
   2f116:	2b07      	cmp	r3, #7
   2f118:	d114      	bne.n	2f144 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f11a:	68fb      	ldr	r3, [r7, #12]
   2f11c:	695c      	ldr	r4, [r3, #20]
   2f11e:	68fb      	ldr	r3, [r7, #12]
   2f120:	68db      	ldr	r3, [r3, #12]
   2f122:	2212      	movs	r2, #18
   2f124:	18ba      	adds	r2, r7, r2
   2f126:	2111      	movs	r1, #17
   2f128:	1879      	adds	r1, r7, r1
   2f12a:	2010      	movs	r0, #16
   2f12c:	1838      	adds	r0, r7, r0
   2f12e:	9300      	str	r3, [sp, #0]
   2f130:	0023      	movs	r3, r4
   2f132:	4c13      	ldr	r4, [pc, #76]	; (2f180 <MQTTPublish+0x1bc>)
   2f134:	47a0      	blx	r4
   2f136:	0003      	movs	r3, r0
   2f138:	2b01      	cmp	r3, #1
   2f13a:	d00c      	beq.n	2f156 <MQTTPublish+0x192>
                rc = FAILURE;
   2f13c:	2301      	movs	r3, #1
   2f13e:	425b      	negs	r3, r3
   2f140:	637b      	str	r3, [r7, #52]	; 0x34
   2f142:	e008      	b.n	2f156 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2f144:	2301      	movs	r3, #1
   2f146:	425b      	negs	r3, r3
   2f148:	637b      	str	r3, [r7, #52]	; 0x34
   2f14a:	e004      	b.n	2f156 <MQTTPublish+0x192>
		goto exit;
   2f14c:	46c0      	nop			; (mov r8, r8)
   2f14e:	e002      	b.n	2f156 <MQTTPublish+0x192>
        goto exit;
   2f150:	46c0      	nop			; (mov r8, r8)
   2f152:	e000      	b.n	2f156 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2f154:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2f156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2f158:	0018      	movs	r0, r3
   2f15a:	46bd      	mov	sp, r7
   2f15c:	b00f      	add	sp, #60	; 0x3c
   2f15e:	bc0c      	pop	{r2, r3}
   2f160:	4690      	mov	r8, r2
   2f162:	4699      	mov	r9, r3
   2f164:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f166:	46c0      	nop			; (mov r8, r8)
   2f168:	0002f3cd 	.word	0x0002f3cd
   2f16c:	0002f355 	.word	0x0002f355
   2f170:	0002e515 	.word	0x0002e515
   2f174:	00030651 	.word	0x00030651
   2f178:	0002e545 	.word	0x0002e545
   2f17c:	0002ecad 	.word	0x0002ecad
   2f180:	000300c9 	.word	0x000300c9

0002f184 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2f184:	b580      	push	{r7, lr}
   2f186:	b088      	sub	sp, #32
   2f188:	af00      	add	r7, sp, #0
   2f18a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2f18c:	2301      	movs	r3, #1
   2f18e:	425b      	negs	r3, r3
   2f190:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2f192:	2300      	movs	r3, #0
   2f194:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2f196:	230c      	movs	r3, #12
   2f198:	18fb      	adds	r3, r7, r3
   2f19a:	0018      	movs	r0, r3
   2f19c:	4b13      	ldr	r3, [pc, #76]	; (2f1ec <MQTTDisconnect+0x68>)
   2f19e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f1a0:	687b      	ldr	r3, [r7, #4]
   2f1a2:	685a      	ldr	r2, [r3, #4]
   2f1a4:	230c      	movs	r3, #12
   2f1a6:	18fb      	adds	r3, r7, r3
   2f1a8:	0011      	movs	r1, r2
   2f1aa:	0018      	movs	r0, r3
   2f1ac:	4b10      	ldr	r3, [pc, #64]	; (2f1f0 <MQTTDisconnect+0x6c>)
   2f1ae:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2f1b0:	687b      	ldr	r3, [r7, #4]
   2f1b2:	691a      	ldr	r2, [r3, #16]
   2f1b4:	687b      	ldr	r3, [r7, #4]
   2f1b6:	689b      	ldr	r3, [r3, #8]
   2f1b8:	0019      	movs	r1, r3
   2f1ba:	0010      	movs	r0, r2
   2f1bc:	4b0d      	ldr	r3, [pc, #52]	; (2f1f4 <MQTTDisconnect+0x70>)
   2f1be:	4798      	blx	r3
   2f1c0:	0003      	movs	r3, r0
   2f1c2:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2f1c4:	69bb      	ldr	r3, [r7, #24]
   2f1c6:	2b00      	cmp	r3, #0
   2f1c8:	dd08      	ble.n	2f1dc <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2f1ca:	230c      	movs	r3, #12
   2f1cc:	18fa      	adds	r2, r7, r3
   2f1ce:	69b9      	ldr	r1, [r7, #24]
   2f1d0:	687b      	ldr	r3, [r7, #4]
   2f1d2:	0018      	movs	r0, r3
   2f1d4:	4b08      	ldr	r3, [pc, #32]	; (2f1f8 <MQTTDisconnect+0x74>)
   2f1d6:	4798      	blx	r3
   2f1d8:	0003      	movs	r3, r0
   2f1da:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2f1dc:	687b      	ldr	r3, [r7, #4]
   2f1de:	2200      	movs	r2, #0
   2f1e0:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2f1e2:	69fb      	ldr	r3, [r7, #28]
}
   2f1e4:	0018      	movs	r0, r3
   2f1e6:	46bd      	mov	sp, r7
   2f1e8:	b008      	add	sp, #32
   2f1ea:	bd80      	pop	{r7, pc}
   2f1ec:	0002f3cd 	.word	0x0002f3cd
   2f1f0:	0002f355 	.word	0x0002f355
   2f1f4:	0002ff7d 	.word	0x0002ff7d
   2f1f8:	0002e545 	.word	0x0002e545

0002f1fc <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2f1fc:	b580      	push	{r7, lr}
   2f1fe:	b084      	sub	sp, #16
   2f200:	af00      	add	r7, sp, #0
   2f202:	0002      	movs	r2, r0
   2f204:	1dfb      	adds	r3, r7, #7
   2f206:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f208:	2300      	movs	r3, #0
   2f20a:	60fb      	str	r3, [r7, #12]
   2f20c:	e01c      	b.n	2f248 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2f20e:	4a12      	ldr	r2, [pc, #72]	; (2f258 <isMQTTSocket+0x5c>)
   2f210:	68fb      	ldr	r3, [r7, #12]
   2f212:	2164      	movs	r1, #100	; 0x64
   2f214:	434b      	muls	r3, r1
   2f216:	18d3      	adds	r3, r2, r3
   2f218:	3360      	adds	r3, #96	; 0x60
   2f21a:	681b      	ldr	r3, [r3, #0]
   2f21c:	2b00      	cmp	r3, #0
   2f21e:	d010      	beq.n	2f242 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2f220:	4a0d      	ldr	r2, [pc, #52]	; (2f258 <isMQTTSocket+0x5c>)
   2f222:	68fb      	ldr	r3, [r7, #12]
   2f224:	2164      	movs	r1, #100	; 0x64
   2f226:	434b      	muls	r3, r1
   2f228:	18d3      	adds	r3, r2, r3
   2f22a:	3360      	adds	r3, #96	; 0x60
   2f22c:	681b      	ldr	r3, [r3, #0]
   2f22e:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2f230:	68bb      	ldr	r3, [r7, #8]
   2f232:	6a1a      	ldr	r2, [r3, #32]
   2f234:	1dfb      	adds	r3, r7, #7
   2f236:	781b      	ldrb	r3, [r3, #0]
   2f238:	b25b      	sxtb	r3, r3
   2f23a:	429a      	cmp	r2, r3
   2f23c:	d101      	bne.n	2f242 <isMQTTSocket+0x46>
				return true;
   2f23e:	2301      	movs	r3, #1
   2f240:	e006      	b.n	2f250 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f242:	68fb      	ldr	r3, [r7, #12]
   2f244:	3301      	adds	r3, #1
   2f246:	60fb      	str	r3, [r7, #12]
   2f248:	68fb      	ldr	r3, [r7, #12]
   2f24a:	2b06      	cmp	r3, #6
   2f24c:	d9df      	bls.n	2f20e <isMQTTSocket+0x12>
		}
	}
	return false;
   2f24e:	2300      	movs	r3, #0
}
   2f250:	0018      	movs	r0, r3
   2f252:	46bd      	mov	sp, r7
   2f254:	b004      	add	sp, #16
   2f256:	bd80      	pop	{r7, pc}
   2f258:	200042b4 	.word	0x200042b4

0002f25c <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2f25c:	b580      	push	{r7, lr}
   2f25e:	b082      	sub	sp, #8
   2f260:	af00      	add	r7, sp, #0
   2f262:	6078      	str	r0, [r7, #4]
   2f264:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2f266:	4b0d      	ldr	r3, [pc, #52]	; (2f29c <dnsResolveCallback+0x40>)
   2f268:	781b      	ldrb	r3, [r3, #0]
   2f26a:	2201      	movs	r2, #1
   2f26c:	4053      	eors	r3, r2
   2f26e:	b2db      	uxtb	r3, r3
   2f270:	2b00      	cmp	r3, #0
   2f272:	d00e      	beq.n	2f292 <dnsResolveCallback+0x36>
   2f274:	4b0a      	ldr	r3, [pc, #40]	; (2f2a0 <dnsResolveCallback+0x44>)
   2f276:	681b      	ldr	r3, [r3, #0]
   2f278:	687a      	ldr	r2, [r7, #4]
   2f27a:	0011      	movs	r1, r2
   2f27c:	0018      	movs	r0, r3
   2f27e:	4b09      	ldr	r3, [pc, #36]	; (2f2a4 <dnsResolveCallback+0x48>)
   2f280:	4798      	blx	r3
   2f282:	1e03      	subs	r3, r0, #0
   2f284:	d105      	bne.n	2f292 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2f286:	683a      	ldr	r2, [r7, #0]
   2f288:	4b07      	ldr	r3, [pc, #28]	; (2f2a8 <dnsResolveCallback+0x4c>)
   2f28a:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2f28c:	4b03      	ldr	r3, [pc, #12]	; (2f29c <dnsResolveCallback+0x40>)
   2f28e:	2201      	movs	r2, #1
   2f290:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2f292:	46c0      	nop			; (mov r8, r8)
   2f294:	46bd      	mov	sp, r7
   2f296:	b002      	add	sp, #8
   2f298:	bd80      	pop	{r7, pc}
   2f29a:	46c0      	nop			; (mov r8, r8)
   2f29c:	200041a4 	.word	0x200041a4
   2f2a0:	200042b0 	.word	0x200042b0
   2f2a4:	00034db7 	.word	0x00034db7
   2f2a8:	2000419c 	.word	0x2000419c

0002f2ac <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2f2ac:	b580      	push	{r7, lr}
   2f2ae:	b084      	sub	sp, #16
   2f2b0:	af00      	add	r7, sp, #0
   2f2b2:	603a      	str	r2, [r7, #0]
   2f2b4:	1dfb      	adds	r3, r7, #7
   2f2b6:	1c02      	adds	r2, r0, #0
   2f2b8:	701a      	strb	r2, [r3, #0]
   2f2ba:	1dbb      	adds	r3, r7, #6
   2f2bc:	1c0a      	adds	r2, r1, #0
   2f2be:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2f2c0:	1dfb      	adds	r3, r7, #7
   2f2c2:	781b      	ldrb	r3, [r3, #0]
   2f2c4:	b25b      	sxtb	r3, r3
   2f2c6:	0018      	movs	r0, r3
   2f2c8:	4b12      	ldr	r3, [pc, #72]	; (2f314 <tcpClientSocketEventHandler+0x68>)
   2f2ca:	4798      	blx	r3
   2f2cc:	1e03      	subs	r3, r0, #0
   2f2ce:	d01c      	beq.n	2f30a <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2f2d0:	1dbb      	adds	r3, r7, #6
   2f2d2:	781b      	ldrb	r3, [r3, #0]
   2f2d4:	2b06      	cmp	r3, #6
   2f2d6:	d00c      	beq.n	2f2f2 <tcpClientSocketEventHandler+0x46>
   2f2d8:	2b07      	cmp	r3, #7
   2f2da:	d006      	beq.n	2f2ea <tcpClientSocketEventHandler+0x3e>
   2f2dc:	2b05      	cmp	r3, #5
   2f2de:	d000      	beq.n	2f2e2 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2f2e0:	e013      	b.n	2f30a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2f2e2:	4b0d      	ldr	r3, [pc, #52]	; (2f318 <tcpClientSocketEventHandler+0x6c>)
   2f2e4:	2201      	movs	r2, #1
   2f2e6:	701a      	strb	r2, [r3, #0]
			break;
   2f2e8:	e00f      	b.n	2f30a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2f2ea:	4b0c      	ldr	r3, [pc, #48]	; (2f31c <tcpClientSocketEventHandler+0x70>)
   2f2ec:	2201      	movs	r2, #1
   2f2ee:	701a      	strb	r2, [r3, #0]
			break;
   2f2f0:	e00b      	b.n	2f30a <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2f2f2:	683b      	ldr	r3, [r7, #0]
   2f2f4:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2f2f6:	68fb      	ldr	r3, [r7, #12]
   2f2f8:	2204      	movs	r2, #4
   2f2fa:	5e9b      	ldrsh	r3, [r3, r2]
   2f2fc:	001a      	movs	r2, r3
   2f2fe:	4b08      	ldr	r3, [pc, #32]	; (2f320 <tcpClientSocketEventHandler+0x74>)
   2f300:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2f302:	4b08      	ldr	r3, [pc, #32]	; (2f324 <tcpClientSocketEventHandler+0x78>)
   2f304:	2201      	movs	r2, #1
   2f306:	701a      	strb	r2, [r3, #0]
			break;
   2f308:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2f30a:	46c0      	nop			; (mov r8, r8)
   2f30c:	46bd      	mov	sp, r7
   2f30e:	b004      	add	sp, #16
   2f310:	bd80      	pop	{r7, pc}
   2f312:	46c0      	nop			; (mov r8, r8)
   2f314:	0002f1fd 	.word	0x0002f1fd
   2f318:	200041a5 	.word	0x200041a5
   2f31c:	200041a6 	.word	0x200041a6
   2f320:	200041a0 	.word	0x200041a0
   2f324:	200041a7 	.word	0x200041a7

0002f328 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2f328:	b580      	push	{r7, lr}
   2f32a:	b082      	sub	sp, #8
   2f32c:	af00      	add	r7, sp, #0
   2f32e:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2f330:	687b      	ldr	r3, [r7, #4]
   2f332:	3304      	adds	r3, #4
   2f334:	687a      	ldr	r2, [r7, #4]
   2f336:	0011      	movs	r1, r2
   2f338:	0018      	movs	r0, r3
   2f33a:	4b05      	ldr	r3, [pc, #20]	; (2f350 <TimerIsExpired+0x28>)
   2f33c:	4798      	blx	r3
   2f33e:	0003      	movs	r3, r0
   2f340:	3b01      	subs	r3, #1
   2f342:	425a      	negs	r2, r3
   2f344:	4153      	adcs	r3, r2
   2f346:	b2db      	uxtb	r3, r3
}
   2f348:	0018      	movs	r0, r3
   2f34a:	46bd      	mov	sp, r7
   2f34c:	b002      	add	sp, #8
   2f34e:	bd80      	pop	{r7, pc}
   2f350:	0001cbc1 	.word	0x0001cbc1

0002f354 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2f354:	b580      	push	{r7, lr}
   2f356:	b082      	sub	sp, #8
   2f358:	af00      	add	r7, sp, #0
   2f35a:	6078      	str	r0, [r7, #4]
   2f35c:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2f35e:	687b      	ldr	r3, [r7, #4]
   2f360:	683a      	ldr	r2, [r7, #0]
   2f362:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2f364:	687b      	ldr	r3, [r7, #4]
   2f366:	3304      	adds	r3, #4
   2f368:	0018      	movs	r0, r3
   2f36a:	4b03      	ldr	r3, [pc, #12]	; (2f378 <TimerCountdownMS+0x24>)
   2f36c:	4798      	blx	r3
}
   2f36e:	46c0      	nop			; (mov r8, r8)
   2f370:	46bd      	mov	sp, r7
   2f372:	b002      	add	sp, #8
   2f374:	bd80      	pop	{r7, pc}
   2f376:	46c0      	nop			; (mov r8, r8)
   2f378:	0001cb55 	.word	0x0001cb55

0002f37c <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2f37c:	b580      	push	{r7, lr}
   2f37e:	b082      	sub	sp, #8
   2f380:	af00      	add	r7, sp, #0
   2f382:	6078      	str	r0, [r7, #4]
   2f384:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2f386:	683b      	ldr	r3, [r7, #0]
   2f388:	22fa      	movs	r2, #250	; 0xfa
   2f38a:	0092      	lsls	r2, r2, #2
   2f38c:	435a      	muls	r2, r3
   2f38e:	687b      	ldr	r3, [r7, #4]
   2f390:	0011      	movs	r1, r2
   2f392:	0018      	movs	r0, r3
   2f394:	4b02      	ldr	r3, [pc, #8]	; (2f3a0 <TimerCountdown+0x24>)
   2f396:	4798      	blx	r3
}
   2f398:	46c0      	nop			; (mov r8, r8)
   2f39a:	46bd      	mov	sp, r7
   2f39c:	b002      	add	sp, #8
   2f39e:	bd80      	pop	{r7, pc}
   2f3a0:	0002f355 	.word	0x0002f355

0002f3a4 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2f3a4:	b580      	push	{r7, lr}
   2f3a6:	b082      	sub	sp, #8
   2f3a8:	af00      	add	r7, sp, #0
   2f3aa:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2f3ac:	687b      	ldr	r3, [r7, #4]
   2f3ae:	3304      	adds	r3, #4
   2f3b0:	687a      	ldr	r2, [r7, #4]
   2f3b2:	0011      	movs	r1, r2
   2f3b4:	0018      	movs	r0, r3
   2f3b6:	4b04      	ldr	r3, [pc, #16]	; (2f3c8 <TimerLeftMS+0x24>)
   2f3b8:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2f3ba:	687b      	ldr	r3, [r7, #4]
   2f3bc:	681b      	ldr	r3, [r3, #0]
}
   2f3be:	0018      	movs	r0, r3
   2f3c0:	46bd      	mov	sp, r7
   2f3c2:	b002      	add	sp, #8
   2f3c4:	bd80      	pop	{r7, pc}
   2f3c6:	46c0      	nop			; (mov r8, r8)
   2f3c8:	0001cbc1 	.word	0x0001cbc1

0002f3cc <TimerInit>:


void TimerInit(Timer* timer) {
   2f3cc:	b580      	push	{r7, lr}
   2f3ce:	b082      	sub	sp, #8
   2f3d0:	af00      	add	r7, sp, #0
   2f3d2:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2f3d4:	687b      	ldr	r3, [r7, #4]
   2f3d6:	2200      	movs	r2, #0
   2f3d8:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2f3da:	687b      	ldr	r3, [r7, #4]
   2f3dc:	3304      	adds	r3, #4
   2f3de:	2208      	movs	r2, #8
   2f3e0:	2100      	movs	r1, #0
   2f3e2:	0018      	movs	r0, r3
   2f3e4:	4b02      	ldr	r3, [pc, #8]	; (2f3f0 <TimerInit+0x24>)
   2f3e6:	4798      	blx	r3
}
   2f3e8:	46c0      	nop			; (mov r8, r8)
   2f3ea:	46bd      	mov	sp, r7
   2f3ec:	b002      	add	sp, #8
   2f3ee:	bd80      	pop	{r7, pc}
   2f3f0:	00034a5f 	.word	0x00034a5f

0002f3f4 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2f3f4:	b590      	push	{r4, r7, lr}
   2f3f6:	b085      	sub	sp, #20
   2f3f8:	af00      	add	r7, sp, #0
   2f3fa:	60f8      	str	r0, [r7, #12]
   2f3fc:	60b9      	str	r1, [r7, #8]
   2f3fe:	607a      	str	r2, [r7, #4]
   2f400:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2f402:	683b      	ldr	r3, [r7, #0]
   2f404:	2b00      	cmp	r3, #0
   2f406:	d101      	bne.n	2f40c <WINC1500_read+0x18>
   2f408:	230a      	movs	r3, #10
   2f40a:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2f40c:	4b2c      	ldr	r3, [pc, #176]	; (2f4c0 <WINC1500_read+0xcc>)
   2f40e:	681b      	ldr	r3, [r3, #0]
   2f410:	2b00      	cmp	r3, #0
   2f412:	d131      	bne.n	2f478 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2f414:	4b2b      	ldr	r3, [pc, #172]	; (2f4c4 <WINC1500_read+0xd0>)
   2f416:	2200      	movs	r2, #0
   2f418:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2f41a:	68fb      	ldr	r3, [r7, #12]
   2f41c:	681b      	ldr	r3, [r3, #0]
   2f41e:	b258      	sxtb	r0, r3
   2f420:	683c      	ldr	r4, [r7, #0]
   2f422:	2380      	movs	r3, #128	; 0x80
   2f424:	005a      	lsls	r2, r3, #1
   2f426:	4928      	ldr	r1, [pc, #160]	; (2f4c8 <WINC1500_read+0xd4>)
   2f428:	0023      	movs	r3, r4
   2f42a:	4c28      	ldr	r4, [pc, #160]	; (2f4cc <WINC1500_read+0xd8>)
   2f42c:	47a0      	blx	r4
   2f42e:	1e03      	subs	r3, r0, #0
   2f430:	d005      	beq.n	2f43e <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2f432:	2301      	movs	r3, #1
   2f434:	425b      	negs	r3, r3
   2f436:	e03e      	b.n	2f4b6 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2f438:	2000      	movs	r0, #0
   2f43a:	4b25      	ldr	r3, [pc, #148]	; (2f4d0 <WINC1500_read+0xdc>)
   2f43c:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2f43e:	4b21      	ldr	r3, [pc, #132]	; (2f4c4 <WINC1500_read+0xd0>)
   2f440:	781b      	ldrb	r3, [r3, #0]
   2f442:	2201      	movs	r2, #1
   2f444:	4053      	eors	r3, r2
   2f446:	b2db      	uxtb	r3, r3
   2f448:	2b00      	cmp	r3, #0
   2f44a:	d1f5      	bne.n	2f438 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2f44c:	4b21      	ldr	r3, [pc, #132]	; (2f4d4 <WINC1500_read+0xe0>)
   2f44e:	681b      	ldr	r3, [r3, #0]
   2f450:	2b00      	cmp	r3, #0
   2f452:	dd08      	ble.n	2f466 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2f454:	4b1f      	ldr	r3, [pc, #124]	; (2f4d4 <WINC1500_read+0xe0>)
   2f456:	681b      	ldr	r3, [r3, #0]
   2f458:	001a      	movs	r2, r3
   2f45a:	4b19      	ldr	r3, [pc, #100]	; (2f4c0 <WINC1500_read+0xcc>)
   2f45c:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2f45e:	4b1e      	ldr	r3, [pc, #120]	; (2f4d8 <WINC1500_read+0xe4>)
   2f460:	2200      	movs	r2, #0
   2f462:	601a      	str	r2, [r3, #0]
   2f464:	e008      	b.n	2f478 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2f466:	4b16      	ldr	r3, [pc, #88]	; (2f4c0 <WINC1500_read+0xcc>)
   2f468:	2200      	movs	r2, #0
   2f46a:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2f46c:	4b1a      	ldr	r3, [pc, #104]	; (2f4d8 <WINC1500_read+0xe4>)
   2f46e:	2200      	movs	r2, #0
   2f470:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2f472:	4b18      	ldr	r3, [pc, #96]	; (2f4d4 <WINC1500_read+0xe0>)
   2f474:	681b      	ldr	r3, [r3, #0]
   2f476:	e01e      	b.n	2f4b6 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2f478:	4b11      	ldr	r3, [pc, #68]	; (2f4c0 <WINC1500_read+0xcc>)
   2f47a:	681b      	ldr	r3, [r3, #0]
   2f47c:	001a      	movs	r2, r3
   2f47e:	687b      	ldr	r3, [r7, #4]
   2f480:	4293      	cmp	r3, r2
   2f482:	dd02      	ble.n	2f48a <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2f484:	2301      	movs	r3, #1
   2f486:	425b      	negs	r3, r3
   2f488:	e015      	b.n	2f4b6 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2f48a:	4b13      	ldr	r3, [pc, #76]	; (2f4d8 <WINC1500_read+0xe4>)
   2f48c:	681a      	ldr	r2, [r3, #0]
   2f48e:	4b0e      	ldr	r3, [pc, #56]	; (2f4c8 <WINC1500_read+0xd4>)
   2f490:	18d1      	adds	r1, r2, r3
   2f492:	687a      	ldr	r2, [r7, #4]
   2f494:	68bb      	ldr	r3, [r7, #8]
   2f496:	0018      	movs	r0, r3
   2f498:	4b10      	ldr	r3, [pc, #64]	; (2f4dc <WINC1500_read+0xe8>)
   2f49a:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2f49c:	4b08      	ldr	r3, [pc, #32]	; (2f4c0 <WINC1500_read+0xcc>)
   2f49e:	681a      	ldr	r2, [r3, #0]
   2f4a0:	687b      	ldr	r3, [r7, #4]
   2f4a2:	1ad2      	subs	r2, r2, r3
   2f4a4:	4b06      	ldr	r3, [pc, #24]	; (2f4c0 <WINC1500_read+0xcc>)
   2f4a6:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2f4a8:	4b0b      	ldr	r3, [pc, #44]	; (2f4d8 <WINC1500_read+0xe4>)
   2f4aa:	681a      	ldr	r2, [r3, #0]
   2f4ac:	687b      	ldr	r3, [r7, #4]
   2f4ae:	18d2      	adds	r2, r2, r3
   2f4b0:	4b09      	ldr	r3, [pc, #36]	; (2f4d8 <WINC1500_read+0xe4>)
   2f4b2:	601a      	str	r2, [r3, #0]
  
  return len;
   2f4b4:	687b      	ldr	r3, [r7, #4]
}
   2f4b6:	0018      	movs	r0, r3
   2f4b8:	46bd      	mov	sp, r7
   2f4ba:	b005      	add	sp, #20
   2f4bc:	bd90      	pop	{r4, r7, pc}
   2f4be:	46c0      	nop			; (mov r8, r8)
   2f4c0:	200042ac 	.word	0x200042ac
   2f4c4:	200041a7 	.word	0x200041a7
   2f4c8:	200041a8 	.word	0x200041a8
   2f4cc:	00025aa9 	.word	0x00025aa9
   2f4d0:	00021ff1 	.word	0x00021ff1
   2f4d4:	200041a0 	.word	0x200041a0
   2f4d8:	200042a8 	.word	0x200042a8
   2f4dc:	00034a29 	.word	0x00034a29

0002f4e0 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2f4e0:	b590      	push	{r4, r7, lr}
   2f4e2:	b085      	sub	sp, #20
   2f4e4:	af00      	add	r7, sp, #0
   2f4e6:	60f8      	str	r0, [r7, #12]
   2f4e8:	60b9      	str	r1, [r7, #8]
   2f4ea:	607a      	str	r2, [r7, #4]
   2f4ec:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2f4ee:	4b10      	ldr	r3, [pc, #64]	; (2f530 <WINC1500_write+0x50>)
   2f4f0:	2200      	movs	r2, #0
   2f4f2:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2f4f4:	68fb      	ldr	r3, [r7, #12]
   2f4f6:	681b      	ldr	r3, [r3, #0]
   2f4f8:	b258      	sxtb	r0, r3
   2f4fa:	687b      	ldr	r3, [r7, #4]
   2f4fc:	b29a      	uxth	r2, r3
   2f4fe:	68b9      	ldr	r1, [r7, #8]
   2f500:	2300      	movs	r3, #0
   2f502:	4c0c      	ldr	r4, [pc, #48]	; (2f534 <WINC1500_write+0x54>)
   2f504:	47a0      	blx	r4
   2f506:	1e03      	subs	r3, r0, #0
   2f508:	d005      	beq.n	2f516 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2f50a:	2301      	movs	r3, #1
   2f50c:	425b      	negs	r3, r3
   2f50e:	e00a      	b.n	2f526 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2f510:	2000      	movs	r0, #0
   2f512:	4b09      	ldr	r3, [pc, #36]	; (2f538 <WINC1500_write+0x58>)
   2f514:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2f516:	4b06      	ldr	r3, [pc, #24]	; (2f530 <WINC1500_write+0x50>)
   2f518:	781b      	ldrb	r3, [r3, #0]
   2f51a:	2201      	movs	r2, #1
   2f51c:	4053      	eors	r3, r2
   2f51e:	b2db      	uxtb	r3, r3
   2f520:	2b00      	cmp	r3, #0
   2f522:	d1f5      	bne.n	2f510 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2f524:	687b      	ldr	r3, [r7, #4]
}
   2f526:	0018      	movs	r0, r3
   2f528:	46bd      	mov	sp, r7
   2f52a:	b005      	add	sp, #20
   2f52c:	bd90      	pop	{r4, r7, pc}
   2f52e:	46c0      	nop			; (mov r8, r8)
   2f530:	200041a6 	.word	0x200041a6
   2f534:	00025945 	.word	0x00025945
   2f538:	00021ff1 	.word	0x00021ff1

0002f53c <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2f53c:	b580      	push	{r7, lr}
   2f53e:	b082      	sub	sp, #8
   2f540:	af00      	add	r7, sp, #0
   2f542:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2f544:	687b      	ldr	r3, [r7, #4]
   2f546:	681b      	ldr	r3, [r3, #0]
   2f548:	b25b      	sxtb	r3, r3
   2f54a:	0018      	movs	r0, r3
   2f54c:	4b06      	ldr	r3, [pc, #24]	; (2f568 <WINC1500_disconnect+0x2c>)
   2f54e:	4798      	blx	r3
	n->socket=-1;
   2f550:	687b      	ldr	r3, [r7, #4]
   2f552:	2201      	movs	r2, #1
   2f554:	4252      	negs	r2, r2
   2f556:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2f558:	4b04      	ldr	r3, [pc, #16]	; (2f56c <WINC1500_disconnect+0x30>)
   2f55a:	2200      	movs	r2, #0
   2f55c:	701a      	strb	r2, [r3, #0]
}
   2f55e:	46c0      	nop			; (mov r8, r8)
   2f560:	46bd      	mov	sp, r7
   2f562:	b002      	add	sp, #8
   2f564:	bd80      	pop	{r7, pc}
   2f566:	46c0      	nop			; (mov r8, r8)
   2f568:	00025c29 	.word	0x00025c29
   2f56c:	200041a5 	.word	0x200041a5

0002f570 <NetworkInit>:


void NetworkInit(Network* n) {
   2f570:	b580      	push	{r7, lr}
   2f572:	b082      	sub	sp, #8
   2f574:	af00      	add	r7, sp, #0
   2f576:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2f578:	687b      	ldr	r3, [r7, #4]
   2f57a:	2201      	movs	r2, #1
   2f57c:	4252      	negs	r2, r2
   2f57e:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2f580:	687b      	ldr	r3, [r7, #4]
   2f582:	4a06      	ldr	r2, [pc, #24]	; (2f59c <NetworkInit+0x2c>)
   2f584:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2f586:	687b      	ldr	r3, [r7, #4]
   2f588:	4a05      	ldr	r2, [pc, #20]	; (2f5a0 <NetworkInit+0x30>)
   2f58a:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2f58c:	687b      	ldr	r3, [r7, #4]
   2f58e:	4a05      	ldr	r2, [pc, #20]	; (2f5a4 <NetworkInit+0x34>)
   2f590:	611a      	str	r2, [r3, #16]
}
   2f592:	46c0      	nop			; (mov r8, r8)
   2f594:	46bd      	mov	sp, r7
   2f596:	b002      	add	sp, #8
   2f598:	bd80      	pop	{r7, pc}
   2f59a:	46c0      	nop			; (mov r8, r8)
   2f59c:	0002f3f5 	.word	0x0002f3f5
   2f5a0:	0002f4e1 	.word	0x0002f4e1
   2f5a4:	0002f53d 	.word	0x0002f53d

0002f5a8 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2f5a8:	b580      	push	{r7, lr}
   2f5aa:	b088      	sub	sp, #32
   2f5ac:	af00      	add	r7, sp, #0
   2f5ae:	60f8      	str	r0, [r7, #12]
   2f5b0:	60b9      	str	r1, [r7, #8]
   2f5b2:	607a      	str	r2, [r7, #4]
   2f5b4:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2f5b6:	4b37      	ldr	r3, [pc, #220]	; (2f694 <ConnectNetwork+0xec>)
   2f5b8:	2200      	movs	r2, #0
   2f5ba:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2f5bc:	4b36      	ldr	r3, [pc, #216]	; (2f698 <ConnectNetwork+0xf0>)
   2f5be:	68ba      	ldr	r2, [r7, #8]
   2f5c0:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2f5c2:	68bb      	ldr	r3, [r7, #8]
   2f5c4:	0018      	movs	r0, r3
   2f5c6:	4b35      	ldr	r3, [pc, #212]	; (2f69c <ConnectNetwork+0xf4>)
   2f5c8:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2f5ca:	e002      	b.n	2f5d2 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2f5cc:	2000      	movs	r0, #0
   2f5ce:	4b34      	ldr	r3, [pc, #208]	; (2f6a0 <ConnectNetwork+0xf8>)
   2f5d0:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2f5d2:	4b30      	ldr	r3, [pc, #192]	; (2f694 <ConnectNetwork+0xec>)
   2f5d4:	781b      	ldrb	r3, [r3, #0]
   2f5d6:	2201      	movs	r2, #1
   2f5d8:	4053      	eors	r3, r2
   2f5da:	b2db      	uxtb	r3, r3
   2f5dc:	2b00      	cmp	r3, #0
   2f5de:	d1f5      	bne.n	2f5cc <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2f5e0:	4b30      	ldr	r3, [pc, #192]	; (2f6a4 <ConnectNetwork+0xfc>)
   2f5e2:	681a      	ldr	r2, [r3, #0]
   2f5e4:	68fb      	ldr	r3, [r7, #12]
   2f5e6:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2f5e8:	2310      	movs	r3, #16
   2f5ea:	18fb      	adds	r3, r7, r3
   2f5ec:	2202      	movs	r2, #2
   2f5ee:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2f5f0:	687b      	ldr	r3, [r7, #4]
   2f5f2:	b29b      	uxth	r3, r3
   2f5f4:	021b      	lsls	r3, r3, #8
   2f5f6:	b21a      	sxth	r2, r3
   2f5f8:	687b      	ldr	r3, [r7, #4]
   2f5fa:	b29b      	uxth	r3, r3
   2f5fc:	0a1b      	lsrs	r3, r3, #8
   2f5fe:	b29b      	uxth	r3, r3
   2f600:	b21b      	sxth	r3, r3
   2f602:	4313      	orrs	r3, r2
   2f604:	b21b      	sxth	r3, r3
   2f606:	b29a      	uxth	r2, r3
   2f608:	2310      	movs	r3, #16
   2f60a:	18fb      	adds	r3, r7, r3
   2f60c:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2f60e:	4b25      	ldr	r3, [pc, #148]	; (2f6a4 <ConnectNetwork+0xfc>)
   2f610:	681b      	ldr	r3, [r3, #0]
   2f612:	001a      	movs	r2, r3
   2f614:	2310      	movs	r3, #16
   2f616:	18fb      	adds	r3, r7, r3
   2f618:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2f61a:	68fb      	ldr	r3, [r7, #12]
   2f61c:	681b      	ldr	r3, [r3, #0]
   2f61e:	2b00      	cmp	r3, #0
   2f620:	da0a      	bge.n	2f638 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2f622:	683b      	ldr	r3, [r7, #0]
   2f624:	b2db      	uxtb	r3, r3
   2f626:	001a      	movs	r2, r3
   2f628:	2101      	movs	r1, #1
   2f62a:	2002      	movs	r0, #2
   2f62c:	4b1e      	ldr	r3, [pc, #120]	; (2f6a8 <ConnectNetwork+0x100>)
   2f62e:	4798      	blx	r3
   2f630:	0003      	movs	r3, r0
   2f632:	001a      	movs	r2, r3
   2f634:	68fb      	ldr	r3, [r7, #12]
   2f636:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2f638:	68fb      	ldr	r3, [r7, #12]
   2f63a:	681b      	ldr	r3, [r3, #0]
   2f63c:	3301      	adds	r3, #1
   2f63e:	d108      	bne.n	2f652 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2f640:	68fb      	ldr	r3, [r7, #12]
   2f642:	681b      	ldr	r3, [r3, #0]
   2f644:	b25b      	sxtb	r3, r3
   2f646:	0018      	movs	r0, r3
   2f648:	4b18      	ldr	r3, [pc, #96]	; (2f6ac <ConnectNetwork+0x104>)
   2f64a:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2f64c:	2309      	movs	r3, #9
   2f64e:	425b      	negs	r3, r3
   2f650:	e01c      	b.n	2f68c <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2f652:	68fb      	ldr	r3, [r7, #12]
   2f654:	681b      	ldr	r3, [r3, #0]
   2f656:	b25b      	sxtb	r3, r3
   2f658:	2210      	movs	r2, #16
   2f65a:	18b9      	adds	r1, r7, r2
   2f65c:	2210      	movs	r2, #16
   2f65e:	0018      	movs	r0, r3
   2f660:	4b13      	ldr	r3, [pc, #76]	; (2f6b0 <ConnectNetwork+0x108>)
   2f662:	4798      	blx	r3
   2f664:	1e03      	subs	r3, r0, #0
   2f666:	d002      	beq.n	2f66e <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2f668:	2309      	movs	r3, #9
   2f66a:	425b      	negs	r3, r3
   2f66c:	e00e      	b.n	2f68c <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2f66e:	4b11      	ldr	r3, [pc, #68]	; (2f6b4 <ConnectNetwork+0x10c>)
   2f670:	2200      	movs	r2, #0
   2f672:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2f674:	e002      	b.n	2f67c <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2f676:	2000      	movs	r0, #0
   2f678:	4b09      	ldr	r3, [pc, #36]	; (2f6a0 <ConnectNetwork+0xf8>)
   2f67a:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2f67c:	4b0d      	ldr	r3, [pc, #52]	; (2f6b4 <ConnectNetwork+0x10c>)
   2f67e:	781b      	ldrb	r3, [r3, #0]
   2f680:	2201      	movs	r2, #1
   2f682:	4053      	eors	r3, r2
   2f684:	b2db      	uxtb	r3, r3
   2f686:	2b00      	cmp	r3, #0
   2f688:	d1f5      	bne.n	2f676 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2f68a:	2300      	movs	r3, #0
   2f68c:	0018      	movs	r0, r3
   2f68e:	46bd      	mov	sp, r7
   2f690:	b008      	add	sp, #32
   2f692:	bd80      	pop	{r7, pc}
   2f694:	200041a4 	.word	0x200041a4
   2f698:	200042b0 	.word	0x200042b0
   2f69c:	00025e71 	.word	0x00025e71
   2f6a0:	00021ff1 	.word	0x00021ff1
   2f6a4:	2000419c 	.word	0x2000419c
   2f6a8:	0002561d 	.word	0x0002561d
   2f6ac:	00025c29 	.word	0x00025c29
   2f6b0:	00025831 	.word	0x00025831
   2f6b4:	200041a5 	.word	0x200041a5

0002f6b8 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2f6b8:	b580      	push	{r7, lr}
   2f6ba:	b084      	sub	sp, #16
   2f6bc:	af00      	add	r7, sp, #0
   2f6be:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2f6c0:	687b      	ldr	r3, [r7, #4]
   2f6c2:	2b00      	cmp	r3, #0
   2f6c4:	d022      	beq.n	2f70c <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f6c6:	2300      	movs	r3, #0
   2f6c8:	60fb      	str	r3, [r7, #12]
   2f6ca:	e01b      	b.n	2f704 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2f6cc:	4a11      	ldr	r2, [pc, #68]	; (2f714 <allocateClient+0x5c>)
   2f6ce:	68fb      	ldr	r3, [r7, #12]
   2f6d0:	2164      	movs	r1, #100	; 0x64
   2f6d2:	434b      	muls	r3, r1
   2f6d4:	18d3      	adds	r3, r2, r3
   2f6d6:	3360      	adds	r3, #96	; 0x60
   2f6d8:	681b      	ldr	r3, [r3, #0]
   2f6da:	2b00      	cmp	r3, #0
   2f6dc:	d10f      	bne.n	2f6fe <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2f6de:	4a0d      	ldr	r2, [pc, #52]	; (2f714 <allocateClient+0x5c>)
   2f6e0:	68fb      	ldr	r3, [r7, #12]
   2f6e2:	2164      	movs	r1, #100	; 0x64
   2f6e4:	434b      	muls	r3, r1
   2f6e6:	18d3      	adds	r3, r2, r3
   2f6e8:	3360      	adds	r3, #96	; 0x60
   2f6ea:	687a      	ldr	r2, [r7, #4]
   2f6ec:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2f6ee:	68fb      	ldr	r3, [r7, #12]
   2f6f0:	2264      	movs	r2, #100	; 0x64
   2f6f2:	435a      	muls	r2, r3
   2f6f4:	4b07      	ldr	r3, [pc, #28]	; (2f714 <allocateClient+0x5c>)
   2f6f6:	18d2      	adds	r2, r2, r3
   2f6f8:	687b      	ldr	r3, [r7, #4]
   2f6fa:	61da      	str	r2, [r3, #28]
			return;
   2f6fc:	e007      	b.n	2f70e <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f6fe:	68fb      	ldr	r3, [r7, #12]
   2f700:	3301      	adds	r3, #1
   2f702:	60fb      	str	r3, [r7, #12]
   2f704:	68fb      	ldr	r3, [r7, #12]
   2f706:	2b06      	cmp	r3, #6
   2f708:	d9e0      	bls.n	2f6cc <allocateClient+0x14>
   2f70a:	e000      	b.n	2f70e <allocateClient+0x56>
		return;
   2f70c:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2f70e:	46bd      	mov	sp, r7
   2f710:	b004      	add	sp, #16
   2f712:	bd80      	pop	{r7, pc}
   2f714:	200042b4 	.word	0x200042b4

0002f718 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2f718:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f71a:	b089      	sub	sp, #36	; 0x24
   2f71c:	af04      	add	r7, sp, #16
   2f71e:	6078      	str	r0, [r7, #4]
   2f720:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2f722:	687b      	ldr	r3, [r7, #4]
   2f724:	2b00      	cmp	r3, #0
   2f726:	d00a      	beq.n	2f73e <mqtt_init+0x26>
   2f728:	683b      	ldr	r3, [r7, #0]
   2f72a:	2b00      	cmp	r3, #0
   2f72c:	d007      	beq.n	2f73e <mqtt_init+0x26>
   2f72e:	683b      	ldr	r3, [r7, #0]
   2f730:	691b      	ldr	r3, [r3, #16]
   2f732:	2b00      	cmp	r3, #0
   2f734:	d003      	beq.n	2f73e <mqtt_init+0x26>
   2f736:	683b      	ldr	r3, [r7, #0]
   2f738:	689b      	ldr	r3, [r3, #8]
   2f73a:	2b00      	cmp	r3, #0
   2f73c:	d102      	bne.n	2f744 <mqtt_init+0x2c>
		return FAILURE;
   2f73e:	2301      	movs	r3, #1
   2f740:	425b      	negs	r3, r3
   2f742:	e034      	b.n	2f7ae <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2f744:	683b      	ldr	r3, [r7, #0]
   2f746:	889b      	ldrh	r3, [r3, #4]
   2f748:	001a      	movs	r2, r3
   2f74a:	23fa      	movs	r3, #250	; 0xfa
   2f74c:	009b      	lsls	r3, r3, #2
   2f74e:	4353      	muls	r3, r2
   2f750:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2f752:	687b      	ldr	r3, [r7, #4]
   2f754:	3320      	adds	r3, #32
   2f756:	0018      	movs	r0, r3
   2f758:	4b17      	ldr	r3, [pc, #92]	; (2f7b8 <mqtt_init+0xa0>)
   2f75a:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2f75c:	687b      	ldr	r3, [r7, #4]
   2f75e:	3304      	adds	r3, #4
   2f760:	6839      	ldr	r1, [r7, #0]
   2f762:	2218      	movs	r2, #24
   2f764:	0018      	movs	r0, r3
   2f766:	4b15      	ldr	r3, [pc, #84]	; (2f7bc <mqtt_init+0xa4>)
   2f768:	4798      	blx	r3
	allocateClient(module);
   2f76a:	687b      	ldr	r3, [r7, #4]
   2f76c:	0018      	movs	r0, r3
   2f76e:	4b14      	ldr	r3, [pc, #80]	; (2f7c0 <mqtt_init+0xa8>)
   2f770:	4798      	blx	r3
	
	if(module->client)
   2f772:	687b      	ldr	r3, [r7, #4]
   2f774:	69db      	ldr	r3, [r3, #28]
   2f776:	2b00      	cmp	r3, #0
   2f778:	d017      	beq.n	2f7aa <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2f77a:	687b      	ldr	r3, [r7, #4]
   2f77c:	69d8      	ldr	r0, [r3, #28]
   2f77e:	687b      	ldr	r3, [r7, #4]
   2f780:	3320      	adds	r3, #32
   2f782:	001c      	movs	r4, r3
   2f784:	683b      	ldr	r3, [r7, #0]
   2f786:	691e      	ldr	r6, [r3, #16]
   2f788:	683b      	ldr	r3, [r7, #0]
   2f78a:	695a      	ldr	r2, [r3, #20]
   2f78c:	683b      	ldr	r3, [r7, #0]
   2f78e:	6899      	ldr	r1, [r3, #8]
   2f790:	683b      	ldr	r3, [r7, #0]
   2f792:	68db      	ldr	r3, [r3, #12]
   2f794:	68fd      	ldr	r5, [r7, #12]
   2f796:	9302      	str	r3, [sp, #8]
   2f798:	9101      	str	r1, [sp, #4]
   2f79a:	9200      	str	r2, [sp, #0]
   2f79c:	0033      	movs	r3, r6
   2f79e:	002a      	movs	r2, r5
   2f7a0:	0021      	movs	r1, r4
   2f7a2:	4c08      	ldr	r4, [pc, #32]	; (2f7c4 <mqtt_init+0xac>)
   2f7a4:	47a0      	blx	r4
		return SUCCESS;
   2f7a6:	2300      	movs	r3, #0
   2f7a8:	e001      	b.n	2f7ae <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2f7aa:	2301      	movs	r3, #1
   2f7ac:	425b      	negs	r3, r3
}
   2f7ae:	0018      	movs	r0, r3
   2f7b0:	46bd      	mov	sp, r7
   2f7b2:	b005      	add	sp, #20
   2f7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f7b6:	46c0      	nop			; (mov r8, r8)
   2f7b8:	0002f571 	.word	0x0002f571
   2f7bc:	00034a29 	.word	0x00034a29
   2f7c0:	0002f6b9 	.word	0x0002f6b9
   2f7c4:	0002e5e9 	.word	0x0002e5e9

0002f7c8 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2f7c8:	b580      	push	{r7, lr}
   2f7ca:	b082      	sub	sp, #8
   2f7cc:	af00      	add	r7, sp, #0
   2f7ce:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2f7d0:	687b      	ldr	r3, [r7, #4]
   2f7d2:	4a0c      	ldr	r2, [pc, #48]	; (2f804 <mqtt_get_config_defaults+0x3c>)
   2f7d4:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2f7d6:	687b      	ldr	r3, [r7, #4]
   2f7d8:	2200      	movs	r2, #0
   2f7da:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2f7dc:	687b      	ldr	r3, [r7, #4]
   2f7de:	223c      	movs	r2, #60	; 0x3c
   2f7e0:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2f7e2:	687b      	ldr	r3, [r7, #4]
   2f7e4:	2200      	movs	r2, #0
   2f7e6:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2f7e8:	687b      	ldr	r3, [r7, #4]
   2f7ea:	2200      	movs	r2, #0
   2f7ec:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2f7ee:	687b      	ldr	r3, [r7, #4]
   2f7f0:	2200      	movs	r2, #0
   2f7f2:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2f7f4:	687b      	ldr	r3, [r7, #4]
   2f7f6:	2200      	movs	r2, #0
   2f7f8:	615a      	str	r2, [r3, #20]
}
   2f7fa:	46c0      	nop			; (mov r8, r8)
   2f7fc:	46bd      	mov	sp, r7
   2f7fe:	b002      	add	sp, #8
   2f800:	bd80      	pop	{r7, pc}
   2f802:	46c0      	nop			; (mov r8, r8)
   2f804:	0000075b 	.word	0x0000075b

0002f808 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2f808:	b580      	push	{r7, lr}
   2f80a:	b082      	sub	sp, #8
   2f80c:	af00      	add	r7, sp, #0
   2f80e:	6078      	str	r0, [r7, #4]
   2f810:	6039      	str	r1, [r7, #0]
	if(module)
   2f812:	687b      	ldr	r3, [r7, #4]
   2f814:	2b00      	cmp	r3, #0
   2f816:	d004      	beq.n	2f822 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2f818:	687b      	ldr	r3, [r7, #4]
   2f81a:	683a      	ldr	r2, [r7, #0]
   2f81c:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2f81e:	2300      	movs	r3, #0
   2f820:	e001      	b.n	2f826 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2f822:	2301      	movs	r3, #1
   2f824:	425b      	negs	r3, r3
}
   2f826:	0018      	movs	r0, r3
   2f828:	46bd      	mov	sp, r7
   2f82a:	b002      	add	sp, #8
   2f82c:	bd80      	pop	{r7, pc}
	...

0002f830 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2f830:	b580      	push	{r7, lr}
   2f832:	b082      	sub	sp, #8
   2f834:	af00      	add	r7, sp, #0
   2f836:	603a      	str	r2, [r7, #0]
   2f838:	1dfb      	adds	r3, r7, #7
   2f83a:	1c02      	adds	r2, r0, #0
   2f83c:	701a      	strb	r2, [r3, #0]
   2f83e:	1dbb      	adds	r3, r7, #6
   2f840:	1c0a      	adds	r2, r1, #0
   2f842:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2f844:	683a      	ldr	r2, [r7, #0]
   2f846:	1dbb      	adds	r3, r7, #6
   2f848:	7819      	ldrb	r1, [r3, #0]
   2f84a:	1dfb      	adds	r3, r7, #7
   2f84c:	781b      	ldrb	r3, [r3, #0]
   2f84e:	b25b      	sxtb	r3, r3
   2f850:	0018      	movs	r0, r3
   2f852:	4b03      	ldr	r3, [pc, #12]	; (2f860 <mqtt_socket_event_handler+0x30>)
   2f854:	4798      	blx	r3
}
   2f856:	46c0      	nop			; (mov r8, r8)
   2f858:	46bd      	mov	sp, r7
   2f85a:	b002      	add	sp, #8
   2f85c:	bd80      	pop	{r7, pc}
   2f85e:	46c0      	nop			; (mov r8, r8)
   2f860:	0002f2ad 	.word	0x0002f2ad

0002f864 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2f864:	b580      	push	{r7, lr}
   2f866:	b082      	sub	sp, #8
   2f868:	af00      	add	r7, sp, #0
   2f86a:	6078      	str	r0, [r7, #4]
   2f86c:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2f86e:	683a      	ldr	r2, [r7, #0]
   2f870:	687b      	ldr	r3, [r7, #4]
   2f872:	0011      	movs	r1, r2
   2f874:	0018      	movs	r0, r3
   2f876:	4b03      	ldr	r3, [pc, #12]	; (2f884 <mqtt_socket_resolve_handler+0x20>)
   2f878:	4798      	blx	r3
}
   2f87a:	46c0      	nop			; (mov r8, r8)
   2f87c:	46bd      	mov	sp, r7
   2f87e:	b002      	add	sp, #8
   2f880:	bd80      	pop	{r7, pc}
   2f882:	46c0      	nop			; (mov r8, r8)
   2f884:	0002f25d 	.word	0x0002f25d

0002f888 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2f888:	b590      	push	{r4, r7, lr}
   2f88a:	b085      	sub	sp, #20
   2f88c:	af00      	add	r7, sp, #0
   2f88e:	6078      	str	r0, [r7, #4]
   2f890:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2f892:	687b      	ldr	r3, [r7, #4]
   2f894:	3320      	adds	r3, #32
   2f896:	0018      	movs	r0, r3
   2f898:	687b      	ldr	r3, [r7, #4]
   2f89a:	889b      	ldrh	r3, [r3, #4]
   2f89c:	001a      	movs	r2, r3
   2f89e:	687b      	ldr	r3, [r7, #4]
   2f8a0:	799b      	ldrb	r3, [r3, #6]
   2f8a2:	6839      	ldr	r1, [r7, #0]
   2f8a4:	4c09      	ldr	r4, [pc, #36]	; (2f8cc <mqtt_connect+0x44>)
   2f8a6:	47a0      	blx	r4
   2f8a8:	0003      	movs	r3, r0
   2f8aa:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2f8ac:	687b      	ldr	r3, [r7, #4]
   2f8ae:	681b      	ldr	r3, [r3, #0]
   2f8b0:	2b00      	cmp	r3, #0
   2f8b2:	d006      	beq.n	2f8c2 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2f8b4:	687b      	ldr	r3, [r7, #4]
   2f8b6:	681b      	ldr	r3, [r3, #0]
   2f8b8:	220c      	movs	r2, #12
   2f8ba:	18ba      	adds	r2, r7, r2
   2f8bc:	6878      	ldr	r0, [r7, #4]
   2f8be:	2100      	movs	r1, #0
   2f8c0:	4798      	blx	r3
	return connResult.sock_connected.result;
   2f8c2:	68fb      	ldr	r3, [r7, #12]
}
   2f8c4:	0018      	movs	r0, r3
   2f8c6:	46bd      	mov	sp, r7
   2f8c8:	b005      	add	sp, #20
   2f8ca:	bd90      	pop	{r4, r7, pc}
   2f8cc:	0002f5a9 	.word	0x0002f5a9

0002f8d0 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2f8d0:	b580      	push	{r7, lr}
   2f8d2:	b09c      	sub	sp, #112	; 0x70
   2f8d4:	af00      	add	r7, sp, #0
   2f8d6:	60f8      	str	r0, [r7, #12]
   2f8d8:	607a      	str	r2, [r7, #4]
   2f8da:	603b      	str	r3, [r7, #0]
   2f8dc:	230b      	movs	r3, #11
   2f8de:	18fb      	adds	r3, r7, r3
   2f8e0:	1c0a      	adds	r2, r1, #0
   2f8e2:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2f8e4:	2310      	movs	r3, #16
   2f8e6:	18fa      	adds	r2, r7, r3
   2f8e8:	4b31      	ldr	r3, [pc, #196]	; (2f9b0 <mqtt_connect_broker+0xe0>)
   2f8ea:	0010      	movs	r0, r2
   2f8ec:	0019      	movs	r1, r3
   2f8ee:	2358      	movs	r3, #88	; 0x58
   2f8f0:	001a      	movs	r2, r3
   2f8f2:	4b30      	ldr	r3, [pc, #192]	; (2f9b4 <mqtt_connect_broker+0xe4>)
   2f8f4:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2f8f6:	2310      	movs	r3, #16
   2f8f8:	18fb      	adds	r3, r7, r3
   2f8fa:	2204      	movs	r2, #4
   2f8fc:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2f8fe:	2310      	movs	r3, #16
   2f900:	18fb      	adds	r3, r7, r3
   2f902:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2f904:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2f906:	2310      	movs	r3, #16
   2f908:	18fb      	adds	r3, r7, r3
   2f90a:	687a      	ldr	r2, [r7, #4]
   2f90c:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2f90e:	2310      	movs	r3, #16
   2f910:	18fb      	adds	r3, r7, r3
   2f912:	683a      	ldr	r2, [r7, #0]
   2f914:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2f916:	2310      	movs	r3, #16
   2f918:	18fb      	adds	r3, r7, r3
   2f91a:	220b      	movs	r2, #11
   2f91c:	18ba      	adds	r2, r7, r2
   2f91e:	7812      	ldrb	r2, [r2, #0]
   2f920:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2f922:	2310      	movs	r3, #16
   2f924:	18fb      	adds	r3, r7, r3
   2f926:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2f928:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2f92a:	2310      	movs	r3, #16
   2f92c:	18fb      	adds	r3, r7, r3
   2f92e:	2280      	movs	r2, #128	; 0x80
   2f930:	18ba      	adds	r2, r7, r2
   2f932:	6812      	ldr	r2, [r2, #0]
   2f934:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2f936:	2310      	movs	r3, #16
   2f938:	18fb      	adds	r3, r7, r3
   2f93a:	228c      	movs	r2, #140	; 0x8c
   2f93c:	18ba      	adds	r2, r7, r2
   2f93e:	213c      	movs	r1, #60	; 0x3c
   2f940:	7812      	ldrb	r2, [r2, #0]
   2f942:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2f944:	2310      	movs	r3, #16
   2f946:	18fb      	adds	r3, r7, r3
   2f948:	2288      	movs	r2, #136	; 0x88
   2f94a:	18ba      	adds	r2, r7, r2
   2f94c:	213d      	movs	r1, #61	; 0x3d
   2f94e:	7812      	ldrb	r2, [r2, #0]
   2f950:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2f952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2f954:	2b00      	cmp	r3, #0
   2f956:	d008      	beq.n	2f96a <mqtt_connect_broker+0x9a>
   2f958:	2380      	movs	r3, #128	; 0x80
   2f95a:	18fb      	adds	r3, r7, r3
   2f95c:	681b      	ldr	r3, [r3, #0]
   2f95e:	2b00      	cmp	r3, #0
   2f960:	d003      	beq.n	2f96a <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2f962:	2310      	movs	r3, #16
   2f964:	18fb      	adds	r3, r7, r3
   2f966:	2201      	movs	r2, #1
   2f968:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2f96a:	68fb      	ldr	r3, [r7, #12]
   2f96c:	69db      	ldr	r3, [r3, #28]
   2f96e:	2210      	movs	r2, #16
   2f970:	18ba      	adds	r2, r7, r2
   2f972:	0011      	movs	r1, r2
   2f974:	0018      	movs	r0, r3
   2f976:	4b10      	ldr	r3, [pc, #64]	; (2f9b8 <mqtt_connect_broker+0xe8>)
   2f978:	4798      	blx	r3
   2f97a:	0003      	movs	r3, r0
   2f97c:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2f97e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f980:	b2da      	uxtb	r2, r3
   2f982:	2368      	movs	r3, #104	; 0x68
   2f984:	18fb      	adds	r3, r7, r3
   2f986:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2f988:	68fb      	ldr	r3, [r7, #12]
   2f98a:	681b      	ldr	r3, [r3, #0]
   2f98c:	2b00      	cmp	r3, #0
   2f98e:	d006      	beq.n	2f99e <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2f990:	68fb      	ldr	r3, [r7, #12]
   2f992:	681b      	ldr	r3, [r3, #0]
   2f994:	2268      	movs	r2, #104	; 0x68
   2f996:	18ba      	adds	r2, r7, r2
   2f998:	68f8      	ldr	r0, [r7, #12]
   2f99a:	2101      	movs	r1, #1
   2f99c:	4798      	blx	r3
	
	module->isConnected = true;
   2f99e:	68fb      	ldr	r3, [r7, #12]
   2f9a0:	2234      	movs	r2, #52	; 0x34
   2f9a2:	2101      	movs	r1, #1
   2f9a4:	5499      	strb	r1, [r3, r2]
	return rc;
   2f9a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2f9a8:	0018      	movs	r0, r3
   2f9aa:	46bd      	mov	sp, r7
   2f9ac:	b01c      	add	sp, #112	; 0x70
   2f9ae:	bd80      	pop	{r7, pc}
   2f9b0:	00039d08 	.word	0x00039d08
   2f9b4:	00034a29 	.word	0x00034a29
   2f9b8:	0002ecf9 	.word	0x0002ecf9

0002f9bc <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2f9bc:	b580      	push	{r7, lr}
   2f9be:	b084      	sub	sp, #16
   2f9c0:	af00      	add	r7, sp, #0
   2f9c2:	6078      	str	r0, [r7, #4]
   2f9c4:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2f9c6:	687b      	ldr	r3, [r7, #4]
   2f9c8:	69db      	ldr	r3, [r3, #28]
   2f9ca:	0018      	movs	r0, r3
   2f9cc:	4b0c      	ldr	r3, [pc, #48]	; (2fa00 <mqtt_disconnect+0x44>)
   2f9ce:	4798      	blx	r3
   2f9d0:	0003      	movs	r3, r0
   2f9d2:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2f9d4:	68fb      	ldr	r3, [r7, #12]
   2f9d6:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2f9d8:	687b      	ldr	r3, [r7, #4]
   2f9da:	681b      	ldr	r3, [r3, #0]
   2f9dc:	2b00      	cmp	r3, #0
   2f9de:	d006      	beq.n	2f9ee <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2f9e0:	687b      	ldr	r3, [r7, #4]
   2f9e2:	681b      	ldr	r3, [r3, #0]
   2f9e4:	2208      	movs	r2, #8
   2f9e6:	18ba      	adds	r2, r7, r2
   2f9e8:	6878      	ldr	r0, [r7, #4]
   2f9ea:	2105      	movs	r1, #5
   2f9ec:	4798      	blx	r3
	
	module->isConnected = false;
   2f9ee:	687b      	ldr	r3, [r7, #4]
   2f9f0:	2234      	movs	r2, #52	; 0x34
   2f9f2:	2100      	movs	r1, #0
   2f9f4:	5499      	strb	r1, [r3, r2]
	return rc;
   2f9f6:	68fb      	ldr	r3, [r7, #12]
}
   2f9f8:	0018      	movs	r0, r3
   2f9fa:	46bd      	mov	sp, r7
   2f9fc:	b004      	add	sp, #16
   2f9fe:	bd80      	pop	{r7, pc}
   2fa00:	0002f185 	.word	0x0002f185

0002fa04 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2fa04:	b580      	push	{r7, lr}
   2fa06:	b08a      	sub	sp, #40	; 0x28
   2fa08:	af00      	add	r7, sp, #0
   2fa0a:	60f8      	str	r0, [r7, #12]
   2fa0c:	60b9      	str	r1, [r7, #8]
   2fa0e:	607a      	str	r2, [r7, #4]
   2fa10:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2fa12:	2314      	movs	r3, #20
   2fa14:	18fb      	adds	r3, r7, r3
   2fa16:	2230      	movs	r2, #48	; 0x30
   2fa18:	18ba      	adds	r2, r7, r2
   2fa1a:	7812      	ldrb	r2, [r2, #0]
   2fa1c:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2fa1e:	2314      	movs	r3, #20
   2fa20:	18fb      	adds	r3, r7, r3
   2fa22:	687a      	ldr	r2, [r7, #4]
   2fa24:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2fa26:	2314      	movs	r3, #20
   2fa28:	18fb      	adds	r3, r7, r3
   2fa2a:	683a      	ldr	r2, [r7, #0]
   2fa2c:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2fa2e:	2314      	movs	r3, #20
   2fa30:	18fb      	adds	r3, r7, r3
   2fa32:	2234      	movs	r2, #52	; 0x34
   2fa34:	18ba      	adds	r2, r7, r2
   2fa36:	7812      	ldrb	r2, [r2, #0]
   2fa38:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2fa3a:	68fb      	ldr	r3, [r7, #12]
   2fa3c:	69db      	ldr	r3, [r3, #28]
   2fa3e:	2214      	movs	r2, #20
   2fa40:	18ba      	adds	r2, r7, r2
   2fa42:	68b9      	ldr	r1, [r7, #8]
   2fa44:	0018      	movs	r0, r3
   2fa46:	4b09      	ldr	r3, [pc, #36]	; (2fa6c <mqtt_publish+0x68>)
   2fa48:	4798      	blx	r3
   2fa4a:	0003      	movs	r3, r0
   2fa4c:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2fa4e:	68fb      	ldr	r3, [r7, #12]
   2fa50:	681b      	ldr	r3, [r3, #0]
   2fa52:	2b00      	cmp	r3, #0
   2fa54:	d005      	beq.n	2fa62 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2fa56:	68fb      	ldr	r3, [r7, #12]
   2fa58:	681b      	ldr	r3, [r3, #0]
   2fa5a:	68f8      	ldr	r0, [r7, #12]
   2fa5c:	2200      	movs	r2, #0
   2fa5e:	2102      	movs	r1, #2
   2fa60:	4798      	blx	r3
	
	return rc;
   2fa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fa64:	0018      	movs	r0, r3
   2fa66:	46bd      	mov	sp, r7
   2fa68:	b00a      	add	sp, #40	; 0x28
   2fa6a:	bd80      	pop	{r7, pc}
   2fa6c:	0002efc5 	.word	0x0002efc5

0002fa70 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2fa70:	b590      	push	{r4, r7, lr}
   2fa72:	b087      	sub	sp, #28
   2fa74:	af00      	add	r7, sp, #0
   2fa76:	60f8      	str	r0, [r7, #12]
   2fa78:	60b9      	str	r1, [r7, #8]
   2fa7a:	603b      	str	r3, [r7, #0]
   2fa7c:	1dfb      	adds	r3, r7, #7
   2fa7e:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2fa80:	68fb      	ldr	r3, [r7, #12]
   2fa82:	69d8      	ldr	r0, [r3, #28]
   2fa84:	683c      	ldr	r4, [r7, #0]
   2fa86:	1dfb      	adds	r3, r7, #7
   2fa88:	781a      	ldrb	r2, [r3, #0]
   2fa8a:	68b9      	ldr	r1, [r7, #8]
   2fa8c:	0023      	movs	r3, r4
   2fa8e:	4c09      	ldr	r4, [pc, #36]	; (2fab4 <mqtt_subscribe+0x44>)
   2fa90:	47a0      	blx	r4
   2fa92:	0003      	movs	r3, r0
   2fa94:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2fa96:	68fb      	ldr	r3, [r7, #12]
   2fa98:	681b      	ldr	r3, [r3, #0]
   2fa9a:	2b00      	cmp	r3, #0
   2fa9c:	d005      	beq.n	2faaa <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2fa9e:	68fb      	ldr	r3, [r7, #12]
   2faa0:	681b      	ldr	r3, [r3, #0]
   2faa2:	68f8      	ldr	r0, [r7, #12]
   2faa4:	2200      	movs	r2, #0
   2faa6:	2103      	movs	r1, #3
   2faa8:	4798      	blx	r3
	
	return rc;
   2faaa:	697b      	ldr	r3, [r7, #20]
}
   2faac:	0018      	movs	r0, r3
   2faae:	46bd      	mov	sp, r7
   2fab0:	b007      	add	sp, #28
   2fab2:	bd90      	pop	{r4, r7, pc}
   2fab4:	0002ee39 	.word	0x0002ee39

0002fab8 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2fab8:	b580      	push	{r7, lr}
   2faba:	b082      	sub	sp, #8
   2fabc:	af00      	add	r7, sp, #0
   2fabe:	6078      	str	r0, [r7, #4]
   2fac0:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2fac2:	687b      	ldr	r3, [r7, #4]
   2fac4:	69db      	ldr	r3, [r3, #28]
   2fac6:	683a      	ldr	r2, [r7, #0]
   2fac8:	0011      	movs	r1, r2
   2faca:	0018      	movs	r0, r3
   2facc:	4b03      	ldr	r3, [pc, #12]	; (2fadc <mqtt_yield+0x24>)
   2face:	4798      	blx	r3
   2fad0:	0003      	movs	r3, r0
   2fad2:	0018      	movs	r0, r3
   2fad4:	46bd      	mov	sp, r7
   2fad6:	b002      	add	sp, #8
   2fad8:	bd80      	pop	{r7, pc}
   2fada:	46c0      	nop			; (mov r8, r8)
   2fadc:	0002ec41 	.word	0x0002ec41

0002fae0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2fae0:	b590      	push	{r4, r7, lr}
   2fae2:	b085      	sub	sp, #20
   2fae4:	af00      	add	r7, sp, #0
   2fae6:	6078      	str	r0, [r7, #4]
	int len = 0;
   2fae8:	2300      	movs	r3, #0
   2faea:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2faec:	687b      	ldr	r3, [r7, #4]
   2faee:	7a1b      	ldrb	r3, [r3, #8]
   2faf0:	2b03      	cmp	r3, #3
   2faf2:	d102      	bne.n	2fafa <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2faf4:	230c      	movs	r3, #12
   2faf6:	60fb      	str	r3, [r7, #12]
   2faf8:	e005      	b.n	2fb06 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2fafa:	687b      	ldr	r3, [r7, #4]
   2fafc:	7a1b      	ldrb	r3, [r3, #8]
   2fafe:	2b04      	cmp	r3, #4
   2fb00:	d101      	bne.n	2fb06 <MQTTSerialize_connectLength+0x26>
		len = 10;
   2fb02:	230a      	movs	r3, #10
   2fb04:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2fb06:	687b      	ldr	r3, [r7, #4]
   2fb08:	68d8      	ldr	r0, [r3, #12]
   2fb0a:	6919      	ldr	r1, [r3, #16]
   2fb0c:	695a      	ldr	r2, [r3, #20]
   2fb0e:	4b25      	ldr	r3, [pc, #148]	; (2fba4 <MQTTSerialize_connectLength+0xc4>)
   2fb10:	4798      	blx	r3
   2fb12:	0003      	movs	r3, r0
   2fb14:	3302      	adds	r3, #2
   2fb16:	68fa      	ldr	r2, [r7, #12]
   2fb18:	18d3      	adds	r3, r2, r3
   2fb1a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2fb1c:	687b      	ldr	r3, [r7, #4]
   2fb1e:	7edb      	ldrb	r3, [r3, #27]
   2fb20:	2b00      	cmp	r3, #0
   2fb22:	d013      	beq.n	2fb4c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2fb24:	687b      	ldr	r3, [r7, #4]
   2fb26:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2fb28:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2fb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2fb2c:	4b1d      	ldr	r3, [pc, #116]	; (2fba4 <MQTTSerialize_connectLength+0xc4>)
   2fb2e:	4798      	blx	r3
   2fb30:	0003      	movs	r3, r0
   2fb32:	1c9c      	adds	r4, r3, #2
   2fb34:	687b      	ldr	r3, [r7, #4]
   2fb36:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2fb38:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2fb3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2fb3c:	4b19      	ldr	r3, [pc, #100]	; (2fba4 <MQTTSerialize_connectLength+0xc4>)
   2fb3e:	4798      	blx	r3
   2fb40:	0003      	movs	r3, r0
   2fb42:	18e3      	adds	r3, r4, r3
   2fb44:	3302      	adds	r3, #2
   2fb46:	68fa      	ldr	r2, [r7, #12]
   2fb48:	18d3      	adds	r3, r2, r3
   2fb4a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2fb4c:	687b      	ldr	r3, [r7, #4]
   2fb4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2fb50:	2b00      	cmp	r3, #0
   2fb52:	d103      	bne.n	2fb5c <MQTTSerialize_connectLength+0x7c>
   2fb54:	687b      	ldr	r3, [r7, #4]
   2fb56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2fb58:	2b00      	cmp	r3, #0
   2fb5a:	d00a      	beq.n	2fb72 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2fb5c:	687b      	ldr	r3, [r7, #4]
   2fb5e:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2fb60:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2fb62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2fb64:	4b0f      	ldr	r3, [pc, #60]	; (2fba4 <MQTTSerialize_connectLength+0xc4>)
   2fb66:	4798      	blx	r3
   2fb68:	0003      	movs	r3, r0
   2fb6a:	3302      	adds	r3, #2
   2fb6c:	68fa      	ldr	r2, [r7, #12]
   2fb6e:	18d3      	adds	r3, r2, r3
   2fb70:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2fb72:	687b      	ldr	r3, [r7, #4]
   2fb74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fb76:	2b00      	cmp	r3, #0
   2fb78:	d103      	bne.n	2fb82 <MQTTSerialize_connectLength+0xa2>
   2fb7a:	687b      	ldr	r3, [r7, #4]
   2fb7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2fb7e:	2b00      	cmp	r3, #0
   2fb80:	d00a      	beq.n	2fb98 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2fb82:	687b      	ldr	r3, [r7, #4]
   2fb84:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2fb86:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2fb88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2fb8a:	4b06      	ldr	r3, [pc, #24]	; (2fba4 <MQTTSerialize_connectLength+0xc4>)
   2fb8c:	4798      	blx	r3
   2fb8e:	0003      	movs	r3, r0
   2fb90:	3302      	adds	r3, #2
   2fb92:	68fa      	ldr	r2, [r7, #12]
   2fb94:	18d3      	adds	r3, r2, r3
   2fb96:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2fb98:	68fb      	ldr	r3, [r7, #12]
}
   2fb9a:	0018      	movs	r0, r3
   2fb9c:	46bd      	mov	sp, r7
   2fb9e:	b005      	add	sp, #20
   2fba0:	bd90      	pop	{r4, r7, pc}
   2fba2:	46c0      	nop			; (mov r8, r8)
   2fba4:	00030551 	.word	0x00030551

0002fba8 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2fba8:	b590      	push	{r4, r7, lr}
   2fbaa:	b08b      	sub	sp, #44	; 0x2c
   2fbac:	af00      	add	r7, sp, #0
   2fbae:	60f8      	str	r0, [r7, #12]
   2fbb0:	60b9      	str	r1, [r7, #8]
   2fbb2:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2fbb4:	68fb      	ldr	r3, [r7, #12]
   2fbb6:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2fbb8:	2300      	movs	r3, #0
   2fbba:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2fbbc:	2300      	movs	r3, #0
   2fbbe:	617b      	str	r3, [r7, #20]
	int len = 0;
   2fbc0:	2300      	movs	r3, #0
   2fbc2:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2fbc4:	2301      	movs	r3, #1
   2fbc6:	425b      	negs	r3, r3
   2fbc8:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2fbca:	687b      	ldr	r3, [r7, #4]
   2fbcc:	0018      	movs	r0, r3
   2fbce:	4b8c      	ldr	r3, [pc, #560]	; (2fe00 <MQTTSerialize_connect+0x258>)
   2fbd0:	4798      	blx	r3
   2fbd2:	0003      	movs	r3, r0
   2fbd4:	623b      	str	r3, [r7, #32]
   2fbd6:	6a3b      	ldr	r3, [r7, #32]
   2fbd8:	0018      	movs	r0, r3
   2fbda:	4b8a      	ldr	r3, [pc, #552]	; (2fe04 <MQTTSerialize_connect+0x25c>)
   2fbdc:	4798      	blx	r3
   2fbde:	0002      	movs	r2, r0
   2fbe0:	68bb      	ldr	r3, [r7, #8]
   2fbe2:	429a      	cmp	r2, r3
   2fbe4:	dd03      	ble.n	2fbee <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2fbe6:	2302      	movs	r3, #2
   2fbe8:	425b      	negs	r3, r3
   2fbea:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2fbec:	e103      	b.n	2fdf6 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2fbee:	2318      	movs	r3, #24
   2fbf0:	18fb      	adds	r3, r7, r3
   2fbf2:	2200      	movs	r2, #0
   2fbf4:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2fbf6:	2318      	movs	r3, #24
   2fbf8:	18fb      	adds	r3, r7, r3
   2fbfa:	781a      	ldrb	r2, [r3, #0]
   2fbfc:	210f      	movs	r1, #15
   2fbfe:	400a      	ands	r2, r1
   2fc00:	1c11      	adds	r1, r2, #0
   2fc02:	2210      	movs	r2, #16
   2fc04:	430a      	orrs	r2, r1
   2fc06:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fc08:	2318      	movs	r3, #24
   2fc0a:	18fb      	adds	r3, r7, r3
   2fc0c:	781a      	ldrb	r2, [r3, #0]
   2fc0e:	231c      	movs	r3, #28
   2fc10:	18fb      	adds	r3, r7, r3
   2fc12:	0011      	movs	r1, r2
   2fc14:	0018      	movs	r0, r3
   2fc16:	4b7c      	ldr	r3, [pc, #496]	; (2fe08 <MQTTSerialize_connect+0x260>)
   2fc18:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2fc1a:	69fb      	ldr	r3, [r7, #28]
   2fc1c:	6a3a      	ldr	r2, [r7, #32]
   2fc1e:	0011      	movs	r1, r2
   2fc20:	0018      	movs	r0, r3
   2fc22:	4b7a      	ldr	r3, [pc, #488]	; (2fe0c <MQTTSerialize_connect+0x264>)
   2fc24:	4798      	blx	r3
   2fc26:	0002      	movs	r2, r0
   2fc28:	69fb      	ldr	r3, [r7, #28]
   2fc2a:	189b      	adds	r3, r3, r2
   2fc2c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2fc2e:	687b      	ldr	r3, [r7, #4]
   2fc30:	7a1b      	ldrb	r3, [r3, #8]
   2fc32:	2b04      	cmp	r3, #4
   2fc34:	d10d      	bne.n	2fc52 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2fc36:	4a76      	ldr	r2, [pc, #472]	; (2fe10 <MQTTSerialize_connect+0x268>)
   2fc38:	231c      	movs	r3, #28
   2fc3a:	18fb      	adds	r3, r7, r3
   2fc3c:	0011      	movs	r1, r2
   2fc3e:	0018      	movs	r0, r3
   2fc40:	4b74      	ldr	r3, [pc, #464]	; (2fe14 <MQTTSerialize_connect+0x26c>)
   2fc42:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2fc44:	231c      	movs	r3, #28
   2fc46:	18fb      	adds	r3, r7, r3
   2fc48:	2104      	movs	r1, #4
   2fc4a:	0018      	movs	r0, r3
   2fc4c:	4b6e      	ldr	r3, [pc, #440]	; (2fe08 <MQTTSerialize_connect+0x260>)
   2fc4e:	4798      	blx	r3
   2fc50:	e00c      	b.n	2fc6c <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2fc52:	4a71      	ldr	r2, [pc, #452]	; (2fe18 <MQTTSerialize_connect+0x270>)
   2fc54:	231c      	movs	r3, #28
   2fc56:	18fb      	adds	r3, r7, r3
   2fc58:	0011      	movs	r1, r2
   2fc5a:	0018      	movs	r0, r3
   2fc5c:	4b6d      	ldr	r3, [pc, #436]	; (2fe14 <MQTTSerialize_connect+0x26c>)
   2fc5e:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2fc60:	231c      	movs	r3, #28
   2fc62:	18fb      	adds	r3, r7, r3
   2fc64:	2103      	movs	r1, #3
   2fc66:	0018      	movs	r0, r3
   2fc68:	4b67      	ldr	r3, [pc, #412]	; (2fe08 <MQTTSerialize_connect+0x260>)
   2fc6a:	4798      	blx	r3
	}

	flags.all = 0;
   2fc6c:	2314      	movs	r3, #20
   2fc6e:	18fb      	adds	r3, r7, r3
   2fc70:	2200      	movs	r2, #0
   2fc72:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2fc74:	687b      	ldr	r3, [r7, #4]
   2fc76:	7e9b      	ldrb	r3, [r3, #26]
   2fc78:	1c1a      	adds	r2, r3, #0
   2fc7a:	2301      	movs	r3, #1
   2fc7c:	4013      	ands	r3, r2
   2fc7e:	b2da      	uxtb	r2, r3
   2fc80:	2314      	movs	r3, #20
   2fc82:	18fb      	adds	r3, r7, r3
   2fc84:	2101      	movs	r1, #1
   2fc86:	400a      	ands	r2, r1
   2fc88:	1890      	adds	r0, r2, r2
   2fc8a:	781a      	ldrb	r2, [r3, #0]
   2fc8c:	2102      	movs	r1, #2
   2fc8e:	438a      	bics	r2, r1
   2fc90:	1c11      	adds	r1, r2, #0
   2fc92:	1c02      	adds	r2, r0, #0
   2fc94:	430a      	orrs	r2, r1
   2fc96:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2fc98:	687b      	ldr	r3, [r7, #4]
   2fc9a:	7edb      	ldrb	r3, [r3, #27]
   2fc9c:	1e5a      	subs	r2, r3, #1
   2fc9e:	4193      	sbcs	r3, r2
   2fca0:	b2da      	uxtb	r2, r3
   2fca2:	2314      	movs	r3, #20
   2fca4:	18fb      	adds	r3, r7, r3
   2fca6:	2101      	movs	r1, #1
   2fca8:	400a      	ands	r2, r1
   2fcaa:	0090      	lsls	r0, r2, #2
   2fcac:	781a      	ldrb	r2, [r3, #0]
   2fcae:	2104      	movs	r1, #4
   2fcb0:	438a      	bics	r2, r1
   2fcb2:	1c11      	adds	r1, r2, #0
   2fcb4:	1c02      	adds	r2, r0, #0
   2fcb6:	430a      	orrs	r2, r1
   2fcb8:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2fcba:	2314      	movs	r3, #20
   2fcbc:	18fb      	adds	r3, r7, r3
   2fcbe:	781b      	ldrb	r3, [r3, #0]
   2fcc0:	2204      	movs	r2, #4
   2fcc2:	4013      	ands	r3, r2
   2fcc4:	b2db      	uxtb	r3, r3
   2fcc6:	2b00      	cmp	r3, #0
   2fcc8:	d025      	beq.n	2fd16 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2fcca:	687b      	ldr	r3, [r7, #4]
   2fccc:	223d      	movs	r2, #61	; 0x3d
   2fcce:	5c9b      	ldrb	r3, [r3, r2]
   2fcd0:	1c1a      	adds	r2, r3, #0
   2fcd2:	2303      	movs	r3, #3
   2fcd4:	4013      	ands	r3, r2
   2fcd6:	b2da      	uxtb	r2, r3
   2fcd8:	2314      	movs	r3, #20
   2fcda:	18fb      	adds	r3, r7, r3
   2fcdc:	2103      	movs	r1, #3
   2fcde:	400a      	ands	r2, r1
   2fce0:	00d0      	lsls	r0, r2, #3
   2fce2:	781a      	ldrb	r2, [r3, #0]
   2fce4:	2118      	movs	r1, #24
   2fce6:	438a      	bics	r2, r1
   2fce8:	1c11      	adds	r1, r2, #0
   2fcea:	1c02      	adds	r2, r0, #0
   2fcec:	430a      	orrs	r2, r1
   2fcee:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2fcf0:	687b      	ldr	r3, [r7, #4]
   2fcf2:	223c      	movs	r2, #60	; 0x3c
   2fcf4:	5c9b      	ldrb	r3, [r3, r2]
   2fcf6:	1c1a      	adds	r2, r3, #0
   2fcf8:	2301      	movs	r3, #1
   2fcfa:	4013      	ands	r3, r2
   2fcfc:	b2da      	uxtb	r2, r3
   2fcfe:	2314      	movs	r3, #20
   2fd00:	18fb      	adds	r3, r7, r3
   2fd02:	2101      	movs	r1, #1
   2fd04:	400a      	ands	r2, r1
   2fd06:	0150      	lsls	r0, r2, #5
   2fd08:	781a      	ldrb	r2, [r3, #0]
   2fd0a:	2120      	movs	r1, #32
   2fd0c:	438a      	bics	r2, r1
   2fd0e:	1c11      	adds	r1, r2, #0
   2fd10:	1c02      	adds	r2, r0, #0
   2fd12:	430a      	orrs	r2, r1
   2fd14:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2fd16:	687b      	ldr	r3, [r7, #4]
   2fd18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2fd1a:	2b00      	cmp	r3, #0
   2fd1c:	d103      	bne.n	2fd26 <MQTTSerialize_connect+0x17e>
   2fd1e:	687b      	ldr	r3, [r7, #4]
   2fd20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2fd22:	2b00      	cmp	r3, #0
   2fd24:	d006      	beq.n	2fd34 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2fd26:	2314      	movs	r3, #20
   2fd28:	18fb      	adds	r3, r7, r3
   2fd2a:	781a      	ldrb	r2, [r3, #0]
   2fd2c:	2180      	movs	r1, #128	; 0x80
   2fd2e:	4249      	negs	r1, r1
   2fd30:	430a      	orrs	r2, r1
   2fd32:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2fd34:	687b      	ldr	r3, [r7, #4]
   2fd36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fd38:	2b00      	cmp	r3, #0
   2fd3a:	d103      	bne.n	2fd44 <MQTTSerialize_connect+0x19c>
   2fd3c:	687b      	ldr	r3, [r7, #4]
   2fd3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2fd40:	2b00      	cmp	r3, #0
   2fd42:	d005      	beq.n	2fd50 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2fd44:	2314      	movs	r3, #20
   2fd46:	18fb      	adds	r3, r7, r3
   2fd48:	781a      	ldrb	r2, [r3, #0]
   2fd4a:	2140      	movs	r1, #64	; 0x40
   2fd4c:	430a      	orrs	r2, r1
   2fd4e:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2fd50:	2314      	movs	r3, #20
   2fd52:	18fb      	adds	r3, r7, r3
   2fd54:	781a      	ldrb	r2, [r3, #0]
   2fd56:	231c      	movs	r3, #28
   2fd58:	18fb      	adds	r3, r7, r3
   2fd5a:	0011      	movs	r1, r2
   2fd5c:	0018      	movs	r0, r3
   2fd5e:	4b2a      	ldr	r3, [pc, #168]	; (2fe08 <MQTTSerialize_connect+0x260>)
   2fd60:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2fd62:	687b      	ldr	r3, [r7, #4]
   2fd64:	8b1b      	ldrh	r3, [r3, #24]
   2fd66:	001a      	movs	r2, r3
   2fd68:	231c      	movs	r3, #28
   2fd6a:	18fb      	adds	r3, r7, r3
   2fd6c:	0011      	movs	r1, r2
   2fd6e:	0018      	movs	r0, r3
   2fd70:	4b2a      	ldr	r3, [pc, #168]	; (2fe1c <MQTTSerialize_connect+0x274>)
   2fd72:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2fd74:	687b      	ldr	r3, [r7, #4]
   2fd76:	221c      	movs	r2, #28
   2fd78:	18b8      	adds	r0, r7, r2
   2fd7a:	68d9      	ldr	r1, [r3, #12]
   2fd7c:	691a      	ldr	r2, [r3, #16]
   2fd7e:	695b      	ldr	r3, [r3, #20]
   2fd80:	4c27      	ldr	r4, [pc, #156]	; (2fe20 <MQTTSerialize_connect+0x278>)
   2fd82:	47a0      	blx	r4
	if (options->willFlag)
   2fd84:	687b      	ldr	r3, [r7, #4]
   2fd86:	7edb      	ldrb	r3, [r3, #27]
   2fd88:	2b00      	cmp	r3, #0
   2fd8a:	d00f      	beq.n	2fdac <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2fd8c:	687b      	ldr	r3, [r7, #4]
   2fd8e:	221c      	movs	r2, #28
   2fd90:	18b8      	adds	r0, r7, r2
   2fd92:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2fd94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2fd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2fd98:	4c21      	ldr	r4, [pc, #132]	; (2fe20 <MQTTSerialize_connect+0x278>)
   2fd9a:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2fd9c:	687b      	ldr	r3, [r7, #4]
   2fd9e:	221c      	movs	r2, #28
   2fda0:	18b8      	adds	r0, r7, r2
   2fda2:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2fda4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2fda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2fda8:	4c1d      	ldr	r4, [pc, #116]	; (2fe20 <MQTTSerialize_connect+0x278>)
   2fdaa:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2fdac:	2314      	movs	r3, #20
   2fdae:	18fb      	adds	r3, r7, r3
   2fdb0:	781b      	ldrb	r3, [r3, #0]
   2fdb2:	227f      	movs	r2, #127	; 0x7f
   2fdb4:	4393      	bics	r3, r2
   2fdb6:	b2db      	uxtb	r3, r3
   2fdb8:	2b00      	cmp	r3, #0
   2fdba:	d007      	beq.n	2fdcc <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2fdbc:	687b      	ldr	r3, [r7, #4]
   2fdbe:	221c      	movs	r2, #28
   2fdc0:	18b8      	adds	r0, r7, r2
   2fdc2:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2fdc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2fdc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2fdc8:	4c15      	ldr	r4, [pc, #84]	; (2fe20 <MQTTSerialize_connect+0x278>)
   2fdca:	47a0      	blx	r4
	if (flags.bits.password)
   2fdcc:	2314      	movs	r3, #20
   2fdce:	18fb      	adds	r3, r7, r3
   2fdd0:	781b      	ldrb	r3, [r3, #0]
   2fdd2:	2240      	movs	r2, #64	; 0x40
   2fdd4:	4013      	ands	r3, r2
   2fdd6:	b2db      	uxtb	r3, r3
   2fdd8:	2b00      	cmp	r3, #0
   2fdda:	d007      	beq.n	2fdec <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2fddc:	687b      	ldr	r3, [r7, #4]
   2fdde:	221c      	movs	r2, #28
   2fde0:	18b8      	adds	r0, r7, r2
   2fde2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2fde4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2fde6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2fde8:	4c0d      	ldr	r4, [pc, #52]	; (2fe20 <MQTTSerialize_connect+0x278>)
   2fdea:	47a0      	blx	r4

	rc = ptr - buf;
   2fdec:	69fb      	ldr	r3, [r7, #28]
   2fdee:	001a      	movs	r2, r3
   2fdf0:	68fb      	ldr	r3, [r7, #12]
   2fdf2:	1ad3      	subs	r3, r2, r3
   2fdf4:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2fdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fdf8:	0018      	movs	r0, r3
   2fdfa:	46bd      	mov	sp, r7
   2fdfc:	b00b      	add	sp, #44	; 0x2c
   2fdfe:	bd90      	pop	{r4, r7, pc}
   2fe00:	0002fae1 	.word	0x0002fae1
   2fe04:	00030275 	.word	0x00030275
   2fe08:	00030397 	.word	0x00030397
   2fe0c:	0003017d 	.word	0x0003017d
   2fe10:	00039d60 	.word	0x00039d60
   2fe14:	00030419 	.word	0x00030419
   2fe18:	00039d68 	.word	0x00039d68
   2fe1c:	000303c1 	.word	0x000303c1
   2fe20:	00030469 	.word	0x00030469

0002fe24 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2fe24:	b580      	push	{r7, lr}
   2fe26:	b08a      	sub	sp, #40	; 0x28
   2fe28:	af00      	add	r7, sp, #0
   2fe2a:	60f8      	str	r0, [r7, #12]
   2fe2c:	60b9      	str	r1, [r7, #8]
   2fe2e:	607a      	str	r2, [r7, #4]
   2fe30:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fe32:	2300      	movs	r3, #0
   2fe34:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fe36:	687b      	ldr	r3, [r7, #4]
   2fe38:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fe3a:	2300      	movs	r3, #0
   2fe3c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fe3e:	2300      	movs	r3, #0
   2fe40:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2fe42:	2300      	movs	r3, #0
   2fe44:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fe46:	2318      	movs	r3, #24
   2fe48:	18fb      	adds	r3, r7, r3
   2fe4a:	0018      	movs	r0, r3
   2fe4c:	4b25      	ldr	r3, [pc, #148]	; (2fee4 <MQTTDeserialize_connack+0xc0>)
   2fe4e:	4798      	blx	r3
   2fe50:	0003      	movs	r3, r0
   2fe52:	001a      	movs	r2, r3
   2fe54:	231c      	movs	r3, #28
   2fe56:	18fb      	adds	r3, r7, r3
   2fe58:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2fe5a:	231c      	movs	r3, #28
   2fe5c:	18fb      	adds	r3, r7, r3
   2fe5e:	781b      	ldrb	r3, [r3, #0]
   2fe60:	220f      	movs	r2, #15
   2fe62:	4393      	bics	r3, r2
   2fe64:	b2db      	uxtb	r3, r3
   2fe66:	2b20      	cmp	r3, #32
   2fe68:	d134      	bne.n	2fed4 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fe6a:	69bb      	ldr	r3, [r7, #24]
   2fe6c:	2214      	movs	r2, #20
   2fe6e:	18ba      	adds	r2, r7, r2
   2fe70:	0011      	movs	r1, r2
   2fe72:	0018      	movs	r0, r3
   2fe74:	4b1c      	ldr	r3, [pc, #112]	; (2fee8 <MQTTDeserialize_connack+0xc4>)
   2fe76:	4798      	blx	r3
   2fe78:	0003      	movs	r3, r0
   2fe7a:	627b      	str	r3, [r7, #36]	; 0x24
   2fe7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fe7e:	69bb      	ldr	r3, [r7, #24]
   2fe80:	189b      	adds	r3, r3, r2
   2fe82:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fe84:	69bb      	ldr	r3, [r7, #24]
   2fe86:	697a      	ldr	r2, [r7, #20]
   2fe88:	189b      	adds	r3, r3, r2
   2fe8a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2fe8c:	6a3b      	ldr	r3, [r7, #32]
   2fe8e:	69ba      	ldr	r2, [r7, #24]
   2fe90:	1a9b      	subs	r3, r3, r2
   2fe92:	2b01      	cmp	r3, #1
   2fe94:	dd20      	ble.n	2fed8 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2fe96:	2318      	movs	r3, #24
   2fe98:	18fb      	adds	r3, r7, r3
   2fe9a:	0018      	movs	r0, r3
   2fe9c:	4b11      	ldr	r3, [pc, #68]	; (2fee4 <MQTTDeserialize_connack+0xc0>)
   2fe9e:	4798      	blx	r3
   2fea0:	0003      	movs	r3, r0
   2fea2:	001a      	movs	r2, r3
   2fea4:	2310      	movs	r3, #16
   2fea6:	18fb      	adds	r3, r7, r3
   2fea8:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2feaa:	2310      	movs	r3, #16
   2feac:	18fb      	adds	r3, r7, r3
   2feae:	781b      	ldrb	r3, [r3, #0]
   2feb0:	061b      	lsls	r3, r3, #24
   2feb2:	0fdb      	lsrs	r3, r3, #31
   2feb4:	b2db      	uxtb	r3, r3
   2feb6:	001a      	movs	r2, r3
   2feb8:	68fb      	ldr	r3, [r7, #12]
   2feba:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2febc:	2318      	movs	r3, #24
   2febe:	18fb      	adds	r3, r7, r3
   2fec0:	0018      	movs	r0, r3
   2fec2:	4b08      	ldr	r3, [pc, #32]	; (2fee4 <MQTTDeserialize_connack+0xc0>)
   2fec4:	4798      	blx	r3
   2fec6:	0003      	movs	r3, r0
   2fec8:	001a      	movs	r2, r3
   2feca:	68bb      	ldr	r3, [r7, #8]
   2fecc:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2fece:	2301      	movs	r3, #1
   2fed0:	627b      	str	r3, [r7, #36]	; 0x24
   2fed2:	e002      	b.n	2feda <MQTTDeserialize_connack+0xb6>
		goto exit;
   2fed4:	46c0      	nop			; (mov r8, r8)
   2fed6:	e000      	b.n	2feda <MQTTDeserialize_connack+0xb6>
		goto exit;
   2fed8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fedc:	0018      	movs	r0, r3
   2fede:	46bd      	mov	sp, r7
   2fee0:	b00a      	add	sp, #40	; 0x28
   2fee2:	bd80      	pop	{r7, pc}
   2fee4:	0003036b 	.word	0x0003036b
   2fee8:	00030305 	.word	0x00030305

0002feec <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2feec:	b580      	push	{r7, lr}
   2feee:	b088      	sub	sp, #32
   2fef0:	af00      	add	r7, sp, #0
   2fef2:	60f8      	str	r0, [r7, #12]
   2fef4:	60b9      	str	r1, [r7, #8]
   2fef6:	1dfb      	adds	r3, r7, #7
   2fef8:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2fefa:	2300      	movs	r3, #0
   2fefc:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2fefe:	2301      	movs	r3, #1
   2ff00:	425b      	negs	r3, r3
   2ff02:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2ff04:	68fb      	ldr	r3, [r7, #12]
   2ff06:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2ff08:	68bb      	ldr	r3, [r7, #8]
   2ff0a:	2b01      	cmp	r3, #1
   2ff0c:	dc03      	bgt.n	2ff16 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2ff0e:	2302      	movs	r3, #2
   2ff10:	425b      	negs	r3, r3
   2ff12:	61fb      	str	r3, [r7, #28]
		goto exit;
   2ff14:	e029      	b.n	2ff6a <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2ff16:	2318      	movs	r3, #24
   2ff18:	18fb      	adds	r3, r7, r3
   2ff1a:	2200      	movs	r2, #0
   2ff1c:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2ff1e:	1dfb      	adds	r3, r7, #7
   2ff20:	781b      	ldrb	r3, [r3, #0]
   2ff22:	220f      	movs	r2, #15
   2ff24:	4013      	ands	r3, r2
   2ff26:	b2da      	uxtb	r2, r3
   2ff28:	2318      	movs	r3, #24
   2ff2a:	18fb      	adds	r3, r7, r3
   2ff2c:	0110      	lsls	r0, r2, #4
   2ff2e:	781a      	ldrb	r2, [r3, #0]
   2ff30:	210f      	movs	r1, #15
   2ff32:	400a      	ands	r2, r1
   2ff34:	1c11      	adds	r1, r2, #0
   2ff36:	1c02      	adds	r2, r0, #0
   2ff38:	430a      	orrs	r2, r1
   2ff3a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2ff3c:	2318      	movs	r3, #24
   2ff3e:	18fb      	adds	r3, r7, r3
   2ff40:	781a      	ldrb	r2, [r3, #0]
   2ff42:	2314      	movs	r3, #20
   2ff44:	18fb      	adds	r3, r7, r3
   2ff46:	0011      	movs	r1, r2
   2ff48:	0018      	movs	r0, r3
   2ff4a:	4b0a      	ldr	r3, [pc, #40]	; (2ff74 <MQTTSerialize_zero+0x88>)
   2ff4c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2ff4e:	697b      	ldr	r3, [r7, #20]
   2ff50:	2100      	movs	r1, #0
   2ff52:	0018      	movs	r0, r3
   2ff54:	4b08      	ldr	r3, [pc, #32]	; (2ff78 <MQTTSerialize_zero+0x8c>)
   2ff56:	4798      	blx	r3
   2ff58:	0002      	movs	r2, r0
   2ff5a:	697b      	ldr	r3, [r7, #20]
   2ff5c:	189b      	adds	r3, r3, r2
   2ff5e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2ff60:	697b      	ldr	r3, [r7, #20]
   2ff62:	001a      	movs	r2, r3
   2ff64:	68fb      	ldr	r3, [r7, #12]
   2ff66:	1ad3      	subs	r3, r2, r3
   2ff68:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2ff6a:	69fb      	ldr	r3, [r7, #28]
}
   2ff6c:	0018      	movs	r0, r3
   2ff6e:	46bd      	mov	sp, r7
   2ff70:	b008      	add	sp, #32
   2ff72:	bd80      	pop	{r7, pc}
   2ff74:	00030397 	.word	0x00030397
   2ff78:	0003017d 	.word	0x0003017d

0002ff7c <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2ff7c:	b580      	push	{r7, lr}
   2ff7e:	b082      	sub	sp, #8
   2ff80:	af00      	add	r7, sp, #0
   2ff82:	6078      	str	r0, [r7, #4]
   2ff84:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2ff86:	6839      	ldr	r1, [r7, #0]
   2ff88:	687b      	ldr	r3, [r7, #4]
   2ff8a:	220e      	movs	r2, #14
   2ff8c:	0018      	movs	r0, r3
   2ff8e:	4b03      	ldr	r3, [pc, #12]	; (2ff9c <MQTTSerialize_disconnect+0x20>)
   2ff90:	4798      	blx	r3
   2ff92:	0003      	movs	r3, r0
}
   2ff94:	0018      	movs	r0, r3
   2ff96:	46bd      	mov	sp, r7
   2ff98:	b002      	add	sp, #8
   2ff9a:	bd80      	pop	{r7, pc}
   2ff9c:	0002feed 	.word	0x0002feed

0002ffa0 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2ffa0:	b580      	push	{r7, lr}
   2ffa2:	b082      	sub	sp, #8
   2ffa4:	af00      	add	r7, sp, #0
   2ffa6:	6078      	str	r0, [r7, #4]
   2ffa8:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2ffaa:	6839      	ldr	r1, [r7, #0]
   2ffac:	687b      	ldr	r3, [r7, #4]
   2ffae:	220c      	movs	r2, #12
   2ffb0:	0018      	movs	r0, r3
   2ffb2:	4b03      	ldr	r3, [pc, #12]	; (2ffc0 <MQTTSerialize_pingreq+0x20>)
   2ffb4:	4798      	blx	r3
   2ffb6:	0003      	movs	r3, r0
}
   2ffb8:	0018      	movs	r0, r3
   2ffba:	46bd      	mov	sp, r7
   2ffbc:	b002      	add	sp, #8
   2ffbe:	bd80      	pop	{r7, pc}
   2ffc0:	0002feed 	.word	0x0002feed

0002ffc4 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2ffc4:	b580      	push	{r7, lr}
   2ffc6:	b08a      	sub	sp, #40	; 0x28
   2ffc8:	af00      	add	r7, sp, #0
   2ffca:	60f8      	str	r0, [r7, #12]
   2ffcc:	60b9      	str	r1, [r7, #8]
   2ffce:	607a      	str	r2, [r7, #4]
   2ffd0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2ffd2:	2300      	movs	r3, #0
   2ffd4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2ffd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ffd8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2ffda:	2300      	movs	r3, #0
   2ffdc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2ffde:	2300      	movs	r3, #0
   2ffe0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2ffe2:	2300      	movs	r3, #0
   2ffe4:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2ffe6:	2318      	movs	r3, #24
   2ffe8:	18fb      	adds	r3, r7, r3
   2ffea:	0018      	movs	r0, r3
   2ffec:	4b32      	ldr	r3, [pc, #200]	; (300b8 <MQTTDeserialize_publish+0xf4>)
   2ffee:	4798      	blx	r3
   2fff0:	0003      	movs	r3, r0
   2fff2:	001a      	movs	r2, r3
   2fff4:	231c      	movs	r3, #28
   2fff6:	18fb      	adds	r3, r7, r3
   2fff8:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2fffa:	231c      	movs	r3, #28
   2fffc:	18fb      	adds	r3, r7, r3
   2fffe:	781b      	ldrb	r3, [r3, #0]
   30000:	220f      	movs	r2, #15
   30002:	4393      	bics	r3, r2
   30004:	b2db      	uxtb	r3, r3
   30006:	2b30      	cmp	r3, #48	; 0x30
   30008:	d150      	bne.n	300ac <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   3000a:	231c      	movs	r3, #28
   3000c:	18fb      	adds	r3, r7, r3
   3000e:	781b      	ldrb	r3, [r3, #0]
   30010:	071b      	lsls	r3, r3, #28
   30012:	0fdb      	lsrs	r3, r3, #31
   30014:	b2db      	uxtb	r3, r3
   30016:	001a      	movs	r2, r3
   30018:	68fb      	ldr	r3, [r7, #12]
   3001a:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   3001c:	231c      	movs	r3, #28
   3001e:	18fb      	adds	r3, r7, r3
   30020:	781b      	ldrb	r3, [r3, #0]
   30022:	075b      	lsls	r3, r3, #29
   30024:	0f9b      	lsrs	r3, r3, #30
   30026:	b2db      	uxtb	r3, r3
   30028:	001a      	movs	r2, r3
   3002a:	68bb      	ldr	r3, [r7, #8]
   3002c:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   3002e:	231c      	movs	r3, #28
   30030:	18fb      	adds	r3, r7, r3
   30032:	781b      	ldrb	r3, [r3, #0]
   30034:	07db      	lsls	r3, r3, #31
   30036:	0fdb      	lsrs	r3, r3, #31
   30038:	b2db      	uxtb	r3, r3
   3003a:	001a      	movs	r2, r3
   3003c:	687b      	ldr	r3, [r7, #4]
   3003e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30040:	69bb      	ldr	r3, [r7, #24]
   30042:	2214      	movs	r2, #20
   30044:	18ba      	adds	r2, r7, r2
   30046:	0011      	movs	r1, r2
   30048:	0018      	movs	r0, r3
   3004a:	4b1c      	ldr	r3, [pc, #112]	; (300bc <MQTTDeserialize_publish+0xf8>)
   3004c:	4798      	blx	r3
   3004e:	0003      	movs	r3, r0
   30050:	627b      	str	r3, [r7, #36]	; 0x24
   30052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30054:	69bb      	ldr	r3, [r7, #24]
   30056:	189b      	adds	r3, r3, r2
   30058:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   3005a:	69bb      	ldr	r3, [r7, #24]
   3005c:	697a      	ldr	r2, [r7, #20]
   3005e:	189b      	adds	r3, r3, r2
   30060:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30062:	6a3a      	ldr	r2, [r7, #32]
   30064:	2318      	movs	r3, #24
   30066:	18f9      	adds	r1, r7, r3
   30068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3006a:	0018      	movs	r0, r3
   3006c:	4b14      	ldr	r3, [pc, #80]	; (300c0 <MQTTDeserialize_publish+0xfc>)
   3006e:	4798      	blx	r3
   30070:	1e03      	subs	r3, r0, #0
   30072:	d01c      	beq.n	300ae <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   30074:	6a3b      	ldr	r3, [r7, #32]
   30076:	69ba      	ldr	r2, [r7, #24]
   30078:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   3007a:	d418      	bmi.n	300ae <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   3007c:	68bb      	ldr	r3, [r7, #8]
   3007e:	681b      	ldr	r3, [r3, #0]
   30080:	2b00      	cmp	r3, #0
   30082:	dd08      	ble.n	30096 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   30084:	2318      	movs	r3, #24
   30086:	18fb      	adds	r3, r7, r3
   30088:	0018      	movs	r0, r3
   3008a:	4b0e      	ldr	r3, [pc, #56]	; (300c4 <MQTTDeserialize_publish+0x100>)
   3008c:	4798      	blx	r3
   3008e:	0003      	movs	r3, r0
   30090:	b29a      	uxth	r2, r3
   30092:	683b      	ldr	r3, [r7, #0]
   30094:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   30096:	6a3b      	ldr	r3, [r7, #32]
   30098:	69ba      	ldr	r2, [r7, #24]
   3009a:	1a9a      	subs	r2, r3, r2
   3009c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3009e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   300a0:	69ba      	ldr	r2, [r7, #24]
   300a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   300a4:	601a      	str	r2, [r3, #0]
	rc = 1;
   300a6:	2301      	movs	r3, #1
   300a8:	627b      	str	r3, [r7, #36]	; 0x24
   300aa:	e000      	b.n	300ae <MQTTDeserialize_publish+0xea>
		goto exit;
   300ac:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   300ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   300b0:	0018      	movs	r0, r3
   300b2:	46bd      	mov	sp, r7
   300b4:	b00a      	add	sp, #40	; 0x28
   300b6:	bd80      	pop	{r7, pc}
   300b8:	0003036b 	.word	0x0003036b
   300bc:	00030305 	.word	0x00030305
   300c0:	000304e9 	.word	0x000304e9
   300c4:	00030339 	.word	0x00030339

000300c8 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   300c8:	b580      	push	{r7, lr}
   300ca:	b08a      	sub	sp, #40	; 0x28
   300cc:	af00      	add	r7, sp, #0
   300ce:	60f8      	str	r0, [r7, #12]
   300d0:	60b9      	str	r1, [r7, #8]
   300d2:	607a      	str	r2, [r7, #4]
   300d4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   300d6:	2300      	movs	r3, #0
   300d8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   300da:	683b      	ldr	r3, [r7, #0]
   300dc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   300de:	2300      	movs	r3, #0
   300e0:	623b      	str	r3, [r7, #32]
	int rc = 0;
   300e2:	2300      	movs	r3, #0
   300e4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   300e6:	2318      	movs	r3, #24
   300e8:	18fb      	adds	r3, r7, r3
   300ea:	0018      	movs	r0, r3
   300ec:	4b20      	ldr	r3, [pc, #128]	; (30170 <MQTTDeserialize_ack+0xa8>)
   300ee:	4798      	blx	r3
   300f0:	0003      	movs	r3, r0
   300f2:	001a      	movs	r2, r3
   300f4:	231c      	movs	r3, #28
   300f6:	18fb      	adds	r3, r7, r3
   300f8:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   300fa:	231c      	movs	r3, #28
   300fc:	18fb      	adds	r3, r7, r3
   300fe:	781b      	ldrb	r3, [r3, #0]
   30100:	071b      	lsls	r3, r3, #28
   30102:	0fdb      	lsrs	r3, r3, #31
   30104:	b2db      	uxtb	r3, r3
   30106:	001a      	movs	r2, r3
   30108:	68bb      	ldr	r3, [r7, #8]
   3010a:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   3010c:	231c      	movs	r3, #28
   3010e:	18fb      	adds	r3, r7, r3
   30110:	781b      	ldrb	r3, [r3, #0]
   30112:	061b      	lsls	r3, r3, #24
   30114:	0f1b      	lsrs	r3, r3, #28
   30116:	b2db      	uxtb	r3, r3
   30118:	001a      	movs	r2, r3
   3011a:	68fb      	ldr	r3, [r7, #12]
   3011c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   3011e:	69bb      	ldr	r3, [r7, #24]
   30120:	2214      	movs	r2, #20
   30122:	18ba      	adds	r2, r7, r2
   30124:	0011      	movs	r1, r2
   30126:	0018      	movs	r0, r3
   30128:	4b12      	ldr	r3, [pc, #72]	; (30174 <MQTTDeserialize_ack+0xac>)
   3012a:	4798      	blx	r3
   3012c:	0003      	movs	r3, r0
   3012e:	627b      	str	r3, [r7, #36]	; 0x24
   30130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30132:	69bb      	ldr	r3, [r7, #24]
   30134:	189b      	adds	r3, r3, r2
   30136:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30138:	69bb      	ldr	r3, [r7, #24]
   3013a:	697a      	ldr	r2, [r7, #20]
   3013c:	189b      	adds	r3, r3, r2
   3013e:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   30140:	6a3b      	ldr	r3, [r7, #32]
   30142:	69ba      	ldr	r2, [r7, #24]
   30144:	1a9b      	subs	r3, r3, r2
   30146:	2b01      	cmp	r3, #1
   30148:	dd0b      	ble.n	30162 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   3014a:	2318      	movs	r3, #24
   3014c:	18fb      	adds	r3, r7, r3
   3014e:	0018      	movs	r0, r3
   30150:	4b09      	ldr	r3, [pc, #36]	; (30178 <MQTTDeserialize_ack+0xb0>)
   30152:	4798      	blx	r3
   30154:	0003      	movs	r3, r0
   30156:	b29a      	uxth	r2, r3
   30158:	687b      	ldr	r3, [r7, #4]
   3015a:	801a      	strh	r2, [r3, #0]

	rc = 1;
   3015c:	2301      	movs	r3, #1
   3015e:	627b      	str	r3, [r7, #36]	; 0x24
   30160:	e000      	b.n	30164 <MQTTDeserialize_ack+0x9c>
		goto exit;
   30162:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30166:	0018      	movs	r0, r3
   30168:	46bd      	mov	sp, r7
   3016a:	b00a      	add	sp, #40	; 0x28
   3016c:	bd80      	pop	{r7, pc}
   3016e:	46c0      	nop			; (mov r8, r8)
   30170:	0003036b 	.word	0x0003036b
   30174:	00030305 	.word	0x00030305
   30178:	00030339 	.word	0x00030339

0003017c <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   3017c:	b580      	push	{r7, lr}
   3017e:	b084      	sub	sp, #16
   30180:	af00      	add	r7, sp, #0
   30182:	6078      	str	r0, [r7, #4]
   30184:	6039      	str	r1, [r7, #0]
	int rc = 0;
   30186:	2300      	movs	r3, #0
   30188:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   3018a:	683b      	ldr	r3, [r7, #0]
   3018c:	4a17      	ldr	r2, [pc, #92]	; (301ec <MQTTPacket_encode+0x70>)
   3018e:	4013      	ands	r3, r2
   30190:	d504      	bpl.n	3019c <MQTTPacket_encode+0x20>
   30192:	3b01      	subs	r3, #1
   30194:	2280      	movs	r2, #128	; 0x80
   30196:	4252      	negs	r2, r2
   30198:	4313      	orrs	r3, r2
   3019a:	3301      	adds	r3, #1
   3019c:	001a      	movs	r2, r3
   3019e:	230b      	movs	r3, #11
   301a0:	18fb      	adds	r3, r7, r3
   301a2:	701a      	strb	r2, [r3, #0]
		length /= 128;
   301a4:	683b      	ldr	r3, [r7, #0]
   301a6:	2b00      	cmp	r3, #0
   301a8:	da00      	bge.n	301ac <MQTTPacket_encode+0x30>
   301aa:	337f      	adds	r3, #127	; 0x7f
   301ac:	11db      	asrs	r3, r3, #7
   301ae:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   301b0:	683b      	ldr	r3, [r7, #0]
   301b2:	2b00      	cmp	r3, #0
   301b4:	dd08      	ble.n	301c8 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   301b6:	230b      	movs	r3, #11
   301b8:	18fb      	adds	r3, r7, r3
   301ba:	220b      	movs	r2, #11
   301bc:	18ba      	adds	r2, r7, r2
   301be:	7812      	ldrb	r2, [r2, #0]
   301c0:	2180      	movs	r1, #128	; 0x80
   301c2:	4249      	negs	r1, r1
   301c4:	430a      	orrs	r2, r1
   301c6:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   301c8:	68fb      	ldr	r3, [r7, #12]
   301ca:	1c5a      	adds	r2, r3, #1
   301cc:	60fa      	str	r2, [r7, #12]
   301ce:	001a      	movs	r2, r3
   301d0:	687b      	ldr	r3, [r7, #4]
   301d2:	189b      	adds	r3, r3, r2
   301d4:	220b      	movs	r2, #11
   301d6:	18ba      	adds	r2, r7, r2
   301d8:	7812      	ldrb	r2, [r2, #0]
   301da:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   301dc:	683b      	ldr	r3, [r7, #0]
   301de:	2b00      	cmp	r3, #0
   301e0:	dcd3      	bgt.n	3018a <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   301e2:	68fb      	ldr	r3, [r7, #12]
}
   301e4:	0018      	movs	r0, r3
   301e6:	46bd      	mov	sp, r7
   301e8:	b004      	add	sp, #16
   301ea:	bd80      	pop	{r7, pc}
   301ec:	8000007f 	.word	0x8000007f

000301f0 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   301f0:	b580      	push	{r7, lr}
   301f2:	b086      	sub	sp, #24
   301f4:	af00      	add	r7, sp, #0
   301f6:	6078      	str	r0, [r7, #4]
   301f8:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   301fa:	2301      	movs	r3, #1
   301fc:	617b      	str	r3, [r7, #20]
	int len = 0;
   301fe:	2300      	movs	r3, #0
   30200:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   30202:	683b      	ldr	r3, [r7, #0]
   30204:	2200      	movs	r2, #0
   30206:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   30208:	2301      	movs	r3, #1
   3020a:	425b      	negs	r3, r3
   3020c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   3020e:	693b      	ldr	r3, [r7, #16]
   30210:	3301      	adds	r3, #1
   30212:	613b      	str	r3, [r7, #16]
   30214:	693b      	ldr	r3, [r7, #16]
   30216:	2b04      	cmp	r3, #4
   30218:	dd03      	ble.n	30222 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   3021a:	2301      	movs	r3, #1
   3021c:	425b      	negs	r3, r3
   3021e:	60fb      	str	r3, [r7, #12]
			goto exit;
   30220:	e022      	b.n	30268 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   30222:	230b      	movs	r3, #11
   30224:	18fa      	adds	r2, r7, r3
   30226:	687b      	ldr	r3, [r7, #4]
   30228:	2101      	movs	r1, #1
   3022a:	0010      	movs	r0, r2
   3022c:	4798      	blx	r3
   3022e:	0003      	movs	r3, r0
   30230:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   30232:	68fb      	ldr	r3, [r7, #12]
   30234:	2b01      	cmp	r3, #1
   30236:	d116      	bne.n	30266 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   30238:	683b      	ldr	r3, [r7, #0]
   3023a:	681a      	ldr	r2, [r3, #0]
   3023c:	230b      	movs	r3, #11
   3023e:	18fb      	adds	r3, r7, r3
   30240:	781b      	ldrb	r3, [r3, #0]
   30242:	0019      	movs	r1, r3
   30244:	237f      	movs	r3, #127	; 0x7f
   30246:	400b      	ands	r3, r1
   30248:	6979      	ldr	r1, [r7, #20]
   3024a:	434b      	muls	r3, r1
   3024c:	18d2      	adds	r2, r2, r3
   3024e:	683b      	ldr	r3, [r7, #0]
   30250:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   30252:	697b      	ldr	r3, [r7, #20]
   30254:	01db      	lsls	r3, r3, #7
   30256:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   30258:	230b      	movs	r3, #11
   3025a:	18fb      	adds	r3, r7, r3
   3025c:	781b      	ldrb	r3, [r3, #0]
   3025e:	b25b      	sxtb	r3, r3
   30260:	2b00      	cmp	r3, #0
   30262:	dbd1      	blt.n	30208 <MQTTPacket_decode+0x18>
   30264:	e000      	b.n	30268 <MQTTPacket_decode+0x78>
			goto exit;
   30266:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   30268:	693b      	ldr	r3, [r7, #16]
}
   3026a:	0018      	movs	r0, r3
   3026c:	46bd      	mov	sp, r7
   3026e:	b006      	add	sp, #24
   30270:	bd80      	pop	{r7, pc}
	...

00030274 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   30274:	b580      	push	{r7, lr}
   30276:	b082      	sub	sp, #8
   30278:	af00      	add	r7, sp, #0
   3027a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   3027c:	687b      	ldr	r3, [r7, #4]
   3027e:	3301      	adds	r3, #1
   30280:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   30282:	687b      	ldr	r3, [r7, #4]
   30284:	2b7f      	cmp	r3, #127	; 0x7f
   30286:	dc03      	bgt.n	30290 <MQTTPacket_len+0x1c>
		rem_len += 1;
   30288:	687b      	ldr	r3, [r7, #4]
   3028a:	3301      	adds	r3, #1
   3028c:	607b      	str	r3, [r7, #4]
   3028e:	e012      	b.n	302b6 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   30290:	687b      	ldr	r3, [r7, #4]
   30292:	4a0b      	ldr	r2, [pc, #44]	; (302c0 <MQTTPacket_len+0x4c>)
   30294:	4293      	cmp	r3, r2
   30296:	dc03      	bgt.n	302a0 <MQTTPacket_len+0x2c>
		rem_len += 2;
   30298:	687b      	ldr	r3, [r7, #4]
   3029a:	3302      	adds	r3, #2
   3029c:	607b      	str	r3, [r7, #4]
   3029e:	e00a      	b.n	302b6 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   302a0:	687b      	ldr	r3, [r7, #4]
   302a2:	4a08      	ldr	r2, [pc, #32]	; (302c4 <MQTTPacket_len+0x50>)
   302a4:	4293      	cmp	r3, r2
   302a6:	dc03      	bgt.n	302b0 <MQTTPacket_len+0x3c>
		rem_len += 3;
   302a8:	687b      	ldr	r3, [r7, #4]
   302aa:	3303      	adds	r3, #3
   302ac:	607b      	str	r3, [r7, #4]
   302ae:	e002      	b.n	302b6 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   302b0:	687b      	ldr	r3, [r7, #4]
   302b2:	3304      	adds	r3, #4
   302b4:	607b      	str	r3, [r7, #4]
	return rem_len;
   302b6:	687b      	ldr	r3, [r7, #4]
}
   302b8:	0018      	movs	r0, r3
   302ba:	46bd      	mov	sp, r7
   302bc:	b002      	add	sp, #8
   302be:	bd80      	pop	{r7, pc}
   302c0:	00003fff 	.word	0x00003fff
   302c4:	001ffffe 	.word	0x001ffffe

000302c8 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   302c8:	b580      	push	{r7, lr}
   302ca:	b084      	sub	sp, #16
   302cc:	af00      	add	r7, sp, #0
   302ce:	6078      	str	r0, [r7, #4]
   302d0:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   302d2:	2300      	movs	r3, #0
   302d4:	60fb      	str	r3, [r7, #12]
   302d6:	e00a      	b.n	302ee <bufchar+0x26>
		*c = *bufptr++;
   302d8:	4b09      	ldr	r3, [pc, #36]	; (30300 <bufchar+0x38>)
   302da:	681b      	ldr	r3, [r3, #0]
   302dc:	1c59      	adds	r1, r3, #1
   302de:	4a08      	ldr	r2, [pc, #32]	; (30300 <bufchar+0x38>)
   302e0:	6011      	str	r1, [r2, #0]
   302e2:	781a      	ldrb	r2, [r3, #0]
   302e4:	687b      	ldr	r3, [r7, #4]
   302e6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   302e8:	68fb      	ldr	r3, [r7, #12]
   302ea:	3301      	adds	r3, #1
   302ec:	60fb      	str	r3, [r7, #12]
   302ee:	68fa      	ldr	r2, [r7, #12]
   302f0:	683b      	ldr	r3, [r7, #0]
   302f2:	429a      	cmp	r2, r3
   302f4:	dbf0      	blt.n	302d8 <bufchar+0x10>
	return count;
   302f6:	683b      	ldr	r3, [r7, #0]
}
   302f8:	0018      	movs	r0, r3
   302fa:	46bd      	mov	sp, r7
   302fc:	b004      	add	sp, #16
   302fe:	bd80      	pop	{r7, pc}
   30300:	20004570 	.word	0x20004570

00030304 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   30304:	b580      	push	{r7, lr}
   30306:	b082      	sub	sp, #8
   30308:	af00      	add	r7, sp, #0
   3030a:	6078      	str	r0, [r7, #4]
   3030c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   3030e:	4b07      	ldr	r3, [pc, #28]	; (3032c <MQTTPacket_decodeBuf+0x28>)
   30310:	687a      	ldr	r2, [r7, #4]
   30312:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   30314:	683a      	ldr	r2, [r7, #0]
   30316:	4b06      	ldr	r3, [pc, #24]	; (30330 <MQTTPacket_decodeBuf+0x2c>)
   30318:	0011      	movs	r1, r2
   3031a:	0018      	movs	r0, r3
   3031c:	4b05      	ldr	r3, [pc, #20]	; (30334 <MQTTPacket_decodeBuf+0x30>)
   3031e:	4798      	blx	r3
   30320:	0003      	movs	r3, r0
}
   30322:	0018      	movs	r0, r3
   30324:	46bd      	mov	sp, r7
   30326:	b002      	add	sp, #8
   30328:	bd80      	pop	{r7, pc}
   3032a:	46c0      	nop			; (mov r8, r8)
   3032c:	20004570 	.word	0x20004570
   30330:	000302c9 	.word	0x000302c9
   30334:	000301f1 	.word	0x000301f1

00030338 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   30338:	b580      	push	{r7, lr}
   3033a:	b084      	sub	sp, #16
   3033c:	af00      	add	r7, sp, #0
   3033e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   30340:	687b      	ldr	r3, [r7, #4]
   30342:	681b      	ldr	r3, [r3, #0]
   30344:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   30346:	68fb      	ldr	r3, [r7, #12]
   30348:	781b      	ldrb	r3, [r3, #0]
   3034a:	021b      	lsls	r3, r3, #8
   3034c:	68fa      	ldr	r2, [r7, #12]
   3034e:	3201      	adds	r2, #1
   30350:	7812      	ldrb	r2, [r2, #0]
   30352:	189b      	adds	r3, r3, r2
   30354:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   30356:	687b      	ldr	r3, [r7, #4]
   30358:	681b      	ldr	r3, [r3, #0]
   3035a:	1c9a      	adds	r2, r3, #2
   3035c:	687b      	ldr	r3, [r7, #4]
   3035e:	601a      	str	r2, [r3, #0]
	return len;
   30360:	68bb      	ldr	r3, [r7, #8]
}
   30362:	0018      	movs	r0, r3
   30364:	46bd      	mov	sp, r7
   30366:	b004      	add	sp, #16
   30368:	bd80      	pop	{r7, pc}

0003036a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   3036a:	b580      	push	{r7, lr}
   3036c:	b084      	sub	sp, #16
   3036e:	af00      	add	r7, sp, #0
   30370:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   30372:	687b      	ldr	r3, [r7, #4]
   30374:	681a      	ldr	r2, [r3, #0]
   30376:	230f      	movs	r3, #15
   30378:	18fb      	adds	r3, r7, r3
   3037a:	7812      	ldrb	r2, [r2, #0]
   3037c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   3037e:	687b      	ldr	r3, [r7, #4]
   30380:	681b      	ldr	r3, [r3, #0]
   30382:	1c5a      	adds	r2, r3, #1
   30384:	687b      	ldr	r3, [r7, #4]
   30386:	601a      	str	r2, [r3, #0]
	return c;
   30388:	230f      	movs	r3, #15
   3038a:	18fb      	adds	r3, r7, r3
   3038c:	781b      	ldrb	r3, [r3, #0]
}
   3038e:	0018      	movs	r0, r3
   30390:	46bd      	mov	sp, r7
   30392:	b004      	add	sp, #16
   30394:	bd80      	pop	{r7, pc}

00030396 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   30396:	b580      	push	{r7, lr}
   30398:	b082      	sub	sp, #8
   3039a:	af00      	add	r7, sp, #0
   3039c:	6078      	str	r0, [r7, #4]
   3039e:	000a      	movs	r2, r1
   303a0:	1cfb      	adds	r3, r7, #3
   303a2:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   303a4:	687b      	ldr	r3, [r7, #4]
   303a6:	681b      	ldr	r3, [r3, #0]
   303a8:	1cfa      	adds	r2, r7, #3
   303aa:	7812      	ldrb	r2, [r2, #0]
   303ac:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   303ae:	687b      	ldr	r3, [r7, #4]
   303b0:	681b      	ldr	r3, [r3, #0]
   303b2:	1c5a      	adds	r2, r3, #1
   303b4:	687b      	ldr	r3, [r7, #4]
   303b6:	601a      	str	r2, [r3, #0]
}
   303b8:	46c0      	nop			; (mov r8, r8)
   303ba:	46bd      	mov	sp, r7
   303bc:	b002      	add	sp, #8
   303be:	bd80      	pop	{r7, pc}

000303c0 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   303c0:	b580      	push	{r7, lr}
   303c2:	b082      	sub	sp, #8
   303c4:	af00      	add	r7, sp, #0
   303c6:	6078      	str	r0, [r7, #4]
   303c8:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   303ca:	687b      	ldr	r3, [r7, #4]
   303cc:	681a      	ldr	r2, [r3, #0]
   303ce:	683b      	ldr	r3, [r7, #0]
   303d0:	2b00      	cmp	r3, #0
   303d2:	da00      	bge.n	303d6 <writeInt+0x16>
   303d4:	33ff      	adds	r3, #255	; 0xff
   303d6:	121b      	asrs	r3, r3, #8
   303d8:	b2db      	uxtb	r3, r3
   303da:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   303dc:	687b      	ldr	r3, [r7, #4]
   303de:	681b      	ldr	r3, [r3, #0]
   303e0:	1c5a      	adds	r2, r3, #1
   303e2:	687b      	ldr	r3, [r7, #4]
   303e4:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   303e6:	687b      	ldr	r3, [r7, #4]
   303e8:	681a      	ldr	r2, [r3, #0]
   303ea:	683b      	ldr	r3, [r7, #0]
   303ec:	4908      	ldr	r1, [pc, #32]	; (30410 <writeInt+0x50>)
   303ee:	400b      	ands	r3, r1
   303f0:	d503      	bpl.n	303fa <writeInt+0x3a>
   303f2:	3b01      	subs	r3, #1
   303f4:	4907      	ldr	r1, [pc, #28]	; (30414 <writeInt+0x54>)
   303f6:	430b      	orrs	r3, r1
   303f8:	3301      	adds	r3, #1
   303fa:	b2db      	uxtb	r3, r3
   303fc:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   303fe:	687b      	ldr	r3, [r7, #4]
   30400:	681b      	ldr	r3, [r3, #0]
   30402:	1c5a      	adds	r2, r3, #1
   30404:	687b      	ldr	r3, [r7, #4]
   30406:	601a      	str	r2, [r3, #0]
}
   30408:	46c0      	nop			; (mov r8, r8)
   3040a:	46bd      	mov	sp, r7
   3040c:	b002      	add	sp, #8
   3040e:	bd80      	pop	{r7, pc}
   30410:	800000ff 	.word	0x800000ff
   30414:	ffffff00 	.word	0xffffff00

00030418 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   30418:	b580      	push	{r7, lr}
   3041a:	b084      	sub	sp, #16
   3041c:	af00      	add	r7, sp, #0
   3041e:	6078      	str	r0, [r7, #4]
   30420:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   30422:	683b      	ldr	r3, [r7, #0]
   30424:	0018      	movs	r0, r3
   30426:	4b0d      	ldr	r3, [pc, #52]	; (3045c <writeCString+0x44>)
   30428:	4798      	blx	r3
   3042a:	0003      	movs	r3, r0
   3042c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   3042e:	68fa      	ldr	r2, [r7, #12]
   30430:	687b      	ldr	r3, [r7, #4]
   30432:	0011      	movs	r1, r2
   30434:	0018      	movs	r0, r3
   30436:	4b0a      	ldr	r3, [pc, #40]	; (30460 <writeCString+0x48>)
   30438:	4798      	blx	r3
	memcpy(*pptr, string, len);
   3043a:	687b      	ldr	r3, [r7, #4]
   3043c:	681b      	ldr	r3, [r3, #0]
   3043e:	68fa      	ldr	r2, [r7, #12]
   30440:	6839      	ldr	r1, [r7, #0]
   30442:	0018      	movs	r0, r3
   30444:	4b07      	ldr	r3, [pc, #28]	; (30464 <writeCString+0x4c>)
   30446:	4798      	blx	r3
	*pptr += len;
   30448:	687b      	ldr	r3, [r7, #4]
   3044a:	681a      	ldr	r2, [r3, #0]
   3044c:	68fb      	ldr	r3, [r7, #12]
   3044e:	18d2      	adds	r2, r2, r3
   30450:	687b      	ldr	r3, [r7, #4]
   30452:	601a      	str	r2, [r3, #0]
}
   30454:	46c0      	nop			; (mov r8, r8)
   30456:	46bd      	mov	sp, r7
   30458:	b004      	add	sp, #16
   3045a:	bd80      	pop	{r7, pc}
   3045c:	00034e17 	.word	0x00034e17
   30460:	000303c1 	.word	0x000303c1
   30464:	00034a29 	.word	0x00034a29

00030468 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   30468:	b580      	push	{r7, lr}
   3046a:	b084      	sub	sp, #16
   3046c:	af00      	add	r7, sp, #0
   3046e:	60f8      	str	r0, [r7, #12]
   30470:	0038      	movs	r0, r7
   30472:	6001      	str	r1, [r0, #0]
   30474:	6042      	str	r2, [r0, #4]
   30476:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   30478:	003b      	movs	r3, r7
   3047a:	685b      	ldr	r3, [r3, #4]
   3047c:	2b00      	cmp	r3, #0
   3047e:	dd17      	ble.n	304b0 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   30480:	003b      	movs	r3, r7
   30482:	685a      	ldr	r2, [r3, #4]
   30484:	68fb      	ldr	r3, [r7, #12]
   30486:	0011      	movs	r1, r2
   30488:	0018      	movs	r0, r3
   3048a:	4b14      	ldr	r3, [pc, #80]	; (304dc <writeMQTTString+0x74>)
   3048c:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   3048e:	68fb      	ldr	r3, [r7, #12]
   30490:	6818      	ldr	r0, [r3, #0]
   30492:	003b      	movs	r3, r7
   30494:	6899      	ldr	r1, [r3, #8]
   30496:	003b      	movs	r3, r7
   30498:	685b      	ldr	r3, [r3, #4]
   3049a:	001a      	movs	r2, r3
   3049c:	4b10      	ldr	r3, [pc, #64]	; (304e0 <writeMQTTString+0x78>)
   3049e:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   304a0:	68fb      	ldr	r3, [r7, #12]
   304a2:	681a      	ldr	r2, [r3, #0]
   304a4:	003b      	movs	r3, r7
   304a6:	685b      	ldr	r3, [r3, #4]
   304a8:	18d2      	adds	r2, r2, r3
   304aa:	68fb      	ldr	r3, [r7, #12]
   304ac:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   304ae:	e010      	b.n	304d2 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   304b0:	003b      	movs	r3, r7
   304b2:	681b      	ldr	r3, [r3, #0]
   304b4:	2b00      	cmp	r3, #0
   304b6:	d007      	beq.n	304c8 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   304b8:	003b      	movs	r3, r7
   304ba:	681a      	ldr	r2, [r3, #0]
   304bc:	68fb      	ldr	r3, [r7, #12]
   304be:	0011      	movs	r1, r2
   304c0:	0018      	movs	r0, r3
   304c2:	4b08      	ldr	r3, [pc, #32]	; (304e4 <writeMQTTString+0x7c>)
   304c4:	4798      	blx	r3
}
   304c6:	e004      	b.n	304d2 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   304c8:	68fb      	ldr	r3, [r7, #12]
   304ca:	2100      	movs	r1, #0
   304cc:	0018      	movs	r0, r3
   304ce:	4b03      	ldr	r3, [pc, #12]	; (304dc <writeMQTTString+0x74>)
   304d0:	4798      	blx	r3
}
   304d2:	46c0      	nop			; (mov r8, r8)
   304d4:	46bd      	mov	sp, r7
   304d6:	b004      	add	sp, #16
   304d8:	bd80      	pop	{r7, pc}
   304da:	46c0      	nop			; (mov r8, r8)
   304dc:	000303c1 	.word	0x000303c1
   304e0:	00034a29 	.word	0x00034a29
   304e4:	00030419 	.word	0x00030419

000304e8 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   304e8:	b580      	push	{r7, lr}
   304ea:	b086      	sub	sp, #24
   304ec:	af00      	add	r7, sp, #0
   304ee:	60f8      	str	r0, [r7, #12]
   304f0:	60b9      	str	r1, [r7, #8]
   304f2:	607a      	str	r2, [r7, #4]
	int rc = 0;
   304f4:	2300      	movs	r3, #0
   304f6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   304f8:	687a      	ldr	r2, [r7, #4]
   304fa:	68bb      	ldr	r3, [r7, #8]
   304fc:	681b      	ldr	r3, [r3, #0]
   304fe:	1ad3      	subs	r3, r2, r3
   30500:	2b01      	cmp	r3, #1
   30502:	dd1b      	ble.n	3053c <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   30504:	68bb      	ldr	r3, [r7, #8]
   30506:	0018      	movs	r0, r3
   30508:	4b10      	ldr	r3, [pc, #64]	; (3054c <readMQTTLenString+0x64>)
   3050a:	4798      	blx	r3
   3050c:	0002      	movs	r2, r0
   3050e:	68fb      	ldr	r3, [r7, #12]
   30510:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   30512:	68bb      	ldr	r3, [r7, #8]
   30514:	681a      	ldr	r2, [r3, #0]
   30516:	68fb      	ldr	r3, [r7, #12]
   30518:	685b      	ldr	r3, [r3, #4]
   3051a:	18d2      	adds	r2, r2, r3
   3051c:	687b      	ldr	r3, [r7, #4]
   3051e:	429a      	cmp	r2, r3
   30520:	d80c      	bhi.n	3053c <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   30522:	68bb      	ldr	r3, [r7, #8]
   30524:	681a      	ldr	r2, [r3, #0]
   30526:	68fb      	ldr	r3, [r7, #12]
   30528:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   3052a:	68bb      	ldr	r3, [r7, #8]
   3052c:	681a      	ldr	r2, [r3, #0]
   3052e:	68fb      	ldr	r3, [r7, #12]
   30530:	685b      	ldr	r3, [r3, #4]
   30532:	18d2      	adds	r2, r2, r3
   30534:	68bb      	ldr	r3, [r7, #8]
   30536:	601a      	str	r2, [r3, #0]
			rc = 1;
   30538:	2301      	movs	r3, #1
   3053a:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   3053c:	68fb      	ldr	r3, [r7, #12]
   3053e:	2200      	movs	r2, #0
   30540:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   30542:	697b      	ldr	r3, [r7, #20]
}
   30544:	0018      	movs	r0, r3
   30546:	46bd      	mov	sp, r7
   30548:	b006      	add	sp, #24
   3054a:	bd80      	pop	{r7, pc}
   3054c:	00030339 	.word	0x00030339

00030550 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   30550:	b580      	push	{r7, lr}
   30552:	b086      	sub	sp, #24
   30554:	af00      	add	r7, sp, #0
   30556:	1d3b      	adds	r3, r7, #4
   30558:	6018      	str	r0, [r3, #0]
   3055a:	6059      	str	r1, [r3, #4]
   3055c:	609a      	str	r2, [r3, #8]
	int rc = 0;
   3055e:	2300      	movs	r3, #0
   30560:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   30562:	1d3b      	adds	r3, r7, #4
   30564:	681b      	ldr	r3, [r3, #0]
   30566:	2b00      	cmp	r3, #0
   30568:	d007      	beq.n	3057a <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   3056a:	1d3b      	adds	r3, r7, #4
   3056c:	681b      	ldr	r3, [r3, #0]
   3056e:	0018      	movs	r0, r3
   30570:	4b06      	ldr	r3, [pc, #24]	; (3058c <MQTTstrlen+0x3c>)
   30572:	4798      	blx	r3
   30574:	0003      	movs	r3, r0
   30576:	617b      	str	r3, [r7, #20]
   30578:	e002      	b.n	30580 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   3057a:	1d3b      	adds	r3, r7, #4
   3057c:	685b      	ldr	r3, [r3, #4]
   3057e:	617b      	str	r3, [r7, #20]
	return rc;
   30580:	697b      	ldr	r3, [r7, #20]
}
   30582:	0018      	movs	r0, r3
   30584:	46bd      	mov	sp, r7
   30586:	b006      	add	sp, #24
   30588:	bd80      	pop	{r7, pc}
   3058a:	46c0      	nop			; (mov r8, r8)
   3058c:	00034e17 	.word	0x00034e17

00030590 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   30590:	b580      	push	{r7, lr}
   30592:	b086      	sub	sp, #24
   30594:	af00      	add	r7, sp, #0
   30596:	6078      	str	r0, [r7, #4]
   30598:	6039      	str	r1, [r7, #0]
	int alen = 0,
   3059a:	2300      	movs	r3, #0
   3059c:	617b      	str	r3, [r7, #20]
		blen = 0;
   3059e:	2300      	movs	r3, #0
   305a0:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   305a2:	687b      	ldr	r3, [r7, #4]
   305a4:	681b      	ldr	r3, [r3, #0]
   305a6:	2b00      	cmp	r3, #0
   305a8:	d00a      	beq.n	305c0 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   305aa:	687b      	ldr	r3, [r7, #4]
   305ac:	681b      	ldr	r3, [r3, #0]
   305ae:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   305b0:	687b      	ldr	r3, [r7, #4]
   305b2:	681b      	ldr	r3, [r3, #0]
   305b4:	0018      	movs	r0, r3
   305b6:	4b12      	ldr	r3, [pc, #72]	; (30600 <MQTTPacket_equals+0x70>)
   305b8:	4798      	blx	r3
   305ba:	0003      	movs	r3, r0
   305bc:	617b      	str	r3, [r7, #20]
   305be:	e005      	b.n	305cc <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   305c0:	687b      	ldr	r3, [r7, #4]
   305c2:	689b      	ldr	r3, [r3, #8]
   305c4:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   305c6:	687b      	ldr	r3, [r7, #4]
   305c8:	685b      	ldr	r3, [r3, #4]
   305ca:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   305cc:	683b      	ldr	r3, [r7, #0]
   305ce:	0018      	movs	r0, r3
   305d0:	4b0b      	ldr	r3, [pc, #44]	; (30600 <MQTTPacket_equals+0x70>)
   305d2:	4798      	blx	r3
   305d4:	0003      	movs	r3, r0
   305d6:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   305d8:	697a      	ldr	r2, [r7, #20]
   305da:	68fb      	ldr	r3, [r7, #12]
   305dc:	429a      	cmp	r2, r3
   305de:	d109      	bne.n	305f4 <MQTTPacket_equals+0x64>
   305e0:	697a      	ldr	r2, [r7, #20]
   305e2:	6839      	ldr	r1, [r7, #0]
   305e4:	693b      	ldr	r3, [r7, #16]
   305e6:	0018      	movs	r0, r3
   305e8:	4b06      	ldr	r3, [pc, #24]	; (30604 <MQTTPacket_equals+0x74>)
   305ea:	4798      	blx	r3
   305ec:	1e03      	subs	r3, r0, #0
   305ee:	d101      	bne.n	305f4 <MQTTPacket_equals+0x64>
   305f0:	2301      	movs	r3, #1
   305f2:	e000      	b.n	305f6 <MQTTPacket_equals+0x66>
   305f4:	2300      	movs	r3, #0
}
   305f6:	0018      	movs	r0, r3
   305f8:	46bd      	mov	sp, r7
   305fa:	b006      	add	sp, #24
   305fc:	bd80      	pop	{r7, pc}
   305fe:	46c0      	nop			; (mov r8, r8)
   30600:	00034e17 	.word	0x00034e17
   30604:	00034e25 	.word	0x00034e25

00030608 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   30608:	b580      	push	{r7, lr}
   3060a:	b086      	sub	sp, #24
   3060c:	af00      	add	r7, sp, #0
   3060e:	60f8      	str	r0, [r7, #12]
   30610:	0038      	movs	r0, r7
   30612:	6001      	str	r1, [r0, #0]
   30614:	6042      	str	r2, [r0, #4]
   30616:	6083      	str	r3, [r0, #8]
	int len = 0;
   30618:	2300      	movs	r3, #0
   3061a:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   3061c:	003b      	movs	r3, r7
   3061e:	6818      	ldr	r0, [r3, #0]
   30620:	6859      	ldr	r1, [r3, #4]
   30622:	689a      	ldr	r2, [r3, #8]
   30624:	4b09      	ldr	r3, [pc, #36]	; (3064c <MQTTSerialize_publishLength+0x44>)
   30626:	4798      	blx	r3
   30628:	0003      	movs	r3, r0
   3062a:	1c9a      	adds	r2, r3, #2
   3062c:	6a3b      	ldr	r3, [r7, #32]
   3062e:	18d3      	adds	r3, r2, r3
   30630:	697a      	ldr	r2, [r7, #20]
   30632:	18d3      	adds	r3, r2, r3
   30634:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   30636:	68fb      	ldr	r3, [r7, #12]
   30638:	2b00      	cmp	r3, #0
   3063a:	dd02      	ble.n	30642 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   3063c:	697b      	ldr	r3, [r7, #20]
   3063e:	3302      	adds	r3, #2
   30640:	617b      	str	r3, [r7, #20]
	return len;
   30642:	697b      	ldr	r3, [r7, #20]
}
   30644:	0018      	movs	r0, r3
   30646:	46bd      	mov	sp, r7
   30648:	b006      	add	sp, #24
   3064a:	bd80      	pop	{r7, pc}
   3064c:	00030551 	.word	0x00030551

00030650 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   30650:	b590      	push	{r4, r7, lr}
   30652:	b08b      	sub	sp, #44	; 0x2c
   30654:	af02      	add	r7, sp, #8
   30656:	60f8      	str	r0, [r7, #12]
   30658:	60b9      	str	r1, [r7, #8]
   3065a:	603b      	str	r3, [r7, #0]
   3065c:	1dfb      	adds	r3, r7, #7
   3065e:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   30660:	68fb      	ldr	r3, [r7, #12]
   30662:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   30664:	2300      	movs	r3, #0
   30666:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   30668:	2300      	movs	r3, #0
   3066a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   3066c:	2300      	movs	r3, #0
   3066e:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   30670:	2308      	movs	r3, #8
   30672:	2230      	movs	r2, #48	; 0x30
   30674:	4694      	mov	ip, r2
   30676:	44bc      	add	ip, r7
   30678:	4463      	add	r3, ip
   3067a:	6838      	ldr	r0, [r7, #0]
   3067c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3067e:	9200      	str	r2, [sp, #0]
   30680:	6819      	ldr	r1, [r3, #0]
   30682:	685a      	ldr	r2, [r3, #4]
   30684:	689b      	ldr	r3, [r3, #8]
   30686:	4c46      	ldr	r4, [pc, #280]	; (307a0 <MQTTSerialize_publish+0x150>)
   30688:	47a0      	blx	r4
   3068a:	0003      	movs	r3, r0
   3068c:	61bb      	str	r3, [r7, #24]
   3068e:	69bb      	ldr	r3, [r7, #24]
   30690:	0018      	movs	r0, r3
   30692:	4b44      	ldr	r3, [pc, #272]	; (307a4 <MQTTSerialize_publish+0x154>)
   30694:	4798      	blx	r3
   30696:	0002      	movs	r2, r0
   30698:	68bb      	ldr	r3, [r7, #8]
   3069a:	429a      	cmp	r2, r3
   3069c:	dd03      	ble.n	306a6 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3069e:	2302      	movs	r3, #2
   306a0:	425b      	negs	r3, r3
   306a2:	61fb      	str	r3, [r7, #28]
		goto exit;
   306a4:	e077      	b.n	30796 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   306a6:	2310      	movs	r3, #16
   306a8:	18fb      	adds	r3, r7, r3
   306aa:	781a      	ldrb	r2, [r3, #0]
   306ac:	210f      	movs	r1, #15
   306ae:	400a      	ands	r2, r1
   306b0:	1c11      	adds	r1, r2, #0
   306b2:	2230      	movs	r2, #48	; 0x30
   306b4:	430a      	orrs	r2, r1
   306b6:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   306b8:	1dfb      	adds	r3, r7, #7
   306ba:	781b      	ldrb	r3, [r3, #0]
   306bc:	2201      	movs	r2, #1
   306be:	4013      	ands	r3, r2
   306c0:	b2da      	uxtb	r2, r3
   306c2:	2310      	movs	r3, #16
   306c4:	18fb      	adds	r3, r7, r3
   306c6:	2101      	movs	r1, #1
   306c8:	400a      	ands	r2, r1
   306ca:	00d0      	lsls	r0, r2, #3
   306cc:	781a      	ldrb	r2, [r3, #0]
   306ce:	2108      	movs	r1, #8
   306d0:	438a      	bics	r2, r1
   306d2:	1c11      	adds	r1, r2, #0
   306d4:	1c02      	adds	r2, r0, #0
   306d6:	430a      	orrs	r2, r1
   306d8:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   306da:	683b      	ldr	r3, [r7, #0]
   306dc:	b2db      	uxtb	r3, r3
   306de:	1c1a      	adds	r2, r3, #0
   306e0:	2303      	movs	r3, #3
   306e2:	4013      	ands	r3, r2
   306e4:	b2da      	uxtb	r2, r3
   306e6:	2310      	movs	r3, #16
   306e8:	18fb      	adds	r3, r7, r3
   306ea:	2103      	movs	r1, #3
   306ec:	400a      	ands	r2, r1
   306ee:	1890      	adds	r0, r2, r2
   306f0:	781a      	ldrb	r2, [r3, #0]
   306f2:	2106      	movs	r1, #6
   306f4:	438a      	bics	r2, r1
   306f6:	1c11      	adds	r1, r2, #0
   306f8:	1c02      	adds	r2, r0, #0
   306fa:	430a      	orrs	r2, r1
   306fc:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   306fe:	2330      	movs	r3, #48	; 0x30
   30700:	18fb      	adds	r3, r7, r3
   30702:	781b      	ldrb	r3, [r3, #0]
   30704:	2201      	movs	r2, #1
   30706:	4013      	ands	r3, r2
   30708:	b2da      	uxtb	r2, r3
   3070a:	2310      	movs	r3, #16
   3070c:	18fb      	adds	r3, r7, r3
   3070e:	2101      	movs	r1, #1
   30710:	400a      	ands	r2, r1
   30712:	0010      	movs	r0, r2
   30714:	781a      	ldrb	r2, [r3, #0]
   30716:	2101      	movs	r1, #1
   30718:	438a      	bics	r2, r1
   3071a:	1c11      	adds	r1, r2, #0
   3071c:	1c02      	adds	r2, r0, #0
   3071e:	430a      	orrs	r2, r1
   30720:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30722:	2310      	movs	r3, #16
   30724:	18fb      	adds	r3, r7, r3
   30726:	781a      	ldrb	r2, [r3, #0]
   30728:	2314      	movs	r3, #20
   3072a:	18fb      	adds	r3, r7, r3
   3072c:	0011      	movs	r1, r2
   3072e:	0018      	movs	r0, r3
   30730:	4b1d      	ldr	r3, [pc, #116]	; (307a8 <MQTTSerialize_publish+0x158>)
   30732:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30734:	697b      	ldr	r3, [r7, #20]
   30736:	69ba      	ldr	r2, [r7, #24]
   30738:	0011      	movs	r1, r2
   3073a:	0018      	movs	r0, r3
   3073c:	4b1b      	ldr	r3, [pc, #108]	; (307ac <MQTTSerialize_publish+0x15c>)
   3073e:	4798      	blx	r3
   30740:	0002      	movs	r2, r0
   30742:	697b      	ldr	r3, [r7, #20]
   30744:	189b      	adds	r3, r3, r2
   30746:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   30748:	2308      	movs	r3, #8
   3074a:	2230      	movs	r2, #48	; 0x30
   3074c:	4694      	mov	ip, r2
   3074e:	44bc      	add	ip, r7
   30750:	4463      	add	r3, ip
   30752:	2214      	movs	r2, #20
   30754:	18b8      	adds	r0, r7, r2
   30756:	6819      	ldr	r1, [r3, #0]
   30758:	685a      	ldr	r2, [r3, #4]
   3075a:	689b      	ldr	r3, [r3, #8]
   3075c:	4c14      	ldr	r4, [pc, #80]	; (307b0 <MQTTSerialize_publish+0x160>)
   3075e:	47a0      	blx	r4

	if (qos > 0)
   30760:	683b      	ldr	r3, [r7, #0]
   30762:	2b00      	cmp	r3, #0
   30764:	dd08      	ble.n	30778 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   30766:	2334      	movs	r3, #52	; 0x34
   30768:	18fb      	adds	r3, r7, r3
   3076a:	881a      	ldrh	r2, [r3, #0]
   3076c:	2314      	movs	r3, #20
   3076e:	18fb      	adds	r3, r7, r3
   30770:	0011      	movs	r1, r2
   30772:	0018      	movs	r0, r3
   30774:	4b0f      	ldr	r3, [pc, #60]	; (307b4 <MQTTSerialize_publish+0x164>)
   30776:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   30778:	697b      	ldr	r3, [r7, #20]
   3077a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3077c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   3077e:	0018      	movs	r0, r3
   30780:	4b0d      	ldr	r3, [pc, #52]	; (307b8 <MQTTSerialize_publish+0x168>)
   30782:	4798      	blx	r3
	ptr += payloadlen;
   30784:	697a      	ldr	r2, [r7, #20]
   30786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30788:	18d3      	adds	r3, r2, r3
   3078a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   3078c:	697b      	ldr	r3, [r7, #20]
   3078e:	001a      	movs	r2, r3
   30790:	68fb      	ldr	r3, [r7, #12]
   30792:	1ad3      	subs	r3, r2, r3
   30794:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30796:	69fb      	ldr	r3, [r7, #28]
}
   30798:	0018      	movs	r0, r3
   3079a:	46bd      	mov	sp, r7
   3079c:	b009      	add	sp, #36	; 0x24
   3079e:	bd90      	pop	{r4, r7, pc}
   307a0:	00030609 	.word	0x00030609
   307a4:	00030275 	.word	0x00030275
   307a8:	00030397 	.word	0x00030397
   307ac:	0003017d 	.word	0x0003017d
   307b0:	00030469 	.word	0x00030469
   307b4:	000303c1 	.word	0x000303c1
   307b8:	00034a29 	.word	0x00034a29

000307bc <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   307bc:	b580      	push	{r7, lr}
   307be:	b088      	sub	sp, #32
   307c0:	af00      	add	r7, sp, #0
   307c2:	60f8      	str	r0, [r7, #12]
   307c4:	60b9      	str	r1, [r7, #8]
   307c6:	0019      	movs	r1, r3
   307c8:	1dfb      	adds	r3, r7, #7
   307ca:	701a      	strb	r2, [r3, #0]
   307cc:	1dbb      	adds	r3, r7, #6
   307ce:	1c0a      	adds	r2, r1, #0
   307d0:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   307d2:	2300      	movs	r3, #0
   307d4:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   307d6:	2300      	movs	r3, #0
   307d8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   307da:	68fb      	ldr	r3, [r7, #12]
   307dc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   307de:	68bb      	ldr	r3, [r7, #8]
   307e0:	2b03      	cmp	r3, #3
   307e2:	dc03      	bgt.n	307ec <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   307e4:	2302      	movs	r3, #2
   307e6:	425b      	negs	r3, r3
   307e8:	61fb      	str	r3, [r7, #28]
		goto exit;
   307ea:	e055      	b.n	30898 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   307ec:	1dfb      	adds	r3, r7, #7
   307ee:	781b      	ldrb	r3, [r3, #0]
   307f0:	220f      	movs	r2, #15
   307f2:	4013      	ands	r3, r2
   307f4:	b2da      	uxtb	r2, r3
   307f6:	2318      	movs	r3, #24
   307f8:	18fb      	adds	r3, r7, r3
   307fa:	0110      	lsls	r0, r2, #4
   307fc:	781a      	ldrb	r2, [r3, #0]
   307fe:	210f      	movs	r1, #15
   30800:	400a      	ands	r2, r1
   30802:	1c11      	adds	r1, r2, #0
   30804:	1c02      	adds	r2, r0, #0
   30806:	430a      	orrs	r2, r1
   30808:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3080a:	1dbb      	adds	r3, r7, #6
   3080c:	781b      	ldrb	r3, [r3, #0]
   3080e:	2201      	movs	r2, #1
   30810:	4013      	ands	r3, r2
   30812:	b2da      	uxtb	r2, r3
   30814:	2318      	movs	r3, #24
   30816:	18fb      	adds	r3, r7, r3
   30818:	2101      	movs	r1, #1
   3081a:	400a      	ands	r2, r1
   3081c:	00d0      	lsls	r0, r2, #3
   3081e:	781a      	ldrb	r2, [r3, #0]
   30820:	2108      	movs	r1, #8
   30822:	438a      	bics	r2, r1
   30824:	1c11      	adds	r1, r2, #0
   30826:	1c02      	adds	r2, r0, #0
   30828:	430a      	orrs	r2, r1
   3082a:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   3082c:	1dfb      	adds	r3, r7, #7
   3082e:	781b      	ldrb	r3, [r3, #0]
   30830:	3b06      	subs	r3, #6
   30832:	425a      	negs	r2, r3
   30834:	4153      	adcs	r3, r2
   30836:	b2db      	uxtb	r3, r3
   30838:	1c1a      	adds	r2, r3, #0
   3083a:	2303      	movs	r3, #3
   3083c:	4013      	ands	r3, r2
   3083e:	b2da      	uxtb	r2, r3
   30840:	2318      	movs	r3, #24
   30842:	18fb      	adds	r3, r7, r3
   30844:	2103      	movs	r1, #3
   30846:	400a      	ands	r2, r1
   30848:	1890      	adds	r0, r2, r2
   3084a:	781a      	ldrb	r2, [r3, #0]
   3084c:	2106      	movs	r1, #6
   3084e:	438a      	bics	r2, r1
   30850:	1c11      	adds	r1, r2, #0
   30852:	1c02      	adds	r2, r0, #0
   30854:	430a      	orrs	r2, r1
   30856:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30858:	2318      	movs	r3, #24
   3085a:	18fb      	adds	r3, r7, r3
   3085c:	781a      	ldrb	r2, [r3, #0]
   3085e:	2314      	movs	r3, #20
   30860:	18fb      	adds	r3, r7, r3
   30862:	0011      	movs	r1, r2
   30864:	0018      	movs	r0, r3
   30866:	4b0f      	ldr	r3, [pc, #60]	; (308a4 <MQTTSerialize_ack+0xe8>)
   30868:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   3086a:	697b      	ldr	r3, [r7, #20]
   3086c:	2102      	movs	r1, #2
   3086e:	0018      	movs	r0, r3
   30870:	4b0d      	ldr	r3, [pc, #52]	; (308a8 <MQTTSerialize_ack+0xec>)
   30872:	4798      	blx	r3
   30874:	0002      	movs	r2, r0
   30876:	697b      	ldr	r3, [r7, #20]
   30878:	189b      	adds	r3, r3, r2
   3087a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   3087c:	2328      	movs	r3, #40	; 0x28
   3087e:	18fb      	adds	r3, r7, r3
   30880:	881a      	ldrh	r2, [r3, #0]
   30882:	2314      	movs	r3, #20
   30884:	18fb      	adds	r3, r7, r3
   30886:	0011      	movs	r1, r2
   30888:	0018      	movs	r0, r3
   3088a:	4b08      	ldr	r3, [pc, #32]	; (308ac <MQTTSerialize_ack+0xf0>)
   3088c:	4798      	blx	r3
	rc = ptr - buf;
   3088e:	697b      	ldr	r3, [r7, #20]
   30890:	001a      	movs	r2, r3
   30892:	68fb      	ldr	r3, [r7, #12]
   30894:	1ad3      	subs	r3, r2, r3
   30896:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30898:	69fb      	ldr	r3, [r7, #28]
}
   3089a:	0018      	movs	r0, r3
   3089c:	46bd      	mov	sp, r7
   3089e:	b008      	add	sp, #32
   308a0:	bd80      	pop	{r7, pc}
   308a2:	46c0      	nop			; (mov r8, r8)
   308a4:	00030397 	.word	0x00030397
   308a8:	0003017d 	.word	0x0003017d
   308ac:	000303c1 	.word	0x000303c1

000308b0 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   308b0:	b580      	push	{r7, lr}
   308b2:	b084      	sub	sp, #16
   308b4:	af00      	add	r7, sp, #0
   308b6:	6078      	str	r0, [r7, #4]
   308b8:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   308ba:	2302      	movs	r3, #2
   308bc:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   308be:	2300      	movs	r3, #0
   308c0:	60fb      	str	r3, [r7, #12]
   308c2:	e014      	b.n	308ee <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   308c4:	68fa      	ldr	r2, [r7, #12]
   308c6:	0013      	movs	r3, r2
   308c8:	005b      	lsls	r3, r3, #1
   308ca:	189b      	adds	r3, r3, r2
   308cc:	009b      	lsls	r3, r3, #2
   308ce:	001a      	movs	r2, r3
   308d0:	683b      	ldr	r3, [r7, #0]
   308d2:	189b      	adds	r3, r3, r2
   308d4:	6818      	ldr	r0, [r3, #0]
   308d6:	6859      	ldr	r1, [r3, #4]
   308d8:	689a      	ldr	r2, [r3, #8]
   308da:	4b09      	ldr	r3, [pc, #36]	; (30900 <MQTTSerialize_subscribeLength+0x50>)
   308dc:	4798      	blx	r3
   308de:	0003      	movs	r3, r0
   308e0:	3303      	adds	r3, #3
   308e2:	68ba      	ldr	r2, [r7, #8]
   308e4:	18d3      	adds	r3, r2, r3
   308e6:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   308e8:	68fb      	ldr	r3, [r7, #12]
   308ea:	3301      	adds	r3, #1
   308ec:	60fb      	str	r3, [r7, #12]
   308ee:	68fa      	ldr	r2, [r7, #12]
   308f0:	687b      	ldr	r3, [r7, #4]
   308f2:	429a      	cmp	r2, r3
   308f4:	dbe6      	blt.n	308c4 <MQTTSerialize_subscribeLength+0x14>
	return len;
   308f6:	68bb      	ldr	r3, [r7, #8]
}
   308f8:	0018      	movs	r0, r3
   308fa:	46bd      	mov	sp, r7
   308fc:	b004      	add	sp, #16
   308fe:	bd80      	pop	{r7, pc}
   30900:	00030551 	.word	0x00030551

00030904 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   30904:	b590      	push	{r4, r7, lr}
   30906:	b08b      	sub	sp, #44	; 0x2c
   30908:	af00      	add	r7, sp, #0
   3090a:	60f8      	str	r0, [r7, #12]
   3090c:	60b9      	str	r1, [r7, #8]
   3090e:	0019      	movs	r1, r3
   30910:	1dfb      	adds	r3, r7, #7
   30912:	701a      	strb	r2, [r3, #0]
   30914:	1d3b      	adds	r3, r7, #4
   30916:	1c0a      	adds	r2, r1, #0
   30918:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   3091a:	68fb      	ldr	r3, [r7, #12]
   3091c:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   3091e:	2300      	movs	r3, #0
   30920:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   30922:	2300      	movs	r3, #0
   30924:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   30926:	2300      	movs	r3, #0
   30928:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   3092a:	2300      	movs	r3, #0
   3092c:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   3092e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   30930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30932:	0011      	movs	r1, r2
   30934:	0018      	movs	r0, r3
   30936:	4b41      	ldr	r3, [pc, #260]	; (30a3c <MQTTSerialize_subscribe+0x138>)
   30938:	4798      	blx	r3
   3093a:	0003      	movs	r3, r0
   3093c:	61fb      	str	r3, [r7, #28]
   3093e:	69fb      	ldr	r3, [r7, #28]
   30940:	0018      	movs	r0, r3
   30942:	4b3f      	ldr	r3, [pc, #252]	; (30a40 <MQTTSerialize_subscribe+0x13c>)
   30944:	4798      	blx	r3
   30946:	0002      	movs	r2, r0
   30948:	68bb      	ldr	r3, [r7, #8]
   3094a:	429a      	cmp	r2, r3
   3094c:	dd03      	ble.n	30956 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3094e:	2302      	movs	r3, #2
   30950:	425b      	negs	r3, r3
   30952:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   30954:	e06c      	b.n	30a30 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   30956:	2314      	movs	r3, #20
   30958:	18fb      	adds	r3, r7, r3
   3095a:	2200      	movs	r2, #0
   3095c:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   3095e:	2314      	movs	r3, #20
   30960:	18fb      	adds	r3, r7, r3
   30962:	781a      	ldrb	r2, [r3, #0]
   30964:	210f      	movs	r1, #15
   30966:	400a      	ands	r2, r1
   30968:	1c11      	adds	r1, r2, #0
   3096a:	2280      	movs	r2, #128	; 0x80
   3096c:	4252      	negs	r2, r2
   3096e:	430a      	orrs	r2, r1
   30970:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30972:	1dfb      	adds	r3, r7, #7
   30974:	781b      	ldrb	r3, [r3, #0]
   30976:	2201      	movs	r2, #1
   30978:	4013      	ands	r3, r2
   3097a:	b2da      	uxtb	r2, r3
   3097c:	2314      	movs	r3, #20
   3097e:	18fb      	adds	r3, r7, r3
   30980:	2101      	movs	r1, #1
   30982:	400a      	ands	r2, r1
   30984:	00d0      	lsls	r0, r2, #3
   30986:	781a      	ldrb	r2, [r3, #0]
   30988:	2108      	movs	r1, #8
   3098a:	438a      	bics	r2, r1
   3098c:	1c11      	adds	r1, r2, #0
   3098e:	1c02      	adds	r2, r0, #0
   30990:	430a      	orrs	r2, r1
   30992:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   30994:	2314      	movs	r3, #20
   30996:	18fb      	adds	r3, r7, r3
   30998:	781a      	ldrb	r2, [r3, #0]
   3099a:	2106      	movs	r1, #6
   3099c:	438a      	bics	r2, r1
   3099e:	1c11      	adds	r1, r2, #0
   309a0:	2202      	movs	r2, #2
   309a2:	430a      	orrs	r2, r1
   309a4:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   309a6:	2314      	movs	r3, #20
   309a8:	18fb      	adds	r3, r7, r3
   309aa:	781a      	ldrb	r2, [r3, #0]
   309ac:	2318      	movs	r3, #24
   309ae:	18fb      	adds	r3, r7, r3
   309b0:	0011      	movs	r1, r2
   309b2:	0018      	movs	r0, r3
   309b4:	4b23      	ldr	r3, [pc, #140]	; (30a44 <MQTTSerialize_subscribe+0x140>)
   309b6:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   309b8:	69bb      	ldr	r3, [r7, #24]
   309ba:	69fa      	ldr	r2, [r7, #28]
   309bc:	0011      	movs	r1, r2
   309be:	0018      	movs	r0, r3
   309c0:	4b21      	ldr	r3, [pc, #132]	; (30a48 <MQTTSerialize_subscribe+0x144>)
   309c2:	4798      	blx	r3
   309c4:	0002      	movs	r2, r0
   309c6:	69bb      	ldr	r3, [r7, #24]
   309c8:	189b      	adds	r3, r3, r2
   309ca:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   309cc:	1d3b      	adds	r3, r7, #4
   309ce:	881a      	ldrh	r2, [r3, #0]
   309d0:	2318      	movs	r3, #24
   309d2:	18fb      	adds	r3, r7, r3
   309d4:	0011      	movs	r1, r2
   309d6:	0018      	movs	r0, r3
   309d8:	4b1c      	ldr	r3, [pc, #112]	; (30a4c <MQTTSerialize_subscribe+0x148>)
   309da:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   309dc:	2300      	movs	r3, #0
   309de:	623b      	str	r3, [r7, #32]
   309e0:	e01d      	b.n	30a1e <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   309e2:	6a3a      	ldr	r2, [r7, #32]
   309e4:	0013      	movs	r3, r2
   309e6:	005b      	lsls	r3, r3, #1
   309e8:	189b      	adds	r3, r3, r2
   309ea:	009b      	lsls	r3, r3, #2
   309ec:	001a      	movs	r2, r3
   309ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   309f0:	189b      	adds	r3, r3, r2
   309f2:	2218      	movs	r2, #24
   309f4:	18b8      	adds	r0, r7, r2
   309f6:	6819      	ldr	r1, [r3, #0]
   309f8:	685a      	ldr	r2, [r3, #4]
   309fa:	689b      	ldr	r3, [r3, #8]
   309fc:	4c14      	ldr	r4, [pc, #80]	; (30a50 <MQTTSerialize_subscribe+0x14c>)
   309fe:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   30a00:	6a3b      	ldr	r3, [r7, #32]
   30a02:	009b      	lsls	r3, r3, #2
   30a04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   30a06:	18d3      	adds	r3, r2, r3
   30a08:	681b      	ldr	r3, [r3, #0]
   30a0a:	b2da      	uxtb	r2, r3
   30a0c:	2318      	movs	r3, #24
   30a0e:	18fb      	adds	r3, r7, r3
   30a10:	0011      	movs	r1, r2
   30a12:	0018      	movs	r0, r3
   30a14:	4b0b      	ldr	r3, [pc, #44]	; (30a44 <MQTTSerialize_subscribe+0x140>)
   30a16:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   30a18:	6a3b      	ldr	r3, [r7, #32]
   30a1a:	3301      	adds	r3, #1
   30a1c:	623b      	str	r3, [r7, #32]
   30a1e:	6a3a      	ldr	r2, [r7, #32]
   30a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30a22:	429a      	cmp	r2, r3
   30a24:	dbdd      	blt.n	309e2 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   30a26:	69bb      	ldr	r3, [r7, #24]
   30a28:	001a      	movs	r2, r3
   30a2a:	68fb      	ldr	r3, [r7, #12]
   30a2c:	1ad3      	subs	r3, r2, r3
   30a2e:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30a32:	0018      	movs	r0, r3
   30a34:	46bd      	mov	sp, r7
   30a36:	b00b      	add	sp, #44	; 0x2c
   30a38:	bd90      	pop	{r4, r7, pc}
   30a3a:	46c0      	nop			; (mov r8, r8)
   30a3c:	000308b1 	.word	0x000308b1
   30a40:	00030275 	.word	0x00030275
   30a44:	00030397 	.word	0x00030397
   30a48:	0003017d 	.word	0x0003017d
   30a4c:	000303c1 	.word	0x000303c1
   30a50:	00030469 	.word	0x00030469

00030a54 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   30a54:	b590      	push	{r4, r7, lr}
   30a56:	b08b      	sub	sp, #44	; 0x2c
   30a58:	af00      	add	r7, sp, #0
   30a5a:	60f8      	str	r0, [r7, #12]
   30a5c:	60b9      	str	r1, [r7, #8]
   30a5e:	607a      	str	r2, [r7, #4]
   30a60:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30a62:	2300      	movs	r3, #0
   30a64:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30a68:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30a6a:	2300      	movs	r3, #0
   30a6c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30a6e:	2300      	movs	r3, #0
   30a70:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30a72:	2318      	movs	r3, #24
   30a74:	18fb      	adds	r3, r7, r3
   30a76:	0018      	movs	r0, r3
   30a78:	4b2c      	ldr	r3, [pc, #176]	; (30b2c <MQTTDeserialize_suback+0xd8>)
   30a7a:	4798      	blx	r3
   30a7c:	0003      	movs	r3, r0
   30a7e:	001a      	movs	r2, r3
   30a80:	231c      	movs	r3, #28
   30a82:	18fb      	adds	r3, r7, r3
   30a84:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   30a86:	231c      	movs	r3, #28
   30a88:	18fb      	adds	r3, r7, r3
   30a8a:	781b      	ldrb	r3, [r3, #0]
   30a8c:	220f      	movs	r2, #15
   30a8e:	4393      	bics	r3, r2
   30a90:	b2db      	uxtb	r3, r3
   30a92:	2b90      	cmp	r3, #144	; 0x90
   30a94:	d142      	bne.n	30b1c <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30a96:	69bb      	ldr	r3, [r7, #24]
   30a98:	2214      	movs	r2, #20
   30a9a:	18ba      	adds	r2, r7, r2
   30a9c:	0011      	movs	r1, r2
   30a9e:	0018      	movs	r0, r3
   30aa0:	4b23      	ldr	r3, [pc, #140]	; (30b30 <MQTTDeserialize_suback+0xdc>)
   30aa2:	4798      	blx	r3
   30aa4:	0003      	movs	r3, r0
   30aa6:	627b      	str	r3, [r7, #36]	; 0x24
   30aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30aaa:	69bb      	ldr	r3, [r7, #24]
   30aac:	189b      	adds	r3, r3, r2
   30aae:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30ab0:	69bb      	ldr	r3, [r7, #24]
   30ab2:	697a      	ldr	r2, [r7, #20]
   30ab4:	189b      	adds	r3, r3, r2
   30ab6:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30ab8:	6a3b      	ldr	r3, [r7, #32]
   30aba:	69ba      	ldr	r2, [r7, #24]
   30abc:	1a9b      	subs	r3, r3, r2
   30abe:	2b01      	cmp	r3, #1
   30ac0:	dd2e      	ble.n	30b20 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   30ac2:	2318      	movs	r3, #24
   30ac4:	18fb      	adds	r3, r7, r3
   30ac6:	0018      	movs	r0, r3
   30ac8:	4b1a      	ldr	r3, [pc, #104]	; (30b34 <MQTTDeserialize_suback+0xe0>)
   30aca:	4798      	blx	r3
   30acc:	0003      	movs	r3, r0
   30ace:	b29a      	uxth	r2, r3
   30ad0:	68fb      	ldr	r3, [r7, #12]
   30ad2:	801a      	strh	r2, [r3, #0]

	*count = 0;
   30ad4:	687b      	ldr	r3, [r7, #4]
   30ad6:	2200      	movs	r2, #0
   30ad8:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   30ada:	e018      	b.n	30b0e <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   30adc:	687b      	ldr	r3, [r7, #4]
   30ade:	681a      	ldr	r2, [r3, #0]
   30ae0:	68bb      	ldr	r3, [r7, #8]
   30ae2:	429a      	cmp	r2, r3
   30ae4:	dd03      	ble.n	30aee <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   30ae6:	2301      	movs	r3, #1
   30ae8:	425b      	negs	r3, r3
   30aea:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   30aec:	e019      	b.n	30b22 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   30aee:	687b      	ldr	r3, [r7, #4]
   30af0:	681a      	ldr	r2, [r3, #0]
   30af2:	1c51      	adds	r1, r2, #1
   30af4:	687b      	ldr	r3, [r7, #4]
   30af6:	6019      	str	r1, [r3, #0]
   30af8:	0013      	movs	r3, r2
   30afa:	009b      	lsls	r3, r3, #2
   30afc:	683a      	ldr	r2, [r7, #0]
   30afe:	18d4      	adds	r4, r2, r3
   30b00:	2318      	movs	r3, #24
   30b02:	18fb      	adds	r3, r7, r3
   30b04:	0018      	movs	r0, r3
   30b06:	4b09      	ldr	r3, [pc, #36]	; (30b2c <MQTTDeserialize_suback+0xd8>)
   30b08:	4798      	blx	r3
   30b0a:	0003      	movs	r3, r0
   30b0c:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   30b0e:	69ba      	ldr	r2, [r7, #24]
   30b10:	6a3b      	ldr	r3, [r7, #32]
   30b12:	429a      	cmp	r2, r3
   30b14:	d3e2      	bcc.n	30adc <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   30b16:	2301      	movs	r3, #1
   30b18:	627b      	str	r3, [r7, #36]	; 0x24
   30b1a:	e002      	b.n	30b22 <MQTTDeserialize_suback+0xce>
		goto exit;
   30b1c:	46c0      	nop			; (mov r8, r8)
   30b1e:	e000      	b.n	30b22 <MQTTDeserialize_suback+0xce>
		goto exit;
   30b20:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30b24:	0018      	movs	r0, r3
   30b26:	46bd      	mov	sp, r7
   30b28:	b00b      	add	sp, #44	; 0x2c
   30b2a:	bd90      	pop	{r4, r7, pc}
   30b2c:	0003036b 	.word	0x0003036b
   30b30:	00030305 	.word	0x00030305
   30b34:	00030339 	.word	0x00030339

00030b38 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   30b38:	b580      	push	{r7, lr}
   30b3a:	b082      	sub	sp, #8
   30b3c:	af00      	add	r7, sp, #0
   30b3e:	6078      	str	r0, [r7, #4]
	config->port = 80;
   30b40:	687b      	ldr	r3, [r7, #4]
   30b42:	2250      	movs	r2, #80	; 0x50
   30b44:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   30b46:	687b      	ldr	r3, [r7, #4]
   30b48:	2200      	movs	r2, #0
   30b4a:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   30b4c:	687b      	ldr	r3, [r7, #4]
   30b4e:	4a0b      	ldr	r2, [pc, #44]	; (30b7c <http_client_get_config_defaults+0x44>)
   30b50:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   30b52:	687b      	ldr	r3, [r7, #4]
   30b54:	2200      	movs	r2, #0
   30b56:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   30b58:	687b      	ldr	r3, [r7, #4]
   30b5a:	2200      	movs	r2, #0
   30b5c:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   30b5e:	687b      	ldr	r3, [r7, #4]
   30b60:	2280      	movs	r2, #128	; 0x80
   30b62:	0052      	lsls	r2, r2, #1
   30b64:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   30b66:	687b      	ldr	r3, [r7, #4]
   30b68:	2252      	movs	r2, #82	; 0x52
   30b6a:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   30b6c:	687b      	ldr	r3, [r7, #4]
   30b6e:	4a04      	ldr	r2, [pc, #16]	; (30b80 <http_client_get_config_defaults+0x48>)
   30b70:	619a      	str	r2, [r3, #24]
}
   30b72:	46c0      	nop			; (mov r8, r8)
   30b74:	46bd      	mov	sp, r7
   30b76:	b002      	add	sp, #8
   30b78:	bd80      	pop	{r7, pc}
   30b7a:	46c0      	nop			; (mov r8, r8)
   30b7c:	00004e20 	.word	0x00004e20
   30b80:	00039d70 	.word	0x00039d70

00030b84 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   30b84:	b590      	push	{r4, r7, lr}
   30b86:	b083      	sub	sp, #12
   30b88:	af00      	add	r7, sp, #0
   30b8a:	6078      	str	r0, [r7, #4]
   30b8c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   30b8e:	687b      	ldr	r3, [r7, #4]
   30b90:	2b00      	cmp	r3, #0
   30b92:	d002      	beq.n	30b9a <http_client_init+0x16>
   30b94:	683b      	ldr	r3, [r7, #0]
   30b96:	2b00      	cmp	r3, #0
   30b98:	d102      	bne.n	30ba0 <http_client_init+0x1c>
		return -EINVAL;
   30b9a:	2316      	movs	r3, #22
   30b9c:	425b      	negs	r3, r3
   30b9e:	e058      	b.n	30c52 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   30ba0:	683b      	ldr	r3, [r7, #0]
   30ba2:	691b      	ldr	r3, [r3, #16]
   30ba4:	2b00      	cmp	r3, #0
   30ba6:	d102      	bne.n	30bae <http_client_init+0x2a>
		return -EINVAL;
   30ba8:	2316      	movs	r3, #22
   30baa:	425b      	negs	r3, r3
   30bac:	e051      	b.n	30c52 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   30bae:	683b      	ldr	r3, [r7, #0]
   30bb0:	685b      	ldr	r3, [r3, #4]
   30bb2:	2b00      	cmp	r3, #0
   30bb4:	d102      	bne.n	30bbc <http_client_init+0x38>
		return -EINVAL;
   30bb6:	2316      	movs	r3, #22
   30bb8:	425b      	negs	r3, r3
   30bba:	e04a      	b.n	30c52 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   30bbc:	683b      	ldr	r3, [r7, #0]
   30bbe:	695b      	ldr	r3, [r3, #20]
   30bc0:	2b51      	cmp	r3, #81	; 0x51
   30bc2:	d802      	bhi.n	30bca <http_client_init+0x46>
		return -EINVAL;
   30bc4:	2316      	movs	r3, #22
   30bc6:	425b      	negs	r3, r3
   30bc8:	e043      	b.n	30c52 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   30bca:	687b      	ldr	r3, [r7, #4]
   30bcc:	22e8      	movs	r2, #232	; 0xe8
   30bce:	2100      	movs	r1, #0
   30bd0:	0018      	movs	r0, r3
   30bd2:	4b22      	ldr	r3, [pc, #136]	; (30c5c <http_client_init+0xd8>)
   30bd4:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   30bd6:	687b      	ldr	r3, [r7, #4]
   30bd8:	3350      	adds	r3, #80	; 0x50
   30bda:	6839      	ldr	r1, [r7, #0]
   30bdc:	221c      	movs	r2, #28
   30bde:	0018      	movs	r0, r3
   30be0:	4b1f      	ldr	r3, [pc, #124]	; (30c60 <http_client_init+0xdc>)
   30be2:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   30be4:	687b      	ldr	r3, [r7, #4]
   30be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30be8:	2b00      	cmp	r3, #0
   30bea:	d115      	bne.n	30c18 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   30bec:	683b      	ldr	r3, [r7, #0]
   30bee:	691b      	ldr	r3, [r3, #16]
   30bf0:	0018      	movs	r0, r3
   30bf2:	4b1c      	ldr	r3, [pc, #112]	; (30c64 <http_client_init+0xe0>)
   30bf4:	4798      	blx	r3
   30bf6:	0003      	movs	r3, r0
   30bf8:	001a      	movs	r2, r3
   30bfa:	687b      	ldr	r3, [r7, #4]
   30bfc:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   30bfe:	687b      	ldr	r3, [r7, #4]
   30c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30c02:	2b00      	cmp	r3, #0
   30c04:	d102      	bne.n	30c0c <http_client_init+0x88>
			return -ENOMEM;
   30c06:	230c      	movs	r3, #12
   30c08:	425b      	negs	r3, r3
   30c0a:	e022      	b.n	30c52 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   30c0c:	687b      	ldr	r3, [r7, #4]
   30c0e:	2241      	movs	r2, #65	; 0x41
   30c10:	5c99      	ldrb	r1, [r3, r2]
   30c12:	2004      	movs	r0, #4
   30c14:	4301      	orrs	r1, r0
   30c16:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   30c18:	683b      	ldr	r3, [r7, #0]
   30c1a:	891b      	ldrh	r3, [r3, #8]
   30c1c:	2b00      	cmp	r3, #0
   30c1e:	d010      	beq.n	30c42 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   30c20:	683b      	ldr	r3, [r7, #0]
   30c22:	6858      	ldr	r0, [r3, #4]
   30c24:	687a      	ldr	r2, [r7, #4]
   30c26:	4910      	ldr	r1, [pc, #64]	; (30c68 <http_client_init+0xe4>)
   30c28:	2300      	movs	r3, #0
   30c2a:	4c10      	ldr	r4, [pc, #64]	; (30c6c <http_client_init+0xe8>)
   30c2c:	47a0      	blx	r4
   30c2e:	0002      	movs	r2, r0
   30c30:	687b      	ldr	r3, [r7, #4]
   30c32:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   30c34:	687b      	ldr	r3, [r7, #4]
   30c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30c38:	2b00      	cmp	r3, #0
   30c3a:	da02      	bge.n	30c42 <http_client_init+0xbe>
			return -ENOSPC;
   30c3c:	231c      	movs	r3, #28
   30c3e:	425b      	negs	r3, r3
   30c40:	e007      	b.n	30c52 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   30c42:	687b      	ldr	r3, [r7, #4]
   30c44:	2200      	movs	r2, #0
   30c46:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30c48:	687b      	ldr	r3, [r7, #4]
   30c4a:	22d8      	movs	r2, #216	; 0xd8
   30c4c:	2100      	movs	r1, #0
   30c4e:	5099      	str	r1, [r3, r2]

	return 0;
   30c50:	2300      	movs	r3, #0
}
   30c52:	0018      	movs	r0, r3
   30c54:	46bd      	mov	sp, r7
   30c56:	b003      	add	sp, #12
   30c58:	bd90      	pop	{r4, r7, pc}
   30c5a:	46c0      	nop			; (mov r8, r8)
   30c5c:	00034a5f 	.word	0x00034a5f
   30c60:	00034a29 	.word	0x00034a29
   30c64:	00034a01 	.word	0x00034a01
   30c68:	00030f35 	.word	0x00030f35
   30c6c:	000325d9 	.word	0x000325d9

00030c70 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   30c70:	b580      	push	{r7, lr}
   30c72:	b082      	sub	sp, #8
   30c74:	af00      	add	r7, sp, #0
   30c76:	6078      	str	r0, [r7, #4]
   30c78:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   30c7a:	687b      	ldr	r3, [r7, #4]
   30c7c:	2b00      	cmp	r3, #0
   30c7e:	d102      	bne.n	30c86 <http_client_register_callback+0x16>
		return -EINVAL;
   30c80:	2316      	movs	r3, #22
   30c82:	425b      	negs	r3, r3
   30c84:	e003      	b.n	30c8e <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   30c86:	687b      	ldr	r3, [r7, #4]
   30c88:	683a      	ldr	r2, [r7, #0]
   30c8a:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   30c8c:	2300      	movs	r3, #0
}
   30c8e:	0018      	movs	r0, r3
   30c90:	46bd      	mov	sp, r7
   30c92:	b002      	add	sp, #8
   30c94:	bd80      	pop	{r7, pc}
	...

00030c98 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   30c98:	b580      	push	{r7, lr}
   30c9a:	b082      	sub	sp, #8
   30c9c:	af00      	add	r7, sp, #0
   30c9e:	6078      	str	r0, [r7, #4]
	switch (err) {
   30ca0:	687b      	ldr	r3, [r7, #4]
   30ca2:	330e      	adds	r3, #14
   30ca4:	2b0e      	cmp	r3, #14
   30ca6:	d825      	bhi.n	30cf4 <_hwerr_to_stderr+0x5c>
   30ca8:	009a      	lsls	r2, r3, #2
   30caa:	4b18      	ldr	r3, [pc, #96]	; (30d0c <_hwerr_to_stderr+0x74>)
   30cac:	18d3      	adds	r3, r2, r3
   30cae:	681b      	ldr	r3, [r3, #0]
   30cb0:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   30cb2:	2305      	movs	r3, #5
   30cb4:	425b      	negs	r3, r3
   30cb6:	e024      	b.n	30d02 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   30cb8:	2302      	movs	r3, #2
   30cba:	425b      	negs	r3, r3
   30cbc:	e021      	b.n	30d02 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   30cbe:	2370      	movs	r3, #112	; 0x70
   30cc0:	425b      	negs	r3, r3
   30cc2:	e01e      	b.n	30d02 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   30cc4:	230c      	movs	r3, #12
   30cc6:	425b      	negs	r3, r3
   30cc8:	e01b      	b.n	30d02 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   30cca:	2316      	movs	r3, #22
   30ccc:	425b      	negs	r3, r3
   30cce:	e018      	b.n	30d02 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   30cd0:	230c      	movs	r3, #12
   30cd2:	425b      	negs	r3, r3
   30cd4:	e015      	b.n	30d02 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   30cd6:	2305      	movs	r3, #5
   30cd8:	425b      	negs	r3, r3
   30cda:	e012      	b.n	30d02 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   30cdc:	2379      	movs	r3, #121	; 0x79
   30cde:	425b      	negs	r3, r3
   30ce0:	e00f      	b.n	30d02 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   30ce2:	2368      	movs	r3, #104	; 0x68
   30ce4:	425b      	negs	r3, r3
   30ce6:	e00c      	b.n	30d02 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   30ce8:	230b      	movs	r3, #11
   30cea:	425b      	negs	r3, r3
   30cec:	e009      	b.n	30d02 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   30cee:	2310      	movs	r3, #16
   30cf0:	425b      	negs	r3, r3
   30cf2:	e006      	b.n	30d02 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   30cf4:	687b      	ldr	r3, [r7, #4]
   30cf6:	2b00      	cmp	r3, #0
   30cf8:	da02      	bge.n	30d00 <_hwerr_to_stderr+0x68>
				return -EIO;
   30cfa:	2305      	movs	r3, #5
   30cfc:	425b      	negs	r3, r3
   30cfe:	e000      	b.n	30d02 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   30d00:	2300      	movs	r3, #0
	}
}
   30d02:	0018      	movs	r0, r3
   30d04:	46bd      	mov	sp, r7
   30d06:	b002      	add	sp, #8
   30d08:	bd80      	pop	{r7, pc}
   30d0a:	46c0      	nop			; (mov r8, r8)
   30d0c:	00039eac 	.word	0x00039eac

00030d10 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   30d10:	b580      	push	{r7, lr}
   30d12:	b08a      	sub	sp, #40	; 0x28
   30d14:	af00      	add	r7, sp, #0
   30d16:	603a      	str	r2, [r7, #0]
   30d18:	1dfb      	adds	r3, r7, #7
   30d1a:	1c02      	adds	r2, r0, #0
   30d1c:	701a      	strb	r2, [r3, #0]
   30d1e:	1dbb      	adds	r3, r7, #6
   30d20:	1c0a      	adds	r2, r1, #0
   30d22:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   30d24:	1dfb      	adds	r3, r7, #7
   30d26:	2200      	movs	r2, #0
   30d28:	569a      	ldrsb	r2, [r3, r2]
   30d2a:	4b4b      	ldr	r3, [pc, #300]	; (30e58 <http_client_socket_event_handler+0x148>)
   30d2c:	0092      	lsls	r2, r2, #2
   30d2e:	58d3      	ldr	r3, [r2, r3]
   30d30:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   30d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30d34:	2b00      	cmp	r3, #0
   30d36:	d100      	bne.n	30d3a <http_client_socket_event_handler+0x2a>
   30d38:	e08a      	b.n	30e50 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   30d3a:	1dbb      	adds	r3, r7, #6
   30d3c:	781b      	ldrb	r3, [r3, #0]
   30d3e:	2b06      	cmp	r3, #6
   30d40:	d040      	beq.n	30dc4 <http_client_socket_event_handler+0xb4>
   30d42:	2b07      	cmp	r3, #7
   30d44:	d060      	beq.n	30e08 <http_client_socket_event_handler+0xf8>
   30d46:	2b05      	cmp	r3, #5
   30d48:	d000      	beq.n	30d4c <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   30d4a:	e082      	b.n	30e52 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   30d4c:	683b      	ldr	r3, [r7, #0]
   30d4e:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   30d50:	6a3b      	ldr	r3, [r7, #32]
   30d52:	785b      	ldrb	r3, [r3, #1]
   30d54:	b25b      	sxtb	r3, r3
   30d56:	001a      	movs	r2, r3
   30d58:	230c      	movs	r3, #12
   30d5a:	18fb      	adds	r3, r7, r3
   30d5c:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   30d5e:	6a3b      	ldr	r3, [r7, #32]
   30d60:	785b      	ldrb	r3, [r3, #1]
   30d62:	b25b      	sxtb	r3, r3
   30d64:	2b00      	cmp	r3, #0
   30d66:	da0c      	bge.n	30d82 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   30d68:	6a3b      	ldr	r3, [r7, #32]
   30d6a:	785b      	ldrb	r3, [r3, #1]
   30d6c:	b25b      	sxtb	r3, r3
   30d6e:	0018      	movs	r0, r3
   30d70:	4b3a      	ldr	r3, [pc, #232]	; (30e5c <http_client_socket_event_handler+0x14c>)
   30d72:	4798      	blx	r3
   30d74:	0002      	movs	r2, r0
   30d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30d78:	0011      	movs	r1, r2
   30d7a:	0018      	movs	r0, r3
   30d7c:	4b38      	ldr	r3, [pc, #224]	; (30e60 <http_client_socket_event_handler+0x150>)
   30d7e:	4798      	blx	r3
    	break;
   30d80:	e067      	b.n	30e52 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   30d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d86:	2b00      	cmp	r3, #0
   30d88:	d006      	beq.n	30d98 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   30d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d8e:	220c      	movs	r2, #12
   30d90:	18ba      	adds	r2, r7, r2
   30d92:	6a78      	ldr	r0, [r7, #36]	; 0x24
   30d94:	2100      	movs	r1, #0
   30d96:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   30d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30d9a:	2203      	movs	r2, #3
   30d9c:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   30d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30da0:	6d58      	ldr	r0, [r3, #84]	; 0x54
   30da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30da4:	6c99      	ldr	r1, [r3, #72]	; 0x48
   30da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30da8:	2258      	movs	r2, #88	; 0x58
   30daa:	5a9b      	ldrh	r3, [r3, r2]
   30dac:	001a      	movs	r2, r3
   30dae:	4b2d      	ldr	r3, [pc, #180]	; (30e64 <http_client_socket_event_handler+0x154>)
   30db0:	4798      	blx	r3
    		_http_client_recv_packet(module);
   30db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30db4:	0018      	movs	r0, r3
   30db6:	4b2c      	ldr	r3, [pc, #176]	; (30e68 <http_client_socket_event_handler+0x158>)
   30db8:	4798      	blx	r3
			_http_client_request(module);
   30dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30dbc:	0018      	movs	r0, r3
   30dbe:	4b2b      	ldr	r3, [pc, #172]	; (30e6c <http_client_socket_event_handler+0x15c>)
   30dc0:	4798      	blx	r3
    	break;
   30dc2:	e046      	b.n	30e52 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   30dc4:	683b      	ldr	r3, [r7, #0]
   30dc6:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   30dc8:	69fb      	ldr	r3, [r7, #28]
   30dca:	2204      	movs	r2, #4
   30dcc:	5e9b      	ldrsh	r3, [r3, r2]
   30dce:	2b00      	cmp	r3, #0
   30dd0:	dd09      	ble.n	30de6 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   30dd2:	69fb      	ldr	r3, [r7, #28]
   30dd4:	2204      	movs	r2, #4
   30dd6:	5e9b      	ldrsh	r3, [r3, r2]
   30dd8:	001a      	movs	r2, r3
   30dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ddc:	0011      	movs	r1, r2
   30dde:	0018      	movs	r0, r3
   30de0:	4b23      	ldr	r3, [pc, #140]	; (30e70 <http_client_socket_event_handler+0x160>)
   30de2:	4798      	blx	r3
   30de4:	e00b      	b.n	30dfe <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   30de6:	69fb      	ldr	r3, [r7, #28]
   30de8:	2204      	movs	r2, #4
   30dea:	5e9b      	ldrsh	r3, [r3, r2]
   30dec:	0018      	movs	r0, r3
   30dee:	4b1b      	ldr	r3, [pc, #108]	; (30e5c <http_client_socket_event_handler+0x14c>)
   30df0:	4798      	blx	r3
   30df2:	0002      	movs	r2, r0
   30df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30df6:	0011      	movs	r1, r2
   30df8:	0018      	movs	r0, r3
   30dfa:	4b19      	ldr	r3, [pc, #100]	; (30e60 <http_client_socket_event_handler+0x150>)
   30dfc:	4798      	blx	r3
		_http_client_recv_packet(module);
   30dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30e00:	0018      	movs	r0, r3
   30e02:	4b19      	ldr	r3, [pc, #100]	; (30e68 <http_client_socket_event_handler+0x158>)
   30e04:	4798      	blx	r3
		break;
   30e06:	e024      	b.n	30e52 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   30e08:	231a      	movs	r3, #26
   30e0a:	18fb      	adds	r3, r7, r3
   30e0c:	683a      	ldr	r2, [r7, #0]
   30e0e:	8812      	ldrh	r2, [r2, #0]
   30e10:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   30e12:	231a      	movs	r3, #26
   30e14:	18fb      	adds	r3, r7, r3
   30e16:	2200      	movs	r2, #0
   30e18:	5e9b      	ldrsh	r3, [r3, r2]
   30e1a:	2b00      	cmp	r3, #0
   30e1c:	da0d      	bge.n	30e3a <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   30e1e:	231a      	movs	r3, #26
   30e20:	18fb      	adds	r3, r7, r3
   30e22:	2200      	movs	r2, #0
   30e24:	5e9b      	ldrsh	r3, [r3, r2]
   30e26:	0018      	movs	r0, r3
   30e28:	4b0c      	ldr	r3, [pc, #48]	; (30e5c <http_client_socket_event_handler+0x14c>)
   30e2a:	4798      	blx	r3
   30e2c:	0002      	movs	r2, r0
   30e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30e30:	0011      	movs	r1, r2
   30e32:	0018      	movs	r0, r3
   30e34:	4b0a      	ldr	r3, [pc, #40]	; (30e60 <http_client_socket_event_handler+0x150>)
   30e36:	4798      	blx	r3
   30e38:	e003      	b.n	30e42 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   30e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30e3c:	0018      	movs	r0, r3
   30e3e:	4b0b      	ldr	r3, [pc, #44]	; (30e6c <http_client_socket_event_handler+0x15c>)
   30e40:	4798      	blx	r3
		module->sending = 0;
   30e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30e44:	2241      	movs	r2, #65	; 0x41
   30e46:	5c99      	ldrb	r1, [r3, r2]
   30e48:	2001      	movs	r0, #1
   30e4a:	4381      	bics	r1, r0
   30e4c:	5499      	strb	r1, [r3, r2]
    	break;
   30e4e:	e000      	b.n	30e52 <http_client_socket_event_handler+0x142>
		return;
   30e50:	46c0      	nop			; (mov r8, r8)
	}

}
   30e52:	46bd      	mov	sp, r7
   30e54:	b00a      	add	sp, #40	; 0x28
   30e56:	bd80      	pop	{r7, pc}
   30e58:	20004574 	.word	0x20004574
   30e5c:	00030c99 	.word	0x00030c99
   30e60:	0003130d 	.word	0x0003130d
   30e64:	00032669 	.word	0x00032669
   30e68:	00031b99 	.word	0x00031b99
   30e6c:	00031461 	.word	0x00031461
   30e70:	00031bfd 	.word	0x00031bfd

00030e74 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   30e74:	b580      	push	{r7, lr}
   30e76:	b088      	sub	sp, #32
   30e78:	af00      	add	r7, sp, #0
   30e7a:	6078      	str	r0, [r7, #4]
   30e7c:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   30e7e:	2300      	movs	r3, #0
   30e80:	61fb      	str	r3, [r7, #28]
   30e82:	e048      	b.n	30f16 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   30e84:	4b27      	ldr	r3, [pc, #156]	; (30f24 <http_client_socket_resolve_handler+0xb0>)
   30e86:	69fa      	ldr	r2, [r7, #28]
   30e88:	0092      	lsls	r2, r2, #2
   30e8a:	58d3      	ldr	r3, [r2, r3]
   30e8c:	2b00      	cmp	r3, #0
   30e8e:	d03f      	beq.n	30f10 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   30e90:	4b24      	ldr	r3, [pc, #144]	; (30f24 <http_client_socket_resolve_handler+0xb0>)
   30e92:	69fa      	ldr	r2, [r7, #28]
   30e94:	0092      	lsls	r2, r2, #2
   30e96:	58d3      	ldr	r3, [r2, r3]
   30e98:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   30e9a:	69bb      	ldr	r3, [r7, #24]
   30e9c:	1c5a      	adds	r2, r3, #1
   30e9e:	687b      	ldr	r3, [r7, #4]
   30ea0:	0011      	movs	r1, r2
   30ea2:	0018      	movs	r0, r3
   30ea4:	4b20      	ldr	r3, [pc, #128]	; (30f28 <http_client_socket_resolve_handler+0xb4>)
   30ea6:	4798      	blx	r3
   30ea8:	1e03      	subs	r3, r0, #0
   30eaa:	d131      	bne.n	30f10 <http_client_socket_resolve_handler+0x9c>
   30eac:	69bb      	ldr	r3, [r7, #24]
   30eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30eb0:	2b01      	cmp	r3, #1
   30eb2:	d12d      	bne.n	30f10 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   30eb4:	683b      	ldr	r3, [r7, #0]
   30eb6:	2b00      	cmp	r3, #0
   30eb8:	d107      	bne.n	30eca <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   30eba:	2376      	movs	r3, #118	; 0x76
   30ebc:	425a      	negs	r2, r3
   30ebe:	69bb      	ldr	r3, [r7, #24]
   30ec0:	0011      	movs	r1, r2
   30ec2:	0018      	movs	r0, r3
   30ec4:	4b19      	ldr	r3, [pc, #100]	; (30f2c <http_client_socket_resolve_handler+0xb8>)
   30ec6:	4798      	blx	r3
					return;
   30ec8:	e028      	b.n	30f1c <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   30eca:	2308      	movs	r3, #8
   30ecc:	18fb      	adds	r3, r7, r3
   30ece:	2202      	movs	r2, #2
   30ed0:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30ed2:	69bb      	ldr	r3, [r7, #24]
   30ed4:	2250      	movs	r2, #80	; 0x50
   30ed6:	5a9b      	ldrh	r3, [r3, r2]
   30ed8:	021b      	lsls	r3, r3, #8
   30eda:	b21a      	sxth	r2, r3
   30edc:	69bb      	ldr	r3, [r7, #24]
   30ede:	2150      	movs	r1, #80	; 0x50
   30ee0:	5a5b      	ldrh	r3, [r3, r1]
   30ee2:	0a1b      	lsrs	r3, r3, #8
   30ee4:	b29b      	uxth	r3, r3
   30ee6:	b21b      	sxth	r3, r3
   30ee8:	4313      	orrs	r3, r2
   30eea:	b21b      	sxth	r3, r3
   30eec:	b29a      	uxth	r2, r3
   30eee:	2308      	movs	r3, #8
   30ef0:	18fb      	adds	r3, r7, r3
   30ef2:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   30ef4:	2308      	movs	r3, #8
   30ef6:	18fb      	adds	r3, r7, r3
   30ef8:	683a      	ldr	r2, [r7, #0]
   30efa:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   30efc:	69bb      	ldr	r3, [r7, #24]
   30efe:	781b      	ldrb	r3, [r3, #0]
   30f00:	b25b      	sxtb	r3, r3
   30f02:	2208      	movs	r2, #8
   30f04:	18b9      	adds	r1, r7, r2
   30f06:	2210      	movs	r2, #16
   30f08:	0018      	movs	r0, r3
   30f0a:	4b09      	ldr	r3, [pc, #36]	; (30f30 <http_client_socket_resolve_handler+0xbc>)
   30f0c:	4798      	blx	r3
				return;
   30f0e:	e005      	b.n	30f1c <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   30f10:	69fb      	ldr	r3, [r7, #28]
   30f12:	3301      	adds	r3, #1
   30f14:	61fb      	str	r3, [r7, #28]
   30f16:	69fb      	ldr	r3, [r7, #28]
   30f18:	2b06      	cmp	r3, #6
   30f1a:	ddb3      	ble.n	30e84 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   30f1c:	46bd      	mov	sp, r7
   30f1e:	b008      	add	sp, #32
   30f20:	bd80      	pop	{r7, pc}
   30f22:	46c0      	nop			; (mov r8, r8)
   30f24:	20004574 	.word	0x20004574
   30f28:	00034db7 	.word	0x00034db7
   30f2c:	0003130d 	.word	0x0003130d
   30f30:	00025831 	.word	0x00025831

00030f34 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   30f34:	b580      	push	{r7, lr}
   30f36:	b086      	sub	sp, #24
   30f38:	af00      	add	r7, sp, #0
   30f3a:	60f8      	str	r0, [r7, #12]
   30f3c:	60b9      	str	r1, [r7, #8]
   30f3e:	607a      	str	r2, [r7, #4]
   30f40:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   30f42:	687b      	ldr	r3, [r7, #4]
   30f44:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   30f46:	697b      	ldr	r3, [r7, #20]
   30f48:	2b00      	cmp	r3, #0
   30f4a:	d007      	beq.n	30f5c <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   30f4c:	233e      	movs	r3, #62	; 0x3e
   30f4e:	425a      	negs	r2, r3
   30f50:	697b      	ldr	r3, [r7, #20]
   30f52:	0011      	movs	r1, r2
   30f54:	0018      	movs	r0, r3
   30f56:	4b03      	ldr	r3, [pc, #12]	; (30f64 <http_client_timer_callback+0x30>)
   30f58:	4798      	blx	r3
   30f5a:	e000      	b.n	30f5e <http_client_timer_callback+0x2a>
		return;
   30f5c:	46c0      	nop			; (mov r8, r8)
}
   30f5e:	46bd      	mov	sp, r7
   30f60:	b006      	add	sp, #24
   30f62:	bd80      	pop	{r7, pc}
   30f64:	0003130d 	.word	0x0003130d

00030f68 <_is_ip>:

static int _is_ip(const char *host)
{
   30f68:	b580      	push	{r7, lr}
   30f6a:	b084      	sub	sp, #16
   30f6c:	af00      	add	r7, sp, #0
   30f6e:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   30f70:	2300      	movs	r3, #0
   30f72:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   30f74:	e03a      	b.n	30fec <_is_ip+0x84>
		ch = *host++;
   30f76:	687b      	ldr	r3, [r7, #4]
   30f78:	1c5a      	adds	r2, r3, #1
   30f7a:	607a      	str	r2, [r7, #4]
   30f7c:	220b      	movs	r2, #11
   30f7e:	18ba      	adds	r2, r7, r2
   30f80:	781b      	ldrb	r3, [r3, #0]
   30f82:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   30f84:	230b      	movs	r3, #11
   30f86:	18fb      	adds	r3, r7, r3
   30f88:	781b      	ldrb	r3, [r3, #0]
   30f8a:	2b60      	cmp	r3, #96	; 0x60
   30f8c:	d904      	bls.n	30f98 <_is_ip+0x30>
   30f8e:	230b      	movs	r3, #11
   30f90:	18fb      	adds	r3, r7, r3
   30f92:	781b      	ldrb	r3, [r3, #0]
   30f94:	2b66      	cmp	r3, #102	; 0x66
   30f96:	d913      	bls.n	30fc0 <_is_ip+0x58>
   30f98:	230b      	movs	r3, #11
   30f9a:	18fb      	adds	r3, r7, r3
   30f9c:	781b      	ldrb	r3, [r3, #0]
   30f9e:	2b40      	cmp	r3, #64	; 0x40
   30fa0:	d904      	bls.n	30fac <_is_ip+0x44>
   30fa2:	230b      	movs	r3, #11
   30fa4:	18fb      	adds	r3, r7, r3
   30fa6:	781b      	ldrb	r3, [r3, #0]
   30fa8:	2b46      	cmp	r3, #70	; 0x46
   30faa:	d909      	bls.n	30fc0 <_is_ip+0x58>
   30fac:	230b      	movs	r3, #11
   30fae:	18fb      	adds	r3, r7, r3
   30fb0:	781b      	ldrb	r3, [r3, #0]
   30fb2:	2b3a      	cmp	r3, #58	; 0x3a
   30fb4:	d004      	beq.n	30fc0 <_is_ip+0x58>
   30fb6:	230b      	movs	r3, #11
   30fb8:	18fb      	adds	r3, r7, r3
   30fba:	781b      	ldrb	r3, [r3, #0]
   30fbc:	2b2f      	cmp	r3, #47	; 0x2f
   30fbe:	d102      	bne.n	30fc6 <_is_ip+0x5e>
			isv6 = 1;
   30fc0:	2301      	movs	r3, #1
   30fc2:	60fb      	str	r3, [r7, #12]
   30fc4:	e012      	b.n	30fec <_is_ip+0x84>
		} else if (ch == '.') {
   30fc6:	230b      	movs	r3, #11
   30fc8:	18fb      	adds	r3, r7, r3
   30fca:	781b      	ldrb	r3, [r3, #0]
   30fcc:	2b2e      	cmp	r3, #46	; 0x2e
   30fce:	d104      	bne.n	30fda <_is_ip+0x72>
			if (isv6) {
   30fd0:	68fb      	ldr	r3, [r7, #12]
   30fd2:	2b00      	cmp	r3, #0
   30fd4:	d00a      	beq.n	30fec <_is_ip+0x84>
				return 0;
   30fd6:	2300      	movs	r3, #0
   30fd8:	e00d      	b.n	30ff6 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   30fda:	230b      	movs	r3, #11
   30fdc:	18fb      	adds	r3, r7, r3
   30fde:	781b      	ldrb	r3, [r3, #0]
   30fe0:	2230      	movs	r2, #48	; 0x30
   30fe2:	4013      	ands	r3, r2
   30fe4:	2b30      	cmp	r3, #48	; 0x30
   30fe6:	d001      	beq.n	30fec <_is_ip+0x84>
			return 0;
   30fe8:	2300      	movs	r3, #0
   30fea:	e004      	b.n	30ff6 <_is_ip+0x8e>
	while (*host != '\0') {
   30fec:	687b      	ldr	r3, [r7, #4]
   30fee:	781b      	ldrb	r3, [r3, #0]
   30ff0:	2b00      	cmp	r3, #0
   30ff2:	d1c0      	bne.n	30f76 <_is_ip+0xe>
		}
	}
	return 1;
   30ff4:	2301      	movs	r3, #1
}
   30ff6:	0018      	movs	r0, r3
   30ff8:	46bd      	mov	sp, r7
   30ffa:	b004      	add	sp, #16
   30ffc:	bd80      	pop	{r7, pc}
	...

00031000 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   31000:	b5b0      	push	{r4, r5, r7, lr}
   31002:	b08e      	sub	sp, #56	; 0x38
   31004:	af00      	add	r7, sp, #0
   31006:	60f8      	str	r0, [r7, #12]
   31008:	60b9      	str	r1, [r7, #8]
   3100a:	603b      	str	r3, [r7, #0]
   3100c:	1dfb      	adds	r3, r7, #7
   3100e:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   31010:	2337      	movs	r3, #55	; 0x37
   31012:	18fb      	adds	r3, r7, r3
   31014:	2200      	movs	r2, #0
   31016:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   31018:	2300      	movs	r3, #0
   3101a:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   3101c:	2300      	movs	r3, #0
   3101e:	633b      	str	r3, [r7, #48]	; 0x30
   31020:	2300      	movs	r3, #0
   31022:	62fb      	str	r3, [r7, #44]	; 0x2c
   31024:	2300      	movs	r3, #0
   31026:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   31028:	68fb      	ldr	r3, [r7, #12]
   3102a:	2b00      	cmp	r3, #0
   3102c:	d102      	bne.n	31034 <http_client_send_request+0x34>
		return -EINVAL;
   3102e:	2316      	movs	r3, #22
   31030:	425b      	negs	r3, r3
   31032:	e145      	b.n	312c0 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   31034:	68fb      	ldr	r3, [r7, #12]
   31036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31038:	2b02      	cmp	r3, #2
   3103a:	d902      	bls.n	31042 <http_client_send_request+0x42>
		return -EBUSY;
   3103c:	2310      	movs	r3, #16
   3103e:	425b      	negs	r3, r3
   31040:	e13e      	b.n	312c0 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   31042:	49a1      	ldr	r1, [pc, #644]	; (312c8 <http_client_send_request+0x2c8>)
   31044:	68bb      	ldr	r3, [r7, #8]
   31046:	2207      	movs	r2, #7
   31048:	0018      	movs	r0, r3
   3104a:	4ba0      	ldr	r3, [pc, #640]	; (312cc <http_client_send_request+0x2cc>)
   3104c:	4798      	blx	r3
   3104e:	1e03      	subs	r3, r0, #0
   31050:	d102      	bne.n	31058 <http_client_send_request+0x58>
		i = 7;
   31052:	2307      	movs	r3, #7
   31054:	633b      	str	r3, [r7, #48]	; 0x30
   31056:	e009      	b.n	3106c <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   31058:	499d      	ldr	r1, [pc, #628]	; (312d0 <http_client_send_request+0x2d0>)
   3105a:	68bb      	ldr	r3, [r7, #8]
   3105c:	2208      	movs	r2, #8
   3105e:	0018      	movs	r0, r3
   31060:	4b9a      	ldr	r3, [pc, #616]	; (312cc <http_client_send_request+0x2cc>)
   31062:	4798      	blx	r3
   31064:	1e03      	subs	r3, r0, #0
   31066:	d101      	bne.n	3106c <http_client_send_request+0x6c>
		i = 8;
   31068:	2308      	movs	r3, #8
   3106a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   3106c:	68fb      	ldr	r3, [r7, #12]
   3106e:	1c5c      	adds	r4, r3, #1
   31070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31072:	68ba      	ldr	r2, [r7, #8]
   31074:	18d5      	adds	r5, r2, r3
   31076:	68fb      	ldr	r3, [r7, #12]
   31078:	3301      	adds	r3, #1
   3107a:	0018      	movs	r0, r3
   3107c:	4b95      	ldr	r3, [pc, #596]	; (312d4 <http_client_send_request+0x2d4>)
   3107e:	4798      	blx	r3
   31080:	0003      	movs	r3, r0
   31082:	001a      	movs	r2, r3
   31084:	0029      	movs	r1, r5
   31086:	0020      	movs	r0, r4
   31088:	4b90      	ldr	r3, [pc, #576]	; (312cc <http_client_send_request+0x2cc>)
   3108a:	4798      	blx	r3
   3108c:	0003      	movs	r3, r0
   3108e:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31090:	e00d      	b.n	310ae <http_client_send_request+0xae>
		module->host[j++] = url[i];
   31092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31094:	1c5a      	adds	r2, r3, #1
   31096:	62fa      	str	r2, [r7, #44]	; 0x2c
   31098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   3109a:	68b9      	ldr	r1, [r7, #8]
   3109c:	188a      	adds	r2, r1, r2
   3109e:	7811      	ldrb	r1, [r2, #0]
   310a0:	68fa      	ldr	r2, [r7, #12]
   310a2:	18d3      	adds	r3, r2, r3
   310a4:	1c0a      	adds	r2, r1, #0
   310a6:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   310a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   310aa:	3301      	adds	r3, #1
   310ac:	633b      	str	r3, [r7, #48]	; 0x30
   310ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   310b0:	68ba      	ldr	r2, [r7, #8]
   310b2:	18d3      	adds	r3, r2, r3
   310b4:	781b      	ldrb	r3, [r3, #0]
   310b6:	2b00      	cmp	r3, #0
   310b8:	d005      	beq.n	310c6 <http_client_send_request+0xc6>
   310ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   310bc:	68ba      	ldr	r2, [r7, #8]
   310be:	18d3      	adds	r3, r2, r3
   310c0:	781b      	ldrb	r3, [r3, #0]
   310c2:	2b2f      	cmp	r3, #47	; 0x2f
   310c4:	d1e5      	bne.n	31092 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   310c6:	68fa      	ldr	r2, [r7, #12]
   310c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   310ca:	18d3      	adds	r3, r2, r3
   310cc:	3301      	adds	r3, #1
   310ce:	2200      	movs	r2, #0
   310d0:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   310d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   310d4:	68ba      	ldr	r2, [r7, #8]
   310d6:	18d3      	adds	r3, r2, r3
   310d8:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   310da:	68fb      	ldr	r3, [r7, #12]
   310dc:	3301      	adds	r3, #1
   310de:	781b      	ldrb	r3, [r3, #0]
   310e0:	2b00      	cmp	r3, #0
   310e2:	d102      	bne.n	310ea <http_client_send_request+0xea>
		return -EINVAL;
   310e4:	2316      	movs	r3, #22
   310e6:	425b      	negs	r3, r3
   310e8:	e0ea      	b.n	312c0 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   310ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   310ec:	0018      	movs	r0, r3
   310ee:	4b79      	ldr	r3, [pc, #484]	; (312d4 <http_client_send_request+0x2d4>)
   310f0:	4798      	blx	r3
   310f2:	0003      	movs	r3, r0
   310f4:	2b3f      	cmp	r3, #63	; 0x3f
   310f6:	d902      	bls.n	310fe <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   310f8:	235b      	movs	r3, #91	; 0x5b
   310fa:	425b      	negs	r3, r3
   310fc:	e0e0      	b.n	312c0 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   310fe:	68fb      	ldr	r3, [r7, #12]
   31100:	22d4      	movs	r2, #212	; 0xd4
   31102:	589b      	ldr	r3, [r3, r2]
   31104:	2b00      	cmp	r3, #0
   31106:	d005      	beq.n	31114 <http_client_send_request+0x114>
		free(module->req.ext_header);
   31108:	68fb      	ldr	r3, [r7, #12]
   3110a:	22d4      	movs	r2, #212	; 0xd4
   3110c:	589b      	ldr	r3, [r3, r2]
   3110e:	0018      	movs	r0, r3
   31110:	4b71      	ldr	r3, [pc, #452]	; (312d8 <http_client_send_request+0x2d8>)
   31112:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   31114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31116:	2b00      	cmp	r3, #0
   31118:	d010      	beq.n	3113c <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   3111a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   3111c:	0018      	movs	r0, r3
   3111e:	4b6f      	ldr	r3, [pc, #444]	; (312dc <http_client_send_request+0x2dc>)
   31120:	4798      	blx	r3
   31122:	0003      	movs	r3, r0
   31124:	0019      	movs	r1, r3
   31126:	68fb      	ldr	r3, [r7, #12]
   31128:	22d4      	movs	r2, #212	; 0xd4
   3112a:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   3112c:	68fb      	ldr	r3, [r7, #12]
   3112e:	22d4      	movs	r2, #212	; 0xd4
   31130:	589b      	ldr	r3, [r3, r2]
   31132:	2b00      	cmp	r3, #0
   31134:	d106      	bne.n	31144 <http_client_send_request+0x144>
			return -ENOMEM;
   31136:	230c      	movs	r3, #12
   31138:	425b      	negs	r3, r3
   3113a:	e0c1      	b.n	312c0 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   3113c:	68fb      	ldr	r3, [r7, #12]
   3113e:	22d4      	movs	r2, #212	; 0xd4
   31140:	2100      	movs	r1, #0
   31142:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   31144:	68fb      	ldr	r3, [r7, #12]
   31146:	2241      	movs	r2, #65	; 0x41
   31148:	5c99      	ldrb	r1, [r3, r2]
   3114a:	2001      	movs	r0, #1
   3114c:	4381      	bics	r1, r0
   3114e:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   31150:	68fb      	ldr	r3, [r7, #12]
   31152:	2200      	movs	r2, #0
   31154:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   31156:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31158:	781b      	ldrb	r3, [r3, #0]
   3115a:	2b2f      	cmp	r3, #47	; 0x2f
   3115c:	d107      	bne.n	3116e <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   3115e:	68fb      	ldr	r3, [r7, #12]
   31160:	3370      	adds	r3, #112	; 0x70
   31162:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31164:	0011      	movs	r1, r2
   31166:	0018      	movs	r0, r3
   31168:	4b5d      	ldr	r3, [pc, #372]	; (312e0 <http_client_send_request+0x2e0>)
   3116a:	4798      	blx	r3
   3116c:	e00f      	b.n	3118e <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   3116e:	68fb      	ldr	r3, [r7, #12]
   31170:	2270      	movs	r2, #112	; 0x70
   31172:	212f      	movs	r1, #47	; 0x2f
   31174:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   31176:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31178:	781b      	ldrb	r3, [r3, #0]
   3117a:	2b00      	cmp	r3, #0
   3117c:	d007      	beq.n	3118e <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   3117e:	68fb      	ldr	r3, [r7, #12]
   31180:	3370      	adds	r3, #112	; 0x70
   31182:	3301      	adds	r3, #1
   31184:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31186:	0011      	movs	r1, r2
   31188:	0018      	movs	r0, r3
   3118a:	4b55      	ldr	r3, [pc, #340]	; (312e0 <http_client_send_request+0x2e0>)
   3118c:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   3118e:	683b      	ldr	r3, [r7, #0]
   31190:	2b00      	cmp	r3, #0
   31192:	d007      	beq.n	311a4 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   31194:	68fb      	ldr	r3, [r7, #12]
   31196:	33b0      	adds	r3, #176	; 0xb0
   31198:	6839      	ldr	r1, [r7, #0]
   3119a:	2218      	movs	r2, #24
   3119c:	0018      	movs	r0, r3
   3119e:	4b51      	ldr	r3, [pc, #324]	; (312e4 <http_client_send_request+0x2e4>)
   311a0:	4798      	blx	r3
   311a2:	e006      	b.n	311b2 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   311a4:	68fb      	ldr	r3, [r7, #12]
   311a6:	33b0      	adds	r3, #176	; 0xb0
   311a8:	2218      	movs	r2, #24
   311aa:	2100      	movs	r1, #0
   311ac:	0018      	movs	r0, r3
   311ae:	4b4e      	ldr	r3, [pc, #312]	; (312e8 <http_client_send_request+0x2e8>)
   311b0:	4798      	blx	r3
	}

	module->req.method = method;
   311b2:	68fb      	ldr	r3, [r7, #12]
   311b4:	1dfa      	adds	r2, r7, #7
   311b6:	21c8      	movs	r1, #200	; 0xc8
   311b8:	7812      	ldrb	r2, [r2, #0]
   311ba:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   311bc:	68fb      	ldr	r3, [r7, #12]
   311be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   311c0:	2b01      	cmp	r3, #1
   311c2:	d003      	beq.n	311cc <http_client_send_request+0x1cc>
   311c4:	d316      	bcc.n	311f4 <http_client_send_request+0x1f4>
   311c6:	2b02      	cmp	r3, #2
   311c8:	d004      	beq.n	311d4 <http_client_send_request+0x1d4>
   311ca:	e074      	b.n	312b6 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   311cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   311ce:	2b00      	cmp	r3, #0
   311d0:	d100      	bne.n	311d4 <http_client_send_request+0x1d4>
   311d2:	e073      	b.n	312bc <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   311d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   311d6:	2b00      	cmp	r3, #0
   311d8:	d107      	bne.n	311ea <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   311da:	68fb      	ldr	r3, [r7, #12]
   311dc:	2203      	movs	r2, #3
   311de:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   311e0:	68fb      	ldr	r3, [r7, #12]
   311e2:	0018      	movs	r0, r3
   311e4:	4b41      	ldr	r3, [pc, #260]	; (312ec <http_client_send_request+0x2ec>)
   311e6:	4798      	blx	r3
			break;
   311e8:	e069      	b.n	312be <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   311ea:	68fb      	ldr	r3, [r7, #12]
   311ec:	2100      	movs	r1, #0
   311ee:	0018      	movs	r0, r3
   311f0:	4b3f      	ldr	r3, [pc, #252]	; (312f0 <http_client_send_request+0x2f0>)
   311f2:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   311f4:	68fb      	ldr	r3, [r7, #12]
   311f6:	2252      	movs	r2, #82	; 0x52
   311f8:	5c9b      	ldrb	r3, [r3, r2]
   311fa:	2b00      	cmp	r3, #0
   311fc:	d007      	beq.n	3120e <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   311fe:	2337      	movs	r3, #55	; 0x37
   31200:	18fb      	adds	r3, r7, r3
   31202:	2237      	movs	r2, #55	; 0x37
   31204:	18ba      	adds	r2, r7, r2
   31206:	7812      	ldrb	r2, [r2, #0]
   31208:	2101      	movs	r1, #1
   3120a:	430a      	orrs	r2, r1
   3120c:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   3120e:	2337      	movs	r3, #55	; 0x37
   31210:	18fb      	adds	r3, r7, r3
   31212:	781b      	ldrb	r3, [r3, #0]
   31214:	001a      	movs	r2, r3
   31216:	2101      	movs	r1, #1
   31218:	2002      	movs	r0, #2
   3121a:	4b36      	ldr	r3, [pc, #216]	; (312f4 <http_client_send_request+0x2f4>)
   3121c:	4798      	blx	r3
   3121e:	0003      	movs	r3, r0
   31220:	001a      	movs	r2, r3
   31222:	68fb      	ldr	r3, [r7, #12]
   31224:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   31226:	68fb      	ldr	r3, [r7, #12]
   31228:	781b      	ldrb	r3, [r3, #0]
   3122a:	b25b      	sxtb	r3, r3
   3122c:	2b00      	cmp	r3, #0
   3122e:	db3f      	blt.n	312b0 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   31230:	68fb      	ldr	r3, [r7, #12]
   31232:	781b      	ldrb	r3, [r3, #0]
   31234:	b25b      	sxtb	r3, r3
   31236:	001a      	movs	r2, r3
   31238:	4b2f      	ldr	r3, [pc, #188]	; (312f8 <http_client_send_request+0x2f8>)
   3123a:	0092      	lsls	r2, r2, #2
   3123c:	68f9      	ldr	r1, [r7, #12]
   3123e:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   31240:	68fb      	ldr	r3, [r7, #12]
   31242:	3301      	adds	r3, #1
   31244:	0018      	movs	r0, r3
   31246:	4b2d      	ldr	r3, [pc, #180]	; (312fc <http_client_send_request+0x2fc>)
   31248:	4798      	blx	r3
   3124a:	1e03      	subs	r3, r0, #0
   3124c:	d027      	beq.n	3129e <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   3124e:	2314      	movs	r3, #20
   31250:	18fb      	adds	r3, r7, r3
   31252:	2202      	movs	r2, #2
   31254:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31256:	68fb      	ldr	r3, [r7, #12]
   31258:	2250      	movs	r2, #80	; 0x50
   3125a:	5a9b      	ldrh	r3, [r3, r2]
   3125c:	021b      	lsls	r3, r3, #8
   3125e:	b21a      	sxth	r2, r3
   31260:	68fb      	ldr	r3, [r7, #12]
   31262:	2150      	movs	r1, #80	; 0x50
   31264:	5a5b      	ldrh	r3, [r3, r1]
   31266:	0a1b      	lsrs	r3, r3, #8
   31268:	b29b      	uxth	r3, r3
   3126a:	b21b      	sxth	r3, r3
   3126c:	4313      	orrs	r3, r2
   3126e:	b21b      	sxth	r3, r3
   31270:	b29a      	uxth	r2, r3
   31272:	2314      	movs	r3, #20
   31274:	18fb      	adds	r3, r7, r3
   31276:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   31278:	68fb      	ldr	r3, [r7, #12]
   3127a:	3301      	adds	r3, #1
   3127c:	0018      	movs	r0, r3
   3127e:	4b20      	ldr	r3, [pc, #128]	; (31300 <http_client_send_request+0x300>)
   31280:	4798      	blx	r3
   31282:	0002      	movs	r2, r0
   31284:	2314      	movs	r3, #20
   31286:	18fb      	adds	r3, r7, r3
   31288:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   3128a:	68fb      	ldr	r3, [r7, #12]
   3128c:	781b      	ldrb	r3, [r3, #0]
   3128e:	b25b      	sxtb	r3, r3
   31290:	2214      	movs	r2, #20
   31292:	18b9      	adds	r1, r7, r2
   31294:	2210      	movs	r2, #16
   31296:	0018      	movs	r0, r3
   31298:	4b1a      	ldr	r3, [pc, #104]	; (31304 <http_client_send_request+0x304>)
   3129a:	4798      	blx	r3
   3129c:	e004      	b.n	312a8 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   3129e:	68fb      	ldr	r3, [r7, #12]
   312a0:	3301      	adds	r3, #1
   312a2:	0018      	movs	r0, r3
   312a4:	4b18      	ldr	r3, [pc, #96]	; (31308 <http_client_send_request+0x308>)
   312a6:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   312a8:	68fb      	ldr	r3, [r7, #12]
   312aa:	2201      	movs	r2, #1
   312ac:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   312ae:	e006      	b.n	312be <http_client_send_request+0x2be>
			return -ENOSPC;
   312b0:	231c      	movs	r3, #28
   312b2:	425b      	negs	r3, r3
   312b4:	e004      	b.n	312c0 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   312b6:	230b      	movs	r3, #11
   312b8:	425b      	negs	r3, r3
   312ba:	e001      	b.n	312c0 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   312bc:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   312be:	2300      	movs	r3, #0
}
   312c0:	0018      	movs	r0, r3
   312c2:	46bd      	mov	sp, r7
   312c4:	b00e      	add	sp, #56	; 0x38
   312c6:	bdb0      	pop	{r4, r5, r7, pc}
   312c8:	00039d7c 	.word	0x00039d7c
   312cc:	00034e25 	.word	0x00034e25
   312d0:	00039d84 	.word	0x00039d84
   312d4:	00034e17 	.word	0x00034e17
   312d8:	00034a15 	.word	0x00034a15
   312dc:	00034ddd 	.word	0x00034ddd
   312e0:	00034dcb 	.word	0x00034dcb
   312e4:	00034a29 	.word	0x00034a29
   312e8:	00034a5f 	.word	0x00034a5f
   312ec:	00031461 	.word	0x00031461
   312f0:	0003130d 	.word	0x0003130d
   312f4:	0002561d 	.word	0x0002561d
   312f8:	20004574 	.word	0x20004574
   312fc:	00030f69 	.word	0x00030f69
   31300:	00025d69 	.word	0x00025d69
   31304:	00025831 	.word	0x00025831
   31308:	00025e71 	.word	0x00025e71

0003130c <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   3130c:	b580      	push	{r7, lr}
   3130e:	b086      	sub	sp, #24
   31310:	af00      	add	r7, sp, #0
   31312:	6078      	str	r0, [r7, #4]
   31314:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   31316:	687b      	ldr	r3, [r7, #4]
   31318:	22c0      	movs	r2, #192	; 0xc0
   3131a:	589b      	ldr	r3, [r3, r2]
   3131c:	2b00      	cmp	r3, #0
   3131e:	d007      	beq.n	31330 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   31320:	687b      	ldr	r3, [r7, #4]
   31322:	22c0      	movs	r2, #192	; 0xc0
   31324:	589b      	ldr	r3, [r3, r2]
   31326:	687a      	ldr	r2, [r7, #4]
   31328:	21c4      	movs	r1, #196	; 0xc4
   3132a:	5852      	ldr	r2, [r2, r1]
   3132c:	0010      	movs	r0, r2
   3132e:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   31330:	687b      	ldr	r3, [r7, #4]
   31332:	33b0      	adds	r3, #176	; 0xb0
   31334:	2218      	movs	r2, #24
   31336:	2100      	movs	r1, #0
   31338:	0018      	movs	r0, r3
   3133a:	4b24      	ldr	r3, [pc, #144]	; (313cc <_http_client_clear_conn+0xc0>)
   3133c:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   3133e:	687b      	ldr	r3, [r7, #4]
   31340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31342:	2b00      	cmp	r3, #0
   31344:	d005      	beq.n	31352 <_http_client_clear_conn+0x46>
		close(module->sock);
   31346:	687b      	ldr	r3, [r7, #4]
   31348:	781b      	ldrb	r3, [r3, #0]
   3134a:	b25b      	sxtb	r3, r3
   3134c:	0018      	movs	r0, r3
   3134e:	4b20      	ldr	r3, [pc, #128]	; (313d0 <_http_client_clear_conn+0xc4>)
   31350:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   31352:	687b      	ldr	r3, [r7, #4]
   31354:	781b      	ldrb	r3, [r3, #0]
   31356:	b25b      	sxtb	r3, r3
   31358:	001a      	movs	r2, r3
   3135a:	4b1e      	ldr	r3, [pc, #120]	; (313d4 <_http_client_clear_conn+0xc8>)
   3135c:	0092      	lsls	r2, r2, #2
   3135e:	2100      	movs	r1, #0
   31360:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   31362:	687b      	ldr	r3, [r7, #4]
   31364:	336c      	adds	r3, #108	; 0x6c
   31366:	226c      	movs	r2, #108	; 0x6c
   31368:	2100      	movs	r1, #0
   3136a:	0018      	movs	r0, r3
   3136c:	4b17      	ldr	r3, [pc, #92]	; (313cc <_http_client_clear_conn+0xc0>)
   3136e:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   31370:	687b      	ldr	r3, [r7, #4]
   31372:	33d8      	adds	r3, #216	; 0xd8
   31374:	2210      	movs	r2, #16
   31376:	2100      	movs	r1, #0
   31378:	0018      	movs	r0, r3
   3137a:	4b14      	ldr	r3, [pc, #80]	; (313cc <_http_client_clear_conn+0xc0>)
   3137c:	4798      	blx	r3
	module->req.state = STATE_INIT;
   3137e:	687b      	ldr	r3, [r7, #4]
   31380:	2200      	movs	r2, #0
   31382:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   31384:	687b      	ldr	r3, [r7, #4]
   31386:	22d8      	movs	r2, #216	; 0xd8
   31388:	2100      	movs	r1, #0
   3138a:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   3138c:	687b      	ldr	r3, [r7, #4]
   3138e:	2241      	movs	r2, #65	; 0x41
   31390:	5c99      	ldrb	r1, [r3, r2]
   31392:	2001      	movs	r0, #1
   31394:	4381      	bics	r1, r0
   31396:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   31398:	687b      	ldr	r3, [r7, #4]
   3139a:	2241      	movs	r2, #65	; 0x41
   3139c:	5c99      	ldrb	r1, [r3, r2]
   3139e:	2002      	movs	r0, #2
   313a0:	4381      	bics	r1, r0
   313a2:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   313a4:	230c      	movs	r3, #12
   313a6:	18fb      	adds	r3, r7, r3
   313a8:	683a      	ldr	r2, [r7, #0]
   313aa:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   313ac:	687b      	ldr	r3, [r7, #4]
   313ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   313b0:	2b00      	cmp	r3, #0
   313b2:	d006      	beq.n	313c2 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   313b4:	687b      	ldr	r3, [r7, #4]
   313b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   313b8:	220c      	movs	r2, #12
   313ba:	18ba      	adds	r2, r7, r2
   313bc:	6878      	ldr	r0, [r7, #4]
   313be:	2104      	movs	r1, #4
   313c0:	4798      	blx	r3
	}
}
   313c2:	46c0      	nop			; (mov r8, r8)
   313c4:	46bd      	mov	sp, r7
   313c6:	b006      	add	sp, #24
   313c8:	bd80      	pop	{r7, pc}
   313ca:	46c0      	nop			; (mov r8, r8)
   313cc:	00034a5f 	.word	0x00034a5f
   313d0:	00025c29 	.word	0x00025c29
   313d4:	20004574 	.word	0x20004574

000313d8 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   313d8:	b590      	push	{r4, r7, lr}
   313da:	b087      	sub	sp, #28
   313dc:	af00      	add	r7, sp, #0
   313de:	60f8      	str	r0, [r7, #12]
   313e0:	60b9      	str	r1, [r7, #8]
   313e2:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   313e4:	68fb      	ldr	r3, [r7, #12]
   313e6:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   313e8:	697b      	ldr	r3, [r7, #20]
   313ea:	2241      	movs	r2, #65	; 0x41
   313ec:	5c99      	ldrb	r1, [r3, r2]
   313ee:	2001      	movs	r0, #1
   313f0:	4301      	orrs	r1, r0
   313f2:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   313f4:	697b      	ldr	r3, [r7, #20]
   313f6:	2000      	movs	r0, #0
   313f8:	5618      	ldrsb	r0, [r3, r0]
   313fa:	687b      	ldr	r3, [r7, #4]
   313fc:	b29a      	uxth	r2, r3
   313fe:	68b9      	ldr	r1, [r7, #8]
   31400:	2300      	movs	r3, #0
   31402:	4c14      	ldr	r4, [pc, #80]	; (31454 <_http_client_send_wait+0x7c>)
   31404:	47a0      	blx	r4
   31406:	0003      	movs	r3, r0
   31408:	613b      	str	r3, [r7, #16]
   3140a:	693b      	ldr	r3, [r7, #16]
   3140c:	2b00      	cmp	r3, #0
   3140e:	da0f      	bge.n	31430 <_http_client_send_wait+0x58>
		module->sending = 0;
   31410:	697b      	ldr	r3, [r7, #20]
   31412:	2241      	movs	r2, #65	; 0x41
   31414:	5c99      	ldrb	r1, [r3, r2]
   31416:	2001      	movs	r0, #1
   31418:	4381      	bics	r1, r0
   3141a:	5499      	strb	r1, [r3, r2]
		return result;
   3141c:	693b      	ldr	r3, [r7, #16]
   3141e:	e014      	b.n	3144a <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   31420:	2000      	movs	r0, #0
   31422:	4b0d      	ldr	r3, [pc, #52]	; (31458 <_http_client_send_wait+0x80>)
   31424:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   31426:	697b      	ldr	r3, [r7, #20]
   31428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   3142a:	0018      	movs	r0, r3
   3142c:	4b0b      	ldr	r3, [pc, #44]	; (3145c <_http_client_send_wait+0x84>)
   3142e:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   31430:	697b      	ldr	r3, [r7, #20]
   31432:	2241      	movs	r2, #65	; 0x41
   31434:	5c9b      	ldrb	r3, [r3, r2]
   31436:	2201      	movs	r2, #1
   31438:	4013      	ands	r3, r2
   3143a:	b2db      	uxtb	r3, r3
   3143c:	2b00      	cmp	r3, #0
   3143e:	d003      	beq.n	31448 <_http_client_send_wait+0x70>
   31440:	697b      	ldr	r3, [r7, #20]
   31442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31444:	2b02      	cmp	r3, #2
   31446:	d8eb      	bhi.n	31420 <_http_client_send_wait+0x48>
	}

	return 0;
   31448:	2300      	movs	r3, #0
}
   3144a:	0018      	movs	r0, r3
   3144c:	46bd      	mov	sp, r7
   3144e:	b007      	add	sp, #28
   31450:	bd90      	pop	{r4, r7, pc}
   31452:	46c0      	nop			; (mov r8, r8)
   31454:	00025945 	.word	0x00025945
   31458:	00021ff1 	.word	0x00021ff1
   3145c:	000326e5 	.word	0x000326e5

00031460 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   31460:	b5f0      	push	{r4, r5, r6, r7, lr}
   31462:	46c6      	mov	lr, r8
   31464:	b500      	push	{lr}
   31466:	b0a0      	sub	sp, #128	; 0x80
   31468:	af02      	add	r7, sp, #8
   3146a:	61f8      	str	r0, [r7, #28]
   3146c:	4668      	mov	r0, sp
   3146e:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   31470:	2318      	movs	r3, #24
   31472:	2218      	movs	r2, #24
   31474:	18ba      	adds	r2, r7, r2
   31476:	18d0      	adds	r0, r2, r3
   31478:	4bbd      	ldr	r3, [pc, #756]	; (31770 <_http_client_request+0x310>)
   3147a:	469c      	mov	ip, r3
   3147c:	4663      	mov	r3, ip
   3147e:	cb16      	ldmia	r3!, {r1, r2, r4}
   31480:	c016      	stmia	r0!, {r1, r2, r4}
   31482:	469c      	mov	ip, r3
   31484:	4663      	mov	r3, ip
   31486:	681b      	ldr	r3, [r3, #0]
   31488:	469c      	mov	ip, r3
   3148a:	4663      	mov	r3, ip
   3148c:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   3148e:	69f8      	ldr	r0, [r7, #28]
   31490:	6e40      	ldr	r0, [r0, #100]	; 0x64
   31492:	4684      	mov	ip, r0
   31494:	2301      	movs	r3, #1
   31496:	425b      	negs	r3, r3
   31498:	4698      	mov	r8, r3
   3149a:	44c4      	add	ip, r8
   3149c:	4663      	mov	r3, ip
   3149e:	66fb      	str	r3, [r7, #108]	; 0x6c
   314a0:	6038      	str	r0, [r7, #0]
   314a2:	2300      	movs	r3, #0
   314a4:	607b      	str	r3, [r7, #4]
   314a6:	6839      	ldr	r1, [r7, #0]
   314a8:	687a      	ldr	r2, [r7, #4]
   314aa:	000b      	movs	r3, r1
   314ac:	0f5b      	lsrs	r3, r3, #29
   314ae:	469c      	mov	ip, r3
   314b0:	0013      	movs	r3, r2
   314b2:	00db      	lsls	r3, r3, #3
   314b4:	617b      	str	r3, [r7, #20]
   314b6:	4663      	mov	r3, ip
   314b8:	697c      	ldr	r4, [r7, #20]
   314ba:	431c      	orrs	r4, r3
   314bc:	617c      	str	r4, [r7, #20]
   314be:	000b      	movs	r3, r1
   314c0:	00db      	lsls	r3, r3, #3
   314c2:	613b      	str	r3, [r7, #16]
   314c4:	0005      	movs	r5, r0
   314c6:	2200      	movs	r2, #0
   314c8:	0016      	movs	r6, r2
   314ca:	0f6a      	lsrs	r2, r5, #29
   314cc:	00f3      	lsls	r3, r6, #3
   314ce:	60fb      	str	r3, [r7, #12]
   314d0:	68fb      	ldr	r3, [r7, #12]
   314d2:	4313      	orrs	r3, r2
   314d4:	60fb      	str	r3, [r7, #12]
   314d6:	00eb      	lsls	r3, r5, #3
   314d8:	60bb      	str	r3, [r7, #8]
   314da:	1dc3      	adds	r3, r0, #7
   314dc:	08db      	lsrs	r3, r3, #3
   314de:	00db      	lsls	r3, r3, #3
   314e0:	466a      	mov	r2, sp
   314e2:	1ad3      	subs	r3, r2, r3
   314e4:	469d      	mov	sp, r3
   314e6:	ab02      	add	r3, sp, #8
   314e8:	3300      	adds	r3, #0
   314ea:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   314ec:	69fb      	ldr	r3, [r7, #28]
   314ee:	2b00      	cmp	r3, #0
   314f0:	d100      	bne.n	314f4 <_http_client_request+0x94>
   314f2:	e346      	b.n	31b82 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   314f4:	69fb      	ldr	r3, [r7, #28]
   314f6:	2241      	movs	r2, #65	; 0x41
   314f8:	5c9b      	ldrb	r3, [r3, r2]
   314fa:	2201      	movs	r2, #1
   314fc:	4013      	ands	r3, r2
   314fe:	b2db      	uxtb	r3, r3
   31500:	2b00      	cmp	r3, #0
   31502:	d000      	beq.n	31506 <_http_client_request+0xa6>
   31504:	e33f      	b.n	31b86 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   31506:	69fb      	ldr	r3, [r7, #28]
   31508:	33b0      	adds	r3, #176	; 0xb0
   3150a:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   3150c:	69fb      	ldr	r3, [r7, #28]
   3150e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31510:	2b03      	cmp	r3, #3
   31512:	d003      	beq.n	3151c <_http_client_request+0xbc>
   31514:	2b04      	cmp	r3, #4
   31516:	d100      	bne.n	3151a <_http_client_request+0xba>
   31518:	e1b3      	b.n	31882 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   3151a:	e32f      	b.n	31b7c <_http_client_request+0x71c>
		module->req.content_length = 0;
   3151c:	69fb      	ldr	r3, [r7, #28]
   3151e:	22cc      	movs	r2, #204	; 0xcc
   31520:	2100      	movs	r1, #0
   31522:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   31524:	69fb      	ldr	r3, [r7, #28]
   31526:	22d0      	movs	r2, #208	; 0xd0
   31528:	2100      	movs	r1, #0
   3152a:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   3152c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3152e:	69fb      	ldr	r3, [r7, #28]
   31530:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   31532:	4c90      	ldr	r4, [pc, #576]	; (31774 <_http_client_request+0x314>)
   31534:	2334      	movs	r3, #52	; 0x34
   31536:	2018      	movs	r0, #24
   31538:	1838      	adds	r0, r7, r0
   3153a:	18c0      	adds	r0, r0, r3
   3153c:	69fb      	ldr	r3, [r7, #28]
   3153e:	9300      	str	r3, [sp, #0]
   31540:	0023      	movs	r3, r4
   31542:	4c8d      	ldr	r4, [pc, #564]	; (31778 <_http_client_request+0x318>)
   31544:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   31546:	69fb      	ldr	r3, [r7, #28]
   31548:	22c8      	movs	r2, #200	; 0xc8
   3154a:	5c9b      	ldrb	r3, [r3, r2]
   3154c:	2b01      	cmp	r3, #1
   3154e:	d10a      	bne.n	31566 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   31550:	498a      	ldr	r1, [pc, #552]	; (3177c <_http_client_request+0x31c>)
   31552:	2334      	movs	r3, #52	; 0x34
   31554:	2218      	movs	r2, #24
   31556:	4694      	mov	ip, r2
   31558:	44bc      	add	ip, r7
   3155a:	4463      	add	r3, ip
   3155c:	2204      	movs	r2, #4
   3155e:	0018      	movs	r0, r3
   31560:	4b87      	ldr	r3, [pc, #540]	; (31780 <_http_client_request+0x320>)
   31562:	4798      	blx	r3
   31564:	e04e      	b.n	31604 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   31566:	69fb      	ldr	r3, [r7, #28]
   31568:	22c8      	movs	r2, #200	; 0xc8
   3156a:	5c9b      	ldrb	r3, [r3, r2]
   3156c:	2b02      	cmp	r3, #2
   3156e:	d10a      	bne.n	31586 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   31570:	4984      	ldr	r1, [pc, #528]	; (31784 <_http_client_request+0x324>)
   31572:	2334      	movs	r3, #52	; 0x34
   31574:	2218      	movs	r2, #24
   31576:	4694      	mov	ip, r2
   31578:	44bc      	add	ip, r7
   3157a:	4463      	add	r3, ip
   3157c:	2205      	movs	r2, #5
   3157e:	0018      	movs	r0, r3
   31580:	4b7f      	ldr	r3, [pc, #508]	; (31780 <_http_client_request+0x320>)
   31582:	4798      	blx	r3
   31584:	e03e      	b.n	31604 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   31586:	69fb      	ldr	r3, [r7, #28]
   31588:	22c8      	movs	r2, #200	; 0xc8
   3158a:	5c9b      	ldrb	r3, [r3, r2]
   3158c:	2b03      	cmp	r3, #3
   3158e:	d10a      	bne.n	315a6 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   31590:	497d      	ldr	r1, [pc, #500]	; (31788 <_http_client_request+0x328>)
   31592:	2334      	movs	r3, #52	; 0x34
   31594:	2218      	movs	r2, #24
   31596:	4694      	mov	ip, r2
   31598:	44bc      	add	ip, r7
   3159a:	4463      	add	r3, ip
   3159c:	2207      	movs	r2, #7
   3159e:	0018      	movs	r0, r3
   315a0:	4b77      	ldr	r3, [pc, #476]	; (31780 <_http_client_request+0x320>)
   315a2:	4798      	blx	r3
   315a4:	e02e      	b.n	31604 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   315a6:	69fb      	ldr	r3, [r7, #28]
   315a8:	22c8      	movs	r2, #200	; 0xc8
   315aa:	5c9b      	ldrb	r3, [r3, r2]
   315ac:	2b04      	cmp	r3, #4
   315ae:	d10a      	bne.n	315c6 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   315b0:	4976      	ldr	r1, [pc, #472]	; (3178c <_http_client_request+0x32c>)
   315b2:	2334      	movs	r3, #52	; 0x34
   315b4:	2218      	movs	r2, #24
   315b6:	4694      	mov	ip, r2
   315b8:	44bc      	add	ip, r7
   315ba:	4463      	add	r3, ip
   315bc:	2204      	movs	r2, #4
   315be:	0018      	movs	r0, r3
   315c0:	4b6f      	ldr	r3, [pc, #444]	; (31780 <_http_client_request+0x320>)
   315c2:	4798      	blx	r3
   315c4:	e01e      	b.n	31604 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   315c6:	69fb      	ldr	r3, [r7, #28]
   315c8:	22c8      	movs	r2, #200	; 0xc8
   315ca:	5c9b      	ldrb	r3, [r3, r2]
   315cc:	2b05      	cmp	r3, #5
   315ce:	d10a      	bne.n	315e6 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   315d0:	496f      	ldr	r1, [pc, #444]	; (31790 <_http_client_request+0x330>)
   315d2:	2334      	movs	r3, #52	; 0x34
   315d4:	2218      	movs	r2, #24
   315d6:	4694      	mov	ip, r2
   315d8:	44bc      	add	ip, r7
   315da:	4463      	add	r3, ip
   315dc:	2208      	movs	r2, #8
   315de:	0018      	movs	r0, r3
   315e0:	4b67      	ldr	r3, [pc, #412]	; (31780 <_http_client_request+0x320>)
   315e2:	4798      	blx	r3
   315e4:	e00e      	b.n	31604 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   315e6:	69fb      	ldr	r3, [r7, #28]
   315e8:	22c8      	movs	r2, #200	; 0xc8
   315ea:	5c9b      	ldrb	r3, [r3, r2]
   315ec:	2b06      	cmp	r3, #6
   315ee:	d109      	bne.n	31604 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   315f0:	4968      	ldr	r1, [pc, #416]	; (31794 <_http_client_request+0x334>)
   315f2:	2334      	movs	r3, #52	; 0x34
   315f4:	2218      	movs	r2, #24
   315f6:	4694      	mov	ip, r2
   315f8:	44bc      	add	ip, r7
   315fa:	4463      	add	r3, ip
   315fc:	2205      	movs	r2, #5
   315fe:	0018      	movs	r0, r3
   31600:	4b5f      	ldr	r3, [pc, #380]	; (31780 <_http_client_request+0x320>)
   31602:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   31604:	69fb      	ldr	r3, [r7, #28]
   31606:	3370      	adds	r3, #112	; 0x70
   31608:	001c      	movs	r4, r3
   3160a:	69fb      	ldr	r3, [r7, #28]
   3160c:	3370      	adds	r3, #112	; 0x70
   3160e:	0018      	movs	r0, r3
   31610:	4b61      	ldr	r3, [pc, #388]	; (31798 <_http_client_request+0x338>)
   31612:	4798      	blx	r3
   31614:	0002      	movs	r2, r0
   31616:	2334      	movs	r3, #52	; 0x34
   31618:	2118      	movs	r1, #24
   3161a:	468c      	mov	ip, r1
   3161c:	44bc      	add	ip, r7
   3161e:	4463      	add	r3, ip
   31620:	0021      	movs	r1, r4
   31622:	0018      	movs	r0, r3
   31624:	4b56      	ldr	r3, [pc, #344]	; (31780 <_http_client_request+0x320>)
   31626:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   31628:	495c      	ldr	r1, [pc, #368]	; (3179c <_http_client_request+0x33c>)
   3162a:	2334      	movs	r3, #52	; 0x34
   3162c:	2218      	movs	r2, #24
   3162e:	4694      	mov	ip, r2
   31630:	44bc      	add	ip, r7
   31632:	4463      	add	r3, ip
   31634:	220b      	movs	r2, #11
   31636:	0018      	movs	r0, r3
   31638:	4b51      	ldr	r3, [pc, #324]	; (31780 <_http_client_request+0x320>)
   3163a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   3163c:	4958      	ldr	r1, [pc, #352]	; (317a0 <_http_client_request+0x340>)
   3163e:	2334      	movs	r3, #52	; 0x34
   31640:	2218      	movs	r2, #24
   31642:	4694      	mov	ip, r2
   31644:	44bc      	add	ip, r7
   31646:	4463      	add	r3, ip
   31648:	220c      	movs	r2, #12
   3164a:	0018      	movs	r0, r3
   3164c:	4b4c      	ldr	r3, [pc, #304]	; (31780 <_http_client_request+0x320>)
   3164e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   31650:	69fb      	ldr	r3, [r7, #28]
   31652:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   31654:	69fb      	ldr	r3, [r7, #28]
   31656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   31658:	0018      	movs	r0, r3
   3165a:	4b4f      	ldr	r3, [pc, #316]	; (31798 <_http_client_request+0x338>)
   3165c:	4798      	blx	r3
   3165e:	0002      	movs	r2, r0
   31660:	2334      	movs	r3, #52	; 0x34
   31662:	2118      	movs	r1, #24
   31664:	468c      	mov	ip, r1
   31666:	44bc      	add	ip, r7
   31668:	4463      	add	r3, ip
   3166a:	0021      	movs	r1, r4
   3166c:	0018      	movs	r0, r3
   3166e:	4b44      	ldr	r3, [pc, #272]	; (31780 <_http_client_request+0x320>)
   31670:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31672:	494c      	ldr	r1, [pc, #304]	; (317a4 <_http_client_request+0x344>)
   31674:	2334      	movs	r3, #52	; 0x34
   31676:	2218      	movs	r2, #24
   31678:	4694      	mov	ip, r2
   3167a:	44bc      	add	ip, r7
   3167c:	4463      	add	r3, ip
   3167e:	2202      	movs	r2, #2
   31680:	0018      	movs	r0, r3
   31682:	4b3f      	ldr	r3, [pc, #252]	; (31780 <_http_client_request+0x320>)
   31684:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   31686:	4948      	ldr	r1, [pc, #288]	; (317a8 <_http_client_request+0x348>)
   31688:	2334      	movs	r3, #52	; 0x34
   3168a:	2218      	movs	r2, #24
   3168c:	4694      	mov	ip, r2
   3168e:	44bc      	add	ip, r7
   31690:	4463      	add	r3, ip
   31692:	2206      	movs	r2, #6
   31694:	0018      	movs	r0, r3
   31696:	4b3a      	ldr	r3, [pc, #232]	; (31780 <_http_client_request+0x320>)
   31698:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   3169a:	69fb      	ldr	r3, [r7, #28]
   3169c:	1c5c      	adds	r4, r3, #1
   3169e:	69fb      	ldr	r3, [r7, #28]
   316a0:	3301      	adds	r3, #1
   316a2:	0018      	movs	r0, r3
   316a4:	4b3c      	ldr	r3, [pc, #240]	; (31798 <_http_client_request+0x338>)
   316a6:	4798      	blx	r3
   316a8:	0002      	movs	r2, r0
   316aa:	2334      	movs	r3, #52	; 0x34
   316ac:	2118      	movs	r1, #24
   316ae:	468c      	mov	ip, r1
   316b0:	44bc      	add	ip, r7
   316b2:	4463      	add	r3, ip
   316b4:	0021      	movs	r1, r4
   316b6:	0018      	movs	r0, r3
   316b8:	4b31      	ldr	r3, [pc, #196]	; (31780 <_http_client_request+0x320>)
   316ba:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   316bc:	4939      	ldr	r1, [pc, #228]	; (317a4 <_http_client_request+0x344>)
   316be:	2334      	movs	r3, #52	; 0x34
   316c0:	2218      	movs	r2, #24
   316c2:	4694      	mov	ip, r2
   316c4:	44bc      	add	ip, r7
   316c6:	4463      	add	r3, ip
   316c8:	2202      	movs	r2, #2
   316ca:	0018      	movs	r0, r3
   316cc:	4b2c      	ldr	r3, [pc, #176]	; (31780 <_http_client_request+0x320>)
   316ce:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   316d0:	4936      	ldr	r1, [pc, #216]	; (317ac <_http_client_request+0x34c>)
   316d2:	2334      	movs	r3, #52	; 0x34
   316d4:	2218      	movs	r2, #24
   316d6:	4694      	mov	ip, r2
   316d8:	44bc      	add	ip, r7
   316da:	4463      	add	r3, ip
   316dc:	2218      	movs	r2, #24
   316de:	0018      	movs	r0, r3
   316e0:	4b27      	ldr	r3, [pc, #156]	; (31780 <_http_client_request+0x320>)
   316e2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   316e4:	4932      	ldr	r1, [pc, #200]	; (317b0 <_http_client_request+0x350>)
   316e6:	2334      	movs	r3, #52	; 0x34
   316e8:	2218      	movs	r2, #24
   316ea:	4694      	mov	ip, r2
   316ec:	44bc      	add	ip, r7
   316ee:	4463      	add	r3, ip
   316f0:	2213      	movs	r2, #19
   316f2:	0018      	movs	r0, r3
   316f4:	4b22      	ldr	r3, [pc, #136]	; (31780 <_http_client_request+0x320>)
   316f6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   316f8:	492e      	ldr	r1, [pc, #184]	; (317b4 <_http_client_request+0x354>)
   316fa:	2334      	movs	r3, #52	; 0x34
   316fc:	2218      	movs	r2, #24
   316fe:	4694      	mov	ip, r2
   31700:	44bc      	add	ip, r7
   31702:	4463      	add	r3, ip
   31704:	2217      	movs	r2, #23
   31706:	0018      	movs	r0, r3
   31708:	4b1d      	ldr	r3, [pc, #116]	; (31780 <_http_client_request+0x320>)
   3170a:	4798      	blx	r3
		if (entity->read != NULL) {
   3170c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3170e:	68db      	ldr	r3, [r3, #12]
   31710:	2b00      	cmp	r3, #0
   31712:	d100      	bne.n	31716 <_http_client_request+0x2b6>
   31714:	e088      	b.n	31828 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   31716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31718:	781b      	ldrb	r3, [r3, #0]
   3171a:	2b00      	cmp	r3, #0
   3171c:	d00f      	beq.n	3173e <_http_client_request+0x2de>
				module->req.content_length = -1;
   3171e:	69fb      	ldr	r3, [r7, #28]
   31720:	21cc      	movs	r1, #204	; 0xcc
   31722:	2201      	movs	r2, #1
   31724:	4252      	negs	r2, r2
   31726:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   31728:	4923      	ldr	r1, [pc, #140]	; (317b8 <_http_client_request+0x358>)
   3172a:	2334      	movs	r3, #52	; 0x34
   3172c:	2218      	movs	r2, #24
   3172e:	4694      	mov	ip, r2
   31730:	44bc      	add	ip, r7
   31732:	4463      	add	r3, ip
   31734:	221c      	movs	r2, #28
   31736:	0018      	movs	r0, r3
   31738:	4b11      	ldr	r3, [pc, #68]	; (31780 <_http_client_request+0x320>)
   3173a:	4798      	blx	r3
   3173c:	e074      	b.n	31828 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   3173e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31740:	689b      	ldr	r3, [r3, #8]
   31742:	2b00      	cmp	r3, #0
   31744:	d070      	beq.n	31828 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   31746:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31748:	689a      	ldr	r2, [r3, #8]
   3174a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3174c:	695b      	ldr	r3, [r3, #20]
   3174e:	0018      	movs	r0, r3
   31750:	4790      	blx	r2
   31752:	0001      	movs	r1, r0
   31754:	69fb      	ldr	r3, [r7, #28]
   31756:	22cc      	movs	r2, #204	; 0xcc
   31758:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   3175a:	69fb      	ldr	r3, [r7, #28]
   3175c:	22cc      	movs	r2, #204	; 0xcc
   3175e:	589b      	ldr	r3, [r3, r2]
   31760:	2b00      	cmp	r3, #0
   31762:	da2b      	bge.n	317bc <_http_client_request+0x35c>
					module->req.content_length = 0;
   31764:	69fb      	ldr	r3, [r7, #28]
   31766:	22cc      	movs	r2, #204	; 0xcc
   31768:	2100      	movs	r1, #0
   3176a:	5099      	str	r1, [r3, r2]
   3176c:	e05c      	b.n	31828 <_http_client_request+0x3c8>
   3176e:	46c0      	nop			; (mov r8, r8)
   31770:	00039e6c 	.word	0x00039e6c
   31774:	000313d9 	.word	0x000313d9
   31778:	00032341 	.word	0x00032341
   3177c:	00039d90 	.word	0x00039d90
   31780:	000323c1 	.word	0x000323c1
   31784:	00039d98 	.word	0x00039d98
   31788:	00039da0 	.word	0x00039da0
   3178c:	00039da8 	.word	0x00039da8
   31790:	00039db0 	.word	0x00039db0
   31794:	00039dbc 	.word	0x00039dbc
   31798:	00034e17 	.word	0x00034e17
   3179c:	00039dc4 	.word	0x00039dc4
   317a0:	00039dd0 	.word	0x00039dd0
   317a4:	00039de0 	.word	0x00039de0
   317a8:	00039de4 	.word	0x00039de4
   317ac:	00039dec 	.word	0x00039dec
   317b0:	00039e08 	.word	0x00039e08
   317b4:	00039e1c 	.word	0x00039e1c
   317b8:	00039e34 	.word	0x00039e34
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   317bc:	69fb      	ldr	r3, [r7, #28]
   317be:	22cc      	movs	r2, #204	; 0xcc
   317c0:	589b      	ldr	r3, [r3, r2]
   317c2:	001a      	movs	r2, r3
   317c4:	49e0      	ldr	r1, [pc, #896]	; (31b48 <_http_client_request+0x6e8>)
   317c6:	2328      	movs	r3, #40	; 0x28
   317c8:	2018      	movs	r0, #24
   317ca:	4684      	mov	ip, r0
   317cc:	44bc      	add	ip, r7
   317ce:	4463      	add	r3, ip
   317d0:	0018      	movs	r0, r3
   317d2:	4bde      	ldr	r3, [pc, #888]	; (31b4c <_http_client_request+0x6ec>)
   317d4:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   317d6:	49de      	ldr	r1, [pc, #888]	; (31b50 <_http_client_request+0x6f0>)
   317d8:	2334      	movs	r3, #52	; 0x34
   317da:	2218      	movs	r2, #24
   317dc:	4694      	mov	ip, r2
   317de:	44bc      	add	ip, r7
   317e0:	4463      	add	r3, ip
   317e2:	2210      	movs	r2, #16
   317e4:	0018      	movs	r0, r3
   317e6:	4bdb      	ldr	r3, [pc, #876]	; (31b54 <_http_client_request+0x6f4>)
   317e8:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   317ea:	2328      	movs	r3, #40	; 0x28
   317ec:	2218      	movs	r2, #24
   317ee:	4694      	mov	ip, r2
   317f0:	44bc      	add	ip, r7
   317f2:	4463      	add	r3, ip
   317f4:	0018      	movs	r0, r3
   317f6:	4bd8      	ldr	r3, [pc, #864]	; (31b58 <_http_client_request+0x6f8>)
   317f8:	4798      	blx	r3
   317fa:	0002      	movs	r2, r0
   317fc:	2328      	movs	r3, #40	; 0x28
   317fe:	2118      	movs	r1, #24
   31800:	1879      	adds	r1, r7, r1
   31802:	18c9      	adds	r1, r1, r3
   31804:	2334      	movs	r3, #52	; 0x34
   31806:	2018      	movs	r0, #24
   31808:	4684      	mov	ip, r0
   3180a:	44bc      	add	ip, r7
   3180c:	4463      	add	r3, ip
   3180e:	0018      	movs	r0, r3
   31810:	4bd0      	ldr	r3, [pc, #832]	; (31b54 <_http_client_request+0x6f4>)
   31812:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31814:	49d1      	ldr	r1, [pc, #836]	; (31b5c <_http_client_request+0x6fc>)
   31816:	2334      	movs	r3, #52	; 0x34
   31818:	2218      	movs	r2, #24
   3181a:	4694      	mov	ip, r2
   3181c:	44bc      	add	ip, r7
   3181e:	4463      	add	r3, ip
   31820:	2202      	movs	r2, #2
   31822:	0018      	movs	r0, r3
   31824:	4bcb      	ldr	r3, [pc, #812]	; (31b54 <_http_client_request+0x6f4>)
   31826:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   31828:	69fb      	ldr	r3, [r7, #28]
   3182a:	22d4      	movs	r2, #212	; 0xd4
   3182c:	589b      	ldr	r3, [r3, r2]
   3182e:	2b00      	cmp	r3, #0
   31830:	d012      	beq.n	31858 <_http_client_request+0x3f8>
				module->req.ext_header,
   31832:	69fb      	ldr	r3, [r7, #28]
   31834:	22d4      	movs	r2, #212	; 0xd4
   31836:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   31838:	69fb      	ldr	r3, [r7, #28]
   3183a:	22d4      	movs	r2, #212	; 0xd4
   3183c:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   3183e:	0018      	movs	r0, r3
   31840:	4bc5      	ldr	r3, [pc, #788]	; (31b58 <_http_client_request+0x6f8>)
   31842:	4798      	blx	r3
   31844:	0002      	movs	r2, r0
   31846:	2334      	movs	r3, #52	; 0x34
   31848:	2118      	movs	r1, #24
   3184a:	468c      	mov	ip, r1
   3184c:	44bc      	add	ip, r7
   3184e:	4463      	add	r3, ip
   31850:	0021      	movs	r1, r4
   31852:	0018      	movs	r0, r3
   31854:	4bbf      	ldr	r3, [pc, #764]	; (31b54 <_http_client_request+0x6f4>)
   31856:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31858:	49c0      	ldr	r1, [pc, #768]	; (31b5c <_http_client_request+0x6fc>)
   3185a:	2334      	movs	r3, #52	; 0x34
   3185c:	2218      	movs	r2, #24
   3185e:	4694      	mov	ip, r2
   31860:	44bc      	add	ip, r7
   31862:	4463      	add	r3, ip
   31864:	2202      	movs	r2, #2
   31866:	0018      	movs	r0, r3
   31868:	4bba      	ldr	r3, [pc, #744]	; (31b54 <_http_client_request+0x6f4>)
   3186a:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   3186c:	2334      	movs	r3, #52	; 0x34
   3186e:	2218      	movs	r2, #24
   31870:	4694      	mov	ip, r2
   31872:	44bc      	add	ip, r7
   31874:	4463      	add	r3, ip
   31876:	0018      	movs	r0, r3
   31878:	4bb9      	ldr	r3, [pc, #740]	; (31b60 <_http_client_request+0x700>)
   3187a:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   3187c:	69fb      	ldr	r3, [r7, #28]
   3187e:	2204      	movs	r2, #4
   31880:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   31882:	69fb      	ldr	r3, [r7, #28]
   31884:	22cc      	movs	r2, #204	; 0xcc
   31886:	589b      	ldr	r3, [r3, r2]
   31888:	2b00      	cmp	r3, #0
   3188a:	db00      	blt.n	3188e <_http_client_request+0x42e>
   3188c:	e0c6      	b.n	31a1c <_http_client_request+0x5bc>
   3188e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31890:	68db      	ldr	r3, [r3, #12]
   31892:	2b00      	cmp	r3, #0
   31894:	d100      	bne.n	31898 <_http_client_request+0x438>
   31896:	e0c1      	b.n	31a1c <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3189a:	68dc      	ldr	r4, [r3, #12]
   3189c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3189e:	6958      	ldr	r0, [r3, #20]
   318a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   318a2:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   318a4:	69fb      	ldr	r3, [r7, #28]
   318a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   318a8:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   318aa:	69fb      	ldr	r3, [r7, #28]
   318ac:	22d0      	movs	r2, #208	; 0xd0
   318ae:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   318b0:	002a      	movs	r2, r5
   318b2:	47a0      	blx	r4
   318b4:	0003      	movs	r3, r0
   318b6:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   318b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   318ba:	2b00      	cmp	r3, #0
   318bc:	da01      	bge.n	318c2 <_http_client_request+0x462>
				size = 0;
   318be:	2300      	movs	r3, #0
   318c0:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   318c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   318c4:	220a      	movs	r2, #10
   318c6:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   318c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   318ca:	220d      	movs	r2, #13
   318cc:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   318ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   318d0:	3305      	adds	r3, #5
   318d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
   318d4:	210d      	movs	r1, #13
   318d6:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   318d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   318da:	3306      	adds	r3, #6
   318dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
   318de:	210a      	movs	r1, #10
   318e0:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   318e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   318e4:	2b00      	cmp	r3, #0
   318e6:	db14      	blt.n	31912 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   318e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   318ea:	3302      	adds	r3, #2
   318ec:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   318ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   318f0:	4a9c      	ldr	r2, [pc, #624]	; (31b64 <_http_client_request+0x704>)
   318f2:	4013      	ands	r3, r2
   318f4:	d504      	bpl.n	31900 <_http_client_request+0x4a0>
   318f6:	3b01      	subs	r3, #1
   318f8:	2210      	movs	r2, #16
   318fa:	4252      	negs	r2, r2
   318fc:	4313      	orrs	r3, r2
   318fe:	3301      	adds	r3, #1
   31900:	001a      	movs	r2, r3
   31902:	2318      	movs	r3, #24
   31904:	2118      	movs	r1, #24
   31906:	468c      	mov	ip, r1
   31908:	44bc      	add	ip, r7
   3190a:	4463      	add	r3, ip
   3190c:	5c9a      	ldrb	r2, [r3, r2]
   3190e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31910:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   31912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31914:	2b0f      	cmp	r3, #15
   31916:	dd19      	ble.n	3194c <_http_client_request+0x4ec>
				ptr = buffer + 1;
   31918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3191a:	3301      	adds	r3, #1
   3191c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   3191e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31920:	2b00      	cmp	r3, #0
   31922:	da00      	bge.n	31926 <_http_client_request+0x4c6>
   31924:	330f      	adds	r3, #15
   31926:	111b      	asrs	r3, r3, #4
   31928:	001a      	movs	r2, r3
   3192a:	4b8e      	ldr	r3, [pc, #568]	; (31b64 <_http_client_request+0x704>)
   3192c:	4013      	ands	r3, r2
   3192e:	d504      	bpl.n	3193a <_http_client_request+0x4da>
   31930:	3b01      	subs	r3, #1
   31932:	2210      	movs	r2, #16
   31934:	4252      	negs	r2, r2
   31936:	4313      	orrs	r3, r2
   31938:	3301      	adds	r3, #1
   3193a:	001a      	movs	r2, r3
   3193c:	2318      	movs	r3, #24
   3193e:	2118      	movs	r1, #24
   31940:	468c      	mov	ip, r1
   31942:	44bc      	add	ip, r7
   31944:	4463      	add	r3, ip
   31946:	5c9a      	ldrb	r2, [r3, r2]
   31948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3194a:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   3194c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3194e:	2bff      	cmp	r3, #255	; 0xff
   31950:	dd18      	ble.n	31984 <_http_client_request+0x524>
				ptr = buffer;
   31952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31954:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   31956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31958:	2b00      	cmp	r3, #0
   3195a:	da00      	bge.n	3195e <_http_client_request+0x4fe>
   3195c:	33ff      	adds	r3, #255	; 0xff
   3195e:	121b      	asrs	r3, r3, #8
   31960:	001a      	movs	r2, r3
   31962:	4b80      	ldr	r3, [pc, #512]	; (31b64 <_http_client_request+0x704>)
   31964:	4013      	ands	r3, r2
   31966:	d504      	bpl.n	31972 <_http_client_request+0x512>
   31968:	3b01      	subs	r3, #1
   3196a:	2210      	movs	r2, #16
   3196c:	4252      	negs	r2, r2
   3196e:	4313      	orrs	r3, r2
   31970:	3301      	adds	r3, #1
   31972:	001a      	movs	r2, r3
   31974:	2318      	movs	r3, #24
   31976:	2118      	movs	r1, #24
   31978:	468c      	mov	ip, r1
   3197a:	44bc      	add	ip, r7
   3197c:	4463      	add	r3, ip
   3197e:	5c9a      	ldrb	r2, [r3, r2]
   31980:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31982:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   31984:	69fb      	ldr	r3, [r7, #28]
   31986:	2000      	movs	r0, #0
   31988:	5618      	ldrsb	r0, [r3, r0]
   3198a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3198c:	3303      	adds	r3, #3
   3198e:	001a      	movs	r2, r3
   31990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31992:	1ad3      	subs	r3, r2, r3
   31994:	b29a      	uxth	r2, r3
   31996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31998:	b29b      	uxth	r3, r3
   3199a:	18d3      	adds	r3, r2, r3
   3199c:	b29b      	uxth	r3, r3
   3199e:	3304      	adds	r3, #4
   319a0:	b29a      	uxth	r2, r3
   319a2:	6f39      	ldr	r1, [r7, #112]	; 0x70
   319a4:	2300      	movs	r3, #0
   319a6:	4c70      	ldr	r4, [pc, #448]	; (31b68 <_http_client_request+0x708>)
   319a8:	47a0      	blx	r4
   319aa:	0003      	movs	r3, r0
   319ac:	663b      	str	r3, [r7, #96]	; 0x60
   319ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   319b0:	2b00      	cmp	r3, #0
   319b2:	da07      	bge.n	319c4 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   319b4:	2305      	movs	r3, #5
   319b6:	425a      	negs	r2, r3
   319b8:	69fb      	ldr	r3, [r7, #28]
   319ba:	0011      	movs	r1, r2
   319bc:	0018      	movs	r0, r3
   319be:	4b6b      	ldr	r3, [pc, #428]	; (31b6c <_http_client_request+0x70c>)
   319c0:	4798      	blx	r3
				return;
   319c2:	e0e1      	b.n	31b88 <_http_client_request+0x728>
			module->req.sent_length += size;
   319c4:	69fb      	ldr	r3, [r7, #28]
   319c6:	22d0      	movs	r2, #208	; 0xd0
   319c8:	589a      	ldr	r2, [r3, r2]
   319ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   319cc:	18d2      	adds	r2, r2, r3
   319ce:	69fb      	ldr	r3, [r7, #28]
   319d0:	21d0      	movs	r1, #208	; 0xd0
   319d2:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   319d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   319d6:	2b00      	cmp	r3, #0
   319d8:	d000      	beq.n	319dc <_http_client_request+0x57c>
   319da:	e0c9      	b.n	31b70 <_http_client_request+0x710>
				if (module->req.entity.close) {
   319dc:	69fb      	ldr	r3, [r7, #28]
   319de:	22c0      	movs	r2, #192	; 0xc0
   319e0:	589b      	ldr	r3, [r3, r2]
   319e2:	2b00      	cmp	r3, #0
   319e4:	d007      	beq.n	319f6 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   319e6:	69fb      	ldr	r3, [r7, #28]
   319e8:	22c0      	movs	r2, #192	; 0xc0
   319ea:	589b      	ldr	r3, [r3, r2]
   319ec:	69fa      	ldr	r2, [r7, #28]
   319ee:	21c4      	movs	r1, #196	; 0xc4
   319f0:	5852      	ldr	r2, [r2, r1]
   319f2:	0010      	movs	r0, r2
   319f4:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   319f6:	69fb      	ldr	r3, [r7, #28]
   319f8:	2202      	movs	r2, #2
   319fa:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   319fc:	69fb      	ldr	r3, [r7, #28]
   319fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31a00:	2b00      	cmp	r3, #0
   31a02:	d100      	bne.n	31a06 <_http_client_request+0x5a6>
   31a04:	e0b5      	b.n	31b72 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31a06:	69fb      	ldr	r3, [r7, #28]
   31a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31a0a:	220c      	movs	r2, #12
   31a0c:	2118      	movs	r1, #24
   31a0e:	468c      	mov	ip, r1
   31a10:	44bc      	add	ip, r7
   31a12:	4462      	add	r2, ip
   31a14:	69f8      	ldr	r0, [r7, #28]
   31a16:	2101      	movs	r1, #1
   31a18:	4798      	blx	r3
				break;
   31a1a:	e0aa      	b.n	31b72 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   31a1c:	69fb      	ldr	r3, [r7, #28]
   31a1e:	22cc      	movs	r2, #204	; 0xcc
   31a20:	589b      	ldr	r3, [r3, r2]
   31a22:	2b00      	cmp	r3, #0
   31a24:	dc00      	bgt.n	31a28 <_http_client_request+0x5c8>
   31a26:	e07c      	b.n	31b22 <_http_client_request+0x6c2>
   31a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31a2a:	68db      	ldr	r3, [r3, #12]
   31a2c:	2b00      	cmp	r3, #0
   31a2e:	d100      	bne.n	31a32 <_http_client_request+0x5d2>
   31a30:	e077      	b.n	31b22 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   31a32:	69fb      	ldr	r3, [r7, #28]
   31a34:	22d0      	movs	r2, #208	; 0xd0
   31a36:	589a      	ldr	r2, [r3, r2]
   31a38:	69fb      	ldr	r3, [r7, #28]
   31a3a:	21cc      	movs	r1, #204	; 0xcc
   31a3c:	585b      	ldr	r3, [r3, r1]
   31a3e:	429a      	cmp	r2, r3
   31a40:	db1f      	blt.n	31a82 <_http_client_request+0x622>
				if (module->req.entity.close) {
   31a42:	69fb      	ldr	r3, [r7, #28]
   31a44:	22c0      	movs	r2, #192	; 0xc0
   31a46:	589b      	ldr	r3, [r3, r2]
   31a48:	2b00      	cmp	r3, #0
   31a4a:	d007      	beq.n	31a5c <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   31a4c:	69fb      	ldr	r3, [r7, #28]
   31a4e:	22c0      	movs	r2, #192	; 0xc0
   31a50:	589b      	ldr	r3, [r3, r2]
   31a52:	69fa      	ldr	r2, [r7, #28]
   31a54:	21c4      	movs	r1, #196	; 0xc4
   31a56:	5852      	ldr	r2, [r2, r1]
   31a58:	0010      	movs	r0, r2
   31a5a:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   31a5c:	69fb      	ldr	r3, [r7, #28]
   31a5e:	2202      	movs	r2, #2
   31a60:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   31a62:	69fb      	ldr	r3, [r7, #28]
   31a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31a66:	2b00      	cmp	r3, #0
   31a68:	d100      	bne.n	31a6c <_http_client_request+0x60c>
   31a6a:	e084      	b.n	31b76 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31a6c:	69fb      	ldr	r3, [r7, #28]
   31a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31a70:	220c      	movs	r2, #12
   31a72:	2118      	movs	r1, #24
   31a74:	468c      	mov	ip, r1
   31a76:	44bc      	add	ip, r7
   31a78:	4462      	add	r2, ip
   31a7a:	69f8      	ldr	r0, [r7, #28]
   31a7c:	2101      	movs	r1, #1
   31a7e:	4798      	blx	r3
				break;
   31a80:	e079      	b.n	31b76 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   31a82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31a84:	68dc      	ldr	r4, [r3, #12]
   31a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31a88:	6958      	ldr	r0, [r3, #20]
   31a8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31a8c:	69fb      	ldr	r3, [r7, #28]
   31a8e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   31a90:	69fb      	ldr	r3, [r7, #28]
   31a92:	22d0      	movs	r2, #208	; 0xd0
   31a94:	589b      	ldr	r3, [r3, r2]
   31a96:	002a      	movs	r2, r5
   31a98:	47a0      	blx	r4
   31a9a:	0003      	movs	r3, r0
   31a9c:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   31a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31aa0:	2b00      	cmp	r3, #0
   31aa2:	da0d      	bge.n	31ac0 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   31aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31aa6:	2b00      	cmp	r3, #0
   31aa8:	d102      	bne.n	31ab0 <_http_client_request+0x650>
   31aaa:	234d      	movs	r3, #77	; 0x4d
   31aac:	425b      	negs	r3, r3
   31aae:	e001      	b.n	31ab4 <_http_client_request+0x654>
   31ab0:	2305      	movs	r3, #5
   31ab2:	425b      	negs	r3, r3
   31ab4:	69fa      	ldr	r2, [r7, #28]
   31ab6:	0019      	movs	r1, r3
   31ab8:	0010      	movs	r0, r2
   31aba:	4b2c      	ldr	r3, [pc, #176]	; (31b6c <_http_client_request+0x70c>)
   31abc:	4798      	blx	r3
			if (size < 0) {
   31abe:	e057      	b.n	31b70 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   31ac0:	69fb      	ldr	r3, [r7, #28]
   31ac2:	22cc      	movs	r2, #204	; 0xcc
   31ac4:	589a      	ldr	r2, [r3, r2]
   31ac6:	69fb      	ldr	r3, [r7, #28]
   31ac8:	21d0      	movs	r1, #208	; 0xd0
   31aca:	585b      	ldr	r3, [r3, r1]
   31acc:	1ad2      	subs	r2, r2, r3
   31ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31ad0:	429a      	cmp	r2, r3
   31ad2:	da07      	bge.n	31ae4 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   31ad4:	69fb      	ldr	r3, [r7, #28]
   31ad6:	22cc      	movs	r2, #204	; 0xcc
   31ad8:	589a      	ldr	r2, [r3, r2]
   31ada:	69fb      	ldr	r3, [r7, #28]
   31adc:	21d0      	movs	r1, #208	; 0xd0
   31ade:	585b      	ldr	r3, [r3, r1]
   31ae0:	1ad3      	subs	r3, r2, r3
   31ae2:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   31ae4:	69fb      	ldr	r3, [r7, #28]
   31ae6:	2000      	movs	r0, #0
   31ae8:	5618      	ldrsb	r0, [r3, r0]
   31aea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31aee:	b29a      	uxth	r2, r3
   31af0:	2300      	movs	r3, #0
   31af2:	4c1d      	ldr	r4, [pc, #116]	; (31b68 <_http_client_request+0x708>)
   31af4:	47a0      	blx	r4
   31af6:	0003      	movs	r3, r0
   31af8:	663b      	str	r3, [r7, #96]	; 0x60
   31afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   31afc:	2b00      	cmp	r3, #0
   31afe:	da07      	bge.n	31b10 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   31b00:	2305      	movs	r3, #5
   31b02:	425a      	negs	r2, r3
   31b04:	69fb      	ldr	r3, [r7, #28]
   31b06:	0011      	movs	r1, r2
   31b08:	0018      	movs	r0, r3
   31b0a:	4b18      	ldr	r3, [pc, #96]	; (31b6c <_http_client_request+0x70c>)
   31b0c:	4798      	blx	r3
					return;
   31b0e:	e03b      	b.n	31b88 <_http_client_request+0x728>
				module->req.sent_length += size;
   31b10:	69fb      	ldr	r3, [r7, #28]
   31b12:	22d0      	movs	r2, #208	; 0xd0
   31b14:	589a      	ldr	r2, [r3, r2]
   31b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31b18:	18d2      	adds	r2, r2, r3
   31b1a:	69fb      	ldr	r3, [r7, #28]
   31b1c:	21d0      	movs	r1, #208	; 0xd0
   31b1e:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   31b20:	e026      	b.n	31b70 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   31b22:	69fb      	ldr	r3, [r7, #28]
   31b24:	2202      	movs	r2, #2
   31b26:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   31b28:	69fb      	ldr	r3, [r7, #28]
   31b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31b2c:	2b00      	cmp	r3, #0
   31b2e:	d024      	beq.n	31b7a <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31b30:	69fb      	ldr	r3, [r7, #28]
   31b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31b34:	220c      	movs	r2, #12
   31b36:	2118      	movs	r1, #24
   31b38:	468c      	mov	ip, r1
   31b3a:	44bc      	add	ip, r7
   31b3c:	4462      	add	r2, ip
   31b3e:	69f8      	ldr	r0, [r7, #28]
   31b40:	2101      	movs	r1, #1
   31b42:	4798      	blx	r3
			break;
   31b44:	e019      	b.n	31b7a <_http_client_request+0x71a>
   31b46:	46c0      	nop			; (mov r8, r8)
   31b48:	00039e54 	.word	0x00039e54
   31b4c:	00034d1d 	.word	0x00034d1d
   31b50:	00039e58 	.word	0x00039e58
   31b54:	000323c1 	.word	0x000323c1
   31b58:	00034e17 	.word	0x00034e17
   31b5c:	00039de0 	.word	0x00039de0
   31b60:	000323fd 	.word	0x000323fd
   31b64:	8000000f 	.word	0x8000000f
   31b68:	00025945 	.word	0x00025945
   31b6c:	0003130d 	.word	0x0003130d
		break;
   31b70:	e004      	b.n	31b7c <_http_client_request+0x71c>
				break;
   31b72:	46c0      	nop			; (mov r8, r8)
   31b74:	e002      	b.n	31b7c <_http_client_request+0x71c>
				break;
   31b76:	46c0      	nop			; (mov r8, r8)
   31b78:	e000      	b.n	31b7c <_http_client_request+0x71c>
			break;
   31b7a:	46c0      	nop			; (mov r8, r8)
   31b7c:	69bb      	ldr	r3, [r7, #24]
   31b7e:	469d      	mov	sp, r3
   31b80:	e004      	b.n	31b8c <_http_client_request+0x72c>
		return;
   31b82:	46c0      	nop			; (mov r8, r8)
   31b84:	e000      	b.n	31b88 <_http_client_request+0x728>
		return;
   31b86:	46c0      	nop			; (mov r8, r8)
   31b88:	69bb      	ldr	r3, [r7, #24]
   31b8a:	469d      	mov	sp, r3
	}
}
   31b8c:	46bd      	mov	sp, r7
   31b8e:	b01e      	add	sp, #120	; 0x78
   31b90:	bc04      	pop	{r2}
   31b92:	4690      	mov	r8, r2
   31b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31b96:	46c0      	nop			; (mov r8, r8)

00031b98 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   31b98:	b590      	push	{r4, r7, lr}
   31b9a:	b083      	sub	sp, #12
   31b9c:	af00      	add	r7, sp, #0
   31b9e:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   31ba0:	687b      	ldr	r3, [r7, #4]
   31ba2:	2b00      	cmp	r3, #0
   31ba4:	d021      	beq.n	31bea <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   31ba6:	687b      	ldr	r3, [r7, #4]
   31ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31baa:	687b      	ldr	r3, [r7, #4]
   31bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31bae:	429a      	cmp	r2, r3
   31bb0:	d307      	bcc.n	31bc2 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   31bb2:	238b      	movs	r3, #139	; 0x8b
   31bb4:	425a      	negs	r2, r3
   31bb6:	687b      	ldr	r3, [r7, #4]
   31bb8:	0011      	movs	r1, r2
   31bba:	0018      	movs	r0, r3
   31bbc:	4b0d      	ldr	r3, [pc, #52]	; (31bf4 <_http_client_recv_packet+0x5c>)
   31bbe:	4798      	blx	r3
		return;
   31bc0:	e014      	b.n	31bec <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   31bc2:	687b      	ldr	r3, [r7, #4]
   31bc4:	2000      	movs	r0, #0
   31bc6:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   31bc8:	687b      	ldr	r3, [r7, #4]
   31bca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   31bcc:	687b      	ldr	r3, [r7, #4]
   31bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31bd0:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   31bd2:	687b      	ldr	r3, [r7, #4]
   31bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   31bd6:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   31bd8:	687b      	ldr	r3, [r7, #4]
   31bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   31bdc:	b29b      	uxth	r3, r3
   31bde:	1ad3      	subs	r3, r2, r3
   31be0:	b29a      	uxth	r2, r3
   31be2:	2300      	movs	r3, #0
   31be4:	4c04      	ldr	r4, [pc, #16]	; (31bf8 <_http_client_recv_packet+0x60>)
   31be6:	47a0      	blx	r4
   31be8:	e000      	b.n	31bec <_http_client_recv_packet+0x54>
		return;
   31bea:	46c0      	nop			; (mov r8, r8)
}
   31bec:	46bd      	mov	sp, r7
   31bee:	b003      	add	sp, #12
   31bf0:	bd90      	pop	{r4, r7, pc}
   31bf2:	46c0      	nop			; (mov r8, r8)
   31bf4:	0003130d 	.word	0x0003130d
   31bf8:	00025aa9 	.word	0x00025aa9

00031bfc <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   31bfc:	b580      	push	{r7, lr}
   31bfe:	b082      	sub	sp, #8
   31c00:	af00      	add	r7, sp, #0
   31c02:	6078      	str	r0, [r7, #4]
   31c04:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   31c06:	687b      	ldr	r3, [r7, #4]
   31c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31c0a:	683b      	ldr	r3, [r7, #0]
   31c0c:	18d2      	adds	r2, r2, r3
   31c0e:	687b      	ldr	r3, [r7, #4]
   31c10:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   31c12:	687b      	ldr	r3, [r7, #4]
   31c14:	2258      	movs	r2, #88	; 0x58
   31c16:	5a9b      	ldrh	r3, [r3, r2]
   31c18:	2b00      	cmp	r3, #0
   31c1a:	d007      	beq.n	31c2c <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   31c1c:	687b      	ldr	r3, [r7, #4]
   31c1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31c20:	687b      	ldr	r3, [r7, #4]
   31c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31c24:	0019      	movs	r1, r3
   31c26:	0010      	movs	r0, r2
   31c28:	4b06      	ldr	r3, [pc, #24]	; (31c44 <_http_client_recved_packet+0x48>)
   31c2a:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   31c2c:	46c0      	nop			; (mov r8, r8)
   31c2e:	687b      	ldr	r3, [r7, #4]
   31c30:	0018      	movs	r0, r3
   31c32:	4b05      	ldr	r3, [pc, #20]	; (31c48 <_http_client_recved_packet+0x4c>)
   31c34:	4798      	blx	r3
   31c36:	1e03      	subs	r3, r0, #0
   31c38:	d1f9      	bne.n	31c2e <_http_client_recved_packet+0x32>
}
   31c3a:	46c0      	nop			; (mov r8, r8)
   31c3c:	46bd      	mov	sp, r7
   31c3e:	b002      	add	sp, #8
   31c40:	bd80      	pop	{r7, pc}
   31c42:	46c0      	nop			; (mov r8, r8)
   31c44:	000326b9 	.word	0x000326b9
   31c48:	00031c4d 	.word	0x00031c4d

00031c4c <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   31c4c:	b580      	push	{r7, lr}
   31c4e:	b082      	sub	sp, #8
   31c50:	af00      	add	r7, sp, #0
   31c52:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   31c54:	687b      	ldr	r3, [r7, #4]
   31c56:	22d8      	movs	r2, #216	; 0xd8
   31c58:	589b      	ldr	r3, [r3, r2]
   31c5a:	2b00      	cmp	r3, #0
   31c5c:	d002      	beq.n	31c64 <_http_client_handle_response+0x18>
   31c5e:	2b01      	cmp	r3, #1
   31c60:	d006      	beq.n	31c70 <_http_client_handle_response+0x24>
   31c62:	e00b      	b.n	31c7c <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   31c64:	687b      	ldr	r3, [r7, #4]
   31c66:	0018      	movs	r0, r3
   31c68:	4b07      	ldr	r3, [pc, #28]	; (31c88 <_http_client_handle_response+0x3c>)
   31c6a:	4798      	blx	r3
   31c6c:	0003      	movs	r3, r0
   31c6e:	e006      	b.n	31c7e <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   31c70:	687b      	ldr	r3, [r7, #4]
   31c72:	0018      	movs	r0, r3
   31c74:	4b05      	ldr	r3, [pc, #20]	; (31c8c <_http_client_handle_response+0x40>)
   31c76:	4798      	blx	r3
   31c78:	0003      	movs	r3, r0
   31c7a:	e000      	b.n	31c7e <_http_client_handle_response+0x32>
	}
	return 0;
   31c7c:	2300      	movs	r3, #0
}
   31c7e:	0018      	movs	r0, r3
   31c80:	46bd      	mov	sp, r7
   31c82:	b002      	add	sp, #8
   31c84:	bd80      	pop	{r7, pc}
   31c86:	46c0      	nop			; (mov r8, r8)
   31c88:	00031c91 	.word	0x00031c91
   31c8c:	00032149 	.word	0x00032149

00031c90 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   31c90:	b590      	push	{r4, r7, lr}
   31c92:	b08b      	sub	sp, #44	; 0x2c
   31c94:	af00      	add	r7, sp, #0
   31c96:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   31c98:	687b      	ldr	r3, [r7, #4]
   31c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31c9c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   31c9e:	4b9a      	ldr	r3, [pc, #616]	; (31f08 <_http_client_handle_header+0x278>)
   31ca0:	681a      	ldr	r2, [r3, #0]
   31ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ca4:	0011      	movs	r1, r2
   31ca6:	0018      	movs	r0, r3
   31ca8:	4b98      	ldr	r3, [pc, #608]	; (31f0c <_http_client_handle_header+0x27c>)
   31caa:	4798      	blx	r3
   31cac:	0003      	movs	r3, r0
   31cae:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   31cb0:	69bb      	ldr	r3, [r7, #24]
   31cb2:	2b00      	cmp	r3, #0
   31cb4:	d007      	beq.n	31cc6 <_http_client_handle_header+0x36>
   31cb6:	687b      	ldr	r3, [r7, #4]
   31cb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   31cba:	687b      	ldr	r3, [r7, #4]
   31cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31cbe:	18d2      	adds	r2, r2, r3
   31cc0:	69bb      	ldr	r3, [r7, #24]
   31cc2:	429a      	cmp	r2, r3
   31cc4:	d807      	bhi.n	31cd6 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   31cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31cc8:	687b      	ldr	r3, [r7, #4]
   31cca:	0011      	movs	r1, r2
   31ccc:	0018      	movs	r0, r3
   31cce:	4b90      	ldr	r3, [pc, #576]	; (31f10 <_http_client_handle_header+0x280>)
   31cd0:	4798      	blx	r3
			return 0;
   31cd2:	2300      	movs	r3, #0
   31cd4:	e114      	b.n	31f00 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   31cd6:	4b8c      	ldr	r3, [pc, #560]	; (31f08 <_http_client_handle_header+0x278>)
   31cd8:	681c      	ldr	r4, [r3, #0]
   31cda:	4b8b      	ldr	r3, [pc, #556]	; (31f08 <_http_client_handle_header+0x278>)
   31cdc:	681b      	ldr	r3, [r3, #0]
   31cde:	0018      	movs	r0, r3
   31ce0:	4b8c      	ldr	r3, [pc, #560]	; (31f14 <_http_client_handle_header+0x284>)
   31ce2:	4798      	blx	r3
   31ce4:	0002      	movs	r2, r0
   31ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ce8:	0021      	movs	r1, r4
   31cea:	0018      	movs	r0, r3
   31cec:	4b8a      	ldr	r3, [pc, #552]	; (31f18 <_http_client_handle_header+0x288>)
   31cee:	4798      	blx	r3
   31cf0:	1e03      	subs	r3, r0, #0
   31cf2:	d15d      	bne.n	31db0 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   31cf4:	4b84      	ldr	r3, [pc, #528]	; (31f08 <_http_client_handle_header+0x278>)
   31cf6:	681b      	ldr	r3, [r3, #0]
   31cf8:	0018      	movs	r0, r3
   31cfa:	4b86      	ldr	r3, [pc, #536]	; (31f14 <_http_client_handle_header+0x284>)
   31cfc:	4798      	blx	r3
   31cfe:	0002      	movs	r2, r0
   31d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31d02:	189a      	adds	r2, r3, r2
   31d04:	687b      	ldr	r3, [r7, #4]
   31d06:	0011      	movs	r1, r2
   31d08:	0018      	movs	r0, r3
   31d0a:	4b81      	ldr	r3, [pc, #516]	; (31f10 <_http_client_handle_header+0x280>)
   31d0c:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   31d0e:	687b      	ldr	r3, [r7, #4]
   31d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31d12:	2b00      	cmp	r3, #0
   31d14:	d046      	beq.n	31da4 <_http_client_handle_header+0x114>
   31d16:	687b      	ldr	r3, [r7, #4]
   31d18:	22e4      	movs	r2, #228	; 0xe4
   31d1a:	5a9b      	ldrh	r3, [r3, r2]
   31d1c:	2b00      	cmp	r3, #0
   31d1e:	d041      	beq.n	31da4 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   31d20:	687b      	ldr	r3, [r7, #4]
   31d22:	22dc      	movs	r2, #220	; 0xdc
   31d24:	589b      	ldr	r3, [r3, r2]
   31d26:	2b00      	cmp	r3, #0
   31d28:	da19      	bge.n	31d5e <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   31d2a:	687b      	ldr	r3, [r7, #4]
   31d2c:	22e4      	movs	r2, #228	; 0xe4
   31d2e:	5a9a      	ldrh	r2, [r3, r2]
   31d30:	230c      	movs	r3, #12
   31d32:	18fb      	adds	r3, r7, r3
   31d34:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   31d36:	230c      	movs	r3, #12
   31d38:	18fb      	adds	r3, r7, r3
   31d3a:	2201      	movs	r2, #1
   31d3c:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   31d3e:	687b      	ldr	r3, [r7, #4]
   31d40:	22e0      	movs	r2, #224	; 0xe0
   31d42:	2100      	movs	r1, #0
   31d44:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   31d46:	230c      	movs	r3, #12
   31d48:	18fb      	adds	r3, r7, r3
   31d4a:	2200      	movs	r2, #0
   31d4c:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   31d4e:	687b      	ldr	r3, [r7, #4]
   31d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31d52:	220c      	movs	r2, #12
   31d54:	18ba      	adds	r2, r7, r2
   31d56:	6878      	ldr	r0, [r7, #4]
   31d58:	2102      	movs	r1, #2
   31d5a:	4798      	blx	r3
   31d5c:	e022      	b.n	31da4 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   31d5e:	687b      	ldr	r3, [r7, #4]
   31d60:	22dc      	movs	r2, #220	; 0xdc
   31d62:	589a      	ldr	r2, [r3, r2]
   31d64:	687b      	ldr	r3, [r7, #4]
   31d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31d68:	429a      	cmp	r2, r3
   31d6a:	dd1b      	ble.n	31da4 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   31d6c:	687b      	ldr	r3, [r7, #4]
   31d6e:	22e4      	movs	r2, #228	; 0xe4
   31d70:	5a9a      	ldrh	r2, [r3, r2]
   31d72:	230c      	movs	r3, #12
   31d74:	18fb      	adds	r3, r7, r3
   31d76:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   31d78:	687b      	ldr	r3, [r7, #4]
   31d7a:	22dc      	movs	r2, #220	; 0xdc
   31d7c:	589b      	ldr	r3, [r3, r2]
   31d7e:	001a      	movs	r2, r3
   31d80:	230c      	movs	r3, #12
   31d82:	18fb      	adds	r3, r7, r3
   31d84:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   31d86:	230c      	movs	r3, #12
   31d88:	18fb      	adds	r3, r7, r3
   31d8a:	2200      	movs	r2, #0
   31d8c:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   31d8e:	687b      	ldr	r3, [r7, #4]
   31d90:	22e0      	movs	r2, #224	; 0xe0
   31d92:	2100      	movs	r1, #0
   31d94:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   31d96:	687b      	ldr	r3, [r7, #4]
   31d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31d9a:	220c      	movs	r2, #12
   31d9c:	18ba      	adds	r2, r7, r2
   31d9e:	6878      	ldr	r0, [r7, #4]
   31da0:	2102      	movs	r1, #2
   31da2:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   31da4:	687b      	ldr	r3, [r7, #4]
   31da6:	22d8      	movs	r2, #216	; 0xd8
   31da8:	2101      	movs	r1, #1
   31daa:	5099      	str	r1, [r3, r2]
			return 1;
   31dac:	2301      	movs	r3, #1
   31dae:	e0a7      	b.n	31f00 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   31db0:	495a      	ldr	r1, [pc, #360]	; (31f1c <_http_client_handle_header+0x28c>)
   31db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31db4:	2210      	movs	r2, #16
   31db6:	0018      	movs	r0, r3
   31db8:	4b57      	ldr	r3, [pc, #348]	; (31f18 <_http_client_handle_header+0x288>)
   31dba:	4798      	blx	r3
   31dbc:	1e03      	subs	r3, r0, #0
   31dbe:	d109      	bne.n	31dd4 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   31dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31dc2:	3310      	adds	r3, #16
   31dc4:	0018      	movs	r0, r3
   31dc6:	4b56      	ldr	r3, [pc, #344]	; (31f20 <_http_client_handle_header+0x290>)
   31dc8:	4798      	blx	r3
   31dca:	0001      	movs	r1, r0
   31dcc:	687b      	ldr	r3, [r7, #4]
   31dce:	22dc      	movs	r2, #220	; 0xdc
   31dd0:	5099      	str	r1, [r3, r2]
   31dd2:	e08b      	b.n	31eec <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   31dd4:	4953      	ldr	r1, [pc, #332]	; (31f24 <_http_client_handle_header+0x294>)
   31dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31dd8:	2213      	movs	r2, #19
   31dda:	0018      	movs	r0, r3
   31ddc:	4b4e      	ldr	r3, [pc, #312]	; (31f18 <_http_client_handle_header+0x288>)
   31dde:	4798      	blx	r3
   31de0:	1e03      	subs	r3, r0, #0
   31de2:	d127      	bne.n	31e34 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   31de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31de6:	3313      	adds	r3, #19
   31de8:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31dea:	e01e      	b.n	31e2a <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   31dec:	6a3b      	ldr	r3, [r7, #32]
   31dee:	781b      	ldrb	r3, [r3, #0]
   31df0:	2b20      	cmp	r3, #32
   31df2:	d103      	bne.n	31dfc <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31df4:	6a3b      	ldr	r3, [r7, #32]
   31df6:	3301      	adds	r3, #1
   31df8:	623b      	str	r3, [r7, #32]
   31dfa:	e016      	b.n	31e2a <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   31dfc:	6a3b      	ldr	r3, [r7, #32]
   31dfe:	781b      	ldrb	r3, [r3, #0]
   31e00:	2b43      	cmp	r3, #67	; 0x43
   31e02:	d003      	beq.n	31e0c <_http_client_handle_header+0x17c>
   31e04:	6a3b      	ldr	r3, [r7, #32]
   31e06:	781b      	ldrb	r3, [r3, #0]
   31e08:	2b63      	cmp	r3, #99	; 0x63
   31e0a:	d105      	bne.n	31e18 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   31e0c:	687b      	ldr	r3, [r7, #4]
   31e0e:	21cc      	movs	r1, #204	; 0xcc
   31e10:	2201      	movs	r2, #1
   31e12:	4252      	negs	r2, r2
   31e14:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   31e16:	e069      	b.n	31eec <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   31e18:	2386      	movs	r3, #134	; 0x86
   31e1a:	425a      	negs	r2, r3
   31e1c:	687b      	ldr	r3, [r7, #4]
   31e1e:	0011      	movs	r1, r2
   31e20:	0018      	movs	r0, r3
   31e22:	4b41      	ldr	r3, [pc, #260]	; (31f28 <_http_client_handle_header+0x298>)
   31e24:	4798      	blx	r3
					return 0;
   31e26:	2300      	movs	r3, #0
   31e28:	e06a      	b.n	31f00 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31e2a:	69ba      	ldr	r2, [r7, #24]
   31e2c:	6a3b      	ldr	r3, [r7, #32]
   31e2e:	429a      	cmp	r2, r3
   31e30:	d8dc      	bhi.n	31dec <_http_client_handle_header+0x15c>
   31e32:	e05b      	b.n	31eec <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   31e34:	493d      	ldr	r1, [pc, #244]	; (31f2c <_http_client_handle_header+0x29c>)
   31e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e38:	220c      	movs	r2, #12
   31e3a:	0018      	movs	r0, r3
   31e3c:	4b36      	ldr	r3, [pc, #216]	; (31f18 <_http_client_handle_header+0x288>)
   31e3e:	4798      	blx	r3
   31e40:	1e03      	subs	r3, r0, #0
   31e42:	d126      	bne.n	31e92 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   31e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e46:	330c      	adds	r3, #12
   31e48:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31e4a:	e01d      	b.n	31e88 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   31e4c:	69fb      	ldr	r3, [r7, #28]
   31e4e:	781b      	ldrb	r3, [r3, #0]
   31e50:	2b20      	cmp	r3, #32
   31e52:	d103      	bne.n	31e5c <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31e54:	69fb      	ldr	r3, [r7, #28]
   31e56:	3301      	adds	r3, #1
   31e58:	61fb      	str	r3, [r7, #28]
   31e5a:	e015      	b.n	31e88 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   31e5c:	69fb      	ldr	r3, [r7, #28]
   31e5e:	781b      	ldrb	r3, [r3, #0]
   31e60:	2b4b      	cmp	r3, #75	; 0x4b
   31e62:	d003      	beq.n	31e6c <_http_client_handle_header+0x1dc>
   31e64:	69fb      	ldr	r3, [r7, #28]
   31e66:	781b      	ldrb	r3, [r3, #0]
   31e68:	2b6b      	cmp	r3, #107	; 0x6b
   31e6a:	d106      	bne.n	31e7a <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   31e6c:	687b      	ldr	r3, [r7, #4]
   31e6e:	2241      	movs	r2, #65	; 0x41
   31e70:	5c99      	ldrb	r1, [r3, r2]
   31e72:	2002      	movs	r0, #2
   31e74:	4301      	orrs	r1, r0
   31e76:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   31e78:	e038      	b.n	31eec <_http_client_handle_header+0x25c>
					module->permanent = 0;
   31e7a:	687b      	ldr	r3, [r7, #4]
   31e7c:	2241      	movs	r2, #65	; 0x41
   31e7e:	5c99      	ldrb	r1, [r3, r2]
   31e80:	2002      	movs	r0, #2
   31e82:	4381      	bics	r1, r0
   31e84:	5499      	strb	r1, [r3, r2]
				break;
   31e86:	e031      	b.n	31eec <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31e88:	69ba      	ldr	r2, [r7, #24]
   31e8a:	69fb      	ldr	r3, [r7, #28]
   31e8c:	429a      	cmp	r2, r3
   31e8e:	d8dd      	bhi.n	31e4c <_http_client_handle_header+0x1bc>
   31e90:	e02c      	b.n	31eec <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   31e92:	4927      	ldr	r1, [pc, #156]	; (31f30 <_http_client_handle_header+0x2a0>)
   31e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e96:	2205      	movs	r2, #5
   31e98:	0018      	movs	r0, r3
   31e9a:	4b1f      	ldr	r3, [pc, #124]	; (31f18 <_http_client_handle_header+0x288>)
   31e9c:	4798      	blx	r3
   31e9e:	1e03      	subs	r3, r0, #0
   31ea0:	d124      	bne.n	31eec <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   31ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ea4:	3309      	adds	r3, #9
   31ea6:	0018      	movs	r0, r3
   31ea8:	4b1d      	ldr	r3, [pc, #116]	; (31f20 <_http_client_handle_header+0x290>)
   31eaa:	4798      	blx	r3
   31eac:	0003      	movs	r3, r0
   31eae:	b299      	uxth	r1, r3
   31eb0:	687b      	ldr	r3, [r7, #4]
   31eb2:	22e4      	movs	r2, #228	; 0xe4
   31eb4:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   31eb6:	687b      	ldr	r3, [r7, #4]
   31eb8:	22dc      	movs	r2, #220	; 0xdc
   31eba:	2100      	movs	r1, #0
   31ebc:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   31ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ec0:	3305      	adds	r3, #5
   31ec2:	781b      	ldrb	r3, [r3, #0]
   31ec4:	2b31      	cmp	r3, #49	; 0x31
   31ec6:	d804      	bhi.n	31ed2 <_http_client_handle_header+0x242>
   31ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31eca:	3307      	adds	r3, #7
   31ecc:	781b      	ldrb	r3, [r3, #0]
   31ece:	2b30      	cmp	r3, #48	; 0x30
   31ed0:	d906      	bls.n	31ee0 <_http_client_handle_header+0x250>
				module->permanent = 1;
   31ed2:	687b      	ldr	r3, [r7, #4]
   31ed4:	2241      	movs	r2, #65	; 0x41
   31ed6:	5c99      	ldrb	r1, [r3, r2]
   31ed8:	2002      	movs	r0, #2
   31eda:	4301      	orrs	r1, r0
   31edc:	5499      	strb	r1, [r3, r2]
   31ede:	e005      	b.n	31eec <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   31ee0:	687b      	ldr	r3, [r7, #4]
   31ee2:	2241      	movs	r2, #65	; 0x41
   31ee4:	5c99      	ldrb	r1, [r3, r2]
   31ee6:	2002      	movs	r0, #2
   31ee8:	4381      	bics	r1, r0
   31eea:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   31eec:	4b06      	ldr	r3, [pc, #24]	; (31f08 <_http_client_handle_header+0x278>)
   31eee:	681b      	ldr	r3, [r3, #0]
   31ef0:	0018      	movs	r0, r3
   31ef2:	4b08      	ldr	r3, [pc, #32]	; (31f14 <_http_client_handle_header+0x284>)
   31ef4:	4798      	blx	r3
   31ef6:	0002      	movs	r2, r0
   31ef8:	69bb      	ldr	r3, [r7, #24]
   31efa:	189b      	adds	r3, r3, r2
   31efc:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   31efe:	e6ce      	b.n	31c9e <_http_client_handle_header+0xe>
	}
}
   31f00:	0018      	movs	r0, r3
   31f02:	46bd      	mov	sp, r7
   31f04:	b00b      	add	sp, #44	; 0x2c
   31f06:	bd90      	pop	{r4, r7, pc}
   31f08:	20000120 	.word	0x20000120
   31f0c:	00034e95 	.word	0x00034e95
   31f10:	000322f5 	.word	0x000322f5
   31f14:	00034e17 	.word	0x00034e17
   31f18:	00034e25 	.word	0x00034e25
   31f1c:	00039e58 	.word	0x00039e58
   31f20:	000349ad 	.word	0x000349ad
   31f24:	00039e7c 	.word	0x00039e7c
   31f28:	0003130d 	.word	0x0003130d
   31f2c:	00039e90 	.word	0x00039e90
   31f30:	00039ea0 	.word	0x00039ea0

00031f34 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   31f34:	b580      	push	{r7, lr}
   31f36:	b088      	sub	sp, #32
   31f38:	af00      	add	r7, sp, #0
   31f3a:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   31f3c:	687b      	ldr	r3, [r7, #4]
   31f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31f40:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   31f42:	2300      	movs	r3, #0
   31f44:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   31f46:	687b      	ldr	r3, [r7, #4]
   31f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31f4a:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   31f4c:	687b      	ldr	r3, [r7, #4]
   31f4e:	22e0      	movs	r2, #224	; 0xe0
   31f50:	589b      	ldr	r3, [r3, r2]
   31f52:	2b00      	cmp	r3, #0
   31f54:	db71      	blt.n	3203a <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   31f56:	687b      	ldr	r3, [r7, #4]
   31f58:	22e0      	movs	r2, #224	; 0xe0
   31f5a:	589b      	ldr	r3, [r3, r2]
   31f5c:	2b00      	cmp	r3, #0
   31f5e:	d134      	bne.n	31fca <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   31f60:	687b      	ldr	r3, [r7, #4]
   31f62:	22d8      	movs	r2, #216	; 0xd8
   31f64:	2100      	movs	r1, #0
   31f66:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31f68:	687b      	ldr	r3, [r7, #4]
   31f6a:	22e4      	movs	r2, #228	; 0xe4
   31f6c:	2100      	movs	r1, #0
   31f6e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31f70:	2308      	movs	r3, #8
   31f72:	18fb      	adds	r3, r7, r3
   31f74:	2201      	movs	r2, #1
   31f76:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   31f78:	2308      	movs	r3, #8
   31f7a:	18fb      	adds	r3, r7, r3
   31f7c:	2200      	movs	r2, #0
   31f7e:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   31f80:	2308      	movs	r3, #8
   31f82:	18fb      	adds	r3, r7, r3
   31f84:	2200      	movs	r2, #0
   31f86:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   31f88:	687b      	ldr	r3, [r7, #4]
   31f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f8c:	2b00      	cmp	r3, #0
   31f8e:	d006      	beq.n	31f9e <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31f90:	687b      	ldr	r3, [r7, #4]
   31f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f94:	2208      	movs	r2, #8
   31f96:	18ba      	adds	r2, r7, r2
   31f98:	6878      	ldr	r0, [r7, #4]
   31f9a:	2103      	movs	r1, #3
   31f9c:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   31f9e:	687b      	ldr	r3, [r7, #4]
   31fa0:	2241      	movs	r2, #65	; 0x41
   31fa2:	5c9b      	ldrb	r3, [r3, r2]
   31fa4:	2202      	movs	r2, #2
   31fa6:	4013      	ands	r3, r2
   31fa8:	b2db      	uxtb	r3, r3
   31faa:	2b00      	cmp	r3, #0
   31fac:	d105      	bne.n	31fba <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   31fae:	687b      	ldr	r3, [r7, #4]
   31fb0:	2100      	movs	r1, #0
   31fb2:	0018      	movs	r0, r3
   31fb4:	4b62      	ldr	r3, [pc, #392]	; (32140 <_http_client_read_chuked_entity+0x20c>)
   31fb6:	4798      	blx	r3
					return;
   31fb8:	e0bf      	b.n	3213a <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   31fba:	697b      	ldr	r3, [r7, #20]
   31fbc:	1c9a      	adds	r2, r3, #2
   31fbe:	687b      	ldr	r3, [r7, #4]
   31fc0:	0011      	movs	r1, r2
   31fc2:	0018      	movs	r0, r3
   31fc4:	4b5f      	ldr	r3, [pc, #380]	; (32144 <_http_client_read_chuked_entity+0x210>)
   31fc6:	4798      	blx	r3
   31fc8:	e0b2      	b.n	32130 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   31fca:	687b      	ldr	r3, [r7, #4]
   31fcc:	22e0      	movs	r2, #224	; 0xe0
   31fce:	589a      	ldr	r2, [r3, r2]
   31fd0:	69fb      	ldr	r3, [r7, #28]
   31fd2:	429a      	cmp	r2, r3
   31fd4:	dd00      	ble.n	31fd8 <_http_client_read_chuked_entity+0xa4>
   31fd6:	e0ab      	b.n	32130 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   31fd8:	687b      	ldr	r3, [r7, #4]
   31fda:	22e0      	movs	r2, #224	; 0xe0
   31fdc:	589b      	ldr	r3, [r3, r2]
   31fde:	001a      	movs	r2, r3
   31fe0:	2308      	movs	r3, #8
   31fe2:	18fb      	adds	r3, r7, r3
   31fe4:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   31fe6:	2308      	movs	r3, #8
   31fe8:	18fb      	adds	r3, r7, r3
   31fea:	697a      	ldr	r2, [r7, #20]
   31fec:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   31fee:	2308      	movs	r3, #8
   31ff0:	18fb      	adds	r3, r7, r3
   31ff2:	2200      	movs	r2, #0
   31ff4:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   31ff6:	687b      	ldr	r3, [r7, #4]
   31ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31ffa:	2b00      	cmp	r3, #0
   31ffc:	d006      	beq.n	3200c <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31ffe:	687b      	ldr	r3, [r7, #4]
   32000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32002:	2208      	movs	r2, #8
   32004:	18ba      	adds	r2, r7, r2
   32006:	6878      	ldr	r0, [r7, #4]
   32008:	2103      	movs	r1, #3
   3200a:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   3200c:	687b      	ldr	r3, [r7, #4]
   3200e:	22e0      	movs	r2, #224	; 0xe0
   32010:	589b      	ldr	r3, [r3, r2]
   32012:	3302      	adds	r3, #2
   32014:	697a      	ldr	r2, [r7, #20]
   32016:	18d2      	adds	r2, r2, r3
   32018:	687b      	ldr	r3, [r7, #4]
   3201a:	0011      	movs	r1, r2
   3201c:	0018      	movs	r0, r3
   3201e:	4b49      	ldr	r3, [pc, #292]	; (32144 <_http_client_read_chuked_entity+0x210>)
   32020:	4798      	blx	r3
				length = (int)module->recved_size;
   32022:	687b      	ldr	r3, [r7, #4]
   32024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32026:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   32028:	687b      	ldr	r3, [r7, #4]
   3202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3202c:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   3202e:	687b      	ldr	r3, [r7, #4]
   32030:	21e0      	movs	r1, #224	; 0xe0
   32032:	2201      	movs	r2, #1
   32034:	4252      	negs	r2, r2
   32036:	505a      	str	r2, [r3, r1]
   32038:	e07a      	b.n	32130 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   3203a:	687b      	ldr	r3, [r7, #4]
   3203c:	22e0      	movs	r2, #224	; 0xe0
   3203e:	2100      	movs	r1, #0
   32040:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   32042:	e05a      	b.n	320fa <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   32044:	697b      	ldr	r3, [r7, #20]
   32046:	781b      	ldrb	r3, [r3, #0]
   32048:	2b0a      	cmp	r3, #10
   3204a:	d106      	bne.n	3205a <_http_client_read_chuked_entity+0x126>
					buffer++;
   3204c:	697b      	ldr	r3, [r7, #20]
   3204e:	3301      	adds	r3, #1
   32050:	617b      	str	r3, [r7, #20]
					length--;
   32052:	69fb      	ldr	r3, [r7, #28]
   32054:	3b01      	subs	r3, #1
   32056:	61fb      	str	r3, [r7, #28]
					break;
   32058:	e052      	b.n	32100 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   3205a:	69bb      	ldr	r3, [r7, #24]
   3205c:	2b00      	cmp	r3, #0
   3205e:	d145      	bne.n	320ec <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   32060:	697b      	ldr	r3, [r7, #20]
   32062:	781b      	ldrb	r3, [r3, #0]
   32064:	2b2f      	cmp	r3, #47	; 0x2f
   32066:	d910      	bls.n	3208a <_http_client_read_chuked_entity+0x156>
   32068:	697b      	ldr	r3, [r7, #20]
   3206a:	781b      	ldrb	r3, [r3, #0]
   3206c:	2b39      	cmp	r3, #57	; 0x39
   3206e:	d80c      	bhi.n	3208a <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   32070:	687b      	ldr	r3, [r7, #4]
   32072:	22e0      	movs	r2, #224	; 0xe0
   32074:	589b      	ldr	r3, [r3, r2]
   32076:	011b      	lsls	r3, r3, #4
   32078:	697a      	ldr	r2, [r7, #20]
   3207a:	7812      	ldrb	r2, [r2, #0]
   3207c:	189b      	adds	r3, r3, r2
   3207e:	3b30      	subs	r3, #48	; 0x30
   32080:	001a      	movs	r2, r3
   32082:	687b      	ldr	r3, [r7, #4]
   32084:	21e0      	movs	r1, #224	; 0xe0
   32086:	505a      	str	r2, [r3, r1]
   32088:	e031      	b.n	320ee <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   3208a:	697b      	ldr	r3, [r7, #20]
   3208c:	781b      	ldrb	r3, [r3, #0]
   3208e:	2b60      	cmp	r3, #96	; 0x60
   32090:	d910      	bls.n	320b4 <_http_client_read_chuked_entity+0x180>
   32092:	697b      	ldr	r3, [r7, #20]
   32094:	781b      	ldrb	r3, [r3, #0]
   32096:	2b66      	cmp	r3, #102	; 0x66
   32098:	d80c      	bhi.n	320b4 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   3209a:	687b      	ldr	r3, [r7, #4]
   3209c:	22e0      	movs	r2, #224	; 0xe0
   3209e:	589b      	ldr	r3, [r3, r2]
   320a0:	011b      	lsls	r3, r3, #4
   320a2:	697a      	ldr	r2, [r7, #20]
   320a4:	7812      	ldrb	r2, [r2, #0]
   320a6:	189b      	adds	r3, r3, r2
   320a8:	3b61      	subs	r3, #97	; 0x61
   320aa:	001a      	movs	r2, r3
   320ac:	687b      	ldr	r3, [r7, #4]
   320ae:	21e0      	movs	r1, #224	; 0xe0
   320b0:	505a      	str	r2, [r3, r1]
   320b2:	e01c      	b.n	320ee <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   320b4:	697b      	ldr	r3, [r7, #20]
   320b6:	781b      	ldrb	r3, [r3, #0]
   320b8:	2b40      	cmp	r3, #64	; 0x40
   320ba:	d910      	bls.n	320de <_http_client_read_chuked_entity+0x1aa>
   320bc:	697b      	ldr	r3, [r7, #20]
   320be:	781b      	ldrb	r3, [r3, #0]
   320c0:	2b46      	cmp	r3, #70	; 0x46
   320c2:	d80c      	bhi.n	320de <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   320c4:	687b      	ldr	r3, [r7, #4]
   320c6:	22e0      	movs	r2, #224	; 0xe0
   320c8:	589b      	ldr	r3, [r3, r2]
   320ca:	011b      	lsls	r3, r3, #4
   320cc:	697a      	ldr	r2, [r7, #20]
   320ce:	7812      	ldrb	r2, [r2, #0]
   320d0:	189b      	adds	r3, r3, r2
   320d2:	3b41      	subs	r3, #65	; 0x41
   320d4:	001a      	movs	r2, r3
   320d6:	687b      	ldr	r3, [r7, #4]
   320d8:	21e0      	movs	r1, #224	; 0xe0
   320da:	505a      	str	r2, [r3, r1]
   320dc:	e007      	b.n	320ee <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   320de:	697b      	ldr	r3, [r7, #20]
   320e0:	781b      	ldrb	r3, [r3, #0]
   320e2:	2b3b      	cmp	r3, #59	; 0x3b
   320e4:	d103      	bne.n	320ee <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   320e6:	2301      	movs	r3, #1
   320e8:	61bb      	str	r3, [r7, #24]
   320ea:	e000      	b.n	320ee <_http_client_read_chuked_entity+0x1ba>
					continue;
   320ec:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   320ee:	697b      	ldr	r3, [r7, #20]
   320f0:	3301      	adds	r3, #1
   320f2:	617b      	str	r3, [r7, #20]
   320f4:	69fb      	ldr	r3, [r7, #28]
   320f6:	3b01      	subs	r3, #1
   320f8:	61fb      	str	r3, [r7, #28]
   320fa:	69fb      	ldr	r3, [r7, #28]
   320fc:	2b00      	cmp	r3, #0
   320fe:	dca1      	bgt.n	32044 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   32100:	687b      	ldr	r3, [r7, #4]
   32102:	22e0      	movs	r2, #224	; 0xe0
   32104:	589a      	ldr	r2, [r3, r2]
   32106:	687b      	ldr	r3, [r7, #4]
   32108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3210a:	429a      	cmp	r2, r3
   3210c:	dd07      	ble.n	3211e <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   3210e:	238b      	movs	r3, #139	; 0x8b
   32110:	425a      	negs	r2, r3
   32112:	687b      	ldr	r3, [r7, #4]
   32114:	0011      	movs	r1, r2
   32116:	0018      	movs	r0, r3
   32118:	4b09      	ldr	r3, [pc, #36]	; (32140 <_http_client_read_chuked_entity+0x20c>)
   3211a:	4798      	blx	r3
				return;
   3211c:	e00d      	b.n	3213a <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   3211e:	69fb      	ldr	r3, [r7, #28]
   32120:	2b00      	cmp	r3, #0
   32122:	d105      	bne.n	32130 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   32124:	687b      	ldr	r3, [r7, #4]
   32126:	21e0      	movs	r1, #224	; 0xe0
   32128:	2201      	movs	r2, #1
   3212a:	4252      	negs	r2, r2
   3212c:	505a      	str	r2, [r3, r1]
				return;
   3212e:	e004      	b.n	3213a <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   32130:	687b      	ldr	r3, [r7, #4]
   32132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32134:	2b00      	cmp	r3, #0
   32136:	d000      	beq.n	3213a <_http_client_read_chuked_entity+0x206>
   32138:	e708      	b.n	31f4c <_http_client_read_chuked_entity+0x18>
}
   3213a:	46bd      	mov	sp, r7
   3213c:	b008      	add	sp, #32
   3213e:	bd80      	pop	{r7, pc}
   32140:	0003130d 	.word	0x0003130d
   32144:	000322f5 	.word	0x000322f5

00032148 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   32148:	b580      	push	{r7, lr}
   3214a:	b086      	sub	sp, #24
   3214c:	af00      	add	r7, sp, #0
   3214e:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   32150:	687b      	ldr	r3, [r7, #4]
   32152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32154:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   32156:	687b      	ldr	r3, [r7, #4]
   32158:	22dc      	movs	r2, #220	; 0xdc
   3215a:	589b      	ldr	r3, [r3, r2]
   3215c:	2b00      	cmp	r3, #0
   3215e:	db58      	blt.n	32212 <_http_client_handle_entity+0xca>
   32160:	687b      	ldr	r3, [r7, #4]
   32162:	22dc      	movs	r2, #220	; 0xdc
   32164:	589a      	ldr	r2, [r3, r2]
   32166:	687b      	ldr	r3, [r7, #4]
   32168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3216a:	429a      	cmp	r2, r3
   3216c:	dc51      	bgt.n	32212 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   3216e:	687b      	ldr	r3, [r7, #4]
   32170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32172:	0019      	movs	r1, r3
   32174:	687b      	ldr	r3, [r7, #4]
   32176:	22dc      	movs	r2, #220	; 0xdc
   32178:	589b      	ldr	r3, [r3, r2]
   3217a:	4299      	cmp	r1, r3
   3217c:	da00      	bge.n	32180 <_http_client_handle_entity+0x38>
   3217e:	e0a9      	b.n	322d4 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   32180:	687b      	ldr	r3, [r7, #4]
   32182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32184:	2b00      	cmp	r3, #0
   32186:	d020      	beq.n	321ca <_http_client_handle_entity+0x82>
   32188:	687b      	ldr	r3, [r7, #4]
   3218a:	22e4      	movs	r2, #228	; 0xe4
   3218c:	5a9b      	ldrh	r3, [r3, r2]
   3218e:	2b00      	cmp	r3, #0
   32190:	d01b      	beq.n	321ca <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   32192:	687b      	ldr	r3, [r7, #4]
   32194:	22e4      	movs	r2, #228	; 0xe4
   32196:	5a9a      	ldrh	r2, [r3, r2]
   32198:	2308      	movs	r3, #8
   3219a:	18fb      	adds	r3, r7, r3
   3219c:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   3219e:	2308      	movs	r3, #8
   321a0:	18fb      	adds	r3, r7, r3
   321a2:	2200      	movs	r2, #0
   321a4:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   321a6:	687b      	ldr	r3, [r7, #4]
   321a8:	22dc      	movs	r2, #220	; 0xdc
   321aa:	589b      	ldr	r3, [r3, r2]
   321ac:	001a      	movs	r2, r3
   321ae:	2308      	movs	r3, #8
   321b0:	18fb      	adds	r3, r7, r3
   321b2:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   321b4:	2308      	movs	r3, #8
   321b6:	18fb      	adds	r3, r7, r3
   321b8:	697a      	ldr	r2, [r7, #20]
   321ba:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   321bc:	687b      	ldr	r3, [r7, #4]
   321be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   321c0:	2208      	movs	r2, #8
   321c2:	18ba      	adds	r2, r7, r2
   321c4:	6878      	ldr	r0, [r7, #4]
   321c6:	2102      	movs	r1, #2
   321c8:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   321ca:	687b      	ldr	r3, [r7, #4]
   321cc:	22d8      	movs	r2, #216	; 0xd8
   321ce:	2100      	movs	r1, #0
   321d0:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   321d2:	687b      	ldr	r3, [r7, #4]
   321d4:	22e4      	movs	r2, #228	; 0xe4
   321d6:	2100      	movs	r1, #0
   321d8:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   321da:	687b      	ldr	r3, [r7, #4]
   321dc:	2241      	movs	r2, #65	; 0x41
   321de:	5c9b      	ldrb	r3, [r3, r2]
   321e0:	2202      	movs	r2, #2
   321e2:	4013      	ands	r3, r2
   321e4:	b2db      	uxtb	r3, r3
   321e6:	2b00      	cmp	r3, #0
   321e8:	d105      	bne.n	321f6 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   321ea:	687b      	ldr	r3, [r7, #4]
   321ec:	2100      	movs	r1, #0
   321ee:	0018      	movs	r0, r3
   321f0:	4b3b      	ldr	r3, [pc, #236]	; (322e0 <_http_client_handle_entity+0x198>)
   321f2:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   321f4:	e06e      	b.n	322d4 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   321f6:	687b      	ldr	r3, [r7, #4]
   321f8:	22dc      	movs	r2, #220	; 0xdc
   321fa:	589b      	ldr	r3, [r3, r2]
   321fc:	001a      	movs	r2, r3
   321fe:	697b      	ldr	r3, [r7, #20]
   32200:	189a      	adds	r2, r3, r2
   32202:	687b      	ldr	r3, [r7, #4]
   32204:	0011      	movs	r1, r2
   32206:	0018      	movs	r0, r3
   32208:	4b36      	ldr	r3, [pc, #216]	; (322e4 <_http_client_handle_entity+0x19c>)
   3220a:	4798      	blx	r3
				return module->recved_size;
   3220c:	687b      	ldr	r3, [r7, #4]
   3220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32210:	e061      	b.n	322d6 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   32212:	687b      	ldr	r3, [r7, #4]
   32214:	22dc      	movs	r2, #220	; 0xdc
   32216:	589b      	ldr	r3, [r3, r2]
   32218:	2b00      	cmp	r3, #0
   3221a:	db57      	blt.n	322cc <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   3221c:	687b      	ldr	r3, [r7, #4]
   3221e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32220:	2308      	movs	r3, #8
   32222:	18fb      	adds	r3, r7, r3
   32224:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   32226:	2308      	movs	r3, #8
   32228:	18fb      	adds	r3, r7, r3
   3222a:	697a      	ldr	r2, [r7, #20]
   3222c:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   3222e:	687b      	ldr	r3, [r7, #4]
   32230:	22e0      	movs	r2, #224	; 0xe0
   32232:	589a      	ldr	r2, [r3, r2]
   32234:	687b      	ldr	r3, [r7, #4]
   32236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32238:	18d2      	adds	r2, r2, r3
   3223a:	687b      	ldr	r3, [r7, #4]
   3223c:	21e0      	movs	r1, #224	; 0xe0
   3223e:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   32240:	687b      	ldr	r3, [r7, #4]
   32242:	22dc      	movs	r2, #220	; 0xdc
   32244:	589a      	ldr	r2, [r3, r2]
   32246:	687b      	ldr	r3, [r7, #4]
   32248:	21e0      	movs	r1, #224	; 0xe0
   3224a:	585b      	ldr	r3, [r3, r1]
   3224c:	429a      	cmp	r2, r3
   3224e:	dc0c      	bgt.n	3226a <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32250:	687b      	ldr	r3, [r7, #4]
   32252:	22d8      	movs	r2, #216	; 0xd8
   32254:	2100      	movs	r1, #0
   32256:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32258:	687b      	ldr	r3, [r7, #4]
   3225a:	22e4      	movs	r2, #228	; 0xe4
   3225c:	2100      	movs	r1, #0
   3225e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32260:	2308      	movs	r3, #8
   32262:	18fb      	adds	r3, r7, r3
   32264:	2201      	movs	r2, #1
   32266:	721a      	strb	r2, [r3, #8]
   32268:	e003      	b.n	32272 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   3226a:	2308      	movs	r3, #8
   3226c:	18fb      	adds	r3, r7, r3
   3226e:	2200      	movs	r2, #0
   32270:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   32272:	687b      	ldr	r3, [r7, #4]
   32274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32276:	2b00      	cmp	r3, #0
   32278:	d006      	beq.n	32288 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3227a:	687b      	ldr	r3, [r7, #4]
   3227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3227e:	2208      	movs	r2, #8
   32280:	18ba      	adds	r2, r7, r2
   32282:	6878      	ldr	r0, [r7, #4]
   32284:	2103      	movs	r1, #3
   32286:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   32288:	2308      	movs	r3, #8
   3228a:	18fb      	adds	r3, r7, r3
   3228c:	7a1b      	ldrb	r3, [r3, #8]
   3228e:	2b01      	cmp	r3, #1
   32290:	d112      	bne.n	322b8 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   32292:	687b      	ldr	r3, [r7, #4]
   32294:	2241      	movs	r2, #65	; 0x41
   32296:	5c9b      	ldrb	r3, [r3, r2]
   32298:	2202      	movs	r2, #2
   3229a:	4013      	ands	r3, r2
   3229c:	b2db      	uxtb	r3, r3
   3229e:	2b00      	cmp	r3, #0
   322a0:	d10a      	bne.n	322b8 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   322a2:	4b11      	ldr	r3, [pc, #68]	; (322e8 <_http_client_handle_entity+0x1a0>)
   322a4:	0018      	movs	r0, r3
   322a6:	4b11      	ldr	r3, [pc, #68]	; (322ec <_http_client_handle_entity+0x1a4>)
   322a8:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   322aa:	687b      	ldr	r3, [r7, #4]
   322ac:	2100      	movs	r1, #0
   322ae:	0018      	movs	r0, r3
   322b0:	4b0b      	ldr	r3, [pc, #44]	; (322e0 <_http_client_handle_entity+0x198>)
   322b2:	4798      	blx	r3
					return 0;
   322b4:	2300      	movs	r3, #0
   322b6:	e00e      	b.n	322d6 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   322b8:	687b      	ldr	r3, [r7, #4]
   322ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   322bc:	697a      	ldr	r2, [r7, #20]
   322be:	18d2      	adds	r2, r2, r3
   322c0:	687b      	ldr	r3, [r7, #4]
   322c2:	0011      	movs	r1, r2
   322c4:	0018      	movs	r0, r3
   322c6:	4b07      	ldr	r3, [pc, #28]	; (322e4 <_http_client_handle_entity+0x19c>)
   322c8:	4798      	blx	r3
   322ca:	e003      	b.n	322d4 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   322cc:	687b      	ldr	r3, [r7, #4]
   322ce:	0018      	movs	r0, r3
   322d0:	4b07      	ldr	r3, [pc, #28]	; (322f0 <_http_client_handle_entity+0x1a8>)
   322d2:	4798      	blx	r3
		}
	}

	return 0;
   322d4:	2300      	movs	r3, #0
}
   322d6:	0018      	movs	r0, r3
   322d8:	46bd      	mov	sp, r7
   322da:	b006      	add	sp, #24
   322dc:	bd80      	pop	{r7, pc}
   322de:	46c0      	nop			; (mov r8, r8)
   322e0:	0003130d 	.word	0x0003130d
   322e4:	000322f5 	.word	0x000322f5
   322e8:	00039ea8 	.word	0x00039ea8
   322ec:	00034c81 	.word	0x00034c81
   322f0:	00031f35 	.word	0x00031f35

000322f4 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   322f4:	b580      	push	{r7, lr}
   322f6:	b084      	sub	sp, #16
   322f8:	af00      	add	r7, sp, #0
   322fa:	6078      	str	r0, [r7, #4]
   322fc:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   322fe:	687b      	ldr	r3, [r7, #4]
   32300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32302:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   32304:	687b      	ldr	r3, [r7, #4]
   32306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32308:	001a      	movs	r2, r3
   3230a:	683b      	ldr	r3, [r7, #0]
   3230c:	1ad2      	subs	r2, r2, r3
   3230e:	68fb      	ldr	r3, [r7, #12]
   32310:	18d3      	adds	r3, r2, r3
   32312:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   32314:	68bb      	ldr	r3, [r7, #8]
   32316:	2b00      	cmp	r3, #0
   32318:	dd09      	ble.n	3232e <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   3231a:	68ba      	ldr	r2, [r7, #8]
   3231c:	6839      	ldr	r1, [r7, #0]
   3231e:	68fb      	ldr	r3, [r7, #12]
   32320:	0018      	movs	r0, r3
   32322:	4b06      	ldr	r3, [pc, #24]	; (3233c <_http_client_move_buffer+0x48>)
   32324:	4798      	blx	r3
		module->recved_size = remain;
   32326:	68ba      	ldr	r2, [r7, #8]
   32328:	687b      	ldr	r3, [r7, #4]
   3232a:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   3232c:	e002      	b.n	32334 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   3232e:	687b      	ldr	r3, [r7, #4]
   32330:	2200      	movs	r2, #0
   32332:	645a      	str	r2, [r3, #68]	; 0x44
}
   32334:	46c0      	nop			; (mov r8, r8)
   32336:	46bd      	mov	sp, r7
   32338:	b004      	add	sp, #16
   3233a:	bd80      	pop	{r7, pc}
   3233c:	00034a3b 	.word	0x00034a3b

00032340 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   32340:	b580      	push	{r7, lr}
   32342:	b084      	sub	sp, #16
   32344:	af00      	add	r7, sp, #0
   32346:	60f8      	str	r0, [r7, #12]
   32348:	60b9      	str	r1, [r7, #8]
   3234a:	607a      	str	r2, [r7, #4]
   3234c:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   3234e:	68fb      	ldr	r3, [r7, #12]
   32350:	687a      	ldr	r2, [r7, #4]
   32352:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   32354:	68fb      	ldr	r3, [r7, #12]
   32356:	68ba      	ldr	r2, [r7, #8]
   32358:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   3235a:	68fb      	ldr	r3, [r7, #12]
   3235c:	2200      	movs	r2, #0
   3235e:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   32360:	68fb      	ldr	r3, [r7, #12]
   32362:	683a      	ldr	r2, [r7, #0]
   32364:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   32366:	68fb      	ldr	r3, [r7, #12]
   32368:	69ba      	ldr	r2, [r7, #24]
   3236a:	60da      	str	r2, [r3, #12]
}
   3236c:	46c0      	nop			; (mov r8, r8)
   3236e:	46bd      	mov	sp, r7
   32370:	b004      	add	sp, #16
   32372:	bd80      	pop	{r7, pc}

00032374 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   32374:	b580      	push	{r7, lr}
   32376:	b084      	sub	sp, #16
   32378:	af00      	add	r7, sp, #0
   3237a:	6078      	str	r0, [r7, #4]
   3237c:	000a      	movs	r2, r1
   3237e:	1cfb      	adds	r3, r7, #3
   32380:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   32382:	687b      	ldr	r3, [r7, #4]
   32384:	681a      	ldr	r2, [r3, #0]
   32386:	687b      	ldr	r3, [r7, #4]
   32388:	685b      	ldr	r3, [r3, #4]
   3238a:	1ad3      	subs	r3, r2, r3
   3238c:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   3238e:	68fb      	ldr	r3, [r7, #12]
   32390:	2b00      	cmp	r3, #0
   32392:	dc03      	bgt.n	3239c <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   32394:	687b      	ldr	r3, [r7, #4]
   32396:	0018      	movs	r0, r3
   32398:	4b08      	ldr	r3, [pc, #32]	; (323bc <stream_writer_send_8+0x48>)
   3239a:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   3239c:	687b      	ldr	r3, [r7, #4]
   3239e:	6919      	ldr	r1, [r3, #16]
   323a0:	687b      	ldr	r3, [r7, #4]
   323a2:	685b      	ldr	r3, [r3, #4]
   323a4:	1c58      	adds	r0, r3, #1
   323a6:	687a      	ldr	r2, [r7, #4]
   323a8:	6050      	str	r0, [r2, #4]
   323aa:	18cb      	adds	r3, r1, r3
   323ac:	1cfa      	adds	r2, r7, #3
   323ae:	7812      	ldrb	r2, [r2, #0]
   323b0:	701a      	strb	r2, [r3, #0]
}
   323b2:	46c0      	nop			; (mov r8, r8)
   323b4:	46bd      	mov	sp, r7
   323b6:	b004      	add	sp, #16
   323b8:	bd80      	pop	{r7, pc}
   323ba:	46c0      	nop			; (mov r8, r8)
   323bc:	000323fd 	.word	0x000323fd

000323c0 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   323c0:	b580      	push	{r7, lr}
   323c2:	b084      	sub	sp, #16
   323c4:	af00      	add	r7, sp, #0
   323c6:	60f8      	str	r0, [r7, #12]
   323c8:	60b9      	str	r1, [r7, #8]
   323ca:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   323cc:	e00d      	b.n	323ea <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   323ce:	68bb      	ldr	r3, [r7, #8]
   323d0:	781b      	ldrb	r3, [r3, #0]
   323d2:	b25a      	sxtb	r2, r3
   323d4:	68fb      	ldr	r3, [r7, #12]
   323d6:	0011      	movs	r1, r2
   323d8:	0018      	movs	r0, r3
   323da:	4b07      	ldr	r3, [pc, #28]	; (323f8 <stream_writer_send_buffer+0x38>)
   323dc:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   323de:	687b      	ldr	r3, [r7, #4]
   323e0:	3b01      	subs	r3, #1
   323e2:	607b      	str	r3, [r7, #4]
   323e4:	68bb      	ldr	r3, [r7, #8]
   323e6:	3301      	adds	r3, #1
   323e8:	60bb      	str	r3, [r7, #8]
   323ea:	687b      	ldr	r3, [r7, #4]
   323ec:	2b00      	cmp	r3, #0
   323ee:	d1ee      	bne.n	323ce <stream_writer_send_buffer+0xe>
	}
}
   323f0:	46c0      	nop			; (mov r8, r8)
   323f2:	46bd      	mov	sp, r7
   323f4:	b004      	add	sp, #16
   323f6:	bd80      	pop	{r7, pc}
   323f8:	00032375 	.word	0x00032375

000323fc <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   323fc:	b590      	push	{r4, r7, lr}
   323fe:	b083      	sub	sp, #12
   32400:	af00      	add	r7, sp, #0
   32402:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   32404:	687b      	ldr	r3, [r7, #4]
   32406:	685b      	ldr	r3, [r3, #4]
   32408:	2b00      	cmp	r3, #0
   3240a:	d00c      	beq.n	32426 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   3240c:	687b      	ldr	r3, [r7, #4]
   3240e:	689c      	ldr	r4, [r3, #8]
   32410:	687b      	ldr	r3, [r7, #4]
   32412:	68d8      	ldr	r0, [r3, #12]
   32414:	687b      	ldr	r3, [r7, #4]
   32416:	6919      	ldr	r1, [r3, #16]
   32418:	687b      	ldr	r3, [r7, #4]
   3241a:	685b      	ldr	r3, [r3, #4]
   3241c:	001a      	movs	r2, r3
   3241e:	47a0      	blx	r4
		writer->written = 0;
   32420:	687b      	ldr	r3, [r7, #4]
   32422:	2200      	movs	r2, #0
   32424:	605a      	str	r2, [r3, #4]
	}
}
   32426:	46c0      	nop			; (mov r8, r8)
   32428:	46bd      	mov	sp, r7
   3242a:	b003      	add	sp, #12
   3242c:	bd90      	pop	{r4, r7, pc}
	...

00032430 <system_cpu_clock_get_hz>:
{
   32430:	b580      	push	{r7, lr}
   32432:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   32434:	2000      	movs	r0, #0
   32436:	4b05      	ldr	r3, [pc, #20]	; (3244c <system_cpu_clock_get_hz+0x1c>)
   32438:	4798      	blx	r3
   3243a:	0002      	movs	r2, r0
   3243c:	4b04      	ldr	r3, [pc, #16]	; (32450 <system_cpu_clock_get_hz+0x20>)
   3243e:	7a1b      	ldrb	r3, [r3, #8]
   32440:	b2db      	uxtb	r3, r3
   32442:	40da      	lsrs	r2, r3
   32444:	0013      	movs	r3, r2
}
   32446:	0018      	movs	r0, r3
   32448:	46bd      	mov	sp, r7
   3244a:	bd80      	pop	{r7, pc}
   3244c:	00029e11 	.word	0x00029e11
   32450:	40000400 	.word	0x40000400

00032454 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   32454:	b580      	push	{r7, lr}
   32456:	b084      	sub	sp, #16
   32458:	af00      	add	r7, sp, #0
   3245a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   3245c:	687b      	ldr	r3, [r7, #4]
   3245e:	681b      	ldr	r3, [r3, #0]
   32460:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   32462:	46c0      	nop			; (mov r8, r8)
   32464:	68fb      	ldr	r3, [r7, #12]
   32466:	689b      	ldr	r3, [r3, #8]
   32468:	2202      	movs	r2, #2
   3246a:	4013      	ands	r3, r2
   3246c:	d1fa      	bne.n	32464 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   3246e:	68fb      	ldr	r3, [r7, #12]
   32470:	681b      	ldr	r3, [r3, #0]
   32472:	2202      	movs	r2, #2
   32474:	431a      	orrs	r2, r3
   32476:	68fb      	ldr	r3, [r7, #12]
   32478:	601a      	str	r2, [r3, #0]
}
   3247a:	46c0      	nop			; (mov r8, r8)
   3247c:	46bd      	mov	sp, r7
   3247e:	b004      	add	sp, #16
   32480:	bd80      	pop	{r7, pc}
	...

00032484 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   32484:	b580      	push	{r7, lr}
   32486:	b082      	sub	sp, #8
   32488:	af00      	add	r7, sp, #0
   3248a:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   3248c:	4b04      	ldr	r3, [pc, #16]	; (324a0 <sw_timer_tcc_callback+0x1c>)
   3248e:	681b      	ldr	r3, [r3, #0]
   32490:	1c5a      	adds	r2, r3, #1
   32492:	4b03      	ldr	r3, [pc, #12]	; (324a0 <sw_timer_tcc_callback+0x1c>)
   32494:	601a      	str	r2, [r3, #0]
}
   32496:	46c0      	nop			; (mov r8, r8)
   32498:	46bd      	mov	sp, r7
   3249a:	b002      	add	sp, #8
   3249c:	bd80      	pop	{r7, pc}
   3249e:	46c0      	nop			; (mov r8, r8)
   324a0:	20004590 	.word	0x20004590

000324a4 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   324a4:	b580      	push	{r7, lr}
   324a6:	b082      	sub	sp, #8
   324a8:	af00      	add	r7, sp, #0
   324aa:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   324ac:	687b      	ldr	r3, [r7, #4]
   324ae:	2264      	movs	r2, #100	; 0x64
   324b0:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   324b2:	687b      	ldr	r3, [r7, #4]
   324b4:	2200      	movs	r2, #0
   324b6:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   324b8:	687b      	ldr	r3, [r7, #4]
   324ba:	2200      	movs	r2, #0
   324bc:	705a      	strb	r2, [r3, #1]
}
   324be:	46c0      	nop			; (mov r8, r8)
   324c0:	46bd      	mov	sp, r7
   324c2:	b002      	add	sp, #8
   324c4:	bd80      	pop	{r7, pc}
	...

000324c8 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   324c8:	b590      	push	{r4, r7, lr}
   324ca:	b0b1      	sub	sp, #196	; 0xc4
   324cc:	af00      	add	r7, sp, #0
   324ce:	6078      	str	r0, [r7, #4]
   324d0:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   324d2:	230c      	movs	r3, #12
   324d4:	18fb      	adds	r3, r7, r3
   324d6:	4a2e      	ldr	r2, [pc, #184]	; (32590 <sw_timer_init+0xc8>)
   324d8:	ca13      	ldmia	r2!, {r0, r1, r4}
   324da:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   324dc:	683b      	ldr	r3, [r7, #0]
   324de:	885b      	ldrh	r3, [r3, #2]
   324e0:	001a      	movs	r2, r3
   324e2:	687b      	ldr	r3, [r7, #4]
   324e4:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   324e6:	687b      	ldr	r3, [r7, #4]
   324e8:	3314      	adds	r3, #20
   324ea:	22bc      	movs	r2, #188	; 0xbc
   324ec:	18ba      	adds	r2, r7, r2
   324ee:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   324f0:	683b      	ldr	r3, [r7, #0]
   324f2:	781b      	ldrb	r3, [r3, #0]
   324f4:	001a      	movs	r2, r3
   324f6:	230c      	movs	r3, #12
   324f8:	18fb      	adds	r3, r7, r3
   324fa:	0092      	lsls	r2, r2, #2
   324fc:	58d2      	ldr	r2, [r2, r3]
   324fe:	2318      	movs	r3, #24
   32500:	18fb      	adds	r3, r7, r3
   32502:	0011      	movs	r1, r2
   32504:	0018      	movs	r0, r3
   32506:	4b23      	ldr	r3, [pc, #140]	; (32594 <sw_timer_init+0xcc>)
   32508:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   3250a:	4b23      	ldr	r3, [pc, #140]	; (32598 <sw_timer_init+0xd0>)
   3250c:	4798      	blx	r3
   3250e:	0004      	movs	r4, r0
   32510:	683b      	ldr	r3, [r7, #0]
   32512:	885b      	ldrh	r3, [r3, #2]
   32514:	001a      	movs	r2, r3
   32516:	4b21      	ldr	r3, [pc, #132]	; (3259c <sw_timer_init+0xd4>)
   32518:	0011      	movs	r1, r2
   3251a:	22fa      	movs	r2, #250	; 0xfa
   3251c:	0210      	lsls	r0, r2, #8
   3251e:	4798      	blx	r3
   32520:	0003      	movs	r3, r0
   32522:	001a      	movs	r2, r3
   32524:	4b1e      	ldr	r3, [pc, #120]	; (325a0 <sw_timer_init+0xd8>)
   32526:	0011      	movs	r1, r2
   32528:	0020      	movs	r0, r4
   3252a:	4798      	blx	r3
   3252c:	0003      	movs	r3, r0
   3252e:	001a      	movs	r2, r3
   32530:	2318      	movs	r3, #24
   32532:	18fb      	adds	r3, r7, r3
   32534:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   32536:	2318      	movs	r3, #24
   32538:	18fb      	adds	r3, r7, r3
   3253a:	2205      	movs	r2, #5
   3253c:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   3253e:	683b      	ldr	r3, [r7, #0]
   32540:	781b      	ldrb	r3, [r3, #0]
   32542:	001a      	movs	r2, r3
   32544:	230c      	movs	r3, #12
   32546:	18fb      	adds	r3, r7, r3
   32548:	0092      	lsls	r2, r2, #2
   3254a:	58d1      	ldr	r1, [r2, r3]
   3254c:	2318      	movs	r3, #24
   3254e:	18fa      	adds	r2, r7, r3
   32550:	23bc      	movs	r3, #188	; 0xbc
   32552:	18fb      	adds	r3, r7, r3
   32554:	681b      	ldr	r3, [r3, #0]
   32556:	0018      	movs	r0, r3
   32558:	4b12      	ldr	r3, [pc, #72]	; (325a4 <sw_timer_init+0xdc>)
   3255a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3255c:	683b      	ldr	r3, [r7, #0]
   3255e:	785b      	ldrb	r3, [r3, #1]
   32560:	3308      	adds	r3, #8
   32562:	b2da      	uxtb	r2, r3
   32564:	4910      	ldr	r1, [pc, #64]	; (325a8 <sw_timer_init+0xe0>)
   32566:	23bc      	movs	r3, #188	; 0xbc
   32568:	18fb      	adds	r3, r7, r3
   3256a:	681b      	ldr	r3, [r3, #0]
   3256c:	0018      	movs	r0, r3
   3256e:	4b0f      	ldr	r3, [pc, #60]	; (325ac <sw_timer_init+0xe4>)
   32570:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   32572:	683b      	ldr	r3, [r7, #0]
   32574:	785b      	ldrb	r3, [r3, #1]
   32576:	3308      	adds	r3, #8
   32578:	b2da      	uxtb	r2, r3
   3257a:	23bc      	movs	r3, #188	; 0xbc
   3257c:	18fb      	adds	r3, r7, r3
   3257e:	681b      	ldr	r3, [r3, #0]
   32580:	0011      	movs	r1, r2
   32582:	0018      	movs	r0, r3
   32584:	4b0a      	ldr	r3, [pc, #40]	; (325b0 <sw_timer_init+0xe8>)
   32586:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   32588:	46c0      	nop			; (mov r8, r8)
   3258a:	46bd      	mov	sp, r7
   3258c:	b031      	add	sp, #196	; 0xc4
   3258e:	bd90      	pop	{r4, r7, pc}
   32590:	00039ee8 	.word	0x00039ee8
   32594:	0002a3a9 	.word	0x0002a3a9
   32598:	00032431 	.word	0x00032431
   3259c:	00032b99 	.word	0x00032b99
   325a0:	00032a85 	.word	0x00032a85
   325a4:	0002aa05 	.word	0x0002aa05
   325a8:	00032485 	.word	0x00032485
   325ac:	0002ae1d 	.word	0x0002ae1d
   325b0:	0002ae5d 	.word	0x0002ae5d

000325b4 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   325b4:	b580      	push	{r7, lr}
   325b6:	b084      	sub	sp, #16
   325b8:	af00      	add	r7, sp, #0
   325ba:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   325bc:	687b      	ldr	r3, [r7, #4]
   325be:	3314      	adds	r3, #20
   325c0:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   325c2:	68fb      	ldr	r3, [r7, #12]
   325c4:	0018      	movs	r0, r3
   325c6:	4b03      	ldr	r3, [pc, #12]	; (325d4 <sw_timer_enable+0x20>)
   325c8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   325ca:	46c0      	nop			; (mov r8, r8)
   325cc:	46bd      	mov	sp, r7
   325ce:	b004      	add	sp, #16
   325d0:	bd80      	pop	{r7, pc}
   325d2:	46c0      	nop			; (mov r8, r8)
   325d4:	00032455 	.word	0x00032455

000325d8 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   325d8:	b580      	push	{r7, lr}
   325da:	b086      	sub	sp, #24
   325dc:	af00      	add	r7, sp, #0
   325de:	60f8      	str	r0, [r7, #12]
   325e0:	60b9      	str	r1, [r7, #8]
   325e2:	607a      	str	r2, [r7, #4]
   325e4:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   325e6:	2300      	movs	r3, #0
   325e8:	617b      	str	r3, [r7, #20]
   325ea:	e032      	b.n	32652 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   325ec:	68f9      	ldr	r1, [r7, #12]
   325ee:	697a      	ldr	r2, [r7, #20]
   325f0:	0013      	movs	r3, r2
   325f2:	009b      	lsls	r3, r3, #2
   325f4:	189b      	adds	r3, r3, r2
   325f6:	009b      	lsls	r3, r3, #2
   325f8:	5c5b      	ldrb	r3, [r3, r1]
   325fa:	07db      	lsls	r3, r3, #31
   325fc:	0fdb      	lsrs	r3, r3, #31
   325fe:	b2db      	uxtb	r3, r3
   32600:	2b00      	cmp	r3, #0
   32602:	d123      	bne.n	3264c <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   32604:	697a      	ldr	r2, [r7, #20]
   32606:	0013      	movs	r3, r2
   32608:	009b      	lsls	r3, r3, #2
   3260a:	189b      	adds	r3, r3, r2
   3260c:	009b      	lsls	r3, r3, #2
   3260e:	68fa      	ldr	r2, [r7, #12]
   32610:	18d3      	adds	r3, r2, r3
   32612:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   32614:	693b      	ldr	r3, [r7, #16]
   32616:	68ba      	ldr	r2, [r7, #8]
   32618:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   3261a:	693b      	ldr	r3, [r7, #16]
   3261c:	781a      	ldrb	r2, [r3, #0]
   3261e:	2102      	movs	r1, #2
   32620:	438a      	bics	r2, r1
   32622:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   32624:	693b      	ldr	r3, [r7, #16]
   32626:	687a      	ldr	r2, [r7, #4]
   32628:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   3262a:	68fb      	ldr	r3, [r7, #12]
   3262c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3262e:	4b0d      	ldr	r3, [pc, #52]	; (32664 <sw_timer_register_callback+0x8c>)
   32630:	0011      	movs	r1, r2
   32632:	6838      	ldr	r0, [r7, #0]
   32634:	4798      	blx	r3
   32636:	0003      	movs	r3, r0
   32638:	001a      	movs	r2, r3
   3263a:	693b      	ldr	r3, [r7, #16]
   3263c:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   3263e:	693b      	ldr	r3, [r7, #16]
   32640:	781a      	ldrb	r2, [r3, #0]
   32642:	2101      	movs	r1, #1
   32644:	430a      	orrs	r2, r1
   32646:	701a      	strb	r2, [r3, #0]
			return index;
   32648:	697b      	ldr	r3, [r7, #20]
   3264a:	e007      	b.n	3265c <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3264c:	697b      	ldr	r3, [r7, #20]
   3264e:	3301      	adds	r3, #1
   32650:	617b      	str	r3, [r7, #20]
   32652:	697b      	ldr	r3, [r7, #20]
   32654:	2b00      	cmp	r3, #0
   32656:	ddc9      	ble.n	325ec <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   32658:	2301      	movs	r3, #1
   3265a:	425b      	negs	r3, r3
}
   3265c:	0018      	movs	r0, r3
   3265e:	46bd      	mov	sp, r7
   32660:	b006      	add	sp, #24
   32662:	bd80      	pop	{r7, pc}
   32664:	00032a85 	.word	0x00032a85

00032668 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   32668:	b580      	push	{r7, lr}
   3266a:	b086      	sub	sp, #24
   3266c:	af00      	add	r7, sp, #0
   3266e:	60f8      	str	r0, [r7, #12]
   32670:	60b9      	str	r1, [r7, #8]
   32672:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   32674:	68ba      	ldr	r2, [r7, #8]
   32676:	0013      	movs	r3, r2
   32678:	009b      	lsls	r3, r3, #2
   3267a:	189b      	adds	r3, r3, r2
   3267c:	009b      	lsls	r3, r3, #2
   3267e:	68fa      	ldr	r2, [r7, #12]
   32680:	18d3      	adds	r3, r2, r3
   32682:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   32684:	697b      	ldr	r3, [r7, #20]
   32686:	781a      	ldrb	r2, [r3, #0]
   32688:	2102      	movs	r1, #2
   3268a:	430a      	orrs	r2, r1
   3268c:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   3268e:	68fb      	ldr	r3, [r7, #12]
   32690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32692:	4b07      	ldr	r3, [pc, #28]	; (326b0 <sw_timer_enable_callback+0x48>)
   32694:	0011      	movs	r1, r2
   32696:	6878      	ldr	r0, [r7, #4]
   32698:	4798      	blx	r3
   3269a:	0003      	movs	r3, r0
   3269c:	001a      	movs	r2, r3
   3269e:	4b05      	ldr	r3, [pc, #20]	; (326b4 <sw_timer_enable_callback+0x4c>)
   326a0:	681b      	ldr	r3, [r3, #0]
   326a2:	18d2      	adds	r2, r2, r3
   326a4:	697b      	ldr	r3, [r7, #20]
   326a6:	611a      	str	r2, [r3, #16]
}
   326a8:	46c0      	nop			; (mov r8, r8)
   326aa:	46bd      	mov	sp, r7
   326ac:	b006      	add	sp, #24
   326ae:	bd80      	pop	{r7, pc}
   326b0:	00032a85 	.word	0x00032a85
   326b4:	20004590 	.word	0x20004590

000326b8 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   326b8:	b580      	push	{r7, lr}
   326ba:	b084      	sub	sp, #16
   326bc:	af00      	add	r7, sp, #0
   326be:	6078      	str	r0, [r7, #4]
   326c0:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   326c2:	683a      	ldr	r2, [r7, #0]
   326c4:	0013      	movs	r3, r2
   326c6:	009b      	lsls	r3, r3, #2
   326c8:	189b      	adds	r3, r3, r2
   326ca:	009b      	lsls	r3, r3, #2
   326cc:	687a      	ldr	r2, [r7, #4]
   326ce:	18d3      	adds	r3, r2, r3
   326d0:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   326d2:	68fb      	ldr	r3, [r7, #12]
   326d4:	781a      	ldrb	r2, [r3, #0]
   326d6:	2102      	movs	r1, #2
   326d8:	438a      	bics	r2, r1
   326da:	701a      	strb	r2, [r3, #0]
}
   326dc:	46c0      	nop			; (mov r8, r8)
   326de:	46bd      	mov	sp, r7
   326e0:	b004      	add	sp, #16
   326e2:	bd80      	pop	{r7, pc}

000326e4 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   326e4:	b590      	push	{r4, r7, lr}
   326e6:	b085      	sub	sp, #20
   326e8:	af00      	add	r7, sp, #0
   326ea:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   326ec:	2300      	movs	r3, #0
   326ee:	60fb      	str	r3, [r7, #12]
   326f0:	e053      	b.n	3279a <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   326f2:	6879      	ldr	r1, [r7, #4]
   326f4:	68fa      	ldr	r2, [r7, #12]
   326f6:	0013      	movs	r3, r2
   326f8:	009b      	lsls	r3, r3, #2
   326fa:	189b      	adds	r3, r3, r2
   326fc:	009b      	lsls	r3, r3, #2
   326fe:	5c5b      	ldrb	r3, [r3, r1]
   32700:	07db      	lsls	r3, r3, #31
   32702:	0fdb      	lsrs	r3, r3, #31
   32704:	b2db      	uxtb	r3, r3
   32706:	2b00      	cmp	r3, #0
   32708:	d044      	beq.n	32794 <sw_timer_task+0xb0>
   3270a:	6879      	ldr	r1, [r7, #4]
   3270c:	68fa      	ldr	r2, [r7, #12]
   3270e:	0013      	movs	r3, r2
   32710:	009b      	lsls	r3, r3, #2
   32712:	189b      	adds	r3, r3, r2
   32714:	009b      	lsls	r3, r3, #2
   32716:	5c5b      	ldrb	r3, [r3, r1]
   32718:	079b      	lsls	r3, r3, #30
   3271a:	0fdb      	lsrs	r3, r3, #31
   3271c:	b2db      	uxtb	r3, r3
   3271e:	2b00      	cmp	r3, #0
   32720:	d038      	beq.n	32794 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   32722:	68fa      	ldr	r2, [r7, #12]
   32724:	0013      	movs	r3, r2
   32726:	009b      	lsls	r3, r3, #2
   32728:	189b      	adds	r3, r3, r2
   3272a:	009b      	lsls	r3, r3, #2
   3272c:	687a      	ldr	r2, [r7, #4]
   3272e:	18d3      	adds	r3, r2, r3
   32730:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   32732:	68bb      	ldr	r3, [r7, #8]
   32734:	691a      	ldr	r2, [r3, #16]
   32736:	4b1c      	ldr	r3, [pc, #112]	; (327a8 <sw_timer_task+0xc4>)
   32738:	681b      	ldr	r3, [r3, #0]
   3273a:	1ad3      	subs	r3, r2, r3
   3273c:	d52a      	bpl.n	32794 <sw_timer_task+0xb0>
   3273e:	68bb      	ldr	r3, [r7, #8]
   32740:	781b      	ldrb	r3, [r3, #0]
   32742:	2204      	movs	r2, #4
   32744:	4013      	ands	r3, r2
   32746:	b2db      	uxtb	r3, r3
   32748:	2b00      	cmp	r3, #0
   3274a:	d123      	bne.n	32794 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   3274c:	68bb      	ldr	r3, [r7, #8]
   3274e:	781a      	ldrb	r2, [r3, #0]
   32750:	2104      	movs	r1, #4
   32752:	430a      	orrs	r2, r1
   32754:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   32756:	68bb      	ldr	r3, [r7, #8]
   32758:	68db      	ldr	r3, [r3, #12]
   3275a:	2b00      	cmp	r3, #0
   3275c:	d007      	beq.n	3276e <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   3275e:	68bb      	ldr	r3, [r7, #8]
   32760:	68da      	ldr	r2, [r3, #12]
   32762:	4b11      	ldr	r3, [pc, #68]	; (327a8 <sw_timer_task+0xc4>)
   32764:	681b      	ldr	r3, [r3, #0]
   32766:	18d2      	adds	r2, r2, r3
   32768:	68bb      	ldr	r3, [r7, #8]
   3276a:	611a      	str	r2, [r3, #16]
   3276c:	e004      	b.n	32778 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   3276e:	68bb      	ldr	r3, [r7, #8]
   32770:	781a      	ldrb	r2, [r3, #0]
   32772:	2102      	movs	r1, #2
   32774:	438a      	bics	r2, r1
   32776:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   32778:	68bb      	ldr	r3, [r7, #8]
   3277a:	685c      	ldr	r4, [r3, #4]
   3277c:	68bb      	ldr	r3, [r7, #8]
   3277e:	689a      	ldr	r2, [r3, #8]
   32780:	68bb      	ldr	r3, [r7, #8]
   32782:	68db      	ldr	r3, [r3, #12]
   32784:	68f9      	ldr	r1, [r7, #12]
   32786:	6878      	ldr	r0, [r7, #4]
   32788:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   3278a:	68bb      	ldr	r3, [r7, #8]
   3278c:	781a      	ldrb	r2, [r3, #0]
   3278e:	2104      	movs	r1, #4
   32790:	438a      	bics	r2, r1
   32792:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32794:	68fb      	ldr	r3, [r7, #12]
   32796:	3301      	adds	r3, #1
   32798:	60fb      	str	r3, [r7, #12]
   3279a:	68fb      	ldr	r3, [r7, #12]
   3279c:	2b00      	cmp	r3, #0
   3279e:	dda8      	ble.n	326f2 <sw_timer_task+0xe>
			}
		}
	}
}
   327a0:	46c0      	nop			; (mov r8, r8)
   327a2:	46bd      	mov	sp, r7
   327a4:	b005      	add	sp, #20
   327a6:	bd90      	pop	{r4, r7, pc}
   327a8:	20004590 	.word	0x20004590

000327ac <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   327ac:	b580      	push	{r7, lr}
   327ae:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   327b0:	4b06      	ldr	r3, [pc, #24]	; (327cc <main+0x20>)
   327b2:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   327b4:	4b06      	ldr	r3, [pc, #24]	; (327d0 <main+0x24>)
   327b6:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   327b8:	2001      	movs	r0, #1
   327ba:	4b06      	ldr	r3, [pc, #24]	; (327d4 <main+0x28>)
   327bc:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   327be:	4b06      	ldr	r3, [pc, #24]	; (327d8 <main+0x2c>)
   327c0:	4798      	blx	r3

    return 0;  // Will not get here
   327c2:	2300      	movs	r3, #0
}
   327c4:	0018      	movs	r0, r3
   327c6:	46bd      	mov	sp, r7
   327c8:	bd80      	pop	{r7, pc}
   327ca:	46c0      	nop			; (mov r8, r8)
   327cc:	0002a29d 	.word	0x0002a29d
   327d0:	0001dda5 	.word	0x0001dda5
   327d4:	00018471 	.word	0x00018471
   327d8:	0001c3fd 	.word	0x0001c3fd

000327dc <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   327dc:	b580      	push	{r7, lr}
   327de:	b082      	sub	sp, #8
   327e0:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   327e2:	4b29      	ldr	r3, [pc, #164]	; (32888 <vApplicationDaemonTaskStartupHook+0xac>)
   327e4:	0018      	movs	r0, r3
   327e6:	4b29      	ldr	r3, [pc, #164]	; (3288c <vApplicationDaemonTaskStartupHook+0xb0>)
   327e8:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   327ea:	4b29      	ldr	r3, [pc, #164]	; (32890 <vApplicationDaemonTaskStartupHook+0xb4>)
   327ec:	0018      	movs	r0, r3
   327ee:	4b27      	ldr	r3, [pc, #156]	; (3288c <vApplicationDaemonTaskStartupHook+0xb0>)
   327f0:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   327f2:	4b28      	ldr	r3, [pc, #160]	; (32894 <vApplicationDaemonTaskStartupHook+0xb8>)
   327f4:	4798      	blx	r3
   327f6:	1e03      	subs	r3, r0, #0
   327f8:	d004      	beq.n	32804 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   327fa:	4b27      	ldr	r3, [pc, #156]	; (32898 <vApplicationDaemonTaskStartupHook+0xbc>)
   327fc:	0018      	movs	r0, r3
   327fe:	4b23      	ldr	r3, [pc, #140]	; (3288c <vApplicationDaemonTaskStartupHook+0xb0>)
   32800:	4798      	blx	r3
   32802:	e003      	b.n	3280c <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   32804:	4b25      	ldr	r3, [pc, #148]	; (3289c <vApplicationDaemonTaskStartupHook+0xc0>)
   32806:	0018      	movs	r0, r3
   32808:	4b20      	ldr	r3, [pc, #128]	; (3288c <vApplicationDaemonTaskStartupHook+0xb0>)
   3280a:	4798      	blx	r3
    }

    if (0 != InitializeSeesaw()) {
   3280c:	4b24      	ldr	r3, [pc, #144]	; (328a0 <vApplicationDaemonTaskStartupHook+0xc4>)
   3280e:	4798      	blx	r3
   32810:	1e03      	subs	r3, r0, #0
   32812:	d004      	beq.n	3281e <vApplicationDaemonTaskStartupHook+0x42>
        SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   32814:	4b23      	ldr	r3, [pc, #140]	; (328a4 <vApplicationDaemonTaskStartupHook+0xc8>)
   32816:	0018      	movs	r0, r3
   32818:	4b1c      	ldr	r3, [pc, #112]	; (3288c <vApplicationDaemonTaskStartupHook+0xb0>)
   3281a:	4798      	blx	r3
   3281c:	e003      	b.n	32826 <vApplicationDaemonTaskStartupHook+0x4a>
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
   3281e:	4b22      	ldr	r3, [pc, #136]	; (328a8 <vApplicationDaemonTaskStartupHook+0xcc>)
   32820:	0018      	movs	r0, r3
   32822:	4b1a      	ldr	r3, [pc, #104]	; (3288c <vApplicationDaemonTaskStartupHook+0xb0>)
   32824:	4798      	blx	r3
    }

    uint8_t whoamI = 0;
   32826:	1dfb      	adds	r3, r7, #7
   32828:	2200      	movs	r2, #0
   3282a:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   3282c:	4b1f      	ldr	r3, [pc, #124]	; (328ac <vApplicationDaemonTaskStartupHook+0xd0>)
   3282e:	4798      	blx	r3
   32830:	0002      	movs	r2, r0
   32832:	1dfb      	adds	r3, r7, #7
   32834:	0019      	movs	r1, r3
   32836:	0010      	movs	r0, r2
   32838:	4b1d      	ldr	r3, [pc, #116]	; (328b0 <vApplicationDaemonTaskStartupHook+0xd4>)
   3283a:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   3283c:	1dfb      	adds	r3, r7, #7
   3283e:	781b      	ldrb	r3, [r3, #0]
   32840:	2b6c      	cmp	r3, #108	; 0x6c
   32842:	d004      	beq.n	3284e <vApplicationDaemonTaskStartupHook+0x72>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   32844:	4b1b      	ldr	r3, [pc, #108]	; (328b4 <vApplicationDaemonTaskStartupHook+0xd8>)
   32846:	0018      	movs	r0, r3
   32848:	4b10      	ldr	r3, [pc, #64]	; (3288c <vApplicationDaemonTaskStartupHook+0xb0>)
   3284a:	4798      	blx	r3
   3284c:	e010      	b.n	32870 <vApplicationDaemonTaskStartupHook+0x94>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   3284e:	4b1a      	ldr	r3, [pc, #104]	; (328b8 <vApplicationDaemonTaskStartupHook+0xdc>)
   32850:	0018      	movs	r0, r3
   32852:	4b0e      	ldr	r3, [pc, #56]	; (3288c <vApplicationDaemonTaskStartupHook+0xb0>)
   32854:	4798      	blx	r3
        if (InitImu() == 0) {
   32856:	4b19      	ldr	r3, [pc, #100]	; (328bc <vApplicationDaemonTaskStartupHook+0xe0>)
   32858:	4798      	blx	r3
   3285a:	1e03      	subs	r3, r0, #0
   3285c:	d104      	bne.n	32868 <vApplicationDaemonTaskStartupHook+0x8c>
            SerialConsoleWriteString("IMU initialized!\r\n");
   3285e:	4b18      	ldr	r3, [pc, #96]	; (328c0 <vApplicationDaemonTaskStartupHook+0xe4>)
   32860:	0018      	movs	r0, r3
   32862:	4b0a      	ldr	r3, [pc, #40]	; (3288c <vApplicationDaemonTaskStartupHook+0xb0>)
   32864:	4798      	blx	r3
   32866:	e003      	b.n	32870 <vApplicationDaemonTaskStartupHook+0x94>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   32868:	4b16      	ldr	r3, [pc, #88]	; (328c4 <vApplicationDaemonTaskStartupHook+0xe8>)
   3286a:	0018      	movs	r0, r3
   3286c:	4b07      	ldr	r3, [pc, #28]	; (3288c <vApplicationDaemonTaskStartupHook+0xb0>)
   3286e:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   32870:	4b15      	ldr	r3, [pc, #84]	; (328c8 <vApplicationDaemonTaskStartupHook+0xec>)
   32872:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   32874:	4b15      	ldr	r3, [pc, #84]	; (328cc <vApplicationDaemonTaskStartupHook+0xf0>)
   32876:	681b      	ldr	r3, [r3, #0]
   32878:	0018      	movs	r0, r3
   3287a:	4b15      	ldr	r3, [pc, #84]	; (328d0 <vApplicationDaemonTaskStartupHook+0xf4>)
   3287c:	4798      	blx	r3
}
   3287e:	46c0      	nop			; (mov r8, r8)
   32880:	46bd      	mov	sp, r7
   32882:	b002      	add	sp, #8
   32884:	bd80      	pop	{r7, pc}
   32886:	46c0      	nop			; (mov r8, r8)
   32888:	00039ef4 	.word	0x00039ef4
   3288c:	0001de15 	.word	0x0001de15
   32890:	00039f18 	.word	0x00039f18
   32894:	00013f29 	.word	0x00013f29
   32898:	00039f30 	.word	0x00039f30
   3289c:	00039f54 	.word	0x00039f54
   328a0:	000152ed 	.word	0x000152ed
   328a4:	00039f70 	.word	0x00039f70
   328a8:	00039f90 	.word	0x00039f90
   328ac:	00015215 	.word	0x00015215
   328b0:	00014d61 	.word	0x00014d61
   328b4:	00039fa8 	.word	0x00039fa8
   328b8:	00039fbc 	.word	0x00039fbc
   328bc:	00015225 	.word	0x00015225
   328c0:	00039fcc 	.word	0x00039fcc
   328c4:	00039fe0 	.word	0x00039fe0
   328c8:	000328d5 	.word	0x000328d5
   328cc:	20004598 	.word	0x20004598
   328d0:	0001c2a1 	.word	0x0001c2a1

000328d4 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   328d4:	b590      	push	{r4, r7, lr}
   328d6:	b083      	sub	sp, #12
   328d8:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   328da:	4b44      	ldr	r3, [pc, #272]	; (329ec <StartTasks+0x118>)
   328dc:	4798      	blx	r3
   328de:	0003      	movs	r3, r0
   328e0:	4a43      	ldr	r2, [pc, #268]	; (329f0 <StartTasks+0x11c>)
   328e2:	4844      	ldr	r0, [pc, #272]	; (329f4 <StartTasks+0x120>)
   328e4:	2140      	movs	r1, #64	; 0x40
   328e6:	4c44      	ldr	r4, [pc, #272]	; (329f8 <StartTasks+0x124>)
   328e8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   328ea:	4b42      	ldr	r3, [pc, #264]	; (329f4 <StartTasks+0x120>)
   328ec:	0018      	movs	r0, r3
   328ee:	4b43      	ldr	r3, [pc, #268]	; (329fc <StartTasks+0x128>)
   328f0:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   328f2:	23c8      	movs	r3, #200	; 0xc8
   328f4:	005a      	lsls	r2, r3, #1
   328f6:	4942      	ldr	r1, [pc, #264]	; (32a00 <StartTasks+0x12c>)
   328f8:	4842      	ldr	r0, [pc, #264]	; (32a04 <StartTasks+0x130>)
   328fa:	4b43      	ldr	r3, [pc, #268]	; (32a08 <StartTasks+0x134>)
   328fc:	9301      	str	r3, [sp, #4]
   328fe:	2304      	movs	r3, #4
   32900:	9300      	str	r3, [sp, #0]
   32902:	2300      	movs	r3, #0
   32904:	4c41      	ldr	r4, [pc, #260]	; (32a0c <StartTasks+0x138>)
   32906:	47a0      	blx	r4
   32908:	0003      	movs	r3, r0
   3290a:	2b01      	cmp	r3, #1
   3290c:	d003      	beq.n	32916 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   3290e:	4b40      	ldr	r3, [pc, #256]	; (32a10 <StartTasks+0x13c>)
   32910:	0018      	movs	r0, r3
   32912:	4b3a      	ldr	r3, [pc, #232]	; (329fc <StartTasks+0x128>)
   32914:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   32916:	4b35      	ldr	r3, [pc, #212]	; (329ec <StartTasks+0x118>)
   32918:	4798      	blx	r3
   3291a:	0003      	movs	r3, r0
   3291c:	4a3d      	ldr	r2, [pc, #244]	; (32a14 <StartTasks+0x140>)
   3291e:	4835      	ldr	r0, [pc, #212]	; (329f4 <StartTasks+0x120>)
   32920:	2140      	movs	r1, #64	; 0x40
   32922:	4c35      	ldr	r4, [pc, #212]	; (329f8 <StartTasks+0x124>)
   32924:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32926:	4b33      	ldr	r3, [pc, #204]	; (329f4 <StartTasks+0x120>)
   32928:	0018      	movs	r0, r3
   3292a:	4b34      	ldr	r3, [pc, #208]	; (329fc <StartTasks+0x128>)
   3292c:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   3292e:	23fa      	movs	r3, #250	; 0xfa
   32930:	009a      	lsls	r2, r3, #2
   32932:	4939      	ldr	r1, [pc, #228]	; (32a18 <StartTasks+0x144>)
   32934:	4839      	ldr	r0, [pc, #228]	; (32a1c <StartTasks+0x148>)
   32936:	4b3a      	ldr	r3, [pc, #232]	; (32a20 <StartTasks+0x14c>)
   32938:	9301      	str	r3, [sp, #4]
   3293a:	2303      	movs	r3, #3
   3293c:	9300      	str	r3, [sp, #0]
   3293e:	2300      	movs	r3, #0
   32940:	4c32      	ldr	r4, [pc, #200]	; (32a0c <StartTasks+0x138>)
   32942:	47a0      	blx	r4
   32944:	0003      	movs	r3, r0
   32946:	2b01      	cmp	r3, #1
   32948:	d003      	beq.n	32952 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   3294a:	4b36      	ldr	r3, [pc, #216]	; (32a24 <StartTasks+0x150>)
   3294c:	0018      	movs	r0, r3
   3294e:	4b2b      	ldr	r3, [pc, #172]	; (329fc <StartTasks+0x128>)
   32950:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   32952:	4b26      	ldr	r3, [pc, #152]	; (329ec <StartTasks+0x118>)
   32954:	4798      	blx	r3
   32956:	0003      	movs	r3, r0
   32958:	4a33      	ldr	r2, [pc, #204]	; (32a28 <StartTasks+0x154>)
   3295a:	4826      	ldr	r0, [pc, #152]	; (329f4 <StartTasks+0x120>)
   3295c:	2140      	movs	r1, #64	; 0x40
   3295e:	4c26      	ldr	r4, [pc, #152]	; (329f8 <StartTasks+0x124>)
   32960:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32962:	4b24      	ldr	r3, [pc, #144]	; (329f4 <StartTasks+0x120>)
   32964:	0018      	movs	r0, r3
   32966:	4b25      	ldr	r3, [pc, #148]	; (329fc <StartTasks+0x128>)
   32968:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   3296a:	23c8      	movs	r3, #200	; 0xc8
   3296c:	005a      	lsls	r2, r3, #1
   3296e:	492f      	ldr	r1, [pc, #188]	; (32a2c <StartTasks+0x158>)
   32970:	482f      	ldr	r0, [pc, #188]	; (32a30 <StartTasks+0x15c>)
   32972:	4b30      	ldr	r3, [pc, #192]	; (32a34 <StartTasks+0x160>)
   32974:	9301      	str	r3, [sp, #4]
   32976:	2304      	movs	r3, #4
   32978:	9300      	str	r3, [sp, #0]
   3297a:	2300      	movs	r3, #0
   3297c:	4c23      	ldr	r4, [pc, #140]	; (32a0c <StartTasks+0x138>)
   3297e:	47a0      	blx	r4
   32980:	0003      	movs	r3, r0
   32982:	2b01      	cmp	r3, #1
   32984:	d003      	beq.n	3298e <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   32986:	4b2c      	ldr	r3, [pc, #176]	; (32a38 <StartTasks+0x164>)
   32988:	0018      	movs	r0, r3
   3298a:	4b1c      	ldr	r3, [pc, #112]	; (329fc <StartTasks+0x128>)
   3298c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   3298e:	4b17      	ldr	r3, [pc, #92]	; (329ec <StartTasks+0x118>)
   32990:	4798      	blx	r3
   32992:	0003      	movs	r3, r0
   32994:	4a29      	ldr	r2, [pc, #164]	; (32a3c <StartTasks+0x168>)
   32996:	4817      	ldr	r0, [pc, #92]	; (329f4 <StartTasks+0x120>)
   32998:	2140      	movs	r1, #64	; 0x40
   3299a:	4c17      	ldr	r4, [pc, #92]	; (329f8 <StartTasks+0x124>)
   3299c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3299e:	4b15      	ldr	r3, [pc, #84]	; (329f4 <StartTasks+0x120>)
   329a0:	0018      	movs	r0, r3
   329a2:	4b16      	ldr	r3, [pc, #88]	; (329fc <StartTasks+0x128>)
   329a4:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   329a6:	2380      	movs	r3, #128	; 0x80
   329a8:	005a      	lsls	r2, r3, #1
   329aa:	4925      	ldr	r1, [pc, #148]	; (32a40 <StartTasks+0x16c>)
   329ac:	4825      	ldr	r0, [pc, #148]	; (32a44 <StartTasks+0x170>)
   329ae:	4b26      	ldr	r3, [pc, #152]	; (32a48 <StartTasks+0x174>)
   329b0:	9301      	str	r3, [sp, #4]
   329b2:	2304      	movs	r3, #4
   329b4:	9300      	str	r3, [sp, #0]
   329b6:	2300      	movs	r3, #0
   329b8:	4c14      	ldr	r4, [pc, #80]	; (32a0c <StartTasks+0x138>)
   329ba:	47a0      	blx	r4
   329bc:	0003      	movs	r3, r0
   329be:	2b01      	cmp	r3, #1
   329c0:	d003      	beq.n	329ca <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   329c2:	4b22      	ldr	r3, [pc, #136]	; (32a4c <StartTasks+0x178>)
   329c4:	0018      	movs	r0, r3
   329c6:	4b0d      	ldr	r3, [pc, #52]	; (329fc <StartTasks+0x128>)
   329c8:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   329ca:	4b08      	ldr	r3, [pc, #32]	; (329ec <StartTasks+0x118>)
   329cc:	4798      	blx	r3
   329ce:	0003      	movs	r3, r0
   329d0:	4a1f      	ldr	r2, [pc, #124]	; (32a50 <StartTasks+0x17c>)
   329d2:	4808      	ldr	r0, [pc, #32]	; (329f4 <StartTasks+0x120>)
   329d4:	2140      	movs	r1, #64	; 0x40
   329d6:	4c08      	ldr	r4, [pc, #32]	; (329f8 <StartTasks+0x124>)
   329d8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   329da:	4b06      	ldr	r3, [pc, #24]	; (329f4 <StartTasks+0x120>)
   329dc:	0018      	movs	r0, r3
   329de:	4b07      	ldr	r3, [pc, #28]	; (329fc <StartTasks+0x128>)
   329e0:	4798      	blx	r3
}
   329e2:	46c0      	nop			; (mov r8, r8)
   329e4:	46bd      	mov	sp, r7
   329e6:	b001      	add	sp, #4
   329e8:	bd90      	pop	{r4, r7, pc}
   329ea:	46c0      	nop			; (mov r8, r8)
   329ec:	0001a3e1 	.word	0x0001a3e1
   329f0:	00039ffc 	.word	0x00039ffc
   329f4:	20005ad0 	.word	0x20005ad0
   329f8:	00034cb9 	.word	0x00034cb9
   329fc:	0001de15 	.word	0x0001de15
   32a00:	0003a020 	.word	0x0003a020
   32a04:	00012e71 	.word	0x00012e71
   32a08:	20004594 	.word	0x20004594
   32a0c:	0001be25 	.word	0x0001be25
   32a10:	0003a02c 	.word	0x0003a02c
   32a14:	0003a058 	.word	0x0003a058
   32a18:	0003a078 	.word	0x0003a078
   32a1c:	00017175 	.word	0x00017175
   32a20:	2000459c 	.word	0x2000459c
   32a24:	0003a084 	.word	0x0003a084
   32a28:	0003a0b0 	.word	0x0003a0b0
   32a2c:	0003a0d0 	.word	0x0003a0d0
   32a30:	00015801 	.word	0x00015801
   32a34:	200045a0 	.word	0x200045a0
   32a38:	0003a0d8 	.word	0x0003a0d8
   32a3c:	0003a104 	.word	0x0003a104
   32a40:	0003a128 	.word	0x0003a128
   32a44:	000138b9 	.word	0x000138b9
   32a48:	200045a4 	.word	0x200045a4
   32a4c:	0003a138 	.word	0x0003a138
   32a50:	0003a168 	.word	0x0003a168

00032a54 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   32a54:	b580      	push	{r7, lr}
   32a56:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   32a58:	4b02      	ldr	r3, [pc, #8]	; (32a64 <vApplicationMallocFailedHook+0x10>)
   32a5a:	0018      	movs	r0, r3
   32a5c:	4b02      	ldr	r3, [pc, #8]	; (32a68 <vApplicationMallocFailedHook+0x14>)
   32a5e:	4798      	blx	r3
    while (1)
   32a60:	e7fe      	b.n	32a60 <vApplicationMallocFailedHook+0xc>
   32a62:	46c0      	nop			; (mov r8, r8)
   32a64:	0003a190 	.word	0x0003a190
   32a68:	0001de15 	.word	0x0001de15

00032a6c <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   32a6c:	b580      	push	{r7, lr}
   32a6e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   32a70:	4b02      	ldr	r3, [pc, #8]	; (32a7c <vApplicationStackOverflowHook+0x10>)
   32a72:	0018      	movs	r0, r3
   32a74:	4b02      	ldr	r3, [pc, #8]	; (32a80 <vApplicationStackOverflowHook+0x14>)
   32a76:	4798      	blx	r3
    while (1)
   32a78:	e7fe      	b.n	32a78 <vApplicationStackOverflowHook+0xc>
   32a7a:	46c0      	nop			; (mov r8, r8)
   32a7c:	0003a1bc 	.word	0x0003a1bc
   32a80:	0001de15 	.word	0x0001de15

00032a84 <__udivsi3>:
   32a84:	2200      	movs	r2, #0
   32a86:	0843      	lsrs	r3, r0, #1
   32a88:	428b      	cmp	r3, r1
   32a8a:	d374      	bcc.n	32b76 <__udivsi3+0xf2>
   32a8c:	0903      	lsrs	r3, r0, #4
   32a8e:	428b      	cmp	r3, r1
   32a90:	d35f      	bcc.n	32b52 <__udivsi3+0xce>
   32a92:	0a03      	lsrs	r3, r0, #8
   32a94:	428b      	cmp	r3, r1
   32a96:	d344      	bcc.n	32b22 <__udivsi3+0x9e>
   32a98:	0b03      	lsrs	r3, r0, #12
   32a9a:	428b      	cmp	r3, r1
   32a9c:	d328      	bcc.n	32af0 <__udivsi3+0x6c>
   32a9e:	0c03      	lsrs	r3, r0, #16
   32aa0:	428b      	cmp	r3, r1
   32aa2:	d30d      	bcc.n	32ac0 <__udivsi3+0x3c>
   32aa4:	22ff      	movs	r2, #255	; 0xff
   32aa6:	0209      	lsls	r1, r1, #8
   32aa8:	ba12      	rev	r2, r2
   32aaa:	0c03      	lsrs	r3, r0, #16
   32aac:	428b      	cmp	r3, r1
   32aae:	d302      	bcc.n	32ab6 <__udivsi3+0x32>
   32ab0:	1212      	asrs	r2, r2, #8
   32ab2:	0209      	lsls	r1, r1, #8
   32ab4:	d065      	beq.n	32b82 <__udivsi3+0xfe>
   32ab6:	0b03      	lsrs	r3, r0, #12
   32ab8:	428b      	cmp	r3, r1
   32aba:	d319      	bcc.n	32af0 <__udivsi3+0x6c>
   32abc:	e000      	b.n	32ac0 <__udivsi3+0x3c>
   32abe:	0a09      	lsrs	r1, r1, #8
   32ac0:	0bc3      	lsrs	r3, r0, #15
   32ac2:	428b      	cmp	r3, r1
   32ac4:	d301      	bcc.n	32aca <__udivsi3+0x46>
   32ac6:	03cb      	lsls	r3, r1, #15
   32ac8:	1ac0      	subs	r0, r0, r3
   32aca:	4152      	adcs	r2, r2
   32acc:	0b83      	lsrs	r3, r0, #14
   32ace:	428b      	cmp	r3, r1
   32ad0:	d301      	bcc.n	32ad6 <__udivsi3+0x52>
   32ad2:	038b      	lsls	r3, r1, #14
   32ad4:	1ac0      	subs	r0, r0, r3
   32ad6:	4152      	adcs	r2, r2
   32ad8:	0b43      	lsrs	r3, r0, #13
   32ada:	428b      	cmp	r3, r1
   32adc:	d301      	bcc.n	32ae2 <__udivsi3+0x5e>
   32ade:	034b      	lsls	r3, r1, #13
   32ae0:	1ac0      	subs	r0, r0, r3
   32ae2:	4152      	adcs	r2, r2
   32ae4:	0b03      	lsrs	r3, r0, #12
   32ae6:	428b      	cmp	r3, r1
   32ae8:	d301      	bcc.n	32aee <__udivsi3+0x6a>
   32aea:	030b      	lsls	r3, r1, #12
   32aec:	1ac0      	subs	r0, r0, r3
   32aee:	4152      	adcs	r2, r2
   32af0:	0ac3      	lsrs	r3, r0, #11
   32af2:	428b      	cmp	r3, r1
   32af4:	d301      	bcc.n	32afa <__udivsi3+0x76>
   32af6:	02cb      	lsls	r3, r1, #11
   32af8:	1ac0      	subs	r0, r0, r3
   32afa:	4152      	adcs	r2, r2
   32afc:	0a83      	lsrs	r3, r0, #10
   32afe:	428b      	cmp	r3, r1
   32b00:	d301      	bcc.n	32b06 <__udivsi3+0x82>
   32b02:	028b      	lsls	r3, r1, #10
   32b04:	1ac0      	subs	r0, r0, r3
   32b06:	4152      	adcs	r2, r2
   32b08:	0a43      	lsrs	r3, r0, #9
   32b0a:	428b      	cmp	r3, r1
   32b0c:	d301      	bcc.n	32b12 <__udivsi3+0x8e>
   32b0e:	024b      	lsls	r3, r1, #9
   32b10:	1ac0      	subs	r0, r0, r3
   32b12:	4152      	adcs	r2, r2
   32b14:	0a03      	lsrs	r3, r0, #8
   32b16:	428b      	cmp	r3, r1
   32b18:	d301      	bcc.n	32b1e <__udivsi3+0x9a>
   32b1a:	020b      	lsls	r3, r1, #8
   32b1c:	1ac0      	subs	r0, r0, r3
   32b1e:	4152      	adcs	r2, r2
   32b20:	d2cd      	bcs.n	32abe <__udivsi3+0x3a>
   32b22:	09c3      	lsrs	r3, r0, #7
   32b24:	428b      	cmp	r3, r1
   32b26:	d301      	bcc.n	32b2c <__udivsi3+0xa8>
   32b28:	01cb      	lsls	r3, r1, #7
   32b2a:	1ac0      	subs	r0, r0, r3
   32b2c:	4152      	adcs	r2, r2
   32b2e:	0983      	lsrs	r3, r0, #6
   32b30:	428b      	cmp	r3, r1
   32b32:	d301      	bcc.n	32b38 <__udivsi3+0xb4>
   32b34:	018b      	lsls	r3, r1, #6
   32b36:	1ac0      	subs	r0, r0, r3
   32b38:	4152      	adcs	r2, r2
   32b3a:	0943      	lsrs	r3, r0, #5
   32b3c:	428b      	cmp	r3, r1
   32b3e:	d301      	bcc.n	32b44 <__udivsi3+0xc0>
   32b40:	014b      	lsls	r3, r1, #5
   32b42:	1ac0      	subs	r0, r0, r3
   32b44:	4152      	adcs	r2, r2
   32b46:	0903      	lsrs	r3, r0, #4
   32b48:	428b      	cmp	r3, r1
   32b4a:	d301      	bcc.n	32b50 <__udivsi3+0xcc>
   32b4c:	010b      	lsls	r3, r1, #4
   32b4e:	1ac0      	subs	r0, r0, r3
   32b50:	4152      	adcs	r2, r2
   32b52:	08c3      	lsrs	r3, r0, #3
   32b54:	428b      	cmp	r3, r1
   32b56:	d301      	bcc.n	32b5c <__udivsi3+0xd8>
   32b58:	00cb      	lsls	r3, r1, #3
   32b5a:	1ac0      	subs	r0, r0, r3
   32b5c:	4152      	adcs	r2, r2
   32b5e:	0883      	lsrs	r3, r0, #2
   32b60:	428b      	cmp	r3, r1
   32b62:	d301      	bcc.n	32b68 <__udivsi3+0xe4>
   32b64:	008b      	lsls	r3, r1, #2
   32b66:	1ac0      	subs	r0, r0, r3
   32b68:	4152      	adcs	r2, r2
   32b6a:	0843      	lsrs	r3, r0, #1
   32b6c:	428b      	cmp	r3, r1
   32b6e:	d301      	bcc.n	32b74 <__udivsi3+0xf0>
   32b70:	004b      	lsls	r3, r1, #1
   32b72:	1ac0      	subs	r0, r0, r3
   32b74:	4152      	adcs	r2, r2
   32b76:	1a41      	subs	r1, r0, r1
   32b78:	d200      	bcs.n	32b7c <__udivsi3+0xf8>
   32b7a:	4601      	mov	r1, r0
   32b7c:	4152      	adcs	r2, r2
   32b7e:	4610      	mov	r0, r2
   32b80:	4770      	bx	lr
   32b82:	e7ff      	b.n	32b84 <__udivsi3+0x100>
   32b84:	b501      	push	{r0, lr}
   32b86:	2000      	movs	r0, #0
   32b88:	f000 f8f0 	bl	32d6c <__aeabi_idiv0>
   32b8c:	bd02      	pop	{r1, pc}
   32b8e:	46c0      	nop			; (mov r8, r8)

00032b90 <__aeabi_uidivmod>:
   32b90:	2900      	cmp	r1, #0
   32b92:	d0f7      	beq.n	32b84 <__udivsi3+0x100>
   32b94:	e776      	b.n	32a84 <__udivsi3>
   32b96:	4770      	bx	lr

00032b98 <__divsi3>:
   32b98:	4603      	mov	r3, r0
   32b9a:	430b      	orrs	r3, r1
   32b9c:	d47f      	bmi.n	32c9e <__divsi3+0x106>
   32b9e:	2200      	movs	r2, #0
   32ba0:	0843      	lsrs	r3, r0, #1
   32ba2:	428b      	cmp	r3, r1
   32ba4:	d374      	bcc.n	32c90 <__divsi3+0xf8>
   32ba6:	0903      	lsrs	r3, r0, #4
   32ba8:	428b      	cmp	r3, r1
   32baa:	d35f      	bcc.n	32c6c <__divsi3+0xd4>
   32bac:	0a03      	lsrs	r3, r0, #8
   32bae:	428b      	cmp	r3, r1
   32bb0:	d344      	bcc.n	32c3c <__divsi3+0xa4>
   32bb2:	0b03      	lsrs	r3, r0, #12
   32bb4:	428b      	cmp	r3, r1
   32bb6:	d328      	bcc.n	32c0a <__divsi3+0x72>
   32bb8:	0c03      	lsrs	r3, r0, #16
   32bba:	428b      	cmp	r3, r1
   32bbc:	d30d      	bcc.n	32bda <__divsi3+0x42>
   32bbe:	22ff      	movs	r2, #255	; 0xff
   32bc0:	0209      	lsls	r1, r1, #8
   32bc2:	ba12      	rev	r2, r2
   32bc4:	0c03      	lsrs	r3, r0, #16
   32bc6:	428b      	cmp	r3, r1
   32bc8:	d302      	bcc.n	32bd0 <__divsi3+0x38>
   32bca:	1212      	asrs	r2, r2, #8
   32bcc:	0209      	lsls	r1, r1, #8
   32bce:	d065      	beq.n	32c9c <__divsi3+0x104>
   32bd0:	0b03      	lsrs	r3, r0, #12
   32bd2:	428b      	cmp	r3, r1
   32bd4:	d319      	bcc.n	32c0a <__divsi3+0x72>
   32bd6:	e000      	b.n	32bda <__divsi3+0x42>
   32bd8:	0a09      	lsrs	r1, r1, #8
   32bda:	0bc3      	lsrs	r3, r0, #15
   32bdc:	428b      	cmp	r3, r1
   32bde:	d301      	bcc.n	32be4 <__divsi3+0x4c>
   32be0:	03cb      	lsls	r3, r1, #15
   32be2:	1ac0      	subs	r0, r0, r3
   32be4:	4152      	adcs	r2, r2
   32be6:	0b83      	lsrs	r3, r0, #14
   32be8:	428b      	cmp	r3, r1
   32bea:	d301      	bcc.n	32bf0 <__divsi3+0x58>
   32bec:	038b      	lsls	r3, r1, #14
   32bee:	1ac0      	subs	r0, r0, r3
   32bf0:	4152      	adcs	r2, r2
   32bf2:	0b43      	lsrs	r3, r0, #13
   32bf4:	428b      	cmp	r3, r1
   32bf6:	d301      	bcc.n	32bfc <__divsi3+0x64>
   32bf8:	034b      	lsls	r3, r1, #13
   32bfa:	1ac0      	subs	r0, r0, r3
   32bfc:	4152      	adcs	r2, r2
   32bfe:	0b03      	lsrs	r3, r0, #12
   32c00:	428b      	cmp	r3, r1
   32c02:	d301      	bcc.n	32c08 <__divsi3+0x70>
   32c04:	030b      	lsls	r3, r1, #12
   32c06:	1ac0      	subs	r0, r0, r3
   32c08:	4152      	adcs	r2, r2
   32c0a:	0ac3      	lsrs	r3, r0, #11
   32c0c:	428b      	cmp	r3, r1
   32c0e:	d301      	bcc.n	32c14 <__divsi3+0x7c>
   32c10:	02cb      	lsls	r3, r1, #11
   32c12:	1ac0      	subs	r0, r0, r3
   32c14:	4152      	adcs	r2, r2
   32c16:	0a83      	lsrs	r3, r0, #10
   32c18:	428b      	cmp	r3, r1
   32c1a:	d301      	bcc.n	32c20 <__divsi3+0x88>
   32c1c:	028b      	lsls	r3, r1, #10
   32c1e:	1ac0      	subs	r0, r0, r3
   32c20:	4152      	adcs	r2, r2
   32c22:	0a43      	lsrs	r3, r0, #9
   32c24:	428b      	cmp	r3, r1
   32c26:	d301      	bcc.n	32c2c <__divsi3+0x94>
   32c28:	024b      	lsls	r3, r1, #9
   32c2a:	1ac0      	subs	r0, r0, r3
   32c2c:	4152      	adcs	r2, r2
   32c2e:	0a03      	lsrs	r3, r0, #8
   32c30:	428b      	cmp	r3, r1
   32c32:	d301      	bcc.n	32c38 <__divsi3+0xa0>
   32c34:	020b      	lsls	r3, r1, #8
   32c36:	1ac0      	subs	r0, r0, r3
   32c38:	4152      	adcs	r2, r2
   32c3a:	d2cd      	bcs.n	32bd8 <__divsi3+0x40>
   32c3c:	09c3      	lsrs	r3, r0, #7
   32c3e:	428b      	cmp	r3, r1
   32c40:	d301      	bcc.n	32c46 <__divsi3+0xae>
   32c42:	01cb      	lsls	r3, r1, #7
   32c44:	1ac0      	subs	r0, r0, r3
   32c46:	4152      	adcs	r2, r2
   32c48:	0983      	lsrs	r3, r0, #6
   32c4a:	428b      	cmp	r3, r1
   32c4c:	d301      	bcc.n	32c52 <__divsi3+0xba>
   32c4e:	018b      	lsls	r3, r1, #6
   32c50:	1ac0      	subs	r0, r0, r3
   32c52:	4152      	adcs	r2, r2
   32c54:	0943      	lsrs	r3, r0, #5
   32c56:	428b      	cmp	r3, r1
   32c58:	d301      	bcc.n	32c5e <__divsi3+0xc6>
   32c5a:	014b      	lsls	r3, r1, #5
   32c5c:	1ac0      	subs	r0, r0, r3
   32c5e:	4152      	adcs	r2, r2
   32c60:	0903      	lsrs	r3, r0, #4
   32c62:	428b      	cmp	r3, r1
   32c64:	d301      	bcc.n	32c6a <__divsi3+0xd2>
   32c66:	010b      	lsls	r3, r1, #4
   32c68:	1ac0      	subs	r0, r0, r3
   32c6a:	4152      	adcs	r2, r2
   32c6c:	08c3      	lsrs	r3, r0, #3
   32c6e:	428b      	cmp	r3, r1
   32c70:	d301      	bcc.n	32c76 <__divsi3+0xde>
   32c72:	00cb      	lsls	r3, r1, #3
   32c74:	1ac0      	subs	r0, r0, r3
   32c76:	4152      	adcs	r2, r2
   32c78:	0883      	lsrs	r3, r0, #2
   32c7a:	428b      	cmp	r3, r1
   32c7c:	d301      	bcc.n	32c82 <__divsi3+0xea>
   32c7e:	008b      	lsls	r3, r1, #2
   32c80:	1ac0      	subs	r0, r0, r3
   32c82:	4152      	adcs	r2, r2
   32c84:	0843      	lsrs	r3, r0, #1
   32c86:	428b      	cmp	r3, r1
   32c88:	d301      	bcc.n	32c8e <__divsi3+0xf6>
   32c8a:	004b      	lsls	r3, r1, #1
   32c8c:	1ac0      	subs	r0, r0, r3
   32c8e:	4152      	adcs	r2, r2
   32c90:	1a41      	subs	r1, r0, r1
   32c92:	d200      	bcs.n	32c96 <__divsi3+0xfe>
   32c94:	4601      	mov	r1, r0
   32c96:	4152      	adcs	r2, r2
   32c98:	4610      	mov	r0, r2
   32c9a:	4770      	bx	lr
   32c9c:	e05d      	b.n	32d5a <__divsi3+0x1c2>
   32c9e:	0fca      	lsrs	r2, r1, #31
   32ca0:	d000      	beq.n	32ca4 <__divsi3+0x10c>
   32ca2:	4249      	negs	r1, r1
   32ca4:	1003      	asrs	r3, r0, #32
   32ca6:	d300      	bcc.n	32caa <__divsi3+0x112>
   32ca8:	4240      	negs	r0, r0
   32caa:	4053      	eors	r3, r2
   32cac:	2200      	movs	r2, #0
   32cae:	469c      	mov	ip, r3
   32cb0:	0903      	lsrs	r3, r0, #4
   32cb2:	428b      	cmp	r3, r1
   32cb4:	d32d      	bcc.n	32d12 <__divsi3+0x17a>
   32cb6:	0a03      	lsrs	r3, r0, #8
   32cb8:	428b      	cmp	r3, r1
   32cba:	d312      	bcc.n	32ce2 <__divsi3+0x14a>
   32cbc:	22fc      	movs	r2, #252	; 0xfc
   32cbe:	0189      	lsls	r1, r1, #6
   32cc0:	ba12      	rev	r2, r2
   32cc2:	0a03      	lsrs	r3, r0, #8
   32cc4:	428b      	cmp	r3, r1
   32cc6:	d30c      	bcc.n	32ce2 <__divsi3+0x14a>
   32cc8:	0189      	lsls	r1, r1, #6
   32cca:	1192      	asrs	r2, r2, #6
   32ccc:	428b      	cmp	r3, r1
   32cce:	d308      	bcc.n	32ce2 <__divsi3+0x14a>
   32cd0:	0189      	lsls	r1, r1, #6
   32cd2:	1192      	asrs	r2, r2, #6
   32cd4:	428b      	cmp	r3, r1
   32cd6:	d304      	bcc.n	32ce2 <__divsi3+0x14a>
   32cd8:	0189      	lsls	r1, r1, #6
   32cda:	d03a      	beq.n	32d52 <__divsi3+0x1ba>
   32cdc:	1192      	asrs	r2, r2, #6
   32cde:	e000      	b.n	32ce2 <__divsi3+0x14a>
   32ce0:	0989      	lsrs	r1, r1, #6
   32ce2:	09c3      	lsrs	r3, r0, #7
   32ce4:	428b      	cmp	r3, r1
   32ce6:	d301      	bcc.n	32cec <__divsi3+0x154>
   32ce8:	01cb      	lsls	r3, r1, #7
   32cea:	1ac0      	subs	r0, r0, r3
   32cec:	4152      	adcs	r2, r2
   32cee:	0983      	lsrs	r3, r0, #6
   32cf0:	428b      	cmp	r3, r1
   32cf2:	d301      	bcc.n	32cf8 <__divsi3+0x160>
   32cf4:	018b      	lsls	r3, r1, #6
   32cf6:	1ac0      	subs	r0, r0, r3
   32cf8:	4152      	adcs	r2, r2
   32cfa:	0943      	lsrs	r3, r0, #5
   32cfc:	428b      	cmp	r3, r1
   32cfe:	d301      	bcc.n	32d04 <__divsi3+0x16c>
   32d00:	014b      	lsls	r3, r1, #5
   32d02:	1ac0      	subs	r0, r0, r3
   32d04:	4152      	adcs	r2, r2
   32d06:	0903      	lsrs	r3, r0, #4
   32d08:	428b      	cmp	r3, r1
   32d0a:	d301      	bcc.n	32d10 <__divsi3+0x178>
   32d0c:	010b      	lsls	r3, r1, #4
   32d0e:	1ac0      	subs	r0, r0, r3
   32d10:	4152      	adcs	r2, r2
   32d12:	08c3      	lsrs	r3, r0, #3
   32d14:	428b      	cmp	r3, r1
   32d16:	d301      	bcc.n	32d1c <__divsi3+0x184>
   32d18:	00cb      	lsls	r3, r1, #3
   32d1a:	1ac0      	subs	r0, r0, r3
   32d1c:	4152      	adcs	r2, r2
   32d1e:	0883      	lsrs	r3, r0, #2
   32d20:	428b      	cmp	r3, r1
   32d22:	d301      	bcc.n	32d28 <__divsi3+0x190>
   32d24:	008b      	lsls	r3, r1, #2
   32d26:	1ac0      	subs	r0, r0, r3
   32d28:	4152      	adcs	r2, r2
   32d2a:	d2d9      	bcs.n	32ce0 <__divsi3+0x148>
   32d2c:	0843      	lsrs	r3, r0, #1
   32d2e:	428b      	cmp	r3, r1
   32d30:	d301      	bcc.n	32d36 <__divsi3+0x19e>
   32d32:	004b      	lsls	r3, r1, #1
   32d34:	1ac0      	subs	r0, r0, r3
   32d36:	4152      	adcs	r2, r2
   32d38:	1a41      	subs	r1, r0, r1
   32d3a:	d200      	bcs.n	32d3e <__divsi3+0x1a6>
   32d3c:	4601      	mov	r1, r0
   32d3e:	4663      	mov	r3, ip
   32d40:	4152      	adcs	r2, r2
   32d42:	105b      	asrs	r3, r3, #1
   32d44:	4610      	mov	r0, r2
   32d46:	d301      	bcc.n	32d4c <__divsi3+0x1b4>
   32d48:	4240      	negs	r0, r0
   32d4a:	2b00      	cmp	r3, #0
   32d4c:	d500      	bpl.n	32d50 <__divsi3+0x1b8>
   32d4e:	4249      	negs	r1, r1
   32d50:	4770      	bx	lr
   32d52:	4663      	mov	r3, ip
   32d54:	105b      	asrs	r3, r3, #1
   32d56:	d300      	bcc.n	32d5a <__divsi3+0x1c2>
   32d58:	4240      	negs	r0, r0
   32d5a:	b501      	push	{r0, lr}
   32d5c:	2000      	movs	r0, #0
   32d5e:	f000 f805 	bl	32d6c <__aeabi_idiv0>
   32d62:	bd02      	pop	{r1, pc}

00032d64 <__aeabi_idivmod>:
   32d64:	2900      	cmp	r1, #0
   32d66:	d0f8      	beq.n	32d5a <__divsi3+0x1c2>
   32d68:	e716      	b.n	32b98 <__divsi3>
   32d6a:	4770      	bx	lr

00032d6c <__aeabi_idiv0>:
   32d6c:	4770      	bx	lr
   32d6e:	46c0      	nop			; (mov r8, r8)

00032d70 <__aeabi_lmul>:
   32d70:	b5f0      	push	{r4, r5, r6, r7, lr}
   32d72:	46ce      	mov	lr, r9
   32d74:	4647      	mov	r7, r8
   32d76:	0415      	lsls	r5, r2, #16
   32d78:	0c2d      	lsrs	r5, r5, #16
   32d7a:	002e      	movs	r6, r5
   32d7c:	b580      	push	{r7, lr}
   32d7e:	0407      	lsls	r7, r0, #16
   32d80:	0c14      	lsrs	r4, r2, #16
   32d82:	0c3f      	lsrs	r7, r7, #16
   32d84:	4699      	mov	r9, r3
   32d86:	0c03      	lsrs	r3, r0, #16
   32d88:	437e      	muls	r6, r7
   32d8a:	435d      	muls	r5, r3
   32d8c:	4367      	muls	r7, r4
   32d8e:	4363      	muls	r3, r4
   32d90:	197f      	adds	r7, r7, r5
   32d92:	0c34      	lsrs	r4, r6, #16
   32d94:	19e4      	adds	r4, r4, r7
   32d96:	469c      	mov	ip, r3
   32d98:	42a5      	cmp	r5, r4
   32d9a:	d903      	bls.n	32da4 <__aeabi_lmul+0x34>
   32d9c:	2380      	movs	r3, #128	; 0x80
   32d9e:	025b      	lsls	r3, r3, #9
   32da0:	4698      	mov	r8, r3
   32da2:	44c4      	add	ip, r8
   32da4:	464b      	mov	r3, r9
   32da6:	4351      	muls	r1, r2
   32da8:	4343      	muls	r3, r0
   32daa:	0436      	lsls	r6, r6, #16
   32dac:	0c36      	lsrs	r6, r6, #16
   32dae:	0c25      	lsrs	r5, r4, #16
   32db0:	0424      	lsls	r4, r4, #16
   32db2:	4465      	add	r5, ip
   32db4:	19a4      	adds	r4, r4, r6
   32db6:	1859      	adds	r1, r3, r1
   32db8:	1949      	adds	r1, r1, r5
   32dba:	0020      	movs	r0, r4
   32dbc:	bc0c      	pop	{r2, r3}
   32dbe:	4690      	mov	r8, r2
   32dc0:	4699      	mov	r9, r3
   32dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032dc4 <__aeabi_fmul>:
   32dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32dc6:	4657      	mov	r7, sl
   32dc8:	464e      	mov	r6, r9
   32dca:	4645      	mov	r5, r8
   32dcc:	46de      	mov	lr, fp
   32dce:	b5e0      	push	{r5, r6, r7, lr}
   32dd0:	0247      	lsls	r7, r0, #9
   32dd2:	0046      	lsls	r6, r0, #1
   32dd4:	4688      	mov	r8, r1
   32dd6:	0a7f      	lsrs	r7, r7, #9
   32dd8:	0e36      	lsrs	r6, r6, #24
   32dda:	0fc4      	lsrs	r4, r0, #31
   32ddc:	2e00      	cmp	r6, #0
   32dde:	d047      	beq.n	32e70 <__aeabi_fmul+0xac>
   32de0:	2eff      	cmp	r6, #255	; 0xff
   32de2:	d024      	beq.n	32e2e <__aeabi_fmul+0x6a>
   32de4:	00fb      	lsls	r3, r7, #3
   32de6:	2780      	movs	r7, #128	; 0x80
   32de8:	04ff      	lsls	r7, r7, #19
   32dea:	431f      	orrs	r7, r3
   32dec:	2300      	movs	r3, #0
   32dee:	4699      	mov	r9, r3
   32df0:	469a      	mov	sl, r3
   32df2:	3e7f      	subs	r6, #127	; 0x7f
   32df4:	4643      	mov	r3, r8
   32df6:	025d      	lsls	r5, r3, #9
   32df8:	0058      	lsls	r0, r3, #1
   32dfa:	0fdb      	lsrs	r3, r3, #31
   32dfc:	0a6d      	lsrs	r5, r5, #9
   32dfe:	0e00      	lsrs	r0, r0, #24
   32e00:	4698      	mov	r8, r3
   32e02:	d043      	beq.n	32e8c <__aeabi_fmul+0xc8>
   32e04:	28ff      	cmp	r0, #255	; 0xff
   32e06:	d03b      	beq.n	32e80 <__aeabi_fmul+0xbc>
   32e08:	00eb      	lsls	r3, r5, #3
   32e0a:	2580      	movs	r5, #128	; 0x80
   32e0c:	2200      	movs	r2, #0
   32e0e:	04ed      	lsls	r5, r5, #19
   32e10:	431d      	orrs	r5, r3
   32e12:	387f      	subs	r0, #127	; 0x7f
   32e14:	1836      	adds	r6, r6, r0
   32e16:	1c73      	adds	r3, r6, #1
   32e18:	4641      	mov	r1, r8
   32e1a:	469b      	mov	fp, r3
   32e1c:	464b      	mov	r3, r9
   32e1e:	4061      	eors	r1, r4
   32e20:	4313      	orrs	r3, r2
   32e22:	2b0f      	cmp	r3, #15
   32e24:	d864      	bhi.n	32ef0 <__aeabi_fmul+0x12c>
   32e26:	4875      	ldr	r0, [pc, #468]	; (32ffc <__aeabi_fmul+0x238>)
   32e28:	009b      	lsls	r3, r3, #2
   32e2a:	58c3      	ldr	r3, [r0, r3]
   32e2c:	469f      	mov	pc, r3
   32e2e:	2f00      	cmp	r7, #0
   32e30:	d142      	bne.n	32eb8 <__aeabi_fmul+0xf4>
   32e32:	2308      	movs	r3, #8
   32e34:	4699      	mov	r9, r3
   32e36:	3b06      	subs	r3, #6
   32e38:	26ff      	movs	r6, #255	; 0xff
   32e3a:	469a      	mov	sl, r3
   32e3c:	e7da      	b.n	32df4 <__aeabi_fmul+0x30>
   32e3e:	4641      	mov	r1, r8
   32e40:	2a02      	cmp	r2, #2
   32e42:	d028      	beq.n	32e96 <__aeabi_fmul+0xd2>
   32e44:	2a03      	cmp	r2, #3
   32e46:	d100      	bne.n	32e4a <__aeabi_fmul+0x86>
   32e48:	e0ce      	b.n	32fe8 <__aeabi_fmul+0x224>
   32e4a:	2a01      	cmp	r2, #1
   32e4c:	d000      	beq.n	32e50 <__aeabi_fmul+0x8c>
   32e4e:	e0ac      	b.n	32faa <__aeabi_fmul+0x1e6>
   32e50:	4011      	ands	r1, r2
   32e52:	2000      	movs	r0, #0
   32e54:	2200      	movs	r2, #0
   32e56:	b2cc      	uxtb	r4, r1
   32e58:	0240      	lsls	r0, r0, #9
   32e5a:	05d2      	lsls	r2, r2, #23
   32e5c:	0a40      	lsrs	r0, r0, #9
   32e5e:	07e4      	lsls	r4, r4, #31
   32e60:	4310      	orrs	r0, r2
   32e62:	4320      	orrs	r0, r4
   32e64:	bc3c      	pop	{r2, r3, r4, r5}
   32e66:	4690      	mov	r8, r2
   32e68:	4699      	mov	r9, r3
   32e6a:	46a2      	mov	sl, r4
   32e6c:	46ab      	mov	fp, r5
   32e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32e70:	2f00      	cmp	r7, #0
   32e72:	d115      	bne.n	32ea0 <__aeabi_fmul+0xdc>
   32e74:	2304      	movs	r3, #4
   32e76:	4699      	mov	r9, r3
   32e78:	3b03      	subs	r3, #3
   32e7a:	2600      	movs	r6, #0
   32e7c:	469a      	mov	sl, r3
   32e7e:	e7b9      	b.n	32df4 <__aeabi_fmul+0x30>
   32e80:	20ff      	movs	r0, #255	; 0xff
   32e82:	2202      	movs	r2, #2
   32e84:	2d00      	cmp	r5, #0
   32e86:	d0c5      	beq.n	32e14 <__aeabi_fmul+0x50>
   32e88:	2203      	movs	r2, #3
   32e8a:	e7c3      	b.n	32e14 <__aeabi_fmul+0x50>
   32e8c:	2d00      	cmp	r5, #0
   32e8e:	d119      	bne.n	32ec4 <__aeabi_fmul+0x100>
   32e90:	2000      	movs	r0, #0
   32e92:	2201      	movs	r2, #1
   32e94:	e7be      	b.n	32e14 <__aeabi_fmul+0x50>
   32e96:	2401      	movs	r4, #1
   32e98:	22ff      	movs	r2, #255	; 0xff
   32e9a:	400c      	ands	r4, r1
   32e9c:	2000      	movs	r0, #0
   32e9e:	e7db      	b.n	32e58 <__aeabi_fmul+0x94>
   32ea0:	0038      	movs	r0, r7
   32ea2:	f001 fd65 	bl	34970 <__clzsi2>
   32ea6:	2676      	movs	r6, #118	; 0x76
   32ea8:	1f43      	subs	r3, r0, #5
   32eaa:	409f      	lsls	r7, r3
   32eac:	2300      	movs	r3, #0
   32eae:	4276      	negs	r6, r6
   32eb0:	1a36      	subs	r6, r6, r0
   32eb2:	4699      	mov	r9, r3
   32eb4:	469a      	mov	sl, r3
   32eb6:	e79d      	b.n	32df4 <__aeabi_fmul+0x30>
   32eb8:	230c      	movs	r3, #12
   32eba:	4699      	mov	r9, r3
   32ebc:	3b09      	subs	r3, #9
   32ebe:	26ff      	movs	r6, #255	; 0xff
   32ec0:	469a      	mov	sl, r3
   32ec2:	e797      	b.n	32df4 <__aeabi_fmul+0x30>
   32ec4:	0028      	movs	r0, r5
   32ec6:	f001 fd53 	bl	34970 <__clzsi2>
   32eca:	1f43      	subs	r3, r0, #5
   32ecc:	409d      	lsls	r5, r3
   32ece:	2376      	movs	r3, #118	; 0x76
   32ed0:	425b      	negs	r3, r3
   32ed2:	1a18      	subs	r0, r3, r0
   32ed4:	2200      	movs	r2, #0
   32ed6:	e79d      	b.n	32e14 <__aeabi_fmul+0x50>
   32ed8:	2080      	movs	r0, #128	; 0x80
   32eda:	2400      	movs	r4, #0
   32edc:	03c0      	lsls	r0, r0, #15
   32ede:	22ff      	movs	r2, #255	; 0xff
   32ee0:	e7ba      	b.n	32e58 <__aeabi_fmul+0x94>
   32ee2:	003d      	movs	r5, r7
   32ee4:	4652      	mov	r2, sl
   32ee6:	e7ab      	b.n	32e40 <__aeabi_fmul+0x7c>
   32ee8:	003d      	movs	r5, r7
   32eea:	0021      	movs	r1, r4
   32eec:	4652      	mov	r2, sl
   32eee:	e7a7      	b.n	32e40 <__aeabi_fmul+0x7c>
   32ef0:	0c3b      	lsrs	r3, r7, #16
   32ef2:	469c      	mov	ip, r3
   32ef4:	042a      	lsls	r2, r5, #16
   32ef6:	0c12      	lsrs	r2, r2, #16
   32ef8:	0c2b      	lsrs	r3, r5, #16
   32efa:	0014      	movs	r4, r2
   32efc:	4660      	mov	r0, ip
   32efe:	4665      	mov	r5, ip
   32f00:	043f      	lsls	r7, r7, #16
   32f02:	0c3f      	lsrs	r7, r7, #16
   32f04:	437c      	muls	r4, r7
   32f06:	4342      	muls	r2, r0
   32f08:	435d      	muls	r5, r3
   32f0a:	437b      	muls	r3, r7
   32f0c:	0c27      	lsrs	r7, r4, #16
   32f0e:	189b      	adds	r3, r3, r2
   32f10:	18ff      	adds	r7, r7, r3
   32f12:	42ba      	cmp	r2, r7
   32f14:	d903      	bls.n	32f1e <__aeabi_fmul+0x15a>
   32f16:	2380      	movs	r3, #128	; 0x80
   32f18:	025b      	lsls	r3, r3, #9
   32f1a:	469c      	mov	ip, r3
   32f1c:	4465      	add	r5, ip
   32f1e:	0424      	lsls	r4, r4, #16
   32f20:	043a      	lsls	r2, r7, #16
   32f22:	0c24      	lsrs	r4, r4, #16
   32f24:	1912      	adds	r2, r2, r4
   32f26:	0193      	lsls	r3, r2, #6
   32f28:	1e5c      	subs	r4, r3, #1
   32f2a:	41a3      	sbcs	r3, r4
   32f2c:	0c3f      	lsrs	r7, r7, #16
   32f2e:	0e92      	lsrs	r2, r2, #26
   32f30:	197d      	adds	r5, r7, r5
   32f32:	431a      	orrs	r2, r3
   32f34:	01ad      	lsls	r5, r5, #6
   32f36:	4315      	orrs	r5, r2
   32f38:	012b      	lsls	r3, r5, #4
   32f3a:	d504      	bpl.n	32f46 <__aeabi_fmul+0x182>
   32f3c:	2301      	movs	r3, #1
   32f3e:	465e      	mov	r6, fp
   32f40:	086a      	lsrs	r2, r5, #1
   32f42:	401d      	ands	r5, r3
   32f44:	4315      	orrs	r5, r2
   32f46:	0032      	movs	r2, r6
   32f48:	327f      	adds	r2, #127	; 0x7f
   32f4a:	2a00      	cmp	r2, #0
   32f4c:	dd25      	ble.n	32f9a <__aeabi_fmul+0x1d6>
   32f4e:	076b      	lsls	r3, r5, #29
   32f50:	d004      	beq.n	32f5c <__aeabi_fmul+0x198>
   32f52:	230f      	movs	r3, #15
   32f54:	402b      	ands	r3, r5
   32f56:	2b04      	cmp	r3, #4
   32f58:	d000      	beq.n	32f5c <__aeabi_fmul+0x198>
   32f5a:	3504      	adds	r5, #4
   32f5c:	012b      	lsls	r3, r5, #4
   32f5e:	d503      	bpl.n	32f68 <__aeabi_fmul+0x1a4>
   32f60:	0032      	movs	r2, r6
   32f62:	4b27      	ldr	r3, [pc, #156]	; (33000 <__aeabi_fmul+0x23c>)
   32f64:	3280      	adds	r2, #128	; 0x80
   32f66:	401d      	ands	r5, r3
   32f68:	2afe      	cmp	r2, #254	; 0xfe
   32f6a:	dc94      	bgt.n	32e96 <__aeabi_fmul+0xd2>
   32f6c:	2401      	movs	r4, #1
   32f6e:	01a8      	lsls	r0, r5, #6
   32f70:	0a40      	lsrs	r0, r0, #9
   32f72:	b2d2      	uxtb	r2, r2
   32f74:	400c      	ands	r4, r1
   32f76:	e76f      	b.n	32e58 <__aeabi_fmul+0x94>
   32f78:	2080      	movs	r0, #128	; 0x80
   32f7a:	03c0      	lsls	r0, r0, #15
   32f7c:	4207      	tst	r7, r0
   32f7e:	d007      	beq.n	32f90 <__aeabi_fmul+0x1cc>
   32f80:	4205      	tst	r5, r0
   32f82:	d105      	bne.n	32f90 <__aeabi_fmul+0x1cc>
   32f84:	4328      	orrs	r0, r5
   32f86:	0240      	lsls	r0, r0, #9
   32f88:	0a40      	lsrs	r0, r0, #9
   32f8a:	4644      	mov	r4, r8
   32f8c:	22ff      	movs	r2, #255	; 0xff
   32f8e:	e763      	b.n	32e58 <__aeabi_fmul+0x94>
   32f90:	4338      	orrs	r0, r7
   32f92:	0240      	lsls	r0, r0, #9
   32f94:	0a40      	lsrs	r0, r0, #9
   32f96:	22ff      	movs	r2, #255	; 0xff
   32f98:	e75e      	b.n	32e58 <__aeabi_fmul+0x94>
   32f9a:	2401      	movs	r4, #1
   32f9c:	1aa3      	subs	r3, r4, r2
   32f9e:	2b1b      	cmp	r3, #27
   32fa0:	dd05      	ble.n	32fae <__aeabi_fmul+0x1ea>
   32fa2:	400c      	ands	r4, r1
   32fa4:	2200      	movs	r2, #0
   32fa6:	2000      	movs	r0, #0
   32fa8:	e756      	b.n	32e58 <__aeabi_fmul+0x94>
   32faa:	465e      	mov	r6, fp
   32fac:	e7cb      	b.n	32f46 <__aeabi_fmul+0x182>
   32fae:	002a      	movs	r2, r5
   32fb0:	2020      	movs	r0, #32
   32fb2:	40da      	lsrs	r2, r3
   32fb4:	1ac3      	subs	r3, r0, r3
   32fb6:	409d      	lsls	r5, r3
   32fb8:	002b      	movs	r3, r5
   32fba:	1e5d      	subs	r5, r3, #1
   32fbc:	41ab      	sbcs	r3, r5
   32fbe:	4313      	orrs	r3, r2
   32fc0:	075a      	lsls	r2, r3, #29
   32fc2:	d004      	beq.n	32fce <__aeabi_fmul+0x20a>
   32fc4:	220f      	movs	r2, #15
   32fc6:	401a      	ands	r2, r3
   32fc8:	2a04      	cmp	r2, #4
   32fca:	d000      	beq.n	32fce <__aeabi_fmul+0x20a>
   32fcc:	3304      	adds	r3, #4
   32fce:	015a      	lsls	r2, r3, #5
   32fd0:	d504      	bpl.n	32fdc <__aeabi_fmul+0x218>
   32fd2:	2401      	movs	r4, #1
   32fd4:	2201      	movs	r2, #1
   32fd6:	400c      	ands	r4, r1
   32fd8:	2000      	movs	r0, #0
   32fda:	e73d      	b.n	32e58 <__aeabi_fmul+0x94>
   32fdc:	2401      	movs	r4, #1
   32fde:	019b      	lsls	r3, r3, #6
   32fe0:	0a58      	lsrs	r0, r3, #9
   32fe2:	400c      	ands	r4, r1
   32fe4:	2200      	movs	r2, #0
   32fe6:	e737      	b.n	32e58 <__aeabi_fmul+0x94>
   32fe8:	2080      	movs	r0, #128	; 0x80
   32fea:	2401      	movs	r4, #1
   32fec:	03c0      	lsls	r0, r0, #15
   32fee:	4328      	orrs	r0, r5
   32ff0:	0240      	lsls	r0, r0, #9
   32ff2:	0a40      	lsrs	r0, r0, #9
   32ff4:	400c      	ands	r4, r1
   32ff6:	22ff      	movs	r2, #255	; 0xff
   32ff8:	e72e      	b.n	32e58 <__aeabi_fmul+0x94>
   32ffa:	46c0      	nop			; (mov r8, r8)
   32ffc:	0003a1e4 	.word	0x0003a1e4
   33000:	f7ffffff 	.word	0xf7ffffff

00033004 <__aeabi_f2iz>:
   33004:	0241      	lsls	r1, r0, #9
   33006:	0043      	lsls	r3, r0, #1
   33008:	0fc2      	lsrs	r2, r0, #31
   3300a:	0a49      	lsrs	r1, r1, #9
   3300c:	0e1b      	lsrs	r3, r3, #24
   3300e:	2000      	movs	r0, #0
   33010:	2b7e      	cmp	r3, #126	; 0x7e
   33012:	dd0d      	ble.n	33030 <__aeabi_f2iz+0x2c>
   33014:	2b9d      	cmp	r3, #157	; 0x9d
   33016:	dc0c      	bgt.n	33032 <__aeabi_f2iz+0x2e>
   33018:	2080      	movs	r0, #128	; 0x80
   3301a:	0400      	lsls	r0, r0, #16
   3301c:	4301      	orrs	r1, r0
   3301e:	2b95      	cmp	r3, #149	; 0x95
   33020:	dc0a      	bgt.n	33038 <__aeabi_f2iz+0x34>
   33022:	2096      	movs	r0, #150	; 0x96
   33024:	1ac3      	subs	r3, r0, r3
   33026:	40d9      	lsrs	r1, r3
   33028:	4248      	negs	r0, r1
   3302a:	2a00      	cmp	r2, #0
   3302c:	d100      	bne.n	33030 <__aeabi_f2iz+0x2c>
   3302e:	0008      	movs	r0, r1
   33030:	4770      	bx	lr
   33032:	4b03      	ldr	r3, [pc, #12]	; (33040 <__aeabi_f2iz+0x3c>)
   33034:	18d0      	adds	r0, r2, r3
   33036:	e7fb      	b.n	33030 <__aeabi_f2iz+0x2c>
   33038:	3b96      	subs	r3, #150	; 0x96
   3303a:	4099      	lsls	r1, r3
   3303c:	e7f4      	b.n	33028 <__aeabi_f2iz+0x24>
   3303e:	46c0      	nop			; (mov r8, r8)
   33040:	7fffffff 	.word	0x7fffffff

00033044 <__aeabi_i2f>:
   33044:	b570      	push	{r4, r5, r6, lr}
   33046:	2800      	cmp	r0, #0
   33048:	d030      	beq.n	330ac <__aeabi_i2f+0x68>
   3304a:	17c3      	asrs	r3, r0, #31
   3304c:	18c4      	adds	r4, r0, r3
   3304e:	405c      	eors	r4, r3
   33050:	0fc5      	lsrs	r5, r0, #31
   33052:	0020      	movs	r0, r4
   33054:	f001 fc8c 	bl	34970 <__clzsi2>
   33058:	239e      	movs	r3, #158	; 0x9e
   3305a:	1a1b      	subs	r3, r3, r0
   3305c:	2b96      	cmp	r3, #150	; 0x96
   3305e:	dc0d      	bgt.n	3307c <__aeabi_i2f+0x38>
   33060:	2296      	movs	r2, #150	; 0x96
   33062:	1ad2      	subs	r2, r2, r3
   33064:	4094      	lsls	r4, r2
   33066:	002a      	movs	r2, r5
   33068:	0264      	lsls	r4, r4, #9
   3306a:	0a64      	lsrs	r4, r4, #9
   3306c:	b2db      	uxtb	r3, r3
   3306e:	0264      	lsls	r4, r4, #9
   33070:	05db      	lsls	r3, r3, #23
   33072:	0a60      	lsrs	r0, r4, #9
   33074:	07d2      	lsls	r2, r2, #31
   33076:	4318      	orrs	r0, r3
   33078:	4310      	orrs	r0, r2
   3307a:	bd70      	pop	{r4, r5, r6, pc}
   3307c:	2b99      	cmp	r3, #153	; 0x99
   3307e:	dc19      	bgt.n	330b4 <__aeabi_i2f+0x70>
   33080:	2299      	movs	r2, #153	; 0x99
   33082:	1ad2      	subs	r2, r2, r3
   33084:	2a00      	cmp	r2, #0
   33086:	dd29      	ble.n	330dc <__aeabi_i2f+0x98>
   33088:	4094      	lsls	r4, r2
   3308a:	0022      	movs	r2, r4
   3308c:	4c14      	ldr	r4, [pc, #80]	; (330e0 <__aeabi_i2f+0x9c>)
   3308e:	4014      	ands	r4, r2
   33090:	0751      	lsls	r1, r2, #29
   33092:	d004      	beq.n	3309e <__aeabi_i2f+0x5a>
   33094:	210f      	movs	r1, #15
   33096:	400a      	ands	r2, r1
   33098:	2a04      	cmp	r2, #4
   3309a:	d000      	beq.n	3309e <__aeabi_i2f+0x5a>
   3309c:	3404      	adds	r4, #4
   3309e:	0162      	lsls	r2, r4, #5
   330a0:	d413      	bmi.n	330ca <__aeabi_i2f+0x86>
   330a2:	01a4      	lsls	r4, r4, #6
   330a4:	0a64      	lsrs	r4, r4, #9
   330a6:	b2db      	uxtb	r3, r3
   330a8:	002a      	movs	r2, r5
   330aa:	e7e0      	b.n	3306e <__aeabi_i2f+0x2a>
   330ac:	2200      	movs	r2, #0
   330ae:	2300      	movs	r3, #0
   330b0:	2400      	movs	r4, #0
   330b2:	e7dc      	b.n	3306e <__aeabi_i2f+0x2a>
   330b4:	2205      	movs	r2, #5
   330b6:	0021      	movs	r1, r4
   330b8:	1a12      	subs	r2, r2, r0
   330ba:	40d1      	lsrs	r1, r2
   330bc:	22b9      	movs	r2, #185	; 0xb9
   330be:	1ad2      	subs	r2, r2, r3
   330c0:	4094      	lsls	r4, r2
   330c2:	1e62      	subs	r2, r4, #1
   330c4:	4194      	sbcs	r4, r2
   330c6:	430c      	orrs	r4, r1
   330c8:	e7da      	b.n	33080 <__aeabi_i2f+0x3c>
   330ca:	4b05      	ldr	r3, [pc, #20]	; (330e0 <__aeabi_i2f+0x9c>)
   330cc:	002a      	movs	r2, r5
   330ce:	401c      	ands	r4, r3
   330d0:	239f      	movs	r3, #159	; 0x9f
   330d2:	01a4      	lsls	r4, r4, #6
   330d4:	1a1b      	subs	r3, r3, r0
   330d6:	0a64      	lsrs	r4, r4, #9
   330d8:	b2db      	uxtb	r3, r3
   330da:	e7c8      	b.n	3306e <__aeabi_i2f+0x2a>
   330dc:	0022      	movs	r2, r4
   330de:	e7d5      	b.n	3308c <__aeabi_i2f+0x48>
   330e0:	fbffffff 	.word	0xfbffffff

000330e4 <__aeabi_dadd>:
   330e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   330e6:	4645      	mov	r5, r8
   330e8:	46de      	mov	lr, fp
   330ea:	4657      	mov	r7, sl
   330ec:	464e      	mov	r6, r9
   330ee:	030c      	lsls	r4, r1, #12
   330f0:	b5e0      	push	{r5, r6, r7, lr}
   330f2:	004e      	lsls	r6, r1, #1
   330f4:	0fc9      	lsrs	r1, r1, #31
   330f6:	4688      	mov	r8, r1
   330f8:	000d      	movs	r5, r1
   330fa:	0a61      	lsrs	r1, r4, #9
   330fc:	0f44      	lsrs	r4, r0, #29
   330fe:	430c      	orrs	r4, r1
   33100:	00c7      	lsls	r7, r0, #3
   33102:	0319      	lsls	r1, r3, #12
   33104:	0058      	lsls	r0, r3, #1
   33106:	0fdb      	lsrs	r3, r3, #31
   33108:	469b      	mov	fp, r3
   3310a:	0a4b      	lsrs	r3, r1, #9
   3310c:	0f51      	lsrs	r1, r2, #29
   3310e:	430b      	orrs	r3, r1
   33110:	0d76      	lsrs	r6, r6, #21
   33112:	0d40      	lsrs	r0, r0, #21
   33114:	0019      	movs	r1, r3
   33116:	00d2      	lsls	r2, r2, #3
   33118:	45d8      	cmp	r8, fp
   3311a:	d100      	bne.n	3311e <__aeabi_dadd+0x3a>
   3311c:	e0ae      	b.n	3327c <__aeabi_dadd+0x198>
   3311e:	1a35      	subs	r5, r6, r0
   33120:	2d00      	cmp	r5, #0
   33122:	dc00      	bgt.n	33126 <__aeabi_dadd+0x42>
   33124:	e0f6      	b.n	33314 <__aeabi_dadd+0x230>
   33126:	2800      	cmp	r0, #0
   33128:	d10f      	bne.n	3314a <__aeabi_dadd+0x66>
   3312a:	4313      	orrs	r3, r2
   3312c:	d100      	bne.n	33130 <__aeabi_dadd+0x4c>
   3312e:	e0db      	b.n	332e8 <__aeabi_dadd+0x204>
   33130:	1e6b      	subs	r3, r5, #1
   33132:	2b00      	cmp	r3, #0
   33134:	d000      	beq.n	33138 <__aeabi_dadd+0x54>
   33136:	e137      	b.n	333a8 <__aeabi_dadd+0x2c4>
   33138:	1aba      	subs	r2, r7, r2
   3313a:	4297      	cmp	r7, r2
   3313c:	41bf      	sbcs	r7, r7
   3313e:	1a64      	subs	r4, r4, r1
   33140:	427f      	negs	r7, r7
   33142:	1be4      	subs	r4, r4, r7
   33144:	2601      	movs	r6, #1
   33146:	0017      	movs	r7, r2
   33148:	e024      	b.n	33194 <__aeabi_dadd+0xb0>
   3314a:	4bc6      	ldr	r3, [pc, #792]	; (33464 <__aeabi_dadd+0x380>)
   3314c:	429e      	cmp	r6, r3
   3314e:	d04d      	beq.n	331ec <__aeabi_dadd+0x108>
   33150:	2380      	movs	r3, #128	; 0x80
   33152:	041b      	lsls	r3, r3, #16
   33154:	4319      	orrs	r1, r3
   33156:	2d38      	cmp	r5, #56	; 0x38
   33158:	dd00      	ble.n	3315c <__aeabi_dadd+0x78>
   3315a:	e107      	b.n	3336c <__aeabi_dadd+0x288>
   3315c:	2d1f      	cmp	r5, #31
   3315e:	dd00      	ble.n	33162 <__aeabi_dadd+0x7e>
   33160:	e138      	b.n	333d4 <__aeabi_dadd+0x2f0>
   33162:	2020      	movs	r0, #32
   33164:	1b43      	subs	r3, r0, r5
   33166:	469a      	mov	sl, r3
   33168:	000b      	movs	r3, r1
   3316a:	4650      	mov	r0, sl
   3316c:	4083      	lsls	r3, r0
   3316e:	4699      	mov	r9, r3
   33170:	0013      	movs	r3, r2
   33172:	4648      	mov	r0, r9
   33174:	40eb      	lsrs	r3, r5
   33176:	4318      	orrs	r0, r3
   33178:	0003      	movs	r3, r0
   3317a:	4650      	mov	r0, sl
   3317c:	4082      	lsls	r2, r0
   3317e:	1e50      	subs	r0, r2, #1
   33180:	4182      	sbcs	r2, r0
   33182:	40e9      	lsrs	r1, r5
   33184:	431a      	orrs	r2, r3
   33186:	1aba      	subs	r2, r7, r2
   33188:	1a61      	subs	r1, r4, r1
   3318a:	4297      	cmp	r7, r2
   3318c:	41a4      	sbcs	r4, r4
   3318e:	0017      	movs	r7, r2
   33190:	4264      	negs	r4, r4
   33192:	1b0c      	subs	r4, r1, r4
   33194:	0223      	lsls	r3, r4, #8
   33196:	d562      	bpl.n	3325e <__aeabi_dadd+0x17a>
   33198:	0264      	lsls	r4, r4, #9
   3319a:	0a65      	lsrs	r5, r4, #9
   3319c:	2d00      	cmp	r5, #0
   3319e:	d100      	bne.n	331a2 <__aeabi_dadd+0xbe>
   331a0:	e0df      	b.n	33362 <__aeabi_dadd+0x27e>
   331a2:	0028      	movs	r0, r5
   331a4:	f001 fbe4 	bl	34970 <__clzsi2>
   331a8:	0003      	movs	r3, r0
   331aa:	3b08      	subs	r3, #8
   331ac:	2b1f      	cmp	r3, #31
   331ae:	dd00      	ble.n	331b2 <__aeabi_dadd+0xce>
   331b0:	e0d2      	b.n	33358 <__aeabi_dadd+0x274>
   331b2:	2220      	movs	r2, #32
   331b4:	003c      	movs	r4, r7
   331b6:	1ad2      	subs	r2, r2, r3
   331b8:	409d      	lsls	r5, r3
   331ba:	40d4      	lsrs	r4, r2
   331bc:	409f      	lsls	r7, r3
   331be:	4325      	orrs	r5, r4
   331c0:	429e      	cmp	r6, r3
   331c2:	dd00      	ble.n	331c6 <__aeabi_dadd+0xe2>
   331c4:	e0c4      	b.n	33350 <__aeabi_dadd+0x26c>
   331c6:	1b9e      	subs	r6, r3, r6
   331c8:	1c73      	adds	r3, r6, #1
   331ca:	2b1f      	cmp	r3, #31
   331cc:	dd00      	ble.n	331d0 <__aeabi_dadd+0xec>
   331ce:	e0f1      	b.n	333b4 <__aeabi_dadd+0x2d0>
   331d0:	2220      	movs	r2, #32
   331d2:	0038      	movs	r0, r7
   331d4:	0029      	movs	r1, r5
   331d6:	1ad2      	subs	r2, r2, r3
   331d8:	40d8      	lsrs	r0, r3
   331da:	4091      	lsls	r1, r2
   331dc:	4097      	lsls	r7, r2
   331de:	002c      	movs	r4, r5
   331e0:	4301      	orrs	r1, r0
   331e2:	1e78      	subs	r0, r7, #1
   331e4:	4187      	sbcs	r7, r0
   331e6:	40dc      	lsrs	r4, r3
   331e8:	2600      	movs	r6, #0
   331ea:	430f      	orrs	r7, r1
   331ec:	077b      	lsls	r3, r7, #29
   331ee:	d009      	beq.n	33204 <__aeabi_dadd+0x120>
   331f0:	230f      	movs	r3, #15
   331f2:	403b      	ands	r3, r7
   331f4:	2b04      	cmp	r3, #4
   331f6:	d005      	beq.n	33204 <__aeabi_dadd+0x120>
   331f8:	1d3b      	adds	r3, r7, #4
   331fa:	42bb      	cmp	r3, r7
   331fc:	41bf      	sbcs	r7, r7
   331fe:	427f      	negs	r7, r7
   33200:	19e4      	adds	r4, r4, r7
   33202:	001f      	movs	r7, r3
   33204:	0223      	lsls	r3, r4, #8
   33206:	d52c      	bpl.n	33262 <__aeabi_dadd+0x17e>
   33208:	4b96      	ldr	r3, [pc, #600]	; (33464 <__aeabi_dadd+0x380>)
   3320a:	3601      	adds	r6, #1
   3320c:	429e      	cmp	r6, r3
   3320e:	d100      	bne.n	33212 <__aeabi_dadd+0x12e>
   33210:	e09a      	b.n	33348 <__aeabi_dadd+0x264>
   33212:	4645      	mov	r5, r8
   33214:	4b94      	ldr	r3, [pc, #592]	; (33468 <__aeabi_dadd+0x384>)
   33216:	08ff      	lsrs	r7, r7, #3
   33218:	401c      	ands	r4, r3
   3321a:	0760      	lsls	r0, r4, #29
   3321c:	0576      	lsls	r6, r6, #21
   3321e:	0264      	lsls	r4, r4, #9
   33220:	4307      	orrs	r7, r0
   33222:	0b24      	lsrs	r4, r4, #12
   33224:	0d76      	lsrs	r6, r6, #21
   33226:	2100      	movs	r1, #0
   33228:	0324      	lsls	r4, r4, #12
   3322a:	0b23      	lsrs	r3, r4, #12
   3322c:	0d0c      	lsrs	r4, r1, #20
   3322e:	4a8f      	ldr	r2, [pc, #572]	; (3346c <__aeabi_dadd+0x388>)
   33230:	0524      	lsls	r4, r4, #20
   33232:	431c      	orrs	r4, r3
   33234:	4014      	ands	r4, r2
   33236:	0533      	lsls	r3, r6, #20
   33238:	4323      	orrs	r3, r4
   3323a:	005b      	lsls	r3, r3, #1
   3323c:	07ed      	lsls	r5, r5, #31
   3323e:	085b      	lsrs	r3, r3, #1
   33240:	432b      	orrs	r3, r5
   33242:	0038      	movs	r0, r7
   33244:	0019      	movs	r1, r3
   33246:	bc3c      	pop	{r2, r3, r4, r5}
   33248:	4690      	mov	r8, r2
   3324a:	4699      	mov	r9, r3
   3324c:	46a2      	mov	sl, r4
   3324e:	46ab      	mov	fp, r5
   33250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33252:	4664      	mov	r4, ip
   33254:	4304      	orrs	r4, r0
   33256:	d100      	bne.n	3325a <__aeabi_dadd+0x176>
   33258:	e211      	b.n	3367e <__aeabi_dadd+0x59a>
   3325a:	0004      	movs	r4, r0
   3325c:	4667      	mov	r7, ip
   3325e:	077b      	lsls	r3, r7, #29
   33260:	d1c6      	bne.n	331f0 <__aeabi_dadd+0x10c>
   33262:	4645      	mov	r5, r8
   33264:	0760      	lsls	r0, r4, #29
   33266:	08ff      	lsrs	r7, r7, #3
   33268:	4307      	orrs	r7, r0
   3326a:	08e4      	lsrs	r4, r4, #3
   3326c:	4b7d      	ldr	r3, [pc, #500]	; (33464 <__aeabi_dadd+0x380>)
   3326e:	429e      	cmp	r6, r3
   33270:	d030      	beq.n	332d4 <__aeabi_dadd+0x1f0>
   33272:	0324      	lsls	r4, r4, #12
   33274:	0576      	lsls	r6, r6, #21
   33276:	0b24      	lsrs	r4, r4, #12
   33278:	0d76      	lsrs	r6, r6, #21
   3327a:	e7d4      	b.n	33226 <__aeabi_dadd+0x142>
   3327c:	1a33      	subs	r3, r6, r0
   3327e:	469a      	mov	sl, r3
   33280:	2b00      	cmp	r3, #0
   33282:	dd78      	ble.n	33376 <__aeabi_dadd+0x292>
   33284:	2800      	cmp	r0, #0
   33286:	d031      	beq.n	332ec <__aeabi_dadd+0x208>
   33288:	4876      	ldr	r0, [pc, #472]	; (33464 <__aeabi_dadd+0x380>)
   3328a:	4286      	cmp	r6, r0
   3328c:	d0ae      	beq.n	331ec <__aeabi_dadd+0x108>
   3328e:	2080      	movs	r0, #128	; 0x80
   33290:	0400      	lsls	r0, r0, #16
   33292:	4301      	orrs	r1, r0
   33294:	4653      	mov	r3, sl
   33296:	2b38      	cmp	r3, #56	; 0x38
   33298:	dc00      	bgt.n	3329c <__aeabi_dadd+0x1b8>
   3329a:	e0e9      	b.n	33470 <__aeabi_dadd+0x38c>
   3329c:	430a      	orrs	r2, r1
   3329e:	1e51      	subs	r1, r2, #1
   332a0:	418a      	sbcs	r2, r1
   332a2:	2100      	movs	r1, #0
   332a4:	19d2      	adds	r2, r2, r7
   332a6:	42ba      	cmp	r2, r7
   332a8:	41bf      	sbcs	r7, r7
   332aa:	1909      	adds	r1, r1, r4
   332ac:	427c      	negs	r4, r7
   332ae:	0017      	movs	r7, r2
   332b0:	190c      	adds	r4, r1, r4
   332b2:	0223      	lsls	r3, r4, #8
   332b4:	d5d3      	bpl.n	3325e <__aeabi_dadd+0x17a>
   332b6:	4b6b      	ldr	r3, [pc, #428]	; (33464 <__aeabi_dadd+0x380>)
   332b8:	3601      	adds	r6, #1
   332ba:	429e      	cmp	r6, r3
   332bc:	d100      	bne.n	332c0 <__aeabi_dadd+0x1dc>
   332be:	e13a      	b.n	33536 <__aeabi_dadd+0x452>
   332c0:	2001      	movs	r0, #1
   332c2:	4b69      	ldr	r3, [pc, #420]	; (33468 <__aeabi_dadd+0x384>)
   332c4:	401c      	ands	r4, r3
   332c6:	087b      	lsrs	r3, r7, #1
   332c8:	4007      	ands	r7, r0
   332ca:	431f      	orrs	r7, r3
   332cc:	07e0      	lsls	r0, r4, #31
   332ce:	4307      	orrs	r7, r0
   332d0:	0864      	lsrs	r4, r4, #1
   332d2:	e78b      	b.n	331ec <__aeabi_dadd+0x108>
   332d4:	0023      	movs	r3, r4
   332d6:	433b      	orrs	r3, r7
   332d8:	d100      	bne.n	332dc <__aeabi_dadd+0x1f8>
   332da:	e1cb      	b.n	33674 <__aeabi_dadd+0x590>
   332dc:	2280      	movs	r2, #128	; 0x80
   332de:	0312      	lsls	r2, r2, #12
   332e0:	4314      	orrs	r4, r2
   332e2:	0324      	lsls	r4, r4, #12
   332e4:	0b24      	lsrs	r4, r4, #12
   332e6:	e79e      	b.n	33226 <__aeabi_dadd+0x142>
   332e8:	002e      	movs	r6, r5
   332ea:	e77f      	b.n	331ec <__aeabi_dadd+0x108>
   332ec:	0008      	movs	r0, r1
   332ee:	4310      	orrs	r0, r2
   332f0:	d100      	bne.n	332f4 <__aeabi_dadd+0x210>
   332f2:	e0b4      	b.n	3345e <__aeabi_dadd+0x37a>
   332f4:	1e58      	subs	r0, r3, #1
   332f6:	2800      	cmp	r0, #0
   332f8:	d000      	beq.n	332fc <__aeabi_dadd+0x218>
   332fa:	e0de      	b.n	334ba <__aeabi_dadd+0x3d6>
   332fc:	18ba      	adds	r2, r7, r2
   332fe:	42ba      	cmp	r2, r7
   33300:	419b      	sbcs	r3, r3
   33302:	1864      	adds	r4, r4, r1
   33304:	425b      	negs	r3, r3
   33306:	18e4      	adds	r4, r4, r3
   33308:	0017      	movs	r7, r2
   3330a:	2601      	movs	r6, #1
   3330c:	0223      	lsls	r3, r4, #8
   3330e:	d5a6      	bpl.n	3325e <__aeabi_dadd+0x17a>
   33310:	2602      	movs	r6, #2
   33312:	e7d5      	b.n	332c0 <__aeabi_dadd+0x1dc>
   33314:	2d00      	cmp	r5, #0
   33316:	d16e      	bne.n	333f6 <__aeabi_dadd+0x312>
   33318:	1c70      	adds	r0, r6, #1
   3331a:	0540      	lsls	r0, r0, #21
   3331c:	0d40      	lsrs	r0, r0, #21
   3331e:	2801      	cmp	r0, #1
   33320:	dc00      	bgt.n	33324 <__aeabi_dadd+0x240>
   33322:	e0f9      	b.n	33518 <__aeabi_dadd+0x434>
   33324:	1ab8      	subs	r0, r7, r2
   33326:	4684      	mov	ip, r0
   33328:	4287      	cmp	r7, r0
   3332a:	4180      	sbcs	r0, r0
   3332c:	1ae5      	subs	r5, r4, r3
   3332e:	4240      	negs	r0, r0
   33330:	1a2d      	subs	r5, r5, r0
   33332:	0228      	lsls	r0, r5, #8
   33334:	d400      	bmi.n	33338 <__aeabi_dadd+0x254>
   33336:	e089      	b.n	3344c <__aeabi_dadd+0x368>
   33338:	1bd7      	subs	r7, r2, r7
   3333a:	42ba      	cmp	r2, r7
   3333c:	4192      	sbcs	r2, r2
   3333e:	1b1c      	subs	r4, r3, r4
   33340:	4252      	negs	r2, r2
   33342:	1aa5      	subs	r5, r4, r2
   33344:	46d8      	mov	r8, fp
   33346:	e729      	b.n	3319c <__aeabi_dadd+0xb8>
   33348:	4645      	mov	r5, r8
   3334a:	2400      	movs	r4, #0
   3334c:	2700      	movs	r7, #0
   3334e:	e76a      	b.n	33226 <__aeabi_dadd+0x142>
   33350:	4c45      	ldr	r4, [pc, #276]	; (33468 <__aeabi_dadd+0x384>)
   33352:	1af6      	subs	r6, r6, r3
   33354:	402c      	ands	r4, r5
   33356:	e749      	b.n	331ec <__aeabi_dadd+0x108>
   33358:	003d      	movs	r5, r7
   3335a:	3828      	subs	r0, #40	; 0x28
   3335c:	4085      	lsls	r5, r0
   3335e:	2700      	movs	r7, #0
   33360:	e72e      	b.n	331c0 <__aeabi_dadd+0xdc>
   33362:	0038      	movs	r0, r7
   33364:	f001 fb04 	bl	34970 <__clzsi2>
   33368:	3020      	adds	r0, #32
   3336a:	e71d      	b.n	331a8 <__aeabi_dadd+0xc4>
   3336c:	430a      	orrs	r2, r1
   3336e:	1e51      	subs	r1, r2, #1
   33370:	418a      	sbcs	r2, r1
   33372:	2100      	movs	r1, #0
   33374:	e707      	b.n	33186 <__aeabi_dadd+0xa2>
   33376:	2b00      	cmp	r3, #0
   33378:	d000      	beq.n	3337c <__aeabi_dadd+0x298>
   3337a:	e0f3      	b.n	33564 <__aeabi_dadd+0x480>
   3337c:	1c70      	adds	r0, r6, #1
   3337e:	0543      	lsls	r3, r0, #21
   33380:	0d5b      	lsrs	r3, r3, #21
   33382:	2b01      	cmp	r3, #1
   33384:	dc00      	bgt.n	33388 <__aeabi_dadd+0x2a4>
   33386:	e0ad      	b.n	334e4 <__aeabi_dadd+0x400>
   33388:	4b36      	ldr	r3, [pc, #216]	; (33464 <__aeabi_dadd+0x380>)
   3338a:	4298      	cmp	r0, r3
   3338c:	d100      	bne.n	33390 <__aeabi_dadd+0x2ac>
   3338e:	e0d1      	b.n	33534 <__aeabi_dadd+0x450>
   33390:	18ba      	adds	r2, r7, r2
   33392:	42ba      	cmp	r2, r7
   33394:	41bf      	sbcs	r7, r7
   33396:	1864      	adds	r4, r4, r1
   33398:	427f      	negs	r7, r7
   3339a:	19e4      	adds	r4, r4, r7
   3339c:	07e7      	lsls	r7, r4, #31
   3339e:	0852      	lsrs	r2, r2, #1
   333a0:	4317      	orrs	r7, r2
   333a2:	0864      	lsrs	r4, r4, #1
   333a4:	0006      	movs	r6, r0
   333a6:	e721      	b.n	331ec <__aeabi_dadd+0x108>
   333a8:	482e      	ldr	r0, [pc, #184]	; (33464 <__aeabi_dadd+0x380>)
   333aa:	4285      	cmp	r5, r0
   333ac:	d100      	bne.n	333b0 <__aeabi_dadd+0x2cc>
   333ae:	e093      	b.n	334d8 <__aeabi_dadd+0x3f4>
   333b0:	001d      	movs	r5, r3
   333b2:	e6d0      	b.n	33156 <__aeabi_dadd+0x72>
   333b4:	0029      	movs	r1, r5
   333b6:	3e1f      	subs	r6, #31
   333b8:	40f1      	lsrs	r1, r6
   333ba:	2b20      	cmp	r3, #32
   333bc:	d100      	bne.n	333c0 <__aeabi_dadd+0x2dc>
   333be:	e08d      	b.n	334dc <__aeabi_dadd+0x3f8>
   333c0:	2240      	movs	r2, #64	; 0x40
   333c2:	1ad3      	subs	r3, r2, r3
   333c4:	409d      	lsls	r5, r3
   333c6:	432f      	orrs	r7, r5
   333c8:	1e7d      	subs	r5, r7, #1
   333ca:	41af      	sbcs	r7, r5
   333cc:	2400      	movs	r4, #0
   333ce:	430f      	orrs	r7, r1
   333d0:	2600      	movs	r6, #0
   333d2:	e744      	b.n	3325e <__aeabi_dadd+0x17a>
   333d4:	002b      	movs	r3, r5
   333d6:	0008      	movs	r0, r1
   333d8:	3b20      	subs	r3, #32
   333da:	40d8      	lsrs	r0, r3
   333dc:	0003      	movs	r3, r0
   333de:	2d20      	cmp	r5, #32
   333e0:	d100      	bne.n	333e4 <__aeabi_dadd+0x300>
   333e2:	e07d      	b.n	334e0 <__aeabi_dadd+0x3fc>
   333e4:	2040      	movs	r0, #64	; 0x40
   333e6:	1b45      	subs	r5, r0, r5
   333e8:	40a9      	lsls	r1, r5
   333ea:	430a      	orrs	r2, r1
   333ec:	1e51      	subs	r1, r2, #1
   333ee:	418a      	sbcs	r2, r1
   333f0:	2100      	movs	r1, #0
   333f2:	431a      	orrs	r2, r3
   333f4:	e6c7      	b.n	33186 <__aeabi_dadd+0xa2>
   333f6:	2e00      	cmp	r6, #0
   333f8:	d050      	beq.n	3349c <__aeabi_dadd+0x3b8>
   333fa:	4e1a      	ldr	r6, [pc, #104]	; (33464 <__aeabi_dadd+0x380>)
   333fc:	42b0      	cmp	r0, r6
   333fe:	d057      	beq.n	334b0 <__aeabi_dadd+0x3cc>
   33400:	2680      	movs	r6, #128	; 0x80
   33402:	426b      	negs	r3, r5
   33404:	4699      	mov	r9, r3
   33406:	0436      	lsls	r6, r6, #16
   33408:	4334      	orrs	r4, r6
   3340a:	464b      	mov	r3, r9
   3340c:	2b38      	cmp	r3, #56	; 0x38
   3340e:	dd00      	ble.n	33412 <__aeabi_dadd+0x32e>
   33410:	e0d6      	b.n	335c0 <__aeabi_dadd+0x4dc>
   33412:	2b1f      	cmp	r3, #31
   33414:	dd00      	ble.n	33418 <__aeabi_dadd+0x334>
   33416:	e135      	b.n	33684 <__aeabi_dadd+0x5a0>
   33418:	2620      	movs	r6, #32
   3341a:	1af5      	subs	r5, r6, r3
   3341c:	0026      	movs	r6, r4
   3341e:	40ae      	lsls	r6, r5
   33420:	46b2      	mov	sl, r6
   33422:	003e      	movs	r6, r7
   33424:	40de      	lsrs	r6, r3
   33426:	46ac      	mov	ip, r5
   33428:	0035      	movs	r5, r6
   3342a:	4656      	mov	r6, sl
   3342c:	432e      	orrs	r6, r5
   3342e:	4665      	mov	r5, ip
   33430:	40af      	lsls	r7, r5
   33432:	1e7d      	subs	r5, r7, #1
   33434:	41af      	sbcs	r7, r5
   33436:	40dc      	lsrs	r4, r3
   33438:	4337      	orrs	r7, r6
   3343a:	1bd7      	subs	r7, r2, r7
   3343c:	42ba      	cmp	r2, r7
   3343e:	4192      	sbcs	r2, r2
   33440:	1b0c      	subs	r4, r1, r4
   33442:	4252      	negs	r2, r2
   33444:	1aa4      	subs	r4, r4, r2
   33446:	0006      	movs	r6, r0
   33448:	46d8      	mov	r8, fp
   3344a:	e6a3      	b.n	33194 <__aeabi_dadd+0xb0>
   3344c:	4664      	mov	r4, ip
   3344e:	4667      	mov	r7, ip
   33450:	432c      	orrs	r4, r5
   33452:	d000      	beq.n	33456 <__aeabi_dadd+0x372>
   33454:	e6a2      	b.n	3319c <__aeabi_dadd+0xb8>
   33456:	2500      	movs	r5, #0
   33458:	2600      	movs	r6, #0
   3345a:	2700      	movs	r7, #0
   3345c:	e706      	b.n	3326c <__aeabi_dadd+0x188>
   3345e:	001e      	movs	r6, r3
   33460:	e6c4      	b.n	331ec <__aeabi_dadd+0x108>
   33462:	46c0      	nop			; (mov r8, r8)
   33464:	000007ff 	.word	0x000007ff
   33468:	ff7fffff 	.word	0xff7fffff
   3346c:	800fffff 	.word	0x800fffff
   33470:	2b1f      	cmp	r3, #31
   33472:	dc63      	bgt.n	3353c <__aeabi_dadd+0x458>
   33474:	2020      	movs	r0, #32
   33476:	1ac3      	subs	r3, r0, r3
   33478:	0008      	movs	r0, r1
   3347a:	4098      	lsls	r0, r3
   3347c:	469c      	mov	ip, r3
   3347e:	4683      	mov	fp, r0
   33480:	4653      	mov	r3, sl
   33482:	0010      	movs	r0, r2
   33484:	40d8      	lsrs	r0, r3
   33486:	0003      	movs	r3, r0
   33488:	4658      	mov	r0, fp
   3348a:	4318      	orrs	r0, r3
   3348c:	4663      	mov	r3, ip
   3348e:	409a      	lsls	r2, r3
   33490:	1e53      	subs	r3, r2, #1
   33492:	419a      	sbcs	r2, r3
   33494:	4653      	mov	r3, sl
   33496:	4302      	orrs	r2, r0
   33498:	40d9      	lsrs	r1, r3
   3349a:	e703      	b.n	332a4 <__aeabi_dadd+0x1c0>
   3349c:	0026      	movs	r6, r4
   3349e:	433e      	orrs	r6, r7
   334a0:	d006      	beq.n	334b0 <__aeabi_dadd+0x3cc>
   334a2:	43eb      	mvns	r3, r5
   334a4:	4699      	mov	r9, r3
   334a6:	2b00      	cmp	r3, #0
   334a8:	d0c7      	beq.n	3343a <__aeabi_dadd+0x356>
   334aa:	4e94      	ldr	r6, [pc, #592]	; (336fc <__aeabi_dadd+0x618>)
   334ac:	42b0      	cmp	r0, r6
   334ae:	d1ac      	bne.n	3340a <__aeabi_dadd+0x326>
   334b0:	000c      	movs	r4, r1
   334b2:	0017      	movs	r7, r2
   334b4:	0006      	movs	r6, r0
   334b6:	46d8      	mov	r8, fp
   334b8:	e698      	b.n	331ec <__aeabi_dadd+0x108>
   334ba:	4b90      	ldr	r3, [pc, #576]	; (336fc <__aeabi_dadd+0x618>)
   334bc:	459a      	cmp	sl, r3
   334be:	d00b      	beq.n	334d8 <__aeabi_dadd+0x3f4>
   334c0:	4682      	mov	sl, r0
   334c2:	e6e7      	b.n	33294 <__aeabi_dadd+0x1b0>
   334c4:	2800      	cmp	r0, #0
   334c6:	d000      	beq.n	334ca <__aeabi_dadd+0x3e6>
   334c8:	e09e      	b.n	33608 <__aeabi_dadd+0x524>
   334ca:	0018      	movs	r0, r3
   334cc:	4310      	orrs	r0, r2
   334ce:	d100      	bne.n	334d2 <__aeabi_dadd+0x3ee>
   334d0:	e0e9      	b.n	336a6 <__aeabi_dadd+0x5c2>
   334d2:	001c      	movs	r4, r3
   334d4:	0017      	movs	r7, r2
   334d6:	46d8      	mov	r8, fp
   334d8:	4e88      	ldr	r6, [pc, #544]	; (336fc <__aeabi_dadd+0x618>)
   334da:	e687      	b.n	331ec <__aeabi_dadd+0x108>
   334dc:	2500      	movs	r5, #0
   334de:	e772      	b.n	333c6 <__aeabi_dadd+0x2e2>
   334e0:	2100      	movs	r1, #0
   334e2:	e782      	b.n	333ea <__aeabi_dadd+0x306>
   334e4:	0023      	movs	r3, r4
   334e6:	433b      	orrs	r3, r7
   334e8:	2e00      	cmp	r6, #0
   334ea:	d000      	beq.n	334ee <__aeabi_dadd+0x40a>
   334ec:	e0ab      	b.n	33646 <__aeabi_dadd+0x562>
   334ee:	2b00      	cmp	r3, #0
   334f0:	d100      	bne.n	334f4 <__aeabi_dadd+0x410>
   334f2:	e0e7      	b.n	336c4 <__aeabi_dadd+0x5e0>
   334f4:	000b      	movs	r3, r1
   334f6:	4313      	orrs	r3, r2
   334f8:	d100      	bne.n	334fc <__aeabi_dadd+0x418>
   334fa:	e677      	b.n	331ec <__aeabi_dadd+0x108>
   334fc:	18ba      	adds	r2, r7, r2
   334fe:	42ba      	cmp	r2, r7
   33500:	41bf      	sbcs	r7, r7
   33502:	1864      	adds	r4, r4, r1
   33504:	427f      	negs	r7, r7
   33506:	19e4      	adds	r4, r4, r7
   33508:	0223      	lsls	r3, r4, #8
   3350a:	d400      	bmi.n	3350e <__aeabi_dadd+0x42a>
   3350c:	e0f2      	b.n	336f4 <__aeabi_dadd+0x610>
   3350e:	4b7c      	ldr	r3, [pc, #496]	; (33700 <__aeabi_dadd+0x61c>)
   33510:	0017      	movs	r7, r2
   33512:	401c      	ands	r4, r3
   33514:	0006      	movs	r6, r0
   33516:	e669      	b.n	331ec <__aeabi_dadd+0x108>
   33518:	0020      	movs	r0, r4
   3351a:	4338      	orrs	r0, r7
   3351c:	2e00      	cmp	r6, #0
   3351e:	d1d1      	bne.n	334c4 <__aeabi_dadd+0x3e0>
   33520:	2800      	cmp	r0, #0
   33522:	d15b      	bne.n	335dc <__aeabi_dadd+0x4f8>
   33524:	001c      	movs	r4, r3
   33526:	4314      	orrs	r4, r2
   33528:	d100      	bne.n	3352c <__aeabi_dadd+0x448>
   3352a:	e0a8      	b.n	3367e <__aeabi_dadd+0x59a>
   3352c:	001c      	movs	r4, r3
   3352e:	0017      	movs	r7, r2
   33530:	46d8      	mov	r8, fp
   33532:	e65b      	b.n	331ec <__aeabi_dadd+0x108>
   33534:	0006      	movs	r6, r0
   33536:	2400      	movs	r4, #0
   33538:	2700      	movs	r7, #0
   3353a:	e697      	b.n	3326c <__aeabi_dadd+0x188>
   3353c:	4650      	mov	r0, sl
   3353e:	000b      	movs	r3, r1
   33540:	3820      	subs	r0, #32
   33542:	40c3      	lsrs	r3, r0
   33544:	4699      	mov	r9, r3
   33546:	4653      	mov	r3, sl
   33548:	2b20      	cmp	r3, #32
   3354a:	d100      	bne.n	3354e <__aeabi_dadd+0x46a>
   3354c:	e095      	b.n	3367a <__aeabi_dadd+0x596>
   3354e:	2340      	movs	r3, #64	; 0x40
   33550:	4650      	mov	r0, sl
   33552:	1a1b      	subs	r3, r3, r0
   33554:	4099      	lsls	r1, r3
   33556:	430a      	orrs	r2, r1
   33558:	1e51      	subs	r1, r2, #1
   3355a:	418a      	sbcs	r2, r1
   3355c:	464b      	mov	r3, r9
   3355e:	2100      	movs	r1, #0
   33560:	431a      	orrs	r2, r3
   33562:	e69f      	b.n	332a4 <__aeabi_dadd+0x1c0>
   33564:	2e00      	cmp	r6, #0
   33566:	d130      	bne.n	335ca <__aeabi_dadd+0x4e6>
   33568:	0026      	movs	r6, r4
   3356a:	433e      	orrs	r6, r7
   3356c:	d067      	beq.n	3363e <__aeabi_dadd+0x55a>
   3356e:	43db      	mvns	r3, r3
   33570:	469a      	mov	sl, r3
   33572:	2b00      	cmp	r3, #0
   33574:	d01c      	beq.n	335b0 <__aeabi_dadd+0x4cc>
   33576:	4e61      	ldr	r6, [pc, #388]	; (336fc <__aeabi_dadd+0x618>)
   33578:	42b0      	cmp	r0, r6
   3357a:	d060      	beq.n	3363e <__aeabi_dadd+0x55a>
   3357c:	4653      	mov	r3, sl
   3357e:	2b38      	cmp	r3, #56	; 0x38
   33580:	dd00      	ble.n	33584 <__aeabi_dadd+0x4a0>
   33582:	e096      	b.n	336b2 <__aeabi_dadd+0x5ce>
   33584:	2b1f      	cmp	r3, #31
   33586:	dd00      	ble.n	3358a <__aeabi_dadd+0x4a6>
   33588:	e09f      	b.n	336ca <__aeabi_dadd+0x5e6>
   3358a:	2620      	movs	r6, #32
   3358c:	1af3      	subs	r3, r6, r3
   3358e:	0026      	movs	r6, r4
   33590:	409e      	lsls	r6, r3
   33592:	469c      	mov	ip, r3
   33594:	46b3      	mov	fp, r6
   33596:	4653      	mov	r3, sl
   33598:	003e      	movs	r6, r7
   3359a:	40de      	lsrs	r6, r3
   3359c:	0033      	movs	r3, r6
   3359e:	465e      	mov	r6, fp
   335a0:	431e      	orrs	r6, r3
   335a2:	4663      	mov	r3, ip
   335a4:	409f      	lsls	r7, r3
   335a6:	1e7b      	subs	r3, r7, #1
   335a8:	419f      	sbcs	r7, r3
   335aa:	4653      	mov	r3, sl
   335ac:	40dc      	lsrs	r4, r3
   335ae:	4337      	orrs	r7, r6
   335b0:	18bf      	adds	r7, r7, r2
   335b2:	4297      	cmp	r7, r2
   335b4:	4192      	sbcs	r2, r2
   335b6:	1864      	adds	r4, r4, r1
   335b8:	4252      	negs	r2, r2
   335ba:	18a4      	adds	r4, r4, r2
   335bc:	0006      	movs	r6, r0
   335be:	e678      	b.n	332b2 <__aeabi_dadd+0x1ce>
   335c0:	4327      	orrs	r7, r4
   335c2:	1e7c      	subs	r4, r7, #1
   335c4:	41a7      	sbcs	r7, r4
   335c6:	2400      	movs	r4, #0
   335c8:	e737      	b.n	3343a <__aeabi_dadd+0x356>
   335ca:	4e4c      	ldr	r6, [pc, #304]	; (336fc <__aeabi_dadd+0x618>)
   335cc:	42b0      	cmp	r0, r6
   335ce:	d036      	beq.n	3363e <__aeabi_dadd+0x55a>
   335d0:	2680      	movs	r6, #128	; 0x80
   335d2:	425b      	negs	r3, r3
   335d4:	0436      	lsls	r6, r6, #16
   335d6:	469a      	mov	sl, r3
   335d8:	4334      	orrs	r4, r6
   335da:	e7cf      	b.n	3357c <__aeabi_dadd+0x498>
   335dc:	0018      	movs	r0, r3
   335de:	4310      	orrs	r0, r2
   335e0:	d100      	bne.n	335e4 <__aeabi_dadd+0x500>
   335e2:	e603      	b.n	331ec <__aeabi_dadd+0x108>
   335e4:	1ab8      	subs	r0, r7, r2
   335e6:	4684      	mov	ip, r0
   335e8:	4567      	cmp	r7, ip
   335ea:	41ad      	sbcs	r5, r5
   335ec:	1ae0      	subs	r0, r4, r3
   335ee:	426d      	negs	r5, r5
   335f0:	1b40      	subs	r0, r0, r5
   335f2:	0205      	lsls	r5, r0, #8
   335f4:	d400      	bmi.n	335f8 <__aeabi_dadd+0x514>
   335f6:	e62c      	b.n	33252 <__aeabi_dadd+0x16e>
   335f8:	1bd7      	subs	r7, r2, r7
   335fa:	42ba      	cmp	r2, r7
   335fc:	4192      	sbcs	r2, r2
   335fe:	1b1c      	subs	r4, r3, r4
   33600:	4252      	negs	r2, r2
   33602:	1aa4      	subs	r4, r4, r2
   33604:	46d8      	mov	r8, fp
   33606:	e5f1      	b.n	331ec <__aeabi_dadd+0x108>
   33608:	0018      	movs	r0, r3
   3360a:	4310      	orrs	r0, r2
   3360c:	d100      	bne.n	33610 <__aeabi_dadd+0x52c>
   3360e:	e763      	b.n	334d8 <__aeabi_dadd+0x3f4>
   33610:	08f8      	lsrs	r0, r7, #3
   33612:	0767      	lsls	r7, r4, #29
   33614:	4307      	orrs	r7, r0
   33616:	2080      	movs	r0, #128	; 0x80
   33618:	08e4      	lsrs	r4, r4, #3
   3361a:	0300      	lsls	r0, r0, #12
   3361c:	4204      	tst	r4, r0
   3361e:	d008      	beq.n	33632 <__aeabi_dadd+0x54e>
   33620:	08dd      	lsrs	r5, r3, #3
   33622:	4205      	tst	r5, r0
   33624:	d105      	bne.n	33632 <__aeabi_dadd+0x54e>
   33626:	08d2      	lsrs	r2, r2, #3
   33628:	0759      	lsls	r1, r3, #29
   3362a:	4311      	orrs	r1, r2
   3362c:	000f      	movs	r7, r1
   3362e:	002c      	movs	r4, r5
   33630:	46d8      	mov	r8, fp
   33632:	0f7b      	lsrs	r3, r7, #29
   33634:	00e4      	lsls	r4, r4, #3
   33636:	431c      	orrs	r4, r3
   33638:	00ff      	lsls	r7, r7, #3
   3363a:	4e30      	ldr	r6, [pc, #192]	; (336fc <__aeabi_dadd+0x618>)
   3363c:	e5d6      	b.n	331ec <__aeabi_dadd+0x108>
   3363e:	000c      	movs	r4, r1
   33640:	0017      	movs	r7, r2
   33642:	0006      	movs	r6, r0
   33644:	e5d2      	b.n	331ec <__aeabi_dadd+0x108>
   33646:	2b00      	cmp	r3, #0
   33648:	d038      	beq.n	336bc <__aeabi_dadd+0x5d8>
   3364a:	000b      	movs	r3, r1
   3364c:	4313      	orrs	r3, r2
   3364e:	d100      	bne.n	33652 <__aeabi_dadd+0x56e>
   33650:	e742      	b.n	334d8 <__aeabi_dadd+0x3f4>
   33652:	08f8      	lsrs	r0, r7, #3
   33654:	0767      	lsls	r7, r4, #29
   33656:	4307      	orrs	r7, r0
   33658:	2080      	movs	r0, #128	; 0x80
   3365a:	08e4      	lsrs	r4, r4, #3
   3365c:	0300      	lsls	r0, r0, #12
   3365e:	4204      	tst	r4, r0
   33660:	d0e7      	beq.n	33632 <__aeabi_dadd+0x54e>
   33662:	08cb      	lsrs	r3, r1, #3
   33664:	4203      	tst	r3, r0
   33666:	d1e4      	bne.n	33632 <__aeabi_dadd+0x54e>
   33668:	08d2      	lsrs	r2, r2, #3
   3366a:	0749      	lsls	r1, r1, #29
   3366c:	4311      	orrs	r1, r2
   3366e:	000f      	movs	r7, r1
   33670:	001c      	movs	r4, r3
   33672:	e7de      	b.n	33632 <__aeabi_dadd+0x54e>
   33674:	2700      	movs	r7, #0
   33676:	2400      	movs	r4, #0
   33678:	e5d5      	b.n	33226 <__aeabi_dadd+0x142>
   3367a:	2100      	movs	r1, #0
   3367c:	e76b      	b.n	33556 <__aeabi_dadd+0x472>
   3367e:	2500      	movs	r5, #0
   33680:	2700      	movs	r7, #0
   33682:	e5f3      	b.n	3326c <__aeabi_dadd+0x188>
   33684:	464e      	mov	r6, r9
   33686:	0025      	movs	r5, r4
   33688:	3e20      	subs	r6, #32
   3368a:	40f5      	lsrs	r5, r6
   3368c:	464b      	mov	r3, r9
   3368e:	002e      	movs	r6, r5
   33690:	2b20      	cmp	r3, #32
   33692:	d02d      	beq.n	336f0 <__aeabi_dadd+0x60c>
   33694:	2540      	movs	r5, #64	; 0x40
   33696:	1aed      	subs	r5, r5, r3
   33698:	40ac      	lsls	r4, r5
   3369a:	4327      	orrs	r7, r4
   3369c:	1e7c      	subs	r4, r7, #1
   3369e:	41a7      	sbcs	r7, r4
   336a0:	2400      	movs	r4, #0
   336a2:	4337      	orrs	r7, r6
   336a4:	e6c9      	b.n	3343a <__aeabi_dadd+0x356>
   336a6:	2480      	movs	r4, #128	; 0x80
   336a8:	2500      	movs	r5, #0
   336aa:	0324      	lsls	r4, r4, #12
   336ac:	4e13      	ldr	r6, [pc, #76]	; (336fc <__aeabi_dadd+0x618>)
   336ae:	2700      	movs	r7, #0
   336b0:	e5dc      	b.n	3326c <__aeabi_dadd+0x188>
   336b2:	4327      	orrs	r7, r4
   336b4:	1e7c      	subs	r4, r7, #1
   336b6:	41a7      	sbcs	r7, r4
   336b8:	2400      	movs	r4, #0
   336ba:	e779      	b.n	335b0 <__aeabi_dadd+0x4cc>
   336bc:	000c      	movs	r4, r1
   336be:	0017      	movs	r7, r2
   336c0:	4e0e      	ldr	r6, [pc, #56]	; (336fc <__aeabi_dadd+0x618>)
   336c2:	e593      	b.n	331ec <__aeabi_dadd+0x108>
   336c4:	000c      	movs	r4, r1
   336c6:	0017      	movs	r7, r2
   336c8:	e590      	b.n	331ec <__aeabi_dadd+0x108>
   336ca:	4656      	mov	r6, sl
   336cc:	0023      	movs	r3, r4
   336ce:	3e20      	subs	r6, #32
   336d0:	40f3      	lsrs	r3, r6
   336d2:	4699      	mov	r9, r3
   336d4:	4653      	mov	r3, sl
   336d6:	2b20      	cmp	r3, #32
   336d8:	d00e      	beq.n	336f8 <__aeabi_dadd+0x614>
   336da:	2340      	movs	r3, #64	; 0x40
   336dc:	4656      	mov	r6, sl
   336de:	1b9b      	subs	r3, r3, r6
   336e0:	409c      	lsls	r4, r3
   336e2:	4327      	orrs	r7, r4
   336e4:	1e7c      	subs	r4, r7, #1
   336e6:	41a7      	sbcs	r7, r4
   336e8:	464b      	mov	r3, r9
   336ea:	2400      	movs	r4, #0
   336ec:	431f      	orrs	r7, r3
   336ee:	e75f      	b.n	335b0 <__aeabi_dadd+0x4cc>
   336f0:	2400      	movs	r4, #0
   336f2:	e7d2      	b.n	3369a <__aeabi_dadd+0x5b6>
   336f4:	0017      	movs	r7, r2
   336f6:	e5b2      	b.n	3325e <__aeabi_dadd+0x17a>
   336f8:	2400      	movs	r4, #0
   336fa:	e7f2      	b.n	336e2 <__aeabi_dadd+0x5fe>
   336fc:	000007ff 	.word	0x000007ff
   33700:	ff7fffff 	.word	0xff7fffff

00033704 <__aeabi_ddiv>:
   33704:	b5f0      	push	{r4, r5, r6, r7, lr}
   33706:	4657      	mov	r7, sl
   33708:	4645      	mov	r5, r8
   3370a:	46de      	mov	lr, fp
   3370c:	464e      	mov	r6, r9
   3370e:	b5e0      	push	{r5, r6, r7, lr}
   33710:	004c      	lsls	r4, r1, #1
   33712:	030e      	lsls	r6, r1, #12
   33714:	b087      	sub	sp, #28
   33716:	4683      	mov	fp, r0
   33718:	4692      	mov	sl, r2
   3371a:	001d      	movs	r5, r3
   3371c:	4680      	mov	r8, r0
   3371e:	0b36      	lsrs	r6, r6, #12
   33720:	0d64      	lsrs	r4, r4, #21
   33722:	0fcf      	lsrs	r7, r1, #31
   33724:	2c00      	cmp	r4, #0
   33726:	d04f      	beq.n	337c8 <__aeabi_ddiv+0xc4>
   33728:	4b6f      	ldr	r3, [pc, #444]	; (338e8 <__aeabi_ddiv+0x1e4>)
   3372a:	429c      	cmp	r4, r3
   3372c:	d035      	beq.n	3379a <__aeabi_ddiv+0x96>
   3372e:	2380      	movs	r3, #128	; 0x80
   33730:	0f42      	lsrs	r2, r0, #29
   33732:	041b      	lsls	r3, r3, #16
   33734:	00f6      	lsls	r6, r6, #3
   33736:	4313      	orrs	r3, r2
   33738:	4333      	orrs	r3, r6
   3373a:	4699      	mov	r9, r3
   3373c:	00c3      	lsls	r3, r0, #3
   3373e:	4698      	mov	r8, r3
   33740:	4b6a      	ldr	r3, [pc, #424]	; (338ec <__aeabi_ddiv+0x1e8>)
   33742:	2600      	movs	r6, #0
   33744:	469c      	mov	ip, r3
   33746:	2300      	movs	r3, #0
   33748:	4464      	add	r4, ip
   3374a:	9303      	str	r3, [sp, #12]
   3374c:	032b      	lsls	r3, r5, #12
   3374e:	0b1b      	lsrs	r3, r3, #12
   33750:	469b      	mov	fp, r3
   33752:	006b      	lsls	r3, r5, #1
   33754:	0fed      	lsrs	r5, r5, #31
   33756:	4650      	mov	r0, sl
   33758:	0d5b      	lsrs	r3, r3, #21
   3375a:	9501      	str	r5, [sp, #4]
   3375c:	d05e      	beq.n	3381c <__aeabi_ddiv+0x118>
   3375e:	4a62      	ldr	r2, [pc, #392]	; (338e8 <__aeabi_ddiv+0x1e4>)
   33760:	4293      	cmp	r3, r2
   33762:	d053      	beq.n	3380c <__aeabi_ddiv+0x108>
   33764:	465a      	mov	r2, fp
   33766:	00d1      	lsls	r1, r2, #3
   33768:	2280      	movs	r2, #128	; 0x80
   3376a:	0f40      	lsrs	r0, r0, #29
   3376c:	0412      	lsls	r2, r2, #16
   3376e:	4302      	orrs	r2, r0
   33770:	430a      	orrs	r2, r1
   33772:	4693      	mov	fp, r2
   33774:	4652      	mov	r2, sl
   33776:	00d1      	lsls	r1, r2, #3
   33778:	4a5c      	ldr	r2, [pc, #368]	; (338ec <__aeabi_ddiv+0x1e8>)
   3377a:	4694      	mov	ip, r2
   3377c:	2200      	movs	r2, #0
   3377e:	4463      	add	r3, ip
   33780:	0038      	movs	r0, r7
   33782:	4068      	eors	r0, r5
   33784:	4684      	mov	ip, r0
   33786:	9002      	str	r0, [sp, #8]
   33788:	1ae4      	subs	r4, r4, r3
   3378a:	4316      	orrs	r6, r2
   3378c:	2e0f      	cmp	r6, #15
   3378e:	d900      	bls.n	33792 <__aeabi_ddiv+0x8e>
   33790:	e0b4      	b.n	338fc <__aeabi_ddiv+0x1f8>
   33792:	4b57      	ldr	r3, [pc, #348]	; (338f0 <__aeabi_ddiv+0x1ec>)
   33794:	00b6      	lsls	r6, r6, #2
   33796:	599b      	ldr	r3, [r3, r6]
   33798:	469f      	mov	pc, r3
   3379a:	0003      	movs	r3, r0
   3379c:	4333      	orrs	r3, r6
   3379e:	4699      	mov	r9, r3
   337a0:	d16c      	bne.n	3387c <__aeabi_ddiv+0x178>
   337a2:	2300      	movs	r3, #0
   337a4:	4698      	mov	r8, r3
   337a6:	3302      	adds	r3, #2
   337a8:	2608      	movs	r6, #8
   337aa:	9303      	str	r3, [sp, #12]
   337ac:	e7ce      	b.n	3374c <__aeabi_ddiv+0x48>
   337ae:	46cb      	mov	fp, r9
   337b0:	4641      	mov	r1, r8
   337b2:	9a03      	ldr	r2, [sp, #12]
   337b4:	9701      	str	r7, [sp, #4]
   337b6:	2a02      	cmp	r2, #2
   337b8:	d165      	bne.n	33886 <__aeabi_ddiv+0x182>
   337ba:	9b01      	ldr	r3, [sp, #4]
   337bc:	4c4a      	ldr	r4, [pc, #296]	; (338e8 <__aeabi_ddiv+0x1e4>)
   337be:	469c      	mov	ip, r3
   337c0:	2300      	movs	r3, #0
   337c2:	2200      	movs	r2, #0
   337c4:	4698      	mov	r8, r3
   337c6:	e06b      	b.n	338a0 <__aeabi_ddiv+0x19c>
   337c8:	0003      	movs	r3, r0
   337ca:	4333      	orrs	r3, r6
   337cc:	4699      	mov	r9, r3
   337ce:	d04e      	beq.n	3386e <__aeabi_ddiv+0x16a>
   337d0:	2e00      	cmp	r6, #0
   337d2:	d100      	bne.n	337d6 <__aeabi_ddiv+0xd2>
   337d4:	e1bc      	b.n	33b50 <__aeabi_ddiv+0x44c>
   337d6:	0030      	movs	r0, r6
   337d8:	f001 f8ca 	bl	34970 <__clzsi2>
   337dc:	0003      	movs	r3, r0
   337de:	3b0b      	subs	r3, #11
   337e0:	2b1c      	cmp	r3, #28
   337e2:	dd00      	ble.n	337e6 <__aeabi_ddiv+0xe2>
   337e4:	e1ac      	b.n	33b40 <__aeabi_ddiv+0x43c>
   337e6:	221d      	movs	r2, #29
   337e8:	1ad3      	subs	r3, r2, r3
   337ea:	465a      	mov	r2, fp
   337ec:	0001      	movs	r1, r0
   337ee:	40da      	lsrs	r2, r3
   337f0:	3908      	subs	r1, #8
   337f2:	408e      	lsls	r6, r1
   337f4:	0013      	movs	r3, r2
   337f6:	4333      	orrs	r3, r6
   337f8:	4699      	mov	r9, r3
   337fa:	465b      	mov	r3, fp
   337fc:	408b      	lsls	r3, r1
   337fe:	4698      	mov	r8, r3
   33800:	2300      	movs	r3, #0
   33802:	4c3c      	ldr	r4, [pc, #240]	; (338f4 <__aeabi_ddiv+0x1f0>)
   33804:	2600      	movs	r6, #0
   33806:	1a24      	subs	r4, r4, r0
   33808:	9303      	str	r3, [sp, #12]
   3380a:	e79f      	b.n	3374c <__aeabi_ddiv+0x48>
   3380c:	4651      	mov	r1, sl
   3380e:	465a      	mov	r2, fp
   33810:	4311      	orrs	r1, r2
   33812:	d129      	bne.n	33868 <__aeabi_ddiv+0x164>
   33814:	2200      	movs	r2, #0
   33816:	4693      	mov	fp, r2
   33818:	3202      	adds	r2, #2
   3381a:	e7b1      	b.n	33780 <__aeabi_ddiv+0x7c>
   3381c:	4659      	mov	r1, fp
   3381e:	4301      	orrs	r1, r0
   33820:	d01e      	beq.n	33860 <__aeabi_ddiv+0x15c>
   33822:	465b      	mov	r3, fp
   33824:	2b00      	cmp	r3, #0
   33826:	d100      	bne.n	3382a <__aeabi_ddiv+0x126>
   33828:	e19e      	b.n	33b68 <__aeabi_ddiv+0x464>
   3382a:	4658      	mov	r0, fp
   3382c:	f001 f8a0 	bl	34970 <__clzsi2>
   33830:	0003      	movs	r3, r0
   33832:	3b0b      	subs	r3, #11
   33834:	2b1c      	cmp	r3, #28
   33836:	dd00      	ble.n	3383a <__aeabi_ddiv+0x136>
   33838:	e18f      	b.n	33b5a <__aeabi_ddiv+0x456>
   3383a:	0002      	movs	r2, r0
   3383c:	4659      	mov	r1, fp
   3383e:	3a08      	subs	r2, #8
   33840:	4091      	lsls	r1, r2
   33842:	468b      	mov	fp, r1
   33844:	211d      	movs	r1, #29
   33846:	1acb      	subs	r3, r1, r3
   33848:	4651      	mov	r1, sl
   3384a:	40d9      	lsrs	r1, r3
   3384c:	000b      	movs	r3, r1
   3384e:	4659      	mov	r1, fp
   33850:	430b      	orrs	r3, r1
   33852:	4651      	mov	r1, sl
   33854:	469b      	mov	fp, r3
   33856:	4091      	lsls	r1, r2
   33858:	4b26      	ldr	r3, [pc, #152]	; (338f4 <__aeabi_ddiv+0x1f0>)
   3385a:	2200      	movs	r2, #0
   3385c:	1a1b      	subs	r3, r3, r0
   3385e:	e78f      	b.n	33780 <__aeabi_ddiv+0x7c>
   33860:	2300      	movs	r3, #0
   33862:	2201      	movs	r2, #1
   33864:	469b      	mov	fp, r3
   33866:	e78b      	b.n	33780 <__aeabi_ddiv+0x7c>
   33868:	4651      	mov	r1, sl
   3386a:	2203      	movs	r2, #3
   3386c:	e788      	b.n	33780 <__aeabi_ddiv+0x7c>
   3386e:	2300      	movs	r3, #0
   33870:	4698      	mov	r8, r3
   33872:	3301      	adds	r3, #1
   33874:	2604      	movs	r6, #4
   33876:	2400      	movs	r4, #0
   33878:	9303      	str	r3, [sp, #12]
   3387a:	e767      	b.n	3374c <__aeabi_ddiv+0x48>
   3387c:	2303      	movs	r3, #3
   3387e:	46b1      	mov	r9, r6
   33880:	9303      	str	r3, [sp, #12]
   33882:	260c      	movs	r6, #12
   33884:	e762      	b.n	3374c <__aeabi_ddiv+0x48>
   33886:	2a03      	cmp	r2, #3
   33888:	d100      	bne.n	3388c <__aeabi_ddiv+0x188>
   3388a:	e25c      	b.n	33d46 <__aeabi_ddiv+0x642>
   3388c:	9b01      	ldr	r3, [sp, #4]
   3388e:	2a01      	cmp	r2, #1
   33890:	d000      	beq.n	33894 <__aeabi_ddiv+0x190>
   33892:	e1e4      	b.n	33c5e <__aeabi_ddiv+0x55a>
   33894:	4013      	ands	r3, r2
   33896:	469c      	mov	ip, r3
   33898:	2300      	movs	r3, #0
   3389a:	2400      	movs	r4, #0
   3389c:	2200      	movs	r2, #0
   3389e:	4698      	mov	r8, r3
   338a0:	2100      	movs	r1, #0
   338a2:	0312      	lsls	r2, r2, #12
   338a4:	0b13      	lsrs	r3, r2, #12
   338a6:	0d0a      	lsrs	r2, r1, #20
   338a8:	0512      	lsls	r2, r2, #20
   338aa:	431a      	orrs	r2, r3
   338ac:	0523      	lsls	r3, r4, #20
   338ae:	4c12      	ldr	r4, [pc, #72]	; (338f8 <__aeabi_ddiv+0x1f4>)
   338b0:	4640      	mov	r0, r8
   338b2:	4022      	ands	r2, r4
   338b4:	4313      	orrs	r3, r2
   338b6:	4662      	mov	r2, ip
   338b8:	005b      	lsls	r3, r3, #1
   338ba:	07d2      	lsls	r2, r2, #31
   338bc:	085b      	lsrs	r3, r3, #1
   338be:	4313      	orrs	r3, r2
   338c0:	0019      	movs	r1, r3
   338c2:	b007      	add	sp, #28
   338c4:	bc3c      	pop	{r2, r3, r4, r5}
   338c6:	4690      	mov	r8, r2
   338c8:	4699      	mov	r9, r3
   338ca:	46a2      	mov	sl, r4
   338cc:	46ab      	mov	fp, r5
   338ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   338d0:	2300      	movs	r3, #0
   338d2:	2280      	movs	r2, #128	; 0x80
   338d4:	469c      	mov	ip, r3
   338d6:	0312      	lsls	r2, r2, #12
   338d8:	4698      	mov	r8, r3
   338da:	4c03      	ldr	r4, [pc, #12]	; (338e8 <__aeabi_ddiv+0x1e4>)
   338dc:	e7e0      	b.n	338a0 <__aeabi_ddiv+0x19c>
   338de:	2300      	movs	r3, #0
   338e0:	4c01      	ldr	r4, [pc, #4]	; (338e8 <__aeabi_ddiv+0x1e4>)
   338e2:	2200      	movs	r2, #0
   338e4:	4698      	mov	r8, r3
   338e6:	e7db      	b.n	338a0 <__aeabi_ddiv+0x19c>
   338e8:	000007ff 	.word	0x000007ff
   338ec:	fffffc01 	.word	0xfffffc01
   338f0:	0003a224 	.word	0x0003a224
   338f4:	fffffc0d 	.word	0xfffffc0d
   338f8:	800fffff 	.word	0x800fffff
   338fc:	45d9      	cmp	r9, fp
   338fe:	d900      	bls.n	33902 <__aeabi_ddiv+0x1fe>
   33900:	e139      	b.n	33b76 <__aeabi_ddiv+0x472>
   33902:	d100      	bne.n	33906 <__aeabi_ddiv+0x202>
   33904:	e134      	b.n	33b70 <__aeabi_ddiv+0x46c>
   33906:	2300      	movs	r3, #0
   33908:	4646      	mov	r6, r8
   3390a:	464d      	mov	r5, r9
   3390c:	469a      	mov	sl, r3
   3390e:	3c01      	subs	r4, #1
   33910:	465b      	mov	r3, fp
   33912:	0e0a      	lsrs	r2, r1, #24
   33914:	021b      	lsls	r3, r3, #8
   33916:	431a      	orrs	r2, r3
   33918:	020b      	lsls	r3, r1, #8
   3391a:	0c17      	lsrs	r7, r2, #16
   3391c:	9303      	str	r3, [sp, #12]
   3391e:	0413      	lsls	r3, r2, #16
   33920:	0c1b      	lsrs	r3, r3, #16
   33922:	0039      	movs	r1, r7
   33924:	0028      	movs	r0, r5
   33926:	4690      	mov	r8, r2
   33928:	9301      	str	r3, [sp, #4]
   3392a:	f7ff f8ab 	bl	32a84 <__udivsi3>
   3392e:	0002      	movs	r2, r0
   33930:	9b01      	ldr	r3, [sp, #4]
   33932:	4683      	mov	fp, r0
   33934:	435a      	muls	r2, r3
   33936:	0028      	movs	r0, r5
   33938:	0039      	movs	r1, r7
   3393a:	4691      	mov	r9, r2
   3393c:	f7ff f928 	bl	32b90 <__aeabi_uidivmod>
   33940:	0c35      	lsrs	r5, r6, #16
   33942:	0409      	lsls	r1, r1, #16
   33944:	430d      	orrs	r5, r1
   33946:	45a9      	cmp	r9, r5
   33948:	d90d      	bls.n	33966 <__aeabi_ddiv+0x262>
   3394a:	465b      	mov	r3, fp
   3394c:	4445      	add	r5, r8
   3394e:	3b01      	subs	r3, #1
   33950:	45a8      	cmp	r8, r5
   33952:	d900      	bls.n	33956 <__aeabi_ddiv+0x252>
   33954:	e13a      	b.n	33bcc <__aeabi_ddiv+0x4c8>
   33956:	45a9      	cmp	r9, r5
   33958:	d800      	bhi.n	3395c <__aeabi_ddiv+0x258>
   3395a:	e137      	b.n	33bcc <__aeabi_ddiv+0x4c8>
   3395c:	2302      	movs	r3, #2
   3395e:	425b      	negs	r3, r3
   33960:	469c      	mov	ip, r3
   33962:	4445      	add	r5, r8
   33964:	44e3      	add	fp, ip
   33966:	464b      	mov	r3, r9
   33968:	1aeb      	subs	r3, r5, r3
   3396a:	0039      	movs	r1, r7
   3396c:	0018      	movs	r0, r3
   3396e:	9304      	str	r3, [sp, #16]
   33970:	f7ff f888 	bl	32a84 <__udivsi3>
   33974:	9b01      	ldr	r3, [sp, #4]
   33976:	0005      	movs	r5, r0
   33978:	4343      	muls	r3, r0
   3397a:	0039      	movs	r1, r7
   3397c:	9804      	ldr	r0, [sp, #16]
   3397e:	4699      	mov	r9, r3
   33980:	f7ff f906 	bl	32b90 <__aeabi_uidivmod>
   33984:	0433      	lsls	r3, r6, #16
   33986:	0409      	lsls	r1, r1, #16
   33988:	0c1b      	lsrs	r3, r3, #16
   3398a:	430b      	orrs	r3, r1
   3398c:	4599      	cmp	r9, r3
   3398e:	d909      	bls.n	339a4 <__aeabi_ddiv+0x2a0>
   33990:	4443      	add	r3, r8
   33992:	1e6a      	subs	r2, r5, #1
   33994:	4598      	cmp	r8, r3
   33996:	d900      	bls.n	3399a <__aeabi_ddiv+0x296>
   33998:	e11a      	b.n	33bd0 <__aeabi_ddiv+0x4cc>
   3399a:	4599      	cmp	r9, r3
   3399c:	d800      	bhi.n	339a0 <__aeabi_ddiv+0x29c>
   3399e:	e117      	b.n	33bd0 <__aeabi_ddiv+0x4cc>
   339a0:	3d02      	subs	r5, #2
   339a2:	4443      	add	r3, r8
   339a4:	464a      	mov	r2, r9
   339a6:	1a9b      	subs	r3, r3, r2
   339a8:	465a      	mov	r2, fp
   339aa:	0412      	lsls	r2, r2, #16
   339ac:	432a      	orrs	r2, r5
   339ae:	9903      	ldr	r1, [sp, #12]
   339b0:	4693      	mov	fp, r2
   339b2:	0c10      	lsrs	r0, r2, #16
   339b4:	0c0a      	lsrs	r2, r1, #16
   339b6:	4691      	mov	r9, r2
   339b8:	0409      	lsls	r1, r1, #16
   339ba:	465a      	mov	r2, fp
   339bc:	0c09      	lsrs	r1, r1, #16
   339be:	464e      	mov	r6, r9
   339c0:	000d      	movs	r5, r1
   339c2:	0412      	lsls	r2, r2, #16
   339c4:	0c12      	lsrs	r2, r2, #16
   339c6:	4345      	muls	r5, r0
   339c8:	9105      	str	r1, [sp, #20]
   339ca:	4351      	muls	r1, r2
   339cc:	4372      	muls	r2, r6
   339ce:	4370      	muls	r0, r6
   339d0:	1952      	adds	r2, r2, r5
   339d2:	0c0e      	lsrs	r6, r1, #16
   339d4:	18b2      	adds	r2, r6, r2
   339d6:	4295      	cmp	r5, r2
   339d8:	d903      	bls.n	339e2 <__aeabi_ddiv+0x2de>
   339da:	2580      	movs	r5, #128	; 0x80
   339dc:	026d      	lsls	r5, r5, #9
   339de:	46ac      	mov	ip, r5
   339e0:	4460      	add	r0, ip
   339e2:	0c15      	lsrs	r5, r2, #16
   339e4:	0409      	lsls	r1, r1, #16
   339e6:	0412      	lsls	r2, r2, #16
   339e8:	0c09      	lsrs	r1, r1, #16
   339ea:	1828      	adds	r0, r5, r0
   339ec:	1852      	adds	r2, r2, r1
   339ee:	4283      	cmp	r3, r0
   339f0:	d200      	bcs.n	339f4 <__aeabi_ddiv+0x2f0>
   339f2:	e0ce      	b.n	33b92 <__aeabi_ddiv+0x48e>
   339f4:	d100      	bne.n	339f8 <__aeabi_ddiv+0x2f4>
   339f6:	e0c8      	b.n	33b8a <__aeabi_ddiv+0x486>
   339f8:	1a1d      	subs	r5, r3, r0
   339fa:	4653      	mov	r3, sl
   339fc:	1a9e      	subs	r6, r3, r2
   339fe:	45b2      	cmp	sl, r6
   33a00:	4192      	sbcs	r2, r2
   33a02:	4252      	negs	r2, r2
   33a04:	1aab      	subs	r3, r5, r2
   33a06:	469a      	mov	sl, r3
   33a08:	4598      	cmp	r8, r3
   33a0a:	d100      	bne.n	33a0e <__aeabi_ddiv+0x30a>
   33a0c:	e117      	b.n	33c3e <__aeabi_ddiv+0x53a>
   33a0e:	0039      	movs	r1, r7
   33a10:	0018      	movs	r0, r3
   33a12:	f7ff f837 	bl	32a84 <__udivsi3>
   33a16:	9b01      	ldr	r3, [sp, #4]
   33a18:	0005      	movs	r5, r0
   33a1a:	4343      	muls	r3, r0
   33a1c:	0039      	movs	r1, r7
   33a1e:	4650      	mov	r0, sl
   33a20:	9304      	str	r3, [sp, #16]
   33a22:	f7ff f8b5 	bl	32b90 <__aeabi_uidivmod>
   33a26:	9804      	ldr	r0, [sp, #16]
   33a28:	040b      	lsls	r3, r1, #16
   33a2a:	0c31      	lsrs	r1, r6, #16
   33a2c:	4319      	orrs	r1, r3
   33a2e:	4288      	cmp	r0, r1
   33a30:	d909      	bls.n	33a46 <__aeabi_ddiv+0x342>
   33a32:	4441      	add	r1, r8
   33a34:	1e6b      	subs	r3, r5, #1
   33a36:	4588      	cmp	r8, r1
   33a38:	d900      	bls.n	33a3c <__aeabi_ddiv+0x338>
   33a3a:	e107      	b.n	33c4c <__aeabi_ddiv+0x548>
   33a3c:	4288      	cmp	r0, r1
   33a3e:	d800      	bhi.n	33a42 <__aeabi_ddiv+0x33e>
   33a40:	e104      	b.n	33c4c <__aeabi_ddiv+0x548>
   33a42:	3d02      	subs	r5, #2
   33a44:	4441      	add	r1, r8
   33a46:	9b04      	ldr	r3, [sp, #16]
   33a48:	1acb      	subs	r3, r1, r3
   33a4a:	0018      	movs	r0, r3
   33a4c:	0039      	movs	r1, r7
   33a4e:	9304      	str	r3, [sp, #16]
   33a50:	f7ff f818 	bl	32a84 <__udivsi3>
   33a54:	9b01      	ldr	r3, [sp, #4]
   33a56:	4682      	mov	sl, r0
   33a58:	4343      	muls	r3, r0
   33a5a:	0039      	movs	r1, r7
   33a5c:	9804      	ldr	r0, [sp, #16]
   33a5e:	9301      	str	r3, [sp, #4]
   33a60:	f7ff f896 	bl	32b90 <__aeabi_uidivmod>
   33a64:	9801      	ldr	r0, [sp, #4]
   33a66:	040b      	lsls	r3, r1, #16
   33a68:	0431      	lsls	r1, r6, #16
   33a6a:	0c09      	lsrs	r1, r1, #16
   33a6c:	4319      	orrs	r1, r3
   33a6e:	4288      	cmp	r0, r1
   33a70:	d90d      	bls.n	33a8e <__aeabi_ddiv+0x38a>
   33a72:	4653      	mov	r3, sl
   33a74:	4441      	add	r1, r8
   33a76:	3b01      	subs	r3, #1
   33a78:	4588      	cmp	r8, r1
   33a7a:	d900      	bls.n	33a7e <__aeabi_ddiv+0x37a>
   33a7c:	e0e8      	b.n	33c50 <__aeabi_ddiv+0x54c>
   33a7e:	4288      	cmp	r0, r1
   33a80:	d800      	bhi.n	33a84 <__aeabi_ddiv+0x380>
   33a82:	e0e5      	b.n	33c50 <__aeabi_ddiv+0x54c>
   33a84:	2302      	movs	r3, #2
   33a86:	425b      	negs	r3, r3
   33a88:	469c      	mov	ip, r3
   33a8a:	4441      	add	r1, r8
   33a8c:	44e2      	add	sl, ip
   33a8e:	9b01      	ldr	r3, [sp, #4]
   33a90:	042d      	lsls	r5, r5, #16
   33a92:	1ace      	subs	r6, r1, r3
   33a94:	4651      	mov	r1, sl
   33a96:	4329      	orrs	r1, r5
   33a98:	9d05      	ldr	r5, [sp, #20]
   33a9a:	464f      	mov	r7, r9
   33a9c:	002a      	movs	r2, r5
   33a9e:	040b      	lsls	r3, r1, #16
   33aa0:	0c08      	lsrs	r0, r1, #16
   33aa2:	0c1b      	lsrs	r3, r3, #16
   33aa4:	435a      	muls	r2, r3
   33aa6:	4345      	muls	r5, r0
   33aa8:	437b      	muls	r3, r7
   33aaa:	4378      	muls	r0, r7
   33aac:	195b      	adds	r3, r3, r5
   33aae:	0c17      	lsrs	r7, r2, #16
   33ab0:	18fb      	adds	r3, r7, r3
   33ab2:	429d      	cmp	r5, r3
   33ab4:	d903      	bls.n	33abe <__aeabi_ddiv+0x3ba>
   33ab6:	2580      	movs	r5, #128	; 0x80
   33ab8:	026d      	lsls	r5, r5, #9
   33aba:	46ac      	mov	ip, r5
   33abc:	4460      	add	r0, ip
   33abe:	0c1d      	lsrs	r5, r3, #16
   33ac0:	0412      	lsls	r2, r2, #16
   33ac2:	041b      	lsls	r3, r3, #16
   33ac4:	0c12      	lsrs	r2, r2, #16
   33ac6:	1828      	adds	r0, r5, r0
   33ac8:	189b      	adds	r3, r3, r2
   33aca:	4286      	cmp	r6, r0
   33acc:	d200      	bcs.n	33ad0 <__aeabi_ddiv+0x3cc>
   33ace:	e093      	b.n	33bf8 <__aeabi_ddiv+0x4f4>
   33ad0:	d100      	bne.n	33ad4 <__aeabi_ddiv+0x3d0>
   33ad2:	e08e      	b.n	33bf2 <__aeabi_ddiv+0x4ee>
   33ad4:	2301      	movs	r3, #1
   33ad6:	4319      	orrs	r1, r3
   33ad8:	4ba0      	ldr	r3, [pc, #640]	; (33d5c <__aeabi_ddiv+0x658>)
   33ada:	18e3      	adds	r3, r4, r3
   33adc:	2b00      	cmp	r3, #0
   33ade:	dc00      	bgt.n	33ae2 <__aeabi_ddiv+0x3de>
   33ae0:	e099      	b.n	33c16 <__aeabi_ddiv+0x512>
   33ae2:	074a      	lsls	r2, r1, #29
   33ae4:	d000      	beq.n	33ae8 <__aeabi_ddiv+0x3e4>
   33ae6:	e09e      	b.n	33c26 <__aeabi_ddiv+0x522>
   33ae8:	465a      	mov	r2, fp
   33aea:	01d2      	lsls	r2, r2, #7
   33aec:	d506      	bpl.n	33afc <__aeabi_ddiv+0x3f8>
   33aee:	465a      	mov	r2, fp
   33af0:	4b9b      	ldr	r3, [pc, #620]	; (33d60 <__aeabi_ddiv+0x65c>)
   33af2:	401a      	ands	r2, r3
   33af4:	2380      	movs	r3, #128	; 0x80
   33af6:	4693      	mov	fp, r2
   33af8:	00db      	lsls	r3, r3, #3
   33afa:	18e3      	adds	r3, r4, r3
   33afc:	4a99      	ldr	r2, [pc, #612]	; (33d64 <__aeabi_ddiv+0x660>)
   33afe:	4293      	cmp	r3, r2
   33b00:	dd68      	ble.n	33bd4 <__aeabi_ddiv+0x4d0>
   33b02:	2301      	movs	r3, #1
   33b04:	9a02      	ldr	r2, [sp, #8]
   33b06:	4c98      	ldr	r4, [pc, #608]	; (33d68 <__aeabi_ddiv+0x664>)
   33b08:	401a      	ands	r2, r3
   33b0a:	2300      	movs	r3, #0
   33b0c:	4694      	mov	ip, r2
   33b0e:	4698      	mov	r8, r3
   33b10:	2200      	movs	r2, #0
   33b12:	e6c5      	b.n	338a0 <__aeabi_ddiv+0x19c>
   33b14:	2280      	movs	r2, #128	; 0x80
   33b16:	464b      	mov	r3, r9
   33b18:	0312      	lsls	r2, r2, #12
   33b1a:	4213      	tst	r3, r2
   33b1c:	d00a      	beq.n	33b34 <__aeabi_ddiv+0x430>
   33b1e:	465b      	mov	r3, fp
   33b20:	4213      	tst	r3, r2
   33b22:	d106      	bne.n	33b32 <__aeabi_ddiv+0x42e>
   33b24:	431a      	orrs	r2, r3
   33b26:	0312      	lsls	r2, r2, #12
   33b28:	0b12      	lsrs	r2, r2, #12
   33b2a:	46ac      	mov	ip, r5
   33b2c:	4688      	mov	r8, r1
   33b2e:	4c8e      	ldr	r4, [pc, #568]	; (33d68 <__aeabi_ddiv+0x664>)
   33b30:	e6b6      	b.n	338a0 <__aeabi_ddiv+0x19c>
   33b32:	464b      	mov	r3, r9
   33b34:	431a      	orrs	r2, r3
   33b36:	0312      	lsls	r2, r2, #12
   33b38:	0b12      	lsrs	r2, r2, #12
   33b3a:	46bc      	mov	ip, r7
   33b3c:	4c8a      	ldr	r4, [pc, #552]	; (33d68 <__aeabi_ddiv+0x664>)
   33b3e:	e6af      	b.n	338a0 <__aeabi_ddiv+0x19c>
   33b40:	0003      	movs	r3, r0
   33b42:	465a      	mov	r2, fp
   33b44:	3b28      	subs	r3, #40	; 0x28
   33b46:	409a      	lsls	r2, r3
   33b48:	2300      	movs	r3, #0
   33b4a:	4691      	mov	r9, r2
   33b4c:	4698      	mov	r8, r3
   33b4e:	e657      	b.n	33800 <__aeabi_ddiv+0xfc>
   33b50:	4658      	mov	r0, fp
   33b52:	f000 ff0d 	bl	34970 <__clzsi2>
   33b56:	3020      	adds	r0, #32
   33b58:	e640      	b.n	337dc <__aeabi_ddiv+0xd8>
   33b5a:	0003      	movs	r3, r0
   33b5c:	4652      	mov	r2, sl
   33b5e:	3b28      	subs	r3, #40	; 0x28
   33b60:	409a      	lsls	r2, r3
   33b62:	2100      	movs	r1, #0
   33b64:	4693      	mov	fp, r2
   33b66:	e677      	b.n	33858 <__aeabi_ddiv+0x154>
   33b68:	f000 ff02 	bl	34970 <__clzsi2>
   33b6c:	3020      	adds	r0, #32
   33b6e:	e65f      	b.n	33830 <__aeabi_ddiv+0x12c>
   33b70:	4588      	cmp	r8, r1
   33b72:	d200      	bcs.n	33b76 <__aeabi_ddiv+0x472>
   33b74:	e6c7      	b.n	33906 <__aeabi_ddiv+0x202>
   33b76:	464b      	mov	r3, r9
   33b78:	07de      	lsls	r6, r3, #31
   33b7a:	085d      	lsrs	r5, r3, #1
   33b7c:	4643      	mov	r3, r8
   33b7e:	085b      	lsrs	r3, r3, #1
   33b80:	431e      	orrs	r6, r3
   33b82:	4643      	mov	r3, r8
   33b84:	07db      	lsls	r3, r3, #31
   33b86:	469a      	mov	sl, r3
   33b88:	e6c2      	b.n	33910 <__aeabi_ddiv+0x20c>
   33b8a:	2500      	movs	r5, #0
   33b8c:	4592      	cmp	sl, r2
   33b8e:	d300      	bcc.n	33b92 <__aeabi_ddiv+0x48e>
   33b90:	e733      	b.n	339fa <__aeabi_ddiv+0x2f6>
   33b92:	9e03      	ldr	r6, [sp, #12]
   33b94:	4659      	mov	r1, fp
   33b96:	46b4      	mov	ip, r6
   33b98:	44e2      	add	sl, ip
   33b9a:	45b2      	cmp	sl, r6
   33b9c:	41ad      	sbcs	r5, r5
   33b9e:	426d      	negs	r5, r5
   33ba0:	4445      	add	r5, r8
   33ba2:	18eb      	adds	r3, r5, r3
   33ba4:	3901      	subs	r1, #1
   33ba6:	4598      	cmp	r8, r3
   33ba8:	d207      	bcs.n	33bba <__aeabi_ddiv+0x4b6>
   33baa:	4298      	cmp	r0, r3
   33bac:	d900      	bls.n	33bb0 <__aeabi_ddiv+0x4ac>
   33bae:	e07f      	b.n	33cb0 <__aeabi_ddiv+0x5ac>
   33bb0:	d100      	bne.n	33bb4 <__aeabi_ddiv+0x4b0>
   33bb2:	e0bc      	b.n	33d2e <__aeabi_ddiv+0x62a>
   33bb4:	1a1d      	subs	r5, r3, r0
   33bb6:	468b      	mov	fp, r1
   33bb8:	e71f      	b.n	339fa <__aeabi_ddiv+0x2f6>
   33bba:	4598      	cmp	r8, r3
   33bbc:	d1fa      	bne.n	33bb4 <__aeabi_ddiv+0x4b0>
   33bbe:	9d03      	ldr	r5, [sp, #12]
   33bc0:	4555      	cmp	r5, sl
   33bc2:	d9f2      	bls.n	33baa <__aeabi_ddiv+0x4a6>
   33bc4:	4643      	mov	r3, r8
   33bc6:	468b      	mov	fp, r1
   33bc8:	1a1d      	subs	r5, r3, r0
   33bca:	e716      	b.n	339fa <__aeabi_ddiv+0x2f6>
   33bcc:	469b      	mov	fp, r3
   33bce:	e6ca      	b.n	33966 <__aeabi_ddiv+0x262>
   33bd0:	0015      	movs	r5, r2
   33bd2:	e6e7      	b.n	339a4 <__aeabi_ddiv+0x2a0>
   33bd4:	465a      	mov	r2, fp
   33bd6:	08c9      	lsrs	r1, r1, #3
   33bd8:	0752      	lsls	r2, r2, #29
   33bda:	430a      	orrs	r2, r1
   33bdc:	055b      	lsls	r3, r3, #21
   33bde:	4690      	mov	r8, r2
   33be0:	0d5c      	lsrs	r4, r3, #21
   33be2:	465a      	mov	r2, fp
   33be4:	2301      	movs	r3, #1
   33be6:	9902      	ldr	r1, [sp, #8]
   33be8:	0252      	lsls	r2, r2, #9
   33bea:	4019      	ands	r1, r3
   33bec:	0b12      	lsrs	r2, r2, #12
   33bee:	468c      	mov	ip, r1
   33bf0:	e656      	b.n	338a0 <__aeabi_ddiv+0x19c>
   33bf2:	2b00      	cmp	r3, #0
   33bf4:	d100      	bne.n	33bf8 <__aeabi_ddiv+0x4f4>
   33bf6:	e76f      	b.n	33ad8 <__aeabi_ddiv+0x3d4>
   33bf8:	4446      	add	r6, r8
   33bfa:	1e4a      	subs	r2, r1, #1
   33bfc:	45b0      	cmp	r8, r6
   33bfe:	d929      	bls.n	33c54 <__aeabi_ddiv+0x550>
   33c00:	0011      	movs	r1, r2
   33c02:	4286      	cmp	r6, r0
   33c04:	d000      	beq.n	33c08 <__aeabi_ddiv+0x504>
   33c06:	e765      	b.n	33ad4 <__aeabi_ddiv+0x3d0>
   33c08:	9a03      	ldr	r2, [sp, #12]
   33c0a:	4293      	cmp	r3, r2
   33c0c:	d000      	beq.n	33c10 <__aeabi_ddiv+0x50c>
   33c0e:	e761      	b.n	33ad4 <__aeabi_ddiv+0x3d0>
   33c10:	e762      	b.n	33ad8 <__aeabi_ddiv+0x3d4>
   33c12:	2101      	movs	r1, #1
   33c14:	4249      	negs	r1, r1
   33c16:	2001      	movs	r0, #1
   33c18:	1ac2      	subs	r2, r0, r3
   33c1a:	2a38      	cmp	r2, #56	; 0x38
   33c1c:	dd21      	ble.n	33c62 <__aeabi_ddiv+0x55e>
   33c1e:	9b02      	ldr	r3, [sp, #8]
   33c20:	4003      	ands	r3, r0
   33c22:	469c      	mov	ip, r3
   33c24:	e638      	b.n	33898 <__aeabi_ddiv+0x194>
   33c26:	220f      	movs	r2, #15
   33c28:	400a      	ands	r2, r1
   33c2a:	2a04      	cmp	r2, #4
   33c2c:	d100      	bne.n	33c30 <__aeabi_ddiv+0x52c>
   33c2e:	e75b      	b.n	33ae8 <__aeabi_ddiv+0x3e4>
   33c30:	000a      	movs	r2, r1
   33c32:	1d11      	adds	r1, r2, #4
   33c34:	4291      	cmp	r1, r2
   33c36:	4192      	sbcs	r2, r2
   33c38:	4252      	negs	r2, r2
   33c3a:	4493      	add	fp, r2
   33c3c:	e754      	b.n	33ae8 <__aeabi_ddiv+0x3e4>
   33c3e:	4b47      	ldr	r3, [pc, #284]	; (33d5c <__aeabi_ddiv+0x658>)
   33c40:	18e3      	adds	r3, r4, r3
   33c42:	2b00      	cmp	r3, #0
   33c44:	dde5      	ble.n	33c12 <__aeabi_ddiv+0x50e>
   33c46:	2201      	movs	r2, #1
   33c48:	4252      	negs	r2, r2
   33c4a:	e7f2      	b.n	33c32 <__aeabi_ddiv+0x52e>
   33c4c:	001d      	movs	r5, r3
   33c4e:	e6fa      	b.n	33a46 <__aeabi_ddiv+0x342>
   33c50:	469a      	mov	sl, r3
   33c52:	e71c      	b.n	33a8e <__aeabi_ddiv+0x38a>
   33c54:	42b0      	cmp	r0, r6
   33c56:	d839      	bhi.n	33ccc <__aeabi_ddiv+0x5c8>
   33c58:	d06e      	beq.n	33d38 <__aeabi_ddiv+0x634>
   33c5a:	0011      	movs	r1, r2
   33c5c:	e73a      	b.n	33ad4 <__aeabi_ddiv+0x3d0>
   33c5e:	9302      	str	r3, [sp, #8]
   33c60:	e73a      	b.n	33ad8 <__aeabi_ddiv+0x3d4>
   33c62:	2a1f      	cmp	r2, #31
   33c64:	dc3c      	bgt.n	33ce0 <__aeabi_ddiv+0x5dc>
   33c66:	2320      	movs	r3, #32
   33c68:	1a9b      	subs	r3, r3, r2
   33c6a:	000c      	movs	r4, r1
   33c6c:	4658      	mov	r0, fp
   33c6e:	4099      	lsls	r1, r3
   33c70:	4098      	lsls	r0, r3
   33c72:	1e4b      	subs	r3, r1, #1
   33c74:	4199      	sbcs	r1, r3
   33c76:	465b      	mov	r3, fp
   33c78:	40d4      	lsrs	r4, r2
   33c7a:	40d3      	lsrs	r3, r2
   33c7c:	4320      	orrs	r0, r4
   33c7e:	4308      	orrs	r0, r1
   33c80:	001a      	movs	r2, r3
   33c82:	0743      	lsls	r3, r0, #29
   33c84:	d009      	beq.n	33c9a <__aeabi_ddiv+0x596>
   33c86:	230f      	movs	r3, #15
   33c88:	4003      	ands	r3, r0
   33c8a:	2b04      	cmp	r3, #4
   33c8c:	d005      	beq.n	33c9a <__aeabi_ddiv+0x596>
   33c8e:	0001      	movs	r1, r0
   33c90:	1d08      	adds	r0, r1, #4
   33c92:	4288      	cmp	r0, r1
   33c94:	419b      	sbcs	r3, r3
   33c96:	425b      	negs	r3, r3
   33c98:	18d2      	adds	r2, r2, r3
   33c9a:	0213      	lsls	r3, r2, #8
   33c9c:	d53a      	bpl.n	33d14 <__aeabi_ddiv+0x610>
   33c9e:	2301      	movs	r3, #1
   33ca0:	9a02      	ldr	r2, [sp, #8]
   33ca2:	2401      	movs	r4, #1
   33ca4:	401a      	ands	r2, r3
   33ca6:	2300      	movs	r3, #0
   33ca8:	4694      	mov	ip, r2
   33caa:	4698      	mov	r8, r3
   33cac:	2200      	movs	r2, #0
   33cae:	e5f7      	b.n	338a0 <__aeabi_ddiv+0x19c>
   33cb0:	2102      	movs	r1, #2
   33cb2:	4249      	negs	r1, r1
   33cb4:	468c      	mov	ip, r1
   33cb6:	9d03      	ldr	r5, [sp, #12]
   33cb8:	44e3      	add	fp, ip
   33cba:	46ac      	mov	ip, r5
   33cbc:	44e2      	add	sl, ip
   33cbe:	45aa      	cmp	sl, r5
   33cc0:	41ad      	sbcs	r5, r5
   33cc2:	426d      	negs	r5, r5
   33cc4:	4445      	add	r5, r8
   33cc6:	18ed      	adds	r5, r5, r3
   33cc8:	1a2d      	subs	r5, r5, r0
   33cca:	e696      	b.n	339fa <__aeabi_ddiv+0x2f6>
   33ccc:	1e8a      	subs	r2, r1, #2
   33cce:	9903      	ldr	r1, [sp, #12]
   33cd0:	004d      	lsls	r5, r1, #1
   33cd2:	428d      	cmp	r5, r1
   33cd4:	4189      	sbcs	r1, r1
   33cd6:	4249      	negs	r1, r1
   33cd8:	4441      	add	r1, r8
   33cda:	1876      	adds	r6, r6, r1
   33cdc:	9503      	str	r5, [sp, #12]
   33cde:	e78f      	b.n	33c00 <__aeabi_ddiv+0x4fc>
   33ce0:	201f      	movs	r0, #31
   33ce2:	4240      	negs	r0, r0
   33ce4:	1ac3      	subs	r3, r0, r3
   33ce6:	4658      	mov	r0, fp
   33ce8:	40d8      	lsrs	r0, r3
   33cea:	0003      	movs	r3, r0
   33cec:	2a20      	cmp	r2, #32
   33cee:	d028      	beq.n	33d42 <__aeabi_ddiv+0x63e>
   33cf0:	2040      	movs	r0, #64	; 0x40
   33cf2:	465d      	mov	r5, fp
   33cf4:	1a82      	subs	r2, r0, r2
   33cf6:	4095      	lsls	r5, r2
   33cf8:	4329      	orrs	r1, r5
   33cfa:	1e4a      	subs	r2, r1, #1
   33cfc:	4191      	sbcs	r1, r2
   33cfe:	4319      	orrs	r1, r3
   33d00:	2307      	movs	r3, #7
   33d02:	2200      	movs	r2, #0
   33d04:	400b      	ands	r3, r1
   33d06:	d009      	beq.n	33d1c <__aeabi_ddiv+0x618>
   33d08:	230f      	movs	r3, #15
   33d0a:	2200      	movs	r2, #0
   33d0c:	400b      	ands	r3, r1
   33d0e:	0008      	movs	r0, r1
   33d10:	2b04      	cmp	r3, #4
   33d12:	d1bd      	bne.n	33c90 <__aeabi_ddiv+0x58c>
   33d14:	0001      	movs	r1, r0
   33d16:	0753      	lsls	r3, r2, #29
   33d18:	0252      	lsls	r2, r2, #9
   33d1a:	0b12      	lsrs	r2, r2, #12
   33d1c:	08c9      	lsrs	r1, r1, #3
   33d1e:	4319      	orrs	r1, r3
   33d20:	2301      	movs	r3, #1
   33d22:	4688      	mov	r8, r1
   33d24:	9902      	ldr	r1, [sp, #8]
   33d26:	2400      	movs	r4, #0
   33d28:	4019      	ands	r1, r3
   33d2a:	468c      	mov	ip, r1
   33d2c:	e5b8      	b.n	338a0 <__aeabi_ddiv+0x19c>
   33d2e:	4552      	cmp	r2, sl
   33d30:	d8be      	bhi.n	33cb0 <__aeabi_ddiv+0x5ac>
   33d32:	468b      	mov	fp, r1
   33d34:	2500      	movs	r5, #0
   33d36:	e660      	b.n	339fa <__aeabi_ddiv+0x2f6>
   33d38:	9d03      	ldr	r5, [sp, #12]
   33d3a:	429d      	cmp	r5, r3
   33d3c:	d3c6      	bcc.n	33ccc <__aeabi_ddiv+0x5c8>
   33d3e:	0011      	movs	r1, r2
   33d40:	e762      	b.n	33c08 <__aeabi_ddiv+0x504>
   33d42:	2500      	movs	r5, #0
   33d44:	e7d8      	b.n	33cf8 <__aeabi_ddiv+0x5f4>
   33d46:	2280      	movs	r2, #128	; 0x80
   33d48:	465b      	mov	r3, fp
   33d4a:	0312      	lsls	r2, r2, #12
   33d4c:	431a      	orrs	r2, r3
   33d4e:	9b01      	ldr	r3, [sp, #4]
   33d50:	0312      	lsls	r2, r2, #12
   33d52:	0b12      	lsrs	r2, r2, #12
   33d54:	469c      	mov	ip, r3
   33d56:	4688      	mov	r8, r1
   33d58:	4c03      	ldr	r4, [pc, #12]	; (33d68 <__aeabi_ddiv+0x664>)
   33d5a:	e5a1      	b.n	338a0 <__aeabi_ddiv+0x19c>
   33d5c:	000003ff 	.word	0x000003ff
   33d60:	feffffff 	.word	0xfeffffff
   33d64:	000007fe 	.word	0x000007fe
   33d68:	000007ff 	.word	0x000007ff

00033d6c <__aeabi_dmul>:
   33d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   33d6e:	4657      	mov	r7, sl
   33d70:	4645      	mov	r5, r8
   33d72:	46de      	mov	lr, fp
   33d74:	464e      	mov	r6, r9
   33d76:	b5e0      	push	{r5, r6, r7, lr}
   33d78:	030c      	lsls	r4, r1, #12
   33d7a:	4698      	mov	r8, r3
   33d7c:	004e      	lsls	r6, r1, #1
   33d7e:	0b23      	lsrs	r3, r4, #12
   33d80:	b087      	sub	sp, #28
   33d82:	0007      	movs	r7, r0
   33d84:	4692      	mov	sl, r2
   33d86:	469b      	mov	fp, r3
   33d88:	0d76      	lsrs	r6, r6, #21
   33d8a:	0fcd      	lsrs	r5, r1, #31
   33d8c:	2e00      	cmp	r6, #0
   33d8e:	d06b      	beq.n	33e68 <__aeabi_dmul+0xfc>
   33d90:	4b6d      	ldr	r3, [pc, #436]	; (33f48 <__aeabi_dmul+0x1dc>)
   33d92:	429e      	cmp	r6, r3
   33d94:	d035      	beq.n	33e02 <__aeabi_dmul+0x96>
   33d96:	2480      	movs	r4, #128	; 0x80
   33d98:	465b      	mov	r3, fp
   33d9a:	0f42      	lsrs	r2, r0, #29
   33d9c:	0424      	lsls	r4, r4, #16
   33d9e:	00db      	lsls	r3, r3, #3
   33da0:	4314      	orrs	r4, r2
   33da2:	431c      	orrs	r4, r3
   33da4:	00c3      	lsls	r3, r0, #3
   33da6:	4699      	mov	r9, r3
   33da8:	4b68      	ldr	r3, [pc, #416]	; (33f4c <__aeabi_dmul+0x1e0>)
   33daa:	46a3      	mov	fp, r4
   33dac:	469c      	mov	ip, r3
   33dae:	2300      	movs	r3, #0
   33db0:	2700      	movs	r7, #0
   33db2:	4466      	add	r6, ip
   33db4:	9302      	str	r3, [sp, #8]
   33db6:	4643      	mov	r3, r8
   33db8:	031c      	lsls	r4, r3, #12
   33dba:	005a      	lsls	r2, r3, #1
   33dbc:	0fdb      	lsrs	r3, r3, #31
   33dbe:	4650      	mov	r0, sl
   33dc0:	0b24      	lsrs	r4, r4, #12
   33dc2:	0d52      	lsrs	r2, r2, #21
   33dc4:	4698      	mov	r8, r3
   33dc6:	d100      	bne.n	33dca <__aeabi_dmul+0x5e>
   33dc8:	e076      	b.n	33eb8 <__aeabi_dmul+0x14c>
   33dca:	4b5f      	ldr	r3, [pc, #380]	; (33f48 <__aeabi_dmul+0x1dc>)
   33dcc:	429a      	cmp	r2, r3
   33dce:	d06d      	beq.n	33eac <__aeabi_dmul+0x140>
   33dd0:	2380      	movs	r3, #128	; 0x80
   33dd2:	0f41      	lsrs	r1, r0, #29
   33dd4:	041b      	lsls	r3, r3, #16
   33dd6:	430b      	orrs	r3, r1
   33dd8:	495c      	ldr	r1, [pc, #368]	; (33f4c <__aeabi_dmul+0x1e0>)
   33dda:	00e4      	lsls	r4, r4, #3
   33ddc:	468c      	mov	ip, r1
   33dde:	431c      	orrs	r4, r3
   33de0:	00c3      	lsls	r3, r0, #3
   33de2:	2000      	movs	r0, #0
   33de4:	4462      	add	r2, ip
   33de6:	4641      	mov	r1, r8
   33de8:	18b6      	adds	r6, r6, r2
   33dea:	4069      	eors	r1, r5
   33dec:	1c72      	adds	r2, r6, #1
   33dee:	9101      	str	r1, [sp, #4]
   33df0:	4694      	mov	ip, r2
   33df2:	4307      	orrs	r7, r0
   33df4:	2f0f      	cmp	r7, #15
   33df6:	d900      	bls.n	33dfa <__aeabi_dmul+0x8e>
   33df8:	e0b0      	b.n	33f5c <__aeabi_dmul+0x1f0>
   33dfa:	4a55      	ldr	r2, [pc, #340]	; (33f50 <__aeabi_dmul+0x1e4>)
   33dfc:	00bf      	lsls	r7, r7, #2
   33dfe:	59d2      	ldr	r2, [r2, r7]
   33e00:	4697      	mov	pc, r2
   33e02:	465b      	mov	r3, fp
   33e04:	4303      	orrs	r3, r0
   33e06:	4699      	mov	r9, r3
   33e08:	d000      	beq.n	33e0c <__aeabi_dmul+0xa0>
   33e0a:	e087      	b.n	33f1c <__aeabi_dmul+0x1b0>
   33e0c:	2300      	movs	r3, #0
   33e0e:	469b      	mov	fp, r3
   33e10:	3302      	adds	r3, #2
   33e12:	2708      	movs	r7, #8
   33e14:	9302      	str	r3, [sp, #8]
   33e16:	e7ce      	b.n	33db6 <__aeabi_dmul+0x4a>
   33e18:	4642      	mov	r2, r8
   33e1a:	9201      	str	r2, [sp, #4]
   33e1c:	2802      	cmp	r0, #2
   33e1e:	d067      	beq.n	33ef0 <__aeabi_dmul+0x184>
   33e20:	2803      	cmp	r0, #3
   33e22:	d100      	bne.n	33e26 <__aeabi_dmul+0xba>
   33e24:	e20e      	b.n	34244 <__aeabi_dmul+0x4d8>
   33e26:	2801      	cmp	r0, #1
   33e28:	d000      	beq.n	33e2c <__aeabi_dmul+0xc0>
   33e2a:	e162      	b.n	340f2 <__aeabi_dmul+0x386>
   33e2c:	2300      	movs	r3, #0
   33e2e:	2400      	movs	r4, #0
   33e30:	2200      	movs	r2, #0
   33e32:	4699      	mov	r9, r3
   33e34:	9901      	ldr	r1, [sp, #4]
   33e36:	4001      	ands	r1, r0
   33e38:	b2cd      	uxtb	r5, r1
   33e3a:	2100      	movs	r1, #0
   33e3c:	0312      	lsls	r2, r2, #12
   33e3e:	0d0b      	lsrs	r3, r1, #20
   33e40:	0b12      	lsrs	r2, r2, #12
   33e42:	051b      	lsls	r3, r3, #20
   33e44:	4313      	orrs	r3, r2
   33e46:	4a43      	ldr	r2, [pc, #268]	; (33f54 <__aeabi_dmul+0x1e8>)
   33e48:	0524      	lsls	r4, r4, #20
   33e4a:	4013      	ands	r3, r2
   33e4c:	431c      	orrs	r4, r3
   33e4e:	0064      	lsls	r4, r4, #1
   33e50:	07ed      	lsls	r5, r5, #31
   33e52:	0864      	lsrs	r4, r4, #1
   33e54:	432c      	orrs	r4, r5
   33e56:	4648      	mov	r0, r9
   33e58:	0021      	movs	r1, r4
   33e5a:	b007      	add	sp, #28
   33e5c:	bc3c      	pop	{r2, r3, r4, r5}
   33e5e:	4690      	mov	r8, r2
   33e60:	4699      	mov	r9, r3
   33e62:	46a2      	mov	sl, r4
   33e64:	46ab      	mov	fp, r5
   33e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33e68:	4303      	orrs	r3, r0
   33e6a:	4699      	mov	r9, r3
   33e6c:	d04f      	beq.n	33f0e <__aeabi_dmul+0x1a2>
   33e6e:	465b      	mov	r3, fp
   33e70:	2b00      	cmp	r3, #0
   33e72:	d100      	bne.n	33e76 <__aeabi_dmul+0x10a>
   33e74:	e189      	b.n	3418a <__aeabi_dmul+0x41e>
   33e76:	4658      	mov	r0, fp
   33e78:	f000 fd7a 	bl	34970 <__clzsi2>
   33e7c:	0003      	movs	r3, r0
   33e7e:	3b0b      	subs	r3, #11
   33e80:	2b1c      	cmp	r3, #28
   33e82:	dd00      	ble.n	33e86 <__aeabi_dmul+0x11a>
   33e84:	e17a      	b.n	3417c <__aeabi_dmul+0x410>
   33e86:	221d      	movs	r2, #29
   33e88:	1ad3      	subs	r3, r2, r3
   33e8a:	003a      	movs	r2, r7
   33e8c:	0001      	movs	r1, r0
   33e8e:	465c      	mov	r4, fp
   33e90:	40da      	lsrs	r2, r3
   33e92:	3908      	subs	r1, #8
   33e94:	408c      	lsls	r4, r1
   33e96:	0013      	movs	r3, r2
   33e98:	408f      	lsls	r7, r1
   33e9a:	4323      	orrs	r3, r4
   33e9c:	469b      	mov	fp, r3
   33e9e:	46b9      	mov	r9, r7
   33ea0:	2300      	movs	r3, #0
   33ea2:	4e2d      	ldr	r6, [pc, #180]	; (33f58 <__aeabi_dmul+0x1ec>)
   33ea4:	2700      	movs	r7, #0
   33ea6:	1a36      	subs	r6, r6, r0
   33ea8:	9302      	str	r3, [sp, #8]
   33eaa:	e784      	b.n	33db6 <__aeabi_dmul+0x4a>
   33eac:	4653      	mov	r3, sl
   33eae:	4323      	orrs	r3, r4
   33eb0:	d12a      	bne.n	33f08 <__aeabi_dmul+0x19c>
   33eb2:	2400      	movs	r4, #0
   33eb4:	2002      	movs	r0, #2
   33eb6:	e796      	b.n	33de6 <__aeabi_dmul+0x7a>
   33eb8:	4653      	mov	r3, sl
   33eba:	4323      	orrs	r3, r4
   33ebc:	d020      	beq.n	33f00 <__aeabi_dmul+0x194>
   33ebe:	2c00      	cmp	r4, #0
   33ec0:	d100      	bne.n	33ec4 <__aeabi_dmul+0x158>
   33ec2:	e157      	b.n	34174 <__aeabi_dmul+0x408>
   33ec4:	0020      	movs	r0, r4
   33ec6:	f000 fd53 	bl	34970 <__clzsi2>
   33eca:	0003      	movs	r3, r0
   33ecc:	3b0b      	subs	r3, #11
   33ece:	2b1c      	cmp	r3, #28
   33ed0:	dd00      	ble.n	33ed4 <__aeabi_dmul+0x168>
   33ed2:	e149      	b.n	34168 <__aeabi_dmul+0x3fc>
   33ed4:	211d      	movs	r1, #29
   33ed6:	1acb      	subs	r3, r1, r3
   33ed8:	4651      	mov	r1, sl
   33eda:	0002      	movs	r2, r0
   33edc:	40d9      	lsrs	r1, r3
   33ede:	4653      	mov	r3, sl
   33ee0:	3a08      	subs	r2, #8
   33ee2:	4094      	lsls	r4, r2
   33ee4:	4093      	lsls	r3, r2
   33ee6:	430c      	orrs	r4, r1
   33ee8:	4a1b      	ldr	r2, [pc, #108]	; (33f58 <__aeabi_dmul+0x1ec>)
   33eea:	1a12      	subs	r2, r2, r0
   33eec:	2000      	movs	r0, #0
   33eee:	e77a      	b.n	33de6 <__aeabi_dmul+0x7a>
   33ef0:	2501      	movs	r5, #1
   33ef2:	9b01      	ldr	r3, [sp, #4]
   33ef4:	4c14      	ldr	r4, [pc, #80]	; (33f48 <__aeabi_dmul+0x1dc>)
   33ef6:	401d      	ands	r5, r3
   33ef8:	2300      	movs	r3, #0
   33efa:	2200      	movs	r2, #0
   33efc:	4699      	mov	r9, r3
   33efe:	e79c      	b.n	33e3a <__aeabi_dmul+0xce>
   33f00:	2400      	movs	r4, #0
   33f02:	2200      	movs	r2, #0
   33f04:	2001      	movs	r0, #1
   33f06:	e76e      	b.n	33de6 <__aeabi_dmul+0x7a>
   33f08:	4653      	mov	r3, sl
   33f0a:	2003      	movs	r0, #3
   33f0c:	e76b      	b.n	33de6 <__aeabi_dmul+0x7a>
   33f0e:	2300      	movs	r3, #0
   33f10:	469b      	mov	fp, r3
   33f12:	3301      	adds	r3, #1
   33f14:	2704      	movs	r7, #4
   33f16:	2600      	movs	r6, #0
   33f18:	9302      	str	r3, [sp, #8]
   33f1a:	e74c      	b.n	33db6 <__aeabi_dmul+0x4a>
   33f1c:	2303      	movs	r3, #3
   33f1e:	4681      	mov	r9, r0
   33f20:	270c      	movs	r7, #12
   33f22:	9302      	str	r3, [sp, #8]
   33f24:	e747      	b.n	33db6 <__aeabi_dmul+0x4a>
   33f26:	2280      	movs	r2, #128	; 0x80
   33f28:	2300      	movs	r3, #0
   33f2a:	2500      	movs	r5, #0
   33f2c:	0312      	lsls	r2, r2, #12
   33f2e:	4699      	mov	r9, r3
   33f30:	4c05      	ldr	r4, [pc, #20]	; (33f48 <__aeabi_dmul+0x1dc>)
   33f32:	e782      	b.n	33e3a <__aeabi_dmul+0xce>
   33f34:	465c      	mov	r4, fp
   33f36:	464b      	mov	r3, r9
   33f38:	9802      	ldr	r0, [sp, #8]
   33f3a:	e76f      	b.n	33e1c <__aeabi_dmul+0xb0>
   33f3c:	465c      	mov	r4, fp
   33f3e:	464b      	mov	r3, r9
   33f40:	9501      	str	r5, [sp, #4]
   33f42:	9802      	ldr	r0, [sp, #8]
   33f44:	e76a      	b.n	33e1c <__aeabi_dmul+0xb0>
   33f46:	46c0      	nop			; (mov r8, r8)
   33f48:	000007ff 	.word	0x000007ff
   33f4c:	fffffc01 	.word	0xfffffc01
   33f50:	0003a264 	.word	0x0003a264
   33f54:	800fffff 	.word	0x800fffff
   33f58:	fffffc0d 	.word	0xfffffc0d
   33f5c:	464a      	mov	r2, r9
   33f5e:	4649      	mov	r1, r9
   33f60:	0c17      	lsrs	r7, r2, #16
   33f62:	0c1a      	lsrs	r2, r3, #16
   33f64:	041b      	lsls	r3, r3, #16
   33f66:	0c1b      	lsrs	r3, r3, #16
   33f68:	0408      	lsls	r0, r1, #16
   33f6a:	0019      	movs	r1, r3
   33f6c:	0c00      	lsrs	r0, r0, #16
   33f6e:	4341      	muls	r1, r0
   33f70:	0015      	movs	r5, r2
   33f72:	4688      	mov	r8, r1
   33f74:	0019      	movs	r1, r3
   33f76:	437d      	muls	r5, r7
   33f78:	4379      	muls	r1, r7
   33f7a:	9503      	str	r5, [sp, #12]
   33f7c:	4689      	mov	r9, r1
   33f7e:	0029      	movs	r1, r5
   33f80:	0015      	movs	r5, r2
   33f82:	4345      	muls	r5, r0
   33f84:	444d      	add	r5, r9
   33f86:	9502      	str	r5, [sp, #8]
   33f88:	4645      	mov	r5, r8
   33f8a:	0c2d      	lsrs	r5, r5, #16
   33f8c:	46aa      	mov	sl, r5
   33f8e:	9d02      	ldr	r5, [sp, #8]
   33f90:	4455      	add	r5, sl
   33f92:	45a9      	cmp	r9, r5
   33f94:	d906      	bls.n	33fa4 <__aeabi_dmul+0x238>
   33f96:	468a      	mov	sl, r1
   33f98:	2180      	movs	r1, #128	; 0x80
   33f9a:	0249      	lsls	r1, r1, #9
   33f9c:	4689      	mov	r9, r1
   33f9e:	44ca      	add	sl, r9
   33fa0:	4651      	mov	r1, sl
   33fa2:	9103      	str	r1, [sp, #12]
   33fa4:	0c29      	lsrs	r1, r5, #16
   33fa6:	9104      	str	r1, [sp, #16]
   33fa8:	4641      	mov	r1, r8
   33faa:	0409      	lsls	r1, r1, #16
   33fac:	042d      	lsls	r5, r5, #16
   33fae:	0c09      	lsrs	r1, r1, #16
   33fb0:	4688      	mov	r8, r1
   33fb2:	0029      	movs	r1, r5
   33fb4:	0c25      	lsrs	r5, r4, #16
   33fb6:	0424      	lsls	r4, r4, #16
   33fb8:	4441      	add	r1, r8
   33fba:	0c24      	lsrs	r4, r4, #16
   33fbc:	9105      	str	r1, [sp, #20]
   33fbe:	0021      	movs	r1, r4
   33fc0:	4341      	muls	r1, r0
   33fc2:	4688      	mov	r8, r1
   33fc4:	0021      	movs	r1, r4
   33fc6:	4379      	muls	r1, r7
   33fc8:	468a      	mov	sl, r1
   33fca:	4368      	muls	r0, r5
   33fcc:	4641      	mov	r1, r8
   33fce:	4450      	add	r0, sl
   33fd0:	4681      	mov	r9, r0
   33fd2:	0c08      	lsrs	r0, r1, #16
   33fd4:	4448      	add	r0, r9
   33fd6:	436f      	muls	r7, r5
   33fd8:	4582      	cmp	sl, r0
   33fda:	d903      	bls.n	33fe4 <__aeabi_dmul+0x278>
   33fdc:	2180      	movs	r1, #128	; 0x80
   33fde:	0249      	lsls	r1, r1, #9
   33fe0:	4689      	mov	r9, r1
   33fe2:	444f      	add	r7, r9
   33fe4:	0c01      	lsrs	r1, r0, #16
   33fe6:	4689      	mov	r9, r1
   33fe8:	0039      	movs	r1, r7
   33fea:	4449      	add	r1, r9
   33fec:	9102      	str	r1, [sp, #8]
   33fee:	4641      	mov	r1, r8
   33ff0:	040f      	lsls	r7, r1, #16
   33ff2:	9904      	ldr	r1, [sp, #16]
   33ff4:	0c3f      	lsrs	r7, r7, #16
   33ff6:	4688      	mov	r8, r1
   33ff8:	0400      	lsls	r0, r0, #16
   33ffa:	19c0      	adds	r0, r0, r7
   33ffc:	4480      	add	r8, r0
   33ffe:	4641      	mov	r1, r8
   34000:	9104      	str	r1, [sp, #16]
   34002:	4659      	mov	r1, fp
   34004:	0c0f      	lsrs	r7, r1, #16
   34006:	0409      	lsls	r1, r1, #16
   34008:	0c09      	lsrs	r1, r1, #16
   3400a:	4688      	mov	r8, r1
   3400c:	4359      	muls	r1, r3
   3400e:	468a      	mov	sl, r1
   34010:	0039      	movs	r1, r7
   34012:	4351      	muls	r1, r2
   34014:	4689      	mov	r9, r1
   34016:	4641      	mov	r1, r8
   34018:	434a      	muls	r2, r1
   3401a:	4651      	mov	r1, sl
   3401c:	0c09      	lsrs	r1, r1, #16
   3401e:	468b      	mov	fp, r1
   34020:	437b      	muls	r3, r7
   34022:	18d2      	adds	r2, r2, r3
   34024:	445a      	add	r2, fp
   34026:	4293      	cmp	r3, r2
   34028:	d903      	bls.n	34032 <__aeabi_dmul+0x2c6>
   3402a:	2380      	movs	r3, #128	; 0x80
   3402c:	025b      	lsls	r3, r3, #9
   3402e:	469b      	mov	fp, r3
   34030:	44d9      	add	r9, fp
   34032:	4651      	mov	r1, sl
   34034:	0409      	lsls	r1, r1, #16
   34036:	0c09      	lsrs	r1, r1, #16
   34038:	468a      	mov	sl, r1
   3403a:	4641      	mov	r1, r8
   3403c:	4361      	muls	r1, r4
   3403e:	437c      	muls	r4, r7
   34040:	0c13      	lsrs	r3, r2, #16
   34042:	0412      	lsls	r2, r2, #16
   34044:	444b      	add	r3, r9
   34046:	4452      	add	r2, sl
   34048:	46a1      	mov	r9, r4
   3404a:	468a      	mov	sl, r1
   3404c:	003c      	movs	r4, r7
   3404e:	4641      	mov	r1, r8
   34050:	436c      	muls	r4, r5
   34052:	434d      	muls	r5, r1
   34054:	4651      	mov	r1, sl
   34056:	444d      	add	r5, r9
   34058:	0c0f      	lsrs	r7, r1, #16
   3405a:	197d      	adds	r5, r7, r5
   3405c:	45a9      	cmp	r9, r5
   3405e:	d903      	bls.n	34068 <__aeabi_dmul+0x2fc>
   34060:	2180      	movs	r1, #128	; 0x80
   34062:	0249      	lsls	r1, r1, #9
   34064:	4688      	mov	r8, r1
   34066:	4444      	add	r4, r8
   34068:	9f04      	ldr	r7, [sp, #16]
   3406a:	9903      	ldr	r1, [sp, #12]
   3406c:	46b8      	mov	r8, r7
   3406e:	4441      	add	r1, r8
   34070:	468b      	mov	fp, r1
   34072:	4583      	cmp	fp, r0
   34074:	4180      	sbcs	r0, r0
   34076:	4241      	negs	r1, r0
   34078:	4688      	mov	r8, r1
   3407a:	4651      	mov	r1, sl
   3407c:	0408      	lsls	r0, r1, #16
   3407e:	042f      	lsls	r7, r5, #16
   34080:	0c00      	lsrs	r0, r0, #16
   34082:	183f      	adds	r7, r7, r0
   34084:	4658      	mov	r0, fp
   34086:	9902      	ldr	r1, [sp, #8]
   34088:	1810      	adds	r0, r2, r0
   3408a:	4689      	mov	r9, r1
   3408c:	4290      	cmp	r0, r2
   3408e:	4192      	sbcs	r2, r2
   34090:	444f      	add	r7, r9
   34092:	46ba      	mov	sl, r7
   34094:	4252      	negs	r2, r2
   34096:	4699      	mov	r9, r3
   34098:	4693      	mov	fp, r2
   3409a:	44c2      	add	sl, r8
   3409c:	44d1      	add	r9, sl
   3409e:	44cb      	add	fp, r9
   340a0:	428f      	cmp	r7, r1
   340a2:	41bf      	sbcs	r7, r7
   340a4:	45c2      	cmp	sl, r8
   340a6:	4189      	sbcs	r1, r1
   340a8:	4599      	cmp	r9, r3
   340aa:	419b      	sbcs	r3, r3
   340ac:	4593      	cmp	fp, r2
   340ae:	4192      	sbcs	r2, r2
   340b0:	427f      	negs	r7, r7
   340b2:	4249      	negs	r1, r1
   340b4:	0c2d      	lsrs	r5, r5, #16
   340b6:	4252      	negs	r2, r2
   340b8:	430f      	orrs	r7, r1
   340ba:	425b      	negs	r3, r3
   340bc:	4313      	orrs	r3, r2
   340be:	197f      	adds	r7, r7, r5
   340c0:	18ff      	adds	r7, r7, r3
   340c2:	465b      	mov	r3, fp
   340c4:	193c      	adds	r4, r7, r4
   340c6:	0ddb      	lsrs	r3, r3, #23
   340c8:	9a05      	ldr	r2, [sp, #20]
   340ca:	0264      	lsls	r4, r4, #9
   340cc:	431c      	orrs	r4, r3
   340ce:	0243      	lsls	r3, r0, #9
   340d0:	4313      	orrs	r3, r2
   340d2:	1e5d      	subs	r5, r3, #1
   340d4:	41ab      	sbcs	r3, r5
   340d6:	465a      	mov	r2, fp
   340d8:	0dc0      	lsrs	r0, r0, #23
   340da:	4303      	orrs	r3, r0
   340dc:	0252      	lsls	r2, r2, #9
   340de:	4313      	orrs	r3, r2
   340e0:	01e2      	lsls	r2, r4, #7
   340e2:	d556      	bpl.n	34192 <__aeabi_dmul+0x426>
   340e4:	2001      	movs	r0, #1
   340e6:	085a      	lsrs	r2, r3, #1
   340e8:	4003      	ands	r3, r0
   340ea:	4313      	orrs	r3, r2
   340ec:	07e2      	lsls	r2, r4, #31
   340ee:	4313      	orrs	r3, r2
   340f0:	0864      	lsrs	r4, r4, #1
   340f2:	485a      	ldr	r0, [pc, #360]	; (3425c <__aeabi_dmul+0x4f0>)
   340f4:	4460      	add	r0, ip
   340f6:	2800      	cmp	r0, #0
   340f8:	dd4d      	ble.n	34196 <__aeabi_dmul+0x42a>
   340fa:	075a      	lsls	r2, r3, #29
   340fc:	d009      	beq.n	34112 <__aeabi_dmul+0x3a6>
   340fe:	220f      	movs	r2, #15
   34100:	401a      	ands	r2, r3
   34102:	2a04      	cmp	r2, #4
   34104:	d005      	beq.n	34112 <__aeabi_dmul+0x3a6>
   34106:	1d1a      	adds	r2, r3, #4
   34108:	429a      	cmp	r2, r3
   3410a:	419b      	sbcs	r3, r3
   3410c:	425b      	negs	r3, r3
   3410e:	18e4      	adds	r4, r4, r3
   34110:	0013      	movs	r3, r2
   34112:	01e2      	lsls	r2, r4, #7
   34114:	d504      	bpl.n	34120 <__aeabi_dmul+0x3b4>
   34116:	2080      	movs	r0, #128	; 0x80
   34118:	4a51      	ldr	r2, [pc, #324]	; (34260 <__aeabi_dmul+0x4f4>)
   3411a:	00c0      	lsls	r0, r0, #3
   3411c:	4014      	ands	r4, r2
   3411e:	4460      	add	r0, ip
   34120:	4a50      	ldr	r2, [pc, #320]	; (34264 <__aeabi_dmul+0x4f8>)
   34122:	4290      	cmp	r0, r2
   34124:	dd00      	ble.n	34128 <__aeabi_dmul+0x3bc>
   34126:	e6e3      	b.n	33ef0 <__aeabi_dmul+0x184>
   34128:	2501      	movs	r5, #1
   3412a:	08db      	lsrs	r3, r3, #3
   3412c:	0762      	lsls	r2, r4, #29
   3412e:	431a      	orrs	r2, r3
   34130:	0264      	lsls	r4, r4, #9
   34132:	9b01      	ldr	r3, [sp, #4]
   34134:	4691      	mov	r9, r2
   34136:	0b22      	lsrs	r2, r4, #12
   34138:	0544      	lsls	r4, r0, #21
   3413a:	0d64      	lsrs	r4, r4, #21
   3413c:	401d      	ands	r5, r3
   3413e:	e67c      	b.n	33e3a <__aeabi_dmul+0xce>
   34140:	2280      	movs	r2, #128	; 0x80
   34142:	4659      	mov	r1, fp
   34144:	0312      	lsls	r2, r2, #12
   34146:	4211      	tst	r1, r2
   34148:	d008      	beq.n	3415c <__aeabi_dmul+0x3f0>
   3414a:	4214      	tst	r4, r2
   3414c:	d106      	bne.n	3415c <__aeabi_dmul+0x3f0>
   3414e:	4322      	orrs	r2, r4
   34150:	0312      	lsls	r2, r2, #12
   34152:	0b12      	lsrs	r2, r2, #12
   34154:	4645      	mov	r5, r8
   34156:	4699      	mov	r9, r3
   34158:	4c43      	ldr	r4, [pc, #268]	; (34268 <__aeabi_dmul+0x4fc>)
   3415a:	e66e      	b.n	33e3a <__aeabi_dmul+0xce>
   3415c:	465b      	mov	r3, fp
   3415e:	431a      	orrs	r2, r3
   34160:	0312      	lsls	r2, r2, #12
   34162:	0b12      	lsrs	r2, r2, #12
   34164:	4c40      	ldr	r4, [pc, #256]	; (34268 <__aeabi_dmul+0x4fc>)
   34166:	e668      	b.n	33e3a <__aeabi_dmul+0xce>
   34168:	0003      	movs	r3, r0
   3416a:	4654      	mov	r4, sl
   3416c:	3b28      	subs	r3, #40	; 0x28
   3416e:	409c      	lsls	r4, r3
   34170:	2300      	movs	r3, #0
   34172:	e6b9      	b.n	33ee8 <__aeabi_dmul+0x17c>
   34174:	f000 fbfc 	bl	34970 <__clzsi2>
   34178:	3020      	adds	r0, #32
   3417a:	e6a6      	b.n	33eca <__aeabi_dmul+0x15e>
   3417c:	0003      	movs	r3, r0
   3417e:	3b28      	subs	r3, #40	; 0x28
   34180:	409f      	lsls	r7, r3
   34182:	2300      	movs	r3, #0
   34184:	46bb      	mov	fp, r7
   34186:	4699      	mov	r9, r3
   34188:	e68a      	b.n	33ea0 <__aeabi_dmul+0x134>
   3418a:	f000 fbf1 	bl	34970 <__clzsi2>
   3418e:	3020      	adds	r0, #32
   34190:	e674      	b.n	33e7c <__aeabi_dmul+0x110>
   34192:	46b4      	mov	ip, r6
   34194:	e7ad      	b.n	340f2 <__aeabi_dmul+0x386>
   34196:	2501      	movs	r5, #1
   34198:	1a2a      	subs	r2, r5, r0
   3419a:	2a38      	cmp	r2, #56	; 0x38
   3419c:	dd06      	ble.n	341ac <__aeabi_dmul+0x440>
   3419e:	9b01      	ldr	r3, [sp, #4]
   341a0:	2400      	movs	r4, #0
   341a2:	401d      	ands	r5, r3
   341a4:	2300      	movs	r3, #0
   341a6:	2200      	movs	r2, #0
   341a8:	4699      	mov	r9, r3
   341aa:	e646      	b.n	33e3a <__aeabi_dmul+0xce>
   341ac:	2a1f      	cmp	r2, #31
   341ae:	dc21      	bgt.n	341f4 <__aeabi_dmul+0x488>
   341b0:	2520      	movs	r5, #32
   341b2:	0020      	movs	r0, r4
   341b4:	1aad      	subs	r5, r5, r2
   341b6:	001e      	movs	r6, r3
   341b8:	40ab      	lsls	r3, r5
   341ba:	40a8      	lsls	r0, r5
   341bc:	40d6      	lsrs	r6, r2
   341be:	1e5d      	subs	r5, r3, #1
   341c0:	41ab      	sbcs	r3, r5
   341c2:	4330      	orrs	r0, r6
   341c4:	4318      	orrs	r0, r3
   341c6:	40d4      	lsrs	r4, r2
   341c8:	0743      	lsls	r3, r0, #29
   341ca:	d009      	beq.n	341e0 <__aeabi_dmul+0x474>
   341cc:	230f      	movs	r3, #15
   341ce:	4003      	ands	r3, r0
   341d0:	2b04      	cmp	r3, #4
   341d2:	d005      	beq.n	341e0 <__aeabi_dmul+0x474>
   341d4:	0003      	movs	r3, r0
   341d6:	1d18      	adds	r0, r3, #4
   341d8:	4298      	cmp	r0, r3
   341da:	419b      	sbcs	r3, r3
   341dc:	425b      	negs	r3, r3
   341de:	18e4      	adds	r4, r4, r3
   341e0:	0223      	lsls	r3, r4, #8
   341e2:	d521      	bpl.n	34228 <__aeabi_dmul+0x4bc>
   341e4:	2501      	movs	r5, #1
   341e6:	9b01      	ldr	r3, [sp, #4]
   341e8:	2401      	movs	r4, #1
   341ea:	401d      	ands	r5, r3
   341ec:	2300      	movs	r3, #0
   341ee:	2200      	movs	r2, #0
   341f0:	4699      	mov	r9, r3
   341f2:	e622      	b.n	33e3a <__aeabi_dmul+0xce>
   341f4:	251f      	movs	r5, #31
   341f6:	0021      	movs	r1, r4
   341f8:	426d      	negs	r5, r5
   341fa:	1a28      	subs	r0, r5, r0
   341fc:	40c1      	lsrs	r1, r0
   341fe:	0008      	movs	r0, r1
   34200:	2a20      	cmp	r2, #32
   34202:	d01d      	beq.n	34240 <__aeabi_dmul+0x4d4>
   34204:	355f      	adds	r5, #95	; 0x5f
   34206:	1aaa      	subs	r2, r5, r2
   34208:	4094      	lsls	r4, r2
   3420a:	4323      	orrs	r3, r4
   3420c:	1e5c      	subs	r4, r3, #1
   3420e:	41a3      	sbcs	r3, r4
   34210:	2507      	movs	r5, #7
   34212:	4303      	orrs	r3, r0
   34214:	401d      	ands	r5, r3
   34216:	2200      	movs	r2, #0
   34218:	2d00      	cmp	r5, #0
   3421a:	d009      	beq.n	34230 <__aeabi_dmul+0x4c4>
   3421c:	220f      	movs	r2, #15
   3421e:	2400      	movs	r4, #0
   34220:	401a      	ands	r2, r3
   34222:	0018      	movs	r0, r3
   34224:	2a04      	cmp	r2, #4
   34226:	d1d6      	bne.n	341d6 <__aeabi_dmul+0x46a>
   34228:	0003      	movs	r3, r0
   3422a:	0765      	lsls	r5, r4, #29
   3422c:	0264      	lsls	r4, r4, #9
   3422e:	0b22      	lsrs	r2, r4, #12
   34230:	08db      	lsrs	r3, r3, #3
   34232:	432b      	orrs	r3, r5
   34234:	2501      	movs	r5, #1
   34236:	4699      	mov	r9, r3
   34238:	9b01      	ldr	r3, [sp, #4]
   3423a:	2400      	movs	r4, #0
   3423c:	401d      	ands	r5, r3
   3423e:	e5fc      	b.n	33e3a <__aeabi_dmul+0xce>
   34240:	2400      	movs	r4, #0
   34242:	e7e2      	b.n	3420a <__aeabi_dmul+0x49e>
   34244:	2280      	movs	r2, #128	; 0x80
   34246:	2501      	movs	r5, #1
   34248:	0312      	lsls	r2, r2, #12
   3424a:	4322      	orrs	r2, r4
   3424c:	9901      	ldr	r1, [sp, #4]
   3424e:	0312      	lsls	r2, r2, #12
   34250:	0b12      	lsrs	r2, r2, #12
   34252:	400d      	ands	r5, r1
   34254:	4699      	mov	r9, r3
   34256:	4c04      	ldr	r4, [pc, #16]	; (34268 <__aeabi_dmul+0x4fc>)
   34258:	e5ef      	b.n	33e3a <__aeabi_dmul+0xce>
   3425a:	46c0      	nop			; (mov r8, r8)
   3425c:	000003ff 	.word	0x000003ff
   34260:	feffffff 	.word	0xfeffffff
   34264:	000007fe 	.word	0x000007fe
   34268:	000007ff 	.word	0x000007ff

0003426c <__aeabi_dsub>:
   3426c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3426e:	4646      	mov	r6, r8
   34270:	46d6      	mov	lr, sl
   34272:	464f      	mov	r7, r9
   34274:	030c      	lsls	r4, r1, #12
   34276:	b5c0      	push	{r6, r7, lr}
   34278:	0fcd      	lsrs	r5, r1, #31
   3427a:	004e      	lsls	r6, r1, #1
   3427c:	0a61      	lsrs	r1, r4, #9
   3427e:	0f44      	lsrs	r4, r0, #29
   34280:	430c      	orrs	r4, r1
   34282:	00c1      	lsls	r1, r0, #3
   34284:	0058      	lsls	r0, r3, #1
   34286:	0d40      	lsrs	r0, r0, #21
   34288:	4684      	mov	ip, r0
   3428a:	468a      	mov	sl, r1
   3428c:	000f      	movs	r7, r1
   3428e:	0319      	lsls	r1, r3, #12
   34290:	0f50      	lsrs	r0, r2, #29
   34292:	0a49      	lsrs	r1, r1, #9
   34294:	4301      	orrs	r1, r0
   34296:	48c6      	ldr	r0, [pc, #792]	; (345b0 <__aeabi_dsub+0x344>)
   34298:	0d76      	lsrs	r6, r6, #21
   3429a:	46a8      	mov	r8, r5
   3429c:	0fdb      	lsrs	r3, r3, #31
   3429e:	00d2      	lsls	r2, r2, #3
   342a0:	4584      	cmp	ip, r0
   342a2:	d100      	bne.n	342a6 <__aeabi_dsub+0x3a>
   342a4:	e0d8      	b.n	34458 <__aeabi_dsub+0x1ec>
   342a6:	2001      	movs	r0, #1
   342a8:	4043      	eors	r3, r0
   342aa:	42ab      	cmp	r3, r5
   342ac:	d100      	bne.n	342b0 <__aeabi_dsub+0x44>
   342ae:	e0a6      	b.n	343fe <__aeabi_dsub+0x192>
   342b0:	4660      	mov	r0, ip
   342b2:	1a35      	subs	r5, r6, r0
   342b4:	2d00      	cmp	r5, #0
   342b6:	dc00      	bgt.n	342ba <__aeabi_dsub+0x4e>
   342b8:	e105      	b.n	344c6 <__aeabi_dsub+0x25a>
   342ba:	2800      	cmp	r0, #0
   342bc:	d110      	bne.n	342e0 <__aeabi_dsub+0x74>
   342be:	000b      	movs	r3, r1
   342c0:	4313      	orrs	r3, r2
   342c2:	d100      	bne.n	342c6 <__aeabi_dsub+0x5a>
   342c4:	e0d7      	b.n	34476 <__aeabi_dsub+0x20a>
   342c6:	1e6b      	subs	r3, r5, #1
   342c8:	2b00      	cmp	r3, #0
   342ca:	d000      	beq.n	342ce <__aeabi_dsub+0x62>
   342cc:	e14b      	b.n	34566 <__aeabi_dsub+0x2fa>
   342ce:	4653      	mov	r3, sl
   342d0:	1a9f      	subs	r7, r3, r2
   342d2:	45ba      	cmp	sl, r7
   342d4:	4180      	sbcs	r0, r0
   342d6:	1a64      	subs	r4, r4, r1
   342d8:	4240      	negs	r0, r0
   342da:	1a24      	subs	r4, r4, r0
   342dc:	2601      	movs	r6, #1
   342de:	e01e      	b.n	3431e <__aeabi_dsub+0xb2>
   342e0:	4bb3      	ldr	r3, [pc, #716]	; (345b0 <__aeabi_dsub+0x344>)
   342e2:	429e      	cmp	r6, r3
   342e4:	d048      	beq.n	34378 <__aeabi_dsub+0x10c>
   342e6:	2380      	movs	r3, #128	; 0x80
   342e8:	041b      	lsls	r3, r3, #16
   342ea:	4319      	orrs	r1, r3
   342ec:	2d38      	cmp	r5, #56	; 0x38
   342ee:	dd00      	ble.n	342f2 <__aeabi_dsub+0x86>
   342f0:	e119      	b.n	34526 <__aeabi_dsub+0x2ba>
   342f2:	2d1f      	cmp	r5, #31
   342f4:	dd00      	ble.n	342f8 <__aeabi_dsub+0x8c>
   342f6:	e14c      	b.n	34592 <__aeabi_dsub+0x326>
   342f8:	2320      	movs	r3, #32
   342fa:	000f      	movs	r7, r1
   342fc:	1b5b      	subs	r3, r3, r5
   342fe:	0010      	movs	r0, r2
   34300:	409a      	lsls	r2, r3
   34302:	409f      	lsls	r7, r3
   34304:	40e8      	lsrs	r0, r5
   34306:	1e53      	subs	r3, r2, #1
   34308:	419a      	sbcs	r2, r3
   3430a:	40e9      	lsrs	r1, r5
   3430c:	4307      	orrs	r7, r0
   3430e:	4317      	orrs	r7, r2
   34310:	4653      	mov	r3, sl
   34312:	1bdf      	subs	r7, r3, r7
   34314:	1a61      	subs	r1, r4, r1
   34316:	45ba      	cmp	sl, r7
   34318:	41a4      	sbcs	r4, r4
   3431a:	4264      	negs	r4, r4
   3431c:	1b0c      	subs	r4, r1, r4
   3431e:	0223      	lsls	r3, r4, #8
   34320:	d400      	bmi.n	34324 <__aeabi_dsub+0xb8>
   34322:	e0c5      	b.n	344b0 <__aeabi_dsub+0x244>
   34324:	0264      	lsls	r4, r4, #9
   34326:	0a65      	lsrs	r5, r4, #9
   34328:	2d00      	cmp	r5, #0
   3432a:	d100      	bne.n	3432e <__aeabi_dsub+0xc2>
   3432c:	e0f6      	b.n	3451c <__aeabi_dsub+0x2b0>
   3432e:	0028      	movs	r0, r5
   34330:	f000 fb1e 	bl	34970 <__clzsi2>
   34334:	0003      	movs	r3, r0
   34336:	3b08      	subs	r3, #8
   34338:	2b1f      	cmp	r3, #31
   3433a:	dd00      	ble.n	3433e <__aeabi_dsub+0xd2>
   3433c:	e0e9      	b.n	34512 <__aeabi_dsub+0x2a6>
   3433e:	2220      	movs	r2, #32
   34340:	003c      	movs	r4, r7
   34342:	1ad2      	subs	r2, r2, r3
   34344:	409d      	lsls	r5, r3
   34346:	40d4      	lsrs	r4, r2
   34348:	409f      	lsls	r7, r3
   3434a:	4325      	orrs	r5, r4
   3434c:	429e      	cmp	r6, r3
   3434e:	dd00      	ble.n	34352 <__aeabi_dsub+0xe6>
   34350:	e0db      	b.n	3450a <__aeabi_dsub+0x29e>
   34352:	1b9e      	subs	r6, r3, r6
   34354:	1c73      	adds	r3, r6, #1
   34356:	2b1f      	cmp	r3, #31
   34358:	dd00      	ble.n	3435c <__aeabi_dsub+0xf0>
   3435a:	e10a      	b.n	34572 <__aeabi_dsub+0x306>
   3435c:	2220      	movs	r2, #32
   3435e:	0038      	movs	r0, r7
   34360:	1ad2      	subs	r2, r2, r3
   34362:	0029      	movs	r1, r5
   34364:	4097      	lsls	r7, r2
   34366:	002c      	movs	r4, r5
   34368:	4091      	lsls	r1, r2
   3436a:	40d8      	lsrs	r0, r3
   3436c:	1e7a      	subs	r2, r7, #1
   3436e:	4197      	sbcs	r7, r2
   34370:	40dc      	lsrs	r4, r3
   34372:	2600      	movs	r6, #0
   34374:	4301      	orrs	r1, r0
   34376:	430f      	orrs	r7, r1
   34378:	077b      	lsls	r3, r7, #29
   3437a:	d009      	beq.n	34390 <__aeabi_dsub+0x124>
   3437c:	230f      	movs	r3, #15
   3437e:	403b      	ands	r3, r7
   34380:	2b04      	cmp	r3, #4
   34382:	d005      	beq.n	34390 <__aeabi_dsub+0x124>
   34384:	1d3b      	adds	r3, r7, #4
   34386:	42bb      	cmp	r3, r7
   34388:	41bf      	sbcs	r7, r7
   3438a:	427f      	negs	r7, r7
   3438c:	19e4      	adds	r4, r4, r7
   3438e:	001f      	movs	r7, r3
   34390:	0223      	lsls	r3, r4, #8
   34392:	d525      	bpl.n	343e0 <__aeabi_dsub+0x174>
   34394:	4b86      	ldr	r3, [pc, #536]	; (345b0 <__aeabi_dsub+0x344>)
   34396:	3601      	adds	r6, #1
   34398:	429e      	cmp	r6, r3
   3439a:	d100      	bne.n	3439e <__aeabi_dsub+0x132>
   3439c:	e0af      	b.n	344fe <__aeabi_dsub+0x292>
   3439e:	4b85      	ldr	r3, [pc, #532]	; (345b4 <__aeabi_dsub+0x348>)
   343a0:	2501      	movs	r5, #1
   343a2:	401c      	ands	r4, r3
   343a4:	4643      	mov	r3, r8
   343a6:	0762      	lsls	r2, r4, #29
   343a8:	08ff      	lsrs	r7, r7, #3
   343aa:	0264      	lsls	r4, r4, #9
   343ac:	0576      	lsls	r6, r6, #21
   343ae:	4317      	orrs	r7, r2
   343b0:	0b24      	lsrs	r4, r4, #12
   343b2:	0d76      	lsrs	r6, r6, #21
   343b4:	401d      	ands	r5, r3
   343b6:	2100      	movs	r1, #0
   343b8:	0324      	lsls	r4, r4, #12
   343ba:	0b23      	lsrs	r3, r4, #12
   343bc:	0d0c      	lsrs	r4, r1, #20
   343be:	4a7e      	ldr	r2, [pc, #504]	; (345b8 <__aeabi_dsub+0x34c>)
   343c0:	0524      	lsls	r4, r4, #20
   343c2:	431c      	orrs	r4, r3
   343c4:	4014      	ands	r4, r2
   343c6:	0533      	lsls	r3, r6, #20
   343c8:	4323      	orrs	r3, r4
   343ca:	005b      	lsls	r3, r3, #1
   343cc:	07ed      	lsls	r5, r5, #31
   343ce:	085b      	lsrs	r3, r3, #1
   343d0:	432b      	orrs	r3, r5
   343d2:	0038      	movs	r0, r7
   343d4:	0019      	movs	r1, r3
   343d6:	bc1c      	pop	{r2, r3, r4}
   343d8:	4690      	mov	r8, r2
   343da:	4699      	mov	r9, r3
   343dc:	46a2      	mov	sl, r4
   343de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   343e0:	2501      	movs	r5, #1
   343e2:	4643      	mov	r3, r8
   343e4:	0762      	lsls	r2, r4, #29
   343e6:	08ff      	lsrs	r7, r7, #3
   343e8:	4317      	orrs	r7, r2
   343ea:	08e4      	lsrs	r4, r4, #3
   343ec:	401d      	ands	r5, r3
   343ee:	4b70      	ldr	r3, [pc, #448]	; (345b0 <__aeabi_dsub+0x344>)
   343f0:	429e      	cmp	r6, r3
   343f2:	d036      	beq.n	34462 <__aeabi_dsub+0x1f6>
   343f4:	0324      	lsls	r4, r4, #12
   343f6:	0576      	lsls	r6, r6, #21
   343f8:	0b24      	lsrs	r4, r4, #12
   343fa:	0d76      	lsrs	r6, r6, #21
   343fc:	e7db      	b.n	343b6 <__aeabi_dsub+0x14a>
   343fe:	4663      	mov	r3, ip
   34400:	1af3      	subs	r3, r6, r3
   34402:	2b00      	cmp	r3, #0
   34404:	dc00      	bgt.n	34408 <__aeabi_dsub+0x19c>
   34406:	e094      	b.n	34532 <__aeabi_dsub+0x2c6>
   34408:	4660      	mov	r0, ip
   3440a:	2800      	cmp	r0, #0
   3440c:	d035      	beq.n	3447a <__aeabi_dsub+0x20e>
   3440e:	4868      	ldr	r0, [pc, #416]	; (345b0 <__aeabi_dsub+0x344>)
   34410:	4286      	cmp	r6, r0
   34412:	d0b1      	beq.n	34378 <__aeabi_dsub+0x10c>
   34414:	2780      	movs	r7, #128	; 0x80
   34416:	043f      	lsls	r7, r7, #16
   34418:	4339      	orrs	r1, r7
   3441a:	2b38      	cmp	r3, #56	; 0x38
   3441c:	dc00      	bgt.n	34420 <__aeabi_dsub+0x1b4>
   3441e:	e0fd      	b.n	3461c <__aeabi_dsub+0x3b0>
   34420:	430a      	orrs	r2, r1
   34422:	0017      	movs	r7, r2
   34424:	2100      	movs	r1, #0
   34426:	1e7a      	subs	r2, r7, #1
   34428:	4197      	sbcs	r7, r2
   3442a:	4457      	add	r7, sl
   3442c:	4557      	cmp	r7, sl
   3442e:	4180      	sbcs	r0, r0
   34430:	1909      	adds	r1, r1, r4
   34432:	4244      	negs	r4, r0
   34434:	190c      	adds	r4, r1, r4
   34436:	0223      	lsls	r3, r4, #8
   34438:	d53a      	bpl.n	344b0 <__aeabi_dsub+0x244>
   3443a:	4b5d      	ldr	r3, [pc, #372]	; (345b0 <__aeabi_dsub+0x344>)
   3443c:	3601      	adds	r6, #1
   3443e:	429e      	cmp	r6, r3
   34440:	d100      	bne.n	34444 <__aeabi_dsub+0x1d8>
   34442:	e14b      	b.n	346dc <__aeabi_dsub+0x470>
   34444:	2201      	movs	r2, #1
   34446:	4b5b      	ldr	r3, [pc, #364]	; (345b4 <__aeabi_dsub+0x348>)
   34448:	401c      	ands	r4, r3
   3444a:	087b      	lsrs	r3, r7, #1
   3444c:	4017      	ands	r7, r2
   3444e:	431f      	orrs	r7, r3
   34450:	07e2      	lsls	r2, r4, #31
   34452:	4317      	orrs	r7, r2
   34454:	0864      	lsrs	r4, r4, #1
   34456:	e78f      	b.n	34378 <__aeabi_dsub+0x10c>
   34458:	0008      	movs	r0, r1
   3445a:	4310      	orrs	r0, r2
   3445c:	d000      	beq.n	34460 <__aeabi_dsub+0x1f4>
   3445e:	e724      	b.n	342aa <__aeabi_dsub+0x3e>
   34460:	e721      	b.n	342a6 <__aeabi_dsub+0x3a>
   34462:	0023      	movs	r3, r4
   34464:	433b      	orrs	r3, r7
   34466:	d100      	bne.n	3446a <__aeabi_dsub+0x1fe>
   34468:	e1b9      	b.n	347de <__aeabi_dsub+0x572>
   3446a:	2280      	movs	r2, #128	; 0x80
   3446c:	0312      	lsls	r2, r2, #12
   3446e:	4314      	orrs	r4, r2
   34470:	0324      	lsls	r4, r4, #12
   34472:	0b24      	lsrs	r4, r4, #12
   34474:	e79f      	b.n	343b6 <__aeabi_dsub+0x14a>
   34476:	002e      	movs	r6, r5
   34478:	e77e      	b.n	34378 <__aeabi_dsub+0x10c>
   3447a:	0008      	movs	r0, r1
   3447c:	4310      	orrs	r0, r2
   3447e:	d100      	bne.n	34482 <__aeabi_dsub+0x216>
   34480:	e0ca      	b.n	34618 <__aeabi_dsub+0x3ac>
   34482:	1e58      	subs	r0, r3, #1
   34484:	4684      	mov	ip, r0
   34486:	2800      	cmp	r0, #0
   34488:	d000      	beq.n	3448c <__aeabi_dsub+0x220>
   3448a:	e0e7      	b.n	3465c <__aeabi_dsub+0x3f0>
   3448c:	4452      	add	r2, sl
   3448e:	4552      	cmp	r2, sl
   34490:	4180      	sbcs	r0, r0
   34492:	1864      	adds	r4, r4, r1
   34494:	4240      	negs	r0, r0
   34496:	1824      	adds	r4, r4, r0
   34498:	0017      	movs	r7, r2
   3449a:	2601      	movs	r6, #1
   3449c:	0223      	lsls	r3, r4, #8
   3449e:	d507      	bpl.n	344b0 <__aeabi_dsub+0x244>
   344a0:	2602      	movs	r6, #2
   344a2:	e7cf      	b.n	34444 <__aeabi_dsub+0x1d8>
   344a4:	4664      	mov	r4, ip
   344a6:	432c      	orrs	r4, r5
   344a8:	d100      	bne.n	344ac <__aeabi_dsub+0x240>
   344aa:	e1b3      	b.n	34814 <__aeabi_dsub+0x5a8>
   344ac:	002c      	movs	r4, r5
   344ae:	4667      	mov	r7, ip
   344b0:	077b      	lsls	r3, r7, #29
   344b2:	d000      	beq.n	344b6 <__aeabi_dsub+0x24a>
   344b4:	e762      	b.n	3437c <__aeabi_dsub+0x110>
   344b6:	0763      	lsls	r3, r4, #29
   344b8:	08ff      	lsrs	r7, r7, #3
   344ba:	431f      	orrs	r7, r3
   344bc:	2501      	movs	r5, #1
   344be:	4643      	mov	r3, r8
   344c0:	08e4      	lsrs	r4, r4, #3
   344c2:	401d      	ands	r5, r3
   344c4:	e793      	b.n	343ee <__aeabi_dsub+0x182>
   344c6:	2d00      	cmp	r5, #0
   344c8:	d178      	bne.n	345bc <__aeabi_dsub+0x350>
   344ca:	1c75      	adds	r5, r6, #1
   344cc:	056d      	lsls	r5, r5, #21
   344ce:	0d6d      	lsrs	r5, r5, #21
   344d0:	2d01      	cmp	r5, #1
   344d2:	dc00      	bgt.n	344d6 <__aeabi_dsub+0x26a>
   344d4:	e0f2      	b.n	346bc <__aeabi_dsub+0x450>
   344d6:	4650      	mov	r0, sl
   344d8:	1a80      	subs	r0, r0, r2
   344da:	4582      	cmp	sl, r0
   344dc:	41bf      	sbcs	r7, r7
   344de:	1a65      	subs	r5, r4, r1
   344e0:	427f      	negs	r7, r7
   344e2:	1bed      	subs	r5, r5, r7
   344e4:	4684      	mov	ip, r0
   344e6:	0228      	lsls	r0, r5, #8
   344e8:	d400      	bmi.n	344ec <__aeabi_dsub+0x280>
   344ea:	e08c      	b.n	34606 <__aeabi_dsub+0x39a>
   344ec:	4650      	mov	r0, sl
   344ee:	1a17      	subs	r7, r2, r0
   344f0:	42ba      	cmp	r2, r7
   344f2:	4192      	sbcs	r2, r2
   344f4:	1b0c      	subs	r4, r1, r4
   344f6:	4255      	negs	r5, r2
   344f8:	1b65      	subs	r5, r4, r5
   344fa:	4698      	mov	r8, r3
   344fc:	e714      	b.n	34328 <__aeabi_dsub+0xbc>
   344fe:	2501      	movs	r5, #1
   34500:	4643      	mov	r3, r8
   34502:	2400      	movs	r4, #0
   34504:	401d      	ands	r5, r3
   34506:	2700      	movs	r7, #0
   34508:	e755      	b.n	343b6 <__aeabi_dsub+0x14a>
   3450a:	4c2a      	ldr	r4, [pc, #168]	; (345b4 <__aeabi_dsub+0x348>)
   3450c:	1af6      	subs	r6, r6, r3
   3450e:	402c      	ands	r4, r5
   34510:	e732      	b.n	34378 <__aeabi_dsub+0x10c>
   34512:	003d      	movs	r5, r7
   34514:	3828      	subs	r0, #40	; 0x28
   34516:	4085      	lsls	r5, r0
   34518:	2700      	movs	r7, #0
   3451a:	e717      	b.n	3434c <__aeabi_dsub+0xe0>
   3451c:	0038      	movs	r0, r7
   3451e:	f000 fa27 	bl	34970 <__clzsi2>
   34522:	3020      	adds	r0, #32
   34524:	e706      	b.n	34334 <__aeabi_dsub+0xc8>
   34526:	430a      	orrs	r2, r1
   34528:	0017      	movs	r7, r2
   3452a:	2100      	movs	r1, #0
   3452c:	1e7a      	subs	r2, r7, #1
   3452e:	4197      	sbcs	r7, r2
   34530:	e6ee      	b.n	34310 <__aeabi_dsub+0xa4>
   34532:	2b00      	cmp	r3, #0
   34534:	d000      	beq.n	34538 <__aeabi_dsub+0x2cc>
   34536:	e0e5      	b.n	34704 <__aeabi_dsub+0x498>
   34538:	1c73      	adds	r3, r6, #1
   3453a:	469c      	mov	ip, r3
   3453c:	055b      	lsls	r3, r3, #21
   3453e:	0d5b      	lsrs	r3, r3, #21
   34540:	2b01      	cmp	r3, #1
   34542:	dc00      	bgt.n	34546 <__aeabi_dsub+0x2da>
   34544:	e09f      	b.n	34686 <__aeabi_dsub+0x41a>
   34546:	4b1a      	ldr	r3, [pc, #104]	; (345b0 <__aeabi_dsub+0x344>)
   34548:	459c      	cmp	ip, r3
   3454a:	d100      	bne.n	3454e <__aeabi_dsub+0x2e2>
   3454c:	e0c5      	b.n	346da <__aeabi_dsub+0x46e>
   3454e:	4452      	add	r2, sl
   34550:	4552      	cmp	r2, sl
   34552:	4180      	sbcs	r0, r0
   34554:	1864      	adds	r4, r4, r1
   34556:	4240      	negs	r0, r0
   34558:	1824      	adds	r4, r4, r0
   3455a:	07e7      	lsls	r7, r4, #31
   3455c:	0852      	lsrs	r2, r2, #1
   3455e:	4317      	orrs	r7, r2
   34560:	0864      	lsrs	r4, r4, #1
   34562:	4666      	mov	r6, ip
   34564:	e708      	b.n	34378 <__aeabi_dsub+0x10c>
   34566:	4812      	ldr	r0, [pc, #72]	; (345b0 <__aeabi_dsub+0x344>)
   34568:	4285      	cmp	r5, r0
   3456a:	d100      	bne.n	3456e <__aeabi_dsub+0x302>
   3456c:	e085      	b.n	3467a <__aeabi_dsub+0x40e>
   3456e:	001d      	movs	r5, r3
   34570:	e6bc      	b.n	342ec <__aeabi_dsub+0x80>
   34572:	0029      	movs	r1, r5
   34574:	3e1f      	subs	r6, #31
   34576:	40f1      	lsrs	r1, r6
   34578:	2b20      	cmp	r3, #32
   3457a:	d100      	bne.n	3457e <__aeabi_dsub+0x312>
   3457c:	e07f      	b.n	3467e <__aeabi_dsub+0x412>
   3457e:	2240      	movs	r2, #64	; 0x40
   34580:	1ad3      	subs	r3, r2, r3
   34582:	409d      	lsls	r5, r3
   34584:	432f      	orrs	r7, r5
   34586:	1e7d      	subs	r5, r7, #1
   34588:	41af      	sbcs	r7, r5
   3458a:	2400      	movs	r4, #0
   3458c:	430f      	orrs	r7, r1
   3458e:	2600      	movs	r6, #0
   34590:	e78e      	b.n	344b0 <__aeabi_dsub+0x244>
   34592:	002b      	movs	r3, r5
   34594:	000f      	movs	r7, r1
   34596:	3b20      	subs	r3, #32
   34598:	40df      	lsrs	r7, r3
   3459a:	2d20      	cmp	r5, #32
   3459c:	d071      	beq.n	34682 <__aeabi_dsub+0x416>
   3459e:	2340      	movs	r3, #64	; 0x40
   345a0:	1b5d      	subs	r5, r3, r5
   345a2:	40a9      	lsls	r1, r5
   345a4:	430a      	orrs	r2, r1
   345a6:	1e51      	subs	r1, r2, #1
   345a8:	418a      	sbcs	r2, r1
   345aa:	2100      	movs	r1, #0
   345ac:	4317      	orrs	r7, r2
   345ae:	e6af      	b.n	34310 <__aeabi_dsub+0xa4>
   345b0:	000007ff 	.word	0x000007ff
   345b4:	ff7fffff 	.word	0xff7fffff
   345b8:	800fffff 	.word	0x800fffff
   345bc:	2e00      	cmp	r6, #0
   345be:	d03e      	beq.n	3463e <__aeabi_dsub+0x3d2>
   345c0:	4eb3      	ldr	r6, [pc, #716]	; (34890 <__aeabi_dsub+0x624>)
   345c2:	45b4      	cmp	ip, r6
   345c4:	d045      	beq.n	34652 <__aeabi_dsub+0x3e6>
   345c6:	2680      	movs	r6, #128	; 0x80
   345c8:	0436      	lsls	r6, r6, #16
   345ca:	426d      	negs	r5, r5
   345cc:	4334      	orrs	r4, r6
   345ce:	2d38      	cmp	r5, #56	; 0x38
   345d0:	dd00      	ble.n	345d4 <__aeabi_dsub+0x368>
   345d2:	e0a8      	b.n	34726 <__aeabi_dsub+0x4ba>
   345d4:	2d1f      	cmp	r5, #31
   345d6:	dd00      	ble.n	345da <__aeabi_dsub+0x36e>
   345d8:	e11f      	b.n	3481a <__aeabi_dsub+0x5ae>
   345da:	2620      	movs	r6, #32
   345dc:	0027      	movs	r7, r4
   345de:	4650      	mov	r0, sl
   345e0:	1b76      	subs	r6, r6, r5
   345e2:	40b7      	lsls	r7, r6
   345e4:	40e8      	lsrs	r0, r5
   345e6:	4307      	orrs	r7, r0
   345e8:	4650      	mov	r0, sl
   345ea:	40b0      	lsls	r0, r6
   345ec:	1e46      	subs	r6, r0, #1
   345ee:	41b0      	sbcs	r0, r6
   345f0:	40ec      	lsrs	r4, r5
   345f2:	4338      	orrs	r0, r7
   345f4:	1a17      	subs	r7, r2, r0
   345f6:	42ba      	cmp	r2, r7
   345f8:	4192      	sbcs	r2, r2
   345fa:	1b0c      	subs	r4, r1, r4
   345fc:	4252      	negs	r2, r2
   345fe:	1aa4      	subs	r4, r4, r2
   34600:	4666      	mov	r6, ip
   34602:	4698      	mov	r8, r3
   34604:	e68b      	b.n	3431e <__aeabi_dsub+0xb2>
   34606:	4664      	mov	r4, ip
   34608:	4667      	mov	r7, ip
   3460a:	432c      	orrs	r4, r5
   3460c:	d000      	beq.n	34610 <__aeabi_dsub+0x3a4>
   3460e:	e68b      	b.n	34328 <__aeabi_dsub+0xbc>
   34610:	2500      	movs	r5, #0
   34612:	2600      	movs	r6, #0
   34614:	2700      	movs	r7, #0
   34616:	e6ea      	b.n	343ee <__aeabi_dsub+0x182>
   34618:	001e      	movs	r6, r3
   3461a:	e6ad      	b.n	34378 <__aeabi_dsub+0x10c>
   3461c:	2b1f      	cmp	r3, #31
   3461e:	dc60      	bgt.n	346e2 <__aeabi_dsub+0x476>
   34620:	2720      	movs	r7, #32
   34622:	1af8      	subs	r0, r7, r3
   34624:	000f      	movs	r7, r1
   34626:	4684      	mov	ip, r0
   34628:	4087      	lsls	r7, r0
   3462a:	0010      	movs	r0, r2
   3462c:	40d8      	lsrs	r0, r3
   3462e:	4307      	orrs	r7, r0
   34630:	4660      	mov	r0, ip
   34632:	4082      	lsls	r2, r0
   34634:	1e50      	subs	r0, r2, #1
   34636:	4182      	sbcs	r2, r0
   34638:	40d9      	lsrs	r1, r3
   3463a:	4317      	orrs	r7, r2
   3463c:	e6f5      	b.n	3442a <__aeabi_dsub+0x1be>
   3463e:	0026      	movs	r6, r4
   34640:	4650      	mov	r0, sl
   34642:	4306      	orrs	r6, r0
   34644:	d005      	beq.n	34652 <__aeabi_dsub+0x3e6>
   34646:	43ed      	mvns	r5, r5
   34648:	2d00      	cmp	r5, #0
   3464a:	d0d3      	beq.n	345f4 <__aeabi_dsub+0x388>
   3464c:	4e90      	ldr	r6, [pc, #576]	; (34890 <__aeabi_dsub+0x624>)
   3464e:	45b4      	cmp	ip, r6
   34650:	d1bd      	bne.n	345ce <__aeabi_dsub+0x362>
   34652:	000c      	movs	r4, r1
   34654:	0017      	movs	r7, r2
   34656:	4666      	mov	r6, ip
   34658:	4698      	mov	r8, r3
   3465a:	e68d      	b.n	34378 <__aeabi_dsub+0x10c>
   3465c:	488c      	ldr	r0, [pc, #560]	; (34890 <__aeabi_dsub+0x624>)
   3465e:	4283      	cmp	r3, r0
   34660:	d00b      	beq.n	3467a <__aeabi_dsub+0x40e>
   34662:	4663      	mov	r3, ip
   34664:	e6d9      	b.n	3441a <__aeabi_dsub+0x1ae>
   34666:	2d00      	cmp	r5, #0
   34668:	d000      	beq.n	3466c <__aeabi_dsub+0x400>
   3466a:	e096      	b.n	3479a <__aeabi_dsub+0x52e>
   3466c:	0008      	movs	r0, r1
   3466e:	4310      	orrs	r0, r2
   34670:	d100      	bne.n	34674 <__aeabi_dsub+0x408>
   34672:	e0e2      	b.n	3483a <__aeabi_dsub+0x5ce>
   34674:	000c      	movs	r4, r1
   34676:	0017      	movs	r7, r2
   34678:	4698      	mov	r8, r3
   3467a:	4e85      	ldr	r6, [pc, #532]	; (34890 <__aeabi_dsub+0x624>)
   3467c:	e67c      	b.n	34378 <__aeabi_dsub+0x10c>
   3467e:	2500      	movs	r5, #0
   34680:	e780      	b.n	34584 <__aeabi_dsub+0x318>
   34682:	2100      	movs	r1, #0
   34684:	e78e      	b.n	345a4 <__aeabi_dsub+0x338>
   34686:	0023      	movs	r3, r4
   34688:	4650      	mov	r0, sl
   3468a:	4303      	orrs	r3, r0
   3468c:	2e00      	cmp	r6, #0
   3468e:	d000      	beq.n	34692 <__aeabi_dsub+0x426>
   34690:	e0a8      	b.n	347e4 <__aeabi_dsub+0x578>
   34692:	2b00      	cmp	r3, #0
   34694:	d100      	bne.n	34698 <__aeabi_dsub+0x42c>
   34696:	e0de      	b.n	34856 <__aeabi_dsub+0x5ea>
   34698:	000b      	movs	r3, r1
   3469a:	4313      	orrs	r3, r2
   3469c:	d100      	bne.n	346a0 <__aeabi_dsub+0x434>
   3469e:	e66b      	b.n	34378 <__aeabi_dsub+0x10c>
   346a0:	4452      	add	r2, sl
   346a2:	4552      	cmp	r2, sl
   346a4:	4180      	sbcs	r0, r0
   346a6:	1864      	adds	r4, r4, r1
   346a8:	4240      	negs	r0, r0
   346aa:	1824      	adds	r4, r4, r0
   346ac:	0017      	movs	r7, r2
   346ae:	0223      	lsls	r3, r4, #8
   346b0:	d400      	bmi.n	346b4 <__aeabi_dsub+0x448>
   346b2:	e6fd      	b.n	344b0 <__aeabi_dsub+0x244>
   346b4:	4b77      	ldr	r3, [pc, #476]	; (34894 <__aeabi_dsub+0x628>)
   346b6:	4666      	mov	r6, ip
   346b8:	401c      	ands	r4, r3
   346ba:	e65d      	b.n	34378 <__aeabi_dsub+0x10c>
   346bc:	0025      	movs	r5, r4
   346be:	4650      	mov	r0, sl
   346c0:	4305      	orrs	r5, r0
   346c2:	2e00      	cmp	r6, #0
   346c4:	d1cf      	bne.n	34666 <__aeabi_dsub+0x3fa>
   346c6:	2d00      	cmp	r5, #0
   346c8:	d14f      	bne.n	3476a <__aeabi_dsub+0x4fe>
   346ca:	000c      	movs	r4, r1
   346cc:	4314      	orrs	r4, r2
   346ce:	d100      	bne.n	346d2 <__aeabi_dsub+0x466>
   346d0:	e0a0      	b.n	34814 <__aeabi_dsub+0x5a8>
   346d2:	000c      	movs	r4, r1
   346d4:	0017      	movs	r7, r2
   346d6:	4698      	mov	r8, r3
   346d8:	e64e      	b.n	34378 <__aeabi_dsub+0x10c>
   346da:	4666      	mov	r6, ip
   346dc:	2400      	movs	r4, #0
   346de:	2700      	movs	r7, #0
   346e0:	e685      	b.n	343ee <__aeabi_dsub+0x182>
   346e2:	001f      	movs	r7, r3
   346e4:	0008      	movs	r0, r1
   346e6:	3f20      	subs	r7, #32
   346e8:	40f8      	lsrs	r0, r7
   346ea:	0007      	movs	r7, r0
   346ec:	2b20      	cmp	r3, #32
   346ee:	d100      	bne.n	346f2 <__aeabi_dsub+0x486>
   346f0:	e08e      	b.n	34810 <__aeabi_dsub+0x5a4>
   346f2:	2040      	movs	r0, #64	; 0x40
   346f4:	1ac3      	subs	r3, r0, r3
   346f6:	4099      	lsls	r1, r3
   346f8:	430a      	orrs	r2, r1
   346fa:	1e51      	subs	r1, r2, #1
   346fc:	418a      	sbcs	r2, r1
   346fe:	2100      	movs	r1, #0
   34700:	4317      	orrs	r7, r2
   34702:	e692      	b.n	3442a <__aeabi_dsub+0x1be>
   34704:	2e00      	cmp	r6, #0
   34706:	d114      	bne.n	34732 <__aeabi_dsub+0x4c6>
   34708:	0026      	movs	r6, r4
   3470a:	4650      	mov	r0, sl
   3470c:	4306      	orrs	r6, r0
   3470e:	d062      	beq.n	347d6 <__aeabi_dsub+0x56a>
   34710:	43db      	mvns	r3, r3
   34712:	2b00      	cmp	r3, #0
   34714:	d15c      	bne.n	347d0 <__aeabi_dsub+0x564>
   34716:	1887      	adds	r7, r0, r2
   34718:	4297      	cmp	r7, r2
   3471a:	4192      	sbcs	r2, r2
   3471c:	1864      	adds	r4, r4, r1
   3471e:	4252      	negs	r2, r2
   34720:	18a4      	adds	r4, r4, r2
   34722:	4666      	mov	r6, ip
   34724:	e687      	b.n	34436 <__aeabi_dsub+0x1ca>
   34726:	4650      	mov	r0, sl
   34728:	4320      	orrs	r0, r4
   3472a:	1e44      	subs	r4, r0, #1
   3472c:	41a0      	sbcs	r0, r4
   3472e:	2400      	movs	r4, #0
   34730:	e760      	b.n	345f4 <__aeabi_dsub+0x388>
   34732:	4e57      	ldr	r6, [pc, #348]	; (34890 <__aeabi_dsub+0x624>)
   34734:	45b4      	cmp	ip, r6
   34736:	d04e      	beq.n	347d6 <__aeabi_dsub+0x56a>
   34738:	2680      	movs	r6, #128	; 0x80
   3473a:	0436      	lsls	r6, r6, #16
   3473c:	425b      	negs	r3, r3
   3473e:	4334      	orrs	r4, r6
   34740:	2b38      	cmp	r3, #56	; 0x38
   34742:	dd00      	ble.n	34746 <__aeabi_dsub+0x4da>
   34744:	e07f      	b.n	34846 <__aeabi_dsub+0x5da>
   34746:	2b1f      	cmp	r3, #31
   34748:	dd00      	ble.n	3474c <__aeabi_dsub+0x4e0>
   3474a:	e08b      	b.n	34864 <__aeabi_dsub+0x5f8>
   3474c:	2620      	movs	r6, #32
   3474e:	0027      	movs	r7, r4
   34750:	4650      	mov	r0, sl
   34752:	1af6      	subs	r6, r6, r3
   34754:	40b7      	lsls	r7, r6
   34756:	40d8      	lsrs	r0, r3
   34758:	4307      	orrs	r7, r0
   3475a:	4650      	mov	r0, sl
   3475c:	40b0      	lsls	r0, r6
   3475e:	1e46      	subs	r6, r0, #1
   34760:	41b0      	sbcs	r0, r6
   34762:	4307      	orrs	r7, r0
   34764:	40dc      	lsrs	r4, r3
   34766:	18bf      	adds	r7, r7, r2
   34768:	e7d6      	b.n	34718 <__aeabi_dsub+0x4ac>
   3476a:	000d      	movs	r5, r1
   3476c:	4315      	orrs	r5, r2
   3476e:	d100      	bne.n	34772 <__aeabi_dsub+0x506>
   34770:	e602      	b.n	34378 <__aeabi_dsub+0x10c>
   34772:	4650      	mov	r0, sl
   34774:	1a80      	subs	r0, r0, r2
   34776:	4582      	cmp	sl, r0
   34778:	41bf      	sbcs	r7, r7
   3477a:	1a65      	subs	r5, r4, r1
   3477c:	427f      	negs	r7, r7
   3477e:	1bed      	subs	r5, r5, r7
   34780:	4684      	mov	ip, r0
   34782:	0228      	lsls	r0, r5, #8
   34784:	d400      	bmi.n	34788 <__aeabi_dsub+0x51c>
   34786:	e68d      	b.n	344a4 <__aeabi_dsub+0x238>
   34788:	4650      	mov	r0, sl
   3478a:	1a17      	subs	r7, r2, r0
   3478c:	42ba      	cmp	r2, r7
   3478e:	4192      	sbcs	r2, r2
   34790:	1b0c      	subs	r4, r1, r4
   34792:	4252      	negs	r2, r2
   34794:	1aa4      	subs	r4, r4, r2
   34796:	4698      	mov	r8, r3
   34798:	e5ee      	b.n	34378 <__aeabi_dsub+0x10c>
   3479a:	000d      	movs	r5, r1
   3479c:	4315      	orrs	r5, r2
   3479e:	d100      	bne.n	347a2 <__aeabi_dsub+0x536>
   347a0:	e76b      	b.n	3467a <__aeabi_dsub+0x40e>
   347a2:	4650      	mov	r0, sl
   347a4:	0767      	lsls	r7, r4, #29
   347a6:	08c0      	lsrs	r0, r0, #3
   347a8:	4307      	orrs	r7, r0
   347aa:	2080      	movs	r0, #128	; 0x80
   347ac:	08e4      	lsrs	r4, r4, #3
   347ae:	0300      	lsls	r0, r0, #12
   347b0:	4204      	tst	r4, r0
   347b2:	d007      	beq.n	347c4 <__aeabi_dsub+0x558>
   347b4:	08cd      	lsrs	r5, r1, #3
   347b6:	4205      	tst	r5, r0
   347b8:	d104      	bne.n	347c4 <__aeabi_dsub+0x558>
   347ba:	002c      	movs	r4, r5
   347bc:	4698      	mov	r8, r3
   347be:	08d7      	lsrs	r7, r2, #3
   347c0:	0749      	lsls	r1, r1, #29
   347c2:	430f      	orrs	r7, r1
   347c4:	0f7b      	lsrs	r3, r7, #29
   347c6:	00e4      	lsls	r4, r4, #3
   347c8:	431c      	orrs	r4, r3
   347ca:	00ff      	lsls	r7, r7, #3
   347cc:	4e30      	ldr	r6, [pc, #192]	; (34890 <__aeabi_dsub+0x624>)
   347ce:	e5d3      	b.n	34378 <__aeabi_dsub+0x10c>
   347d0:	4e2f      	ldr	r6, [pc, #188]	; (34890 <__aeabi_dsub+0x624>)
   347d2:	45b4      	cmp	ip, r6
   347d4:	d1b4      	bne.n	34740 <__aeabi_dsub+0x4d4>
   347d6:	000c      	movs	r4, r1
   347d8:	0017      	movs	r7, r2
   347da:	4666      	mov	r6, ip
   347dc:	e5cc      	b.n	34378 <__aeabi_dsub+0x10c>
   347de:	2700      	movs	r7, #0
   347e0:	2400      	movs	r4, #0
   347e2:	e5e8      	b.n	343b6 <__aeabi_dsub+0x14a>
   347e4:	2b00      	cmp	r3, #0
   347e6:	d039      	beq.n	3485c <__aeabi_dsub+0x5f0>
   347e8:	000b      	movs	r3, r1
   347ea:	4313      	orrs	r3, r2
   347ec:	d100      	bne.n	347f0 <__aeabi_dsub+0x584>
   347ee:	e744      	b.n	3467a <__aeabi_dsub+0x40e>
   347f0:	08c0      	lsrs	r0, r0, #3
   347f2:	0767      	lsls	r7, r4, #29
   347f4:	4307      	orrs	r7, r0
   347f6:	2080      	movs	r0, #128	; 0x80
   347f8:	08e4      	lsrs	r4, r4, #3
   347fa:	0300      	lsls	r0, r0, #12
   347fc:	4204      	tst	r4, r0
   347fe:	d0e1      	beq.n	347c4 <__aeabi_dsub+0x558>
   34800:	08cb      	lsrs	r3, r1, #3
   34802:	4203      	tst	r3, r0
   34804:	d1de      	bne.n	347c4 <__aeabi_dsub+0x558>
   34806:	08d7      	lsrs	r7, r2, #3
   34808:	0749      	lsls	r1, r1, #29
   3480a:	430f      	orrs	r7, r1
   3480c:	001c      	movs	r4, r3
   3480e:	e7d9      	b.n	347c4 <__aeabi_dsub+0x558>
   34810:	2100      	movs	r1, #0
   34812:	e771      	b.n	346f8 <__aeabi_dsub+0x48c>
   34814:	2500      	movs	r5, #0
   34816:	2700      	movs	r7, #0
   34818:	e5e9      	b.n	343ee <__aeabi_dsub+0x182>
   3481a:	002e      	movs	r6, r5
   3481c:	0027      	movs	r7, r4
   3481e:	3e20      	subs	r6, #32
   34820:	40f7      	lsrs	r7, r6
   34822:	2d20      	cmp	r5, #32
   34824:	d02f      	beq.n	34886 <__aeabi_dsub+0x61a>
   34826:	2640      	movs	r6, #64	; 0x40
   34828:	1b75      	subs	r5, r6, r5
   3482a:	40ac      	lsls	r4, r5
   3482c:	4650      	mov	r0, sl
   3482e:	4320      	orrs	r0, r4
   34830:	1e44      	subs	r4, r0, #1
   34832:	41a0      	sbcs	r0, r4
   34834:	2400      	movs	r4, #0
   34836:	4338      	orrs	r0, r7
   34838:	e6dc      	b.n	345f4 <__aeabi_dsub+0x388>
   3483a:	2480      	movs	r4, #128	; 0x80
   3483c:	2500      	movs	r5, #0
   3483e:	0324      	lsls	r4, r4, #12
   34840:	4e13      	ldr	r6, [pc, #76]	; (34890 <__aeabi_dsub+0x624>)
   34842:	2700      	movs	r7, #0
   34844:	e5d3      	b.n	343ee <__aeabi_dsub+0x182>
   34846:	4650      	mov	r0, sl
   34848:	4320      	orrs	r0, r4
   3484a:	0007      	movs	r7, r0
   3484c:	1e78      	subs	r0, r7, #1
   3484e:	4187      	sbcs	r7, r0
   34850:	2400      	movs	r4, #0
   34852:	18bf      	adds	r7, r7, r2
   34854:	e760      	b.n	34718 <__aeabi_dsub+0x4ac>
   34856:	000c      	movs	r4, r1
   34858:	0017      	movs	r7, r2
   3485a:	e58d      	b.n	34378 <__aeabi_dsub+0x10c>
   3485c:	000c      	movs	r4, r1
   3485e:	0017      	movs	r7, r2
   34860:	4e0b      	ldr	r6, [pc, #44]	; (34890 <__aeabi_dsub+0x624>)
   34862:	e589      	b.n	34378 <__aeabi_dsub+0x10c>
   34864:	001e      	movs	r6, r3
   34866:	0027      	movs	r7, r4
   34868:	3e20      	subs	r6, #32
   3486a:	40f7      	lsrs	r7, r6
   3486c:	2b20      	cmp	r3, #32
   3486e:	d00c      	beq.n	3488a <__aeabi_dsub+0x61e>
   34870:	2640      	movs	r6, #64	; 0x40
   34872:	1af3      	subs	r3, r6, r3
   34874:	409c      	lsls	r4, r3
   34876:	4650      	mov	r0, sl
   34878:	4320      	orrs	r0, r4
   3487a:	1e44      	subs	r4, r0, #1
   3487c:	41a0      	sbcs	r0, r4
   3487e:	4307      	orrs	r7, r0
   34880:	2400      	movs	r4, #0
   34882:	18bf      	adds	r7, r7, r2
   34884:	e748      	b.n	34718 <__aeabi_dsub+0x4ac>
   34886:	2400      	movs	r4, #0
   34888:	e7d0      	b.n	3482c <__aeabi_dsub+0x5c0>
   3488a:	2400      	movs	r4, #0
   3488c:	e7f3      	b.n	34876 <__aeabi_dsub+0x60a>
   3488e:	46c0      	nop			; (mov r8, r8)
   34890:	000007ff 	.word	0x000007ff
   34894:	ff7fffff 	.word	0xff7fffff

00034898 <__aeabi_d2iz>:
   34898:	b530      	push	{r4, r5, lr}
   3489a:	4d13      	ldr	r5, [pc, #76]	; (348e8 <__aeabi_d2iz+0x50>)
   3489c:	030a      	lsls	r2, r1, #12
   3489e:	004b      	lsls	r3, r1, #1
   348a0:	0b12      	lsrs	r2, r2, #12
   348a2:	0d5b      	lsrs	r3, r3, #21
   348a4:	0fc9      	lsrs	r1, r1, #31
   348a6:	2400      	movs	r4, #0
   348a8:	42ab      	cmp	r3, r5
   348aa:	dd10      	ble.n	348ce <__aeabi_d2iz+0x36>
   348ac:	4c0f      	ldr	r4, [pc, #60]	; (348ec <__aeabi_d2iz+0x54>)
   348ae:	42a3      	cmp	r3, r4
   348b0:	dc0f      	bgt.n	348d2 <__aeabi_d2iz+0x3a>
   348b2:	2480      	movs	r4, #128	; 0x80
   348b4:	4d0e      	ldr	r5, [pc, #56]	; (348f0 <__aeabi_d2iz+0x58>)
   348b6:	0364      	lsls	r4, r4, #13
   348b8:	4322      	orrs	r2, r4
   348ba:	1aed      	subs	r5, r5, r3
   348bc:	2d1f      	cmp	r5, #31
   348be:	dd0b      	ble.n	348d8 <__aeabi_d2iz+0x40>
   348c0:	480c      	ldr	r0, [pc, #48]	; (348f4 <__aeabi_d2iz+0x5c>)
   348c2:	1ac3      	subs	r3, r0, r3
   348c4:	40da      	lsrs	r2, r3
   348c6:	4254      	negs	r4, r2
   348c8:	2900      	cmp	r1, #0
   348ca:	d100      	bne.n	348ce <__aeabi_d2iz+0x36>
   348cc:	0014      	movs	r4, r2
   348ce:	0020      	movs	r0, r4
   348d0:	bd30      	pop	{r4, r5, pc}
   348d2:	4b09      	ldr	r3, [pc, #36]	; (348f8 <__aeabi_d2iz+0x60>)
   348d4:	18cc      	adds	r4, r1, r3
   348d6:	e7fa      	b.n	348ce <__aeabi_d2iz+0x36>
   348d8:	4c08      	ldr	r4, [pc, #32]	; (348fc <__aeabi_d2iz+0x64>)
   348da:	40e8      	lsrs	r0, r5
   348dc:	46a4      	mov	ip, r4
   348de:	4463      	add	r3, ip
   348e0:	409a      	lsls	r2, r3
   348e2:	4302      	orrs	r2, r0
   348e4:	e7ef      	b.n	348c6 <__aeabi_d2iz+0x2e>
   348e6:	46c0      	nop			; (mov r8, r8)
   348e8:	000003fe 	.word	0x000003fe
   348ec:	0000041d 	.word	0x0000041d
   348f0:	00000433 	.word	0x00000433
   348f4:	00000413 	.word	0x00000413
   348f8:	7fffffff 	.word	0x7fffffff
   348fc:	fffffbed 	.word	0xfffffbed

00034900 <__aeabi_ui2d>:
   34900:	b510      	push	{r4, lr}
   34902:	1e04      	subs	r4, r0, #0
   34904:	d028      	beq.n	34958 <__aeabi_ui2d+0x58>
   34906:	f000 f833 	bl	34970 <__clzsi2>
   3490a:	4b15      	ldr	r3, [pc, #84]	; (34960 <__aeabi_ui2d+0x60>)
   3490c:	4a15      	ldr	r2, [pc, #84]	; (34964 <__aeabi_ui2d+0x64>)
   3490e:	1a1b      	subs	r3, r3, r0
   34910:	1ad2      	subs	r2, r2, r3
   34912:	2a1f      	cmp	r2, #31
   34914:	dd15      	ble.n	34942 <__aeabi_ui2d+0x42>
   34916:	4a14      	ldr	r2, [pc, #80]	; (34968 <__aeabi_ui2d+0x68>)
   34918:	1ad2      	subs	r2, r2, r3
   3491a:	4094      	lsls	r4, r2
   3491c:	2200      	movs	r2, #0
   3491e:	0324      	lsls	r4, r4, #12
   34920:	055b      	lsls	r3, r3, #21
   34922:	0b24      	lsrs	r4, r4, #12
   34924:	0d5b      	lsrs	r3, r3, #21
   34926:	2100      	movs	r1, #0
   34928:	0010      	movs	r0, r2
   3492a:	0324      	lsls	r4, r4, #12
   3492c:	0d0a      	lsrs	r2, r1, #20
   3492e:	0b24      	lsrs	r4, r4, #12
   34930:	0512      	lsls	r2, r2, #20
   34932:	4322      	orrs	r2, r4
   34934:	4c0d      	ldr	r4, [pc, #52]	; (3496c <__aeabi_ui2d+0x6c>)
   34936:	051b      	lsls	r3, r3, #20
   34938:	4022      	ands	r2, r4
   3493a:	4313      	orrs	r3, r2
   3493c:	005b      	lsls	r3, r3, #1
   3493e:	0859      	lsrs	r1, r3, #1
   34940:	bd10      	pop	{r4, pc}
   34942:	0021      	movs	r1, r4
   34944:	4091      	lsls	r1, r2
   34946:	000a      	movs	r2, r1
   34948:	210b      	movs	r1, #11
   3494a:	1a08      	subs	r0, r1, r0
   3494c:	40c4      	lsrs	r4, r0
   3494e:	055b      	lsls	r3, r3, #21
   34950:	0324      	lsls	r4, r4, #12
   34952:	0b24      	lsrs	r4, r4, #12
   34954:	0d5b      	lsrs	r3, r3, #21
   34956:	e7e6      	b.n	34926 <__aeabi_ui2d+0x26>
   34958:	2300      	movs	r3, #0
   3495a:	2400      	movs	r4, #0
   3495c:	2200      	movs	r2, #0
   3495e:	e7e2      	b.n	34926 <__aeabi_ui2d+0x26>
   34960:	0000041e 	.word	0x0000041e
   34964:	00000433 	.word	0x00000433
   34968:	00000413 	.word	0x00000413
   3496c:	800fffff 	.word	0x800fffff

00034970 <__clzsi2>:
   34970:	211c      	movs	r1, #28
   34972:	2301      	movs	r3, #1
   34974:	041b      	lsls	r3, r3, #16
   34976:	4298      	cmp	r0, r3
   34978:	d301      	bcc.n	3497e <__clzsi2+0xe>
   3497a:	0c00      	lsrs	r0, r0, #16
   3497c:	3910      	subs	r1, #16
   3497e:	0a1b      	lsrs	r3, r3, #8
   34980:	4298      	cmp	r0, r3
   34982:	d301      	bcc.n	34988 <__clzsi2+0x18>
   34984:	0a00      	lsrs	r0, r0, #8
   34986:	3908      	subs	r1, #8
   34988:	091b      	lsrs	r3, r3, #4
   3498a:	4298      	cmp	r0, r3
   3498c:	d301      	bcc.n	34992 <__clzsi2+0x22>
   3498e:	0900      	lsrs	r0, r0, #4
   34990:	3904      	subs	r1, #4
   34992:	a202      	add	r2, pc, #8	; (adr r2, 3499c <__clzsi2+0x2c>)
   34994:	5c10      	ldrb	r0, [r2, r0]
   34996:	1840      	adds	r0, r0, r1
   34998:	4770      	bx	lr
   3499a:	46c0      	nop			; (mov r8, r8)
   3499c:	02020304 	.word	0x02020304
   349a0:	01010101 	.word	0x01010101
	...

000349ac <atoi>:
   349ac:	b510      	push	{r4, lr}
   349ae:	220a      	movs	r2, #10
   349b0:	2100      	movs	r1, #0
   349b2:	f000 fb0d 	bl	34fd0 <strtol>
   349b6:	bd10      	pop	{r4, pc}

000349b8 <__libc_init_array>:
   349b8:	b570      	push	{r4, r5, r6, lr}
   349ba:	2600      	movs	r6, #0
   349bc:	4d0c      	ldr	r5, [pc, #48]	; (349f0 <__libc_init_array+0x38>)
   349be:	4c0d      	ldr	r4, [pc, #52]	; (349f4 <__libc_init_array+0x3c>)
   349c0:	1b64      	subs	r4, r4, r5
   349c2:	10a4      	asrs	r4, r4, #2
   349c4:	42a6      	cmp	r6, r4
   349c6:	d109      	bne.n	349dc <__libc_init_array+0x24>
   349c8:	2600      	movs	r6, #0
   349ca:	f005 fd3d 	bl	3a448 <_init>
   349ce:	4d0a      	ldr	r5, [pc, #40]	; (349f8 <__libc_init_array+0x40>)
   349d0:	4c0a      	ldr	r4, [pc, #40]	; (349fc <__libc_init_array+0x44>)
   349d2:	1b64      	subs	r4, r4, r5
   349d4:	10a4      	asrs	r4, r4, #2
   349d6:	42a6      	cmp	r6, r4
   349d8:	d105      	bne.n	349e6 <__libc_init_array+0x2e>
   349da:	bd70      	pop	{r4, r5, r6, pc}
   349dc:	00b3      	lsls	r3, r6, #2
   349de:	58eb      	ldr	r3, [r5, r3]
   349e0:	4798      	blx	r3
   349e2:	3601      	adds	r6, #1
   349e4:	e7ee      	b.n	349c4 <__libc_init_array+0xc>
   349e6:	00b3      	lsls	r3, r6, #2
   349e8:	58eb      	ldr	r3, [r5, r3]
   349ea:	4798      	blx	r3
   349ec:	3601      	adds	r6, #1
   349ee:	e7f2      	b.n	349d6 <__libc_init_array+0x1e>
   349f0:	0003a454 	.word	0x0003a454
   349f4:	0003a454 	.word	0x0003a454
   349f8:	0003a454 	.word	0x0003a454
   349fc:	0003a458 	.word	0x0003a458

00034a00 <malloc>:
   34a00:	b510      	push	{r4, lr}
   34a02:	4b03      	ldr	r3, [pc, #12]	; (34a10 <malloc+0x10>)
   34a04:	0001      	movs	r1, r0
   34a06:	6818      	ldr	r0, [r3, #0]
   34a08:	f000 f87c 	bl	34b04 <_malloc_r>
   34a0c:	bd10      	pop	{r4, pc}
   34a0e:	46c0      	nop			; (mov r8, r8)
   34a10:	20000124 	.word	0x20000124

00034a14 <free>:
   34a14:	b510      	push	{r4, lr}
   34a16:	4b03      	ldr	r3, [pc, #12]	; (34a24 <free+0x10>)
   34a18:	0001      	movs	r1, r0
   34a1a:	6818      	ldr	r0, [r3, #0]
   34a1c:	f000 f828 	bl	34a70 <_free_r>
   34a20:	bd10      	pop	{r4, pc}
   34a22:	46c0      	nop			; (mov r8, r8)
   34a24:	20000124 	.word	0x20000124

00034a28 <memcpy>:
   34a28:	2300      	movs	r3, #0
   34a2a:	b510      	push	{r4, lr}
   34a2c:	429a      	cmp	r2, r3
   34a2e:	d100      	bne.n	34a32 <memcpy+0xa>
   34a30:	bd10      	pop	{r4, pc}
   34a32:	5ccc      	ldrb	r4, [r1, r3]
   34a34:	54c4      	strb	r4, [r0, r3]
   34a36:	3301      	adds	r3, #1
   34a38:	e7f8      	b.n	34a2c <memcpy+0x4>

00034a3a <memmove>:
   34a3a:	b510      	push	{r4, lr}
   34a3c:	4288      	cmp	r0, r1
   34a3e:	d902      	bls.n	34a46 <memmove+0xc>
   34a40:	188b      	adds	r3, r1, r2
   34a42:	4298      	cmp	r0, r3
   34a44:	d308      	bcc.n	34a58 <memmove+0x1e>
   34a46:	2300      	movs	r3, #0
   34a48:	429a      	cmp	r2, r3
   34a4a:	d007      	beq.n	34a5c <memmove+0x22>
   34a4c:	5ccc      	ldrb	r4, [r1, r3]
   34a4e:	54c4      	strb	r4, [r0, r3]
   34a50:	3301      	adds	r3, #1
   34a52:	e7f9      	b.n	34a48 <memmove+0xe>
   34a54:	5c8b      	ldrb	r3, [r1, r2]
   34a56:	5483      	strb	r3, [r0, r2]
   34a58:	3a01      	subs	r2, #1
   34a5a:	d2fb      	bcs.n	34a54 <memmove+0x1a>
   34a5c:	bd10      	pop	{r4, pc}

00034a5e <memset>:
   34a5e:	0003      	movs	r3, r0
   34a60:	1882      	adds	r2, r0, r2
   34a62:	4293      	cmp	r3, r2
   34a64:	d100      	bne.n	34a68 <memset+0xa>
   34a66:	4770      	bx	lr
   34a68:	7019      	strb	r1, [r3, #0]
   34a6a:	3301      	adds	r3, #1
   34a6c:	e7f9      	b.n	34a62 <memset+0x4>
	...

00034a70 <_free_r>:
   34a70:	b570      	push	{r4, r5, r6, lr}
   34a72:	0005      	movs	r5, r0
   34a74:	2900      	cmp	r1, #0
   34a76:	d010      	beq.n	34a9a <_free_r+0x2a>
   34a78:	1f0c      	subs	r4, r1, #4
   34a7a:	6823      	ldr	r3, [r4, #0]
   34a7c:	2b00      	cmp	r3, #0
   34a7e:	da00      	bge.n	34a82 <_free_r+0x12>
   34a80:	18e4      	adds	r4, r4, r3
   34a82:	0028      	movs	r0, r5
   34a84:	f000 fdd8 	bl	35638 <__malloc_lock>
   34a88:	4a1d      	ldr	r2, [pc, #116]	; (34b00 <_free_r+0x90>)
   34a8a:	6813      	ldr	r3, [r2, #0]
   34a8c:	2b00      	cmp	r3, #0
   34a8e:	d105      	bne.n	34a9c <_free_r+0x2c>
   34a90:	6063      	str	r3, [r4, #4]
   34a92:	6014      	str	r4, [r2, #0]
   34a94:	0028      	movs	r0, r5
   34a96:	f000 fdd0 	bl	3563a <__malloc_unlock>
   34a9a:	bd70      	pop	{r4, r5, r6, pc}
   34a9c:	42a3      	cmp	r3, r4
   34a9e:	d909      	bls.n	34ab4 <_free_r+0x44>
   34aa0:	6821      	ldr	r1, [r4, #0]
   34aa2:	1860      	adds	r0, r4, r1
   34aa4:	4283      	cmp	r3, r0
   34aa6:	d1f3      	bne.n	34a90 <_free_r+0x20>
   34aa8:	6818      	ldr	r0, [r3, #0]
   34aaa:	685b      	ldr	r3, [r3, #4]
   34aac:	1841      	adds	r1, r0, r1
   34aae:	6021      	str	r1, [r4, #0]
   34ab0:	e7ee      	b.n	34a90 <_free_r+0x20>
   34ab2:	0013      	movs	r3, r2
   34ab4:	685a      	ldr	r2, [r3, #4]
   34ab6:	2a00      	cmp	r2, #0
   34ab8:	d001      	beq.n	34abe <_free_r+0x4e>
   34aba:	42a2      	cmp	r2, r4
   34abc:	d9f9      	bls.n	34ab2 <_free_r+0x42>
   34abe:	6819      	ldr	r1, [r3, #0]
   34ac0:	1858      	adds	r0, r3, r1
   34ac2:	42a0      	cmp	r0, r4
   34ac4:	d10b      	bne.n	34ade <_free_r+0x6e>
   34ac6:	6820      	ldr	r0, [r4, #0]
   34ac8:	1809      	adds	r1, r1, r0
   34aca:	1858      	adds	r0, r3, r1
   34acc:	6019      	str	r1, [r3, #0]
   34ace:	4282      	cmp	r2, r0
   34ad0:	d1e0      	bne.n	34a94 <_free_r+0x24>
   34ad2:	6810      	ldr	r0, [r2, #0]
   34ad4:	6852      	ldr	r2, [r2, #4]
   34ad6:	1841      	adds	r1, r0, r1
   34ad8:	6019      	str	r1, [r3, #0]
   34ada:	605a      	str	r2, [r3, #4]
   34adc:	e7da      	b.n	34a94 <_free_r+0x24>
   34ade:	42a0      	cmp	r0, r4
   34ae0:	d902      	bls.n	34ae8 <_free_r+0x78>
   34ae2:	230c      	movs	r3, #12
   34ae4:	602b      	str	r3, [r5, #0]
   34ae6:	e7d5      	b.n	34a94 <_free_r+0x24>
   34ae8:	6821      	ldr	r1, [r4, #0]
   34aea:	1860      	adds	r0, r4, r1
   34aec:	4282      	cmp	r2, r0
   34aee:	d103      	bne.n	34af8 <_free_r+0x88>
   34af0:	6810      	ldr	r0, [r2, #0]
   34af2:	6852      	ldr	r2, [r2, #4]
   34af4:	1841      	adds	r1, r0, r1
   34af6:	6021      	str	r1, [r4, #0]
   34af8:	6062      	str	r2, [r4, #4]
   34afa:	605c      	str	r4, [r3, #4]
   34afc:	e7ca      	b.n	34a94 <_free_r+0x24>
   34afe:	46c0      	nop			; (mov r8, r8)
   34b00:	200045a8 	.word	0x200045a8

00034b04 <_malloc_r>:
   34b04:	2303      	movs	r3, #3
   34b06:	b570      	push	{r4, r5, r6, lr}
   34b08:	1ccd      	adds	r5, r1, #3
   34b0a:	439d      	bics	r5, r3
   34b0c:	3508      	adds	r5, #8
   34b0e:	0006      	movs	r6, r0
   34b10:	2d0c      	cmp	r5, #12
   34b12:	d21e      	bcs.n	34b52 <_malloc_r+0x4e>
   34b14:	250c      	movs	r5, #12
   34b16:	42a9      	cmp	r1, r5
   34b18:	d81d      	bhi.n	34b56 <_malloc_r+0x52>
   34b1a:	0030      	movs	r0, r6
   34b1c:	f000 fd8c 	bl	35638 <__malloc_lock>
   34b20:	4a25      	ldr	r2, [pc, #148]	; (34bb8 <_malloc_r+0xb4>)
   34b22:	6814      	ldr	r4, [r2, #0]
   34b24:	0021      	movs	r1, r4
   34b26:	2900      	cmp	r1, #0
   34b28:	d119      	bne.n	34b5e <_malloc_r+0x5a>
   34b2a:	4c24      	ldr	r4, [pc, #144]	; (34bbc <_malloc_r+0xb8>)
   34b2c:	6823      	ldr	r3, [r4, #0]
   34b2e:	2b00      	cmp	r3, #0
   34b30:	d103      	bne.n	34b3a <_malloc_r+0x36>
   34b32:	0030      	movs	r0, r6
   34b34:	f000 f8ae 	bl	34c94 <_sbrk_r>
   34b38:	6020      	str	r0, [r4, #0]
   34b3a:	0029      	movs	r1, r5
   34b3c:	0030      	movs	r0, r6
   34b3e:	f000 f8a9 	bl	34c94 <_sbrk_r>
   34b42:	1c43      	adds	r3, r0, #1
   34b44:	d12c      	bne.n	34ba0 <_malloc_r+0x9c>
   34b46:	230c      	movs	r3, #12
   34b48:	0030      	movs	r0, r6
   34b4a:	6033      	str	r3, [r6, #0]
   34b4c:	f000 fd75 	bl	3563a <__malloc_unlock>
   34b50:	e003      	b.n	34b5a <_malloc_r+0x56>
   34b52:	2d00      	cmp	r5, #0
   34b54:	dadf      	bge.n	34b16 <_malloc_r+0x12>
   34b56:	230c      	movs	r3, #12
   34b58:	6033      	str	r3, [r6, #0]
   34b5a:	2000      	movs	r0, #0
   34b5c:	bd70      	pop	{r4, r5, r6, pc}
   34b5e:	680b      	ldr	r3, [r1, #0]
   34b60:	1b5b      	subs	r3, r3, r5
   34b62:	d41a      	bmi.n	34b9a <_malloc_r+0x96>
   34b64:	2b0b      	cmp	r3, #11
   34b66:	d903      	bls.n	34b70 <_malloc_r+0x6c>
   34b68:	600b      	str	r3, [r1, #0]
   34b6a:	18cc      	adds	r4, r1, r3
   34b6c:	6025      	str	r5, [r4, #0]
   34b6e:	e003      	b.n	34b78 <_malloc_r+0x74>
   34b70:	428c      	cmp	r4, r1
   34b72:	d10e      	bne.n	34b92 <_malloc_r+0x8e>
   34b74:	6863      	ldr	r3, [r4, #4]
   34b76:	6013      	str	r3, [r2, #0]
   34b78:	0030      	movs	r0, r6
   34b7a:	f000 fd5e 	bl	3563a <__malloc_unlock>
   34b7e:	0020      	movs	r0, r4
   34b80:	2207      	movs	r2, #7
   34b82:	300b      	adds	r0, #11
   34b84:	1d23      	adds	r3, r4, #4
   34b86:	4390      	bics	r0, r2
   34b88:	1ac3      	subs	r3, r0, r3
   34b8a:	d0e7      	beq.n	34b5c <_malloc_r+0x58>
   34b8c:	425a      	negs	r2, r3
   34b8e:	50e2      	str	r2, [r4, r3]
   34b90:	e7e4      	b.n	34b5c <_malloc_r+0x58>
   34b92:	684b      	ldr	r3, [r1, #4]
   34b94:	6063      	str	r3, [r4, #4]
   34b96:	000c      	movs	r4, r1
   34b98:	e7ee      	b.n	34b78 <_malloc_r+0x74>
   34b9a:	000c      	movs	r4, r1
   34b9c:	6849      	ldr	r1, [r1, #4]
   34b9e:	e7c2      	b.n	34b26 <_malloc_r+0x22>
   34ba0:	2303      	movs	r3, #3
   34ba2:	1cc4      	adds	r4, r0, #3
   34ba4:	439c      	bics	r4, r3
   34ba6:	42a0      	cmp	r0, r4
   34ba8:	d0e0      	beq.n	34b6c <_malloc_r+0x68>
   34baa:	1a21      	subs	r1, r4, r0
   34bac:	0030      	movs	r0, r6
   34bae:	f000 f871 	bl	34c94 <_sbrk_r>
   34bb2:	1c43      	adds	r3, r0, #1
   34bb4:	d1da      	bne.n	34b6c <_malloc_r+0x68>
   34bb6:	e7c6      	b.n	34b46 <_malloc_r+0x42>
   34bb8:	200045a8 	.word	0x200045a8
   34bbc:	200045ac 	.word	0x200045ac

00034bc0 <_puts_r>:
   34bc0:	b570      	push	{r4, r5, r6, lr}
   34bc2:	0005      	movs	r5, r0
   34bc4:	000e      	movs	r6, r1
   34bc6:	2800      	cmp	r0, #0
   34bc8:	d004      	beq.n	34bd4 <_puts_r+0x14>
   34bca:	6983      	ldr	r3, [r0, #24]
   34bcc:	2b00      	cmp	r3, #0
   34bce:	d101      	bne.n	34bd4 <_puts_r+0x14>
   34bd0:	f000 fc0e 	bl	353f0 <__sinit>
   34bd4:	69ab      	ldr	r3, [r5, #24]
   34bd6:	68ac      	ldr	r4, [r5, #8]
   34bd8:	2b00      	cmp	r3, #0
   34bda:	d102      	bne.n	34be2 <_puts_r+0x22>
   34bdc:	0028      	movs	r0, r5
   34bde:	f000 fc07 	bl	353f0 <__sinit>
   34be2:	4b24      	ldr	r3, [pc, #144]	; (34c74 <_puts_r+0xb4>)
   34be4:	429c      	cmp	r4, r3
   34be6:	d10f      	bne.n	34c08 <_puts_r+0x48>
   34be8:	686c      	ldr	r4, [r5, #4]
   34bea:	89a3      	ldrh	r3, [r4, #12]
   34bec:	071b      	lsls	r3, r3, #28
   34bee:	d502      	bpl.n	34bf6 <_puts_r+0x36>
   34bf0:	6923      	ldr	r3, [r4, #16]
   34bf2:	2b00      	cmp	r3, #0
   34bf4:	d120      	bne.n	34c38 <_puts_r+0x78>
   34bf6:	0021      	movs	r1, r4
   34bf8:	0028      	movs	r0, r5
   34bfa:	f000 fa8b 	bl	35114 <__swsetup_r>
   34bfe:	2800      	cmp	r0, #0
   34c00:	d01a      	beq.n	34c38 <_puts_r+0x78>
   34c02:	2001      	movs	r0, #1
   34c04:	4240      	negs	r0, r0
   34c06:	bd70      	pop	{r4, r5, r6, pc}
   34c08:	4b1b      	ldr	r3, [pc, #108]	; (34c78 <_puts_r+0xb8>)
   34c0a:	429c      	cmp	r4, r3
   34c0c:	d101      	bne.n	34c12 <_puts_r+0x52>
   34c0e:	68ac      	ldr	r4, [r5, #8]
   34c10:	e7eb      	b.n	34bea <_puts_r+0x2a>
   34c12:	4b1a      	ldr	r3, [pc, #104]	; (34c7c <_puts_r+0xbc>)
   34c14:	429c      	cmp	r4, r3
   34c16:	d1e8      	bne.n	34bea <_puts_r+0x2a>
   34c18:	68ec      	ldr	r4, [r5, #12]
   34c1a:	e7e6      	b.n	34bea <_puts_r+0x2a>
   34c1c:	3b01      	subs	r3, #1
   34c1e:	3601      	adds	r6, #1
   34c20:	60a3      	str	r3, [r4, #8]
   34c22:	2b00      	cmp	r3, #0
   34c24:	da04      	bge.n	34c30 <_puts_r+0x70>
   34c26:	69a2      	ldr	r2, [r4, #24]
   34c28:	4293      	cmp	r3, r2
   34c2a:	db16      	blt.n	34c5a <_puts_r+0x9a>
   34c2c:	290a      	cmp	r1, #10
   34c2e:	d014      	beq.n	34c5a <_puts_r+0x9a>
   34c30:	6823      	ldr	r3, [r4, #0]
   34c32:	1c5a      	adds	r2, r3, #1
   34c34:	6022      	str	r2, [r4, #0]
   34c36:	7019      	strb	r1, [r3, #0]
   34c38:	7831      	ldrb	r1, [r6, #0]
   34c3a:	68a3      	ldr	r3, [r4, #8]
   34c3c:	2900      	cmp	r1, #0
   34c3e:	d1ed      	bne.n	34c1c <_puts_r+0x5c>
   34c40:	3b01      	subs	r3, #1
   34c42:	60a3      	str	r3, [r4, #8]
   34c44:	2b00      	cmp	r3, #0
   34c46:	da0f      	bge.n	34c68 <_puts_r+0xa8>
   34c48:	0022      	movs	r2, r4
   34c4a:	310a      	adds	r1, #10
   34c4c:	0028      	movs	r0, r5
   34c4e:	f000 fa0b 	bl	35068 <__swbuf_r>
   34c52:	1c43      	adds	r3, r0, #1
   34c54:	d0d5      	beq.n	34c02 <_puts_r+0x42>
   34c56:	200a      	movs	r0, #10
   34c58:	e7d5      	b.n	34c06 <_puts_r+0x46>
   34c5a:	0022      	movs	r2, r4
   34c5c:	0028      	movs	r0, r5
   34c5e:	f000 fa03 	bl	35068 <__swbuf_r>
   34c62:	1c43      	adds	r3, r0, #1
   34c64:	d1e8      	bne.n	34c38 <_puts_r+0x78>
   34c66:	e7cc      	b.n	34c02 <_puts_r+0x42>
   34c68:	200a      	movs	r0, #10
   34c6a:	6823      	ldr	r3, [r4, #0]
   34c6c:	1c5a      	adds	r2, r3, #1
   34c6e:	6022      	str	r2, [r4, #0]
   34c70:	7018      	strb	r0, [r3, #0]
   34c72:	e7c8      	b.n	34c06 <_puts_r+0x46>
   34c74:	0003a2c8 	.word	0x0003a2c8
   34c78:	0003a2e8 	.word	0x0003a2e8
   34c7c:	0003a2a8 	.word	0x0003a2a8

00034c80 <puts>:
   34c80:	b510      	push	{r4, lr}
   34c82:	4b03      	ldr	r3, [pc, #12]	; (34c90 <puts+0x10>)
   34c84:	0001      	movs	r1, r0
   34c86:	6818      	ldr	r0, [r3, #0]
   34c88:	f7ff ff9a 	bl	34bc0 <_puts_r>
   34c8c:	bd10      	pop	{r4, pc}
   34c8e:	46c0      	nop			; (mov r8, r8)
   34c90:	20000124 	.word	0x20000124

00034c94 <_sbrk_r>:
   34c94:	2300      	movs	r3, #0
   34c96:	b570      	push	{r4, r5, r6, lr}
   34c98:	4c06      	ldr	r4, [pc, #24]	; (34cb4 <_sbrk_r+0x20>)
   34c9a:	0005      	movs	r5, r0
   34c9c:	0008      	movs	r0, r1
   34c9e:	6023      	str	r3, [r4, #0]
   34ca0:	f7f6 fa98 	bl	2b1d4 <_sbrk>
   34ca4:	1c43      	adds	r3, r0, #1
   34ca6:	d103      	bne.n	34cb0 <_sbrk_r+0x1c>
   34ca8:	6823      	ldr	r3, [r4, #0]
   34caa:	2b00      	cmp	r3, #0
   34cac:	d000      	beq.n	34cb0 <_sbrk_r+0x1c>
   34cae:	602b      	str	r3, [r5, #0]
   34cb0:	bd70      	pop	{r4, r5, r6, pc}
   34cb2:	46c0      	nop			; (mov r8, r8)
   34cb4:	20005b10 	.word	0x20005b10

00034cb8 <sniprintf>:
   34cb8:	b40c      	push	{r2, r3}
   34cba:	b530      	push	{r4, r5, lr}
   34cbc:	4b16      	ldr	r3, [pc, #88]	; (34d18 <sniprintf+0x60>)
   34cbe:	b09d      	sub	sp, #116	; 0x74
   34cc0:	1e0c      	subs	r4, r1, #0
   34cc2:	681d      	ldr	r5, [r3, #0]
   34cc4:	da08      	bge.n	34cd8 <sniprintf+0x20>
   34cc6:	238b      	movs	r3, #139	; 0x8b
   34cc8:	2001      	movs	r0, #1
   34cca:	602b      	str	r3, [r5, #0]
   34ccc:	4240      	negs	r0, r0
   34cce:	b01d      	add	sp, #116	; 0x74
   34cd0:	bc30      	pop	{r4, r5}
   34cd2:	bc08      	pop	{r3}
   34cd4:	b002      	add	sp, #8
   34cd6:	4718      	bx	r3
   34cd8:	2382      	movs	r3, #130	; 0x82
   34cda:	a902      	add	r1, sp, #8
   34cdc:	009b      	lsls	r3, r3, #2
   34cde:	818b      	strh	r3, [r1, #12]
   34ce0:	2300      	movs	r3, #0
   34ce2:	9002      	str	r0, [sp, #8]
   34ce4:	6108      	str	r0, [r1, #16]
   34ce6:	429c      	cmp	r4, r3
   34ce8:	d000      	beq.n	34cec <sniprintf+0x34>
   34cea:	1e63      	subs	r3, r4, #1
   34cec:	608b      	str	r3, [r1, #8]
   34cee:	614b      	str	r3, [r1, #20]
   34cf0:	2301      	movs	r3, #1
   34cf2:	425b      	negs	r3, r3
   34cf4:	81cb      	strh	r3, [r1, #14]
   34cf6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   34cf8:	ab21      	add	r3, sp, #132	; 0x84
   34cfa:	0028      	movs	r0, r5
   34cfc:	9301      	str	r3, [sp, #4]
   34cfe:	f000 fcff 	bl	35700 <_svfiprintf_r>
   34d02:	1c43      	adds	r3, r0, #1
   34d04:	da01      	bge.n	34d0a <sniprintf+0x52>
   34d06:	238b      	movs	r3, #139	; 0x8b
   34d08:	602b      	str	r3, [r5, #0]
   34d0a:	2c00      	cmp	r4, #0
   34d0c:	d0df      	beq.n	34cce <sniprintf+0x16>
   34d0e:	2300      	movs	r3, #0
   34d10:	9a02      	ldr	r2, [sp, #8]
   34d12:	7013      	strb	r3, [r2, #0]
   34d14:	e7db      	b.n	34cce <sniprintf+0x16>
   34d16:	46c0      	nop			; (mov r8, r8)
   34d18:	20000124 	.word	0x20000124

00034d1c <siprintf>:
   34d1c:	b40e      	push	{r1, r2, r3}
   34d1e:	b510      	push	{r4, lr}
   34d20:	b09d      	sub	sp, #116	; 0x74
   34d22:	a902      	add	r1, sp, #8
   34d24:	9002      	str	r0, [sp, #8]
   34d26:	6108      	str	r0, [r1, #16]
   34d28:	480b      	ldr	r0, [pc, #44]	; (34d58 <siprintf+0x3c>)
   34d2a:	2482      	movs	r4, #130	; 0x82
   34d2c:	6088      	str	r0, [r1, #8]
   34d2e:	6148      	str	r0, [r1, #20]
   34d30:	2001      	movs	r0, #1
   34d32:	4240      	negs	r0, r0
   34d34:	ab1f      	add	r3, sp, #124	; 0x7c
   34d36:	81c8      	strh	r0, [r1, #14]
   34d38:	4808      	ldr	r0, [pc, #32]	; (34d5c <siprintf+0x40>)
   34d3a:	cb04      	ldmia	r3!, {r2}
   34d3c:	00a4      	lsls	r4, r4, #2
   34d3e:	6800      	ldr	r0, [r0, #0]
   34d40:	9301      	str	r3, [sp, #4]
   34d42:	818c      	strh	r4, [r1, #12]
   34d44:	f000 fcdc 	bl	35700 <_svfiprintf_r>
   34d48:	2300      	movs	r3, #0
   34d4a:	9a02      	ldr	r2, [sp, #8]
   34d4c:	7013      	strb	r3, [r2, #0]
   34d4e:	b01d      	add	sp, #116	; 0x74
   34d50:	bc10      	pop	{r4}
   34d52:	bc08      	pop	{r3}
   34d54:	b003      	add	sp, #12
   34d56:	4718      	bx	r3
   34d58:	7fffffff 	.word	0x7fffffff
   34d5c:	20000124 	.word	0x20000124

00034d60 <strcasecmp>:
   34d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34d62:	0007      	movs	r7, r0
   34d64:	000e      	movs	r6, r1
   34d66:	783c      	ldrb	r4, [r7, #0]
   34d68:	f000 fbda 	bl	35520 <__locale_ctype_ptr>
   34d6c:	2203      	movs	r2, #3
   34d6e:	1900      	adds	r0, r0, r4
   34d70:	7843      	ldrb	r3, [r0, #1]
   34d72:	4013      	ands	r3, r2
   34d74:	2b01      	cmp	r3, #1
   34d76:	d100      	bne.n	34d7a <strcasecmp+0x1a>
   34d78:	3420      	adds	r4, #32
   34d7a:	7835      	ldrb	r5, [r6, #0]
   34d7c:	f000 fbd0 	bl	35520 <__locale_ctype_ptr>
   34d80:	2203      	movs	r2, #3
   34d82:	1940      	adds	r0, r0, r5
   34d84:	7843      	ldrb	r3, [r0, #1]
   34d86:	4013      	ands	r3, r2
   34d88:	2b01      	cmp	r3, #1
   34d8a:	d100      	bne.n	34d8e <strcasecmp+0x2e>
   34d8c:	3520      	adds	r5, #32
   34d8e:	1b60      	subs	r0, r4, r5
   34d90:	d103      	bne.n	34d9a <strcasecmp+0x3a>
   34d92:	3701      	adds	r7, #1
   34d94:	3601      	adds	r6, #1
   34d96:	2d00      	cmp	r5, #0
   34d98:	d1e5      	bne.n	34d66 <strcasecmp+0x6>
   34d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00034d9c <strcat>:
   34d9c:	0002      	movs	r2, r0
   34d9e:	b510      	push	{r4, lr}
   34da0:	7813      	ldrb	r3, [r2, #0]
   34da2:	2b00      	cmp	r3, #0
   34da4:	d105      	bne.n	34db2 <strcat+0x16>
   34da6:	5ccc      	ldrb	r4, [r1, r3]
   34da8:	54d4      	strb	r4, [r2, r3]
   34daa:	3301      	adds	r3, #1
   34dac:	2c00      	cmp	r4, #0
   34dae:	d1fa      	bne.n	34da6 <strcat+0xa>
   34db0:	bd10      	pop	{r4, pc}
   34db2:	3201      	adds	r2, #1
   34db4:	e7f4      	b.n	34da0 <strcat+0x4>

00034db6 <strcmp>:
   34db6:	7802      	ldrb	r2, [r0, #0]
   34db8:	780b      	ldrb	r3, [r1, #0]
   34dba:	2a00      	cmp	r2, #0
   34dbc:	d003      	beq.n	34dc6 <strcmp+0x10>
   34dbe:	3001      	adds	r0, #1
   34dc0:	3101      	adds	r1, #1
   34dc2:	429a      	cmp	r2, r3
   34dc4:	d0f7      	beq.n	34db6 <strcmp>
   34dc6:	1ad0      	subs	r0, r2, r3
   34dc8:	4770      	bx	lr

00034dca <strcpy>:
   34dca:	1c03      	adds	r3, r0, #0
   34dcc:	780a      	ldrb	r2, [r1, #0]
   34dce:	3101      	adds	r1, #1
   34dd0:	701a      	strb	r2, [r3, #0]
   34dd2:	3301      	adds	r3, #1
   34dd4:	2a00      	cmp	r2, #0
   34dd6:	d1f9      	bne.n	34dcc <strcpy+0x2>
   34dd8:	4770      	bx	lr
	...

00034ddc <strdup>:
   34ddc:	b510      	push	{r4, lr}
   34dde:	4b03      	ldr	r3, [pc, #12]	; (34dec <strdup+0x10>)
   34de0:	0001      	movs	r1, r0
   34de2:	6818      	ldr	r0, [r3, #0]
   34de4:	f000 f804 	bl	34df0 <_strdup_r>
   34de8:	bd10      	pop	{r4, pc}
   34dea:	46c0      	nop			; (mov r8, r8)
   34dec:	20000124 	.word	0x20000124

00034df0 <_strdup_r>:
   34df0:	b570      	push	{r4, r5, r6, lr}
   34df2:	0005      	movs	r5, r0
   34df4:	0008      	movs	r0, r1
   34df6:	000e      	movs	r6, r1
   34df8:	f000 f80d 	bl	34e16 <strlen>
   34dfc:	1c44      	adds	r4, r0, #1
   34dfe:	0021      	movs	r1, r4
   34e00:	0028      	movs	r0, r5
   34e02:	f7ff fe7f 	bl	34b04 <_malloc_r>
   34e06:	1e05      	subs	r5, r0, #0
   34e08:	d003      	beq.n	34e12 <_strdup_r+0x22>
   34e0a:	0022      	movs	r2, r4
   34e0c:	0031      	movs	r1, r6
   34e0e:	f7ff fe0b 	bl	34a28 <memcpy>
   34e12:	0028      	movs	r0, r5
   34e14:	bd70      	pop	{r4, r5, r6, pc}

00034e16 <strlen>:
   34e16:	2300      	movs	r3, #0
   34e18:	5cc2      	ldrb	r2, [r0, r3]
   34e1a:	3301      	adds	r3, #1
   34e1c:	2a00      	cmp	r2, #0
   34e1e:	d1fb      	bne.n	34e18 <strlen+0x2>
   34e20:	1e58      	subs	r0, r3, #1
   34e22:	4770      	bx	lr

00034e24 <strncmp>:
   34e24:	2300      	movs	r3, #0
   34e26:	b530      	push	{r4, r5, lr}
   34e28:	429a      	cmp	r2, r3
   34e2a:	d00a      	beq.n	34e42 <strncmp+0x1e>
   34e2c:	3a01      	subs	r2, #1
   34e2e:	5cc4      	ldrb	r4, [r0, r3]
   34e30:	5ccd      	ldrb	r5, [r1, r3]
   34e32:	42ac      	cmp	r4, r5
   34e34:	d104      	bne.n	34e40 <strncmp+0x1c>
   34e36:	429a      	cmp	r2, r3
   34e38:	d002      	beq.n	34e40 <strncmp+0x1c>
   34e3a:	3301      	adds	r3, #1
   34e3c:	2c00      	cmp	r4, #0
   34e3e:	d1f6      	bne.n	34e2e <strncmp+0xa>
   34e40:	1b63      	subs	r3, r4, r5
   34e42:	0018      	movs	r0, r3
   34e44:	bd30      	pop	{r4, r5, pc}

00034e46 <strncpy>:
   34e46:	b570      	push	{r4, r5, r6, lr}
   34e48:	0004      	movs	r4, r0
   34e4a:	2a00      	cmp	r2, #0
   34e4c:	d100      	bne.n	34e50 <strncpy+0xa>
   34e4e:	bd70      	pop	{r4, r5, r6, pc}
   34e50:	780d      	ldrb	r5, [r1, #0]
   34e52:	1e56      	subs	r6, r2, #1
   34e54:	1c63      	adds	r3, r4, #1
   34e56:	7025      	strb	r5, [r4, #0]
   34e58:	3101      	adds	r1, #1
   34e5a:	2d00      	cmp	r5, #0
   34e5c:	d105      	bne.n	34e6a <strncpy+0x24>
   34e5e:	18a4      	adds	r4, r4, r2
   34e60:	429c      	cmp	r4, r3
   34e62:	d0f4      	beq.n	34e4e <strncpy+0x8>
   34e64:	701d      	strb	r5, [r3, #0]
   34e66:	3301      	adds	r3, #1
   34e68:	e7fa      	b.n	34e60 <strncpy+0x1a>
   34e6a:	001c      	movs	r4, r3
   34e6c:	0032      	movs	r2, r6
   34e6e:	e7ec      	b.n	34e4a <strncpy+0x4>

00034e70 <strrchr>:
   34e70:	b570      	push	{r4, r5, r6, lr}
   34e72:	000d      	movs	r5, r1
   34e74:	2400      	movs	r4, #0
   34e76:	2900      	cmp	r1, #0
   34e78:	d105      	bne.n	34e86 <strrchr+0x16>
   34e7a:	f000 ff19 	bl	35cb0 <strchr>
   34e7e:	0004      	movs	r4, r0
   34e80:	e006      	b.n	34e90 <strrchr+0x20>
   34e82:	001c      	movs	r4, r3
   34e84:	1c58      	adds	r0, r3, #1
   34e86:	0029      	movs	r1, r5
   34e88:	f000 ff12 	bl	35cb0 <strchr>
   34e8c:	1e03      	subs	r3, r0, #0
   34e8e:	d1f8      	bne.n	34e82 <strrchr+0x12>
   34e90:	0020      	movs	r0, r4
   34e92:	bd70      	pop	{r4, r5, r6, pc}

00034e94 <strstr>:
   34e94:	b510      	push	{r4, lr}
   34e96:	0002      	movs	r2, r0
   34e98:	7800      	ldrb	r0, [r0, #0]
   34e9a:	2800      	cmp	r0, #0
   34e9c:	d104      	bne.n	34ea8 <strstr+0x14>
   34e9e:	7809      	ldrb	r1, [r1, #0]
   34ea0:	2900      	cmp	r1, #0
   34ea2:	d00d      	beq.n	34ec0 <strstr+0x2c>
   34ea4:	bd10      	pop	{r4, pc}
   34ea6:	3201      	adds	r2, #1
   34ea8:	7810      	ldrb	r0, [r2, #0]
   34eaa:	2800      	cmp	r0, #0
   34eac:	d0fa      	beq.n	34ea4 <strstr+0x10>
   34eae:	2300      	movs	r3, #0
   34eb0:	5cc8      	ldrb	r0, [r1, r3]
   34eb2:	2800      	cmp	r0, #0
   34eb4:	d004      	beq.n	34ec0 <strstr+0x2c>
   34eb6:	5cd4      	ldrb	r4, [r2, r3]
   34eb8:	4284      	cmp	r4, r0
   34eba:	d1f4      	bne.n	34ea6 <strstr+0x12>
   34ebc:	3301      	adds	r3, #1
   34ebe:	e7f7      	b.n	34eb0 <strstr+0x1c>
   34ec0:	0010      	movs	r0, r2
   34ec2:	e7ef      	b.n	34ea4 <strstr+0x10>

00034ec4 <_strtol_l.isra.0>:
   34ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
   34ec6:	001f      	movs	r7, r3
   34ec8:	000e      	movs	r6, r1
   34eca:	b087      	sub	sp, #28
   34ecc:	9005      	str	r0, [sp, #20]
   34ece:	9103      	str	r1, [sp, #12]
   34ed0:	9202      	str	r2, [sp, #8]
   34ed2:	980c      	ldr	r0, [sp, #48]	; 0x30
   34ed4:	7834      	ldrb	r4, [r6, #0]
   34ed6:	f000 fb20 	bl	3551a <__locale_ctype_ptr_l>
   34eda:	2208      	movs	r2, #8
   34edc:	1900      	adds	r0, r0, r4
   34ede:	7843      	ldrb	r3, [r0, #1]
   34ee0:	1c75      	adds	r5, r6, #1
   34ee2:	4013      	ands	r3, r2
   34ee4:	d10c      	bne.n	34f00 <_strtol_l.isra.0+0x3c>
   34ee6:	2c2d      	cmp	r4, #45	; 0x2d
   34ee8:	d10c      	bne.n	34f04 <_strtol_l.isra.0+0x40>
   34eea:	3301      	adds	r3, #1
   34eec:	782c      	ldrb	r4, [r5, #0]
   34eee:	9301      	str	r3, [sp, #4]
   34ef0:	1cb5      	adds	r5, r6, #2
   34ef2:	2f00      	cmp	r7, #0
   34ef4:	d00c      	beq.n	34f10 <_strtol_l.isra.0+0x4c>
   34ef6:	2f10      	cmp	r7, #16
   34ef8:	d114      	bne.n	34f24 <_strtol_l.isra.0+0x60>
   34efa:	2c30      	cmp	r4, #48	; 0x30
   34efc:	d00a      	beq.n	34f14 <_strtol_l.isra.0+0x50>
   34efe:	e011      	b.n	34f24 <_strtol_l.isra.0+0x60>
   34f00:	002e      	movs	r6, r5
   34f02:	e7e6      	b.n	34ed2 <_strtol_l.isra.0+0xe>
   34f04:	9301      	str	r3, [sp, #4]
   34f06:	2c2b      	cmp	r4, #43	; 0x2b
   34f08:	d1f3      	bne.n	34ef2 <_strtol_l.isra.0+0x2e>
   34f0a:	782c      	ldrb	r4, [r5, #0]
   34f0c:	1cb5      	adds	r5, r6, #2
   34f0e:	e7f0      	b.n	34ef2 <_strtol_l.isra.0+0x2e>
   34f10:	2c30      	cmp	r4, #48	; 0x30
   34f12:	d12f      	bne.n	34f74 <_strtol_l.isra.0+0xb0>
   34f14:	2220      	movs	r2, #32
   34f16:	782b      	ldrb	r3, [r5, #0]
   34f18:	4393      	bics	r3, r2
   34f1a:	2b58      	cmp	r3, #88	; 0x58
   34f1c:	d151      	bne.n	34fc2 <_strtol_l.isra.0+0xfe>
   34f1e:	2710      	movs	r7, #16
   34f20:	786c      	ldrb	r4, [r5, #1]
   34f22:	3502      	adds	r5, #2
   34f24:	9b01      	ldr	r3, [sp, #4]
   34f26:	4a29      	ldr	r2, [pc, #164]	; (34fcc <_strtol_l.isra.0+0x108>)
   34f28:	0039      	movs	r1, r7
   34f2a:	189e      	adds	r6, r3, r2
   34f2c:	0030      	movs	r0, r6
   34f2e:	f7fd fe2f 	bl	32b90 <__aeabi_uidivmod>
   34f32:	0030      	movs	r0, r6
   34f34:	9104      	str	r1, [sp, #16]
   34f36:	0039      	movs	r1, r7
   34f38:	f7fd fda4 	bl	32a84 <__udivsi3>
   34f3c:	2101      	movs	r1, #1
   34f3e:	2300      	movs	r3, #0
   34f40:	4249      	negs	r1, r1
   34f42:	0002      	movs	r2, r0
   34f44:	468c      	mov	ip, r1
   34f46:	0018      	movs	r0, r3
   34f48:	0021      	movs	r1, r4
   34f4a:	3930      	subs	r1, #48	; 0x30
   34f4c:	2909      	cmp	r1, #9
   34f4e:	d813      	bhi.n	34f78 <_strtol_l.isra.0+0xb4>
   34f50:	000c      	movs	r4, r1
   34f52:	42a7      	cmp	r7, r4
   34f54:	dd1c      	ble.n	34f90 <_strtol_l.isra.0+0xcc>
   34f56:	1c59      	adds	r1, r3, #1
   34f58:	d009      	beq.n	34f6e <_strtol_l.isra.0+0xaa>
   34f5a:	4663      	mov	r3, ip
   34f5c:	4282      	cmp	r2, r0
   34f5e:	d306      	bcc.n	34f6e <_strtol_l.isra.0+0xaa>
   34f60:	d102      	bne.n	34f68 <_strtol_l.isra.0+0xa4>
   34f62:	9904      	ldr	r1, [sp, #16]
   34f64:	42a1      	cmp	r1, r4
   34f66:	db02      	blt.n	34f6e <_strtol_l.isra.0+0xaa>
   34f68:	2301      	movs	r3, #1
   34f6a:	4378      	muls	r0, r7
   34f6c:	1820      	adds	r0, r4, r0
   34f6e:	782c      	ldrb	r4, [r5, #0]
   34f70:	3501      	adds	r5, #1
   34f72:	e7e9      	b.n	34f48 <_strtol_l.isra.0+0x84>
   34f74:	270a      	movs	r7, #10
   34f76:	e7d5      	b.n	34f24 <_strtol_l.isra.0+0x60>
   34f78:	0021      	movs	r1, r4
   34f7a:	3941      	subs	r1, #65	; 0x41
   34f7c:	2919      	cmp	r1, #25
   34f7e:	d801      	bhi.n	34f84 <_strtol_l.isra.0+0xc0>
   34f80:	3c37      	subs	r4, #55	; 0x37
   34f82:	e7e6      	b.n	34f52 <_strtol_l.isra.0+0x8e>
   34f84:	0021      	movs	r1, r4
   34f86:	3961      	subs	r1, #97	; 0x61
   34f88:	2919      	cmp	r1, #25
   34f8a:	d801      	bhi.n	34f90 <_strtol_l.isra.0+0xcc>
   34f8c:	3c57      	subs	r4, #87	; 0x57
   34f8e:	e7e0      	b.n	34f52 <_strtol_l.isra.0+0x8e>
   34f90:	1c5a      	adds	r2, r3, #1
   34f92:	d108      	bne.n	34fa6 <_strtol_l.isra.0+0xe2>
   34f94:	9a05      	ldr	r2, [sp, #20]
   34f96:	3323      	adds	r3, #35	; 0x23
   34f98:	6013      	str	r3, [r2, #0]
   34f9a:	9b02      	ldr	r3, [sp, #8]
   34f9c:	0030      	movs	r0, r6
   34f9e:	2b00      	cmp	r3, #0
   34fa0:	d10b      	bne.n	34fba <_strtol_l.isra.0+0xf6>
   34fa2:	b007      	add	sp, #28
   34fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34fa6:	9a01      	ldr	r2, [sp, #4]
   34fa8:	2a00      	cmp	r2, #0
   34faa:	d000      	beq.n	34fae <_strtol_l.isra.0+0xea>
   34fac:	4240      	negs	r0, r0
   34fae:	9a02      	ldr	r2, [sp, #8]
   34fb0:	2a00      	cmp	r2, #0
   34fb2:	d0f6      	beq.n	34fa2 <_strtol_l.isra.0+0xde>
   34fb4:	9a03      	ldr	r2, [sp, #12]
   34fb6:	2b00      	cmp	r3, #0
   34fb8:	d000      	beq.n	34fbc <_strtol_l.isra.0+0xf8>
   34fba:	1e6a      	subs	r2, r5, #1
   34fbc:	9b02      	ldr	r3, [sp, #8]
   34fbe:	601a      	str	r2, [r3, #0]
   34fc0:	e7ef      	b.n	34fa2 <_strtol_l.isra.0+0xde>
   34fc2:	2430      	movs	r4, #48	; 0x30
   34fc4:	2f00      	cmp	r7, #0
   34fc6:	d1ad      	bne.n	34f24 <_strtol_l.isra.0+0x60>
   34fc8:	3708      	adds	r7, #8
   34fca:	e7ab      	b.n	34f24 <_strtol_l.isra.0+0x60>
   34fcc:	7fffffff 	.word	0x7fffffff

00034fd0 <strtol>:
   34fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34fd2:	0013      	movs	r3, r2
   34fd4:	4a06      	ldr	r2, [pc, #24]	; (34ff0 <strtol+0x20>)
   34fd6:	0005      	movs	r5, r0
   34fd8:	6810      	ldr	r0, [r2, #0]
   34fda:	6a04      	ldr	r4, [r0, #32]
   34fdc:	2c00      	cmp	r4, #0
   34fde:	d100      	bne.n	34fe2 <strtol+0x12>
   34fe0:	4c04      	ldr	r4, [pc, #16]	; (34ff4 <strtol+0x24>)
   34fe2:	000a      	movs	r2, r1
   34fe4:	9400      	str	r4, [sp, #0]
   34fe6:	0029      	movs	r1, r5
   34fe8:	f7ff ff6c 	bl	34ec4 <_strtol_l.isra.0>
   34fec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   34fee:	46c0      	nop			; (mov r8, r8)
   34ff0:	20000124 	.word	0x20000124
   34ff4:	20000188 	.word	0x20000188

00034ff8 <_vsniprintf_r>:
   34ff8:	b530      	push	{r4, r5, lr}
   34ffa:	0014      	movs	r4, r2
   34ffc:	b09b      	sub	sp, #108	; 0x6c
   34ffe:	0005      	movs	r5, r0
   35000:	001a      	movs	r2, r3
   35002:	2c00      	cmp	r4, #0
   35004:	da05      	bge.n	35012 <_vsniprintf_r+0x1a>
   35006:	238b      	movs	r3, #139	; 0x8b
   35008:	6003      	str	r3, [r0, #0]
   3500a:	2001      	movs	r0, #1
   3500c:	4240      	negs	r0, r0
   3500e:	b01b      	add	sp, #108	; 0x6c
   35010:	bd30      	pop	{r4, r5, pc}
   35012:	2382      	movs	r3, #130	; 0x82
   35014:	4668      	mov	r0, sp
   35016:	009b      	lsls	r3, r3, #2
   35018:	8183      	strh	r3, [r0, #12]
   3501a:	2300      	movs	r3, #0
   3501c:	9100      	str	r1, [sp, #0]
   3501e:	9104      	str	r1, [sp, #16]
   35020:	429c      	cmp	r4, r3
   35022:	d000      	beq.n	35026 <_vsniprintf_r+0x2e>
   35024:	1e63      	subs	r3, r4, #1
   35026:	9302      	str	r3, [sp, #8]
   35028:	9305      	str	r3, [sp, #20]
   3502a:	2301      	movs	r3, #1
   3502c:	4669      	mov	r1, sp
   3502e:	425b      	negs	r3, r3
   35030:	81cb      	strh	r3, [r1, #14]
   35032:	0028      	movs	r0, r5
   35034:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   35036:	f000 fb63 	bl	35700 <_svfiprintf_r>
   3503a:	1c43      	adds	r3, r0, #1
   3503c:	da01      	bge.n	35042 <_vsniprintf_r+0x4a>
   3503e:	238b      	movs	r3, #139	; 0x8b
   35040:	602b      	str	r3, [r5, #0]
   35042:	2c00      	cmp	r4, #0
   35044:	d0e3      	beq.n	3500e <_vsniprintf_r+0x16>
   35046:	2300      	movs	r3, #0
   35048:	9a00      	ldr	r2, [sp, #0]
   3504a:	7013      	strb	r3, [r2, #0]
   3504c:	e7df      	b.n	3500e <_vsniprintf_r+0x16>
	...

00035050 <vsniprintf>:
   35050:	b507      	push	{r0, r1, r2, lr}
   35052:	9300      	str	r3, [sp, #0]
   35054:	0013      	movs	r3, r2
   35056:	000a      	movs	r2, r1
   35058:	0001      	movs	r1, r0
   3505a:	4802      	ldr	r0, [pc, #8]	; (35064 <vsniprintf+0x14>)
   3505c:	6800      	ldr	r0, [r0, #0]
   3505e:	f7ff ffcb 	bl	34ff8 <_vsniprintf_r>
   35062:	bd0e      	pop	{r1, r2, r3, pc}
   35064:	20000124 	.word	0x20000124

00035068 <__swbuf_r>:
   35068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3506a:	0005      	movs	r5, r0
   3506c:	000e      	movs	r6, r1
   3506e:	0014      	movs	r4, r2
   35070:	2800      	cmp	r0, #0
   35072:	d004      	beq.n	3507e <__swbuf_r+0x16>
   35074:	6983      	ldr	r3, [r0, #24]
   35076:	2b00      	cmp	r3, #0
   35078:	d101      	bne.n	3507e <__swbuf_r+0x16>
   3507a:	f000 f9b9 	bl	353f0 <__sinit>
   3507e:	4b22      	ldr	r3, [pc, #136]	; (35108 <__swbuf_r+0xa0>)
   35080:	429c      	cmp	r4, r3
   35082:	d12d      	bne.n	350e0 <__swbuf_r+0x78>
   35084:	686c      	ldr	r4, [r5, #4]
   35086:	69a3      	ldr	r3, [r4, #24]
   35088:	60a3      	str	r3, [r4, #8]
   3508a:	89a3      	ldrh	r3, [r4, #12]
   3508c:	071b      	lsls	r3, r3, #28
   3508e:	d531      	bpl.n	350f4 <__swbuf_r+0x8c>
   35090:	6923      	ldr	r3, [r4, #16]
   35092:	2b00      	cmp	r3, #0
   35094:	d02e      	beq.n	350f4 <__swbuf_r+0x8c>
   35096:	6823      	ldr	r3, [r4, #0]
   35098:	6922      	ldr	r2, [r4, #16]
   3509a:	b2f7      	uxtb	r7, r6
   3509c:	1a98      	subs	r0, r3, r2
   3509e:	6963      	ldr	r3, [r4, #20]
   350a0:	b2f6      	uxtb	r6, r6
   350a2:	4298      	cmp	r0, r3
   350a4:	db05      	blt.n	350b2 <__swbuf_r+0x4a>
   350a6:	0021      	movs	r1, r4
   350a8:	0028      	movs	r0, r5
   350aa:	f000 f933 	bl	35314 <_fflush_r>
   350ae:	2800      	cmp	r0, #0
   350b0:	d126      	bne.n	35100 <__swbuf_r+0x98>
   350b2:	68a3      	ldr	r3, [r4, #8]
   350b4:	3001      	adds	r0, #1
   350b6:	3b01      	subs	r3, #1
   350b8:	60a3      	str	r3, [r4, #8]
   350ba:	6823      	ldr	r3, [r4, #0]
   350bc:	1c5a      	adds	r2, r3, #1
   350be:	6022      	str	r2, [r4, #0]
   350c0:	701f      	strb	r7, [r3, #0]
   350c2:	6963      	ldr	r3, [r4, #20]
   350c4:	4298      	cmp	r0, r3
   350c6:	d004      	beq.n	350d2 <__swbuf_r+0x6a>
   350c8:	89a3      	ldrh	r3, [r4, #12]
   350ca:	07db      	lsls	r3, r3, #31
   350cc:	d51a      	bpl.n	35104 <__swbuf_r+0x9c>
   350ce:	2e0a      	cmp	r6, #10
   350d0:	d118      	bne.n	35104 <__swbuf_r+0x9c>
   350d2:	0021      	movs	r1, r4
   350d4:	0028      	movs	r0, r5
   350d6:	f000 f91d 	bl	35314 <_fflush_r>
   350da:	2800      	cmp	r0, #0
   350dc:	d012      	beq.n	35104 <__swbuf_r+0x9c>
   350de:	e00f      	b.n	35100 <__swbuf_r+0x98>
   350e0:	4b0a      	ldr	r3, [pc, #40]	; (3510c <__swbuf_r+0xa4>)
   350e2:	429c      	cmp	r4, r3
   350e4:	d101      	bne.n	350ea <__swbuf_r+0x82>
   350e6:	68ac      	ldr	r4, [r5, #8]
   350e8:	e7cd      	b.n	35086 <__swbuf_r+0x1e>
   350ea:	4b09      	ldr	r3, [pc, #36]	; (35110 <__swbuf_r+0xa8>)
   350ec:	429c      	cmp	r4, r3
   350ee:	d1ca      	bne.n	35086 <__swbuf_r+0x1e>
   350f0:	68ec      	ldr	r4, [r5, #12]
   350f2:	e7c8      	b.n	35086 <__swbuf_r+0x1e>
   350f4:	0021      	movs	r1, r4
   350f6:	0028      	movs	r0, r5
   350f8:	f000 f80c 	bl	35114 <__swsetup_r>
   350fc:	2800      	cmp	r0, #0
   350fe:	d0ca      	beq.n	35096 <__swbuf_r+0x2e>
   35100:	2601      	movs	r6, #1
   35102:	4276      	negs	r6, r6
   35104:	0030      	movs	r0, r6
   35106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35108:	0003a2c8 	.word	0x0003a2c8
   3510c:	0003a2e8 	.word	0x0003a2e8
   35110:	0003a2a8 	.word	0x0003a2a8

00035114 <__swsetup_r>:
   35114:	4b36      	ldr	r3, [pc, #216]	; (351f0 <__swsetup_r+0xdc>)
   35116:	b570      	push	{r4, r5, r6, lr}
   35118:	681d      	ldr	r5, [r3, #0]
   3511a:	0006      	movs	r6, r0
   3511c:	000c      	movs	r4, r1
   3511e:	2d00      	cmp	r5, #0
   35120:	d005      	beq.n	3512e <__swsetup_r+0x1a>
   35122:	69ab      	ldr	r3, [r5, #24]
   35124:	2b00      	cmp	r3, #0
   35126:	d102      	bne.n	3512e <__swsetup_r+0x1a>
   35128:	0028      	movs	r0, r5
   3512a:	f000 f961 	bl	353f0 <__sinit>
   3512e:	4b31      	ldr	r3, [pc, #196]	; (351f4 <__swsetup_r+0xe0>)
   35130:	429c      	cmp	r4, r3
   35132:	d10f      	bne.n	35154 <__swsetup_r+0x40>
   35134:	686c      	ldr	r4, [r5, #4]
   35136:	230c      	movs	r3, #12
   35138:	5ee2      	ldrsh	r2, [r4, r3]
   3513a:	b293      	uxth	r3, r2
   3513c:	0719      	lsls	r1, r3, #28
   3513e:	d42d      	bmi.n	3519c <__swsetup_r+0x88>
   35140:	06d9      	lsls	r1, r3, #27
   35142:	d411      	bmi.n	35168 <__swsetup_r+0x54>
   35144:	2309      	movs	r3, #9
   35146:	2001      	movs	r0, #1
   35148:	6033      	str	r3, [r6, #0]
   3514a:	3337      	adds	r3, #55	; 0x37
   3514c:	4313      	orrs	r3, r2
   3514e:	81a3      	strh	r3, [r4, #12]
   35150:	4240      	negs	r0, r0
   35152:	bd70      	pop	{r4, r5, r6, pc}
   35154:	4b28      	ldr	r3, [pc, #160]	; (351f8 <__swsetup_r+0xe4>)
   35156:	429c      	cmp	r4, r3
   35158:	d101      	bne.n	3515e <__swsetup_r+0x4a>
   3515a:	68ac      	ldr	r4, [r5, #8]
   3515c:	e7eb      	b.n	35136 <__swsetup_r+0x22>
   3515e:	4b27      	ldr	r3, [pc, #156]	; (351fc <__swsetup_r+0xe8>)
   35160:	429c      	cmp	r4, r3
   35162:	d1e8      	bne.n	35136 <__swsetup_r+0x22>
   35164:	68ec      	ldr	r4, [r5, #12]
   35166:	e7e6      	b.n	35136 <__swsetup_r+0x22>
   35168:	075b      	lsls	r3, r3, #29
   3516a:	d513      	bpl.n	35194 <__swsetup_r+0x80>
   3516c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3516e:	2900      	cmp	r1, #0
   35170:	d008      	beq.n	35184 <__swsetup_r+0x70>
   35172:	0023      	movs	r3, r4
   35174:	3344      	adds	r3, #68	; 0x44
   35176:	4299      	cmp	r1, r3
   35178:	d002      	beq.n	35180 <__swsetup_r+0x6c>
   3517a:	0030      	movs	r0, r6
   3517c:	f7ff fc78 	bl	34a70 <_free_r>
   35180:	2300      	movs	r3, #0
   35182:	6363      	str	r3, [r4, #52]	; 0x34
   35184:	2224      	movs	r2, #36	; 0x24
   35186:	89a3      	ldrh	r3, [r4, #12]
   35188:	4393      	bics	r3, r2
   3518a:	81a3      	strh	r3, [r4, #12]
   3518c:	2300      	movs	r3, #0
   3518e:	6063      	str	r3, [r4, #4]
   35190:	6923      	ldr	r3, [r4, #16]
   35192:	6023      	str	r3, [r4, #0]
   35194:	2308      	movs	r3, #8
   35196:	89a2      	ldrh	r2, [r4, #12]
   35198:	4313      	orrs	r3, r2
   3519a:	81a3      	strh	r3, [r4, #12]
   3519c:	6923      	ldr	r3, [r4, #16]
   3519e:	2b00      	cmp	r3, #0
   351a0:	d10b      	bne.n	351ba <__swsetup_r+0xa6>
   351a2:	21a0      	movs	r1, #160	; 0xa0
   351a4:	2280      	movs	r2, #128	; 0x80
   351a6:	89a3      	ldrh	r3, [r4, #12]
   351a8:	0089      	lsls	r1, r1, #2
   351aa:	0092      	lsls	r2, r2, #2
   351ac:	400b      	ands	r3, r1
   351ae:	4293      	cmp	r3, r2
   351b0:	d003      	beq.n	351ba <__swsetup_r+0xa6>
   351b2:	0021      	movs	r1, r4
   351b4:	0030      	movs	r0, r6
   351b6:	f000 f9e9 	bl	3558c <__smakebuf_r>
   351ba:	2301      	movs	r3, #1
   351bc:	89a2      	ldrh	r2, [r4, #12]
   351be:	4013      	ands	r3, r2
   351c0:	d011      	beq.n	351e6 <__swsetup_r+0xd2>
   351c2:	2300      	movs	r3, #0
   351c4:	60a3      	str	r3, [r4, #8]
   351c6:	6963      	ldr	r3, [r4, #20]
   351c8:	425b      	negs	r3, r3
   351ca:	61a3      	str	r3, [r4, #24]
   351cc:	2000      	movs	r0, #0
   351ce:	6923      	ldr	r3, [r4, #16]
   351d0:	4283      	cmp	r3, r0
   351d2:	d1be      	bne.n	35152 <__swsetup_r+0x3e>
   351d4:	230c      	movs	r3, #12
   351d6:	5ee2      	ldrsh	r2, [r4, r3]
   351d8:	0613      	lsls	r3, r2, #24
   351da:	d5ba      	bpl.n	35152 <__swsetup_r+0x3e>
   351dc:	2340      	movs	r3, #64	; 0x40
   351de:	4313      	orrs	r3, r2
   351e0:	81a3      	strh	r3, [r4, #12]
   351e2:	3801      	subs	r0, #1
   351e4:	e7b5      	b.n	35152 <__swsetup_r+0x3e>
   351e6:	0792      	lsls	r2, r2, #30
   351e8:	d400      	bmi.n	351ec <__swsetup_r+0xd8>
   351ea:	6963      	ldr	r3, [r4, #20]
   351ec:	60a3      	str	r3, [r4, #8]
   351ee:	e7ed      	b.n	351cc <__swsetup_r+0xb8>
   351f0:	20000124 	.word	0x20000124
   351f4:	0003a2c8 	.word	0x0003a2c8
   351f8:	0003a2e8 	.word	0x0003a2e8
   351fc:	0003a2a8 	.word	0x0003a2a8

00035200 <__sflush_r>:
   35200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35202:	898a      	ldrh	r2, [r1, #12]
   35204:	0005      	movs	r5, r0
   35206:	000c      	movs	r4, r1
   35208:	0713      	lsls	r3, r2, #28
   3520a:	d460      	bmi.n	352ce <__sflush_r+0xce>
   3520c:	684b      	ldr	r3, [r1, #4]
   3520e:	2b00      	cmp	r3, #0
   35210:	dc04      	bgt.n	3521c <__sflush_r+0x1c>
   35212:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   35214:	2b00      	cmp	r3, #0
   35216:	dc01      	bgt.n	3521c <__sflush_r+0x1c>
   35218:	2000      	movs	r0, #0
   3521a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3521c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   3521e:	2f00      	cmp	r7, #0
   35220:	d0fa      	beq.n	35218 <__sflush_r+0x18>
   35222:	2300      	movs	r3, #0
   35224:	682e      	ldr	r6, [r5, #0]
   35226:	602b      	str	r3, [r5, #0]
   35228:	2380      	movs	r3, #128	; 0x80
   3522a:	015b      	lsls	r3, r3, #5
   3522c:	401a      	ands	r2, r3
   3522e:	d034      	beq.n	3529a <__sflush_r+0x9a>
   35230:	6d60      	ldr	r0, [r4, #84]	; 0x54
   35232:	89a3      	ldrh	r3, [r4, #12]
   35234:	075b      	lsls	r3, r3, #29
   35236:	d506      	bpl.n	35246 <__sflush_r+0x46>
   35238:	6863      	ldr	r3, [r4, #4]
   3523a:	1ac0      	subs	r0, r0, r3
   3523c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3523e:	2b00      	cmp	r3, #0
   35240:	d001      	beq.n	35246 <__sflush_r+0x46>
   35242:	6c23      	ldr	r3, [r4, #64]	; 0x40
   35244:	1ac0      	subs	r0, r0, r3
   35246:	0002      	movs	r2, r0
   35248:	6a21      	ldr	r1, [r4, #32]
   3524a:	2300      	movs	r3, #0
   3524c:	0028      	movs	r0, r5
   3524e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35250:	47b8      	blx	r7
   35252:	89a1      	ldrh	r1, [r4, #12]
   35254:	1c43      	adds	r3, r0, #1
   35256:	d106      	bne.n	35266 <__sflush_r+0x66>
   35258:	682b      	ldr	r3, [r5, #0]
   3525a:	2b1d      	cmp	r3, #29
   3525c:	d831      	bhi.n	352c2 <__sflush_r+0xc2>
   3525e:	4a2c      	ldr	r2, [pc, #176]	; (35310 <__sflush_r+0x110>)
   35260:	40da      	lsrs	r2, r3
   35262:	07d3      	lsls	r3, r2, #31
   35264:	d52d      	bpl.n	352c2 <__sflush_r+0xc2>
   35266:	2300      	movs	r3, #0
   35268:	6063      	str	r3, [r4, #4]
   3526a:	6923      	ldr	r3, [r4, #16]
   3526c:	6023      	str	r3, [r4, #0]
   3526e:	04cb      	lsls	r3, r1, #19
   35270:	d505      	bpl.n	3527e <__sflush_r+0x7e>
   35272:	1c43      	adds	r3, r0, #1
   35274:	d102      	bne.n	3527c <__sflush_r+0x7c>
   35276:	682b      	ldr	r3, [r5, #0]
   35278:	2b00      	cmp	r3, #0
   3527a:	d100      	bne.n	3527e <__sflush_r+0x7e>
   3527c:	6560      	str	r0, [r4, #84]	; 0x54
   3527e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35280:	602e      	str	r6, [r5, #0]
   35282:	2900      	cmp	r1, #0
   35284:	d0c8      	beq.n	35218 <__sflush_r+0x18>
   35286:	0023      	movs	r3, r4
   35288:	3344      	adds	r3, #68	; 0x44
   3528a:	4299      	cmp	r1, r3
   3528c:	d002      	beq.n	35294 <__sflush_r+0x94>
   3528e:	0028      	movs	r0, r5
   35290:	f7ff fbee 	bl	34a70 <_free_r>
   35294:	2000      	movs	r0, #0
   35296:	6360      	str	r0, [r4, #52]	; 0x34
   35298:	e7bf      	b.n	3521a <__sflush_r+0x1a>
   3529a:	2301      	movs	r3, #1
   3529c:	6a21      	ldr	r1, [r4, #32]
   3529e:	0028      	movs	r0, r5
   352a0:	47b8      	blx	r7
   352a2:	1c43      	adds	r3, r0, #1
   352a4:	d1c5      	bne.n	35232 <__sflush_r+0x32>
   352a6:	682b      	ldr	r3, [r5, #0]
   352a8:	2b00      	cmp	r3, #0
   352aa:	d0c2      	beq.n	35232 <__sflush_r+0x32>
   352ac:	2b1d      	cmp	r3, #29
   352ae:	d001      	beq.n	352b4 <__sflush_r+0xb4>
   352b0:	2b16      	cmp	r3, #22
   352b2:	d101      	bne.n	352b8 <__sflush_r+0xb8>
   352b4:	602e      	str	r6, [r5, #0]
   352b6:	e7af      	b.n	35218 <__sflush_r+0x18>
   352b8:	2340      	movs	r3, #64	; 0x40
   352ba:	89a2      	ldrh	r2, [r4, #12]
   352bc:	4313      	orrs	r3, r2
   352be:	81a3      	strh	r3, [r4, #12]
   352c0:	e7ab      	b.n	3521a <__sflush_r+0x1a>
   352c2:	2340      	movs	r3, #64	; 0x40
   352c4:	430b      	orrs	r3, r1
   352c6:	2001      	movs	r0, #1
   352c8:	81a3      	strh	r3, [r4, #12]
   352ca:	4240      	negs	r0, r0
   352cc:	e7a5      	b.n	3521a <__sflush_r+0x1a>
   352ce:	690f      	ldr	r7, [r1, #16]
   352d0:	2f00      	cmp	r7, #0
   352d2:	d0a1      	beq.n	35218 <__sflush_r+0x18>
   352d4:	680b      	ldr	r3, [r1, #0]
   352d6:	600f      	str	r7, [r1, #0]
   352d8:	1bdb      	subs	r3, r3, r7
   352da:	9301      	str	r3, [sp, #4]
   352dc:	2300      	movs	r3, #0
   352de:	0792      	lsls	r2, r2, #30
   352e0:	d100      	bne.n	352e4 <__sflush_r+0xe4>
   352e2:	694b      	ldr	r3, [r1, #20]
   352e4:	60a3      	str	r3, [r4, #8]
   352e6:	9b01      	ldr	r3, [sp, #4]
   352e8:	2b00      	cmp	r3, #0
   352ea:	dc00      	bgt.n	352ee <__sflush_r+0xee>
   352ec:	e794      	b.n	35218 <__sflush_r+0x18>
   352ee:	9b01      	ldr	r3, [sp, #4]
   352f0:	003a      	movs	r2, r7
   352f2:	6a21      	ldr	r1, [r4, #32]
   352f4:	0028      	movs	r0, r5
   352f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   352f8:	47b0      	blx	r6
   352fa:	2800      	cmp	r0, #0
   352fc:	dc03      	bgt.n	35306 <__sflush_r+0x106>
   352fe:	2340      	movs	r3, #64	; 0x40
   35300:	89a2      	ldrh	r2, [r4, #12]
   35302:	4313      	orrs	r3, r2
   35304:	e7df      	b.n	352c6 <__sflush_r+0xc6>
   35306:	9b01      	ldr	r3, [sp, #4]
   35308:	183f      	adds	r7, r7, r0
   3530a:	1a1b      	subs	r3, r3, r0
   3530c:	9301      	str	r3, [sp, #4]
   3530e:	e7ea      	b.n	352e6 <__sflush_r+0xe6>
   35310:	20400001 	.word	0x20400001

00035314 <_fflush_r>:
   35314:	690b      	ldr	r3, [r1, #16]
   35316:	b570      	push	{r4, r5, r6, lr}
   35318:	0005      	movs	r5, r0
   3531a:	000c      	movs	r4, r1
   3531c:	2b00      	cmp	r3, #0
   3531e:	d101      	bne.n	35324 <_fflush_r+0x10>
   35320:	2000      	movs	r0, #0
   35322:	bd70      	pop	{r4, r5, r6, pc}
   35324:	2800      	cmp	r0, #0
   35326:	d004      	beq.n	35332 <_fflush_r+0x1e>
   35328:	6983      	ldr	r3, [r0, #24]
   3532a:	2b00      	cmp	r3, #0
   3532c:	d101      	bne.n	35332 <_fflush_r+0x1e>
   3532e:	f000 f85f 	bl	353f0 <__sinit>
   35332:	4b0b      	ldr	r3, [pc, #44]	; (35360 <_fflush_r+0x4c>)
   35334:	429c      	cmp	r4, r3
   35336:	d109      	bne.n	3534c <_fflush_r+0x38>
   35338:	686c      	ldr	r4, [r5, #4]
   3533a:	220c      	movs	r2, #12
   3533c:	5ea3      	ldrsh	r3, [r4, r2]
   3533e:	2b00      	cmp	r3, #0
   35340:	d0ee      	beq.n	35320 <_fflush_r+0xc>
   35342:	0021      	movs	r1, r4
   35344:	0028      	movs	r0, r5
   35346:	f7ff ff5b 	bl	35200 <__sflush_r>
   3534a:	e7ea      	b.n	35322 <_fflush_r+0xe>
   3534c:	4b05      	ldr	r3, [pc, #20]	; (35364 <_fflush_r+0x50>)
   3534e:	429c      	cmp	r4, r3
   35350:	d101      	bne.n	35356 <_fflush_r+0x42>
   35352:	68ac      	ldr	r4, [r5, #8]
   35354:	e7f1      	b.n	3533a <_fflush_r+0x26>
   35356:	4b04      	ldr	r3, [pc, #16]	; (35368 <_fflush_r+0x54>)
   35358:	429c      	cmp	r4, r3
   3535a:	d1ee      	bne.n	3533a <_fflush_r+0x26>
   3535c:	68ec      	ldr	r4, [r5, #12]
   3535e:	e7ec      	b.n	3533a <_fflush_r+0x26>
   35360:	0003a2c8 	.word	0x0003a2c8
   35364:	0003a2e8 	.word	0x0003a2e8
   35368:	0003a2a8 	.word	0x0003a2a8

0003536c <_cleanup_r>:
   3536c:	b510      	push	{r4, lr}
   3536e:	4902      	ldr	r1, [pc, #8]	; (35378 <_cleanup_r+0xc>)
   35370:	f000 f8b2 	bl	354d8 <_fwalk_reent>
   35374:	bd10      	pop	{r4, pc}
   35376:	46c0      	nop			; (mov r8, r8)
   35378:	00035315 	.word	0x00035315

0003537c <std.isra.0>:
   3537c:	2300      	movs	r3, #0
   3537e:	b510      	push	{r4, lr}
   35380:	0004      	movs	r4, r0
   35382:	6003      	str	r3, [r0, #0]
   35384:	6043      	str	r3, [r0, #4]
   35386:	6083      	str	r3, [r0, #8]
   35388:	8181      	strh	r1, [r0, #12]
   3538a:	6643      	str	r3, [r0, #100]	; 0x64
   3538c:	81c2      	strh	r2, [r0, #14]
   3538e:	6103      	str	r3, [r0, #16]
   35390:	6143      	str	r3, [r0, #20]
   35392:	6183      	str	r3, [r0, #24]
   35394:	0019      	movs	r1, r3
   35396:	2208      	movs	r2, #8
   35398:	305c      	adds	r0, #92	; 0x5c
   3539a:	f7ff fb60 	bl	34a5e <memset>
   3539e:	4b05      	ldr	r3, [pc, #20]	; (353b4 <std.isra.0+0x38>)
   353a0:	6224      	str	r4, [r4, #32]
   353a2:	6263      	str	r3, [r4, #36]	; 0x24
   353a4:	4b04      	ldr	r3, [pc, #16]	; (353b8 <std.isra.0+0x3c>)
   353a6:	62a3      	str	r3, [r4, #40]	; 0x28
   353a8:	4b04      	ldr	r3, [pc, #16]	; (353bc <std.isra.0+0x40>)
   353aa:	62e3      	str	r3, [r4, #44]	; 0x2c
   353ac:	4b04      	ldr	r3, [pc, #16]	; (353c0 <std.isra.0+0x44>)
   353ae:	6323      	str	r3, [r4, #48]	; 0x30
   353b0:	bd10      	pop	{r4, pc}
   353b2:	46c0      	nop			; (mov r8, r8)
   353b4:	00035c19 	.word	0x00035c19
   353b8:	00035c41 	.word	0x00035c41
   353bc:	00035c79 	.word	0x00035c79
   353c0:	00035ca5 	.word	0x00035ca5

000353c4 <__sfmoreglue>:
   353c4:	b570      	push	{r4, r5, r6, lr}
   353c6:	2568      	movs	r5, #104	; 0x68
   353c8:	1e4a      	subs	r2, r1, #1
   353ca:	4355      	muls	r5, r2
   353cc:	000e      	movs	r6, r1
   353ce:	0029      	movs	r1, r5
   353d0:	3174      	adds	r1, #116	; 0x74
   353d2:	f7ff fb97 	bl	34b04 <_malloc_r>
   353d6:	1e04      	subs	r4, r0, #0
   353d8:	d008      	beq.n	353ec <__sfmoreglue+0x28>
   353da:	2100      	movs	r1, #0
   353dc:	002a      	movs	r2, r5
   353de:	6001      	str	r1, [r0, #0]
   353e0:	6046      	str	r6, [r0, #4]
   353e2:	300c      	adds	r0, #12
   353e4:	60a0      	str	r0, [r4, #8]
   353e6:	3268      	adds	r2, #104	; 0x68
   353e8:	f7ff fb39 	bl	34a5e <memset>
   353ec:	0020      	movs	r0, r4
   353ee:	bd70      	pop	{r4, r5, r6, pc}

000353f0 <__sinit>:
   353f0:	6983      	ldr	r3, [r0, #24]
   353f2:	b513      	push	{r0, r1, r4, lr}
   353f4:	0004      	movs	r4, r0
   353f6:	2b00      	cmp	r3, #0
   353f8:	d128      	bne.n	3544c <__sinit+0x5c>
   353fa:	6483      	str	r3, [r0, #72]	; 0x48
   353fc:	64c3      	str	r3, [r0, #76]	; 0x4c
   353fe:	6503      	str	r3, [r0, #80]	; 0x50
   35400:	4b13      	ldr	r3, [pc, #76]	; (35450 <__sinit+0x60>)
   35402:	4a14      	ldr	r2, [pc, #80]	; (35454 <__sinit+0x64>)
   35404:	681b      	ldr	r3, [r3, #0]
   35406:	6282      	str	r2, [r0, #40]	; 0x28
   35408:	9301      	str	r3, [sp, #4]
   3540a:	4298      	cmp	r0, r3
   3540c:	d101      	bne.n	35412 <__sinit+0x22>
   3540e:	2301      	movs	r3, #1
   35410:	6183      	str	r3, [r0, #24]
   35412:	0020      	movs	r0, r4
   35414:	f000 f820 	bl	35458 <__sfp>
   35418:	6060      	str	r0, [r4, #4]
   3541a:	0020      	movs	r0, r4
   3541c:	f000 f81c 	bl	35458 <__sfp>
   35420:	60a0      	str	r0, [r4, #8]
   35422:	0020      	movs	r0, r4
   35424:	f000 f818 	bl	35458 <__sfp>
   35428:	2200      	movs	r2, #0
   3542a:	60e0      	str	r0, [r4, #12]
   3542c:	2104      	movs	r1, #4
   3542e:	6860      	ldr	r0, [r4, #4]
   35430:	f7ff ffa4 	bl	3537c <std.isra.0>
   35434:	2201      	movs	r2, #1
   35436:	2109      	movs	r1, #9
   35438:	68a0      	ldr	r0, [r4, #8]
   3543a:	f7ff ff9f 	bl	3537c <std.isra.0>
   3543e:	2202      	movs	r2, #2
   35440:	2112      	movs	r1, #18
   35442:	68e0      	ldr	r0, [r4, #12]
   35444:	f7ff ff9a 	bl	3537c <std.isra.0>
   35448:	2301      	movs	r3, #1
   3544a:	61a3      	str	r3, [r4, #24]
   3544c:	bd13      	pop	{r0, r1, r4, pc}
   3544e:	46c0      	nop			; (mov r8, r8)
   35450:	0003a2a4 	.word	0x0003a2a4
   35454:	0003536d 	.word	0x0003536d

00035458 <__sfp>:
   35458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3545a:	4b1e      	ldr	r3, [pc, #120]	; (354d4 <__sfp+0x7c>)
   3545c:	0007      	movs	r7, r0
   3545e:	681e      	ldr	r6, [r3, #0]
   35460:	69b3      	ldr	r3, [r6, #24]
   35462:	2b00      	cmp	r3, #0
   35464:	d102      	bne.n	3546c <__sfp+0x14>
   35466:	0030      	movs	r0, r6
   35468:	f7ff ffc2 	bl	353f0 <__sinit>
   3546c:	3648      	adds	r6, #72	; 0x48
   3546e:	68b4      	ldr	r4, [r6, #8]
   35470:	6873      	ldr	r3, [r6, #4]
   35472:	3b01      	subs	r3, #1
   35474:	d504      	bpl.n	35480 <__sfp+0x28>
   35476:	6833      	ldr	r3, [r6, #0]
   35478:	2b00      	cmp	r3, #0
   3547a:	d007      	beq.n	3548c <__sfp+0x34>
   3547c:	6836      	ldr	r6, [r6, #0]
   3547e:	e7f6      	b.n	3546e <__sfp+0x16>
   35480:	220c      	movs	r2, #12
   35482:	5ea5      	ldrsh	r5, [r4, r2]
   35484:	2d00      	cmp	r5, #0
   35486:	d00d      	beq.n	354a4 <__sfp+0x4c>
   35488:	3468      	adds	r4, #104	; 0x68
   3548a:	e7f2      	b.n	35472 <__sfp+0x1a>
   3548c:	2104      	movs	r1, #4
   3548e:	0038      	movs	r0, r7
   35490:	f7ff ff98 	bl	353c4 <__sfmoreglue>
   35494:	6030      	str	r0, [r6, #0]
   35496:	2800      	cmp	r0, #0
   35498:	d1f0      	bne.n	3547c <__sfp+0x24>
   3549a:	230c      	movs	r3, #12
   3549c:	0004      	movs	r4, r0
   3549e:	603b      	str	r3, [r7, #0]
   354a0:	0020      	movs	r0, r4
   354a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   354a4:	2301      	movs	r3, #1
   354a6:	0020      	movs	r0, r4
   354a8:	425b      	negs	r3, r3
   354aa:	81e3      	strh	r3, [r4, #14]
   354ac:	3302      	adds	r3, #2
   354ae:	81a3      	strh	r3, [r4, #12]
   354b0:	6665      	str	r5, [r4, #100]	; 0x64
   354b2:	6025      	str	r5, [r4, #0]
   354b4:	60a5      	str	r5, [r4, #8]
   354b6:	6065      	str	r5, [r4, #4]
   354b8:	6125      	str	r5, [r4, #16]
   354ba:	6165      	str	r5, [r4, #20]
   354bc:	61a5      	str	r5, [r4, #24]
   354be:	2208      	movs	r2, #8
   354c0:	0029      	movs	r1, r5
   354c2:	305c      	adds	r0, #92	; 0x5c
   354c4:	f7ff facb 	bl	34a5e <memset>
   354c8:	6365      	str	r5, [r4, #52]	; 0x34
   354ca:	63a5      	str	r5, [r4, #56]	; 0x38
   354cc:	64a5      	str	r5, [r4, #72]	; 0x48
   354ce:	64e5      	str	r5, [r4, #76]	; 0x4c
   354d0:	e7e6      	b.n	354a0 <__sfp+0x48>
   354d2:	46c0      	nop			; (mov r8, r8)
   354d4:	0003a2a4 	.word	0x0003a2a4

000354d8 <_fwalk_reent>:
   354d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   354da:	0004      	movs	r4, r0
   354dc:	0007      	movs	r7, r0
   354de:	2600      	movs	r6, #0
   354e0:	9101      	str	r1, [sp, #4]
   354e2:	3448      	adds	r4, #72	; 0x48
   354e4:	2c00      	cmp	r4, #0
   354e6:	d101      	bne.n	354ec <_fwalk_reent+0x14>
   354e8:	0030      	movs	r0, r6
   354ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   354ec:	6863      	ldr	r3, [r4, #4]
   354ee:	68a5      	ldr	r5, [r4, #8]
   354f0:	9300      	str	r3, [sp, #0]
   354f2:	9b00      	ldr	r3, [sp, #0]
   354f4:	3b01      	subs	r3, #1
   354f6:	9300      	str	r3, [sp, #0]
   354f8:	d501      	bpl.n	354fe <_fwalk_reent+0x26>
   354fa:	6824      	ldr	r4, [r4, #0]
   354fc:	e7f2      	b.n	354e4 <_fwalk_reent+0xc>
   354fe:	89ab      	ldrh	r3, [r5, #12]
   35500:	2b01      	cmp	r3, #1
   35502:	d908      	bls.n	35516 <_fwalk_reent+0x3e>
   35504:	220e      	movs	r2, #14
   35506:	5eab      	ldrsh	r3, [r5, r2]
   35508:	3301      	adds	r3, #1
   3550a:	d004      	beq.n	35516 <_fwalk_reent+0x3e>
   3550c:	0029      	movs	r1, r5
   3550e:	0038      	movs	r0, r7
   35510:	9b01      	ldr	r3, [sp, #4]
   35512:	4798      	blx	r3
   35514:	4306      	orrs	r6, r0
   35516:	3568      	adds	r5, #104	; 0x68
   35518:	e7eb      	b.n	354f2 <_fwalk_reent+0x1a>

0003551a <__locale_ctype_ptr_l>:
   3551a:	30ec      	adds	r0, #236	; 0xec
   3551c:	6800      	ldr	r0, [r0, #0]
   3551e:	4770      	bx	lr

00035520 <__locale_ctype_ptr>:
   35520:	4b04      	ldr	r3, [pc, #16]	; (35534 <__locale_ctype_ptr+0x14>)
   35522:	681b      	ldr	r3, [r3, #0]
   35524:	6a1b      	ldr	r3, [r3, #32]
   35526:	2b00      	cmp	r3, #0
   35528:	d100      	bne.n	3552c <__locale_ctype_ptr+0xc>
   3552a:	4b03      	ldr	r3, [pc, #12]	; (35538 <__locale_ctype_ptr+0x18>)
   3552c:	33ec      	adds	r3, #236	; 0xec
   3552e:	6818      	ldr	r0, [r3, #0]
   35530:	4770      	bx	lr
   35532:	46c0      	nop			; (mov r8, r8)
   35534:	20000124 	.word	0x20000124
   35538:	20000188 	.word	0x20000188

0003553c <__swhatbuf_r>:
   3553c:	b570      	push	{r4, r5, r6, lr}
   3553e:	000e      	movs	r6, r1
   35540:	001d      	movs	r5, r3
   35542:	230e      	movs	r3, #14
   35544:	5ec9      	ldrsh	r1, [r1, r3]
   35546:	b090      	sub	sp, #64	; 0x40
   35548:	0014      	movs	r4, r2
   3554a:	2900      	cmp	r1, #0
   3554c:	da07      	bge.n	3555e <__swhatbuf_r+0x22>
   3554e:	2300      	movs	r3, #0
   35550:	602b      	str	r3, [r5, #0]
   35552:	89b3      	ldrh	r3, [r6, #12]
   35554:	061b      	lsls	r3, r3, #24
   35556:	d411      	bmi.n	3557c <__swhatbuf_r+0x40>
   35558:	2380      	movs	r3, #128	; 0x80
   3555a:	00db      	lsls	r3, r3, #3
   3555c:	e00f      	b.n	3557e <__swhatbuf_r+0x42>
   3555e:	aa01      	add	r2, sp, #4
   35560:	f000 fbe6 	bl	35d30 <_fstat_r>
   35564:	2800      	cmp	r0, #0
   35566:	dbf2      	blt.n	3554e <__swhatbuf_r+0x12>
   35568:	22f0      	movs	r2, #240	; 0xf0
   3556a:	9b02      	ldr	r3, [sp, #8]
   3556c:	0212      	lsls	r2, r2, #8
   3556e:	4013      	ands	r3, r2
   35570:	4a05      	ldr	r2, [pc, #20]	; (35588 <__swhatbuf_r+0x4c>)
   35572:	189b      	adds	r3, r3, r2
   35574:	425a      	negs	r2, r3
   35576:	4153      	adcs	r3, r2
   35578:	602b      	str	r3, [r5, #0]
   3557a:	e7ed      	b.n	35558 <__swhatbuf_r+0x1c>
   3557c:	2340      	movs	r3, #64	; 0x40
   3557e:	2000      	movs	r0, #0
   35580:	6023      	str	r3, [r4, #0]
   35582:	b010      	add	sp, #64	; 0x40
   35584:	bd70      	pop	{r4, r5, r6, pc}
   35586:	46c0      	nop			; (mov r8, r8)
   35588:	ffffe000 	.word	0xffffe000

0003558c <__smakebuf_r>:
   3558c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3558e:	2602      	movs	r6, #2
   35590:	898b      	ldrh	r3, [r1, #12]
   35592:	0005      	movs	r5, r0
   35594:	000c      	movs	r4, r1
   35596:	4233      	tst	r3, r6
   35598:	d006      	beq.n	355a8 <__smakebuf_r+0x1c>
   3559a:	0023      	movs	r3, r4
   3559c:	3347      	adds	r3, #71	; 0x47
   3559e:	6023      	str	r3, [r4, #0]
   355a0:	6123      	str	r3, [r4, #16]
   355a2:	2301      	movs	r3, #1
   355a4:	6163      	str	r3, [r4, #20]
   355a6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   355a8:	ab01      	add	r3, sp, #4
   355aa:	466a      	mov	r2, sp
   355ac:	f7ff ffc6 	bl	3553c <__swhatbuf_r>
   355b0:	9900      	ldr	r1, [sp, #0]
   355b2:	0007      	movs	r7, r0
   355b4:	0028      	movs	r0, r5
   355b6:	f7ff faa5 	bl	34b04 <_malloc_r>
   355ba:	2800      	cmp	r0, #0
   355bc:	d108      	bne.n	355d0 <__smakebuf_r+0x44>
   355be:	220c      	movs	r2, #12
   355c0:	5ea3      	ldrsh	r3, [r4, r2]
   355c2:	059a      	lsls	r2, r3, #22
   355c4:	d4ef      	bmi.n	355a6 <__smakebuf_r+0x1a>
   355c6:	2203      	movs	r2, #3
   355c8:	4393      	bics	r3, r2
   355ca:	431e      	orrs	r6, r3
   355cc:	81a6      	strh	r6, [r4, #12]
   355ce:	e7e4      	b.n	3559a <__smakebuf_r+0xe>
   355d0:	4b0f      	ldr	r3, [pc, #60]	; (35610 <__smakebuf_r+0x84>)
   355d2:	62ab      	str	r3, [r5, #40]	; 0x28
   355d4:	2380      	movs	r3, #128	; 0x80
   355d6:	89a2      	ldrh	r2, [r4, #12]
   355d8:	6020      	str	r0, [r4, #0]
   355da:	4313      	orrs	r3, r2
   355dc:	81a3      	strh	r3, [r4, #12]
   355de:	9b00      	ldr	r3, [sp, #0]
   355e0:	6120      	str	r0, [r4, #16]
   355e2:	6163      	str	r3, [r4, #20]
   355e4:	9b01      	ldr	r3, [sp, #4]
   355e6:	2b00      	cmp	r3, #0
   355e8:	d00d      	beq.n	35606 <__smakebuf_r+0x7a>
   355ea:	230e      	movs	r3, #14
   355ec:	5ee1      	ldrsh	r1, [r4, r3]
   355ee:	0028      	movs	r0, r5
   355f0:	f000 fbb0 	bl	35d54 <_isatty_r>
   355f4:	2800      	cmp	r0, #0
   355f6:	d006      	beq.n	35606 <__smakebuf_r+0x7a>
   355f8:	2203      	movs	r2, #3
   355fa:	89a3      	ldrh	r3, [r4, #12]
   355fc:	4393      	bics	r3, r2
   355fe:	001a      	movs	r2, r3
   35600:	2301      	movs	r3, #1
   35602:	4313      	orrs	r3, r2
   35604:	81a3      	strh	r3, [r4, #12]
   35606:	89a0      	ldrh	r0, [r4, #12]
   35608:	4338      	orrs	r0, r7
   3560a:	81a0      	strh	r0, [r4, #12]
   3560c:	e7cb      	b.n	355a6 <__smakebuf_r+0x1a>
   3560e:	46c0      	nop			; (mov r8, r8)
   35610:	0003536d 	.word	0x0003536d

00035614 <__ascii_mbtowc>:
   35614:	b082      	sub	sp, #8
   35616:	2900      	cmp	r1, #0
   35618:	d100      	bne.n	3561c <__ascii_mbtowc+0x8>
   3561a:	a901      	add	r1, sp, #4
   3561c:	1e10      	subs	r0, r2, #0
   3561e:	d006      	beq.n	3562e <__ascii_mbtowc+0x1a>
   35620:	2b00      	cmp	r3, #0
   35622:	d006      	beq.n	35632 <__ascii_mbtowc+0x1e>
   35624:	7813      	ldrb	r3, [r2, #0]
   35626:	600b      	str	r3, [r1, #0]
   35628:	7810      	ldrb	r0, [r2, #0]
   3562a:	1e43      	subs	r3, r0, #1
   3562c:	4198      	sbcs	r0, r3
   3562e:	b002      	add	sp, #8
   35630:	4770      	bx	lr
   35632:	2002      	movs	r0, #2
   35634:	4240      	negs	r0, r0
   35636:	e7fa      	b.n	3562e <__ascii_mbtowc+0x1a>

00035638 <__malloc_lock>:
   35638:	4770      	bx	lr

0003563a <__malloc_unlock>:
   3563a:	4770      	bx	lr

0003563c <__ssputs_r>:
   3563c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3563e:	688e      	ldr	r6, [r1, #8]
   35640:	b085      	sub	sp, #20
   35642:	0007      	movs	r7, r0
   35644:	000c      	movs	r4, r1
   35646:	9203      	str	r2, [sp, #12]
   35648:	9301      	str	r3, [sp, #4]
   3564a:	429e      	cmp	r6, r3
   3564c:	d839      	bhi.n	356c2 <__ssputs_r+0x86>
   3564e:	2390      	movs	r3, #144	; 0x90
   35650:	898a      	ldrh	r2, [r1, #12]
   35652:	00db      	lsls	r3, r3, #3
   35654:	421a      	tst	r2, r3
   35656:	d034      	beq.n	356c2 <__ssputs_r+0x86>
   35658:	2503      	movs	r5, #3
   3565a:	6909      	ldr	r1, [r1, #16]
   3565c:	6823      	ldr	r3, [r4, #0]
   3565e:	1a5b      	subs	r3, r3, r1
   35660:	9302      	str	r3, [sp, #8]
   35662:	6963      	ldr	r3, [r4, #20]
   35664:	9802      	ldr	r0, [sp, #8]
   35666:	435d      	muls	r5, r3
   35668:	0feb      	lsrs	r3, r5, #31
   3566a:	195d      	adds	r5, r3, r5
   3566c:	9b01      	ldr	r3, [sp, #4]
   3566e:	106d      	asrs	r5, r5, #1
   35670:	3301      	adds	r3, #1
   35672:	181b      	adds	r3, r3, r0
   35674:	42ab      	cmp	r3, r5
   35676:	d900      	bls.n	3567a <__ssputs_r+0x3e>
   35678:	001d      	movs	r5, r3
   3567a:	0553      	lsls	r3, r2, #21
   3567c:	d532      	bpl.n	356e4 <__ssputs_r+0xa8>
   3567e:	0029      	movs	r1, r5
   35680:	0038      	movs	r0, r7
   35682:	f7ff fa3f 	bl	34b04 <_malloc_r>
   35686:	1e06      	subs	r6, r0, #0
   35688:	d109      	bne.n	3569e <__ssputs_r+0x62>
   3568a:	230c      	movs	r3, #12
   3568c:	603b      	str	r3, [r7, #0]
   3568e:	2340      	movs	r3, #64	; 0x40
   35690:	2001      	movs	r0, #1
   35692:	89a2      	ldrh	r2, [r4, #12]
   35694:	4240      	negs	r0, r0
   35696:	4313      	orrs	r3, r2
   35698:	81a3      	strh	r3, [r4, #12]
   3569a:	b005      	add	sp, #20
   3569c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3569e:	9a02      	ldr	r2, [sp, #8]
   356a0:	6921      	ldr	r1, [r4, #16]
   356a2:	f7ff f9c1 	bl	34a28 <memcpy>
   356a6:	89a3      	ldrh	r3, [r4, #12]
   356a8:	4a14      	ldr	r2, [pc, #80]	; (356fc <__ssputs_r+0xc0>)
   356aa:	401a      	ands	r2, r3
   356ac:	2380      	movs	r3, #128	; 0x80
   356ae:	4313      	orrs	r3, r2
   356b0:	81a3      	strh	r3, [r4, #12]
   356b2:	9b02      	ldr	r3, [sp, #8]
   356b4:	6126      	str	r6, [r4, #16]
   356b6:	18f6      	adds	r6, r6, r3
   356b8:	6026      	str	r6, [r4, #0]
   356ba:	6165      	str	r5, [r4, #20]
   356bc:	9e01      	ldr	r6, [sp, #4]
   356be:	1aed      	subs	r5, r5, r3
   356c0:	60a5      	str	r5, [r4, #8]
   356c2:	9b01      	ldr	r3, [sp, #4]
   356c4:	42b3      	cmp	r3, r6
   356c6:	d200      	bcs.n	356ca <__ssputs_r+0x8e>
   356c8:	001e      	movs	r6, r3
   356ca:	0032      	movs	r2, r6
   356cc:	9903      	ldr	r1, [sp, #12]
   356ce:	6820      	ldr	r0, [r4, #0]
   356d0:	f7ff f9b3 	bl	34a3a <memmove>
   356d4:	68a3      	ldr	r3, [r4, #8]
   356d6:	2000      	movs	r0, #0
   356d8:	1b9b      	subs	r3, r3, r6
   356da:	60a3      	str	r3, [r4, #8]
   356dc:	6823      	ldr	r3, [r4, #0]
   356de:	199e      	adds	r6, r3, r6
   356e0:	6026      	str	r6, [r4, #0]
   356e2:	e7da      	b.n	3569a <__ssputs_r+0x5e>
   356e4:	002a      	movs	r2, r5
   356e6:	0038      	movs	r0, r7
   356e8:	f000 fb65 	bl	35db6 <_realloc_r>
   356ec:	1e06      	subs	r6, r0, #0
   356ee:	d1e0      	bne.n	356b2 <__ssputs_r+0x76>
   356f0:	6921      	ldr	r1, [r4, #16]
   356f2:	0038      	movs	r0, r7
   356f4:	f7ff f9bc 	bl	34a70 <_free_r>
   356f8:	e7c7      	b.n	3568a <__ssputs_r+0x4e>
   356fa:	46c0      	nop			; (mov r8, r8)
   356fc:	fffffb7f 	.word	0xfffffb7f

00035700 <_svfiprintf_r>:
   35700:	b5f0      	push	{r4, r5, r6, r7, lr}
   35702:	b09f      	sub	sp, #124	; 0x7c
   35704:	9002      	str	r0, [sp, #8]
   35706:	9305      	str	r3, [sp, #20]
   35708:	898b      	ldrh	r3, [r1, #12]
   3570a:	000f      	movs	r7, r1
   3570c:	0016      	movs	r6, r2
   3570e:	061b      	lsls	r3, r3, #24
   35710:	d511      	bpl.n	35736 <_svfiprintf_r+0x36>
   35712:	690b      	ldr	r3, [r1, #16]
   35714:	2b00      	cmp	r3, #0
   35716:	d10e      	bne.n	35736 <_svfiprintf_r+0x36>
   35718:	2140      	movs	r1, #64	; 0x40
   3571a:	f7ff f9f3 	bl	34b04 <_malloc_r>
   3571e:	6038      	str	r0, [r7, #0]
   35720:	6138      	str	r0, [r7, #16]
   35722:	2800      	cmp	r0, #0
   35724:	d105      	bne.n	35732 <_svfiprintf_r+0x32>
   35726:	230c      	movs	r3, #12
   35728:	9a02      	ldr	r2, [sp, #8]
   3572a:	3801      	subs	r0, #1
   3572c:	6013      	str	r3, [r2, #0]
   3572e:	b01f      	add	sp, #124	; 0x7c
   35730:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35732:	2340      	movs	r3, #64	; 0x40
   35734:	617b      	str	r3, [r7, #20]
   35736:	2300      	movs	r3, #0
   35738:	ad06      	add	r5, sp, #24
   3573a:	616b      	str	r3, [r5, #20]
   3573c:	3320      	adds	r3, #32
   3573e:	766b      	strb	r3, [r5, #25]
   35740:	3310      	adds	r3, #16
   35742:	76ab      	strb	r3, [r5, #26]
   35744:	0034      	movs	r4, r6
   35746:	7823      	ldrb	r3, [r4, #0]
   35748:	2b00      	cmp	r3, #0
   3574a:	d147      	bne.n	357dc <_svfiprintf_r+0xdc>
   3574c:	1ba3      	subs	r3, r4, r6
   3574e:	9304      	str	r3, [sp, #16]
   35750:	d00d      	beq.n	3576e <_svfiprintf_r+0x6e>
   35752:	1ba3      	subs	r3, r4, r6
   35754:	0032      	movs	r2, r6
   35756:	0039      	movs	r1, r7
   35758:	9802      	ldr	r0, [sp, #8]
   3575a:	f7ff ff6f 	bl	3563c <__ssputs_r>
   3575e:	1c43      	adds	r3, r0, #1
   35760:	d100      	bne.n	35764 <_svfiprintf_r+0x64>
   35762:	e0b5      	b.n	358d0 <_svfiprintf_r+0x1d0>
   35764:	696a      	ldr	r2, [r5, #20]
   35766:	9b04      	ldr	r3, [sp, #16]
   35768:	4694      	mov	ip, r2
   3576a:	4463      	add	r3, ip
   3576c:	616b      	str	r3, [r5, #20]
   3576e:	7823      	ldrb	r3, [r4, #0]
   35770:	2b00      	cmp	r3, #0
   35772:	d100      	bne.n	35776 <_svfiprintf_r+0x76>
   35774:	e0ac      	b.n	358d0 <_svfiprintf_r+0x1d0>
   35776:	2201      	movs	r2, #1
   35778:	2300      	movs	r3, #0
   3577a:	4252      	negs	r2, r2
   3577c:	606a      	str	r2, [r5, #4]
   3577e:	a902      	add	r1, sp, #8
   35780:	3254      	adds	r2, #84	; 0x54
   35782:	1852      	adds	r2, r2, r1
   35784:	3401      	adds	r4, #1
   35786:	602b      	str	r3, [r5, #0]
   35788:	60eb      	str	r3, [r5, #12]
   3578a:	60ab      	str	r3, [r5, #8]
   3578c:	7013      	strb	r3, [r2, #0]
   3578e:	65ab      	str	r3, [r5, #88]	; 0x58
   35790:	4e58      	ldr	r6, [pc, #352]	; (358f4 <_svfiprintf_r+0x1f4>)
   35792:	2205      	movs	r2, #5
   35794:	7821      	ldrb	r1, [r4, #0]
   35796:	0030      	movs	r0, r6
   35798:	f000 fb02 	bl	35da0 <memchr>
   3579c:	1c62      	adds	r2, r4, #1
   3579e:	2800      	cmp	r0, #0
   357a0:	d120      	bne.n	357e4 <_svfiprintf_r+0xe4>
   357a2:	6829      	ldr	r1, [r5, #0]
   357a4:	06cb      	lsls	r3, r1, #27
   357a6:	d504      	bpl.n	357b2 <_svfiprintf_r+0xb2>
   357a8:	2353      	movs	r3, #83	; 0x53
   357aa:	ae02      	add	r6, sp, #8
   357ac:	3020      	adds	r0, #32
   357ae:	199b      	adds	r3, r3, r6
   357b0:	7018      	strb	r0, [r3, #0]
   357b2:	070b      	lsls	r3, r1, #28
   357b4:	d504      	bpl.n	357c0 <_svfiprintf_r+0xc0>
   357b6:	2353      	movs	r3, #83	; 0x53
   357b8:	202b      	movs	r0, #43	; 0x2b
   357ba:	ae02      	add	r6, sp, #8
   357bc:	199b      	adds	r3, r3, r6
   357be:	7018      	strb	r0, [r3, #0]
   357c0:	7823      	ldrb	r3, [r4, #0]
   357c2:	2b2a      	cmp	r3, #42	; 0x2a
   357c4:	d016      	beq.n	357f4 <_svfiprintf_r+0xf4>
   357c6:	2000      	movs	r0, #0
   357c8:	210a      	movs	r1, #10
   357ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   357cc:	7822      	ldrb	r2, [r4, #0]
   357ce:	3a30      	subs	r2, #48	; 0x30
   357d0:	2a09      	cmp	r2, #9
   357d2:	d955      	bls.n	35880 <_svfiprintf_r+0x180>
   357d4:	2800      	cmp	r0, #0
   357d6:	d015      	beq.n	35804 <_svfiprintf_r+0x104>
   357d8:	9309      	str	r3, [sp, #36]	; 0x24
   357da:	e013      	b.n	35804 <_svfiprintf_r+0x104>
   357dc:	2b25      	cmp	r3, #37	; 0x25
   357de:	d0b5      	beq.n	3574c <_svfiprintf_r+0x4c>
   357e0:	3401      	adds	r4, #1
   357e2:	e7b0      	b.n	35746 <_svfiprintf_r+0x46>
   357e4:	2301      	movs	r3, #1
   357e6:	1b80      	subs	r0, r0, r6
   357e8:	4083      	lsls	r3, r0
   357ea:	6829      	ldr	r1, [r5, #0]
   357ec:	0014      	movs	r4, r2
   357ee:	430b      	orrs	r3, r1
   357f0:	602b      	str	r3, [r5, #0]
   357f2:	e7cd      	b.n	35790 <_svfiprintf_r+0x90>
   357f4:	9b05      	ldr	r3, [sp, #20]
   357f6:	1d18      	adds	r0, r3, #4
   357f8:	681b      	ldr	r3, [r3, #0]
   357fa:	9005      	str	r0, [sp, #20]
   357fc:	2b00      	cmp	r3, #0
   357fe:	db39      	blt.n	35874 <_svfiprintf_r+0x174>
   35800:	9309      	str	r3, [sp, #36]	; 0x24
   35802:	0014      	movs	r4, r2
   35804:	7823      	ldrb	r3, [r4, #0]
   35806:	2b2e      	cmp	r3, #46	; 0x2e
   35808:	d10b      	bne.n	35822 <_svfiprintf_r+0x122>
   3580a:	7863      	ldrb	r3, [r4, #1]
   3580c:	1c62      	adds	r2, r4, #1
   3580e:	2b2a      	cmp	r3, #42	; 0x2a
   35810:	d13e      	bne.n	35890 <_svfiprintf_r+0x190>
   35812:	9b05      	ldr	r3, [sp, #20]
   35814:	3402      	adds	r4, #2
   35816:	1d1a      	adds	r2, r3, #4
   35818:	681b      	ldr	r3, [r3, #0]
   3581a:	9205      	str	r2, [sp, #20]
   3581c:	2b00      	cmp	r3, #0
   3581e:	db34      	blt.n	3588a <_svfiprintf_r+0x18a>
   35820:	9307      	str	r3, [sp, #28]
   35822:	4e35      	ldr	r6, [pc, #212]	; (358f8 <_svfiprintf_r+0x1f8>)
   35824:	7821      	ldrb	r1, [r4, #0]
   35826:	2203      	movs	r2, #3
   35828:	0030      	movs	r0, r6
   3582a:	f000 fab9 	bl	35da0 <memchr>
   3582e:	2800      	cmp	r0, #0
   35830:	d006      	beq.n	35840 <_svfiprintf_r+0x140>
   35832:	2340      	movs	r3, #64	; 0x40
   35834:	1b80      	subs	r0, r0, r6
   35836:	4083      	lsls	r3, r0
   35838:	682a      	ldr	r2, [r5, #0]
   3583a:	3401      	adds	r4, #1
   3583c:	4313      	orrs	r3, r2
   3583e:	602b      	str	r3, [r5, #0]
   35840:	7821      	ldrb	r1, [r4, #0]
   35842:	2206      	movs	r2, #6
   35844:	482d      	ldr	r0, [pc, #180]	; (358fc <_svfiprintf_r+0x1fc>)
   35846:	1c66      	adds	r6, r4, #1
   35848:	7629      	strb	r1, [r5, #24]
   3584a:	f000 faa9 	bl	35da0 <memchr>
   3584e:	2800      	cmp	r0, #0
   35850:	d046      	beq.n	358e0 <_svfiprintf_r+0x1e0>
   35852:	4b2b      	ldr	r3, [pc, #172]	; (35900 <_svfiprintf_r+0x200>)
   35854:	2b00      	cmp	r3, #0
   35856:	d12f      	bne.n	358b8 <_svfiprintf_r+0x1b8>
   35858:	6829      	ldr	r1, [r5, #0]
   3585a:	9b05      	ldr	r3, [sp, #20]
   3585c:	2207      	movs	r2, #7
   3585e:	05c9      	lsls	r1, r1, #23
   35860:	d528      	bpl.n	358b4 <_svfiprintf_r+0x1b4>
   35862:	189b      	adds	r3, r3, r2
   35864:	4393      	bics	r3, r2
   35866:	3308      	adds	r3, #8
   35868:	9305      	str	r3, [sp, #20]
   3586a:	696b      	ldr	r3, [r5, #20]
   3586c:	9a03      	ldr	r2, [sp, #12]
   3586e:	189b      	adds	r3, r3, r2
   35870:	616b      	str	r3, [r5, #20]
   35872:	e767      	b.n	35744 <_svfiprintf_r+0x44>
   35874:	425b      	negs	r3, r3
   35876:	60eb      	str	r3, [r5, #12]
   35878:	2302      	movs	r3, #2
   3587a:	430b      	orrs	r3, r1
   3587c:	602b      	str	r3, [r5, #0]
   3587e:	e7c0      	b.n	35802 <_svfiprintf_r+0x102>
   35880:	434b      	muls	r3, r1
   35882:	3401      	adds	r4, #1
   35884:	189b      	adds	r3, r3, r2
   35886:	2001      	movs	r0, #1
   35888:	e7a0      	b.n	357cc <_svfiprintf_r+0xcc>
   3588a:	2301      	movs	r3, #1
   3588c:	425b      	negs	r3, r3
   3588e:	e7c7      	b.n	35820 <_svfiprintf_r+0x120>
   35890:	2300      	movs	r3, #0
   35892:	0014      	movs	r4, r2
   35894:	200a      	movs	r0, #10
   35896:	001a      	movs	r2, r3
   35898:	606b      	str	r3, [r5, #4]
   3589a:	7821      	ldrb	r1, [r4, #0]
   3589c:	3930      	subs	r1, #48	; 0x30
   3589e:	2909      	cmp	r1, #9
   358a0:	d903      	bls.n	358aa <_svfiprintf_r+0x1aa>
   358a2:	2b00      	cmp	r3, #0
   358a4:	d0bd      	beq.n	35822 <_svfiprintf_r+0x122>
   358a6:	9207      	str	r2, [sp, #28]
   358a8:	e7bb      	b.n	35822 <_svfiprintf_r+0x122>
   358aa:	4342      	muls	r2, r0
   358ac:	3401      	adds	r4, #1
   358ae:	1852      	adds	r2, r2, r1
   358b0:	2301      	movs	r3, #1
   358b2:	e7f2      	b.n	3589a <_svfiprintf_r+0x19a>
   358b4:	3307      	adds	r3, #7
   358b6:	e7d5      	b.n	35864 <_svfiprintf_r+0x164>
   358b8:	ab05      	add	r3, sp, #20
   358ba:	9300      	str	r3, [sp, #0]
   358bc:	003a      	movs	r2, r7
   358be:	4b11      	ldr	r3, [pc, #68]	; (35904 <_svfiprintf_r+0x204>)
   358c0:	0029      	movs	r1, r5
   358c2:	9802      	ldr	r0, [sp, #8]
   358c4:	e000      	b.n	358c8 <_svfiprintf_r+0x1c8>
   358c6:	bf00      	nop
   358c8:	9003      	str	r0, [sp, #12]
   358ca:	9b03      	ldr	r3, [sp, #12]
   358cc:	3301      	adds	r3, #1
   358ce:	d1cc      	bne.n	3586a <_svfiprintf_r+0x16a>
   358d0:	89bb      	ldrh	r3, [r7, #12]
   358d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   358d4:	065b      	lsls	r3, r3, #25
   358d6:	d400      	bmi.n	358da <_svfiprintf_r+0x1da>
   358d8:	e729      	b.n	3572e <_svfiprintf_r+0x2e>
   358da:	2001      	movs	r0, #1
   358dc:	4240      	negs	r0, r0
   358de:	e726      	b.n	3572e <_svfiprintf_r+0x2e>
   358e0:	ab05      	add	r3, sp, #20
   358e2:	9300      	str	r3, [sp, #0]
   358e4:	003a      	movs	r2, r7
   358e6:	4b07      	ldr	r3, [pc, #28]	; (35904 <_svfiprintf_r+0x204>)
   358e8:	0029      	movs	r1, r5
   358ea:	9802      	ldr	r0, [sp, #8]
   358ec:	f000 f87a 	bl	359e4 <_printf_i>
   358f0:	e7ea      	b.n	358c8 <_svfiprintf_r+0x1c8>
   358f2:	46c0      	nop			; (mov r8, r8)
   358f4:	0003a312 	.word	0x0003a312
   358f8:	0003a318 	.word	0x0003a318
   358fc:	0003a31c 	.word	0x0003a31c
   35900:	00000000 	.word	0x00000000
   35904:	0003563d 	.word	0x0003563d

00035908 <_printf_common>:
   35908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3590a:	0015      	movs	r5, r2
   3590c:	9301      	str	r3, [sp, #4]
   3590e:	688a      	ldr	r2, [r1, #8]
   35910:	690b      	ldr	r3, [r1, #16]
   35912:	9000      	str	r0, [sp, #0]
   35914:	000c      	movs	r4, r1
   35916:	4293      	cmp	r3, r2
   35918:	da00      	bge.n	3591c <_printf_common+0x14>
   3591a:	0013      	movs	r3, r2
   3591c:	0022      	movs	r2, r4
   3591e:	602b      	str	r3, [r5, #0]
   35920:	3243      	adds	r2, #67	; 0x43
   35922:	7812      	ldrb	r2, [r2, #0]
   35924:	2a00      	cmp	r2, #0
   35926:	d001      	beq.n	3592c <_printf_common+0x24>
   35928:	3301      	adds	r3, #1
   3592a:	602b      	str	r3, [r5, #0]
   3592c:	6823      	ldr	r3, [r4, #0]
   3592e:	069b      	lsls	r3, r3, #26
   35930:	d502      	bpl.n	35938 <_printf_common+0x30>
   35932:	682b      	ldr	r3, [r5, #0]
   35934:	3302      	adds	r3, #2
   35936:	602b      	str	r3, [r5, #0]
   35938:	2706      	movs	r7, #6
   3593a:	6823      	ldr	r3, [r4, #0]
   3593c:	401f      	ands	r7, r3
   3593e:	d027      	beq.n	35990 <_printf_common+0x88>
   35940:	0023      	movs	r3, r4
   35942:	3343      	adds	r3, #67	; 0x43
   35944:	781b      	ldrb	r3, [r3, #0]
   35946:	1e5a      	subs	r2, r3, #1
   35948:	4193      	sbcs	r3, r2
   3594a:	6822      	ldr	r2, [r4, #0]
   3594c:	0692      	lsls	r2, r2, #26
   3594e:	d430      	bmi.n	359b2 <_printf_common+0xaa>
   35950:	0022      	movs	r2, r4
   35952:	9901      	ldr	r1, [sp, #4]
   35954:	3243      	adds	r2, #67	; 0x43
   35956:	9800      	ldr	r0, [sp, #0]
   35958:	9e08      	ldr	r6, [sp, #32]
   3595a:	47b0      	blx	r6
   3595c:	1c43      	adds	r3, r0, #1
   3595e:	d025      	beq.n	359ac <_printf_common+0xa4>
   35960:	2306      	movs	r3, #6
   35962:	6820      	ldr	r0, [r4, #0]
   35964:	682a      	ldr	r2, [r5, #0]
   35966:	68e1      	ldr	r1, [r4, #12]
   35968:	4003      	ands	r3, r0
   3596a:	2500      	movs	r5, #0
   3596c:	2b04      	cmp	r3, #4
   3596e:	d103      	bne.n	35978 <_printf_common+0x70>
   35970:	1a8d      	subs	r5, r1, r2
   35972:	43eb      	mvns	r3, r5
   35974:	17db      	asrs	r3, r3, #31
   35976:	401d      	ands	r5, r3
   35978:	68a3      	ldr	r3, [r4, #8]
   3597a:	6922      	ldr	r2, [r4, #16]
   3597c:	4293      	cmp	r3, r2
   3597e:	dd01      	ble.n	35984 <_printf_common+0x7c>
   35980:	1a9b      	subs	r3, r3, r2
   35982:	18ed      	adds	r5, r5, r3
   35984:	2700      	movs	r7, #0
   35986:	42bd      	cmp	r5, r7
   35988:	d120      	bne.n	359cc <_printf_common+0xc4>
   3598a:	2000      	movs	r0, #0
   3598c:	e010      	b.n	359b0 <_printf_common+0xa8>
   3598e:	3701      	adds	r7, #1
   35990:	68e3      	ldr	r3, [r4, #12]
   35992:	682a      	ldr	r2, [r5, #0]
   35994:	1a9b      	subs	r3, r3, r2
   35996:	429f      	cmp	r7, r3
   35998:	dad2      	bge.n	35940 <_printf_common+0x38>
   3599a:	0022      	movs	r2, r4
   3599c:	2301      	movs	r3, #1
   3599e:	3219      	adds	r2, #25
   359a0:	9901      	ldr	r1, [sp, #4]
   359a2:	9800      	ldr	r0, [sp, #0]
   359a4:	9e08      	ldr	r6, [sp, #32]
   359a6:	47b0      	blx	r6
   359a8:	1c43      	adds	r3, r0, #1
   359aa:	d1f0      	bne.n	3598e <_printf_common+0x86>
   359ac:	2001      	movs	r0, #1
   359ae:	4240      	negs	r0, r0
   359b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   359b2:	2030      	movs	r0, #48	; 0x30
   359b4:	18e1      	adds	r1, r4, r3
   359b6:	3143      	adds	r1, #67	; 0x43
   359b8:	7008      	strb	r0, [r1, #0]
   359ba:	0021      	movs	r1, r4
   359bc:	1c5a      	adds	r2, r3, #1
   359be:	3145      	adds	r1, #69	; 0x45
   359c0:	7809      	ldrb	r1, [r1, #0]
   359c2:	18a2      	adds	r2, r4, r2
   359c4:	3243      	adds	r2, #67	; 0x43
   359c6:	3302      	adds	r3, #2
   359c8:	7011      	strb	r1, [r2, #0]
   359ca:	e7c1      	b.n	35950 <_printf_common+0x48>
   359cc:	0022      	movs	r2, r4
   359ce:	2301      	movs	r3, #1
   359d0:	321a      	adds	r2, #26
   359d2:	9901      	ldr	r1, [sp, #4]
   359d4:	9800      	ldr	r0, [sp, #0]
   359d6:	9e08      	ldr	r6, [sp, #32]
   359d8:	47b0      	blx	r6
   359da:	1c43      	adds	r3, r0, #1
   359dc:	d0e6      	beq.n	359ac <_printf_common+0xa4>
   359de:	3701      	adds	r7, #1
   359e0:	e7d1      	b.n	35986 <_printf_common+0x7e>
	...

000359e4 <_printf_i>:
   359e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   359e6:	b08b      	sub	sp, #44	; 0x2c
   359e8:	9206      	str	r2, [sp, #24]
   359ea:	000a      	movs	r2, r1
   359ec:	3243      	adds	r2, #67	; 0x43
   359ee:	9307      	str	r3, [sp, #28]
   359f0:	9005      	str	r0, [sp, #20]
   359f2:	9204      	str	r2, [sp, #16]
   359f4:	7e0a      	ldrb	r2, [r1, #24]
   359f6:	000c      	movs	r4, r1
   359f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   359fa:	2a6e      	cmp	r2, #110	; 0x6e
   359fc:	d100      	bne.n	35a00 <_printf_i+0x1c>
   359fe:	e08f      	b.n	35b20 <_printf_i+0x13c>
   35a00:	d817      	bhi.n	35a32 <_printf_i+0x4e>
   35a02:	2a63      	cmp	r2, #99	; 0x63
   35a04:	d02c      	beq.n	35a60 <_printf_i+0x7c>
   35a06:	d808      	bhi.n	35a1a <_printf_i+0x36>
   35a08:	2a00      	cmp	r2, #0
   35a0a:	d100      	bne.n	35a0e <_printf_i+0x2a>
   35a0c:	e099      	b.n	35b42 <_printf_i+0x15e>
   35a0e:	2a58      	cmp	r2, #88	; 0x58
   35a10:	d054      	beq.n	35abc <_printf_i+0xd8>
   35a12:	0026      	movs	r6, r4
   35a14:	3642      	adds	r6, #66	; 0x42
   35a16:	7032      	strb	r2, [r6, #0]
   35a18:	e029      	b.n	35a6e <_printf_i+0x8a>
   35a1a:	2a64      	cmp	r2, #100	; 0x64
   35a1c:	d001      	beq.n	35a22 <_printf_i+0x3e>
   35a1e:	2a69      	cmp	r2, #105	; 0x69
   35a20:	d1f7      	bne.n	35a12 <_printf_i+0x2e>
   35a22:	6821      	ldr	r1, [r4, #0]
   35a24:	681a      	ldr	r2, [r3, #0]
   35a26:	0608      	lsls	r0, r1, #24
   35a28:	d523      	bpl.n	35a72 <_printf_i+0x8e>
   35a2a:	1d11      	adds	r1, r2, #4
   35a2c:	6019      	str	r1, [r3, #0]
   35a2e:	6815      	ldr	r5, [r2, #0]
   35a30:	e025      	b.n	35a7e <_printf_i+0x9a>
   35a32:	2a73      	cmp	r2, #115	; 0x73
   35a34:	d100      	bne.n	35a38 <_printf_i+0x54>
   35a36:	e088      	b.n	35b4a <_printf_i+0x166>
   35a38:	d808      	bhi.n	35a4c <_printf_i+0x68>
   35a3a:	2a6f      	cmp	r2, #111	; 0x6f
   35a3c:	d029      	beq.n	35a92 <_printf_i+0xae>
   35a3e:	2a70      	cmp	r2, #112	; 0x70
   35a40:	d1e7      	bne.n	35a12 <_printf_i+0x2e>
   35a42:	2220      	movs	r2, #32
   35a44:	6809      	ldr	r1, [r1, #0]
   35a46:	430a      	orrs	r2, r1
   35a48:	6022      	str	r2, [r4, #0]
   35a4a:	e003      	b.n	35a54 <_printf_i+0x70>
   35a4c:	2a75      	cmp	r2, #117	; 0x75
   35a4e:	d020      	beq.n	35a92 <_printf_i+0xae>
   35a50:	2a78      	cmp	r2, #120	; 0x78
   35a52:	d1de      	bne.n	35a12 <_printf_i+0x2e>
   35a54:	0022      	movs	r2, r4
   35a56:	2178      	movs	r1, #120	; 0x78
   35a58:	3245      	adds	r2, #69	; 0x45
   35a5a:	7011      	strb	r1, [r2, #0]
   35a5c:	4a6c      	ldr	r2, [pc, #432]	; (35c10 <_printf_i+0x22c>)
   35a5e:	e030      	b.n	35ac2 <_printf_i+0xde>
   35a60:	000e      	movs	r6, r1
   35a62:	681a      	ldr	r2, [r3, #0]
   35a64:	3642      	adds	r6, #66	; 0x42
   35a66:	1d11      	adds	r1, r2, #4
   35a68:	6019      	str	r1, [r3, #0]
   35a6a:	6813      	ldr	r3, [r2, #0]
   35a6c:	7033      	strb	r3, [r6, #0]
   35a6e:	2301      	movs	r3, #1
   35a70:	e079      	b.n	35b66 <_printf_i+0x182>
   35a72:	0649      	lsls	r1, r1, #25
   35a74:	d5d9      	bpl.n	35a2a <_printf_i+0x46>
   35a76:	1d11      	adds	r1, r2, #4
   35a78:	6019      	str	r1, [r3, #0]
   35a7a:	2300      	movs	r3, #0
   35a7c:	5ed5      	ldrsh	r5, [r2, r3]
   35a7e:	2d00      	cmp	r5, #0
   35a80:	da03      	bge.n	35a8a <_printf_i+0xa6>
   35a82:	232d      	movs	r3, #45	; 0x2d
   35a84:	9a04      	ldr	r2, [sp, #16]
   35a86:	426d      	negs	r5, r5
   35a88:	7013      	strb	r3, [r2, #0]
   35a8a:	4b62      	ldr	r3, [pc, #392]	; (35c14 <_printf_i+0x230>)
   35a8c:	270a      	movs	r7, #10
   35a8e:	9303      	str	r3, [sp, #12]
   35a90:	e02f      	b.n	35af2 <_printf_i+0x10e>
   35a92:	6820      	ldr	r0, [r4, #0]
   35a94:	6819      	ldr	r1, [r3, #0]
   35a96:	0605      	lsls	r5, r0, #24
   35a98:	d503      	bpl.n	35aa2 <_printf_i+0xbe>
   35a9a:	1d08      	adds	r0, r1, #4
   35a9c:	6018      	str	r0, [r3, #0]
   35a9e:	680d      	ldr	r5, [r1, #0]
   35aa0:	e005      	b.n	35aae <_printf_i+0xca>
   35aa2:	0640      	lsls	r0, r0, #25
   35aa4:	d5f9      	bpl.n	35a9a <_printf_i+0xb6>
   35aa6:	680d      	ldr	r5, [r1, #0]
   35aa8:	1d08      	adds	r0, r1, #4
   35aaa:	6018      	str	r0, [r3, #0]
   35aac:	b2ad      	uxth	r5, r5
   35aae:	4b59      	ldr	r3, [pc, #356]	; (35c14 <_printf_i+0x230>)
   35ab0:	2708      	movs	r7, #8
   35ab2:	9303      	str	r3, [sp, #12]
   35ab4:	2a6f      	cmp	r2, #111	; 0x6f
   35ab6:	d018      	beq.n	35aea <_printf_i+0x106>
   35ab8:	270a      	movs	r7, #10
   35aba:	e016      	b.n	35aea <_printf_i+0x106>
   35abc:	3145      	adds	r1, #69	; 0x45
   35abe:	700a      	strb	r2, [r1, #0]
   35ac0:	4a54      	ldr	r2, [pc, #336]	; (35c14 <_printf_i+0x230>)
   35ac2:	9203      	str	r2, [sp, #12]
   35ac4:	681a      	ldr	r2, [r3, #0]
   35ac6:	6821      	ldr	r1, [r4, #0]
   35ac8:	1d10      	adds	r0, r2, #4
   35aca:	6018      	str	r0, [r3, #0]
   35acc:	6815      	ldr	r5, [r2, #0]
   35ace:	0608      	lsls	r0, r1, #24
   35ad0:	d522      	bpl.n	35b18 <_printf_i+0x134>
   35ad2:	07cb      	lsls	r3, r1, #31
   35ad4:	d502      	bpl.n	35adc <_printf_i+0xf8>
   35ad6:	2320      	movs	r3, #32
   35ad8:	4319      	orrs	r1, r3
   35ada:	6021      	str	r1, [r4, #0]
   35adc:	2710      	movs	r7, #16
   35ade:	2d00      	cmp	r5, #0
   35ae0:	d103      	bne.n	35aea <_printf_i+0x106>
   35ae2:	2320      	movs	r3, #32
   35ae4:	6822      	ldr	r2, [r4, #0]
   35ae6:	439a      	bics	r2, r3
   35ae8:	6022      	str	r2, [r4, #0]
   35aea:	0023      	movs	r3, r4
   35aec:	2200      	movs	r2, #0
   35aee:	3343      	adds	r3, #67	; 0x43
   35af0:	701a      	strb	r2, [r3, #0]
   35af2:	6863      	ldr	r3, [r4, #4]
   35af4:	60a3      	str	r3, [r4, #8]
   35af6:	2b00      	cmp	r3, #0
   35af8:	db5c      	blt.n	35bb4 <_printf_i+0x1d0>
   35afa:	2204      	movs	r2, #4
   35afc:	6821      	ldr	r1, [r4, #0]
   35afe:	4391      	bics	r1, r2
   35b00:	6021      	str	r1, [r4, #0]
   35b02:	2d00      	cmp	r5, #0
   35b04:	d158      	bne.n	35bb8 <_printf_i+0x1d4>
   35b06:	9e04      	ldr	r6, [sp, #16]
   35b08:	2b00      	cmp	r3, #0
   35b0a:	d064      	beq.n	35bd6 <_printf_i+0x1f2>
   35b0c:	0026      	movs	r6, r4
   35b0e:	9b03      	ldr	r3, [sp, #12]
   35b10:	3642      	adds	r6, #66	; 0x42
   35b12:	781b      	ldrb	r3, [r3, #0]
   35b14:	7033      	strb	r3, [r6, #0]
   35b16:	e05e      	b.n	35bd6 <_printf_i+0x1f2>
   35b18:	0648      	lsls	r0, r1, #25
   35b1a:	d5da      	bpl.n	35ad2 <_printf_i+0xee>
   35b1c:	b2ad      	uxth	r5, r5
   35b1e:	e7d8      	b.n	35ad2 <_printf_i+0xee>
   35b20:	6809      	ldr	r1, [r1, #0]
   35b22:	681a      	ldr	r2, [r3, #0]
   35b24:	0608      	lsls	r0, r1, #24
   35b26:	d505      	bpl.n	35b34 <_printf_i+0x150>
   35b28:	1d11      	adds	r1, r2, #4
   35b2a:	6019      	str	r1, [r3, #0]
   35b2c:	6813      	ldr	r3, [r2, #0]
   35b2e:	6962      	ldr	r2, [r4, #20]
   35b30:	601a      	str	r2, [r3, #0]
   35b32:	e006      	b.n	35b42 <_printf_i+0x15e>
   35b34:	0649      	lsls	r1, r1, #25
   35b36:	d5f7      	bpl.n	35b28 <_printf_i+0x144>
   35b38:	1d11      	adds	r1, r2, #4
   35b3a:	6019      	str	r1, [r3, #0]
   35b3c:	6813      	ldr	r3, [r2, #0]
   35b3e:	8aa2      	ldrh	r2, [r4, #20]
   35b40:	801a      	strh	r2, [r3, #0]
   35b42:	2300      	movs	r3, #0
   35b44:	9e04      	ldr	r6, [sp, #16]
   35b46:	6123      	str	r3, [r4, #16]
   35b48:	e054      	b.n	35bf4 <_printf_i+0x210>
   35b4a:	681a      	ldr	r2, [r3, #0]
   35b4c:	1d11      	adds	r1, r2, #4
   35b4e:	6019      	str	r1, [r3, #0]
   35b50:	6816      	ldr	r6, [r2, #0]
   35b52:	2100      	movs	r1, #0
   35b54:	6862      	ldr	r2, [r4, #4]
   35b56:	0030      	movs	r0, r6
   35b58:	f000 f922 	bl	35da0 <memchr>
   35b5c:	2800      	cmp	r0, #0
   35b5e:	d001      	beq.n	35b64 <_printf_i+0x180>
   35b60:	1b80      	subs	r0, r0, r6
   35b62:	6060      	str	r0, [r4, #4]
   35b64:	6863      	ldr	r3, [r4, #4]
   35b66:	6123      	str	r3, [r4, #16]
   35b68:	2300      	movs	r3, #0
   35b6a:	9a04      	ldr	r2, [sp, #16]
   35b6c:	7013      	strb	r3, [r2, #0]
   35b6e:	e041      	b.n	35bf4 <_printf_i+0x210>
   35b70:	6923      	ldr	r3, [r4, #16]
   35b72:	0032      	movs	r2, r6
   35b74:	9906      	ldr	r1, [sp, #24]
   35b76:	9805      	ldr	r0, [sp, #20]
   35b78:	9d07      	ldr	r5, [sp, #28]
   35b7a:	47a8      	blx	r5
   35b7c:	1c43      	adds	r3, r0, #1
   35b7e:	d043      	beq.n	35c08 <_printf_i+0x224>
   35b80:	6823      	ldr	r3, [r4, #0]
   35b82:	2500      	movs	r5, #0
   35b84:	079b      	lsls	r3, r3, #30
   35b86:	d40f      	bmi.n	35ba8 <_printf_i+0x1c4>
   35b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
   35b8a:	68e0      	ldr	r0, [r4, #12]
   35b8c:	4298      	cmp	r0, r3
   35b8e:	da3d      	bge.n	35c0c <_printf_i+0x228>
   35b90:	0018      	movs	r0, r3
   35b92:	e03b      	b.n	35c0c <_printf_i+0x228>
   35b94:	0022      	movs	r2, r4
   35b96:	2301      	movs	r3, #1
   35b98:	3219      	adds	r2, #25
   35b9a:	9906      	ldr	r1, [sp, #24]
   35b9c:	9805      	ldr	r0, [sp, #20]
   35b9e:	9e07      	ldr	r6, [sp, #28]
   35ba0:	47b0      	blx	r6
   35ba2:	1c43      	adds	r3, r0, #1
   35ba4:	d030      	beq.n	35c08 <_printf_i+0x224>
   35ba6:	3501      	adds	r5, #1
   35ba8:	68e3      	ldr	r3, [r4, #12]
   35baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35bac:	1a9b      	subs	r3, r3, r2
   35bae:	429d      	cmp	r5, r3
   35bb0:	dbf0      	blt.n	35b94 <_printf_i+0x1b0>
   35bb2:	e7e9      	b.n	35b88 <_printf_i+0x1a4>
   35bb4:	2d00      	cmp	r5, #0
   35bb6:	d0a9      	beq.n	35b0c <_printf_i+0x128>
   35bb8:	9e04      	ldr	r6, [sp, #16]
   35bba:	0028      	movs	r0, r5
   35bbc:	0039      	movs	r1, r7
   35bbe:	f7fc ffe7 	bl	32b90 <__aeabi_uidivmod>
   35bc2:	9b03      	ldr	r3, [sp, #12]
   35bc4:	3e01      	subs	r6, #1
   35bc6:	5c5b      	ldrb	r3, [r3, r1]
   35bc8:	0028      	movs	r0, r5
   35bca:	7033      	strb	r3, [r6, #0]
   35bcc:	0039      	movs	r1, r7
   35bce:	f7fc ff59 	bl	32a84 <__udivsi3>
   35bd2:	1e05      	subs	r5, r0, #0
   35bd4:	d1f1      	bne.n	35bba <_printf_i+0x1d6>
   35bd6:	2f08      	cmp	r7, #8
   35bd8:	d109      	bne.n	35bee <_printf_i+0x20a>
   35bda:	6823      	ldr	r3, [r4, #0]
   35bdc:	07db      	lsls	r3, r3, #31
   35bde:	d506      	bpl.n	35bee <_printf_i+0x20a>
   35be0:	6863      	ldr	r3, [r4, #4]
   35be2:	6922      	ldr	r2, [r4, #16]
   35be4:	4293      	cmp	r3, r2
   35be6:	dc02      	bgt.n	35bee <_printf_i+0x20a>
   35be8:	2330      	movs	r3, #48	; 0x30
   35bea:	3e01      	subs	r6, #1
   35bec:	7033      	strb	r3, [r6, #0]
   35bee:	9b04      	ldr	r3, [sp, #16]
   35bf0:	1b9b      	subs	r3, r3, r6
   35bf2:	6123      	str	r3, [r4, #16]
   35bf4:	9b07      	ldr	r3, [sp, #28]
   35bf6:	aa09      	add	r2, sp, #36	; 0x24
   35bf8:	9300      	str	r3, [sp, #0]
   35bfa:	0021      	movs	r1, r4
   35bfc:	9b06      	ldr	r3, [sp, #24]
   35bfe:	9805      	ldr	r0, [sp, #20]
   35c00:	f7ff fe82 	bl	35908 <_printf_common>
   35c04:	1c43      	adds	r3, r0, #1
   35c06:	d1b3      	bne.n	35b70 <_printf_i+0x18c>
   35c08:	2001      	movs	r0, #1
   35c0a:	4240      	negs	r0, r0
   35c0c:	b00b      	add	sp, #44	; 0x2c
   35c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35c10:	0003a334 	.word	0x0003a334
   35c14:	0003a323 	.word	0x0003a323

00035c18 <__sread>:
   35c18:	b570      	push	{r4, r5, r6, lr}
   35c1a:	000c      	movs	r4, r1
   35c1c:	250e      	movs	r5, #14
   35c1e:	5f49      	ldrsh	r1, [r1, r5]
   35c20:	f000 f8f0 	bl	35e04 <_read_r>
   35c24:	2800      	cmp	r0, #0
   35c26:	db03      	blt.n	35c30 <__sread+0x18>
   35c28:	6d63      	ldr	r3, [r4, #84]	; 0x54
   35c2a:	181b      	adds	r3, r3, r0
   35c2c:	6563      	str	r3, [r4, #84]	; 0x54
   35c2e:	bd70      	pop	{r4, r5, r6, pc}
   35c30:	89a3      	ldrh	r3, [r4, #12]
   35c32:	4a02      	ldr	r2, [pc, #8]	; (35c3c <__sread+0x24>)
   35c34:	4013      	ands	r3, r2
   35c36:	81a3      	strh	r3, [r4, #12]
   35c38:	e7f9      	b.n	35c2e <__sread+0x16>
   35c3a:	46c0      	nop			; (mov r8, r8)
   35c3c:	ffffefff 	.word	0xffffefff

00035c40 <__swrite>:
   35c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35c42:	001f      	movs	r7, r3
   35c44:	898b      	ldrh	r3, [r1, #12]
   35c46:	0005      	movs	r5, r0
   35c48:	000c      	movs	r4, r1
   35c4a:	0016      	movs	r6, r2
   35c4c:	05db      	lsls	r3, r3, #23
   35c4e:	d505      	bpl.n	35c5c <__swrite+0x1c>
   35c50:	230e      	movs	r3, #14
   35c52:	5ec9      	ldrsh	r1, [r1, r3]
   35c54:	2200      	movs	r2, #0
   35c56:	2302      	movs	r3, #2
   35c58:	f000 f88e 	bl	35d78 <_lseek_r>
   35c5c:	89a3      	ldrh	r3, [r4, #12]
   35c5e:	4a05      	ldr	r2, [pc, #20]	; (35c74 <__swrite+0x34>)
   35c60:	0028      	movs	r0, r5
   35c62:	4013      	ands	r3, r2
   35c64:	81a3      	strh	r3, [r4, #12]
   35c66:	0032      	movs	r2, r6
   35c68:	230e      	movs	r3, #14
   35c6a:	5ee1      	ldrsh	r1, [r4, r3]
   35c6c:	003b      	movs	r3, r7
   35c6e:	f000 f839 	bl	35ce4 <_write_r>
   35c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35c74:	ffffefff 	.word	0xffffefff

00035c78 <__sseek>:
   35c78:	b570      	push	{r4, r5, r6, lr}
   35c7a:	000c      	movs	r4, r1
   35c7c:	250e      	movs	r5, #14
   35c7e:	5f49      	ldrsh	r1, [r1, r5]
   35c80:	f000 f87a 	bl	35d78 <_lseek_r>
   35c84:	89a3      	ldrh	r3, [r4, #12]
   35c86:	1c42      	adds	r2, r0, #1
   35c88:	d103      	bne.n	35c92 <__sseek+0x1a>
   35c8a:	4a05      	ldr	r2, [pc, #20]	; (35ca0 <__sseek+0x28>)
   35c8c:	4013      	ands	r3, r2
   35c8e:	81a3      	strh	r3, [r4, #12]
   35c90:	bd70      	pop	{r4, r5, r6, pc}
   35c92:	2280      	movs	r2, #128	; 0x80
   35c94:	0152      	lsls	r2, r2, #5
   35c96:	4313      	orrs	r3, r2
   35c98:	81a3      	strh	r3, [r4, #12]
   35c9a:	6560      	str	r0, [r4, #84]	; 0x54
   35c9c:	e7f8      	b.n	35c90 <__sseek+0x18>
   35c9e:	46c0      	nop			; (mov r8, r8)
   35ca0:	ffffefff 	.word	0xffffefff

00035ca4 <__sclose>:
   35ca4:	b510      	push	{r4, lr}
   35ca6:	230e      	movs	r3, #14
   35ca8:	5ec9      	ldrsh	r1, [r1, r3]
   35caa:	f000 f82f 	bl	35d0c <_close_r>
   35cae:	bd10      	pop	{r4, pc}

00035cb0 <strchr>:
   35cb0:	b2c9      	uxtb	r1, r1
   35cb2:	7803      	ldrb	r3, [r0, #0]
   35cb4:	2b00      	cmp	r3, #0
   35cb6:	d004      	beq.n	35cc2 <strchr+0x12>
   35cb8:	4299      	cmp	r1, r3
   35cba:	d100      	bne.n	35cbe <strchr+0xe>
   35cbc:	4770      	bx	lr
   35cbe:	3001      	adds	r0, #1
   35cc0:	e7f7      	b.n	35cb2 <strchr+0x2>
   35cc2:	424b      	negs	r3, r1
   35cc4:	4159      	adcs	r1, r3
   35cc6:	4249      	negs	r1, r1
   35cc8:	4008      	ands	r0, r1
   35cca:	e7f7      	b.n	35cbc <strchr+0xc>

00035ccc <__ascii_wctomb>:
   35ccc:	1e0b      	subs	r3, r1, #0
   35cce:	d004      	beq.n	35cda <__ascii_wctomb+0xe>
   35cd0:	2aff      	cmp	r2, #255	; 0xff
   35cd2:	d904      	bls.n	35cde <__ascii_wctomb+0x12>
   35cd4:	238a      	movs	r3, #138	; 0x8a
   35cd6:	6003      	str	r3, [r0, #0]
   35cd8:	3b8b      	subs	r3, #139	; 0x8b
   35cda:	0018      	movs	r0, r3
   35cdc:	4770      	bx	lr
   35cde:	700a      	strb	r2, [r1, #0]
   35ce0:	2301      	movs	r3, #1
   35ce2:	e7fa      	b.n	35cda <__ascii_wctomb+0xe>

00035ce4 <_write_r>:
   35ce4:	b570      	push	{r4, r5, r6, lr}
   35ce6:	0005      	movs	r5, r0
   35ce8:	0008      	movs	r0, r1
   35cea:	0011      	movs	r1, r2
   35cec:	2200      	movs	r2, #0
   35cee:	4c06      	ldr	r4, [pc, #24]	; (35d08 <_write_r+0x24>)
   35cf0:	6022      	str	r2, [r4, #0]
   35cf2:	001a      	movs	r2, r3
   35cf4:	f7f5 fa38 	bl	2b168 <_write>
   35cf8:	1c43      	adds	r3, r0, #1
   35cfa:	d103      	bne.n	35d04 <_write_r+0x20>
   35cfc:	6823      	ldr	r3, [r4, #0]
   35cfe:	2b00      	cmp	r3, #0
   35d00:	d000      	beq.n	35d04 <_write_r+0x20>
   35d02:	602b      	str	r3, [r5, #0]
   35d04:	bd70      	pop	{r4, r5, r6, pc}
   35d06:	46c0      	nop			; (mov r8, r8)
   35d08:	20005b10 	.word	0x20005b10

00035d0c <_close_r>:
   35d0c:	2300      	movs	r3, #0
   35d0e:	b570      	push	{r4, r5, r6, lr}
   35d10:	4c06      	ldr	r4, [pc, #24]	; (35d2c <_close_r+0x20>)
   35d12:	0005      	movs	r5, r0
   35d14:	0008      	movs	r0, r1
   35d16:	6023      	str	r3, [r4, #0]
   35d18:	f7f5 fa7a 	bl	2b210 <_close>
   35d1c:	1c43      	adds	r3, r0, #1
   35d1e:	d103      	bne.n	35d28 <_close_r+0x1c>
   35d20:	6823      	ldr	r3, [r4, #0]
   35d22:	2b00      	cmp	r3, #0
   35d24:	d000      	beq.n	35d28 <_close_r+0x1c>
   35d26:	602b      	str	r3, [r5, #0]
   35d28:	bd70      	pop	{r4, r5, r6, pc}
   35d2a:	46c0      	nop			; (mov r8, r8)
   35d2c:	20005b10 	.word	0x20005b10

00035d30 <_fstat_r>:
   35d30:	2300      	movs	r3, #0
   35d32:	b570      	push	{r4, r5, r6, lr}
   35d34:	4c06      	ldr	r4, [pc, #24]	; (35d50 <_fstat_r+0x20>)
   35d36:	0005      	movs	r5, r0
   35d38:	0008      	movs	r0, r1
   35d3a:	0011      	movs	r1, r2
   35d3c:	6023      	str	r3, [r4, #0]
   35d3e:	f7f5 fa71 	bl	2b224 <_fstat>
   35d42:	1c43      	adds	r3, r0, #1
   35d44:	d103      	bne.n	35d4e <_fstat_r+0x1e>
   35d46:	6823      	ldr	r3, [r4, #0]
   35d48:	2b00      	cmp	r3, #0
   35d4a:	d000      	beq.n	35d4e <_fstat_r+0x1e>
   35d4c:	602b      	str	r3, [r5, #0]
   35d4e:	bd70      	pop	{r4, r5, r6, pc}
   35d50:	20005b10 	.word	0x20005b10

00035d54 <_isatty_r>:
   35d54:	2300      	movs	r3, #0
   35d56:	b570      	push	{r4, r5, r6, lr}
   35d58:	4c06      	ldr	r4, [pc, #24]	; (35d74 <_isatty_r+0x20>)
   35d5a:	0005      	movs	r5, r0
   35d5c:	0008      	movs	r0, r1
   35d5e:	6023      	str	r3, [r4, #0]
   35d60:	f7f5 fa6e 	bl	2b240 <_isatty>
   35d64:	1c43      	adds	r3, r0, #1
   35d66:	d103      	bne.n	35d70 <_isatty_r+0x1c>
   35d68:	6823      	ldr	r3, [r4, #0]
   35d6a:	2b00      	cmp	r3, #0
   35d6c:	d000      	beq.n	35d70 <_isatty_r+0x1c>
   35d6e:	602b      	str	r3, [r5, #0]
   35d70:	bd70      	pop	{r4, r5, r6, pc}
   35d72:	46c0      	nop			; (mov r8, r8)
   35d74:	20005b10 	.word	0x20005b10

00035d78 <_lseek_r>:
   35d78:	b570      	push	{r4, r5, r6, lr}
   35d7a:	0005      	movs	r5, r0
   35d7c:	0008      	movs	r0, r1
   35d7e:	0011      	movs	r1, r2
   35d80:	2200      	movs	r2, #0
   35d82:	4c06      	ldr	r4, [pc, #24]	; (35d9c <_lseek_r+0x24>)
   35d84:	6022      	str	r2, [r4, #0]
   35d86:	001a      	movs	r2, r3
   35d88:	f7f5 fa63 	bl	2b252 <_lseek>
   35d8c:	1c43      	adds	r3, r0, #1
   35d8e:	d103      	bne.n	35d98 <_lseek_r+0x20>
   35d90:	6823      	ldr	r3, [r4, #0]
   35d92:	2b00      	cmp	r3, #0
   35d94:	d000      	beq.n	35d98 <_lseek_r+0x20>
   35d96:	602b      	str	r3, [r5, #0]
   35d98:	bd70      	pop	{r4, r5, r6, pc}
   35d9a:	46c0      	nop			; (mov r8, r8)
   35d9c:	20005b10 	.word	0x20005b10

00035da0 <memchr>:
   35da0:	b2c9      	uxtb	r1, r1
   35da2:	1882      	adds	r2, r0, r2
   35da4:	4290      	cmp	r0, r2
   35da6:	d101      	bne.n	35dac <memchr+0xc>
   35da8:	2000      	movs	r0, #0
   35daa:	4770      	bx	lr
   35dac:	7803      	ldrb	r3, [r0, #0]
   35dae:	428b      	cmp	r3, r1
   35db0:	d0fb      	beq.n	35daa <memchr+0xa>
   35db2:	3001      	adds	r0, #1
   35db4:	e7f6      	b.n	35da4 <memchr+0x4>

00035db6 <_realloc_r>:
   35db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35db8:	0007      	movs	r7, r0
   35dba:	000d      	movs	r5, r1
   35dbc:	0016      	movs	r6, r2
   35dbe:	2900      	cmp	r1, #0
   35dc0:	d105      	bne.n	35dce <_realloc_r+0x18>
   35dc2:	0011      	movs	r1, r2
   35dc4:	f7fe fe9e 	bl	34b04 <_malloc_r>
   35dc8:	0004      	movs	r4, r0
   35dca:	0020      	movs	r0, r4
   35dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35dce:	2a00      	cmp	r2, #0
   35dd0:	d103      	bne.n	35dda <_realloc_r+0x24>
   35dd2:	f7fe fe4d 	bl	34a70 <_free_r>
   35dd6:	0034      	movs	r4, r6
   35dd8:	e7f7      	b.n	35dca <_realloc_r+0x14>
   35dda:	f000 f827 	bl	35e2c <_malloc_usable_size_r>
   35dde:	002c      	movs	r4, r5
   35de0:	4286      	cmp	r6, r0
   35de2:	d9f2      	bls.n	35dca <_realloc_r+0x14>
   35de4:	0031      	movs	r1, r6
   35de6:	0038      	movs	r0, r7
   35de8:	f7fe fe8c 	bl	34b04 <_malloc_r>
   35dec:	1e04      	subs	r4, r0, #0
   35dee:	d0ec      	beq.n	35dca <_realloc_r+0x14>
   35df0:	0029      	movs	r1, r5
   35df2:	0032      	movs	r2, r6
   35df4:	f7fe fe18 	bl	34a28 <memcpy>
   35df8:	0029      	movs	r1, r5
   35dfa:	0038      	movs	r0, r7
   35dfc:	f7fe fe38 	bl	34a70 <_free_r>
   35e00:	e7e3      	b.n	35dca <_realloc_r+0x14>
	...

00035e04 <_read_r>:
   35e04:	b570      	push	{r4, r5, r6, lr}
   35e06:	0005      	movs	r5, r0
   35e08:	0008      	movs	r0, r1
   35e0a:	0011      	movs	r1, r2
   35e0c:	2200      	movs	r2, #0
   35e0e:	4c06      	ldr	r4, [pc, #24]	; (35e28 <_read_r+0x24>)
   35e10:	6022      	str	r2, [r4, #0]
   35e12:	001a      	movs	r2, r3
   35e14:	f7f5 f97e 	bl	2b114 <_read>
   35e18:	1c43      	adds	r3, r0, #1
   35e1a:	d103      	bne.n	35e24 <_read_r+0x20>
   35e1c:	6823      	ldr	r3, [r4, #0]
   35e1e:	2b00      	cmp	r3, #0
   35e20:	d000      	beq.n	35e24 <_read_r+0x20>
   35e22:	602b      	str	r3, [r5, #0]
   35e24:	bd70      	pop	{r4, r5, r6, pc}
   35e26:	46c0      	nop			; (mov r8, r8)
   35e28:	20005b10 	.word	0x20005b10

00035e2c <_malloc_usable_size_r>:
   35e2c:	1f0b      	subs	r3, r1, #4
   35e2e:	681b      	ldr	r3, [r3, #0]
   35e30:	1f18      	subs	r0, r3, #4
   35e32:	2b00      	cmp	r3, #0
   35e34:	da01      	bge.n	35e3a <_malloc_usable_size_r+0xe>
   35e36:	580b      	ldr	r3, [r1, r0]
   35e38:	18c0      	adds	r0, r0, r3
   35e3a:	4770      	bx	lr

00035e3c <pcWelcomeMessage>:
   35e3c:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   35e4c:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   35e5c:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   35e6c:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   35e7c:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   35e8c:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   35e9c:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   35eac:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   35ebc:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   35ecc:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   35edc:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   35eec:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   35efc:	0a0d 0000 656c 0064 656c 2064 6b5b 7965     ....led.led [key
   35f0c:	756e 5d6d 525b 5b5d 5d47 425b 3a5d 5320     num][R][G][B]: S
   35f1c:	7465 2073 6874 2065 6967 6576 206e 454c     ets the given LE
   35f2c:	2044 6f74 7420 6568 6720 7669 6e65 5220     D to the given R
   35f3c:	472c 422c 7620 6c61 6575 2e73 0a0d 0000     ,G,B values.....
   35f4c:	6567 6274 7475 6f74 006e 0000 6567 6274     getbutton...getb
   35f5c:	7475 6f74 3a6e 5020 6f72 6563 7373 7365     utton: Processes
   35f6c:	6120 646e 7020 6972 746e 2073 6874 2065      and prints the 
   35f7c:	4946 4f46 6220 7475 6f74 206e 7562 6666     FIFO button buff
   35f8c:	7265 6620 6f72 206d 6874 2065 6573 7365     er from the sees
   35f9c:	7761 0d2e 000a 0000 6567 6474 7369 6174     aw......getdista
   35fac:	636e 0065 6567 6474 7369 6174 636e 3a65     nce.getdistance:
   35fbc:	5220 7465 7275 736e 7420 6568 6420 7369      Returns the dis
   35fcc:	6174 636e 2065 7266 6d6f 7420 6568 5520     tance from the U
   35fdc:	2d53 3031 2030 6553 736e 726f 0d2e 000a     S-100 Sensor....
   35fec:	6167 656d 0000 0000 6167 656d 203a 6553     game....game: Se
   35ffc:	646e 2073 7564 6d6d 2079 6167 656d 6420     nds dummy game d
   3600c:	7461 0d61 000a 0000 3269 0063 3269 3a63     ata.....i2c.i2c:
   3601c:	5320 6163 736e 4920 4332 6220 7375 0a0d      Scans I2C bus..
   3602c:	0000 0000 6c63 0073 6c63 3a73 4320 656c     ....cls.cls: Cle
   3603c:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   3604c:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   3605c:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   3606c:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   3607c:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   3608c:	6341 6563 656c 6172 6974 6e6f 5b20 676d     Acceleration [mg
   3609c:	3a5d 2058 6425 5909 2520 0964 205a 6425     ]:X %d.Y %d.Z %d
   360ac:	0a0d 0000 6f4e 6420 7461 2061 6572 6461     ....No data read
   360bc:	2179 5320 6e65 6964 676e 6420 6d75 796d     y! Sending dummy
   360cc:	6420 7461 2061 0a0d 0000 0000 6325 325b      data ......%c[2
   360dc:	004a 0000 7245 6f72 2072 7564 6972 676e     J...Error during
   360ec:	7320 7465 4c20 4445 0d0a 0000 6553 2074      set LED....Set 
   360fc:	454c 2044 7573 6363 7365 0a73 000d 0000     LED success.....
   3610c:	7542 7474 6e6f 2320 6425 6920 2073 6572     Button #%d is re
   3611c:	656c 7361 6465 0a0d 0000 0000 7542 7474     leased......Butt
   3612c:	6e6f 2320 6425 6920 2073 7270 7365 6573     on #%d is presse
   3613c:	0d64 000a 6553 736e 726f 4520 7272 726f     d...Sensor Error
   3614c:	2520 2164 0a0d 0000 6944 7473 6e61 6563      %d!....Distance
   3615c:	203a 6425 6d20 0d6d 000a 0000 6944 7473     : %d mm.....Dist
   3616c:	6e61 6563 4420 7461 2061 514d 5454 5020     ance Data MQTT P
   3617c:	736f 0d74 000a 0000 7544 6d6d 2079 6147     ost.....Dummy Ga
   3618c:	656d 4420 7461 2061 514d 5454 5020 736f     me Data MQTT Pos
   3619c:	0d74 000a 2030 3120 2020 2032 3320 2020     t...0  1  2  3  
   361ac:	2034 3520 2020 2036 3720 2020 2038 3920     4  5  6  7  8  9
   361bc:	2020 2061 6220 2020 2063 6420 2020 2065       a  b  c  d  e 
   361cc:	6620 0a0d 0000 0000 3025 7832 203a 0000      f......%02x: ..
   361dc:	3025 7832 0020 0000                         %02x ...

000361e4 <xImuGetCommand>:
   361e4:	5e80 0003 5e84 0003 3209 0001 0000 0000     .^...^...2......

000361f4 <xOTAUCommand>:
   361f4:	5ea8 0003 5eac 0003 33b5 0001 0000 0000     .^...^...3......

00036204 <xResetCommand>:
   36204:	5edc 0003 5ee4 0003 33d5 0001 0000 0000     .^...^...3......

00036214 <xNeotrellisTurnLEDCommand>:
   36214:	5f00 0003 5f04 0003 33f5 0001 0004 0000     ._..._...3......

00036224 <xNeotrellisProcessButtonCommand>:
   36224:	5f4c 0003 5f58 0003 354d 0001 0000 0000     L_..X_..M5......

00036234 <xDistanceSensorGetDistance>:
   36234:	5fa4 0003 5fb0 0003 3651 0001 0000 0000     ._..._..Q6......

00036244 <xSendDummyGameData>:
   36244:	5fec 0003 5ff4 0003 36f5 0001 0000 0000     ._..._...6......

00036254 <xI2cScan>:
   36254:	6014 0003 6018 0003 3791 0001 0000 0000     .`...`...7......

00036264 <xClearScreen>:
   36264:	6030 0003 6034 0003 336d 0001 0000 0000     0`..4`..m3......
   36274:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   36284:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   36294:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   362a4:	676e 4320 6e6f 7274 6c6f 4420 7461 2061     ng Control Data 
   362b4:	7571 7565 7365 0d21 000a 0000 6f43 746e     queues!.....Cont
   362c4:	6f72 206c 6854 6572 6461 203a 6f43 736e     rol Thread: Cons
   362d4:	6d75 6465 6720 6d61 2065 6170 6b63 7465     umed game packet
   362e4:	0d21 000a 6147 656d 4f20 6576 2072 2021     !...Game Over ! 
   362f4:	5920 756f 6c20 736f 2e65 5420 7079 2065      You lose. Type 
   36304:	6572 6573 2074 6f74 7220 7365 6174 7472     reset to restart
   36314:	7420 6568 6720 6d61 2e65 0a0d 0000 0000      the game.......
   36324:	6f43 746e 6f72 206c 6854 6572 6461 203a     Control Thread: 
   36334:	6f43 6c75 2064 6f6e 2074 6573 646e 6720     Could not send g
   36344:	6d61 2065 6170 6b63 7465 0d21 000a 0000     ame packet!.....

00036354 <msgBaseGetHWID>:
   36354:	0100 0000                                   ....

00036358 <msgNeopixelPin>:
   36358:	010e 0003                                   ....

0003635c <msgNeopixelSpeed>:
   3635c:	020e 0001                                   ....

00036360 <msgNeopixelBufLength>:
   36360:	030e 3000                                   ...0

00036364 <msgKeypadEnableInt>:
   36364:	0210 0001                                   ....

00036368 <msgKeypadGetCount>:
   36368:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   36378:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   36388:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   36398:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   363a8:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   363b8:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   363c8:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   363d8:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   363e8:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   363f8:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   36408:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   36418:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   36428:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   36438:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   36448:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   36458:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   36468:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   36478:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   36488:	6574 2164 0000 0000 7542 7474 6e6f 5020     ted!....Button P
   36498:	6572 7373 6465 203a 6425 0a0d 0000 0000     ressed: %d......
   364a8:	6f43 7272 6365 2074 7542 7474 6e6f 203a     Correct Button: 
   364b8:	6425 0a0d 0000 0000                         %d......

000364c0 <main_mqtt_broker>:
   364c0:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   364d0:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   364e0:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   364f0:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   36500:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   36510:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   36520:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   36530:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   36540:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   36550:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   36560:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   36570:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   36580:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   36590:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   365a0:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   365b0:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   365c0:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   365d0:	7564 7e2f 6863 6865 2f6f 6554 7473 2e42     du/~cheho/TestB.
   365e0:	6962 006e 7473 726f 5f65 6966 656c 705f     bin.store_file_p
   365f0:	6361 656b 3a74 6520 706d 7974 6420 7461     acket: empty dat
   36600:	2e61 0a0d 0000 0000 7473 726f 5f65 6966     a.......store_fi
   36610:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   36620:	616e 656d 6920 2073 6e69 6176 696c 2e64     name is invalid.
   36630:	4420 776f 6c6e 616f 2064 6163 636e 6c65      Download cancel
   36640:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   36650:	656c 705f 6361 656b 3a74 6320 6572 7461     le_packet: creat
   36660:	6e69 2067 6966 656c 5b20 7325 0d5d 000a     ing file [%s]...
   36670:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   36680:	3a74 6620 6c69 2065 7263 6165 6974 6e6f     t: file creation
   36690:	6520 7272 726f 2021 6572 3a74 6425 0a0d      error! ret:%d..
   366a0:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   366b0:	6361 656b 3a74 6620 6c69 2065 7277 7469     acket: file writ
   366c0:	2065 7265 6f72 2c72 6420 776f 6c6e 616f     e error, downloa
   366d0:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   366e0:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   366f0:	3a74 7220 6365 6965 6576 5b64 6c25 5d75     t: received[%lu]
   36700:	202c 6966 656c 7320 7a69 5b65 6c25 5d75     , file size[%lu]
   36710:	0a0d 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   36720:	6361 656b 3a74 6620 6c69 2065 6f64 6e77     acket: file down
   36730:	6f6c 6461 6465 7320 6375 6563 7373 7566     loaded successfu
   36740:	6c6c 2e79 0a0d 0000 7468 7074 635f 696c     lly.....http_cli
   36750:	6e65 5f74 6163 6c6c 6162 6b63 203a 5448     ent_callback: HT
   36760:	5054 6320 696c 6e65 2074 6f73 6b63 7465     TP client socket
   36770:	6320 6e6f 656e 7463 6465 0d2e 000a 0000      connected......
   36780:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   36790:	6162 6b63 203a 6572 7571 7365 2074 6f63     back: request co
   367a0:	706d 656c 6574 2e64 0a0d 0000 7468 7074     mpleted.....http
   367b0:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   367c0:	203a 6572 6563 7669 6465 7220 7365 6f70     : received respo
   367d0:	736e 2065 7525 6420 7461 2061 6973 657a     nse %u data size
   367e0:	2520 0d75 000a 0000 7468 7074 635f 696c      %u.....http_cli
   367f0:	6e65 5f74 6163 6c6c 6162 6b63 203a 6964     ent_callback: di
   36800:	6373 6e6f 656e 7463 6f69 206e 6572 7361     sconnection reas
   36810:	6e6f 253a 0d64 000a 6572 6f73 766c 5f65     on:%d...resolve_
   36820:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
   36830:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
   36840:	0a0d 0a0d 0000 0000 6977 6966 635f 3a62     ........wifi_cb:
   36850:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
   36860:	4554 0d44 000a 0000 6977 6966 635f 3a62     TED.....wifi_cb:
   36870:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
   36880:	454e 5443 4445 0a0d 0000 0000 3231 3433     NECTED......1234
   36890:	3635 3837 0000 0000 794d 5069 6f68 656e     5678....MyiPhone
   368a0:	0000 0000 6977 6966 635f 3a62 4920 2050     ....wifi_cb: IP 
   368b0:	6461 7264 7365 2073 7369 2520 2e75 7525     address is %u.%u
   368c0:	252e 2e75 7525 0a0d 0000 0000 7245 6f72     .%u.%u......Erro
   368d0:	2072 6f63 6e6e 6365 6974 676e 7420 206f     r connecting to 
   368e0:	514d 5454 4220 6f72 656b 2172 0a0d 0000     MQTT Broker!....
   368f0:	6e69 7469 735f 6f74 6172 6567 203a 6c70     init_storage: pl
   36900:	6165 6573 7020 756c 2067 6e61 5320 2f44     ease plug an SD/
   36910:	4d4d 2043 6163 6472 6920 206e 6c73 746f     MMC card in slot
   36920:	2e2e 0d2e 000a 0000 6e69 7469 735f 6f74     ........init_sto
   36930:	6172 6567 203a 4453 4320 7261 2064 6e69     rage: SD Card in
   36940:	7473 6c61 206c 6166 6c69 6465 0d2e 000a     stall failed....
   36950:	6e69 7469 735f 6f74 6172 6567 203a 7274     init_storage: tr
   36960:	2079 6e75 6c70 6775 6120 646e 7220 2d65     y unplug and re-
   36970:	6c70 6775 7420 6568 6320 7261 2e64 0a0d     plug the card...
   36980:	0000 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36990:	203a 6f6d 6e75 6974 676e 5320 2044 6163     : mounting SD ca
   369a0:	6472 2e2e 0d2e 000a 6e69 7469 735f 6f74     rd......init_sto
   369b0:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   369c0:	6e75 2074 6166 6c69 6465 2021 7228 7365     unt failed! (res
   369d0:	2520 2964 0a0d 0000 6e69 7469 735f 6f74      %d)....init_sto
   369e0:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   369f0:	6e75 2074 4b4f 0d2e 000a 0000 6f63 666e     unt OK......conf
   36a00:	6769 7275 5f65 7468 7074 635f 696c 6e65     igure_http_clien
   36a10:	3a74 4820 5454 2050 6c63 6569 746e 6920     t: HTTP client i
   36a20:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   36a30:	6c69 6465 2021 7228 7365 2520 2964 0a0d     iled! (res %d)..
   36a40:	0000 0000 0a0d 2520 2a2e 0073 6772 2862     ...... %.*s.rgb(
   36a50:	0000 0000 0a0d 4752 2042 6425 2520 2064     ......RGB %d %d 
   36a60:	6425 0a0d 0000 0000 227b 6167 656d 3a22     %d......{"game":
   36a70:	005b 0000 0a0d 6147 656d 6d20 7365 6173     [.....Game messa
   36a80:	6567 7220 6365 6965 6576 2164 0a0d 0000     ge received!....
   36a90:	2e25 732a 0000 0000 0a0d 6150 7372 6465     %.*s......Parsed
   36aa0:	4320 6d6f 616d 646e 203a 0000 6425 002c      Command: ..%d,.
   36ab0:	0a0d 6553 746e 7020 616c 2079 6f74 6320     ..Sent play to c
   36ac0:	6e6f 7274 6c6f 0d21 000a 0000 0a0d 6147     ontrol!.......Ga
   36ad0:	656d 6d20 7365 6173 6567 7220 6365 6965     me message recei
   36ae0:	6576 2064 7562 2074 6f6e 2074 6e75 6564     ved but not unde
   36af0:	7372 6f74 646f 0d21 000a 0000 0a0d 4d49     rstood!.......IM
   36b00:	2055 6f74 6970 2063 6572 6563 7669 6465     U topic received
   36b10:	0d21 000a 0a0d 6944 7473 6e61 6563 7420     !.....Distance t
   36b20:	706f 6369 7220 6365 6965 6576 2164 0a0d     opic received!..
   36b30:	0000 0000 3e20 203e 0000 0000 3150 4c5f     .... >> ....P1_L
   36b40:	4445 455f 4553 3135 5f36 3154 0036 0000     ED_ESE516_T16...
   36b50:	6166 736c 0065 0000 7274 6575 0000 0000     false...true....
   36b60:	0a0d 6f43 6e6e 6365 6974 676e 7420 206f     ..Connecting to 
   36b70:	7242 6b6f 7265 2e2e 002e 0000 7242 4a73     Broker......BrsJ
   36b80:	4e42 6f56 4251 376c 0000 0000 7472 7974     BNVoQBl7....rtty
   36b90:	626f 6a65 0000 0000 514d 5454 2020 7245     obej....MQTT  Er
   36ba0:	6f72 2072 202d 4f4e 2054 6f43 6e6e 6365     ror - NOT Connec
   36bb0:	6574 2064 6f74 6220 6f72 656b 0d72 000a     ted to broker...
   36bc0:	514d 5454 4320 6e6f 656e 7463 6465 7420     MQTT Connected t
   36bd0:	206f 7262 6b6f 7265 0a0d 0000 6f43 6e6e     o broker....Conn
   36be0:	6365 2074 6166 6c69 7420 206f 6573 7672     ect fail to serv
   36bf0:	7265 2528 2973 2021 6572 7274 2079 7469     er(%s)! retry it
   36c00:	6120 7475 6d6f 7461 6369 6c61 796c 0d2e      automatically..
   36c10:	000a 0000 3150 475f 4d41 5f45 5345 3545     ....P1_GAME_ESE5
   36c20:	3631 545f 3631 0000 3150 495f 554d 455f     16_T16..P1_IMU_E
   36c30:	4553 3135 5f36 3154 0036 0000 514d 5454     SE516_T16...MQTT
   36c40:	4320 6e6f 656e 7463 6465 0a0d 0000 0000      Connected......
   36c50:	514d 5454 6220 6f72 656b 2072 6564 6c63     MQTT broker decl
   36c60:	6e69 2065 6f79 7275 6120 6363 7365 2173     ine your access!
   36c70:	6520 7272 726f 6320 646f 2065 6425 0a0d      error code %d..
   36c80:	0000 0000 514d 5454 6420 7369 6f63 6e6e     ....MQTT disconn
   36c90:	6365 6574 0d64 000a 514d 5454 6920 696e     ected...MQTT ini
   36ca0:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
   36cb0:	6465 202e 7245 6f72 2072 6f63 6564 6920     ed. Error code i
   36cc0:	2073 2528 2964 0a0d 0000 0000 514d 5454     s (%d)......MQTT
   36cd0:	7220 6765 7369 6574 2072 6163 6c6c 6162      register callba
   36ce0:	6b63 6620 6961 656c 2e64 4520 7272 726f     ck failed. Error
   36cf0:	6320 646f 2065 7369 2820 6425 0d29 000a      code is (%d)...
   36d00:	227b 2264 7b3a 7422 6d65 2270 253a 7d64     {"d":{"temp":%d}
   36d10:	007d 0000 465b 4941 5d4c 7220 7365 2520     }...[FAIL] res %
   36d20:	0d64 000a 6c46 6761 2e41 7874 2074 6461     d...FlagA.txt ad
   36d30:	6564 2164 0a0d 0000 3a30 6c46 6761 2e41     ded!....0:FlagA.
   36d40:	7874 0074 6f43 6e6e 6365 6574 2064 6f74     txt.Connected to
   36d50:	4d20 5451 2054 7242 6b6f 7265 0d21 000a      MQTT Broker!...
   36d60:	227b 6d69 7875 3a22 6425 202c 6922 756d     {"imux":%d, "imu
   36d70:	2279 203a 6425 202c 6922 756d 227a 203a     y": %d, "imuz": 
   36d80:	6425 007d 6425 0000 7d5d 0000 0a0d 0000     %d}.%d..]}......
   36d90:	3250 475f 4d41 5f45 5345 3545 3631 545f     P2_GAME_ESE516_T
   36da0:	3631 0000 5245 4f52 2052 6e49 7469 6169     16..ERROR Initia
   36db0:	696c 697a 676e 5720 6669 2069 6144 6174     lizing Wifi Data
   36dc0:	7120 6575 6575 2173 0a0d 0000 5345 3545      queues!....ESE5
   36dd0:	3631 2d20 5720 6669 2069 6e49 7469 4320     16 - Wifi Init C
   36de0:	646f 0d65 000a 0000 616d 6e69 203a 326d     ode.....main: m2
   36df0:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
   36e00:	6520 7272 726f 2021 7228 7365 2520 2964      error! (res %d)
   36e10:	0a0d 0000 616d 6e69 203a 6f63 6e6e 6365     ....main: connec
   36e20:	6974 676e 7420 206f 6957 6946 4120 2050     ting to WiFi AP 
   36e30:	7325 2e2e 0d2e 000a 3150 545f 4d45 4550     %s......P1_TEMPE
   36e40:	4152 5554 4552 455f 4553 3135 5f36 3154     RATURE_ESE516_T1
   36e50:	0036 0000 514d 5454 7320 6e65 2064 7325     6...MQTT send %s
   36e60:	0a0d 0000 6300 0001 630c 0001 631e 0001     .....c...c...c..
   36e70:	6374 0001 6394 0001 6568 706c 0000 0000     tc...c..help....
   36e80:	0a0d 6568 706c 0d3a 200a 694c 7473 2073     ..help:.. Lists 
   36e90:	6c61 206c 6874 2065 6572 6967 7473 7265     all the register
   36ea0:	6465 6320 6d6f 616d 646e 0d73 0d0a 000a     ed commands.....
   36eb0:	6e49 6f63 7272 6365 2074 6f63 6d6d 6e61     Incorrect comman
   36ec0:	2064 6170 6172 656d 6574 2872 2973 202e     d parameter(s). 
   36ed0:	4520 746e 7265 2220 6568 706c 2022 6f74      Enter "help" to
   36ee0:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   36ef0:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   36f00:	7364 0d2e 0d0a 000a 6f43 6d6d 6e61 2064     ds......Command 
   36f10:	6f6e 2074 6572 6f63 6e67 7369 6465 202e     not recognised. 
   36f20:	4520 746e 7265 2720 6568 706c 2027 6f74      Enter 'help' to
   36f30:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   36f40:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   36f50:	7364 0d2e 0d0a 000a                         ds......

00036f58 <xHelpCommand>:
   36f58:	6e78 0003 6e80 0003 8085 0001 0000 0000     xn...n..........
   36f68:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   36f78:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   36f88:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   36f98:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   36fa8:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   36fb8:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   36fc8:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   36fd8:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   36fe8:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   36ff8:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   37008:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   37018:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   37028:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   37038:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   37048:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   37058:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   37068:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37078:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   37088:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37098:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   370a8:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   370b8:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   370c8:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   370d8:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   370e8:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   370f8:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   37108:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37118:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   37128:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   37138:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   37148:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   37158:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   37168:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   37178:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   37188:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   37198:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   371a8:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   371b8:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   371c8:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   371d8:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   371e8:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   371f8:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   37208:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   37218:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   37228:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   37238:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   37248:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   37258:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   37268:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   37278:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   37288:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   37298:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   372a8:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   372b8:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   372c8:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   372d8:	6365 6374 616c 7373 0021 0000 87aa 0001     ectclass!.......
   372e8:	87a2 0001 87a6 0001 879a 0001 879e 0001     ................
   372f8:	87ae 0001 87b2 0001 87b6 0001 87ba 0001     ................
   37308:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   37318:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   37328:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   37338:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   37348:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   37358:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   37368:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   37378:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   37388:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   37398:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   373a8:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   373b8:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   373c8:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   373d8:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   373e8:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   373f8:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   37408:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   37418:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   37428:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   37438:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   37448:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   37458:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   37468:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   37478:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   37488:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   37498:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   374a8:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   374b8:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   374c8:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   374d8:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   374e8:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   374f8:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   37508:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   37518:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   37528:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   37538:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   37548:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   37558:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   37568:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   37578:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   37588:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   37598:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   375a8:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   375b8:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   375c8:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   375d8:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   375e8:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   375f8:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   37608:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   37618:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   37628:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   37638:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   37648:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   37658:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   37668:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   37678:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   37688:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   37698:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   376a8:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   376b8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   376c8:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   376d8:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   376e8:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   376f8:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37708:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37718:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   37728:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37738:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   37748:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   37758:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   37768:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37778:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37788:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   37798:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   377a8:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   377b8:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   377c8:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   377d8:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   377e8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   377f8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37808:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   37818:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   37828:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   37838:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   37848:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   37858:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   37868:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37878:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37888:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   37898:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   378a8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   378b8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   378c8:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   378d8:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   378e8:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   378f8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37908:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37918:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   37928:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   37938:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   37948:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37958:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37968:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   37978:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37988:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   37998:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   379a8:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   379b8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   379c8:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   379d8:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   379e8:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   379f8:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   37a08:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   37a18:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   37a28:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   37a38:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   37a48:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37a58:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   37a68:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   37a78:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   37a88:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   37a98:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   37aa8:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   37ab8:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   37ac8:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   37ad8:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37ae8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37af8:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   37b08:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   37b18:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37b28:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   37b38:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   37b48:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   37b58:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   37b68:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   37b78:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   37b88:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37b98:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   37ba8:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   37bb8:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   37bc8:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   37bd8:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   37be8:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   37bf8:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   37c08:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   37c18:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   37c28:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37c38:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   37c48:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   37c58:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   37c68:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37c78:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   37c88:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   37c98:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   37ca8:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37cb8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37cc8:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   37cd8:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   37ce8:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   37cf8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37d08:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   37d18:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   37d28:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37d38:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37d48:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   37d58:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   37d68:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37d78:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37d88:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   37d98:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   37da8:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37db8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37dc8:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   37dd8:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   37de8:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37df8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37e08:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   37e18:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   37e28:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   37e38:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   37e48:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   37e58:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   37e68:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   37e78:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37e88:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37e98:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37ea8:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   37eb8:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37ec8:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37ed8:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37ee8:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   37ef8:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   37f08:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   37f18:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   37f28:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   37f38:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37f48:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   37f58:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   37f68:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   37f78:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   37f88:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   37f98:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   37fa8:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   37fb8:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   37fc8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37fd8:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   37fe8:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   37ff8:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   38008:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   38018:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   38028:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   38038:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38048:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   38058:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   38068:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   38078:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   38088:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   38098:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   380a8:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   380b8:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   380c8:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   380d8:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   380e8:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   380f8:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   38108:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   38118:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   38128:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   38138:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   38148:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   38158:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38168:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   38178:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   38188:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   38198:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   381a8:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   381b8:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   381c8:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   381d8:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   381e8:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   381f8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38208:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   38218:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   38228:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   38238:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   38248:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   38258:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   38268:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   38278:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   38288:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   38298:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   382a8:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   382b8:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   382c8:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   382d8:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   382e8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   382f8:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   38308:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   38318:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   38328:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   38338:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   38348:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   38358:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   38368:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   38378:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   38388:	0000 0000 6d54 2072 7653 0063 d848 0001     ....Tmr Svc.H...
   38398:	d848 0001 d848 0001 d8d6 0001 d8a0 0001     H...H...........
   383a8:	d8ca 0001 d848 0001 d848 0001 d8d6 0001     ....H...H.......
   383b8:	d8a0 0001                                   ....

000383bc <sd_mmc_trans_units>:
   383bc:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

000383d8 <sd_trans_multipliers>:
   383d8:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   383e8:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   383f8:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   38408:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00038418 <mmc_trans_multipliers>:
   38418:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   38428:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   38438:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   38448:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   38458:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38468:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   38478:	746c 6320 646d 000a 000d 0000               lt cmd......

00038484 <__FUNCTION__.17099>:
   38484:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   38494:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   384a4:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   384b4:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   384c4:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   384d4:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   384e4:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   384f4:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   38504:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   38514:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   38524:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   38534:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   38544:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   38554:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   38564:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   38574:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   38584:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   38594:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   385a4:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   385b4:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   385c4:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   385d4:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   385e4:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   385f4:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   38604:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   38614:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   38624:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   38634:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   38644:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   38654:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   38664:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   38674:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   38684:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   38694:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   386a4:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   386b4:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   386c4:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   386d4:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   386e4:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   386f4:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   38704:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   38714:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   38724:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   38734:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   38744:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   38754:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   38764:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   38774:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   38784:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   38794:	203f 6425 000a 0000 19e8 0002 19b8 0002     ? %d............
   387a4:	19b0 0002 19c8 0002 19c0 0002 19e0 0002     ................
   387b4:	19d0 0002 19d8 0002                         ........

000387bc <__FUNCTION__.17967>:
   387bc:	6968 5f66 6573 646e 0000 0000               hif_send....

000387c8 <__FUNCTION__.17977>:
   387c8:	6968 5f66 7369 0072                         hif_isr.

000387d0 <__FUNCTION__.17986>:
   387d0:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

000387e0 <__FUNCTION__.17998>:
   387e0:	6968 5f66 6572 6563 7669 0065               hif_receive.

000387ec <__FUNCTION__.18014>:
   387ec:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   387fc:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   3880c:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   3881c:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   3882c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3883c:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   3884c:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   3885c:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   3886c:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   3887c:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   3888c:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   3889c:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   388ac:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   388bc:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   388cc:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   388dc:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   388ec:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   388fc:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   3890c:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   3891c:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   3892c:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   3893c:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   3894c:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   3895c:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   3896c:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   3897c:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   3898c:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   3899c:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   389ac:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   389bc:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   389cc:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   389dc:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   389ec:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   389fc:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   38a0c:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   38a1c:	000a 0000 3831 303a 3a34 3834 0000 0000     ....18:04:48....
   38a2c:	614d 2079 3720 3220 3230 0032 7244 7669     May  7 2022.Driv
   38a3c:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   38a4c:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   38a5c:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   38a6c:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   38a7c:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   38a8c:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   38a9c:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   38aac:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   38abc:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   38acc:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   38adc:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   38aec:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   38afc:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   38b0c:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   38b1c:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   38b2c:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   38b3c:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   38b4c:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   38b5c:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   38b6c:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   38b7c:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   38b8c:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   38b9c:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   38bac:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   38bbc:	4220 6675 6566 0a72 0000 0000                Buffer.....

00038bc8 <__FUNCTION__.17949>:
   38bc8:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00038bd4 <__FUNCTION__.17978>:
   38bd4:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00038be4 <__FUNCTION__.18009>:
   38be4:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   38bf4:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   38c04:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   38c14:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   38c24:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   38c34:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   38c44:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   38c54:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   38c64:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   38c74:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00038c84 <__FUNCTION__.17806>:
   38c84:	6863 7069 775f 6b61 0065 0000               chip_wake...

00038c90 <__FUNCTION__.17855>:
   38c90:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   38ca0:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   38cb0:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   38cc0:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   38cd0:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   38ce0:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   38cf0:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   38d00:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   38d10:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   38d20:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   38d30:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   38d40:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   38d50:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   38d60:	6920 696e 2074 7562 0a73 0000                init bus...

00038d6c <__FUNCTION__.17853>:
   38d6c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00038d78 <__FUNCTION__.17860>:
   38d78:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00038d88 <crc7_syndrome_table>:
   38d88:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   38d98:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   38da8:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   38db8:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   38dc8:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   38dd8:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   38de8:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   38df8:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   38e08:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   38e18:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   38e28:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   38e38:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   38e48:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   38e58:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   38e68:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   38e78:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   38e88:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38e98:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   38ea8:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   38eb8:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   38ec8:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38ed8:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   38ee8:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38ef8:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38f08:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   38f18:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   38f28:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   38f38:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   38f48:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   38f58:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   38f68:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   38f78:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   38f88:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   38f98:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   38fa8:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   38fb8:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38fc8:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   38fd8:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   38fe8:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38ff8:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   39008:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   39018:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   39028:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39038:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   39048:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   39058:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39068:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   39078:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   39088:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   39098:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   390a8:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   390b8:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   390c8:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   390d8:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   390e8:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   390f8:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39108:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   39118:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   39128:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   39138:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   39148:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39158:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   39168:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   39178:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   39188:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   39198:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   391a8:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   391b8:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   391c8:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   391d8:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   391e8:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   391f8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   39208:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   39218:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   39228:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   39238:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   39248:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   39258:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   39268:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39278:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   39288:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   39298:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   392a8:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   392b8:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   392c8:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   392d8:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   392e8:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   392f8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   39308:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   39318:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   39328:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   39338:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   39348:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   39358:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   39368:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   39378:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   39388:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   39398:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   393a8:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   393b8:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   393c8:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   393d8:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   393e8:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   393f8:	2e2e 0a2e 0000 0000 3610 0002 3610 0002     .........6...6..
   39408:	36a0 0002 3564 0002 35aa 0002 35cc 0002     .6..d5...5...5..
   39418:	3652 0002 3652 0002 370c 0002 3538 0002     R6..R6...7..85..
   39428:	3766 0002 3766 0002 3766 0002 3766 0002     f7..f7..f7..f7..
   39438:	35ee 0002 3b70 0002 3b70 0002 3bf8 0002     .5..p;..p;...;..
   39448:	3ad4 0002 3b16 0002 3b34 0002 3bae 0002     .:...;..4;...;..
   39458:	3bae 0002 3c5a 0002 3aac 0002 3caa 0002     .;..Z<...:...<..
   39468:	3caa 0002 3caa 0002 3caa 0002 3b52 0002     .<...<...<..R;..

00039478 <__FUNCTION__.17128>:
   39478:	7073 5f69 6d63 0064                         spi_cmd.

00039480 <__FUNCTION__.17135>:
   39480:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00039490 <__FUNCTION__.17144>:
   39490:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0003949c <__FUNCTION__.17177>:
   3949c:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   394ac:	0000 0000                                   ....

000394b0 <__FUNCTION__.17223>:
   394b0:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

000394c0 <__FUNCTION__.17235>:
   394c0:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

000394d0 <__FUNCTION__.17246>:
   394d0:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

000394e0 <__FUNCTION__.17258>:
   394e0:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

000394f0 <__FUNCTION__.17269>:
   394f0:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

000394fc <__FUNCTION__.17290>:
   394fc:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   3950c:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   3951c:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   3952c:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   3953c:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   3954c:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   3955c:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   3956c:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   3957c:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   3958c:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   3959c:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   395ac:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   395bc:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   395cc:	2074 2230 0000 0000                         t 0"....

000395d4 <lun_desc>:
   395d4:	f26d 0001 f2c5 0001 f311 0001 f35d 0001     m...........]...
   395e4:	f38d 0001 f411 0001 f4a1 0001 95bc 0003     ................
   395f4:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   39604:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   39614:	958e 0002 9608 0002 9608 0002 95ac 0002     ................
   39624:	95a6 0002 95b2 0002 9594 0002 95b8 0002     ................
   39634:	95ee 0002 97f0 0002 9840 0002 9840 0002     ........@...@...
   39644:	983c 0002 97e2 0002 9802 0002 97d2 0002     <...............
   39654:	9814 0002 9826 0002 988e 0002 98bc 0002     ....&...........
   39664:	98bc 0002 98b8 0002 9888 0002 9894 0002     ................
   39674:	9882 0002 989a 0002 98a0 0002               ............

00039680 <tcc_modules>:
   39680:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0003968c <_tcc_gclk_ids>:
   3968c:	1a1a 001b                                   ....

00039690 <_tcc_apbcmasks>:
   39690:	0100 0000 0200 0000 0400 0000               ............

0003969c <_tcc_maxs>:
   3969c:	ffff 00ff ffff 00ff ffff 0000               ............

000396a8 <_tcc_cc_nums>:
   396a8:	0204 0002                                   ....

000396ac <_tcc_ow_nums>:
   396ac:	0408 0002                                   ....

000396b0 <_tcc_intflag>:
   396b0:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   396c0:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   396d0:	0000 0001 0000 0002 0000 0004 0000 0008     ................

000396e0 <LfnOfs>:
   396e0:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   396f0:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   39700:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   39710:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   39720:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   39730:	5441 2020 2020 0020                         AT     .

00039738 <excvt.4558>:
   39738:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   39748:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   39758:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   39768:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   39778:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   39788:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   39798:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   397a8:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

000397b8 <Tbl>:
   397b8:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   397c8:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   397d8:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   397e8:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   397f8:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   39808:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   39818:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   39828:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   39838:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   39848:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   39858:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   39868:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   39878:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   39888:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   39898:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   398a8:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

000398b8 <tbl_lower.4308>:
   398b8:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   398c8:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   398d8:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   398e8:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   398f8:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   39908:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   39918:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   39928:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   39938:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   39948:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   39958:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   39968:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   39978:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   39988:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   39998:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   399a8:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   399b8:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   399c8:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   399d8:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   399e8:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   399f8:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   39a08:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   39a18:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   39a28:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   39a38:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   39a48:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   39a58:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   39a68:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   39a78:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   39a88:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00039a98 <tbl_upper.4309>:
   39a98:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   39aa8:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   39ab8:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   39ac8:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   39ad8:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   39ae8:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   39af8:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   39b08:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   39b18:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   39b28:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   39b38:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   39b48:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   39b58:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   39b68:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   39b78:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   39b88:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   39b98:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   39ba8:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   39bb8:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   39bc8:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   39bd8:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   39be8:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   39bf8:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   39c08:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   39c18:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   39c28:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   39c38:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   39c48:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   39c58:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   39c68:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   39c78:	ebfa 0002 ebfa 0002 ebfa 0002 ea88 0002     ................
   39c88:	ebfa 0002 eb72 0002 ebfa 0002 ebfa 0002     ....r...........
   39c98:	ebfa 0002 ebfa 0002 ebfa 0002 ebfa 0002     ................
   39ca8:	ebfa 0002 ebec 0002 514d 4354 0000 0000     ........MQTC....
   39cb8:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   39cc8:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   39d08:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   39d20:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   39d60:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   39d70:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   39d80:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   39d90:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   39da0:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   39db0:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   39dc0:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   39dd0:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   39de0:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   39df0:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   39e00:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   39e10:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   39e20:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   39e30:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   39e40:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   39e50:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   39e60:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   39e70:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   39e80:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   39e90:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   39ea0:	5448 5054 002f 0000 0d31 0000 0cee 0003     HTTP/...1.......
   39eb0:	0ce8 0003 0ce2 0003 0cdc 0003 0cf4 0003     ................
   39ec0:	0cd6 0003 0cf4 0003 0cd0 0003 0cca 0003     ................
   39ed0:	0cf4 0003 0cc4 0003 0cc4 0003 0cbe 0003     ................
   39ee0:	0cb8 0003 0cb2 0003 2000 4200 2400 4200     ......... .B.$.B
   39ef0:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   39f00:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   39f10:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   39f20:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   39f30:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39f40:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   39f50:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   39f60:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   39f70:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39f80:	676e 5320 6565 6173 2177 0a0d 0000 0000     ng Seesaw!......
   39f90:	6e49 7469 6169 696c 657a 2064 6553 7365     Initialized Sees
   39fa0:	7761 0d21 000a 0000 6143 6e6e 746f 6620     aw!.....Cannot f
   39fb0:	6e69 2064 4d49 2155 0a0d 0000 4d49 2055     ind IMU!....IMU 
   39fc0:	6f66 6e75 2164 0a0d 0000 0000 4d49 2055     found!......IMU 
   39fd0:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   39fe0:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   39ff0:	696c 657a 4920 554d 0a0d 0000 6548 7061     lize IMU....Heap
   3a000:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   3a010:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   3a020:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   3a030:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   3a040:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3a050:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3a060:	7265 7320 6174 7472 6e69 2067 4c43 3a49     er starting CLI:
   3a070:	2520 0d64 000a 0000 4957 4946 545f 5341      %d.....WIFI_TAS
   3a080:	004b 0000 5245 3a52 5720 4649 2049 6174     K...ERR: WIFI ta
   3a090:	6b73 6320 756f 646c 6e20 746f 6220 2065     sk could not be 
   3a0a0:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3a0b0:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   3a0c0:	6e69 2067 4957 4946 203a 6425 0a0d 0000     ing WIFI: %d....
   3a0d0:	4955 5420 7361 006b 5245 3a52 5520 2049     UI Task.ERR: UI 
   3a0e0:	6174 6b73 6320 756f 646c 6e20 746f 6220     task could not b
   3a0f0:	2065 6e69 7469 6169 696c 657a 2164 0a0d     e initialized!..
   3a100:	0000 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   3a110:	6174 7472 6e69 2067 4955 5420 7361 3a6b     tarting UI Task:
   3a120:	2520 0d64 000a 0000 6f43 746e 6f72 206c      %d.....Control 
   3a130:	6154 6b73 0000 0000 5245 3a52 4320 6e6f     Task....ERR: Con
   3a140:	7274 6c6f 7420 7361 206b 6f63 6c75 2064     trol task could 
   3a150:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3a160:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3a170:	7265 7320 6174 7472 6e69 2067 6f43 746e     er starting Cont
   3a180:	6f72 206c 6154 6b73 203a 6425 0a0d 0000     rol Task: %d....
   3a190:	7245 6f72 2072 6e6f 6d20 6d65 726f 2079     Error on memory 
   3a1a0:	6c61 6f6c 6163 6974 6e6f 6f20 206e 5246     allocation on FR
   3a1b0:	4545 5452 534f 0d21 000a 0000 7245 6f72     EERTOS!.....Erro
   3a1c0:	2072 6e6f 7320 6174 6b63 6f20 6576 6672     r on stack overf
   3a1d0:	6f6c 2077 6e6f 4620 4552 5245 4f54 2153     low on FREERTOS!
   3a1e0:	0a0d 0000 2ef0 0003 2e40 0003 2e40 0003     ........@...@...
   3a1f0:	2e3e 0003 2ee2 0003 2ee2 0003 2ed8 0003     >...............
   3a200:	2e3e 0003 2ee2 0003 2ed8 0003 2ee2 0003     >...............
   3a210:	2e3e 0003 2ee8 0003 2ee8 0003 2ee8 0003     >...............
   3a220:	2f78 0003 38fc 0003 38de 0003 3898 0003     x/...8...8...8..
   3a230:	37b6 0003 3898 0003 38d0 0003 3898 0003     .7...8...8...8..
   3a240:	37b6 0003 38de 0003 38de 0003 38d0 0003     .7...8...8...8..
   3a250:	37b6 0003 37ae 0003 37ae 0003 37ae 0003     .7...7...7...7..
   3a260:	3b14 0003 3f5c 0003 3e1c 0003 3e1c 0003     .;..\?...>...>..
   3a270:	3e18 0003 3f34 0003 3f34 0003 3f26 0003     .>..4?..4?..&?..
   3a280:	3e18 0003 3f34 0003 3f26 0003 3f34 0003     .>..4?..&?..4?..
   3a290:	3e18 0003 3f3c 0003 3f3c 0003 3f3c 0003     .>..<?..<?..<?..
   3a2a0:	4140 0003                                   @A..

0003a2a4 <_global_impure_ptr>:
   3a2a4:	0128 2000                                   (.. 

0003a2a8 <__sf_fake_stderr>:
	...

0003a2c8 <__sf_fake_stdin>:
	...

0003a2e8 <__sf_fake_stdout>:
	...
   3a308:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3a318:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3a328:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3a338:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003a345 <_ctype_>:
   3a345:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3a355:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3a365:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3a375:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3a385:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3a395:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3a3a5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3a3b5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3a3c5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003a448 <_init>:
   3a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a44a:	46c0      	nop			; (mov r8, r8)
   3a44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3a44e:	bc08      	pop	{r3}
   3a450:	469e      	mov	lr, r3
   3a452:	4770      	bx	lr

0003a454 <__init_array_start>:
   3a454:	000120dd 	.word	0x000120dd

0003a458 <_fini>:
   3a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a45a:	46c0      	nop			; (mov r8, r8)
   3a45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3a45e:	bc08      	pop	{r3}
   3a460:	469e      	mov	lr, r3
   3a462:	4770      	bx	lr

0003a464 <__fini_array_start>:
   3a464:	000120b5 	.word	0x000120b5
